{"nodes":[{"pos":[1048,1062],"content":"ViaHeaderValue","needQuote":true,"nodes":[{"content":"ViaHeaderValue","pos":[0,14]}]},{"pos":[2234,2264],"content":"ViaHeaderValue(String, String)","needQuote":true,"nodes":[{"content":"ViaHeaderValue(String, String)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The protocol version of the received protocol.&lt;/p&gt;\\n","pos":[3105,3162],"source":"\\n<p>The protocol version of the received protocol.</p>\\n"},{"content":"\\n&lt;p&gt;The host and port that the request or response was received by.&lt;/p&gt;\\n","pos":[3231,3305],"source":"\\n<p>The host and port that the request or response was received by.</p>\\n"},{"pos":[3766,3804],"content":"ViaHeaderValue(String, String, String)","needQuote":true,"nodes":[{"content":"ViaHeaderValue(String, String, String)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The protocol version of the received protocol.&lt;/p&gt;\\n","pos":[4705,4762],"source":"\\n<p>The protocol version of the received protocol.</p>\\n"},{"content":"\\n&lt;p&gt;The host and port that the request or response was received by.&lt;/p&gt;\\n","pos":[4831,4905],"source":"\\n<p>The host and port that the request or response was received by.</p>\\n"},{"content":"\\n&lt;p&gt;The protocol name of the received protocol.&lt;/p&gt;\\n","pos":[4976,5030],"source":"\\n<p>The protocol name of the received protocol.</p>\\n"},{"pos":[5541,5587],"content":"ViaHeaderValue(String, String, String, String)","needQuote":true,"nodes":[{"content":"ViaHeaderValue(String, String, String, String)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;The protocol version of the received protocol.&lt;/p&gt;\\n","pos":[6538,6595],"source":"\\n<p>The protocol version of the received protocol.</p>\\n"},{"content":"\\n&lt;p&gt;The host and port that the request or response was received by.&lt;/p&gt;\\n","pos":[6664,6738],"source":"\\n<p>The host and port that the request or response was received by.</p>\\n"},{"content":"\\n&lt;p&gt;The protocol name of the received protocol.&lt;/p&gt;\\n","pos":[6809,6863],"source":"\\n<p>The protocol name of the received protocol.</p>\\n"},{"content":"\\n&lt;p&gt;The comment field used to identify the software of the recipient proxy or gateway.&lt;/p&gt;\\n","pos":[6929,7022],"source":"\\n<p>The comment field used to identify the software of the recipient proxy or gateway.</p>\\n"},{"pos":[7374,7381],"content":"Comment","needQuote":true,"nodes":[{"content":"Comment","pos":[0,7]}]},{"pos":[8599,8611],"content":"ProtocolName","needQuote":true,"nodes":[{"content":"ProtocolName","pos":[0,12]}]},{"pos":[9760,9775],"content":"ProtocolVersion","needQuote":true,"nodes":[{"content":"ProtocolVersion","pos":[0,15]}]},{"pos":[10930,10940],"content":"ReceivedBy","needQuote":true,"nodes":[{"content":"ReceivedBy","pos":[0,10]}]},{"pos":[12162,12176],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare with the current object.&lt;/p&gt;\\n","pos":[13045,13102],"source":"\\n<p>The object to compare with the current object.</p>\\n"},{"pos":[13856,13869],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[15172,15185],"content":"Parse(String)","needQuote":true,"nodes":[{"content":"Parse(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A string that represents via header value information.&lt;/p&gt;\\n","pos":[15964,16029],"source":"\\n<p>A string that represents via header value information.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is a &lt;strong&gt;null&lt;/strong&gt; reference.&lt;/p&gt;\\n","pos":[16471,16536],"source":"\\n<p>\\n<em>input</em> is a <strong>null</strong> reference.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is not valid via header value information.&lt;/p&gt;\\n","pos":[16629,16699],"source":"\\n<p>\\n<em>input</em> is not valid via header value information.</p>\\n"},{"pos":[17043,17053],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[18484,18520],"content":"TryParse(String, out ViaHeaderValue)","needQuote":true,"nodes":[{"content":"TryParse(String, out ViaHeaderValue)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The string to validate.&lt;/p&gt;\\n","pos":[19423,19457],"source":"\\n<p>The string to validate.</p>\\n"},{"pos":[20517,20540],"content":"System.Net.Http.Headers","needQuote":true,"nodes":[{"content":"System.Net.Http.Headers","pos":[0,23]}]},{"pos":[20722,20728],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20915,20937],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[21085,21091],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21158,21159],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21209,21215],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21276,21277]},{"pos":[21332,21338],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21398,21399],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21496,21502],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21569,21570],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21620,21626],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21687,21688]},{"pos":[21743,21749],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21809,21810],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22055,22086],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[22252,22267],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[22343,22344],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22394,22400],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22461,22462]},{"pos":[22517,22523],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22583,22584],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22690,22705],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[22781,22782],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22832,22838],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22899,22900]},{"pos":[22955,22961],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23021,23022],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23248,23257],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[23350,23357],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[23425,23426],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23453,23454],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23523,23530],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[23598,23599],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23626,23627],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23802,23819],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[23928,23943],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[24019,24020],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24047,24048],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24125,24140],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[24216,24217],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24244,24245],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24390,24396],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[24527,24533],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[24706,24720],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[24839,24845],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24912,24913],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24963,24969],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25029,25030],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25113,25119],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25186,25187],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25237,25243],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25303,25304],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25477,25484],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[25650,25663],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[25764,25775],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[25847,25848],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25875,25876],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25949,25960],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[26032,26033],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26060,26061],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26221,26226],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[26410,26424],"content":"ViaHeaderValue","needQuote":true,"nodes":[{"content":"ViaHeaderValue","pos":[0,14]}]},{"pos":[26642,26652],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[26747,26755],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[26824,26825],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26852,26853],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26923,26931],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[27000,27001],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27028,27029],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27182,27203],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[27402,27417],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]}],"content":"items:\n- uid: System.Net.Http.Headers.ViaHeaderValue\n  commentId: T:System.Net.Http.Headers.ViaHeaderValue\n  id: ViaHeaderValue\n  parent: System.Net.Http.Headers\n  children:\n  - System.Net.Http.Headers.ViaHeaderValue.#ctor(System.String,System.String)\n  - System.Net.Http.Headers.ViaHeaderValue.#ctor(System.String,System.String,System.String)\n  - System.Net.Http.Headers.ViaHeaderValue.#ctor(System.String,System.String,System.String,System.String)\n  - System.Net.Http.Headers.ViaHeaderValue.Comment\n  - System.Net.Http.Headers.ViaHeaderValue.Equals(System.Object)\n  - System.Net.Http.Headers.ViaHeaderValue.GetHashCode\n  - System.Net.Http.Headers.ViaHeaderValue.Parse(System.String)\n  - System.Net.Http.Headers.ViaHeaderValue.ProtocolName\n  - System.Net.Http.Headers.ViaHeaderValue.ProtocolVersion\n  - System.Net.Http.Headers.ViaHeaderValue.ReceivedBy\n  - System.Net.Http.Headers.ViaHeaderValue.ToString\n  - System.Net.Http.Headers.ViaHeaderValue.TryParse(System.String,System.Net.Http.Headers.ViaHeaderValue@)\n  langs:\n  - csharp\n  - vb\n  name: ViaHeaderValue\n  fullName: System.Net.Http.Headers.ViaHeaderValue\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ViaHeaderValue\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 585\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Represents the value of a Via header.</p>\\n\"\n  syntax:\n    content: public class ViaHeaderValue\n    content.vb: Public Class ViaHeaderValue\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: ViaHeaderValue\n- uid: System.Net.Http.Headers.ViaHeaderValue.#ctor(System.String,System.String)\n  commentId: M:System.Net.Http.Headers.ViaHeaderValue.#ctor(System.String,System.String)\n  id: '#ctor(System.String,System.String)'\n  parent: System.Net.Http.Headers.ViaHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: ViaHeaderValue(String, String)\n  fullName: System.Net.Http.Headers.ViaHeaderValue.ViaHeaderValue(System.String, System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 587\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Http.Headers.ViaHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public ViaHeaderValue(string protocolVersion, string receivedBy)\n    content.vb: Public Sub New(protocolVersion As String, receivedBy As String)\n    parameters:\n    - id: protocolVersion\n      type: System.String\n      description: \"\\n<p>The protocol version of the received protocol.</p>\\n\"\n    - id: receivedBy\n      type: System.String\n      description: \"\\n<p>The host and port that the request or response was received by.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ViaHeaderValue.ViaHeaderValue(String, String)\n- uid: System.Net.Http.Headers.ViaHeaderValue.#ctor(System.String,System.String,System.String)\n  commentId: M:System.Net.Http.Headers.ViaHeaderValue.#ctor(System.String,System.String,System.String)\n  id: '#ctor(System.String,System.String,System.String)'\n  parent: System.Net.Http.Headers.ViaHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: ViaHeaderValue(String, String, String)\n  fullName: System.Net.Http.Headers.ViaHeaderValue.ViaHeaderValue(System.String, System.String, System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 588\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Http.Headers.ViaHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public ViaHeaderValue(string protocolVersion, string receivedBy, string protocolName)\n    content.vb: Public Sub New(protocolVersion As String, receivedBy As String, protocolName As String)\n    parameters:\n    - id: protocolVersion\n      type: System.String\n      description: \"\\n<p>The protocol version of the received protocol.</p>\\n\"\n    - id: receivedBy\n      type: System.String\n      description: \"\\n<p>The host and port that the request or response was received by.</p>\\n\"\n    - id: protocolName\n      type: System.String\n      description: \"\\n<p>The protocol name of the received protocol.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ViaHeaderValue.ViaHeaderValue(String, String, String)\n- uid: System.Net.Http.Headers.ViaHeaderValue.#ctor(System.String,System.String,System.String,System.String)\n  commentId: M:System.Net.Http.Headers.ViaHeaderValue.#ctor(System.String,System.String,System.String,System.String)\n  id: '#ctor(System.String,System.String,System.String,System.String)'\n  parent: System.Net.Http.Headers.ViaHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: ViaHeaderValue(String, String, String, String)\n  fullName: System.Net.Http.Headers.ViaHeaderValue.ViaHeaderValue(System.String, System.String, System.String, System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 589\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Http.Headers.ViaHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public ViaHeaderValue(string protocolVersion, string receivedBy, string protocolName, string comment)\n    content.vb: Public Sub New(protocolVersion As String, receivedBy As String, protocolName As String, comment As String)\n    parameters:\n    - id: protocolVersion\n      type: System.String\n      description: \"\\n<p>The protocol version of the received protocol.</p>\\n\"\n    - id: receivedBy\n      type: System.String\n      description: \"\\n<p>The host and port that the request or response was received by.</p>\\n\"\n    - id: protocolName\n      type: System.String\n      description: \"\\n<p>The protocol name of the received protocol.</p>\\n\"\n    - id: comment\n      type: System.String\n      description: \"\\n<p>The comment field used to identify the software of the recipient proxy or gateway.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ViaHeaderValue.ViaHeaderValue(String, String, String, String)\n- uid: System.Net.Http.Headers.ViaHeaderValue.Comment\n  commentId: P:System.Net.Http.Headers.ViaHeaderValue.Comment\n  id: Comment\n  parent: System.Net.Http.Headers.ViaHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Comment\n  fullName: System.Net.Http.Headers.ViaHeaderValue.Comment\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Comment\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 590\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Gets the comment field used to identify the software of the recipient proxy or gateway.</p>\\n\"\n  syntax:\n    content: public string Comment { get; }\n    content.vb: Public ReadOnly Property Comment As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>Returns <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The comment field used to identify the software of the recipient proxy or gateway.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ViaHeaderValue.Comment\n- uid: System.Net.Http.Headers.ViaHeaderValue.ProtocolName\n  commentId: P:System.Net.Http.Headers.ViaHeaderValue.ProtocolName\n  id: ProtocolName\n  parent: System.Net.Http.Headers.ViaHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: ProtocolName\n  fullName: System.Net.Http.Headers.ViaHeaderValue.ProtocolName\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ProtocolName\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 591\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Gets the protocol name of the received protocol.</p>\\n\"\n  syntax:\n    content: public string ProtocolName { get; }\n    content.vb: Public ReadOnly Property ProtocolName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>Returns <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The protocol name.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ViaHeaderValue.ProtocolName\n- uid: System.Net.Http.Headers.ViaHeaderValue.ProtocolVersion\n  commentId: P:System.Net.Http.Headers.ViaHeaderValue.ProtocolVersion\n  id: ProtocolVersion\n  parent: System.Net.Http.Headers.ViaHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: ProtocolVersion\n  fullName: System.Net.Http.Headers.ViaHeaderValue.ProtocolVersion\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ProtocolVersion\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 592\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Gets the protocol version of the received protocol.</p>\\n\"\n  syntax:\n    content: public string ProtocolVersion { get; }\n    content.vb: Public ReadOnly Property ProtocolVersion As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>Returns <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The protocol version.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ViaHeaderValue.ProtocolVersion\n- uid: System.Net.Http.Headers.ViaHeaderValue.ReceivedBy\n  commentId: P:System.Net.Http.Headers.ViaHeaderValue.ReceivedBy\n  id: ReceivedBy\n  parent: System.Net.Http.Headers.ViaHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: ReceivedBy\n  fullName: System.Net.Http.Headers.ViaHeaderValue.ReceivedBy\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReceivedBy\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 593\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Gets the host and port that the request or response was received by.</p>\\n\"\n  syntax:\n    content: public string ReceivedBy { get; }\n    content.vb: Public ReadOnly Property ReceivedBy As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>Returns <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The host and port that the request or response was received by.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ViaHeaderValue.ReceivedBy\n- uid: System.Net.Http.Headers.ViaHeaderValue.Equals(System.Object)\n  commentId: M:System.Net.Http.Headers.ViaHeaderValue.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Net.Http.Headers.ViaHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Net.Http.Headers.ViaHeaderValue.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 594\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Determines whether the specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the current <xref href=\\\"System.Net.Http.Headers.ViaHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare with the current object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if the specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the current object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: ViaHeaderValue.Equals(Object)\n- uid: System.Net.Http.Headers.ViaHeaderValue.GetHashCode\n  commentId: M:System.Net.Http.Headers.ViaHeaderValue.GetHashCode\n  id: GetHashCode\n  parent: System.Net.Http.Headers.ViaHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Net.Http.Headers.ViaHeaderValue.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 595\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Serves as a hash function for an <xref href=\\\"System.Net.Http.Headers.ViaHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>Returns <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>Returns a hash code for the current object.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: ViaHeaderValue.GetHashCode()\n- uid: System.Net.Http.Headers.ViaHeaderValue.Parse(System.String)\n  commentId: M:System.Net.Http.Headers.ViaHeaderValue.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Net.Http.Headers.ViaHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Parse(String)\n  fullName: System.Net.Http.Headers.ViaHeaderValue.Parse(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Parse\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 596\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Converts a string to an <xref href=\\\"System.Net.Http.Headers.ViaHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public static ViaHeaderValue Parse(string input)\n    content.vb: Public Shared Function Parse(input As String) As ViaHeaderValue\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>A string that represents via header value information.</p>\\n\"\n    return:\n      type: System.Net.Http.Headers.ViaHeaderValue\n      description: \"\\n<p>Returns <xref href=\\\"System.Net.Http.Headers.ViaHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>An <xref href=\\\"System.Net.Http.Headers.ViaHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> is a <strong>null</strong> reference.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>input</em> is not valid via header value information.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ViaHeaderValue.Parse(String)\n- uid: System.Net.Http.Headers.ViaHeaderValue.ToString\n  commentId: M:System.Net.Http.Headers.ViaHeaderValue.ToString\n  id: ToString\n  parent: System.Net.Http.Headers.ViaHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Net.Http.Headers.ViaHeaderValue.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 597\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Returns a string that represents the current <xref href=\\\"System.Net.Http.Headers.ViaHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>Returns <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>A string that represents the current object.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: ViaHeaderValue.ToString()\n- uid: System.Net.Http.Headers.ViaHeaderValue.TryParse(System.String,System.Net.Http.Headers.ViaHeaderValue@)\n  commentId: M:System.Net.Http.Headers.ViaHeaderValue.TryParse(System.String,System.Net.Http.Headers.ViaHeaderValue@)\n  id: TryParse(System.String,System.Net.Http.Headers.ViaHeaderValue@)\n  parent: System.Net.Http.Headers.ViaHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: TryParse(String, out ViaHeaderValue)\n  fullName: System.Net.Http.Headers.ViaHeaderValue.TryParse(System.String, out System.Net.Http.Headers.ViaHeaderValue)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryParse\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 598\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Determines whether a string is valid <xref href=\\\"System.Net.Http.Headers.ViaHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> information.</p>\\n\"\n  syntax:\n    content: public static bool TryParse(string input, out ViaHeaderValue parsedValue)\n    content.vb: Public Shared Function TryParse(input As String, ByRef parsedValue As ViaHeaderValue) As Boolean\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to validate.</p>\\n\"\n    - id: parsedValue\n      type: System.Net.Http.Headers.ViaHeaderValue\n      description: \"\\n<p>The <xref href=\\\"System.Net.Http.Headers.ViaHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> version of the string.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if <em>input</em> is valid <xref href=\\\"System.Net.Http.Headers.ViaHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> information; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Net.Http.Headers.ViaHeaderValue.TryParse(System.String, ByRef System.Net.Http.Headers.ViaHeaderValue)\n  name.vb: TryParse(String, ByRef ViaHeaderValue)\n  nameWithType: ViaHeaderValue.TryParse(String, out ViaHeaderValue)\n  nameWithType.vb: ViaHeaderValue.TryParse(String, ByRef ViaHeaderValue)\nreferences:\n- uid: System.Net.Http.Headers\n  isExternal: false\n  name: System.Net.Http.Headers\n  fullName: System.Net.Http.Headers\n  commentId: N:System.Net.Http.Headers\n  nameWithType: System.Net.Http.Headers\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Net.Http.Headers.ViaHeaderValue\n  parent: System.Net.Http.Headers\n  isExternal: false\n  name: ViaHeaderValue\n  fullName: System.Net.Http.Headers.ViaHeaderValue\n  commentId: T:System.Net.Http.Headers.ViaHeaderValue\n  nameWithType: ViaHeaderValue\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n"}