{"nodes":[{"pos":[16117,16126],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[17736,17832],"content":"Aggregate<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TSource, TSource>>)","needQuote":true,"nodes":[{"content":"Aggregate&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, TSource, TSource&gt;&gt;)","pos":[0,96],"source":"Aggregate<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TSource, TSource>>)"}]},{"content":"\\n&lt;p&gt;A sequence to aggregate over.&lt;/p&gt;\\n","pos":[18880,18920],"source":"\\n<p>A sequence to aggregate over.</p>\\n"},{"content":"\\n&lt;p&gt;An accumulator function to apply to each element.&lt;/p&gt;\\n","pos":[19048,19108],"source":"\\n<p>An accumulator function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[19168,19223],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The final accumulator value.&lt;/p&gt;\\n","pos":[19281,19320],"source":"\\n<p>The final accumulator value.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;func&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[19439,19510],"source":"\\n<p>\\n<em>source</em> or <em>func</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[19623,19673],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[20799,20929],"content":"Aggregate<TSource, TAccumulate>(IQueryable<TSource>, TAccumulate, Expressions.Expression<Func<TAccumulate, TSource, TAccumulate>>)","needQuote":true,"nodes":[{"content":"Aggregate&lt;TSource, TAccumulate&gt;(IQueryable&lt;TSource&gt;, TAccumulate, Expressions.Expression&lt;Func&lt;TAccumulate, TSource, TAccumulate&gt;&gt;)","pos":[0,130],"source":"Aggregate<TSource, TAccumulate>(IQueryable<TSource>, TAccumulate, Expressions.Expression<Func<TAccumulate, TSource, TAccumulate>>)"}]},{"content":"\\n&lt;p&gt;A sequence to aggregate over.&lt;/p&gt;\\n","pos":[22167,22207],"source":"\\n<p>A sequence to aggregate over.</p>\\n"},{"content":"\\n&lt;p&gt;The initial accumulator value.&lt;/p&gt;\\n","pos":[22272,22313],"source":"\\n<p>The initial accumulator value.</p>\\n"},{"content":"\\n&lt;p&gt;An accumulator function to invoke on each element.&lt;/p&gt;\\n","pos":[22449,22510],"source":"\\n<p>An accumulator function to invoke on each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[22570,22625],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the accumulator value.&lt;/p&gt;\\n","pos":[22669,22714],"source":"\\n<p>The type of the accumulator value.</p>\\n"},{"content":"\\n&lt;p&gt;The final accumulator value.&lt;/p&gt;\\n","pos":[22776,22815],"source":"\\n<p>The final accumulator value.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;func&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[22934,23005],"source":"\\n<p>\\n<em>source</em> or <em>func</em> is <strong>null</strong>.</p>\\n"},{"pos":[24438,24629],"content":"Aggregate<TSource, TAccumulate, TResult>(IQueryable<TSource>, TAccumulate, Expressions.Expression<Func<TAccumulate, TSource, TAccumulate>>, Expressions.Expression<Func<TAccumulate, TResult>>)","needQuote":true,"nodes":[{"content":"Aggregate&lt;TSource, TAccumulate, TResult&gt;(IQueryable&lt;TSource&gt;, TAccumulate, Expressions.Expression&lt;Func&lt;TAccumulate, TSource, TAccumulate&gt;&gt;, Expressions.Expression&lt;Func&lt;TAccumulate, TResult&gt;&gt;)","pos":[0,191],"source":"Aggregate<TSource, TAccumulate, TResult>(IQueryable<TSource>, TAccumulate, Expressions.Expression<Func<TAccumulate, TSource, TAccumulate>>, Expressions.Expression<Func<TAccumulate, TResult>>)"}]},{"content":"\\n&lt;p&gt;A sequence to aggregate over.&lt;/p&gt;\\n","pos":[26151,26191],"source":"\\n<p>A sequence to aggregate over.</p>\\n"},{"content":"\\n&lt;p&gt;The initial accumulator value.&lt;/p&gt;\\n","pos":[26256,26297],"source":"\\n<p>The initial accumulator value.</p>\\n"},{"content":"\\n&lt;p&gt;An accumulator function to invoke on each element.&lt;/p&gt;\\n","pos":[26433,26494],"source":"\\n<p>An accumulator function to invoke on each element.</p>\\n"},{"content":"\\n&lt;p&gt;A function to transform the final accumulator value into the result value.&lt;/p&gt;\\n","pos":[26620,26705],"source":"\\n<p>A function to transform the final accumulator value into the result value.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[26765,26820],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the accumulator value.&lt;/p&gt;\\n","pos":[26864,26909],"source":"\\n<p>The type of the accumulator value.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the resulting value.&lt;/p&gt;\\n","pos":[26949,26992],"source":"\\n<p>The type of the resulting value.</p>\\n"},{"content":"\\n&lt;p&gt;The transformed final accumulator value.&lt;/p&gt;\\n","pos":[27050,27101],"source":"\\n<p>The transformed final accumulator value.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;func&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[27220,27312],"source":"\\n<p>\\n<em>source</em> or <em>func</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[28846,28927],"content":"All<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)","needQuote":true,"nodes":[{"content":"All&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Boolean&gt;&gt;)","pos":[0,81],"source":"All<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)"}]},{"content":"\\n&lt;p&gt;A sequence whose elements to test for a condition.&lt;/p&gt;\\n","pos":[29957,30018],"source":"\\n<p>A sequence whose elements to test for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[30146,30205],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[30265,30320],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[30381,30563],"source":"\\n<p>\\n<strong>true</strong> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[30682,30758],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"pos":[31618,31651],"content":"Any<TSource>(IQueryable<TSource>)","needQuote":true,"nodes":[{"content":"Any&lt;TSource&gt;(IQueryable&lt;TSource&gt;)","pos":[0,33],"source":"Any<TSource>(IQueryable<TSource>)"}]},{"content":"\\n&lt;p&gt;A sequence to check for being empty.&lt;/p&gt;\\n","pos":[32467,32514],"source":"\\n<p>A sequence to check for being empty.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[32574,32629],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the source sequence contains any elements; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[32690,32805],"source":"\\n<p>\\n<strong>true</strong> if the source sequence contains any elements; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[32924,32978],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[33806,33887],"content":"Any<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)","needQuote":true,"nodes":[{"content":"Any&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Boolean&gt;&gt;)","pos":[0,81],"source":"Any<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)"}]},{"content":"\\n&lt;p&gt;A sequence whose elements to test for a condition.&lt;/p&gt;\\n","pos":[34914,34975],"source":"\\n<p>A sequence whose elements to test for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[35103,35162],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[35222,35277],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if any elements in the source sequence pass the test in the specified predicate; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[35338,35488],"source":"\\n<p>\\n<strong>true</strong> if any elements in the source sequence pass the test in the specified predicate; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[35607,35683],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"pos":[36567,36591],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;A sequence to convert.&lt;/p&gt;\\n","pos":[37535,37568],"source":"\\n<p>A sequence to convert.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[38154,38208],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[38686,38730],"content":"AsQueryable<TElement>(IEnumerable<TElement>)","needQuote":true,"nodes":[{"content":"AsQueryable&lt;TElement&gt;(IEnumerable&lt;TElement&gt;)","pos":[0,44],"source":"AsQueryable<TElement>(IEnumerable<TElement>)"}]},{"content":"\\n&lt;p&gt;A sequence to convert.&lt;/p&gt;\\n","pos":[39817,39850],"source":"\\n<p>A sequence to convert.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[39911,39966],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[40300,40354],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[41073,41101],"content":"Average(IQueryable<Decimal>)","needQuote":true,"nodes":[{"content":"Average(IQueryable&lt;Decimal&gt;)","pos":[0,28],"source":"Average(IQueryable<Decimal>)"}]},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[42182,42231],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[42350,42404],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[42517,42567],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[43202,43229],"content":"Average(IQueryable<Double>)","needQuote":true,"nodes":[{"content":"Average(IQueryable&lt;Double&gt;)","pos":[0,27],"source":"Average(IQueryable<Double>)"}]},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[44301,44350],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[44469,44523],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[44636,44686],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[45314,45340],"content":"Average(IQueryable<Int32>)","needQuote":true,"nodes":[{"content":"Average(IQueryable&lt;Int32&gt;)","pos":[0,26],"source":"Average(IQueryable<Int32>)"}]},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[46406,46455],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[46574,46628],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[46741,46791],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[47415,47441],"content":"Average(IQueryable<Int64>)","needQuote":true,"nodes":[{"content":"Average(IQueryable&lt;Int64&gt;)","pos":[0,26],"source":"Average(IQueryable<Int64>)"}]},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[48505,48554],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[48673,48727],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[48840,48890],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[49571,49609],"content":"Average(IQueryable<Nullable<Decimal>>)","needQuote":true,"nodes":[{"content":"Average(IQueryable&lt;Nullable&lt;Decimal&gt;&gt;)","pos":[0,38],"source":"Average(IQueryable<Nullable<Decimal>>)"}]},{"content":"\\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the source sequence is empty or contains only &lt;strong&gt;null&lt;/strong&gt; values.&lt;/p&gt;\\n","pos":[50766,50919],"source":"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only <strong>null</strong> values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[51038,51092],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[51834,51871],"content":"Average(IQueryable<Nullable<Double>>)","needQuote":true,"nodes":[{"content":"Average(IQueryable&lt;Nullable&lt;Double&gt;&gt;)","pos":[0,37],"source":"Average(IQueryable<Nullable<Double>>)"}]},{"content":"\\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the source sequence is empty or contains only &lt;strong&gt;null&lt;/strong&gt; values.&lt;/p&gt;\\n","pos":[53019,53172],"source":"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only <strong>null</strong> values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[53291,53345],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[54080,54116],"content":"Average(IQueryable<Nullable<Int32>>)","needQuote":true,"nodes":[{"content":"Average(IQueryable&lt;Nullable&lt;Int32&gt;&gt;)","pos":[0,36],"source":"Average(IQueryable<Nullable<Int32>>)"}]},{"content":"\\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the source sequence is empty or contains only &lt;strong&gt;null&lt;/strong&gt; values.&lt;/p&gt;\\n","pos":[55258,55411],"source":"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only <strong>null</strong> values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[55530,55584],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[56315,56351],"content":"Average(IQueryable<Nullable<Int64>>)","needQuote":true,"nodes":[{"content":"Average(IQueryable&lt;Nullable&lt;Int64&gt;&gt;)","pos":[0,36],"source":"Average(IQueryable<Nullable<Int64>>)"}]},{"content":"\\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the source sequence is empty or contains only &lt;strong&gt;null&lt;/strong&gt; values.&lt;/p&gt;\\n","pos":[57491,57644],"source":"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only <strong>null</strong> values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[57763,57817],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[58551,58588],"content":"Average(IQueryable<Nullable<Single>>)","needQuote":true,"nodes":[{"content":"Average(IQueryable&lt;Nullable&lt;Single&gt;&gt;)","pos":[0,37],"source":"Average(IQueryable<Nullable<Single>>)"}]},{"content":"\\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the source sequence is empty or contains only &lt;strong&gt;null&lt;/strong&gt; values.&lt;/p&gt;\\n","pos":[59734,59887],"source":"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only <strong>null</strong> values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[60006,60060],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[60747,60774],"content":"Average(IQueryable<Single>)","needQuote":true,"nodes":[{"content":"Average(IQueryable&lt;Single&gt;)","pos":[0,27],"source":"Average(IQueryable<Single>)"}]},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[61844,61893],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[62012,62066],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[62179,62229],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[63043,63128],"content":"Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Decimal>>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Decimal&gt;&gt;)","pos":[0,85],"source":"Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Decimal>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate an average.&lt;/p&gt;\\n","pos":[64317,64387],"source":"\\n<p>A sequence of values that are used to calculate an average.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element.&lt;/p&gt;\\n","pos":[64514,64572],"source":"\\n<p>A projection function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[64632,64687],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[64748,64797],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[64916,64991],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[65104,65154],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[66243,66327],"content":"Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Double>>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Double&gt;&gt;)","pos":[0,84],"source":"Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Double>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the average of.&lt;/p&gt;\\n","pos":[67510,67570],"source":"\\n<p>A sequence of values to calculate the average of.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element.&lt;/p&gt;\\n","pos":[67696,67754],"source":"\\n<p>A projection function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[67814,67869],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[67929,67978],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[68097,68172],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[68285,68335],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[69417,69500],"content":"Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32>>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Int32&gt;&gt;)","pos":[0,83],"source":"Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the average of.&lt;/p&gt;\\n","pos":[70679,70739],"source":"\\n<p>A sequence of values to calculate the average of.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element.&lt;/p&gt;\\n","pos":[70864,70922],"source":"\\n<p>A projection function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[70982,71037],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[71097,71146],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[71265,71340],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[71453,71503],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[72581,72664],"content":"Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int64>>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Int64&gt;&gt;)","pos":[0,83],"source":"Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int64>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the average of.&lt;/p&gt;\\n","pos":[73841,73901],"source":"\\n<p>A sequence of values to calculate the average of.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element.&lt;/p&gt;\\n","pos":[74026,74084],"source":"\\n<p>A projection function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[74144,74199],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[74259,74308],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[74427,74502],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[74615,74665],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[75800,75895],"content":"Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Decimal>>>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Nullable&lt;Decimal&gt;&gt;&gt;)","pos":[0,95],"source":"Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Decimal>>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the average of.&lt;/p&gt;\\n","pos":[77117,77177],"source":"\\n<p>A sequence of values to calculate the average of.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element.&lt;/p&gt;\\n","pos":[77321,77379],"source":"\\n<p>A projection function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[77439,77494],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the &lt;em&gt;source&lt;/em&gt; sequence is empty or contains only &lt;strong&gt;null&lt;/strong&gt; values.&lt;/p&gt;\\n","pos":[77572,77734],"source":"\\n<p>The average of the sequence of values, or <strong>null</strong> if the <em>source</em> sequence is empty or contains only <strong>null</strong> values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[77853,77928],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[79124,79218],"content":"Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Double>>>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Nullable&lt;Double&gt;&gt;&gt;)","pos":[0,94],"source":"Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Double>>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the average of.&lt;/p&gt;\\n","pos":[80434,80494],"source":"\\n<p>A sequence of values to calculate the average of.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element.&lt;/p&gt;\\n","pos":[80637,80695],"source":"\\n<p>A projection function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[80755,80810],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the &lt;em&gt;source&lt;/em&gt; sequence is empty or contains only &lt;strong&gt;null&lt;/strong&gt; values.&lt;/p&gt;\\n","pos":[80887,81049],"source":"\\n<p>The average of the sequence of values, or <strong>null</strong> if the <em>source</em> sequence is empty or contains only <strong>null</strong> values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[81168,81243],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[82432,82525],"content":"Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Int32>>>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Nullable&lt;Int32&gt;&gt;&gt;)","pos":[0,93],"source":"Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Int32>>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the average of.&lt;/p&gt;\\n","pos":[83737,83797],"source":"\\n<p>A sequence of values to calculate the average of.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element.&lt;/p&gt;\\n","pos":[83939,83997],"source":"\\n<p>A projection function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[84057,84112],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the &lt;em&gt;source&lt;/em&gt; sequence is empty or contains only &lt;strong&gt;null&lt;/strong&gt; values.&lt;/p&gt;\\n","pos":[84189,84351],"source":"\\n<p>The average of the sequence of values, or <strong>null</strong> if the <em>source</em> sequence is empty or contains only <strong>null</strong> values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[84470,84545],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[85730,85823],"content":"Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Int64>>>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Nullable&lt;Int64&gt;&gt;&gt;)","pos":[0,93],"source":"Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Int64>>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the average of.&lt;/p&gt;\\n","pos":[87033,87093],"source":"\\n<p>A sequence of values to calculate the average of.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element.&lt;/p&gt;\\n","pos":[87235,87293],"source":"\\n<p>A projection function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[87353,87408],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the &lt;em&gt;source&lt;/em&gt; sequence is empty or contains only &lt;strong&gt;null&lt;/strong&gt; values.&lt;/p&gt;\\n","pos":[87485,87647],"source":"\\n<p>The average of the sequence of values, or <strong>null</strong> if the <em>source</em> sequence is empty or contains only <strong>null</strong> values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[87766,87841],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[89029,89123],"content":"Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Single>>>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Nullable&lt;Single&gt;&gt;&gt;)","pos":[0,94],"source":"Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Single>>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the average of.&lt;/p&gt;\\n","pos":[90337,90397],"source":"\\n<p>A sequence of values to calculate the average of.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element.&lt;/p&gt;\\n","pos":[90540,90598],"source":"\\n<p>A projection function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[90658,90713],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the &lt;em&gt;source&lt;/em&gt; sequence is empty or contains only &lt;strong&gt;null&lt;/strong&gt; values.&lt;/p&gt;\\n","pos":[90790,90952],"source":"\\n<p>The average of the sequence of values, or <strong>null</strong> if the <em>source</em> sequence is empty or contains only <strong>null</strong> values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[91071,91146],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[92287,92371],"content":"Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Single>>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Single&gt;&gt;)","pos":[0,84],"source":"Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Single>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the average of.&lt;/p&gt;\\n","pos":[93552,93612],"source":"\\n<p>A sequence of values to calculate the average of.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element.&lt;/p&gt;\\n","pos":[93738,93796],"source":"\\n<p>A projection function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[93856,93911],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[93971,94020],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[94139,94214],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[94327,94377],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[95237,95262],"content":"Cast<TResult>(IQueryable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IQueryable)","pos":[0,25],"source":"Cast<TResult>(IQueryable)"}]},{"content":"\\n&lt;p&gt;The type to convert the elements of &lt;em&gt;source&lt;/em&gt; to.&lt;/p&gt;\\n","pos":[96353,96419],"source":"\\n<p>The type to convert the elements of <em>source</em> to.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[96799,96853],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;An element in the sequence cannot be cast to type &lt;em&gt;TResult&lt;/em&gt;.&lt;/p&gt;\\n","pos":[96956,97034],"source":"\\n<p>An element in the sequence cannot be cast to type <em>TResult</em>.</p>\\n"},{"pos":[97758,97816],"content":"Concat<TSource>(IQueryable<TSource>, IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"Concat&lt;TSource&gt;(IQueryable&lt;TSource&gt;, IEnumerable&lt;TSource&gt;)","pos":[0,58],"source":"Concat<TSource>(IQueryable<TSource>, IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;The first sequence to concatenate.&lt;/p&gt;\\n","pos":[98767,98812],"source":"\\n<p>The first sequence to concatenate.</p>\\n"},{"content":"\\n&lt;p&gt;The sequence to concatenate to the first sequence.&lt;/p&gt;\\n","pos":[98914,98975],"source":"\\n<p>The sequence to concatenate to the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\\n","pos":[99035,99094],"source":"\\n<p>The type of the elements of the input sequences.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source1&lt;/em&gt; or &lt;em&gt;source2&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[99459,99534],"source":"\\n<p>\\n<em>source1</em> or <em>source2</em> is <strong>null</strong>.</p>\\n"},{"pos":[100321,100368],"content":"Contains<TSource>(IQueryable<TSource>, TSource)","needQuote":true,"nodes":[{"content":"Contains&lt;TSource&gt;(IQueryable&lt;TSource&gt;, TSource)","pos":[0,47],"source":"Contains<TSource>(IQueryable<TSource>, TSource)"}]},{"content":"\\n&lt;p&gt;The object to locate in the sequence.&lt;/p&gt;\\n","pos":[101483,101531],"source":"\\n<p>The object to locate in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[101591,101646],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the input sequence contains an element that has the specified value; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[101707,101848],"source":"\\n<p>\\n<strong>true</strong> if the input sequence contains an element that has the specified value; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[101967,102021],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[102878,102953],"content":"Contains<TSource>(IQueryable<TSource>, TSource, IEqualityComparer<TSource>)","needQuote":true,"nodes":[{"content":"Contains&lt;TSource&gt;(IQueryable&lt;TSource&gt;, TSource, IEqualityComparer&lt;TSource&gt;)","pos":[0,75],"source":"Contains<TSource>(IQueryable<TSource>, TSource, IEqualityComparer<TSource>)"}]},{"content":"\\n&lt;p&gt;The object to locate in the sequence.&lt;/p&gt;\\n","pos":[104292,104340],"source":"\\n<p>The object to locate in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[104648,104703],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the input sequence contains an element that has the specified value; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[104764,104905],"source":"\\n<p>\\n<strong>true</strong> if the input sequence contains an element that has the specified value; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[105024,105078],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[105912,105947],"content":"Count<TSource>(IQueryable<TSource>)","needQuote":true,"nodes":[{"content":"Count&lt;TSource&gt;(IQueryable&lt;TSource&gt;)","pos":[0,35],"source":"Count<TSource>(IQueryable<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[106964,107019],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the input sequence.&lt;/p&gt;\\n","pos":[107078,107134],"source":"\\n<p>The number of elements in the input sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[107253,107307],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[108396,108479],"content":"Count<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)","needQuote":true,"nodes":[{"content":"Count&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Boolean&gt;&gt;)","pos":[0,83],"source":"Count<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)"}]},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[109798,109857],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[109917,109972],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the sequence that satisfies the condition in the predicate function.&lt;/p&gt;\\n","pos":[110031,110136],"source":"\\n<p>The number of elements in the sequence that satisfies the condition in the predicate function.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[110255,110331],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"pos":[111479,111523],"content":"DefaultIfEmpty<TSource>(IQueryable<TSource>)","needQuote":true,"nodes":[{"content":"DefaultIfEmpty&lt;TSource&gt;(IQueryable&lt;TSource&gt;)","pos":[0,44],"source":"DefaultIfEmpty<TSource>(IQueryable<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[112696,112751],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[113162,113216],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[113929,113982],"content":"DefaultIfEmpty<TSource>(IQueryable<TSource>, TSource)","needQuote":true,"nodes":[{"content":"DefaultIfEmpty&lt;TSource&gt;(IQueryable&lt;TSource&gt;, TSource)","pos":[0,53],"source":"DefaultIfEmpty<TSource>(IQueryable<TSource>, TSource)"}]},{"content":"\\n&lt;p&gt;The value to return if the sequence is empty.&lt;/p&gt;\\n","pos":[115209,115265],"source":"\\n<p>The value to return if the sequence is empty.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[115325,115380],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[115770,115824],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[116543,116581],"content":"Distinct<TSource>(IQueryable<TSource>)","needQuote":true,"nodes":[{"content":"Distinct&lt;TSource&gt;(IQueryable&lt;TSource&gt;)","pos":[0,38],"source":"Distinct<TSource>(IQueryable<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[117680,117735],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[118086,118140],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[118949,119015],"content":"Distinct<TSource>(IQueryable<TSource>, IEqualityComparer<TSource>)","needQuote":true,"nodes":[{"content":"Distinct&lt;TSource&gt;(IQueryable&lt;TSource&gt;, IEqualityComparer&lt;TSource&gt;)","pos":[0,66],"source":"Distinct<TSource>(IQueryable<TSource>, IEqualityComparer<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[120586,120641],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;comparer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[120992,121067],"source":"\\n<p>\\n<em>source</em> or <em>comparer</em> is <strong>null</strong>.</p>\\n"},{"pos":[121916,121962],"content":"ElementAt<TSource>(IQueryable<TSource>, Int32)","needQuote":true,"nodes":[{"content":"ElementAt&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Int32)","pos":[0,46],"source":"ElementAt<TSource>(IQueryable<TSource>, Int32)"}]},{"content":"\\n&lt;p&gt;The zero-based index of the element to retrieve.&lt;/p&gt;\\n","pos":[123039,123098],"source":"\\n<p>The zero-based index of the element to retrieve.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[123158,123213],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The element at the specified position in &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[123271,123339],"source":"\\n<p>The element at the specified position in <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[123458,123512],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[123629,123675],"source":"\\n<p>\\n<em>index</em> is less than zero.</p>\\n"},{"pos":[124442,124497],"content":"ElementAtOrDefault<TSource>(IQueryable<TSource>, Int32)","needQuote":true,"nodes":[{"content":"ElementAtOrDefault&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Int32)","pos":[0,55],"source":"ElementAtOrDefault<TSource>(IQueryable<TSource>, Int32)"}]},{"content":"\\n&lt;p&gt;The zero-based index of the element to retrieve.&lt;/p&gt;\\n","pos":[125658,125717],"source":"\\n<p>The zero-based index of the element to retrieve.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[125777,125832],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;default(&lt;em&gt;TSource&lt;/em&gt;) if &lt;em&gt;index&lt;/em&gt; is outside the bounds of &lt;em&gt;source&lt;/em&gt;; otherwise, the element at the specified position in &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[125890,126055],"source":"\\n<p>default(<em>TSource</em>) if <em>index</em> is outside the bounds of <em>source</em>; otherwise, the element at the specified position in <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[126174,126228],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[127088,127146],"content":"Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"Except&lt;TSource&gt;(IQueryable&lt;TSource&gt;, IEnumerable&lt;TSource&gt;)","pos":[0,58],"source":"Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\\n","pos":[128712,128771],"source":"\\n<p>The type of the elements of the input sequences.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source1&lt;/em&gt; or &lt;em&gt;source2&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[129123,129198],"source":"\\n<p>\\n<em>source1</em> or <em>source2</em> is <strong>null</strong>.</p>\\n"},{"pos":[130249,130335],"content":"Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)","needQuote":true,"nodes":[{"content":"Except&lt;TSource&gt;(IQueryable&lt;TSource&gt;, IEnumerable&lt;TSource&gt;, IEqualityComparer&lt;TSource&gt;)","pos":[0,86],"source":"Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\\n","pos":[132375,132434],"source":"\\n<p>The type of the elements of the input sequences.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source1&lt;/em&gt; or &lt;em&gt;source2&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[132786,132861],"source":"\\n<p>\\n<em>source1</em> or <em>source2</em> is <strong>null</strong>.</p>\\n"},{"pos":[133775,133810],"content":"First<TSource>(IQueryable<TSource>)","needQuote":true,"nodes":[{"content":"First&lt;TSource&gt;(IQueryable&lt;TSource&gt;)","pos":[0,35],"source":"First<TSource>(IQueryable<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[134816,134871],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The first element in &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[134929,134977],"source":"\\n<p>The first element in <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[135096,135150],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The source sequence is empty.&lt;/p&gt;\\n","pos":[135263,135303],"source":"\\n<p>The source sequence is empty.</p>\\n"},{"pos":[136145,136228],"content":"First<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)","needQuote":true,"nodes":[{"content":"First&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Boolean&gt;&gt;)","pos":[0,83],"source":"First<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)"}]},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[137529,137588],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[137648,137703],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The first element in &lt;em&gt;source&lt;/em&gt; that passes the test in &lt;em&gt;predicate&lt;/em&gt;.&lt;/p&gt;\\n","pos":[137761,137852],"source":"\\n<p>The first element in <em>source</em> that passes the test in <em>predicate</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[137971,138047],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;No element satisfies the condition in &lt;em&gt;predicate&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The source sequence is empty.&lt;/p&gt;\\n","pos":[138160,138279],"source":"\\n<p>No element satisfies the condition in <em>predicate</em>.</p>\\n<p>-or-</p>\\n<p>The source sequence is empty.</p>\\n"},{"pos":[139180,139224],"content":"FirstOrDefault<TSource>(IQueryable<TSource>)","needQuote":true,"nodes":[{"content":"FirstOrDefault&lt;TSource&gt;(IQueryable&lt;TSource&gt;)","pos":[0,44],"source":"FirstOrDefault<TSource>(IQueryable<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[140323,140378],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;default(&lt;em&gt;TSource&lt;/em&gt;) if &lt;em&gt;source&lt;/em&gt; is empty; otherwise, the first element in &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[140436,140550],"source":"\\n<p>default(<em>TSource</em>) if <em>source</em> is empty; otherwise, the first element in <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[140669,140723],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[141628,141720],"content":"FirstOrDefault<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)","needQuote":true,"nodes":[{"content":"FirstOrDefault&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Boolean&gt;&gt;)","pos":[0,92],"source":"FirstOrDefault<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)"}]},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[143104,143163],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[143223,143278],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;default(&lt;em&gt;TSource&lt;/em&gt;) if &lt;em&gt;source&lt;/em&gt; is empty or if no element passes the test specified by &lt;em&gt;predicate&lt;/em&gt;; otherwise, the first element in &lt;em&gt;source&lt;/em&gt; that passes the test specified by &lt;em&gt;predicate&lt;/em&gt;.&lt;/p&gt;\\n","pos":[143336,143568],"source":"\\n<p>default(<em>TSource</em>) if <em>source</em> is empty or if no element passes the test specified by <em>predicate</em>; otherwise, the first element in <em>source</em> that passes the test specified by <em>predicate</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[143687,143763],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"pos":[144850,144938],"content":"GroupBy<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)","needQuote":true,"nodes":[{"content":"GroupBy&lt;TSource, TKey&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, TKey&gt;&gt;)","pos":[0,88],"source":"GroupBy<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)"}]},{"content":"\\n&lt;p&gt;A function to extract the key for each element.&lt;/p&gt;\\n","pos":[146316,146374],"source":"\\n<p>A function to extract the key for each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[146434,146489],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by the function represented in &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[146526,146618],"source":"\\n<p>The type of the key returned by the function represented in <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[147109,147187],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[148401,148514],"content":"GroupBy<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, IEqualityComparer<TKey>)","needQuote":true,"nodes":[{"content":"GroupBy&lt;TSource, TKey&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, TKey&gt;&gt;, IEqualityComparer&lt;TKey&gt;)","pos":[0,113],"source":"GroupBy<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, IEqualityComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A function to extract the key for each element.&lt;/p&gt;\\n","pos":[150070,150128],"source":"\\n<p>A function to extract the key for each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[150431,150486],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by the function represented in &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[150523,150615],"source":"\\n<p>The type of the key returned by the function represented in <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; or &lt;em&gt;comparer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[151099,151198],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>comparer</em> is <strong>null</strong>.</p>\\n"},{"pos":[152569,152716],"content":"GroupBy<TSource, TKey, TElement>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TSource, TElement>>)","needQuote":true,"nodes":[{"content":"GroupBy&lt;TSource, TKey, TElement&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, TKey&gt;&gt;, Expressions.Expression&lt;Func&lt;TSource, TElement&gt;&gt;)","pos":[0,147],"source":"GroupBy<TSource, TKey, TElement>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TSource, TElement>>)"}]},{"content":"\\n&lt;p&gt;A function to extract the key for each element.&lt;/p&gt;\\n","pos":[154404,154462],"source":"\\n<p>A function to extract the key for each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[154805,154860],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by the function represented in &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[154897,154989],"source":"\\n<p>The type of the key returned by the function represented in <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; or &lt;em&gt;elementSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[155671,155777],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[157435,157607],"content":"GroupBy<TSource, TKey, TElement>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TSource, TElement>>, IEqualityComparer<TKey>)","needQuote":true,"nodes":[{"content":"GroupBy&lt;TSource, TKey, TElement&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, TKey&gt;&gt;, Expressions.Expression&lt;Func&lt;TSource, TElement&gt;&gt;, IEqualityComparer&lt;TKey&gt;)","pos":[0,172],"source":"GroupBy<TSource, TKey, TElement>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TSource, TElement>>, IEqualityComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A function to extract the key for each element.&lt;/p&gt;\\n","pos":[159429,159487],"source":"\\n<p>A function to extract the key for each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[160073,160128],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by the function represented in &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[160165,160257],"source":"\\n<p>The type of the key returned by the function represented in <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; or &lt;em&gt;elementSelector&lt;/em&gt; or &lt;em&gt;comparer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[160939,161066],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> or <em>comparer</em> is <strong>null</strong>.</p>\\n"},{"pos":[162842,163006],"content":"GroupBy<TSource, TKey, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TKey, IEnumerable<TSource>, TResult>>)","needQuote":true,"nodes":[{"content":"GroupBy&lt;TSource, TKey, TResult&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, TKey&gt;&gt;, Expressions.Expression&lt;Func&lt;TKey, IEnumerable&lt;TSource&gt;, TResult&gt;&gt;)","pos":[0,164],"source":"GroupBy<TSource, TKey, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TKey, IEnumerable<TSource>, TResult>>)"}]},{"content":"\\n&lt;p&gt;A function to extract the key for each element.&lt;/p&gt;\\n","pos":[164718,164776],"source":"\\n<p>A function to extract the key for each element.</p>\\n"},{"content":"\\n&lt;p&gt;A function to create a result value from each group.&lt;/p&gt;\\n","pos":[164951,165014],"source":"\\n<p>A function to create a result value from each group.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[165074,165129],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by the function represented in &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[165166,165258],"source":"\\n<p>The type of the key returned by the function represented in <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result value returned by &lt;em&gt;resultSelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[165298,165374],"source":"\\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;An T:System.Linq.IQueryable`1 that has a type argument of &lt;em&gt;TResult&lt;/em&gt; and where each element represents a projection over a group and its key.&lt;/p&gt;\\n","pos":[165454,165612],"source":"\\n<p>An T:System.Linq.IQueryable`1 that has a type argument of <em>TResult</em> and where each element represents a projection over a group and its key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; or &lt;em&gt;resultSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[165731,165836],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[167730,167919],"content":"GroupBy<TSource, TKey, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TKey, IEnumerable<TSource>, TResult>>, IEqualityComparer<TKey>)","needQuote":true,"nodes":[{"content":"GroupBy&lt;TSource, TKey, TResult&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, TKey&gt;&gt;, Expressions.Expression&lt;Func&lt;TKey, IEnumerable&lt;TSource&gt;, TResult&gt;&gt;, IEqualityComparer&lt;TKey&gt;)","pos":[0,189],"source":"GroupBy<TSource, TKey, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TKey, IEnumerable<TSource>, TResult>>, IEqualityComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A function to extract the key for each element.&lt;/p&gt;\\n","pos":[169806,169864],"source":"\\n<p>A function to extract the key for each element.</p>\\n"},{"content":"\\n&lt;p&gt;A function to create a result value from each group.&lt;/p&gt;\\n","pos":[170039,170102],"source":"\\n<p>A function to create a result value from each group.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[170405,170460],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by the function represented in &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[170497,170589],"source":"\\n<p>The type of the key returned by the function represented in <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result value returned by &lt;em&gt;resultSelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[170629,170705],"source":"\\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;An T:System.Linq.IQueryable`1 that has a type argument of &lt;em&gt;TResult&lt;/em&gt; and where each element represents a projection over a group and its key.&lt;/p&gt;\\n","pos":[170785,170943],"source":"\\n<p>An T:System.Linq.IQueryable`1 that has a type argument of <em>TResult</em> and where each element represents a projection over a group and its key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; or &lt;em&gt;resultSelector&lt;/em&gt; or &lt;em&gt;comparer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[171062,171188],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>resultSelector</em> or <em>comparer</em> is <strong>null</strong>.</p>\\n"},{"pos":[173239,173463],"content":"GroupBy<TSource, TKey, TElement, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TSource, TElement>>, Expressions.Expression<Func<TKey, IEnumerable<TElement>, TResult>>)","needQuote":true,"nodes":[{"content":"GroupBy&lt;TSource, TKey, TElement, TResult&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, TKey&gt;&gt;, Expressions.Expression&lt;Func&lt;TSource, TElement&gt;&gt;, Expressions.Expression&lt;Func&lt;TKey, IEnumerable&lt;TElement&gt;, TResult&gt;&gt;)","pos":[0,224],"source":"GroupBy<TSource, TKey, TElement, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TSource, TElement>>, Expressions.Expression<Func<TKey, IEnumerable<TElement>, TResult>>)"}]},{"content":"\\n&lt;p&gt;A function to extract the key for each element.&lt;/p&gt;\\n","pos":[175487,175545],"source":"\\n<p>A function to extract the key for each element.</p>\\n"},{"content":"\\n&lt;p&gt;A function to create a result value from each group.&lt;/p&gt;\\n","pos":[176004,176067],"source":"\\n<p>A function to create a result value from each group.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[176127,176182],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by the function represented in &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[176219,176311],"source":"\\n<p>The type of the key returned by the function represented in <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result value returned by &lt;em&gt;resultSelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[176520,176596],"source":"\\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;An T:System.Linq.IQueryable`1 that has a type argument of &lt;em&gt;TResult&lt;/em&gt; and where each element represents a projection over a group and its key.&lt;/p&gt;\\n","pos":[176676,176834],"source":"\\n<p>An T:System.Linq.IQueryable`1 that has a type argument of <em>TResult</em> and where each element represents a projection over a group and its key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; or &lt;em&gt;elementSelector&lt;/em&gt; or &lt;em&gt;resultSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[176953,177086],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[179428,179677],"content":"GroupBy<TSource, TKey, TElement, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TSource, TElement>>, Expressions.Expression<Func<TKey, IEnumerable<TElement>, TResult>>, IEqualityComparer<TKey>)","needQuote":true,"nodes":[{"content":"GroupBy&lt;TSource, TKey, TElement, TResult&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, TKey&gt;&gt;, Expressions.Expression&lt;Func&lt;TSource, TElement&gt;&gt;, Expressions.Expression&lt;Func&lt;TKey, IEnumerable&lt;TElement&gt;, TResult&gt;&gt;, IEqualityComparer&lt;TKey&gt;)","pos":[0,249],"source":"GroupBy<TSource, TKey, TElement, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TSource, TElement>>, Expressions.Expression<Func<TKey, IEnumerable<TElement>, TResult>>, IEqualityComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A function to extract the key for each element.&lt;/p&gt;\\n","pos":[181879,181937],"source":"\\n<p>A function to extract the key for each element.</p>\\n"},{"content":"\\n&lt;p&gt;A function to create a result value from each group.&lt;/p&gt;\\n","pos":[182396,182459],"source":"\\n<p>A function to create a result value from each group.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[182762,182817],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by the function represented in &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[182854,182946],"source":"\\n<p>The type of the key returned by the function represented in <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result value returned by &lt;em&gt;resultSelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[183155,183231],"source":"\\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;An T:System.Linq.IQueryable`1 that has a type argument of &lt;em&gt;TResult&lt;/em&gt; and where each element represents a projection over a group and its key.&lt;/p&gt;\\n","pos":[183311,183469],"source":"\\n<p>An T:System.Linq.IQueryable`1 that has a type argument of <em>TResult</em> and where each element represents a projection over a group and its key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; or &lt;em&gt;elementSelector&lt;/em&gt; or &lt;em&gt;resultSelector&lt;/em&gt; or &lt;em&gt;comparer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[183588,183742],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> or <em>resultSelector</em> or <em>comparer</em> is <strong>null</strong>.</p>\\n"},{"pos":[186208,186445],"content":"GroupJoin<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expressions.Expression<Func<TOuter, TKey>>, Expressions.Expression<Func<TInner, TKey>>, Expressions.Expression<Func<TOuter, IEnumerable<TInner>, TResult>>)","needQuote":true,"nodes":[{"content":"GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(IQueryable&lt;TOuter&gt;, IEnumerable&lt;TInner&gt;, Expressions.Expression&lt;Func&lt;TOuter, TKey&gt;&gt;, Expressions.Expression&lt;Func&lt;TInner, TKey&gt;&gt;, Expressions.Expression&lt;Func&lt;TOuter, IEnumerable&lt;TInner&gt;, TResult&gt;&gt;)","pos":[0,237],"source":"GroupJoin<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expressions.Expression<Func<TOuter, TKey>>, Expressions.Expression<Func<TInner, TKey>>, Expressions.Expression<Func<TOuter, IEnumerable<TInner>, TResult>>)"}]},{"content":"\\n&lt;p&gt;The first sequence to join.&lt;/p&gt;\\n","pos":[188251,188289],"source":"\\n<p>The first sequence to join.</p>\\n"},{"content":"\\n&lt;p&gt;The sequence to join to the first sequence.&lt;/p&gt;\\n","pos":[188388,188442],"source":"\\n<p>The sequence to join to the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract the join key from each element of the first sequence.&lt;/p&gt;\\n","pos":[188568,188654],"source":"\\n<p>A function to extract the join key from each element of the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract the join key from each element of the second sequence.&lt;/p&gt;\\n","pos":[188780,188867],"source":"\\n<p>A function to extract the join key from each element of the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.&lt;/p&gt;\\n","pos":[189043,189195],"source":"\\n<p>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the first sequence.&lt;/p&gt;\\n","pos":[189254,189312],"source":"\\n<p>The type of the elements of the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the second sequence.&lt;/p&gt;\\n","pos":[189351,189410],"source":"\\n<p>The type of the elements of the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the keys returned by the key selector functions.&lt;/p&gt;\\n","pos":[189447,189518],"source":"\\n<p>The type of the keys returned by the key selector functions.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result elements.&lt;/p&gt;\\n","pos":[189558,189601],"source":"\\n<p>The type of the result elements.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;outer&lt;/em&gt; or &lt;em&gt;inner&lt;/em&gt; or &lt;em&gt;outerKeySelector&lt;/em&gt; or &lt;em&gt;innerKeySelector&lt;/em&gt; or &lt;em&gt;resultSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[190002,190158],"source":"\\n<p>\\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[192726,192988],"content":"GroupJoin<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expressions.Expression<Func<TOuter, TKey>>, Expressions.Expression<Func<TInner, TKey>>, Expressions.Expression<Func<TOuter, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)","needQuote":true,"nodes":[{"content":"GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(IQueryable&lt;TOuter&gt;, IEnumerable&lt;TInner&gt;, Expressions.Expression&lt;Func&lt;TOuter, TKey&gt;&gt;, Expressions.Expression&lt;Func&lt;TInner, TKey&gt;&gt;, Expressions.Expression&lt;Func&lt;TOuter, IEnumerable&lt;TInner&gt;, TResult&gt;&gt;, IEqualityComparer&lt;TKey&gt;)","pos":[0,262],"source":"GroupJoin<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expressions.Expression<Func<TOuter, TKey>>, Expressions.Expression<Func<TInner, TKey>>, Expressions.Expression<Func<TOuter, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;The first sequence to join.&lt;/p&gt;\\n","pos":[195009,195047],"source":"\\n<p>The first sequence to join.</p>\\n"},{"content":"\\n&lt;p&gt;The sequence to join to the first sequence.&lt;/p&gt;\\n","pos":[195146,195200],"source":"\\n<p>The sequence to join to the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract the join key from each element of the first sequence.&lt;/p&gt;\\n","pos":[195326,195412],"source":"\\n<p>A function to extract the join key from each element of the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract the join key from each element of the second sequence.&lt;/p&gt;\\n","pos":[195538,195625],"source":"\\n<p>A function to extract the join key from each element of the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.&lt;/p&gt;\\n","pos":[195801,195953],"source":"\\n<p>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A comparer to hash and compare keys.&lt;/p&gt;\\n","pos":[196059,196106],"source":"\\n<p>A comparer to hash and compare keys.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the first sequence.&lt;/p&gt;\\n","pos":[196165,196223],"source":"\\n<p>The type of the elements of the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the second sequence.&lt;/p&gt;\\n","pos":[196262,196321],"source":"\\n<p>The type of the elements of the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the keys returned by the key selector functions.&lt;/p&gt;\\n","pos":[196358,196429],"source":"\\n<p>The type of the keys returned by the key selector functions.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result elements.&lt;/p&gt;\\n","pos":[196469,196512],"source":"\\n<p>The type of the result elements.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;outer&lt;/em&gt; or &lt;em&gt;inner&lt;/em&gt; or &lt;em&gt;outerKeySelector&lt;/em&gt; or &lt;em&gt;innerKeySelector&lt;/em&gt; or &lt;em&gt;resultSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[196913,197069],"source":"\\n<p>\\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[198978,199039],"content":"Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"Intersect&lt;TSource&gt;(IQueryable&lt;TSource&gt;, IEnumerable&lt;TSource&gt;)","pos":[0,61],"source":"Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;A sequence whose distinct elements that also appear in &lt;em&gt;source2&lt;/em&gt; are returned.&lt;/p&gt;\\n","pos":[200079,200175],"source":"\\n<p>A sequence whose distinct elements that also appear in <em>source2</em> are returned.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence whose distinct elements that also appear in the first sequence are returned.&lt;/p&gt;\\n","pos":[200277,200375],"source":"\\n<p>A sequence whose distinct elements that also appear in the first sequence are returned.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\\n","pos":[200435,200494],"source":"\\n<p>The type of the elements of the input sequences.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that contains the set intersection of the two sequences.&lt;/p&gt;\\n","pos":[200574,200652],"source":"\\n<p>A sequence that contains the set intersection of the two sequences.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source1&lt;/em&gt; or &lt;em&gt;source2&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[200771,200846],"source":"\\n<p>\\n<em>source1</em> or <em>source2</em> is <strong>null</strong>.</p>\\n"},{"pos":[201918,202007],"content":"Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)","needQuote":true,"nodes":[{"content":"Intersect&lt;TSource&gt;(IQueryable&lt;TSource&gt;, IEnumerable&lt;TSource&gt;, IEqualityComparer&lt;TSource&gt;)","pos":[0,89],"source":"Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\\n","pos":[204047,204106],"source":"\\n<p>The type of the elements of the input sequences.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source1&lt;/em&gt; or &lt;em&gt;source2&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[204460,204535],"source":"\\n<p>\\n<em>source1</em> or <em>source2</em> is <strong>null</strong>.</p>\\n"},{"pos":[206115,206334],"content":"Join<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expressions.Expression<Func<TOuter, TKey>>, Expressions.Expression<Func<TInner, TKey>>, Expressions.Expression<Func<TOuter, TInner, TResult>>)","needQuote":true,"nodes":[{"content":"Join&lt;TOuter, TInner, TKey, TResult&gt;(IQueryable&lt;TOuter&gt;, IEnumerable&lt;TInner&gt;, Expressions.Expression&lt;Func&lt;TOuter, TKey&gt;&gt;, Expressions.Expression&lt;Func&lt;TInner, TKey&gt;&gt;, Expressions.Expression&lt;Func&lt;TOuter, TInner, TResult&gt;&gt;)","pos":[0,219],"source":"Join<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expressions.Expression<Func<TOuter, TKey>>, Expressions.Expression<Func<TInner, TKey>>, Expressions.Expression<Func<TOuter, TInner, TResult>>)"}]},{"content":"\\n&lt;p&gt;The first sequence to join.&lt;/p&gt;\\n","pos":[208029,208067],"source":"\\n<p>The first sequence to join.</p>\\n"},{"content":"\\n&lt;p&gt;The sequence to join to the first sequence.&lt;/p&gt;\\n","pos":[208166,208220],"source":"\\n<p>The sequence to join to the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract the join key from each element of the first sequence.&lt;/p&gt;\\n","pos":[208346,208432],"source":"\\n<p>A function to extract the join key from each element of the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract the join key from each element of the second sequence.&lt;/p&gt;\\n","pos":[208558,208645],"source":"\\n<p>A function to extract the join key from each element of the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to create a result element from two matching elements.&lt;/p&gt;\\n","pos":[208781,208857],"source":"\\n<p>A function to create a result element from two matching elements.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the first sequence.&lt;/p&gt;\\n","pos":[208916,208974],"source":"\\n<p>The type of the elements of the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the second sequence.&lt;/p&gt;\\n","pos":[209013,209072],"source":"\\n<p>The type of the elements of the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the keys returned by the key selector functions.&lt;/p&gt;\\n","pos":[209109,209180],"source":"\\n<p>The type of the keys returned by the key selector functions.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result elements.&lt;/p&gt;\\n","pos":[209220,209263],"source":"\\n<p>The type of the result elements.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;outer&lt;/em&gt; or &lt;em&gt;inner&lt;/em&gt; or &lt;em&gt;outerKeySelector&lt;/em&gt; or &lt;em&gt;innerKeySelector&lt;/em&gt; or &lt;em&gt;resultSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[209658,209814],"source":"\\n<p>\\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[212139,212383],"content":"Join<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expressions.Expression<Func<TOuter, TKey>>, Expressions.Expression<Func<TInner, TKey>>, Expressions.Expression<Func<TOuter, TInner, TResult>>, IEqualityComparer<TKey>)","needQuote":true,"nodes":[{"content":"Join&lt;TOuter, TInner, TKey, TResult&gt;(IQueryable&lt;TOuter&gt;, IEnumerable&lt;TInner&gt;, Expressions.Expression&lt;Func&lt;TOuter, TKey&gt;&gt;, Expressions.Expression&lt;Func&lt;TInner, TKey&gt;&gt;, Expressions.Expression&lt;Func&lt;TOuter, TInner, TResult&gt;&gt;, IEqualityComparer&lt;TKey&gt;)","pos":[0,244],"source":"Join<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expressions.Expression<Func<TOuter, TKey>>, Expressions.Expression<Func<TInner, TKey>>, Expressions.Expression<Func<TOuter, TInner, TResult>>, IEqualityComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;The first sequence to join.&lt;/p&gt;\\n","pos":[214293,214331],"source":"\\n<p>The first sequence to join.</p>\\n"},{"content":"\\n&lt;p&gt;The sequence to join to the first sequence.&lt;/p&gt;\\n","pos":[214430,214484],"source":"\\n<p>The sequence to join to the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract the join key from each element of the first sequence.&lt;/p&gt;\\n","pos":[214610,214696],"source":"\\n<p>A function to extract the join key from each element of the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract the join key from each element of the second sequence.&lt;/p&gt;\\n","pos":[214822,214909],"source":"\\n<p>A function to extract the join key from each element of the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to create a result element from two matching elements.&lt;/p&gt;\\n","pos":[215045,215121],"source":"\\n<p>A function to create a result element from two matching elements.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the first sequence.&lt;/p&gt;\\n","pos":[215432,215490],"source":"\\n<p>The type of the elements of the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the second sequence.&lt;/p&gt;\\n","pos":[215529,215588],"source":"\\n<p>The type of the elements of the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the keys returned by the key selector functions.&lt;/p&gt;\\n","pos":[215625,215696],"source":"\\n<p>The type of the keys returned by the key selector functions.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result elements.&lt;/p&gt;\\n","pos":[215736,215779],"source":"\\n<p>The type of the result elements.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;outer&lt;/em&gt; or &lt;em&gt;inner&lt;/em&gt; or &lt;em&gt;outerKeySelector&lt;/em&gt; or &lt;em&gt;innerKeySelector&lt;/em&gt; or &lt;em&gt;resultSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[216174,216330],"source":"\\n<p>\\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[217984,218018],"content":"Last<TSource>(IQueryable<TSource>)","needQuote":true,"nodes":[{"content":"Last&lt;TSource&gt;(IQueryable&lt;TSource&gt;)","pos":[0,34],"source":"Last<TSource>(IQueryable<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[219017,219072],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The value at the last position in &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[219130,219191],"source":"\\n<p>The value at the last position in <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[219310,219364],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The source sequence is empty.&lt;/p&gt;\\n","pos":[219477,219517],"source":"\\n<p>The source sequence is empty.</p>\\n"},{"pos":[220352,220434],"content":"Last<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)","needQuote":true,"nodes":[{"content":"Last&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Boolean&gt;&gt;)","pos":[0,82],"source":"Last<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)"}]},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[221731,221790],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[221850,221905],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The last element in &lt;em&gt;source&lt;/em&gt; that passes the test specified by &lt;em&gt;predicate&lt;/em&gt;.&lt;/p&gt;\\n","pos":[221963,222063],"source":"\\n<p>The last element in <em>source</em> that passes the test specified by <em>predicate</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[222182,222258],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;No element satisfies the condition in &lt;em&gt;predicate&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The source sequence is empty.&lt;/p&gt;\\n","pos":[222371,222490],"source":"\\n<p>No element satisfies the condition in <em>predicate</em>.</p>\\n<p>-or-</p>\\n<p>The source sequence is empty.</p>\\n"},{"pos":[223384,223427],"content":"LastOrDefault<TSource>(IQueryable<TSource>)","needQuote":true,"nodes":[{"content":"LastOrDefault&lt;TSource&gt;(IQueryable&lt;TSource&gt;)","pos":[0,43],"source":"LastOrDefault<TSource>(IQueryable<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[224520,224575],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;default(&lt;em&gt;TSource&lt;/em&gt;) if &lt;em&gt;source&lt;/em&gt; is empty; otherwise, the last element in &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[224633,224746],"source":"\\n<p>default(<em>TSource</em>) if <em>source</em> is empty; otherwise, the last element in <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[224865,224919],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[225817,225908],"content":"LastOrDefault<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)","needQuote":true,"nodes":[{"content":"LastOrDefault&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Boolean&gt;&gt;)","pos":[0,91],"source":"LastOrDefault<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)"}]},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[227278,227337],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[227397,227452],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;default(&lt;em&gt;TSource&lt;/em&gt;) if &lt;em&gt;source&lt;/em&gt; is empty or if no elements pass the test in the predicate function; otherwise, the last element of &lt;em&gt;source&lt;/em&gt; that passes the test in the predicate function.&lt;/p&gt;\\n","pos":[227510,227728],"source":"\\n<p>default(<em>TSource</em>) if <em>source</em> is empty or if no elements pass the test in the predicate function; otherwise, the last element of <em>source</em> that passes the test in the predicate function.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[227847,227923],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"pos":[228841,228880],"content":"LongCount<TSource>(IQueryable<TSource>)","needQuote":true,"nodes":[{"content":"LongCount&lt;TSource&gt;(IQueryable&lt;TSource&gt;)","pos":[0,39],"source":"LongCount<TSource>(IQueryable<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[230009,230064],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[230123,230176],"source":"\\n<p>The number of elements in <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[230295,230349],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[231440,231527],"content":"LongCount<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)","needQuote":true,"nodes":[{"content":"LongCount&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Boolean&gt;&gt;)","pos":[0,87],"source":"LongCount<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)"}]},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[232939,232998],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[233058,233113],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in &lt;em&gt;source&lt;/em&gt; that satisfy the condition in the predicate function.&lt;/p&gt;\\n","pos":[233172,233278],"source":"\\n<p>The number of elements in <em>source</em> that satisfy the condition in the predicate function.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[233397,233473],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"pos":[234587,234620],"content":"Max<TSource>(IQueryable<TSource>)","needQuote":true,"nodes":[{"content":"Max&lt;TSource&gt;(IQueryable&lt;TSource&gt;)","pos":[0,33],"source":"Max<TSource>(IQueryable<TSource>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum of.&lt;/p&gt;\\n","pos":[235512,235572],"source":"\\n<p>A sequence of values to determine the maximum of.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[235632,235687],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[235745,235790],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[235909,235963],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[236758,236848],"content":"Max<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TResult>>)","needQuote":true,"nodes":[{"content":"Max&lt;TSource, TResult&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, TResult&gt;&gt;)","pos":[0,90],"source":"Max<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TResult>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum of.&lt;/p&gt;\\n","pos":[238017,238077],"source":"\\n<p>A sequence of values to determine the maximum of.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element.&lt;/p&gt;\\n","pos":[238199,238257],"source":"\\n<p>A projection function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[238317,238372],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value returned by the function represented by &lt;em&gt;selector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[238412,238503],"source":"\\n<p>The type of the value returned by the function represented by <em>selector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[238561,238606],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[238725,238800],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[239689,239722],"content":"Min<TSource>(IQueryable<TSource>)","needQuote":true,"nodes":[{"content":"Min&lt;TSource&gt;(IQueryable&lt;TSource&gt;)","pos":[0,33],"source":"Min<TSource>(IQueryable<TSource>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum of.&lt;/p&gt;\\n","pos":[240614,240674],"source":"\\n<p>A sequence of values to determine the minimum of.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[240734,240789],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[240847,240892],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[241011,241065],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[241860,241950],"content":"Min<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TResult>>)","needQuote":true,"nodes":[{"content":"Min&lt;TSource, TResult&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, TResult&gt;&gt;)","pos":[0,90],"source":"Min<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TResult>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum of.&lt;/p&gt;\\n","pos":[243119,243179],"source":"\\n<p>A sequence of values to determine the minimum of.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element.&lt;/p&gt;\\n","pos":[243301,243359],"source":"\\n<p>A projection function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[243419,243474],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value returned by the function represented by &lt;em&gt;selector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[243514,243605],"source":"\\n<p>The type of the value returned by the function represented by <em>selector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[243663,243708],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[243827,243902],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[244785,244812],"content":"OfType<TResult>(IQueryable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IQueryable)","pos":[0,27],"source":"OfType<TResult>(IQueryable)"}]},{"content":"\\n&lt;p&gt;The type to filter the elements of the sequence on.&lt;/p&gt;\\n","pos":[245896,245958],"source":"\\n<p>The type to filter the elements of the sequence on.</p>\\n"},{"content":"\\n&lt;p&gt;A collection that contains the elements from &lt;em&gt;source&lt;/em&gt; that have type &lt;em&gt;TResult&lt;/em&gt;.&lt;/p&gt;\\n","pos":[246038,246142],"source":"\\n<p>A collection that contains the elements from <em>source</em> that have type <em>TResult</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[246261,246315],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[247089,247177],"content":"OrderBy<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)","needQuote":true,"nodes":[{"content":"OrderBy&lt;TSource, TKey&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, TKey&gt;&gt;)","pos":[0,88],"source":"OrderBy<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to order.&lt;/p&gt;\\n","pos":[248278,248319],"source":"\\n<p>A sequence of values to order.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract a key from an element.&lt;/p&gt;\\n","pos":[248441,248496],"source":"\\n<p>A function to extract a key from an element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[248556,248611],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by the function that is represented by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[248648,248748],"source":"\\n<p>The type of the key returned by the function that is represented by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[249105,249183],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[250373,250478],"content":"OrderBy<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, IComparer<TKey>)","needQuote":true,"nodes":[{"content":"OrderBy&lt;TSource, TKey&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, TKey&gt;&gt;, IComparer&lt;TKey&gt;)","pos":[0,105],"source":"OrderBy<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, IComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to order.&lt;/p&gt;\\n","pos":[251692,251733],"source":"\\n<p>A sequence of values to order.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract a key from an element.&lt;/p&gt;\\n","pos":[251855,251910],"source":"\\n<p>A function to extract a key from an element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[252197,252252],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by the function that is represented by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[252289,252389],"source":"\\n<p>The type of the key returned by the function that is represented by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; or &lt;em&gt;comparer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[252746,252845],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>comparer</em> is <strong>null</strong>.</p>\\n"},{"pos":[254043,254141],"content":"OrderByDescending<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)","needQuote":true,"nodes":[{"content":"OrderByDescending&lt;TSource, TKey&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, TKey&gt;&gt;)","pos":[0,98],"source":"OrderByDescending<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to order.&lt;/p&gt;\\n","pos":[255283,255324],"source":"\\n<p>A sequence of values to order.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract a key from an element.&lt;/p&gt;\\n","pos":[255446,255501],"source":"\\n<p>A function to extract a key from an element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[255561,255616],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by the function that is represented by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[255653,255753],"source":"\\n<p>The type of the key returned by the function that is represented by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[256130,256208],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[257468,257583],"content":"OrderByDescending<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, IComparer<TKey>)","needQuote":true,"nodes":[{"content":"OrderByDescending&lt;TSource, TKey&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, TKey&gt;&gt;, IComparer&lt;TKey&gt;)","pos":[0,115],"source":"OrderByDescending<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, IComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to order.&lt;/p&gt;\\n","pos":[258838,258879],"source":"\\n<p>A sequence of values to order.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract a key from an element.&lt;/p&gt;\\n","pos":[259001,259056],"source":"\\n<p>A function to extract a key from an element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[259343,259398],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by the function that is represented by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[259435,259535],"source":"\\n<p>The type of the key returned by the function that is represented by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; or &lt;em&gt;comparer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[259912,260011],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>comparer</em> is <strong>null</strong>.</p>\\n"},{"pos":[261048,261085],"content":"Reverse<TSource>(IQueryable<TSource>)","needQuote":true,"nodes":[{"content":"Reverse&lt;TSource&gt;(IQueryable&lt;TSource&gt;)","pos":[0,37],"source":"Reverse<TSource>(IQueryable<TSource>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to reverse.&lt;/p&gt;\\n","pos":[261944,261987],"source":"\\n<p>A sequence of values to reverse.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[262047,262102],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[262474,262528],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[263348,263441],"content":"Select<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TResult>>)","needQuote":true,"nodes":[{"content":"Select&lt;TSource, TResult&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, TResult&gt;&gt;)","pos":[0,93],"source":"Select<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TResult>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to project.&lt;/p&gt;\\n","pos":[264517,264560],"source":"\\n<p>A sequence of values to project.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element.&lt;/p&gt;\\n","pos":[264682,264740],"source":"\\n<p>A projection function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[264800,264855],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value returned by the function represented by &lt;em&gt;selector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[264895,264986],"source":"\\n<p>The type of the value returned by the function represented by <em>selector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[265383,265458],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[266578,266678],"content":"Select<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, TResult>>)","needQuote":true,"nodes":[{"content":"Select&lt;TSource, TResult&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Int32, TResult&gt;&gt;)","pos":[0,100],"source":"Select<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, TResult>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to project.&lt;/p&gt;\\n","pos":[267819,267862],"source":"\\n<p>A sequence of values to project.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element.&lt;/p&gt;\\n","pos":[267997,268055],"source":"\\n<p>A projection function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[268115,268170],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value returned by the function represented by &lt;em&gt;selector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[268210,268301],"source":"\\n<p>The type of the value returned by the function represented by <em>selector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[268698,268773],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[270021,270131],"content":"SelectMany<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, IEnumerable<TResult>>>)","needQuote":true,"nodes":[{"content":"SelectMany&lt;TSource, TResult&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, IEnumerable&lt;TResult&gt;&gt;&gt;)","pos":[0,110],"source":"SelectMany<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, IEnumerable<TResult>>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to project.&lt;/p&gt;\\n","pos":[271438,271481],"source":"\\n<p>A sequence of values to project.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element.&lt;/p&gt;\\n","pos":[271643,271701],"source":"\\n<p>A projection function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[271761,271816],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the sequence returned by the function represented by &lt;em&gt;selector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[271856,271966],"source":"\\n<p>The type of the elements of the sequence returned by the function represented by <em>selector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[272378,272453],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[273809,273926],"content":"SelectMany<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, IEnumerable<TResult>>>)","needQuote":true,"nodes":[{"content":"SelectMany&lt;TSource, TResult&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Int32, IEnumerable&lt;TResult&gt;&gt;&gt;)","pos":[0,117],"source":"SelectMany<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, IEnumerable<TResult>>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to project.&lt;/p&gt;\\n","pos":[275341,275384],"source":"\\n<p>A sequence of values to project.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element; the second parameter of this function represents the index of the source element.&lt;/p&gt;\\n","pos":[275559,275699],"source":"\\n<p>A projection function to apply to each element; the second parameter of this function represents the index of the source element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[275759,275814],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the sequence returned by the function represented by &lt;em&gt;selector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[275854,275964],"source":"\\n<p>The type of the elements of the sequence returned by the function represented by <em>selector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[276376,276451],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[277986,278174],"content":"SelectMany<TSource, TCollection, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, IEnumerable<TCollection>>>, Expressions.Expression<Func<TSource, TCollection, TResult>>)","needQuote":true,"nodes":[{"content":"SelectMany&lt;TSource, TCollection, TResult&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, IEnumerable&lt;TCollection&gt;&gt;&gt;, Expressions.Expression&lt;Func&lt;TSource, TCollection, TResult&gt;&gt;)","pos":[0,188],"source":"SelectMany<TSource, TCollection, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, IEnumerable<TCollection>>>, Expressions.Expression<Func<TSource, TCollection, TResult>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to project.&lt;/p&gt;\\n","pos":[279921,279964],"source":"\\n<p>A sequence of values to project.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element of the input sequence.&lt;/p&gt;\\n","pos":[280140,280220],"source":"\\n<p>A projection function to apply to each element of the input sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element of each intermediate sequence.&lt;/p&gt;\\n","pos":[280362,280450],"source":"\\n<p>A projection function to apply to each element of each intermediate sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[280510,280565],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the intermediate elements collected by the function represented by &lt;em&gt;collectionSelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[280609,280727],"source":"\\n<p>The type of the intermediate elements collected by the function represented by <em>collectionSelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the resulting sequence.&lt;/p&gt;\\n","pos":[280767,280829],"source":"\\n<p>The type of the elements of the resulting sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;collectionSelector&lt;/em&gt; or &lt;em&gt;resultSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[281385,281497],"source":"\\n<p>\\n<em>source</em> or <em>collectionSelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[283385,283580],"content":"SelectMany<TSource, TCollection, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, IEnumerable<TCollection>>>, Expressions.Expression<Func<TSource, TCollection, TResult>>)","needQuote":true,"nodes":[{"content":"SelectMany&lt;TSource, TCollection, TResult&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Int32, IEnumerable&lt;TCollection&gt;&gt;&gt;, Expressions.Expression&lt;Func&lt;TSource, TCollection, TResult&gt;&gt;)","pos":[0,195],"source":"SelectMany<TSource, TCollection, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, IEnumerable<TCollection>>>, Expressions.Expression<Func<TSource, TCollection, TResult>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to project.&lt;/p&gt;\\n","pos":[285416,285459],"source":"\\n<p>A sequence of values to project.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element of the input sequence; the second parameter of this function represents the index of the source element.&lt;/p&gt;\\n","pos":[285648,285810],"source":"\\n<p>A projection function to apply to each element of the input sequence; the second parameter of this function represents the index of the source element.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element of each intermediate sequence.&lt;/p&gt;\\n","pos":[285952,286040],"source":"\\n<p>A projection function to apply to each element of each intermediate sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[286100,286155],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the intermediate elements collected by the function represented by &lt;em&gt;collectionSelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[286199,286317],"source":"\\n<p>The type of the intermediate elements collected by the function represented by <em>collectionSelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the resulting sequence.&lt;/p&gt;\\n","pos":[286357,286419],"source":"\\n<p>The type of the elements of the resulting sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;collectionSelector&lt;/em&gt; or &lt;em&gt;resultSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[286975,287087],"source":"\\n<p>\\n<em>source</em> or <em>collectionSelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[288638,288703],"content":"SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"SequenceEqual&lt;TSource&gt;(IQueryable&lt;TSource&gt;, IEnumerable&lt;TSource&gt;)","pos":[0,65],"source":"SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\\n","pos":[290216,290275],"source":"\\n<p>The type of the elements of the input sequences.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[290336,290501],"source":"\\n<p>\\n<strong>true</strong> if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source1&lt;/em&gt; or &lt;em&gt;source2&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[290620,290695],"source":"\\n<p>\\n<em>source1</em> or <em>source2</em> is <strong>null</strong>.</p>\\n"},{"pos":[291795,291888],"content":"SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)","needQuote":true,"nodes":[{"content":"SequenceEqual&lt;TSource&gt;(IQueryable&lt;TSource&gt;, IEnumerable&lt;TSource&gt;, IEqualityComparer&lt;TSource&gt;)","pos":[0,93],"source":"SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\\n","pos":[293882,293941],"source":"\\n<p>The type of the elements of the input sequences.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[294002,294167],"source":"\\n<p>\\n<strong>true</strong> if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source1&lt;/em&gt; or &lt;em&gt;source2&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[294286,294361],"source":"\\n<p>\\n<em>source1</em> or <em>source2</em> is <strong>null</strong>.</p>\\n"},{"pos":[295306,295342],"content":"Single<TSource>(IQueryable<TSource>)","needQuote":true,"nodes":[{"content":"Single&lt;TSource&gt;(IQueryable&lt;TSource&gt;)","pos":[0,36],"source":"Single<TSource>(IQueryable<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[296429,296484],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The single element of the input sequence.&lt;/p&gt;\\n","pos":[296542,296594],"source":"\\n<p>The single element of the input sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[296713,296767],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; has more than one element.&lt;/p&gt;\\n","pos":[296880,296935],"source":"\\n<p>\\n<em>source</em> has more than one element.</p>\\n"},{"pos":[297784,297868],"content":"Single<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)","needQuote":true,"nodes":[{"content":"Single&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Boolean&gt;&gt;)","pos":[0,84],"source":"Single<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)"}]},{"content":"\\n&lt;p&gt;A function to test an element for a condition.&lt;/p&gt;\\n","pos":[299241,299298],"source":"\\n<p>A function to test an element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[299358,299413],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The single element of the input sequence that satisfies the condition in &lt;em&gt;predicate&lt;/em&gt;.&lt;/p&gt;\\n","pos":[299471,299574],"source":"\\n<p>The single element of the input sequence that satisfies the condition in <em>predicate</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[299693,299769],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;No element satisfies the condition in &lt;em&gt;predicate&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;More than one element satisfies the condition in &lt;em&gt;predicate&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The source sequence is empty.&lt;/p&gt;\\n","pos":[299882,300091],"source":"\\n<p>No element satisfies the condition in <em>predicate</em>.</p>\\n<p>-or-</p>\\n<p>More than one element satisfies the condition in <em>predicate</em>.</p>\\n<p>-or-</p>\\n<p>The source sequence is empty.</p>\\n"},{"pos":[300999,301044],"content":"SingleOrDefault<TSource>(IQueryable<TSource>)","needQuote":true,"nodes":[{"content":"SingleOrDefault&lt;TSource&gt;(IQueryable&lt;TSource&gt;)","pos":[0,45],"source":"SingleOrDefault<TSource>(IQueryable<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[302218,302273],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The single element of the input sequence, or default(&lt;em&gt;TSource&lt;/em&gt;) if the sequence contains no elements.&lt;/p&gt;\\n","pos":[302331,302450],"source":"\\n<p>The single element of the input sequence, or default(<em>TSource</em>) if the sequence contains no elements.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[302569,302623],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; has more than one element.&lt;/p&gt;\\n","pos":[302736,302791],"source":"\\n<p>\\n<em>source</em> has more than one element.</p>\\n"},{"pos":[303703,303796],"content":"SingleOrDefault<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)","needQuote":true,"nodes":[{"content":"SingleOrDefault&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Boolean&gt;&gt;)","pos":[0,93],"source":"SingleOrDefault<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)"}]},{"content":"\\n&lt;p&gt;A function to test an element for a condition.&lt;/p&gt;\\n","pos":[305270,305327],"source":"\\n<p>A function to test an element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[305387,305442],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The single element of the input sequence that satisfies the condition in &lt;em&gt;predicate&lt;/em&gt;, or default(&lt;em&gt;TSource&lt;/em&gt;) if no such element is found.&lt;/p&gt;\\n","pos":[305500,305661],"source":"\\n<p>The single element of the input sequence that satisfies the condition in <em>predicate</em>, or default(<em>TSource</em>) if no such element is found.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[305780,305856],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;More than one element satisfies the condition in &lt;em&gt;predicate&lt;/em&gt;.&lt;/p&gt;\\n","pos":[305969,306048],"source":"\\n<p>More than one element satisfies the condition in <em>predicate</em>.</p>\\n"},{"pos":[306998,307039],"content":"Skip<TSource>(IQueryable<TSource>, Int32)","needQuote":true,"nodes":[{"content":"Skip&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Int32)","pos":[0,41],"source":"Skip<TSource>(IQueryable<TSource>, Int32)"}]},{"content":"\\n&lt;p&gt;The number of elements to skip before returning the remaining elements.&lt;/p&gt;\\n","pos":[308161,308243],"source":"\\n<p>The number of elements to skip before returning the remaining elements.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[308303,308358],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[308738,308792],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[309677,309764],"content":"SkipWhile<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)","needQuote":true,"nodes":[{"content":"SkipWhile&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Boolean&gt;&gt;)","pos":[0,87],"source":"SkipWhile<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)"}]},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[311143,311202],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[311262,311317],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[311770,311846],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"pos":[312991,313085],"content":"SkipWhile<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, Boolean>>)","needQuote":true,"nodes":[{"content":"SkipWhile&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Int32, Boolean&gt;&gt;)","pos":[0,94],"source":"SkipWhile<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, Boolean>>)"}]},{"content":"\\n&lt;p&gt;A function to test each element for a condition; the second parameter of this function represents the index of the source element.&lt;/p&gt;\\n","pos":[314573,314714],"source":"\\n<p>A function to test each element for a condition; the second parameter of this function represents the index of the source element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[314774,314829],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[315282,315358],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"pos":[316301,316325],"content":"Sum(IQueryable<Decimal>)","needQuote":true,"nodes":[{"content":"Sum(IQueryable&lt;Decimal&gt;)","pos":[0,24],"source":"Sum(IQueryable<Decimal>)"}]},{"content":"\\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\\n","pos":[317383,317432],"source":"\\n<p>The sum of the values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[317551,317605],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[318427,318450],"content":"Sum(IQueryable<Double>)","needQuote":true,"nodes":[{"content":"Sum(IQueryable&lt;Double&gt;)","pos":[0,23],"source":"Sum(IQueryable<Double>)"}]},{"content":"\\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\\n","pos":[319499,319548],"source":"\\n<p>The sum of the values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[319667,319721],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[320321,320343],"content":"Sum(IQueryable<Int32>)","needQuote":true,"nodes":[{"content":"Sum(IQueryable&lt;Int32&gt;)","pos":[0,22],"source":"Sum(IQueryable<Int32>)"}]},{"content":"\\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\\n","pos":[321383,321432],"source":"\\n<p>The sum of the values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[321551,321605],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[322414,322436],"content":"Sum(IQueryable<Int64>)","needQuote":true,"nodes":[{"content":"Sum(IQueryable&lt;Int64&gt;)","pos":[0,22],"source":"Sum(IQueryable<Int64>)"}]},{"content":"\\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\\n","pos":[323472,323521],"source":"\\n<p>The sum of the values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[323640,323694],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[324560,324594],"content":"Sum(IQueryable<Nullable<Decimal>>)","needQuote":true,"nodes":[{"content":"Sum(IQueryable&lt;Nullable&lt;Decimal&gt;&gt;)","pos":[0,34],"source":"Sum(IQueryable<Nullable<Decimal>>)"}]},{"content":"\\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\\n","pos":[325728,325777],"source":"\\n<p>The sum of the values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[325896,325950],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[326879,326912],"content":"Sum(IQueryable<Nullable<Double>>)","needQuote":true,"nodes":[{"content":"Sum(IQueryable&lt;Nullable&lt;Double&gt;&gt;)","pos":[0,33],"source":"Sum(IQueryable<Nullable<Double>>)"}]},{"content":"\\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\\n","pos":[328037,328086],"source":"\\n<p>The sum of the values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[328205,328259],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[328966,328998],"content":"Sum(IQueryable<Nullable<Int32>>)","needQuote":true,"nodes":[{"content":"Sum(IQueryable&lt;Nullable&lt;Int32&gt;&gt;)","pos":[0,32],"source":"Sum(IQueryable<Nullable<Int32>>)"}]},{"content":"\\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\\n","pos":[330114,330163],"source":"\\n<p>The sum of the values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[330282,330336],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[331252,331284],"content":"Sum(IQueryable<Nullable<Int64>>)","needQuote":true,"nodes":[{"content":"Sum(IQueryable&lt;Nullable&lt;Int64&gt;&gt;)","pos":[0,32],"source":"Sum(IQueryable<Nullable<Int64>>)"}]},{"content":"\\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\\n","pos":[332396,332445],"source":"\\n<p>The sum of the values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[332564,332618],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[333537,333570],"content":"Sum(IQueryable<Nullable<Single>>)","needQuote":true,"nodes":[{"content":"Sum(IQueryable&lt;Nullable&lt;Single&gt;&gt;)","pos":[0,33],"source":"Sum(IQueryable<Nullable<Single>>)"}]},{"content":"\\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\\n","pos":[334693,334742],"source":"\\n<p>The sum of the values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[334861,334915],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[335574,335597],"content":"Sum(IQueryable<Single>)","needQuote":true,"nodes":[{"content":"Sum(IQueryable&lt;Single&gt;)","pos":[0,23],"source":"Sum(IQueryable<Single>)"}]},{"content":"\\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\\n","pos":[336644,336693],"source":"\\n<p>The sum of the values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[336812,336866],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[337652,337733],"content":"Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Decimal>>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Decimal&gt;&gt;)","pos":[0,81],"source":"Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Decimal>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values of type &lt;em&gt;TSource&lt;/em&gt;.&lt;/p&gt;\\n","pos":[338905,338962],"source":"\\n<p>A sequence of values of type <em>TSource</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element.&lt;/p&gt;\\n","pos":[339089,339147],"source":"\\n<p>A projection function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[339207,339262],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\\n","pos":[339323,339366],"source":"\\n<p>The sum of the projected values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[339485,339560],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[340836,340916],"content":"Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Double>>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Double&gt;&gt;)","pos":[0,80],"source":"Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Double>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values of type &lt;em&gt;TSource&lt;/em&gt;.&lt;/p&gt;\\n","pos":[342082,342139],"source":"\\n<p>A sequence of values of type <em>TSource</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element.&lt;/p&gt;\\n","pos":[342265,342323],"source":"\\n<p>A projection function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[342383,342438],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\\n","pos":[342498,342541],"source":"\\n<p>The sum of the projected values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[342660,342735],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[343789,343868],"content":"Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32>>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Int32&gt;&gt;)","pos":[0,79],"source":"Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values of type &lt;em&gt;TSource&lt;/em&gt;.&lt;/p&gt;\\n","pos":[345028,345085],"source":"\\n<p>A sequence of values of type <em>TSource</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element.&lt;/p&gt;\\n","pos":[345210,345268],"source":"\\n<p>A projection function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[345328,345383],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\\n","pos":[345442,345485],"source":"\\n<p>The sum of the projected values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[345604,345679],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[346942,347021],"content":"Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int64>>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Int64&gt;&gt;)","pos":[0,79],"source":"Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int64>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values of type &lt;em&gt;TSource&lt;/em&gt;.&lt;/p&gt;\\n","pos":[348177,348234],"source":"\\n<p>A sequence of values of type <em>TSource</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element.&lt;/p&gt;\\n","pos":[348359,348417],"source":"\\n<p>A projection function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[348477,348532],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\\n","pos":[348591,348634],"source":"\\n<p>The sum of the projected values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[348753,348828],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[350148,350239],"content":"Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Decimal>>>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Nullable&lt;Decimal&gt;&gt;&gt;)","pos":[0,91],"source":"Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Decimal>>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values of type &lt;em&gt;TSource&lt;/em&gt;.&lt;/p&gt;\\n","pos":[351444,351501],"source":"\\n<p>A sequence of values of type <em>TSource</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element.&lt;/p&gt;\\n","pos":[351645,351703],"source":"\\n<p>A projection function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[351763,351818],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\\n","pos":[351896,351939],"source":"\\n<p>The sum of the projected values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[352058,352133],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[353516,353606],"content":"Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Double>>>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Nullable&lt;Double&gt;&gt;&gt;)","pos":[0,90],"source":"Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Double>>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values of type &lt;em&gt;TSource&lt;/em&gt;.&lt;/p&gt;\\n","pos":[354805,354862],"source":"\\n<p>A sequence of values of type <em>TSource</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element.&lt;/p&gt;\\n","pos":[355005,355063],"source":"\\n<p>A projection function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[355123,355178],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\\n","pos":[355255,355298],"source":"\\n<p>The sum of the projected values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[355417,355492],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[356653,356742],"content":"Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Int32>>>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Nullable&lt;Int32&gt;&gt;&gt;)","pos":[0,89],"source":"Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Int32>>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values of type &lt;em&gt;TSource&lt;/em&gt;.&lt;/p&gt;\\n","pos":[357935,357992],"source":"\\n<p>A sequence of values of type <em>TSource</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element.&lt;/p&gt;\\n","pos":[358134,358192],"source":"\\n<p>A projection function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[358252,358307],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\\n","pos":[358383,358426],"source":"\\n<p>The sum of the projected values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[358545,358620],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[359990,360079],"content":"Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Int64>>>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Nullable&lt;Int64&gt;&gt;&gt;)","pos":[0,89],"source":"Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Int64>>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values of type &lt;em&gt;TSource&lt;/em&gt;.&lt;/p&gt;\\n","pos":[361268,361325],"source":"\\n<p>A sequence of values of type <em>TSource</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element.&lt;/p&gt;\\n","pos":[361467,361525],"source":"\\n<p>A projection function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[361585,361640],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\\n","pos":[361716,361759],"source":"\\n<p>The sum of the projected values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[361878,361953],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[363326,363416],"content":"Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Single>>>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Nullable&lt;Single&gt;&gt;&gt;)","pos":[0,90],"source":"Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Single>>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values of type &lt;em&gt;TSource&lt;/em&gt;.&lt;/p&gt;\\n","pos":[364613,364670],"source":"\\n<p>A sequence of values of type <em>TSource</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element.&lt;/p&gt;\\n","pos":[364813,364871],"source":"\\n<p>A projection function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[364931,364986],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\\n","pos":[365063,365106],"source":"\\n<p>The sum of the projected values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[365225,365300],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[366413,366493],"content":"Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Single>>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Single&gt;&gt;)","pos":[0,80],"source":"Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Single>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values of type &lt;em&gt;TSource&lt;/em&gt;.&lt;/p&gt;\\n","pos":[367657,367714],"source":"\\n<p>A sequence of values of type <em>TSource</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A projection function to apply to each element.&lt;/p&gt;\\n","pos":[367840,367898],"source":"\\n<p>A projection function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[367958,368013],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\\n","pos":[368073,368116],"source":"\\n<p>The sum of the projected values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[368235,368310],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[369208,369249],"content":"Take<TSource>(IQueryable<TSource>, Int32)","needQuote":true,"nodes":[{"content":"Take&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Int32)","pos":[0,41],"source":"Take<TSource>(IQueryable<TSource>, Int32)"}]},{"content":"\\n&lt;p&gt;The sequence to return elements from.&lt;/p&gt;\\n","pos":[370170,370218],"source":"\\n<p>The sequence to return elements from.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements to return.&lt;/p&gt;\\n","pos":[370281,370325],"source":"\\n<p>The number of elements to return.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[370385,370440],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[370819,370873],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[371758,371845],"content":"TakeWhile<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)","needQuote":true,"nodes":[{"content":"TakeWhile&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Boolean&gt;&gt;)","pos":[0,87],"source":"TakeWhile<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)"}]},{"content":"\\n&lt;p&gt;The sequence to return elements from.&lt;/p&gt;\\n","pos":[372934,372982],"source":"\\n<p>The sequence to return elements from.</p>\\n"},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[373110,373169],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[373229,373284],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[373725,373801],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"pos":[374946,375040],"content":"TakeWhile<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, Boolean>>)","needQuote":true,"nodes":[{"content":"TakeWhile&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Int32, Boolean&gt;&gt;)","pos":[0,94],"source":"TakeWhile<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, Boolean>>)"}]},{"content":"\\n&lt;p&gt;The sequence to return elements from.&lt;/p&gt;\\n","pos":[376225,376273],"source":"\\n<p>The sequence to return elements from.</p>\\n"},{"content":"\\n&lt;p&gt;A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.&lt;/p&gt;\\n","pos":[376414,376570],"source":"\\n<p>A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[376630,376685],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[377126,377202],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"pos":[378322,378416],"content":"ThenBy<TSource, TKey>(IOrderedQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)","needQuote":true,"nodes":[{"content":"ThenBy&lt;TSource, TKey&gt;(IOrderedQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, TKey&gt;&gt;)","pos":[0,94],"source":"ThenBy<TSource, TKey>(IOrderedQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)"}]},{"content":"\\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\\n","pos":[379828,379885],"source":"\\n<p>A function to extract a key from each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[379945,380000],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by the function represented by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[380037,380129],"source":"\\n<p>The type of the key returned by the function represented by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[380486,380564],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[381796,381907],"content":"ThenBy<TSource, TKey>(IOrderedQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, IComparer<TKey>)","needQuote":true,"nodes":[{"content":"ThenBy&lt;TSource, TKey&gt;(IOrderedQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, TKey&gt;&gt;, IComparer&lt;TKey&gt;)","pos":[0,111],"source":"ThenBy<TSource, TKey>(IOrderedQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, IComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\\n","pos":[383432,383489],"source":"\\n<p>A function to extract a key from each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[383776,383831],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by the function represented by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[383868,383960],"source":"\\n<p>The type of the key returned by the function represented by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; or &lt;em&gt;comparer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[384317,384416],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>comparer</em> is <strong>null</strong>.</p>\\n"},{"pos":[385656,385760],"content":"ThenByDescending<TSource, TKey>(IOrderedQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)","needQuote":true,"nodes":[{"content":"ThenByDescending&lt;TSource, TKey&gt;(IOrderedQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, TKey&gt;&gt;)","pos":[0,104],"source":"ThenByDescending<TSource, TKey>(IOrderedQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)"}]},{"content":"\\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\\n","pos":[387214,387271],"source":"\\n<p>A function to extract a key from each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[387331,387386],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by the function represented by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[387423,387515],"source":"\\n<p>The type of the key returned by the function represented by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[387892,387970],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[389272,389393],"content":"ThenByDescending<TSource, TKey>(IOrderedQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, IComparer<TKey>)","needQuote":true,"nodes":[{"content":"ThenByDescending&lt;TSource, TKey&gt;(IOrderedQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, TKey&gt;&gt;, IComparer&lt;TKey&gt;)","pos":[0,121],"source":"ThenByDescending<TSource, TKey>(IOrderedQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, IComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\\n","pos":[390959,391016],"source":"\\n<p>A function to extract a key from each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[391303,391358],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key that is returned by the &lt;em&gt;keySelector&lt;/em&gt; function.&lt;/p&gt;\\n","pos":[391395,391480],"source":"\\n<p>The type of the key that is returned by the <em>keySelector</em> function.</p>\\n"},{"content":"\\n&lt;p&gt;A collection whose elements are sorted in descending order according to a key.&lt;/p&gt;\\n","pos":[391567,391656],"source":"\\n<p>A collection whose elements are sorted in descending order according to a key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; or &lt;em&gt;comparer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[391775,391874],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>comparer</em> is <strong>null</strong>.</p>\\n"},{"pos":[393061,393118],"content":"Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"Union&lt;TSource&gt;(IQueryable&lt;TSource&gt;, IEnumerable&lt;TSource&gt;)","pos":[0,57],"source":"Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;A sequence whose distinct elements form the first set for the union operation.&lt;/p&gt;\\n","pos":[394118,394207],"source":"\\n<p>A sequence whose distinct elements form the first set for the union operation.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence whose distinct elements form the second set for the union operation.&lt;/p&gt;\\n","pos":[394309,394399],"source":"\\n<p>A sequence whose distinct elements form the second set for the union operation.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\\n","pos":[394459,394518],"source":"\\n<p>The type of the elements of the input sequences.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source1&lt;/em&gt; or &lt;em&gt;source2&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[394891,394966],"source":"\\n<p>\\n<em>source1</em> or <em>source2</em> is <strong>null</strong>.</p>\\n"},{"pos":[396010,396095],"content":"Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)","needQuote":true,"nodes":[{"content":"Union&lt;TSource&gt;(IQueryable&lt;TSource&gt;, IEnumerable&lt;TSource&gt;, IEqualityComparer&lt;TSource&gt;)","pos":[0,85],"source":"Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)"}]},{"content":"\\n&lt;p&gt;A sequence whose distinct elements form the first set for the union operation.&lt;/p&gt;\\n","pos":[397319,397408],"source":"\\n<p>A sequence whose distinct elements form the first set for the union operation.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence whose distinct elements form the second set for the union operation.&lt;/p&gt;\\n","pos":[397510,397600],"source":"\\n<p>A sequence whose distinct elements form the second set for the union operation.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\\n","pos":[397908,397967],"source":"\\n<p>The type of the elements of the input sequences.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source1&lt;/em&gt; or &lt;em&gt;source2&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[398340,398415],"source":"\\n<p>\\n<em>source1</em> or <em>source2</em> is <strong>null</strong>.</p>\\n"},{"pos":[399529,399612],"content":"Where<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)","needQuote":true,"nodes":[{"content":"Where&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Boolean&gt;&gt;)","pos":[0,83],"source":"Where<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)"}]},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[400898,400957],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[401017,401072],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[401476,401552],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"pos":[402669,402759],"content":"Where<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, Boolean>>)","needQuote":true,"nodes":[{"content":"Where&lt;TSource&gt;(IQueryable&lt;TSource&gt;, Expressions.Expression&lt;Func&lt;TSource, Int32, Boolean&gt;&gt;)","pos":[0,90],"source":"Where<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, Boolean>>)"}]},{"content":"\\n&lt;p&gt;A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.&lt;/p&gt;\\n","pos":[404155,404311],"source":"\\n<p>A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[404371,404426],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[404830,404906],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"pos":[406124,406251],"content":"Zip<TFirst, TSecond, TResult>(IQueryable<TFirst>, IEnumerable<TSecond>, Expressions.Expression<Func<TFirst, TSecond, TResult>>)","needQuote":true,"nodes":[{"content":"Zip&lt;TFirst, TSecond, TResult&gt;(IQueryable&lt;TFirst&gt;, IEnumerable&lt;TSecond&gt;, Expressions.Expression&lt;Func&lt;TFirst, TSecond, TResult&gt;&gt;)","pos":[0,127],"source":"Zip<TFirst, TSecond, TResult>(IQueryable<TFirst>, IEnumerable<TSecond>, Expressions.Expression<Func<TFirst, TSecond, TResult>>)"}]},{"content":"\\n&lt;p&gt;The first sequence to merge.&lt;/p&gt;\\n","pos":[407500,407539],"source":"\\n<p>The first sequence to merge.</p>\\n"},{"content":"\\n&lt;p&gt;The second sequence to merge.&lt;/p&gt;\\n","pos":[407641,407681],"source":"\\n<p>The second sequence to merge.</p>\\n"},{"content":"\\n&lt;p&gt;A function that specifies how to merge the elements from the two sequences.&lt;/p&gt;\\n","pos":[407818,407904],"source":"\\n<p>A function that specifies how to merge the elements from the two sequences.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the first input sequence.&lt;/p&gt;\\n","pos":[407963,408027],"source":"\\n<p>The type of the elements of the first input sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the second input sequence.&lt;/p&gt;\\n","pos":[408067,408132],"source":"\\n<p>The type of the elements of the second input sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the result sequence.&lt;/p&gt;\\n","pos":[408172,408231],"source":"\\n<p>The type of the elements of the result sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source1&lt;/em&gt;or &lt;em&gt;source2 &lt;/em&gt;is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[408582,408656],"source":"\\n<p>\\n<em>source1</em>or <em>source2 </em>is <strong>null</strong>.</p>\\n"},{"pos":[409515,409526],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[409672,409678],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[409838,409848],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[409943,409951],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[410020,410021],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[410048,410049],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[410119,410127],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[410196,410197],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[410224,410225],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[410408,410422],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[410541,410547],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[410614,410615],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[410665,410671],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[410731,410732],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[410815,410821],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[410888,410889],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[410939,410945],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[411005,411006],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[411220,411242],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[411390,411396],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[411463,411464],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[411514,411520],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[411581,411582]},{"pos":[411637,411643],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[411703,411704],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[411801,411807],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[411874,411875],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[411925,411931],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[411992,411993]},{"pos":[412048,412054],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[412114,412115],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[412360,412391],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[412557,412572],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[412648,412649],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[412699,412705],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[412766,412767]},{"pos":[412822,412828],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[412888,412889],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[412995,413010],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[413086,413087],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[413137,413143],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[413204,413205]},{"pos":[413260,413266],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[413326,413327],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[413557,413570],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[413671,413682],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[413754,413755],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[413782,413783],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[413856,413867],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[413939,413940],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[413967,413968],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[414143,414152],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[414245,414252],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[414320,414321],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[414348,414349],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[414418,414425],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[414493,414494],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[414521,414522],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[414697,414714],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[414823,414838],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[414914,414915],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[414942,414943],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[415020,415035],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[415111,415112],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[415139,415140],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[415285,415291],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[415444,415463],"content":"IQueryable<TSource>","needQuote":true,"nodes":[{"content":"IQueryable&lt;TSource&gt;","pos":[0,19],"source":"IQueryable<TSource>"}]},{"pos":[415651,415661],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"pos":[415730,415731],"content":"<","needQuote":true,"nodes":[]},{"pos":[415758,415765],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[415875,415885],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"content":"(Of","pos":[415955,415958]},{"pos":[415992,415999],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[416032,416033],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[416318,416373],"content":"Expressions.Expression<Func<TSource, TSource, TSource>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TSource, TSource, TSource&gt;&gt;","pos":[0,55],"source":"Expressions.Expression<Func<TSource, TSource, TSource>>"}]},{"pos":[416701,416723],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[416804,416805],"content":"<","needQuote":true,"nodes":[]},{"pos":[416855,416859],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[416917,416918],"content":"<","needQuote":true,"nodes":[]},{"pos":[416945,416952],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[416986,416987]},{"pos":[417019,417026],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[417060,417061]},{"pos":[417093,417100],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[417254,417276],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[417358,417361]},{"pos":[417418,417422],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[417481,417484]},{"pos":[417518,417525],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[417559,417560]},{"pos":[417592,417599],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[417633,417634]},{"pos":[417666,417673],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[417706,417707],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[417734,417735],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[418032,418039],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[418169,418182],"content":"IQueryable<T>","needQuote":true,"nodes":[{"content":"IQueryable&lt;T&gt;","pos":[0,13],"source":"IQueryable<T>"}]},{"pos":[418352,418362],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"pos":[418410,418411],"content":"<","needQuote":true,"nodes":[]},{"pos":[418438,418439],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[418543,418553],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"content":"(Of","pos":[418602,418605]},{"pos":[418639,418640],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[418667,418668],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[418897,418918],"content":"Expression<TDelegate>","needQuote":true,"nodes":[{"content":"Expression&lt;TDelegate&gt;","pos":[0,21],"source":"Expression<TDelegate>"}]},{"pos":[419148,419158],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[419218,419219],"content":"<","needQuote":true,"nodes":[]},{"pos":[419246,419255],"content":"TDelegate","needQuote":true,"nodes":[{"content":"TDelegate","pos":[0,9]}]},{"pos":[419379,419389],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"content":"(Of","pos":[419450,419453]},{"pos":[419487,419496],"content":"TDelegate","needQuote":true,"nodes":[{"content":"TDelegate","pos":[0,9]}]},{"pos":[419531,419532],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[419726,419733],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[419837,419860],"content":"System.Linq.Expressions","needQuote":true,"nodes":[{"content":"System.Linq.Expressions","pos":[0,23]}]},{"pos":[420033,420044],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"pos":[420279,420342],"content":"Expressions.Expression<Func<TAccumulate, TSource, TAccumulate>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TAccumulate, TSource, TAccumulate&gt;&gt;","pos":[0,63],"source":"Expressions.Expression<Func<TAccumulate, TSource, TAccumulate>>"}]},{"pos":[420694,420716],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[420797,420798],"content":"<","needQuote":true,"nodes":[]},{"pos":[420848,420852],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[420910,420911],"content":"<","needQuote":true,"nodes":[]},{"pos":[420938,420949],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"content":",","pos":[420987,420988]},{"pos":[421020,421027],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[421061,421062]},{"pos":[421094,421105],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"pos":[421263,421285],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[421367,421370]},{"pos":[421427,421431],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[421490,421493]},{"pos":[421527,421538],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"content":",","pos":[421576,421577]},{"pos":[421609,421616],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[421650,421651]},{"pos":[421683,421694],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"pos":[421731,421732],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[421759,421760],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[422071,422082],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"pos":[422274,422324],"content":"Expressions.Expression<Func<TAccumulate, TResult>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TAccumulate, TResult&gt;&gt;","pos":[0,50],"source":"Expressions.Expression<Func<TAccumulate, TResult>>"}]},{"pos":[422637,422659],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[422740,422741],"content":"<","needQuote":true,"nodes":[]},{"pos":[422791,422795],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[422853,422854],"content":"<","needQuote":true,"nodes":[]},{"pos":[422881,422892],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"content":",","pos":[422930,422931]},{"pos":[422963,422970],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[423124,423146],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[423228,423231]},{"pos":[423288,423292],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[423351,423354]},{"pos":[423388,423399],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"content":",","pos":[423437,423438]},{"pos":[423470,423477],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[423510,423511],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[423538,423539],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[423822,423829],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[423942,423949],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[424134,424180],"content":"Expressions.Expression<Func<TSource, Boolean>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TSource, Boolean&gt;&gt;","pos":[0,46],"source":"Expressions.Expression<Func<TSource, Boolean>>"}]},{"pos":[424495,424517],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[424598,424599],"content":"<","needQuote":true,"nodes":[]},{"pos":[424649,424653],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[424711,424712],"content":"<","needQuote":true,"nodes":[]},{"pos":[424739,424746],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[424780,424781]},{"pos":[424837,424844],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[425026,425048],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[425130,425133]},{"pos":[425190,425194],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[425253,425256]},{"pos":[425290,425297],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[425331,425332]},{"pos":[425388,425395],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[425456,425457],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[425484,425485],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[425789,425796],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[425973,425984],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[426182,426192],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"pos":[426347,426365],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[426624,426645],"content":"IEnumerable<TElement>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;TElement&gt;","pos":[0,21],"source":"IEnumerable<TElement>"}]},{"pos":[426885,426896],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[426981,426982],"content":"<","needQuote":true,"nodes":[]},{"pos":[427009,427017],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[427144,427155],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[427241,427244]},{"pos":[427278,427286],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[427320,427321],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[427590,427610],"content":"IQueryable<TElement>","needQuote":true,"nodes":[{"content":"IQueryable&lt;TElement&gt;","pos":[0,20],"source":"IQueryable<TElement>"}]},{"pos":[427801,427811],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"pos":[427859,427860],"content":"<","needQuote":true,"nodes":[]},{"pos":[427887,427895],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[428006,428016],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"content":"(Of","pos":[428065,428068]},{"pos":[428102,428110],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[428144,428145],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[428361,428375],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[428594,428605],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[428669,428670],"content":"<","needQuote":true,"nodes":[]},{"pos":[428697,428698],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[428818,428829],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[428894,428897]},{"pos":[428931,428932],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[428959,428960],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[429163,429189],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[429407,429426],"content":"IQueryable<Decimal>","needQuote":true,"nodes":[{"content":"IQueryable&lt;Decimal&gt;","pos":[0,19],"source":"IQueryable<Decimal>"}]},{"pos":[429628,429638],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"pos":[429707,429708],"content":"<","needQuote":true,"nodes":[]},{"pos":[429759,429766],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[429904,429914],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"content":"(Of","pos":[429984,429987]},{"pos":[430045,430052],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[430113,430114],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[430332,430339],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[430513,430531],"content":"IQueryable<Double>","needQuote":true,"nodes":[{"content":"IQueryable&lt;Double&gt;","pos":[0,18],"source":"IQueryable<Double>"}]},{"pos":[430730,430740],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"pos":[430809,430810],"content":"<","needQuote":true,"nodes":[]},{"pos":[430860,430866],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[431003,431013],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"content":"(Of","pos":[431083,431086]},{"pos":[431143,431149],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[431209,431210],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[431424,431430],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[431600,431617],"content":"IQueryable<Int32>","needQuote":true,"nodes":[{"content":"IQueryable&lt;Int32&gt;","pos":[0,17],"source":"IQueryable<Int32>"}]},{"pos":[431813,431823],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"pos":[431892,431893],"content":"<","needQuote":true,"nodes":[]},{"pos":[431942,431947],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[432083,432093],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"content":"(Of","pos":[432163,432166]},{"pos":[432222,432227],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[432286,432287],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[432523,432540],"content":"IQueryable<Int64>","needQuote":true,"nodes":[{"content":"IQueryable&lt;Int64&gt;","pos":[0,17],"source":"IQueryable<Int64>"}]},{"pos":[432736,432746],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"pos":[432815,432816],"content":"<","needQuote":true,"nodes":[]},{"pos":[432865,432870],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[433006,433016],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"content":"(Of","pos":[433086,433089]},{"pos":[433145,433150],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[433209,433210],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[433465,433494],"content":"IQueryable<Nullable<Decimal>>","needQuote":true,"nodes":[{"content":"IQueryable&lt;Nullable&lt;Decimal&gt;&gt;","pos":[0,29],"source":"IQueryable<Nullable<Decimal>>"}]},{"pos":[433746,433756],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"pos":[433825,433826],"content":"<","needQuote":true,"nodes":[]},{"pos":[433880,433888],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[433950,433951],"content":"<","needQuote":true,"nodes":[]},{"pos":[434002,434009],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[434179,434189],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"content":"(Of","pos":[434259,434262]},{"pos":[434323,434331],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[434394,434397]},{"pos":[434455,434462],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[434523,434524],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[434551,434552],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[434839,434856],"content":"Nullable<Decimal>","needQuote":true,"nodes":[{"content":"Nullable&lt;Decimal&gt;","pos":[0,17],"source":"Nullable<Decimal>"}]},{"pos":[435035,435043],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[435105,435106],"content":"<","needQuote":true,"nodes":[]},{"pos":[435157,435164],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[435295,435303],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[435366,435369]},{"pos":[435427,435434],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[435495,435496],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[435704,435715],"content":"Nullable<T>","needQuote":true,"nodes":[{"content":"Nullable&lt;T&gt;","pos":[0,11],"source":"Nullable<T>"}]},{"pos":[435862,435870],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[435911,435912],"content":"<","needQuote":true,"nodes":[]},{"pos":[435939,435940],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[436037,436045],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[436087,436090]},{"pos":[436124,436125],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[436152,436153],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[436374,436402],"content":"IQueryable<Nullable<Double>>","needQuote":true,"nodes":[{"content":"IQueryable&lt;Nullable&lt;Double&gt;&gt;","pos":[0,28],"source":"IQueryable<Nullable<Double>>"}]},{"pos":[436651,436661],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"pos":[436730,436731],"content":"<","needQuote":true,"nodes":[]},{"pos":[436785,436793],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[436855,436856],"content":"<","needQuote":true,"nodes":[]},{"pos":[436906,436912],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[437081,437091],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"content":"(Of","pos":[437161,437164]},{"pos":[437225,437233],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[437296,437299]},{"pos":[437356,437362],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[437422,437423],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[437450,437451],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[437734,437750],"content":"Nullable<Double>","needQuote":true,"nodes":[{"content":"Nullable&lt;Double&gt;","pos":[0,16],"source":"Nullable<Double>"}]},{"pos":[437926,437934],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[437996,437997],"content":"<","needQuote":true,"nodes":[]},{"pos":[438047,438053],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[438183,438191],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[438254,438257]},{"pos":[438314,438320],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[438380,438381],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[438624,438651],"content":"IQueryable<Nullable<Int32>>","needQuote":true,"nodes":[{"content":"IQueryable&lt;Nullable&lt;Int32&gt;&gt;","pos":[0,27],"source":"IQueryable<Nullable<Int32>>"}]},{"pos":[438897,438907],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"pos":[438976,438977],"content":"<","needQuote":true,"nodes":[]},{"pos":[439031,439039],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[439101,439102],"content":"<","needQuote":true,"nodes":[]},{"pos":[439151,439156],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[439324,439334],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"content":"(Of","pos":[439404,439407]},{"pos":[439468,439476],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[439539,439542]},{"pos":[439598,439603],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[439662,439663],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[439690,439691],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[439984,440011],"content":"IQueryable<Nullable<Int64>>","needQuote":true,"nodes":[{"content":"IQueryable&lt;Nullable&lt;Int64&gt;&gt;","pos":[0,27],"source":"IQueryable<Nullable<Int64>>"}]},{"pos":[440257,440267],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"pos":[440336,440337],"content":"<","needQuote":true,"nodes":[]},{"pos":[440391,440399],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[440461,440462],"content":"<","needQuote":true,"nodes":[]},{"pos":[440511,440516],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[440684,440694],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"content":"(Of","pos":[440764,440767]},{"pos":[440828,440836],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[440899,440902]},{"pos":[440958,440963],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[441022,441023],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[441050,441051],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[441345,441373],"content":"IQueryable<Nullable<Single>>","needQuote":true,"nodes":[{"content":"IQueryable&lt;Nullable&lt;Single&gt;&gt;","pos":[0,28],"source":"IQueryable<Nullable<Single>>"}]},{"pos":[441622,441632],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"pos":[441701,441702],"content":"<","needQuote":true,"nodes":[]},{"pos":[441756,441764],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[441826,441827],"content":"<","needQuote":true,"nodes":[]},{"pos":[441877,441883],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[442052,442062],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"content":"(Of","pos":[442132,442135]},{"pos":[442196,442204],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[442267,442270]},{"pos":[442327,442333],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[442393,442394],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[442421,442422],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[442705,442721],"content":"Nullable<Single>","needQuote":true,"nodes":[{"content":"Nullable&lt;Single&gt;","pos":[0,16],"source":"Nullable<Single>"}]},{"pos":[442897,442905],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[442967,442968],"content":"<","needQuote":true,"nodes":[]},{"pos":[443018,443024],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[443154,443162],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[443225,443228]},{"pos":[443285,443291],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[443351,443352],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[443579,443597],"content":"IQueryable<Single>","needQuote":true,"nodes":[{"content":"IQueryable&lt;Single&gt;","pos":[0,18],"source":"IQueryable<Single>"}]},{"pos":[443796,443806],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"pos":[443875,443876],"content":"<","needQuote":true,"nodes":[]},{"pos":[443926,443932],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[444069,444079],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"content":"(Of","pos":[444149,444152]},{"pos":[444209,444215],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[444275,444276],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[444490,444496],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[444715,444761],"content":"Expressions.Expression<Func<TSource, Decimal>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TSource, Decimal&gt;&gt;","pos":[0,46],"source":"Expressions.Expression<Func<TSource, Decimal>>"}]},{"pos":[445076,445098],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[445179,445180],"content":"<","needQuote":true,"nodes":[]},{"pos":[445230,445234],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[445292,445293],"content":"<","needQuote":true,"nodes":[]},{"pos":[445320,445327],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[445361,445362]},{"pos":[445418,445425],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[445607,445629],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[445711,445714]},{"pos":[445771,445775],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[445834,445837]},{"pos":[445871,445878],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[445912,445913]},{"pos":[445969,445976],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[446037,446038],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[446065,446066],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[446442,446487],"content":"Expressions.Expression<Func<TSource, Double>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TSource, Double&gt;&gt;","pos":[0,45],"source":"Expressions.Expression<Func<TSource, Double>>"}]},{"pos":[446799,446821],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[446902,446903],"content":"<","needQuote":true,"nodes":[]},{"pos":[446953,446957],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[447015,447016],"content":"<","needQuote":true,"nodes":[]},{"pos":[447043,447050],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[447084,447085]},{"pos":[447140,447146],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[447327,447349],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[447431,447434]},{"pos":[447491,447495],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[447554,447557]},{"pos":[447591,447598],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[447632,447633]},{"pos":[447688,447694],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[447754,447755],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[447782,447783],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[448155,448199],"content":"Expressions.Expression<Func<TSource, Int32>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TSource, Int32&gt;&gt;","pos":[0,44],"source":"Expressions.Expression<Func<TSource, Int32>>"}]},{"pos":[448508,448530],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[448611,448612],"content":"<","needQuote":true,"nodes":[]},{"pos":[448662,448666],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[448724,448725],"content":"<","needQuote":true,"nodes":[]},{"pos":[448752,448759],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[448793,448794]},{"pos":[448848,448853],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[449033,449055],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[449137,449140]},{"pos":[449197,449201],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[449260,449263]},{"pos":[449297,449304],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[449338,449339]},{"pos":[449393,449398],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[449457,449458],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[449485,449486],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[449855,449899],"content":"Expressions.Expression<Func<TSource, Int64>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TSource, Int64&gt;&gt;","pos":[0,44],"source":"Expressions.Expression<Func<TSource, Int64>>"}]},{"pos":[450208,450230],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[450311,450312],"content":"<","needQuote":true,"nodes":[]},{"pos":[450362,450366],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[450424,450425],"content":"<","needQuote":true,"nodes":[]},{"pos":[450452,450459],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[450493,450494]},{"pos":[450548,450553],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[450733,450755],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[450837,450840]},{"pos":[450897,450901],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[450960,450963]},{"pos":[450997,451004],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[451038,451039]},{"pos":[451093,451098],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[451157,451158],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[451185,451186],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[451574,451630],"content":"Expressions.Expression<Func<TSource, Nullable<Decimal>>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TSource, Nullable&lt;Decimal&gt;&gt;&gt;","pos":[0,56],"source":"Expressions.Expression<Func<TSource, Nullable<Decimal>>>"}]},{"pos":[451995,452017],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[452098,452099],"content":"<","needQuote":true,"nodes":[]},{"pos":[452149,452153],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[452211,452212],"content":"<","needQuote":true,"nodes":[]},{"pos":[452239,452246],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[452280,452281]},{"pos":[452340,452348],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[452410,452411],"content":"<","needQuote":true,"nodes":[]},{"pos":[452462,452469],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[452683,452705],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[452787,452790]},{"pos":[452847,452851],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[452910,452913]},{"pos":[452947,452954],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[452988,452989]},{"pos":[453048,453056],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[453119,453122]},{"pos":[453180,453187],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[453248,453249],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[453276,453277],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[453304,453305],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[453738,453793],"content":"Expressions.Expression<Func<TSource, Nullable<Double>>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TSource, Nullable&lt;Double&gt;&gt;&gt;","pos":[0,55],"source":"Expressions.Expression<Func<TSource, Nullable<Double>>>"}]},{"pos":[454155,454177],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[454258,454259],"content":"<","needQuote":true,"nodes":[]},{"pos":[454309,454313],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[454371,454372],"content":"<","needQuote":true,"nodes":[]},{"pos":[454399,454406],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[454440,454441]},{"pos":[454500,454508],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[454570,454571],"content":"<","needQuote":true,"nodes":[]},{"pos":[454621,454627],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[454840,454862],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[454944,454947]},{"pos":[455004,455008],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[455067,455070]},{"pos":[455104,455111],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[455145,455146]},{"pos":[455205,455213],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[455276,455279]},{"pos":[455336,455342],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[455402,455403],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[455430,455431],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[455458,455459],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[455888,455942],"content":"Expressions.Expression<Func<TSource, Nullable<Int32>>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TSource, Nullable&lt;Int32&gt;&gt;&gt;","pos":[0,54],"source":"Expressions.Expression<Func<TSource, Nullable<Int32>>>"}]},{"pos":[456301,456323],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[456404,456405],"content":"<","needQuote":true,"nodes":[]},{"pos":[456455,456459],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[456517,456518],"content":"<","needQuote":true,"nodes":[]},{"pos":[456545,456552],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[456586,456587]},{"pos":[456646,456654],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[456716,456717],"content":"<","needQuote":true,"nodes":[]},{"pos":[456766,456771],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[456983,457005],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[457087,457090]},{"pos":[457147,457151],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[457210,457213]},{"pos":[457247,457254],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[457288,457289]},{"pos":[457348,457356],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[457419,457422]},{"pos":[457478,457483],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[457542,457543],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[457570,457571],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[457598,457599],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[458025,458079],"content":"Expressions.Expression<Func<TSource, Nullable<Int64>>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TSource, Nullable&lt;Int64&gt;&gt;&gt;","pos":[0,54],"source":"Expressions.Expression<Func<TSource, Nullable<Int64>>>"}]},{"pos":[458438,458460],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[458541,458542],"content":"<","needQuote":true,"nodes":[]},{"pos":[458592,458596],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[458654,458655],"content":"<","needQuote":true,"nodes":[]},{"pos":[458682,458689],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[458723,458724]},{"pos":[458783,458791],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[458853,458854],"content":"<","needQuote":true,"nodes":[]},{"pos":[458903,458908],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[459120,459142],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[459224,459227]},{"pos":[459284,459288],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[459347,459350]},{"pos":[459384,459391],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[459425,459426]},{"pos":[459485,459493],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[459556,459559]},{"pos":[459615,459620],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[459679,459680],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[459707,459708],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[459735,459736],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[460163,460218],"content":"Expressions.Expression<Func<TSource, Nullable<Single>>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TSource, Nullable&lt;Single&gt;&gt;&gt;","pos":[0,55],"source":"Expressions.Expression<Func<TSource, Nullable<Single>>>"}]},{"pos":[460580,460602],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[460683,460684],"content":"<","needQuote":true,"nodes":[]},{"pos":[460734,460738],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[460796,460797],"content":"<","needQuote":true,"nodes":[]},{"pos":[460824,460831],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[460865,460866]},{"pos":[460925,460933],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[460995,460996],"content":"<","needQuote":true,"nodes":[]},{"pos":[461046,461052],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[461265,461287],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[461369,461372]},{"pos":[461429,461433],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[461492,461495]},{"pos":[461529,461536],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[461570,461571]},{"pos":[461630,461638],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[461701,461704]},{"pos":[461761,461767],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[461827,461828],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[461855,461856],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[461883,461884],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[462297,462342],"content":"Expressions.Expression<Func<TSource, Single>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TSource, Single&gt;&gt;","pos":[0,45],"source":"Expressions.Expression<Func<TSource, Single>>"}]},{"pos":[462654,462676],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[462757,462758],"content":"<","needQuote":true,"nodes":[]},{"pos":[462808,462812],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[462870,462871],"content":"<","needQuote":true,"nodes":[]},{"pos":[462898,462905],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[462939,462940]},{"pos":[462995,463001],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[463182,463204],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[463286,463289]},{"pos":[463346,463350],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[463409,463412]},{"pos":[463446,463453],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[463487,463488]},{"pos":[463543,463549],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[463609,463610],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[463637,463638],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[463960,463979],"content":"IQueryable<TResult>","needQuote":true,"nodes":[{"content":"IQueryable&lt;TResult&gt;","pos":[0,19],"source":"IQueryable<TResult>"}]},{"pos":[464167,464177],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"pos":[464246,464247],"content":"<","needQuote":true,"nodes":[]},{"pos":[464274,464281],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[464391,464401],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"content":"(Of","pos":[464471,464474]},{"pos":[464508,464515],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[464548,464549],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[464846,464866],"content":"IEnumerable<TSource>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;TSource&gt;","pos":[0,20],"source":"IEnumerable<TSource>"}]},{"pos":[465103,465114],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[465199,465200],"content":"<","needQuote":true,"nodes":[]},{"pos":[465227,465234],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[465360,465371],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[465457,465460]},{"pos":[465494,465501],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[465534,465535],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[465860,465886],"content":"IEqualityComparer<TSource>","needQuote":true,"nodes":[{"content":"IEqualityComparer&lt;TSource&gt;","pos":[0,26],"source":"IEqualityComparer<TSource>"}]},{"pos":[466147,466164],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[466255,466256],"content":"<","needQuote":true,"nodes":[]},{"pos":[466283,466290],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[466422,466439],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"content":"(Of","pos":[466531,466534]},{"pos":[466568,466575],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[466608,466609],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[466865,466885],"content":"IEqualityComparer<T>","needQuote":true,"nodes":[{"content":"IEqualityComparer&lt;T&gt;","pos":[0,20],"source":"IEqualityComparer<T>"}]},{"pos":[467128,467145],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[467215,467216],"content":"<","needQuote":true,"nodes":[]},{"pos":[467243,467244],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[467370,467387],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"content":"(Of","pos":[467458,467461]},{"pos":[467495,467496],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[467523,467524],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[467748,467753],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[467961,468004],"content":"Expressions.Expression<Func<TSource, TKey>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TSource, TKey&gt;&gt;","pos":[0,43],"source":"Expressions.Expression<Func<TSource, TKey>>"}]},{"pos":[468296,468318],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[468399,468400],"content":"<","needQuote":true,"nodes":[]},{"pos":[468450,468454],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[468512,468513],"content":"<","needQuote":true,"nodes":[]},{"pos":[468540,468547],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[468581,468582]},{"pos":[468614,468618],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[468769,468791],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[468873,468876]},{"pos":[468933,468937],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[468996,468999]},{"pos":[469033,469040],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[469074,469075]},{"pos":[469107,469111],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[469141,469142],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[469169,469170],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[469508,469544],"content":"IQueryable<IGrouping<TKey, TSource>>","needQuote":true,"nodes":[{"content":"IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt;","pos":[0,36],"source":"IQueryable<IGrouping<TKey, TSource>>"}]},{"pos":[469813,469823],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"pos":[469892,469893],"content":"<","needQuote":true,"nodes":[]},{"pos":[469953,469962],"content":"IGrouping","needQuote":true,"nodes":[{"content":"IGrouping","pos":[0,9]}]},{"pos":[470030,470031],"content":"<","needQuote":true,"nodes":[]},{"pos":[470058,470062],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[470093,470094]},{"pos":[470126,470133],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[470275,470285],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"content":"(Of","pos":[470355,470358]},{"pos":[470425,470434],"content":"IGrouping","needQuote":true,"nodes":[{"content":"IGrouping","pos":[0,9]}]},{"content":"(Of","pos":[470503,470506]},{"pos":[470540,470544],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[470575,470576]},{"pos":[470608,470615],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[470648,470649],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[470676,470677],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[471047,471070],"content":"IEqualityComparer<TKey>","needQuote":true,"nodes":[{"content":"IEqualityComparer&lt;TKey&gt;","pos":[0,23],"source":"IEqualityComparer<TKey>"}]},{"pos":[471322,471339],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[471430,471431],"content":"<","needQuote":true,"nodes":[]},{"pos":[471458,471462],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[471591,471608],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"content":"(Of","pos":[471700,471703]},{"pos":[471737,471741],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[471771,471772],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[472076,472123],"content":"Expressions.Expression<Func<TSource, TElement>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TSource, TElement&gt;&gt;","pos":[0,47],"source":"Expressions.Expression<Func<TSource, TElement>>"}]},{"pos":[472427,472449],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[472530,472531],"content":"<","needQuote":true,"nodes":[]},{"pos":[472581,472585],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[472643,472644],"content":"<","needQuote":true,"nodes":[]},{"pos":[472671,472678],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[472712,472713]},{"pos":[472745,472753],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[472908,472930],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[473012,473015]},{"pos":[473072,473076],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[473135,473138]},{"pos":[473172,473179],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[473213,473214]},{"pos":[473246,473254],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[473288,473289],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[473316,473317],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[473664,473701],"content":"IQueryable<IGrouping<TKey, TElement>>","needQuote":true,"nodes":[{"content":"IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt;","pos":[0,37],"source":"IQueryable<IGrouping<TKey, TElement>>"}]},{"pos":[473973,473983],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"pos":[474052,474053],"content":"<","needQuote":true,"nodes":[]},{"pos":[474113,474122],"content":"IGrouping","needQuote":true,"nodes":[{"content":"IGrouping","pos":[0,9]}]},{"pos":[474190,474191],"content":"<","needQuote":true,"nodes":[]},{"pos":[474218,474222],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[474253,474254]},{"pos":[474286,474294],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[474437,474447],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"content":"(Of","pos":[474517,474520]},{"pos":[474587,474596],"content":"IGrouping","needQuote":true,"nodes":[{"content":"IGrouping","pos":[0,9]}]},{"content":"(Of","pos":[474665,474668]},{"pos":[474702,474706],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[474737,474738]},{"pos":[474770,474778],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[474812,474813],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[474840,474841],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[475229,475294],"content":"Expressions.Expression<Func<TKey, IEnumerable<TSource>, TResult>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TKey, IEnumerable&lt;TSource&gt;, TResult&gt;&gt;","pos":[0,65],"source":"Expressions.Expression<Func<TKey, IEnumerable<TSource>, TResult>>"}]},{"pos":[475712,475734],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[475815,475816],"content":"<","needQuote":true,"nodes":[]},{"pos":[475866,475870],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[475928,475929],"content":"<","needQuote":true,"nodes":[]},{"pos":[475956,475960],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[475991,475992]},{"pos":[476074,476085],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[476170,476171],"content":"<","needQuote":true,"nodes":[]},{"pos":[476198,476205],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[476271,476272]},{"pos":[476304,476311],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[476465,476487],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[476569,476572]},{"pos":[476629,476633],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[476692,476695]},{"pos":[476729,476733],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[476764,476765]},{"pos":[476847,476858],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[476944,476947]},{"pos":[476981,476988],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[477021,477022],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[477050,477051]},{"pos":[477083,477090],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[477123,477124],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[477151,477152],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[477646,477712],"content":"Expressions.Expression<Func<TKey, IEnumerable<TElement>, TResult>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TKey, IEnumerable&lt;TElement&gt;, TResult&gt;&gt;","pos":[0,66],"source":"Expressions.Expression<Func<TKey, IEnumerable<TElement>, TResult>>"}]},{"pos":[478133,478155],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[478236,478237],"content":"<","needQuote":true,"nodes":[]},{"pos":[478287,478291],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[478349,478350],"content":"<","needQuote":true,"nodes":[]},{"pos":[478377,478381],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[478412,478413]},{"pos":[478495,478506],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[478591,478592],"content":"<","needQuote":true,"nodes":[]},{"pos":[478619,478627],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"content":",","pos":[478694,478695]},{"pos":[478727,478734],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[478888,478910],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[478992,478995]},{"pos":[479052,479056],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[479115,479118]},{"pos":[479152,479156],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[479187,479188]},{"pos":[479270,479281],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[479367,479370]},{"pos":[479404,479412],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[479446,479447],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[479475,479476]},{"pos":[479508,479515],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[479548,479549],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[479576,479577],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[479977,479995],"content":"IQueryable<TOuter>","needQuote":true,"nodes":[{"content":"IQueryable&lt;TOuter&gt;","pos":[0,18],"source":"IQueryable<TOuter>"}]},{"pos":[480180,480190],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"pos":[480259,480260],"content":"<","needQuote":true,"nodes":[]},{"pos":[480287,480293],"content":"TOuter","needQuote":true,"nodes":[{"content":"TOuter","pos":[0,6]}]},{"pos":[480402,480412],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"content":"(Of","pos":[480482,480485]},{"pos":[480519,480525],"content":"TOuter","needQuote":true,"nodes":[{"content":"TOuter","pos":[0,6]}]},{"pos":[480557,480558],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[480852,480871],"content":"IEnumerable<TInner>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;TInner&gt;","pos":[0,19],"source":"IEnumerable<TInner>"}]},{"pos":[481105,481116],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[481201,481202],"content":"<","needQuote":true,"nodes":[]},{"pos":[481229,481235],"content":"TInner","needQuote":true,"nodes":[{"content":"TInner","pos":[0,6]}]},{"pos":[481360,481371],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[481457,481460]},{"pos":[481494,481500],"content":"TInner","needQuote":true,"nodes":[{"content":"TInner","pos":[0,6]}]},{"pos":[481532,481533],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[481818,481860],"content":"Expressions.Expression<Func<TOuter, TKey>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TOuter, TKey&gt;&gt;","pos":[0,42],"source":"Expressions.Expression<Func<TOuter, TKey>>"}]},{"pos":[482149,482171],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[482252,482253],"content":"<","needQuote":true,"nodes":[]},{"pos":[482303,482307],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[482365,482366],"content":"<","needQuote":true,"nodes":[]},{"pos":[482393,482399],"content":"TOuter","needQuote":true,"nodes":[{"content":"TOuter","pos":[0,6]}]},{"content":",","pos":[482432,482433]},{"pos":[482465,482469],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[482620,482642],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[482724,482727]},{"pos":[482784,482788],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[482847,482850]},{"pos":[482884,482890],"content":"TOuter","needQuote":true,"nodes":[{"content":"TOuter","pos":[0,6]}]},{"content":",","pos":[482923,482924]},{"pos":[482956,482960],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[482990,482991],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[483018,483019],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[483368,483410],"content":"Expressions.Expression<Func<TInner, TKey>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TInner, TKey&gt;&gt;","pos":[0,42],"source":"Expressions.Expression<Func<TInner, TKey>>"}]},{"pos":[483699,483721],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[483802,483803],"content":"<","needQuote":true,"nodes":[]},{"pos":[483853,483857],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[483915,483916],"content":"<","needQuote":true,"nodes":[]},{"pos":[483943,483949],"content":"TInner","needQuote":true,"nodes":[{"content":"TInner","pos":[0,6]}]},{"content":",","pos":[483982,483983]},{"pos":[484015,484019],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[484170,484192],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[484274,484277]},{"pos":[484334,484338],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[484397,484400]},{"pos":[484434,484440],"content":"TInner","needQuote":true,"nodes":[{"content":"TInner","pos":[0,6]}]},{"content":",","pos":[484473,484474]},{"pos":[484506,484510],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[484540,484541],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[484568,484569],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[484970,485036],"content":"Expressions.Expression<Func<TOuter, IEnumerable<TInner>, TResult>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TOuter, IEnumerable&lt;TInner&gt;, TResult&gt;&gt;","pos":[0,66],"source":"Expressions.Expression<Func<TOuter, IEnumerable<TInner>, TResult>>"}]},{"pos":[485457,485479],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[485560,485561],"content":"<","needQuote":true,"nodes":[]},{"pos":[485611,485615],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[485673,485674],"content":"<","needQuote":true,"nodes":[]},{"pos":[485701,485707],"content":"TOuter","needQuote":true,"nodes":[{"content":"TOuter","pos":[0,6]}]},{"content":",","pos":[485740,485741]},{"pos":[485823,485834],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[485919,485920],"content":"<","needQuote":true,"nodes":[]},{"pos":[485947,485953],"content":"TInner","needQuote":true,"nodes":[{"content":"TInner","pos":[0,6]}]},{"content":",","pos":[486018,486019]},{"pos":[486051,486058],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[486212,486234],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[486316,486319]},{"pos":[486376,486380],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[486439,486442]},{"pos":[486476,486482],"content":"TOuter","needQuote":true,"nodes":[{"content":"TOuter","pos":[0,6]}]},{"content":",","pos":[486515,486516]},{"pos":[486598,486609],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[486695,486698]},{"pos":[486732,486738],"content":"TInner","needQuote":true,"nodes":[{"content":"TInner","pos":[0,6]}]},{"pos":[486770,486771],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[486799,486800]},{"pos":[486832,486839],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[486872,486873],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[486900,486901],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[487357,487410],"content":"Expressions.Expression<Func<TOuter, TInner, TResult>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TOuter, TInner, TResult&gt;&gt;","pos":[0,53],"source":"Expressions.Expression<Func<TOuter, TInner, TResult>>"}]},{"pos":[487732,487754],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[487835,487836],"content":"<","needQuote":true,"nodes":[]},{"pos":[487886,487890],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[487948,487949],"content":"<","needQuote":true,"nodes":[]},{"pos":[487976,487982],"content":"TOuter","needQuote":true,"nodes":[{"content":"TOuter","pos":[0,6]}]},{"content":",","pos":[488015,488016]},{"pos":[488048,488054],"content":"TInner","needQuote":true,"nodes":[{"content":"TInner","pos":[0,6]}]},{"content":",","pos":[488087,488088]},{"pos":[488120,488127],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[488281,488303],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[488385,488388]},{"pos":[488445,488449],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[488508,488511]},{"pos":[488545,488551],"content":"TOuter","needQuote":true,"nodes":[{"content":"TOuter","pos":[0,6]}]},{"content":",","pos":[488584,488585]},{"pos":[488617,488623],"content":"TInner","needQuote":true,"nodes":[{"content":"TInner","pos":[0,6]}]},{"content":",","pos":[488656,488657]},{"pos":[488689,488696],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[488729,488730],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[488757,488758],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[489067,489072],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[489283,489329],"content":"Expressions.Expression<Func<TSource, TResult>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TSource, TResult&gt;&gt;","pos":[0,46],"source":"Expressions.Expression<Func<TSource, TResult>>"}]},{"pos":[489630,489652],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[489733,489734],"content":"<","needQuote":true,"nodes":[]},{"pos":[489784,489788],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[489846,489847],"content":"<","needQuote":true,"nodes":[]},{"pos":[489874,489881],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[489915,489916]},{"pos":[489948,489955],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[490109,490131],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[490213,490216]},{"pos":[490273,490277],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[490336,490339]},{"pos":[490373,490380],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[490414,490415]},{"pos":[490447,490454],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[490487,490488],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[490515,490516],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[490844,490870],"content":"IOrderedQueryable<TSource>","needQuote":true,"nodes":[{"content":"IOrderedQueryable&lt;TSource&gt;","pos":[0,26],"source":"IOrderedQueryable<TSource>"}]},{"pos":[491086,491103],"content":"IOrderedQueryable","needQuote":true,"nodes":[{"content":"IOrderedQueryable","pos":[0,17]}]},{"pos":[491179,491180],"content":"<","needQuote":true,"nodes":[]},{"pos":[491207,491214],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[491331,491348],"content":"IOrderedQueryable","needQuote":true,"nodes":[{"content":"IOrderedQueryable","pos":[0,17]}]},{"content":"(Of","pos":[491425,491428]},{"pos":[491462,491469],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[491502,491503],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[491731,491751],"content":"IOrderedQueryable<T>","needQuote":true,"nodes":[{"content":"IOrderedQueryable&lt;T&gt;","pos":[0,20],"source":"IOrderedQueryable<T>"}]},{"pos":[491949,491966],"content":"IOrderedQueryable","needQuote":true,"nodes":[{"content":"IOrderedQueryable","pos":[0,17]}]},{"pos":[492021,492022],"content":"<","needQuote":true,"nodes":[]},{"pos":[492049,492050],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[492161,492178],"content":"IOrderedQueryable","needQuote":true,"nodes":[{"content":"IOrderedQueryable","pos":[0,17]}]},{"content":"(Of","pos":[492234,492237]},{"pos":[492271,492272],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[492299,492300],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[492594,492609],"content":"IComparer<TKey>","needQuote":true,"nodes":[{"content":"IComparer&lt;TKey&gt;","pos":[0,15],"source":"IComparer<TKey>"}]},{"pos":[492829,492838],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[492900,492901],"content":"<","needQuote":true,"nodes":[]},{"pos":[492928,492932],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[493053,493062],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"content":"(Of","pos":[493125,493128]},{"pos":[493162,493166],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[493196,493197],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[493415,493427],"content":"IComparer<T>","needQuote":true,"nodes":[{"content":"IComparer&lt;T&gt;","pos":[0,12],"source":"IComparer<T>"}]},{"pos":[493638,493647],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[493709,493710],"content":"<","needQuote":true,"nodes":[]},{"pos":[493737,493738],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[493856,493865],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"content":"(Of","pos":[493928,493931]},{"pos":[493965,493966],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[493993,493994],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[494277,494330],"content":"Expressions.Expression<Func<TSource, Int32, TResult>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TSource, Int32, TResult&gt;&gt;","pos":[0,53],"source":"Expressions.Expression<Func<TSource, Int32, TResult>>"}]},{"pos":[494666,494688],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[494769,494770],"content":"<","needQuote":true,"nodes":[]},{"pos":[494820,494824],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[494882,494883],"content":"<","needQuote":true,"nodes":[]},{"pos":[494910,494917],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[494951,494952]},{"pos":[495006,495011],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[495071,495072]},{"pos":[495104,495111],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[495265,495287],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[495369,495372]},{"pos":[495429,495433],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[495492,495495]},{"pos":[495529,495536],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[495570,495571]},{"pos":[495625,495630],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[495690,495691]},{"pos":[495723,495730],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[495763,495764],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[495791,495792],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[496220,496279],"content":"Expressions.Expression<Func<TSource, IEnumerable<TResult>>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TSource, IEnumerable&lt;TResult&gt;&gt;&gt;","pos":[0,59],"source":"Expressions.Expression<Func<TSource, IEnumerable<TResult>>>"}]},{"pos":[496679,496701],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[496782,496783],"content":"<","needQuote":true,"nodes":[]},{"pos":[496833,496837],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[496895,496896],"content":"<","needQuote":true,"nodes":[]},{"pos":[496923,496930],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[496964,496965]},{"pos":[497047,497058],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[497143,497144],"content":"<","needQuote":true,"nodes":[]},{"pos":[497171,497178],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[497364,497386],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[497468,497471]},{"pos":[497528,497532],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[497591,497594]},{"pos":[497628,497635],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[497669,497670]},{"pos":[497752,497763],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[497849,497852]},{"pos":[497886,497893],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[497926,497927],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[497954,497955],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[497982,497983],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[498466,498532],"content":"Expressions.Expression<Func<TSource, Int32, IEnumerable<TResult>>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TSource, Int32, IEnumerable&lt;TResult&gt;&gt;&gt;","pos":[0,66],"source":"Expressions.Expression<Func<TSource, Int32, IEnumerable<TResult>>>"}]},{"pos":[498967,498989],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[499070,499071],"content":"<","needQuote":true,"nodes":[]},{"pos":[499121,499125],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[499183,499184],"content":"<","needQuote":true,"nodes":[]},{"pos":[499211,499218],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[499252,499253]},{"pos":[499307,499312],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[499372,499373]},{"pos":[499455,499466],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[499551,499552],"content":"<","needQuote":true,"nodes":[]},{"pos":[499579,499586],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[499772,499794],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[499876,499879]},{"pos":[499936,499940],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[499999,500002]},{"pos":[500036,500043],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[500077,500078]},{"pos":[500132,500137],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[500197,500198]},{"pos":[500280,500291],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[500377,500380]},{"pos":[500414,500421],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[500454,500455],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[500482,500483],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[500510,500511],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[501012,501075],"content":"Expressions.Expression<Func<TSource, IEnumerable<TCollection>>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TSource, IEnumerable&lt;TCollection&gt;&gt;&gt;","pos":[0,63],"source":"Expressions.Expression<Func<TSource, IEnumerable<TCollection>>>"}]},{"pos":[501487,501509],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[501590,501591],"content":"<","needQuote":true,"nodes":[]},{"pos":[501641,501645],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[501703,501704],"content":"<","needQuote":true,"nodes":[]},{"pos":[501731,501738],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[501772,501773]},{"pos":[501855,501866],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[501951,501952],"content":"<","needQuote":true,"nodes":[]},{"pos":[501979,501990],"content":"TCollection","needQuote":true,"nodes":[{"content":"TCollection","pos":[0,11]}]},{"pos":[502180,502202],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[502284,502287]},{"pos":[502344,502348],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[502407,502410]},{"pos":[502444,502451],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[502485,502486]},{"pos":[502568,502579],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[502665,502668]},{"pos":[502702,502713],"content":"TCollection","needQuote":true,"nodes":[{"content":"TCollection","pos":[0,11]}]},{"pos":[502750,502751],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[502778,502779],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[502806,502807],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[503259,503318],"content":"Expressions.Expression<Func<TSource, TCollection, TResult>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TSource, TCollection, TResult&gt;&gt;","pos":[0,59],"source":"Expressions.Expression<Func<TSource, TCollection, TResult>>"}]},{"pos":[503658,503680],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[503761,503762],"content":"<","needQuote":true,"nodes":[]},{"pos":[503812,503816],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[503874,503875],"content":"<","needQuote":true,"nodes":[]},{"pos":[503902,503909],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[503943,503944]},{"pos":[503976,503987],"content":"TCollection","needQuote":true,"nodes":[{"content":"TCollection","pos":[0,11]}]},{"content":",","pos":[504025,504026]},{"pos":[504058,504065],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[504219,504241],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[504323,504326]},{"pos":[504383,504387],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[504446,504449]},{"pos":[504483,504490],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[504524,504525]},{"pos":[504557,504568],"content":"TCollection","needQuote":true,"nodes":[{"content":"TCollection","pos":[0,11]}]},{"content":",","pos":[504606,504607]},{"pos":[504639,504646],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[504679,504680],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[504707,504708],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[505156,505226],"content":"Expressions.Expression<Func<TSource, Int32, IEnumerable<TCollection>>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TSource, Int32, IEnumerable&lt;TCollection&gt;&gt;&gt;","pos":[0,70],"source":"Expressions.Expression<Func<TSource, Int32, IEnumerable<TCollection>>>"}]},{"pos":[505673,505695],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[505776,505777],"content":"<","needQuote":true,"nodes":[]},{"pos":[505827,505831],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[505889,505890],"content":"<","needQuote":true,"nodes":[]},{"pos":[505917,505924],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[505958,505959]},{"pos":[506013,506018],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[506078,506079]},{"pos":[506161,506172],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[506257,506258],"content":"<","needQuote":true,"nodes":[]},{"pos":[506285,506296],"content":"TCollection","needQuote":true,"nodes":[{"content":"TCollection","pos":[0,11]}]},{"pos":[506486,506508],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[506590,506593]},{"pos":[506650,506654],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[506713,506716]},{"pos":[506750,506757],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[506791,506792]},{"pos":[506846,506851],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[506911,506912]},{"pos":[506994,507005],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[507091,507094]},{"pos":[507128,507139],"content":"TCollection","needQuote":true,"nodes":[{"content":"TCollection","pos":[0,11]}]},{"pos":[507176,507177],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[507204,507205],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[507232,507233],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[507716,507769],"content":"Expressions.Expression<Func<TSource, Int32, Boolean>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TSource, Int32, Boolean&gt;&gt;","pos":[0,53],"source":"Expressions.Expression<Func<TSource, Int32, Boolean>>"}]},{"pos":[508119,508141],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[508222,508223],"content":"<","needQuote":true,"nodes":[]},{"pos":[508273,508277],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[508335,508336],"content":"<","needQuote":true,"nodes":[]},{"pos":[508363,508370],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[508404,508405]},{"pos":[508459,508464],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[508524,508525]},{"pos":[508581,508588],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[508770,508792],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[508874,508877]},{"pos":[508934,508938],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[508997,509000]},{"pos":[509034,509041],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[509075,509076]},{"pos":[509130,509135],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[509195,509196]},{"pos":[509252,509259],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[509320,509321],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[509348,509349],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[509707,509722],"content":"Nullable<Int32>","needQuote":true,"nodes":[{"content":"Nullable&lt;Int32&gt;","pos":[0,15],"source":"Nullable<Int32>"}]},{"pos":[509895,509903],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[509965,509966],"content":"<","needQuote":true,"nodes":[]},{"pos":[510015,510020],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[510149,510157],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[510220,510223]},{"pos":[510279,510284],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[510343,510344],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[510570,510585],"content":"Nullable<Int64>","needQuote":true,"nodes":[{"content":"Nullable&lt;Int64&gt;","pos":[0,15],"source":"Nullable<Int64>"}]},{"pos":[510758,510766],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[510828,510829],"content":"<","needQuote":true,"nodes":[]},{"pos":[510878,510883],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[511012,511020],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[511083,511086]},{"pos":[511142,511147],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[511206,511207],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[511426,511444],"content":"IQueryable<TFirst>","needQuote":true,"nodes":[{"content":"IQueryable&lt;TFirst&gt;","pos":[0,18],"source":"IQueryable<TFirst>"}]},{"pos":[511629,511639],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"pos":[511708,511709],"content":"<","needQuote":true,"nodes":[]},{"pos":[511736,511742],"content":"TFirst","needQuote":true,"nodes":[{"content":"TFirst","pos":[0,6]}]},{"pos":[511851,511861],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"content":"(Of","pos":[511931,511934]},{"pos":[511968,511974],"content":"TFirst","needQuote":true,"nodes":[{"content":"TFirst","pos":[0,6]}]},{"pos":[512006,512007],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[512302,512322],"content":"IEnumerable<TSecond>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;TSecond&gt;","pos":[0,20],"source":"IEnumerable<TSecond>"}]},{"pos":[512559,512570],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[512655,512656],"content":"<","needQuote":true,"nodes":[]},{"pos":[512683,512690],"content":"TSecond","needQuote":true,"nodes":[{"content":"TSecond","pos":[0,7]}]},{"pos":[512816,512827],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[512913,512916]},{"pos":[512950,512957],"content":"TSecond","needQuote":true,"nodes":[{"content":"TSecond","pos":[0,7]}]},{"pos":[512990,512991],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[513291,513345],"content":"Expressions.Expression<Func<TFirst, TSecond, TResult>>","needQuote":true,"nodes":[{"content":"Expressions.Expression&lt;Func&lt;TFirst, TSecond, TResult&gt;&gt;","pos":[0,54],"source":"Expressions.Expression<Func<TFirst, TSecond, TResult>>"}]},{"pos":[513670,513692],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"pos":[513773,513774],"content":"<","needQuote":true,"nodes":[]},{"pos":[513824,513828],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[513886,513887],"content":"<","needQuote":true,"nodes":[]},{"pos":[513914,513920],"content":"TFirst","needQuote":true,"nodes":[{"content":"TFirst","pos":[0,6]}]},{"content":",","pos":[513953,513954]},{"pos":[513986,513993],"content":"TSecond","needQuote":true,"nodes":[{"content":"TSecond","pos":[0,7]}]},{"content":",","pos":[514027,514028]},{"pos":[514060,514067],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[514221,514243],"content":"Expressions.Expression","needQuote":true,"nodes":[{"content":"Expressions.Expression","pos":[0,22]}]},{"content":"(Of","pos":[514325,514328]},{"pos":[514385,514389],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[514448,514451]},{"pos":[514485,514491],"content":"TFirst","needQuote":true,"nodes":[{"content":"TFirst","pos":[0,6]}]},{"content":",","pos":[514524,514525]},{"pos":[514557,514564],"content":"TSecond","needQuote":true,"nodes":[{"content":"TSecond","pos":[0,7]}]},{"content":",","pos":[514598,514599]},{"pos":[514631,514638],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[514671,514672],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[514699,514700],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[515010,515031],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[515240,515265],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[515478,515495],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[515670,515690],"content":"InvalidCastException","needQuote":true,"nodes":[{"content":"InvalidCastException","pos":[0,20]}]},{"pos":[515871,515888],"content":"OverflowException","needQuote":true,"nodes":[{"content":"OverflowException","pos":[0,17]}]},{"pos":[516070,516097],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Linq.Queryable\n  commentId: T:System.Linq.Queryable\n  id: Queryable\n  parent: System.Linq\n  children:\n  - System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})\n  - System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})\n  - System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})\n  - System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  - System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})\n  - System.Linq.Queryable.Cast``1(System.Linq.IQueryable)\n  - System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)\n  - System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)\n  - System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)\n  - System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)\n  - System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  - System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})\n  - System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})\n  - System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})\n  - System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})\n  - System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})\n  - System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  - System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  - System.Linq.Queryable.OfType``1(System.Linq.IQueryable)\n  - System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  - System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  - System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  - System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})\n  - System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})\n  - System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})\n  - System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  - System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  - System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)\n  - System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})\n  - System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)\n  - System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  - System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  - System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  - System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  - System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  langs:\n  - csharp\n  - vb\n  name: Queryable\n  fullName: System.Linq.Queryable\n  type: Class\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Queryable\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 37\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Provides a set of <strong>static</strong> (<strong>Shared</strong> in Visual Basic) methods for querying data structures that implement <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public class Queryable\n    content.vb: Public Class Queryable\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Queryable\n- uid: System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})\n  commentId: M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})\n  id: Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Aggregate<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TSource, TSource>>)\n  fullName: System.Linq.Queryable.Aggregate<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TSource, TSource>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Aggregate\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 39\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Applies an accumulator function over a sequence.</p>\\n\"\n  syntax:\n    content: public static TSource Aggregate<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TSource, TSource>> func)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Aggregate(Of TSource)(source As IQueryable(Of TSource), func As Expressions.Expression(Of Func(Of TSource, TSource, TSource))) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence to aggregate over.</p>\\n\"\n    - id: func\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TSource},{TSource}}}\n      description: \"\\n<p>An accumulator function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The final accumulator value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>func</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Aggregate(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TSource, TSource)))\n  name.vb: Aggregate(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TSource, TSource)))\n  nameWithType: Queryable.Aggregate<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TSource, TSource>>)\n  nameWithType.vb: Queryable.Aggregate(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TSource, TSource)))\n- uid: System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})\n  commentId: M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})\n  id: Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Aggregate<TSource, TAccumulate>(IQueryable<TSource>, TAccumulate, Expressions.Expression<Func<TAccumulate, TSource, TAccumulate>>)\n  fullName: System.Linq.Queryable.Aggregate<TSource, TAccumulate>(System.Linq.IQueryable<TSource>, TAccumulate, System.Linq.Expressions.Expression<System.Func<TAccumulate, TSource, TAccumulate>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Aggregate\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 40\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.</p>\\n\"\n  syntax:\n    content: public static TAccumulate Aggregate<TSource, TAccumulate>(this IQueryable<TSource> source, TAccumulate seed, Expressions.Expression<Func<TAccumulate, TSource, TAccumulate>> func)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Aggregate(Of TSource, TAccumulate)(source As IQueryable(Of TSource), seed As TAccumulate, func As Expressions.Expression(Of Func(Of TAccumulate, TSource, TAccumulate))) As TAccumulate\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence to aggregate over.</p>\\n\"\n    - id: seed\n      type: '{TAccumulate}'\n      description: \"\\n<p>The initial accumulator value.</p>\\n\"\n    - id: func\n      type: System.Linq.Expressions.Expression{System.Func{{TAccumulate},{TSource},{TAccumulate}}}\n      description: \"\\n<p>An accumulator function to invoke on each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TAccumulate\n      description: \"\\n<p>The type of the accumulator value.</p>\\n\"\n    return:\n      type: '{TAccumulate}'\n      description: \"\\n<p>The final accumulator value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>func</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Aggregate(Of TSource, TAccumulate)(System.Linq.IQueryable(Of TSource), TAccumulate, System.Linq.Expressions.Expression(Of System.Func(Of TAccumulate, TSource, TAccumulate)))\n  name.vb: Aggregate(Of TSource, TAccumulate)(IQueryable(Of TSource), TAccumulate, Expressions.Expression(Of Func(Of TAccumulate, TSource, TAccumulate)))\n  nameWithType: Queryable.Aggregate<TSource, TAccumulate>(IQueryable<TSource>, TAccumulate, Expressions.Expression<Func<TAccumulate, TSource, TAccumulate>>)\n  nameWithType.vb: Queryable.Aggregate(Of TSource, TAccumulate)(IQueryable(Of TSource), TAccumulate, Expressions.Expression(Of Func(Of TAccumulate, TSource, TAccumulate)))\n- uid: System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})\n  commentId: M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})\n  id: Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Aggregate<TSource, TAccumulate, TResult>(IQueryable<TSource>, TAccumulate, Expressions.Expression<Func<TAccumulate, TSource, TAccumulate>>, Expressions.Expression<Func<TAccumulate, TResult>>)\n  fullName: System.Linq.Queryable.Aggregate<TSource, TAccumulate, TResult>(System.Linq.IQueryable<TSource>, TAccumulate, System.Linq.Expressions.Expression<System.Func<TAccumulate, TSource, TAccumulate>>, System.Linq.Expressions.Expression<System.Func<TAccumulate, TResult>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Aggregate\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 41\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</p>\\n\"\n  syntax:\n    content: public static TResult Aggregate<TSource, TAccumulate, TResult>(this IQueryable<TSource> source, TAccumulate seed, Expressions.Expression<Func<TAccumulate, TSource, TAccumulate>> func, Expressions.Expression<Func<TAccumulate, TResult>> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Aggregate(Of TSource, TAccumulate, TResult)(source As IQueryable(Of TSource), seed As TAccumulate, func As Expressions.Expression(Of Func(Of TAccumulate, TSource, TAccumulate)), selector As Expressions.Expression(Of Func(Of TAccumulate, TResult))) As TResult\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence to aggregate over.</p>\\n\"\n    - id: seed\n      type: '{TAccumulate}'\n      description: \"\\n<p>The initial accumulator value.</p>\\n\"\n    - id: func\n      type: System.Linq.Expressions.Expression{System.Func{{TAccumulate},{TSource},{TAccumulate}}}\n      description: \"\\n<p>An accumulator function to invoke on each element.</p>\\n\"\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{{TAccumulate},{TResult}}}\n      description: \"\\n<p>A function to transform the final accumulator value into the result value.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TAccumulate\n      description: \"\\n<p>The type of the accumulator value.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the resulting value.</p>\\n\"\n    return:\n      type: '{TResult}'\n      description: \"\\n<p>The transformed final accumulator value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>func</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Aggregate(Of TSource, TAccumulate, TResult)(System.Linq.IQueryable(Of TSource), TAccumulate, System.Linq.Expressions.Expression(Of System.Func(Of TAccumulate, TSource, TAccumulate)), System.Linq.Expressions.Expression(Of System.Func(Of TAccumulate, TResult)))\n  name.vb: Aggregate(Of TSource, TAccumulate, TResult)(IQueryable(Of TSource), TAccumulate, Expressions.Expression(Of Func(Of TAccumulate, TSource, TAccumulate)), Expressions.Expression(Of Func(Of TAccumulate, TResult)))\n  nameWithType: Queryable.Aggregate<TSource, TAccumulate, TResult>(IQueryable<TSource>, TAccumulate, Expressions.Expression<Func<TAccumulate, TSource, TAccumulate>>, Expressions.Expression<Func<TAccumulate, TResult>>)\n  nameWithType.vb: Queryable.Aggregate(Of TSource, TAccumulate, TResult)(IQueryable(Of TSource), TAccumulate, Expressions.Expression(Of Func(Of TAccumulate, TSource, TAccumulate)), Expressions.Expression(Of Func(Of TAccumulate, TResult)))\n- uid: System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  commentId: M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  id: All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: All<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)\n  fullName: System.Linq.Queryable.All<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: All\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 42\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Determines whether all the elements of a sequence satisfy a condition.</p>\\n\"\n  syntax:\n    content: public static bool All<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function All(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As Boolean\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence whose elements to test for a condition.</p>\\n\"\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.All(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))\n  name.vb: All(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))\n  nameWithType: Queryable.All<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)\n  nameWithType.vb: Queryable.All(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))\n- uid: System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})\n  commentId: M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})\n  id: Any``1(System.Linq.IQueryable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Any<TSource>(IQueryable<TSource>)\n  fullName: System.Linq.Queryable.Any<TSource>(System.Linq.IQueryable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Any\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 43\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Determines whether a sequence contains any elements.</p>\\n\"\n  syntax:\n    content: public static bool Any<TSource>(this IQueryable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Any(Of TSource)(source As IQueryable(Of TSource)) As Boolean\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence to check for being empty.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the source sequence contains any elements; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Any(Of TSource)(System.Linq.IQueryable(Of TSource))\n  name.vb: Any(Of TSource)(IQueryable(Of TSource))\n  nameWithType: Queryable.Any<TSource>(IQueryable<TSource>)\n  nameWithType.vb: Queryable.Any(Of TSource)(IQueryable(Of TSource))\n- uid: System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  commentId: M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  id: Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Any<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)\n  fullName: System.Linq.Queryable.Any<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Any\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 44\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Determines whether any element of a sequence satisfies a condition.</p>\\n\"\n  syntax:\n    content: public static bool Any<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Any(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As Boolean\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence whose elements to test for a condition.</p>\\n\"\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if any elements in the source sequence pass the test in the specified predicate; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Any(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))\n  name.vb: Any(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))\n  nameWithType: Queryable.Any<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)\n  nameWithType.vb: Queryable.Any(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  id: AsQueryable(System.Collections.IEnumerable)\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsQueryable\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 45\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Converts an <xref href=\\\"System.Collections.IEnumerable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to an <xref href=\\\"System.Linq.IQueryable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static IQueryable AsQueryable(this IEnumerable source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AsQueryable(source As IEnumerable) As IQueryable\n    parameters:\n    - id: source\n      type: System.Collections.IEnumerable\n      description: \"\\n<p>A sequence to convert.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>source</em> does not implement <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for some <em>T</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n- uid: System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})\n  id: AsQueryable``1(System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: AsQueryable<TElement>(IEnumerable<TElement>)\n  fullName: System.Linq.Queryable.AsQueryable<TElement>(System.Collections.Generic.IEnumerable<TElement>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsQueryable\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 46\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Converts a generic <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a generic <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TElement> AsQueryable<TElement>(this IEnumerable<TElement> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AsQueryable(Of TElement)(source As IEnumerable(Of TElement)) As IQueryable(Of TElement)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TElement}}\n      description: \"\\n<p>A sequence to convert.</p>\\n\"\n    typeParameters:\n    - id: TElement\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TElement}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.AsQueryable(Of TElement)(System.Collections.Generic.IEnumerable(Of TElement))\n  name.vb: AsQueryable(Of TElement)(IEnumerable(Of TElement))\n  nameWithType: Queryable.AsQueryable<TElement>(IEnumerable<TElement>)\n  nameWithType.vb: Queryable.AsQueryable(Of TElement)(IEnumerable(Of TElement))\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})\n  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})\n  id: Average(System.Linq.IQueryable{System.Decimal})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Average(IQueryable<Decimal>)\n  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Decimal>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 47\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static decimal Average(this IQueryable<decimal> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As IQueryable(Of Decimal)) As Decimal\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Decimal}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the average of.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Decimal))\n  name.vb: Average(IQueryable(Of Decimal))\n  nameWithType: Queryable.Average(IQueryable<Decimal>)\n  nameWithType.vb: Queryable.Average(IQueryable(Of Decimal))\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})\n  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})\n  id: Average(System.Linq.IQueryable{System.Double})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Average(IQueryable<Double>)\n  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Double>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 48\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static double Average(this IQueryable<double> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As IQueryable(Of Double)) As Double\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Double}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the average of.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Double))\n  name.vb: Average(IQueryable(Of Double))\n  nameWithType: Queryable.Average(IQueryable<Double>)\n  nameWithType.vb: Queryable.Average(IQueryable(Of Double))\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})\n  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})\n  id: Average(System.Linq.IQueryable{System.Int32})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Average(IQueryable<Int32>)\n  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Int32>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 49\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static double Average(this IQueryable<int> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As IQueryable(Of Integer)) As Double\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Int32}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the average of.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Int32))\n  name.vb: Average(IQueryable(Of Int32))\n  nameWithType: Queryable.Average(IQueryable<Int32>)\n  nameWithType.vb: Queryable.Average(IQueryable(Of Int32))\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})\n  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})\n  id: Average(System.Linq.IQueryable{System.Int64})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Average(IQueryable<Int64>)\n  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 50\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static double Average(this IQueryable<long> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As IQueryable(Of Long)) As Double\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Int64}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the average of.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Int64))\n  name.vb: Average(IQueryable(Of Int64))\n  nameWithType: Queryable.Average(IQueryable<Int64>)\n  nameWithType.vb: Queryable.Average(IQueryable(Of Int64))\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})\n  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})\n  id: Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Average(IQueryable<Nullable<Decimal>>)\n  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Nullable<System.Decimal>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 51\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of nullable <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static decimal ? Average(this IQueryable<decimal ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As IQueryable(Of Decimal?)) As Decimal?\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Nullable{System.Decimal}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the average of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Decimal}\n      description: \"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only <strong>null</strong> values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Nullable(Of System.Decimal)))\n  name.vb: Average(IQueryable(Of Nullable(Of Decimal)))\n  nameWithType: Queryable.Average(IQueryable<Nullable<Decimal>>)\n  nameWithType.vb: Queryable.Average(IQueryable(Of Nullable(Of Decimal)))\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})\n  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})\n  id: Average(System.Linq.IQueryable{System.Nullable{System.Double}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Average(IQueryable<Nullable<Double>>)\n  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Nullable<System.Double>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 52\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of nullable <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static double ? Average(this IQueryable<double ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As IQueryable(Of Double?)) As Double?\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Nullable{System.Double}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the average of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only <strong>null</strong> values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Nullable(Of System.Double)))\n  name.vb: Average(IQueryable(Of Nullable(Of Double)))\n  nameWithType: Queryable.Average(IQueryable<Nullable<Double>>)\n  nameWithType.vb: Queryable.Average(IQueryable(Of Nullable(Of Double)))\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})\n  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})\n  id: Average(System.Linq.IQueryable{System.Nullable{System.Int32}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Average(IQueryable<Nullable<Int32>>)\n  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Nullable<System.Int32>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 53\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of nullable <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static double ? Average(this IQueryable<int ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As IQueryable(Of Integer?)) As Double?\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Nullable{System.Int32}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the average of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only <strong>null</strong> values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Nullable(Of System.Int32)))\n  name.vb: Average(IQueryable(Of Nullable(Of Int32)))\n  nameWithType: Queryable.Average(IQueryable<Nullable<Int32>>)\n  nameWithType.vb: Queryable.Average(IQueryable(Of Nullable(Of Int32)))\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})\n  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})\n  id: Average(System.Linq.IQueryable{System.Nullable{System.Int64}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Average(IQueryable<Nullable<Int64>>)\n  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Nullable<System.Int64>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 54\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of nullable <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static double ? Average(this IQueryable<long ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As IQueryable(Of Long?)) As Double?\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Nullable{System.Int64}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the average of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only <strong>null</strong> values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Nullable(Of System.Int64)))\n  name.vb: Average(IQueryable(Of Nullable(Of Int64)))\n  nameWithType: Queryable.Average(IQueryable<Nullable<Int64>>)\n  nameWithType.vb: Queryable.Average(IQueryable(Of Nullable(Of Int64)))\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})\n  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})\n  id: Average(System.Linq.IQueryable{System.Nullable{System.Single}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Average(IQueryable<Nullable<Single>>)\n  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Nullable<System.Single>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 55\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of nullable <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static float ? Average(this IQueryable<float ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As IQueryable(Of Single?)) As Single?\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Nullable{System.Single}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the average of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Single}\n      description: \"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only <strong>null</strong> values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Nullable(Of System.Single)))\n  name.vb: Average(IQueryable(Of Nullable(Of Single)))\n  nameWithType: Queryable.Average(IQueryable<Nullable<Single>>)\n  nameWithType.vb: Queryable.Average(IQueryable(Of Nullable(Of Single)))\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})\n  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})\n  id: Average(System.Linq.IQueryable{System.Single})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Average(IQueryable<Single>)\n  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Single>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 56\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static float Average(this IQueryable<float> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As IQueryable(Of Single)) As Single\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Single}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the average of.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Single))\n  name.vb: Average(IQueryable(Of Single))\n  nameWithType: Queryable.Average(IQueryable<Single>)\n  nameWithType.vb: Queryable.Average(IQueryable(Of Single))\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})\n  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})\n  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Decimal>>)\n  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 57\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static decimal Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, decimal>> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Decimal))) As Decimal\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values that are used to calculate an average.</p>\\n\"\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Decimal}}\n      description: \"\\n<p>A projection function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Decimal)))\n  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Decimal)))\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Decimal>>)\n  nameWithType.vb: Queryable.Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Decimal)))\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\n  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\n  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Double>>)\n  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Double>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 58\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static double Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, double>> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Double))) As Double\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values to calculate the average of.</p>\\n\"\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Double}}\n      description: \"\\n<p>A projection function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Double)))\n  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Double)))\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Double>>)\n  nameWithType.vb: Queryable.Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Double)))\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\n  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\n  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32>>)\n  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 59\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static double Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, int>> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Integer))) As Double\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values to calculate the average of.</p>\\n\"\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32}}\n      description: \"\\n<p>A projection function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32)))\n  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32)))\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32>>)\n  nameWithType.vb: Queryable.Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32)))\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})\n  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})\n  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int64>>)\n  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 60\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static double Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, long>> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Long))) As Double\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values to calculate the average of.</p>\\n\"\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int64}}\n      description: \"\\n<p>A projection function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int64)))\n  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int64)))\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int64>>)\n  nameWithType.vb: Queryable.Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int64)))\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})\n  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})\n  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Decimal>>>)\n  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 61\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of nullable <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static decimal ? Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, decimal ? >> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Decimal?))) As Decimal?\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values to calculate the average of.</p>\\n\"\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Decimal}}}\n      description: \"\\n<p>A projection function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Decimal}\n      description: \"\\n<p>The average of the sequence of values, or <strong>null</strong> if the <em>source</em> sequence is empty or contains only <strong>null</strong> values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal))))\n  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Decimal))))\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Decimal>>>)\n  nameWithType.vb: Queryable.Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Decimal))))\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})\n  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})\n  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Double>>>)\n  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 62\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of nullable <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static double ? Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, double ? >> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Double?))) As Double?\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values to calculate the average of.</p>\\n\"\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Double}}}\n      description: \"\\n<p>A projection function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The average of the sequence of values, or <strong>null</strong> if the <em>source</em> sequence is empty or contains only <strong>null</strong> values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double))))\n  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Double))))\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Double>>>)\n  nameWithType.vb: Queryable.Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Double))))\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})\n  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})\n  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Int32>>>)\n  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 63\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of nullable <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static double ? Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, int ? >> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Integer?))) As Double?\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values to calculate the average of.</p>\\n\"\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int32}}}\n      description: \"\\n<p>A projection function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The average of the sequence of values, or <strong>null</strong> if the <em>source</em> sequence is empty or contains only <strong>null</strong> values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32))))\n  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Int32))))\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Int32>>>)\n  nameWithType.vb: Queryable.Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Int32))))\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})\n  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})\n  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Int64>>>)\n  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 64\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of nullable <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static double ? Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, long ? >> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Long?))) As Double?\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values to calculate the average of.</p>\\n\"\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int64}}}\n      description: \"\\n<p>A projection function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The average of the sequence of values, or <strong>null</strong> if the <em>source</em> sequence is empty or contains only <strong>null</strong> values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64))))\n  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Int64))))\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Int64>>>)\n  nameWithType.vb: Queryable.Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Int64))))\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})\n  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})\n  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Single>>>)\n  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 65\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of nullable <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static float ? Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, float ? >> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Single?))) As Single?\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values to calculate the average of.</p>\\n\"\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Single}}}\n      description: \"\\n<p>A projection function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Single}\n      description: \"\\n<p>The average of the sequence of values, or <strong>null</strong> if the <em>source</em> sequence is empty or contains only <strong>null</strong> values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single))))\n  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Single))))\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Single>>>)\n  nameWithType.vb: Queryable.Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Single))))\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})\n  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})\n  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Single>>)\n  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Single>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 66\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static float Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, float>> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Single))) As Single\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values to calculate the average of.</p>\\n\"\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Single}}\n      description: \"\\n<p>A projection function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Single)))\n  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Single)))\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Single>>)\n  nameWithType.vb: Queryable.Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Single)))\n- uid: System.Linq.Queryable.Cast``1(System.Linq.IQueryable)\n  commentId: M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)\n  id: Cast``1(System.Linq.IQueryable)\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Cast<TResult>(IQueryable)\n  fullName: System.Linq.Queryable.Cast<TResult>(System.Linq.IQueryable)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Cast\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 67\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Converts the elements of an <xref href=\\\"System.Linq.IQueryable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the specified type.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TResult> Cast<TResult>(this IQueryable source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Cast(Of TResult)(source As IQueryable) As IQueryable(Of TResult)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable\n      description: \"\\n<p>The <xref href=\\\"System.Linq.IQueryable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the elements to be converted.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type to convert the elements of <em>source</em> to.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TResult}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains each element of the source sequence converted to the specified type.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>An element in the sequence cannot be cast to type <em>TResult</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Cast(Of TResult)(System.Linq.IQueryable)\n  name.vb: Cast(Of TResult)(IQueryable)\n  nameWithType: Queryable.Cast<TResult>(IQueryable)\n  nameWithType.vb: Queryable.Cast(Of TResult)(IQueryable)\n- uid: System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  id: Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Concat<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  fullName: System.Linq.Queryable.Concat<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Concat\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 68\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Concatenates two sequences.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TSource> Concat<TSource>(this IQueryable<TSource> source1, IEnumerable<TSource> source2)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Concat(Of TSource)(source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource)) As IQueryable(Of TSource)\n    parameters:\n    - id: source1\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>The first sequence to concatenate.</p>\\n\"\n    - id: source2\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>The sequence to concatenate to the first sequence.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of the input sequences.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the concatenated elements of the two input sequences.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source1</em> or <em>source2</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Concat(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: Concat(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource))\n  nameWithType: Queryable.Concat<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  nameWithType.vb: Queryable.Concat(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource))\n- uid: System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)\n  commentId: M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)\n  id: Contains``1(System.Linq.IQueryable{``0},``0)\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Contains<TSource>(IQueryable<TSource>, TSource)\n  fullName: System.Linq.Queryable.Contains<TSource>(System.Linq.IQueryable<TSource>, TSource)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Contains\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 69\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Determines whether a sequence contains a specified element by using the default equality comparer.</p>\\n\"\n  syntax:\n    content: public static bool Contains<TSource>(this IQueryable<TSource> source, TSource item)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Contains(Of TSource)(source As IQueryable(Of TSource), item As TSource) As Boolean\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in which to locate <em>item</em>.</p>\\n\"\n    - id: item\n      type: '{TSource}'\n      description: \"\\n<p>The object to locate in the sequence.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the input sequence contains an element that has the specified value; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Contains(Of TSource)(System.Linq.IQueryable(Of TSource), TSource)\n  name.vb: Contains(Of TSource)(IQueryable(Of TSource), TSource)\n  nameWithType: Queryable.Contains<TSource>(IQueryable<TSource>, TSource)\n  nameWithType.vb: Queryable.Contains(Of TSource)(IQueryable(Of TSource), TSource)\n- uid: System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  id: Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Contains<TSource>(IQueryable<TSource>, TSource, IEqualityComparer<TSource>)\n  fullName: System.Linq.Queryable.Contains<TSource>(System.Linq.IQueryable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Contains\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 70\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Determines whether a sequence contains a specified element by using a specified <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static bool Contains<TSource>(this IQueryable<TSource> source, TSource item, IEqualityComparer<TSource> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Contains(Of TSource)(source As IQueryable(Of TSource), item As TSource, comparer As IEqualityComparer(Of TSource)) As Boolean\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in which to locate <em>item</em>.</p>\\n\"\n    - id: item\n      type: '{TSource}'\n      description: \"\\n<p>The object to locate in the sequence.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare values.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the input sequence contains an element that has the specified value; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Contains(Of TSource)(System.Linq.IQueryable(Of TSource), TSource, System.Collections.Generic.IEqualityComparer(Of TSource))\n  name.vb: Contains(Of TSource)(IQueryable(Of TSource), TSource, IEqualityComparer(Of TSource))\n  nameWithType: Queryable.Contains<TSource>(IQueryable<TSource>, TSource, IEqualityComparer<TSource>)\n  nameWithType.vb: Queryable.Contains(Of TSource)(IQueryable(Of TSource), TSource, IEqualityComparer(Of TSource))\n- uid: System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})\n  commentId: M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})\n  id: Count``1(System.Linq.IQueryable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Count<TSource>(IQueryable<TSource>)\n  fullName: System.Linq.Queryable.Count<TSource>(System.Linq.IQueryable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 71\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the number of elements in a sequence.</p>\\n\"\n  syntax:\n    content: public static int Count<TSource>(this IQueryable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Count(Of TSource)(source As IQueryable(Of TSource)) As Integer\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>The <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the elements to be counted.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The number of elements in <em>source</em> is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Count(Of TSource)(System.Linq.IQueryable(Of TSource))\n  name.vb: Count(Of TSource)(IQueryable(Of TSource))\n  nameWithType: Queryable.Count<TSource>(IQueryable<TSource>)\n  nameWithType.vb: Queryable.Count(Of TSource)(IQueryable(Of TSource))\n- uid: System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  commentId: M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  id: Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Count<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)\n  fullName: System.Linq.Queryable.Count<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 72\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the number of elements in the specified sequence that satisfies a condition.</p>\\n\"\n  syntax:\n    content: public static int Count<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Count(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As Integer\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the elements to be counted.</p>\\n\"\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the sequence that satisfies the condition in the predicate function.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The number of elements in <em>source</em> is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Count(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))\n  name.vb: Count(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))\n  nameWithType: Queryable.Count<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)\n  nameWithType.vb: Queryable.Count(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))\n- uid: System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})\n  commentId: M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})\n  id: DefaultIfEmpty``1(System.Linq.IQueryable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: DefaultIfEmpty<TSource>(IQueryable<TSource>)\n  fullName: System.Linq.Queryable.DefaultIfEmpty<TSource>(System.Linq.IQueryable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DefaultIfEmpty\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 73\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TSource> DefaultIfEmpty<TSource>(this IQueryable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function DefaultIfEmpty(Of TSource)(source As IQueryable(Of TSource)) As IQueryable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>The <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return a default value for if empty.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <strong>default</strong>(<em>TSource</em>) if <em>source</em> is empty; otherwise, <em>source</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.DefaultIfEmpty(Of TSource)(System.Linq.IQueryable(Of TSource))\n  name.vb: DefaultIfEmpty(Of TSource)(IQueryable(Of TSource))\n  nameWithType: Queryable.DefaultIfEmpty<TSource>(IQueryable<TSource>)\n  nameWithType.vb: Queryable.DefaultIfEmpty(Of TSource)(IQueryable(Of TSource))\n- uid: System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)\n  commentId: M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)\n  id: DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: DefaultIfEmpty<TSource>(IQueryable<TSource>, TSource)\n  fullName: System.Linq.Queryable.DefaultIfEmpty<TSource>(System.Linq.IQueryable<TSource>, TSource)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DefaultIfEmpty\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 74\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TSource> DefaultIfEmpty<TSource>(this IQueryable<TSource> source, TSource defaultValue)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function DefaultIfEmpty(Of TSource)(source As IQueryable(Of TSource), defaultValue As TSource) As IQueryable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>The <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return the specified value for if empty.</p>\\n\"\n    - id: defaultValue\n      type: '{TSource}'\n      description: \"\\n<p>The value to return if the sequence is empty.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <em>defaultValue</em> if <em>source</em> is empty; otherwise, <em>source</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.DefaultIfEmpty(Of TSource)(System.Linq.IQueryable(Of TSource), TSource)\n  name.vb: DefaultIfEmpty(Of TSource)(IQueryable(Of TSource), TSource)\n  nameWithType: Queryable.DefaultIfEmpty<TSource>(IQueryable<TSource>, TSource)\n  nameWithType.vb: Queryable.DefaultIfEmpty(Of TSource)(IQueryable(Of TSource), TSource)\n- uid: System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})\n  commentId: M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})\n  id: Distinct``1(System.Linq.IQueryable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Distinct<TSource>(IQueryable<TSource>)\n  fullName: System.Linq.Queryable.Distinct<TSource>(System.Linq.IQueryable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Distinct\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 75\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Returns distinct elements from a sequence by using the default equality comparer to compare values.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TSource> Distinct<TSource>(this IQueryable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Distinct(Of TSource)(source As IQueryable(Of TSource)) As IQueryable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>The <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to remove duplicates from.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains distinct elements from <em>source</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Distinct(Of TSource)(System.Linq.IQueryable(Of TSource))\n  name.vb: Distinct(Of TSource)(IQueryable(Of TSource))\n  nameWithType: Queryable.Distinct<TSource>(IQueryable<TSource>)\n  nameWithType.vb: Queryable.Distinct(Of TSource)(IQueryable(Of TSource))\n- uid: System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Distinct<TSource>(IQueryable<TSource>, IEqualityComparer<TSource>)\n  fullName: System.Linq.Queryable.Distinct<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Distinct\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 76\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Returns distinct elements from a sequence by using a specified <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare values.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TSource> Distinct<TSource>(this IQueryable<TSource> source, IEqualityComparer<TSource> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Distinct(Of TSource)(source As IQueryable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IQueryable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>The <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to remove duplicates from.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare values.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains distinct elements from <em>source</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>comparer</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Distinct(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))\n  name.vb: Distinct(Of TSource)(IQueryable(Of TSource), IEqualityComparer(Of TSource))\n  nameWithType: Queryable.Distinct<TSource>(IQueryable<TSource>, IEqualityComparer<TSource>)\n  nameWithType.vb: Queryable.Distinct(Of TSource)(IQueryable(Of TSource), IEqualityComparer(Of TSource))\n- uid: System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)\n  commentId: M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)\n  id: ElementAt``1(System.Linq.IQueryable{``0},System.Int32)\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: ElementAt<TSource>(IQueryable<TSource>, Int32)\n  fullName: System.Linq.Queryable.ElementAt<TSource>(System.Linq.IQueryable<TSource>, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ElementAt\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 77\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the element at a specified index in a sequence.</p>\\n\"\n  syntax:\n    content: public static TSource ElementAt<TSource>(this IQueryable<TSource> source, int index)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ElementAt(Of TSource)(source As IQueryable(Of TSource), index As Integer) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return an element from.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the element to retrieve.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The element at the specified position in <em>source</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.ElementAt(Of TSource)(System.Linq.IQueryable(Of TSource), System.Int32)\n  name.vb: ElementAt(Of TSource)(IQueryable(Of TSource), Int32)\n  nameWithType: Queryable.ElementAt<TSource>(IQueryable<TSource>, Int32)\n  nameWithType.vb: Queryable.ElementAt(Of TSource)(IQueryable(Of TSource), Int32)\n- uid: System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)\n  commentId: M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)\n  id: ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: ElementAtOrDefault<TSource>(IQueryable<TSource>, Int32)\n  fullName: System.Linq.Queryable.ElementAtOrDefault<TSource>(System.Linq.IQueryable<TSource>, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ElementAtOrDefault\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 78\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the element at a specified index in a sequence or a default value if the index is out of range.</p>\\n\"\n  syntax:\n    content: public static TSource ElementAtOrDefault<TSource>(this IQueryable<TSource> source, int index)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ElementAtOrDefault(Of TSource)(source As IQueryable(Of TSource), index As Integer) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return an element from.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the element to retrieve.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>default(<em>TSource</em>) if <em>index</em> is outside the bounds of <em>source</em>; otherwise, the element at the specified position in <em>source</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.ElementAtOrDefault(Of TSource)(System.Linq.IQueryable(Of TSource), System.Int32)\n  name.vb: ElementAtOrDefault(Of TSource)(IQueryable(Of TSource), Int32)\n  nameWithType: Queryable.ElementAtOrDefault<TSource>(IQueryable<TSource>, Int32)\n  nameWithType.vb: Queryable.ElementAtOrDefault(Of TSource)(IQueryable(Of TSource), Int32)\n- uid: System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  id: Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  fullName: System.Linq.Queryable.Except<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Except\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 79\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Produces the set difference of two sequences by using the default equality comparer to compare values.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TSource> Except<TSource>(this IQueryable<TSource> source1, IEnumerable<TSource> source2)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Except(Of TSource)(source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource)) As IQueryable(Of TSource)\n    parameters:\n    - id: source1\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements that are not also in <em>source2</em> will be returned.</p>\\n\"\n    - id: source2\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements that also occur in the first sequence will not appear in the returned sequence.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of the input sequences.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the set difference of the two sequences.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source1</em> or <em>source2</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Except(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: Except(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource))\n  nameWithType: Queryable.Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  nameWithType.vb: Queryable.Except(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource))\n- uid: System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: System.Linq.Queryable.Except<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Except\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 80\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Produces the set difference of two sequences by using the specified <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare values.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TSource> Except<TSource>(this IQueryable<TSource> source1, IEnumerable<TSource> source2, IEqualityComparer<TSource> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Except(Of TSource)(source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IQueryable(Of TSource)\n    parameters:\n    - id: source1\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements that are not also in <em>source2</em> will be returned.</p>\\n\"\n    - id: source2\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements that also occur in the first sequence will not appear in the returned sequence.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare values.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of the input sequences.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the set difference of the two sequences.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source1</em> or <em>source2</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Except(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))\n  name.vb: Except(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))\n  nameWithType: Queryable.Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType.vb: Queryable.Except(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))\n- uid: System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})\n  commentId: M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})\n  id: First``1(System.Linq.IQueryable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: First<TSource>(IQueryable<TSource>)\n  fullName: System.Linq.Queryable.First<TSource>(System.Linq.IQueryable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: First\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 81\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the first element of a sequence.</p>\\n\"\n  syntax:\n    content: public static TSource First<TSource>(this IQueryable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function First(Of TSource)(source As IQueryable(Of TSource)) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>The <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return the first element of.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The first element in <em>source</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The source sequence is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.First(Of TSource)(System.Linq.IQueryable(Of TSource))\n  name.vb: First(Of TSource)(IQueryable(Of TSource))\n  nameWithType: Queryable.First<TSource>(IQueryable<TSource>)\n  nameWithType.vb: Queryable.First(Of TSource)(IQueryable(Of TSource))\n- uid: System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  commentId: M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  id: First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: First<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)\n  fullName: System.Linq.Queryable.First<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: First\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 82\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the first element of a sequence that satisfies a specified condition.</p>\\n\"\n  syntax:\n    content: public static TSource First<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function First(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return an element from.</p>\\n\"\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The first element in <em>source</em> that passes the test in <em>predicate</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>No element satisfies the condition in <em>predicate</em>.</p>\\n<p>-or-</p>\\n<p>The source sequence is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.First(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))\n  name.vb: First(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))\n  nameWithType: Queryable.First<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)\n  nameWithType.vb: Queryable.First(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))\n- uid: System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})\n  commentId: M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})\n  id: FirstOrDefault``1(System.Linq.IQueryable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: FirstOrDefault<TSource>(IQueryable<TSource>)\n  fullName: System.Linq.Queryable.FirstOrDefault<TSource>(System.Linq.IQueryable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FirstOrDefault\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 83\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the first element of a sequence, or a default value if the sequence contains no elements.</p>\\n\"\n  syntax:\n    content: public static TSource FirstOrDefault<TSource>(this IQueryable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function FirstOrDefault(Of TSource)(source As IQueryable(Of TSource)) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>The <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return the first element of.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>default(<em>TSource</em>) if <em>source</em> is empty; otherwise, the first element in <em>source</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.FirstOrDefault(Of TSource)(System.Linq.IQueryable(Of TSource))\n  name.vb: FirstOrDefault(Of TSource)(IQueryable(Of TSource))\n  nameWithType: Queryable.FirstOrDefault<TSource>(IQueryable<TSource>)\n  nameWithType.vb: Queryable.FirstOrDefault(Of TSource)(IQueryable(Of TSource))\n- uid: System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  commentId: M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  id: FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: FirstOrDefault<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)\n  fullName: System.Linq.Queryable.FirstOrDefault<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FirstOrDefault\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 84\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.</p>\\n\"\n  syntax:\n    content: public static TSource FirstOrDefault<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function FirstOrDefault(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return an element from.</p>\\n\"\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>default(<em>TSource</em>) if <em>source</em> is empty or if no element passes the test specified by <em>predicate</em>; otherwise, the first element in <em>source</em> that passes the test specified by <em>predicate</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.FirstOrDefault(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))\n  name.vb: FirstOrDefault(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))\n  nameWithType: Queryable.FirstOrDefault<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)\n  nameWithType.vb: Queryable.FirstOrDefault(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))\n- uid: System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  commentId: M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  id: GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: GroupBy<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)\n  fullName: System.Linq.Queryable.GroupBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupBy\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 85\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Groups the elements of a sequence according to a specified key selector function.</p>\\n\"\n  syntax:\n    content: public static IQueryable<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupBy(Of TSource, TKey)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey))) As IQueryable(Of IGrouping(Of TKey, TSource))\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements to group.</p>\\n\"\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}\n      description: \"\\n<p>A function to extract the key for each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by the function represented in <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{System.Linq.IGrouping{{TKey},{TSource}}}\n      description: \"\\n<p>An IQueryable<IGrouping<TKey, TSource>> in C# or IQueryable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <xref href=\\\"System.Linq.IGrouping`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object contains a sequence of objects and a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))\n  name.vb: GroupBy(Of TSource, TKey)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)))\n  nameWithType: Queryable.GroupBy<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)\n  nameWithType.vb: Queryable.GroupBy(Of TSource, TKey)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)))\n- uid: System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})\n  id: GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: GroupBy<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, IEqualityComparer<TKey>)\n  fullName: System.Linq.Queryable.GroupBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupBy\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 86\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</p>\\n\"\n  syntax:\n    content: public static IQueryable<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, IEqualityComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupBy(Of TSource, TKey)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), comparer As IEqualityComparer(Of TKey)) As IQueryable(Of IGrouping(Of TKey, TSource))\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements to group.</p>\\n\"\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}\n      description: \"\\n<p>A function to extract the key for each element.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by the function represented in <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{System.Linq.IGrouping{{TKey},{TSource}}}\n      description: \"\\n<p>An IQueryable<IGrouping<TKey, TSource>> in C# or IQueryable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <xref href=\\\"System.Linq.IGrouping`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains a sequence of objects and a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>comparer</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IEqualityComparer(Of TKey))\n  name.vb: GroupBy(Of TSource, TKey)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), IEqualityComparer(Of TKey))\n  nameWithType: Queryable.GroupBy<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, IEqualityComparer<TKey>)\n  nameWithType.vb: Queryable.GroupBy(Of TSource, TKey)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), IEqualityComparer(Of TKey))\n- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})\n  commentId: M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})\n  id: GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: GroupBy<TSource, TKey, TElement>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TSource, TElement>>)\n  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TElement>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TSource, TElement>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupBy\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 87\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</p>\\n\"\n  syntax:\n    content: public static IQueryable<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, Expressions.Expression<Func<TSource, TElement>> elementSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupBy(Of TSource, TKey, TElement)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), elementSelector As Expressions.Expression(Of Func(Of TSource, TElement))) As IQueryable(Of IGrouping(Of TKey, TElement))\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements to group.</p>\\n\"\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}\n      description: \"\\n<p>A function to extract the key for each element.</p>\\n\"\n    - id: elementSelector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TElement}}}\n      description: \"\\n<p>A function to map each source element to an element in an <xref href=\\\"System.Linq.IGrouping`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by the function represented in <em>keySelector</em>.</p>\\n\"\n    - id: TElement\n      description: \"\\n<p>The type of the elements in each <xref href=\\\"System.Linq.IGrouping`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{System.Linq.IGrouping{{TKey},{TElement}}}\n      description: \"\\n<p>An IQueryable<IGrouping<TKey, TElement>> in C# or IQueryable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <xref href=\\\"System.Linq.IGrouping`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains a sequence of objects of type <em>TElement</em> and a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey, TElement)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TElement)))\n  name.vb: GroupBy(Of TSource, TKey, TElement)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Expressions.Expression(Of Func(Of TSource, TElement)))\n  nameWithType: Queryable.GroupBy<TSource, TKey, TElement>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TSource, TElement>>)\n  nameWithType.vb: Queryable.GroupBy(Of TSource, TKey, TElement)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Expressions.Expression(Of Func(Of TSource, TElement)))\n- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})\n  id: GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: GroupBy<TSource, TKey, TElement>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TSource, TElement>>, IEqualityComparer<TKey>)\n  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TElement>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TSource, TElement>>, System.Collections.Generic.IEqualityComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupBy\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 88\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Groups the elements of a sequence and projects the elements for each group by using a specified function. Key values are compared by using a specified comparer.</p>\\n\"\n  syntax:\n    content: public static IQueryable<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, Expressions.Expression<Func<TSource, TElement>> elementSelector, IEqualityComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupBy(Of TSource, TKey, TElement)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), elementSelector As Expressions.Expression(Of Func(Of TSource, TElement)), comparer As IEqualityComparer(Of TKey)) As IQueryable(Of IGrouping(Of TKey, TElement))\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements to group.</p>\\n\"\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}\n      description: \"\\n<p>A function to extract the key for each element.</p>\\n\"\n    - id: elementSelector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TElement}}}\n      description: \"\\n<p>A function to map each source element to an element in an <xref href=\\\"System.Linq.IGrouping`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by the function represented in <em>keySelector</em>.</p>\\n\"\n    - id: TElement\n      description: \"\\n<p>The type of the elements in each <xref href=\\\"System.Linq.IGrouping`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{System.Linq.IGrouping{{TKey},{TElement}}}\n      description: \"\\n<p>An IQueryable<IGrouping<TKey, TElement>> in C# or IQueryable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <xref href=\\\"System.Linq.IGrouping`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains a sequence of objects of type <em>TElement</em> and a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> or <em>comparer</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey, TElement)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TElement)), System.Collections.Generic.IEqualityComparer(Of TKey))\n  name.vb: GroupBy(Of TSource, TKey, TElement)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Expressions.Expression(Of Func(Of TSource, TElement)), IEqualityComparer(Of TKey))\n  nameWithType: Queryable.GroupBy<TSource, TKey, TElement>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TSource, TElement>>, IEqualityComparer<TKey>)\n  nameWithType.vb: Queryable.GroupBy(Of TSource, TKey, TElement)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Expressions.Expression(Of Func(Of TSource, TElement)), IEqualityComparer(Of TKey))\n- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})\n  commentId: M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})\n  id: GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: GroupBy<TSource, TKey, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TKey, IEnumerable<TSource>, TResult>>)\n  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupBy\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 89\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TResult> GroupBy<TSource, TKey, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, Expressions.Expression<Func<TKey, IEnumerable<TSource>, TResult>> resultSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), resultSelector As Expressions.Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult))) As IQueryable(Of TResult)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements to group.</p>\\n\"\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}\n      description: \"\\n<p>A function to extract the key for each element.</p>\\n\"\n    - id: resultSelector\n      type: System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}}\n      description: \"\\n<p>A function to create a result value from each group.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by the function represented in <em>keySelector</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TResult}}\n      description: \"\\n<p>An T:System.Linq.IQueryable`1 that has a type argument of <em>TResult</em> and where each element represents a projection over a group and its key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)))\n  name.vb: GroupBy(Of TSource, TKey, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Expressions.Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)))\n  nameWithType: Queryable.GroupBy<TSource, TKey, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TKey, IEnumerable<TSource>, TResult>>)\n  nameWithType.vb: Queryable.GroupBy(Of TSource, TKey, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Expressions.Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)))\n- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})\n  id: GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: GroupBy<TSource, TKey, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TKey, IEnumerable<TSource>, TResult>>, IEqualityComparer<TKey>)\n  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupBy\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 90\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TResult> GroupBy<TSource, TKey, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, Expressions.Expression<Func<TKey, IEnumerable<TSource>, TResult>> resultSelector, IEqualityComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), resultSelector As Expressions.Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), comparer As IEqualityComparer(Of TKey)) As IQueryable(Of TResult)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements to group.</p>\\n\"\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}\n      description: \"\\n<p>A function to extract the key for each element.</p>\\n\"\n    - id: resultSelector\n      type: System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}}\n      description: \"\\n<p>A function to create a result value from each group.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by the function represented in <em>keySelector</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TResult}}\n      description: \"\\n<p>An T:System.Linq.IQueryable`1 that has a type argument of <em>TResult</em> and where each element represents a projection over a group and its key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>resultSelector</em> or <em>comparer</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))\n  name.vb: GroupBy(Of TSource, TKey, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Expressions.Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), IEqualityComparer(Of TKey))\n  nameWithType: Queryable.GroupBy<TSource, TKey, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TKey, IEnumerable<TSource>, TResult>>, IEqualityComparer<TKey>)\n  nameWithType.vb: Queryable.GroupBy(Of TSource, TKey, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Expressions.Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), IEqualityComparer(Of TKey))\n- uid: System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})\n  commentId: M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})\n  id: GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: GroupBy<TSource, TKey, TElement, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TSource, TElement>>, Expressions.Expression<Func<TKey, IEnumerable<TElement>, TResult>>)\n  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TElement, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TSource, TElement>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupBy\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 91\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TResult> GroupBy<TSource, TKey, TElement, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, Expressions.Expression<Func<TSource, TElement>> elementSelector, Expressions.Expression<Func<TKey, IEnumerable<TElement>, TResult>> resultSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupBy(Of TSource, TKey, TElement, TResult)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), elementSelector As Expressions.Expression(Of Func(Of TSource, TElement)), resultSelector As Expressions.Expression(Of Func(Of TKey, IEnumerable(Of TElement), TResult))) As IQueryable(Of TResult)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements to group.</p>\\n\"\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}\n      description: \"\\n<p>A function to extract the key for each element.</p>\\n\"\n    - id: elementSelector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TElement}}}\n      description: \"\\n<p>A function to map each source element to an element in an <xref href=\\\"System.Linq.IGrouping`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: resultSelector\n      type: System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}}\n      description: \"\\n<p>A function to create a result value from each group.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by the function represented in <em>keySelector</em>.</p>\\n\"\n    - id: TElement\n      description: \"\\n<p>The type of the elements in each <xref href=\\\"System.Linq.IGrouping`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TResult}}\n      description: \"\\n<p>An T:System.Linq.IQueryable`1 that has a type argument of <em>TResult</em> and where each element represents a projection over a group and its key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey, TElement, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TElement)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult)))\n  name.vb: GroupBy(Of TSource, TKey, TElement, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Expressions.Expression(Of Func(Of TSource, TElement)), Expressions.Expression(Of Func(Of TKey, IEnumerable(Of TElement), TResult)))\n  nameWithType: Queryable.GroupBy<TSource, TKey, TElement, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TSource, TElement>>, Expressions.Expression<Func<TKey, IEnumerable<TElement>, TResult>>)\n  nameWithType.vb: Queryable.GroupBy(Of TSource, TKey, TElement, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Expressions.Expression(Of Func(Of TSource, TElement)), Expressions.Expression(Of Func(Of TKey, IEnumerable(Of TElement), TResult)))\n- uid: System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})\n  id: GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: GroupBy<TSource, TKey, TElement, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TSource, TElement>>, Expressions.Expression<Func<TKey, IEnumerable<TElement>, TResult>>, IEqualityComparer<TKey>)\n  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TElement, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TSource, TElement>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupBy\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 92\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer and the elements of each group are projected by using a specified function.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TResult> GroupBy<TSource, TKey, TElement, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, Expressions.Expression<Func<TSource, TElement>> elementSelector, Expressions.Expression<Func<TKey, IEnumerable<TElement>, TResult>> resultSelector, IEqualityComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupBy(Of TSource, TKey, TElement, TResult)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), elementSelector As Expressions.Expression(Of Func(Of TSource, TElement)), resultSelector As Expressions.Expression(Of Func(Of TKey, IEnumerable(Of TElement), TResult)), comparer As IEqualityComparer(Of TKey)) As IQueryable(Of TResult)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements to group.</p>\\n\"\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}\n      description: \"\\n<p>A function to extract the key for each element.</p>\\n\"\n    - id: elementSelector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TElement}}}\n      description: \"\\n<p>A function to map each source element to an element in an <xref href=\\\"System.Linq.IGrouping`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: resultSelector\n      type: System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}}\n      description: \"\\n<p>A function to create a result value from each group.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by the function represented in <em>keySelector</em>.</p>\\n\"\n    - id: TElement\n      description: \"\\n<p>The type of the elements in each <xref href=\\\"System.Linq.IGrouping`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TResult}}\n      description: \"\\n<p>An T:System.Linq.IQueryable`1 that has a type argument of <em>TResult</em> and where each element represents a projection over a group and its key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> or <em>resultSelector</em> or <em>comparer</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey, TElement, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TElement)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))\n  name.vb: GroupBy(Of TSource, TKey, TElement, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Expressions.Expression(Of Func(Of TSource, TElement)), Expressions.Expression(Of Func(Of TKey, IEnumerable(Of TElement), TResult)), IEqualityComparer(Of TKey))\n  nameWithType: Queryable.GroupBy<TSource, TKey, TElement, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TSource, TElement>>, Expressions.Expression<Func<TKey, IEnumerable<TElement>, TResult>>, IEqualityComparer<TKey>)\n  nameWithType.vb: Queryable.GroupBy(Of TSource, TKey, TElement, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Expressions.Expression(Of Func(Of TSource, TElement)), Expressions.Expression(Of Func(Of TKey, IEnumerable(Of TElement), TResult)), IEqualityComparer(Of TKey))\n- uid: System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})\n  commentId: M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})\n  id: GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: GroupJoin<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expressions.Expression<Func<TOuter, TKey>>, Expressions.Expression<Func<TInner, TKey>>, Expressions.Expression<Func<TOuter, IEnumerable<TInner>, TResult>>)\n  fullName: System.Linq.Queryable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.IQueryable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupJoin\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 93\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Correlates the elements of two sequences based on key equality and groups the results. The default equality comparer is used to compare keys.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this IQueryable<TOuter> outer, IEnumerable<TInner> inner, Expressions.Expression<Func<TOuter, TKey>> outerKeySelector, Expressions.Expression<Func<TInner, TKey>> innerKeySelector, Expressions.Expression<Func<TOuter, IEnumerable<TInner>, TResult>> resultSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As IQueryable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Expressions.Expression(Of Func(Of TOuter, TKey)), innerKeySelector As Expressions.Expression(Of Func(Of TInner, TKey)), resultSelector As Expressions.Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult))) As IQueryable(Of TResult)\n    parameters:\n    - id: outer\n      type: System.Linq.IQueryable{{TOuter}}\n      description: \"\\n<p>The first sequence to join.</p>\\n\"\n    - id: inner\n      type: System.Collections.Generic.IEnumerable{{TInner}}\n      description: \"\\n<p>The sequence to join to the first sequence.</p>\\n\"\n    - id: outerKeySelector\n      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TKey}}}\n      description: \"\\n<p>A function to extract the join key from each element of the first sequence.</p>\\n\"\n    - id: innerKeySelector\n      type: System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}}\n      description: \"\\n<p>A function to extract the join key from each element of the second sequence.</p>\\n\"\n    - id: resultSelector\n      type: System.Linq.Expressions.Expression{System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}}\n      description: \"\\n<p>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</p>\\n\"\n    typeParameters:\n    - id: TOuter\n      description: \"\\n<p>The type of the elements of the first sequence.</p>\\n\"\n    - id: TInner\n      description: \"\\n<p>The type of the elements of the second sequence.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the keys returned by the key selector functions.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result elements.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TResult}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains elements of type <em>TResult</em> obtained by performing a grouped join on two sequences.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Linq.IQueryable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)))\n  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(IQueryable(Of TOuter), IEnumerable(Of TInner), Expressions.Expression(Of Func(Of TOuter, TKey)), Expressions.Expression(Of Func(Of TInner, TKey)), Expressions.Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)))\n  nameWithType: Queryable.GroupJoin<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expressions.Expression<Func<TOuter, TKey>>, Expressions.Expression<Func<TInner, TKey>>, Expressions.Expression<Func<TOuter, IEnumerable<TInner>, TResult>>)\n  nameWithType.vb: Queryable.GroupJoin(Of TOuter, TInner, TKey, TResult)(IQueryable(Of TOuter), IEnumerable(Of TInner), Expressions.Expression(Of Func(Of TOuter, TKey)), Expressions.Expression(Of Func(Of TInner, TKey)), Expressions.Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)))\n- uid: System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})\n  commentId: M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})\n  id: GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: GroupJoin<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expressions.Expression<Func<TOuter, TKey>>, Expressions.Expression<Func<TInner, TKey>>, Expressions.Expression<Func<TOuter, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)\n  fullName: System.Linq.Queryable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.IQueryable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupJoin\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 94\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Correlates the elements of two sequences based on key equality and groups the results. A specified <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is used to compare keys.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this IQueryable<TOuter> outer, IEnumerable<TInner> inner, Expressions.Expression<Func<TOuter, TKey>> outerKeySelector, Expressions.Expression<Func<TInner, TKey>> innerKeySelector, Expressions.Expression<Func<TOuter, IEnumerable<TInner>, TResult>> resultSelector, IEqualityComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As IQueryable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Expressions.Expression(Of Func(Of TOuter, TKey)), innerKeySelector As Expressions.Expression(Of Func(Of TInner, TKey)), resultSelector As Expressions.Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)), comparer As IEqualityComparer(Of TKey)) As IQueryable(Of TResult)\n    parameters:\n    - id: outer\n      type: System.Linq.IQueryable{{TOuter}}\n      description: \"\\n<p>The first sequence to join.</p>\\n\"\n    - id: inner\n      type: System.Collections.Generic.IEnumerable{{TInner}}\n      description: \"\\n<p>The sequence to join to the first sequence.</p>\\n\"\n    - id: outerKeySelector\n      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TKey}}}\n      description: \"\\n<p>A function to extract the join key from each element of the first sequence.</p>\\n\"\n    - id: innerKeySelector\n      type: System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}}\n      description: \"\\n<p>A function to extract the join key from each element of the second sequence.</p>\\n\"\n    - id: resultSelector\n      type: System.Linq.Expressions.Expression{System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}}\n      description: \"\\n<p>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TKey}}\n      description: \"\\n<p>A comparer to hash and compare keys.</p>\\n\"\n    typeParameters:\n    - id: TOuter\n      description: \"\\n<p>The type of the elements of the first sequence.</p>\\n\"\n    - id: TInner\n      description: \"\\n<p>The type of the elements of the second sequence.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the keys returned by the key selector functions.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result elements.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TResult}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains elements of type <em>TResult</em> obtained by performing a grouped join on two sequences.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Linq.IQueryable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))\n  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(IQueryable(Of TOuter), IEnumerable(Of TInner), Expressions.Expression(Of Func(Of TOuter, TKey)), Expressions.Expression(Of Func(Of TInner, TKey)), Expressions.Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))\n  nameWithType: Queryable.GroupJoin<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expressions.Expression<Func<TOuter, TKey>>, Expressions.Expression<Func<TInner, TKey>>, Expressions.Expression<Func<TOuter, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)\n  nameWithType.vb: Queryable.GroupJoin(Of TOuter, TInner, TKey, TResult)(IQueryable(Of TOuter), IEnumerable(Of TInner), Expressions.Expression(Of Func(Of TOuter, TKey)), Expressions.Expression(Of Func(Of TInner, TKey)), Expressions.Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))\n- uid: System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  id: Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  fullName: System.Linq.Queryable.Intersect<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Intersect\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 95\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Produces the set intersection of two sequences by using the default equality comparer to compare values.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TSource> Intersect<TSource>(this IQueryable<TSource> source1, IEnumerable<TSource> source2)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Intersect(Of TSource)(source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource)) As IQueryable(Of TSource)\n    parameters:\n    - id: source1\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence whose distinct elements that also appear in <em>source2</em> are returned.</p>\\n\"\n    - id: source2\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence whose distinct elements that also appear in the first sequence are returned.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of the input sequences.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence that contains the set intersection of the two sequences.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source1</em> or <em>source2</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Intersect(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: Intersect(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource))\n  nameWithType: Queryable.Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  nameWithType.vb: Queryable.Intersect(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource))\n- uid: System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: System.Linq.Queryable.Intersect<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Intersect\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 96\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Produces the set intersection of two sequences by using the specified <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare values.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TSource> Intersect<TSource>(this IQueryable<TSource> source1, IEnumerable<TSource> source2, IEqualityComparer<TSource> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Intersect(Of TSource)(source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IQueryable(Of TSource)\n    parameters:\n    - id: source1\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose distinct elements that also appear in <em>source2</em> are returned.</p>\\n\"\n    - id: source2\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose distinct elements that also appear in the first sequence are returned.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare values.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of the input sequences.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the set intersection of the two sequences.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source1</em> or <em>source2</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Intersect(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))\n  name.vb: Intersect(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))\n  nameWithType: Queryable.Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType.vb: Queryable.Intersect(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))\n- uid: System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})\n  commentId: M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})\n  id: Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Join<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expressions.Expression<Func<TOuter, TKey>>, Expressions.Expression<Func<TInner, TKey>>, Expressions.Expression<Func<TOuter, TInner, TResult>>)\n  fullName: System.Linq.Queryable.Join<TOuter, TInner, TKey, TResult>(System.Linq.IQueryable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Join\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 97\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TResult> Join<TOuter, TInner, TKey, TResult>(this IQueryable<TOuter> outer, IEnumerable<TInner> inner, Expressions.Expression<Func<TOuter, TKey>> outerKeySelector, Expressions.Expression<Func<TInner, TKey>> innerKeySelector, Expressions.Expression<Func<TOuter, TInner, TResult>> resultSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As IQueryable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Expressions.Expression(Of Func(Of TOuter, TKey)), innerKeySelector As Expressions.Expression(Of Func(Of TInner, TKey)), resultSelector As Expressions.Expression(Of Func(Of TOuter, TInner, TResult))) As IQueryable(Of TResult)\n    parameters:\n    - id: outer\n      type: System.Linq.IQueryable{{TOuter}}\n      description: \"\\n<p>The first sequence to join.</p>\\n\"\n    - id: inner\n      type: System.Collections.Generic.IEnumerable{{TInner}}\n      description: \"\\n<p>The sequence to join to the first sequence.</p>\\n\"\n    - id: outerKeySelector\n      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TKey}}}\n      description: \"\\n<p>A function to extract the join key from each element of the first sequence.</p>\\n\"\n    - id: innerKeySelector\n      type: System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}}\n      description: \"\\n<p>A function to extract the join key from each element of the second sequence.</p>\\n\"\n    - id: resultSelector\n      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TInner},{TResult}}}\n      description: \"\\n<p>A function to create a result element from two matching elements.</p>\\n\"\n    typeParameters:\n    - id: TOuter\n      description: \"\\n<p>The type of the elements of the first sequence.</p>\\n\"\n    - id: TInner\n      description: \"\\n<p>The type of the elements of the second sequence.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the keys returned by the key selector functions.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result elements.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TResult}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has elements of type <em>TResult</em> obtained by performing an inner join on two sequences.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Join(Of TOuter, TInner, TKey, TResult)(System.Linq.IQueryable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult)))\n  name.vb: Join(Of TOuter, TInner, TKey, TResult)(IQueryable(Of TOuter), IEnumerable(Of TInner), Expressions.Expression(Of Func(Of TOuter, TKey)), Expressions.Expression(Of Func(Of TInner, TKey)), Expressions.Expression(Of Func(Of TOuter, TInner, TResult)))\n  nameWithType: Queryable.Join<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expressions.Expression<Func<TOuter, TKey>>, Expressions.Expression<Func<TInner, TKey>>, Expressions.Expression<Func<TOuter, TInner, TResult>>)\n  nameWithType.vb: Queryable.Join(Of TOuter, TInner, TKey, TResult)(IQueryable(Of TOuter), IEnumerable(Of TInner), Expressions.Expression(Of Func(Of TOuter, TKey)), Expressions.Expression(Of Func(Of TInner, TKey)), Expressions.Expression(Of Func(Of TOuter, TInner, TResult)))\n- uid: System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})\n  commentId: M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})\n  id: Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Join<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expressions.Expression<Func<TOuter, TKey>>, Expressions.Expression<Func<TInner, TKey>>, Expressions.Expression<Func<TOuter, TInner, TResult>>, IEqualityComparer<TKey>)\n  fullName: System.Linq.Queryable.Join<TOuter, TInner, TKey, TResult>(System.Linq.IQueryable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Join\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 98\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Correlates the elements of two sequences based on matching keys. A specified <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is used to compare keys.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TResult> Join<TOuter, TInner, TKey, TResult>(this IQueryable<TOuter> outer, IEnumerable<TInner> inner, Expressions.Expression<Func<TOuter, TKey>> outerKeySelector, Expressions.Expression<Func<TInner, TKey>> innerKeySelector, Expressions.Expression<Func<TOuter, TInner, TResult>> resultSelector, IEqualityComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As IQueryable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Expressions.Expression(Of Func(Of TOuter, TKey)), innerKeySelector As Expressions.Expression(Of Func(Of TInner, TKey)), resultSelector As Expressions.Expression(Of Func(Of TOuter, TInner, TResult)), comparer As IEqualityComparer(Of TKey)) As IQueryable(Of TResult)\n    parameters:\n    - id: outer\n      type: System.Linq.IQueryable{{TOuter}}\n      description: \"\\n<p>The first sequence to join.</p>\\n\"\n    - id: inner\n      type: System.Collections.Generic.IEnumerable{{TInner}}\n      description: \"\\n<p>The sequence to join to the first sequence.</p>\\n\"\n    - id: outerKeySelector\n      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TKey}}}\n      description: \"\\n<p>A function to extract the join key from each element of the first sequence.</p>\\n\"\n    - id: innerKeySelector\n      type: System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}}\n      description: \"\\n<p>A function to extract the join key from each element of the second sequence.</p>\\n\"\n    - id: resultSelector\n      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TInner},{TResult}}}\n      description: \"\\n<p>A function to create a result element from two matching elements.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to hash and compare keys.</p>\\n\"\n    typeParameters:\n    - id: TOuter\n      description: \"\\n<p>The type of the elements of the first sequence.</p>\\n\"\n    - id: TInner\n      description: \"\\n<p>The type of the elements of the second sequence.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the keys returned by the key selector functions.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result elements.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TResult}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has elements of type <em>TResult</em> obtained by performing an inner join on two sequences.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Join(Of TOuter, TInner, TKey, TResult)(System.Linq.IQueryable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))\n  name.vb: Join(Of TOuter, TInner, TKey, TResult)(IQueryable(Of TOuter), IEnumerable(Of TInner), Expressions.Expression(Of Func(Of TOuter, TKey)), Expressions.Expression(Of Func(Of TInner, TKey)), Expressions.Expression(Of Func(Of TOuter, TInner, TResult)), IEqualityComparer(Of TKey))\n  nameWithType: Queryable.Join<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expressions.Expression<Func<TOuter, TKey>>, Expressions.Expression<Func<TInner, TKey>>, Expressions.Expression<Func<TOuter, TInner, TResult>>, IEqualityComparer<TKey>)\n  nameWithType.vb: Queryable.Join(Of TOuter, TInner, TKey, TResult)(IQueryable(Of TOuter), IEnumerable(Of TInner), Expressions.Expression(Of Func(Of TOuter, TKey)), Expressions.Expression(Of Func(Of TInner, TKey)), Expressions.Expression(Of Func(Of TOuter, TInner, TResult)), IEqualityComparer(Of TKey))\n- uid: System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})\n  commentId: M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})\n  id: Last``1(System.Linq.IQueryable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Last<TSource>(IQueryable<TSource>)\n  fullName: System.Linq.Queryable.Last<TSource>(System.Linq.IQueryable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Last\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 99\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the last element in a sequence.</p>\\n\"\n  syntax:\n    content: public static TSource Last<TSource>(this IQueryable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Last(Of TSource)(source As IQueryable(Of TSource)) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return the last element of.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The value at the last position in <em>source</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The source sequence is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Last(Of TSource)(System.Linq.IQueryable(Of TSource))\n  name.vb: Last(Of TSource)(IQueryable(Of TSource))\n  nameWithType: Queryable.Last<TSource>(IQueryable<TSource>)\n  nameWithType.vb: Queryable.Last(Of TSource)(IQueryable(Of TSource))\n- uid: System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  commentId: M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  id: Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Last<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)\n  fullName: System.Linq.Queryable.Last<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Last\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 100\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the last element of a sequence that satisfies a specified condition.</p>\\n\"\n  syntax:\n    content: public static TSource Last<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Last(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return an element from.</p>\\n\"\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The last element in <em>source</em> that passes the test specified by <em>predicate</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>No element satisfies the condition in <em>predicate</em>.</p>\\n<p>-or-</p>\\n<p>The source sequence is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Last(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))\n  name.vb: Last(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))\n  nameWithType: Queryable.Last<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)\n  nameWithType.vb: Queryable.Last(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))\n- uid: System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})\n  commentId: M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})\n  id: LastOrDefault``1(System.Linq.IQueryable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: LastOrDefault<TSource>(IQueryable<TSource>)\n  fullName: System.Linq.Queryable.LastOrDefault<TSource>(System.Linq.IQueryable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LastOrDefault\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 101\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the last element in a sequence, or a default value if the sequence contains no elements.</p>\\n\"\n  syntax:\n    content: public static TSource LastOrDefault<TSource>(this IQueryable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function LastOrDefault(Of TSource)(source As IQueryable(Of TSource)) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return the last element of.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>default(<em>TSource</em>) if <em>source</em> is empty; otherwise, the last element in <em>source</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.LastOrDefault(Of TSource)(System.Linq.IQueryable(Of TSource))\n  name.vb: LastOrDefault(Of TSource)(IQueryable(Of TSource))\n  nameWithType: Queryable.LastOrDefault<TSource>(IQueryable<TSource>)\n  nameWithType.vb: Queryable.LastOrDefault(Of TSource)(IQueryable(Of TSource))\n- uid: System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  commentId: M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  id: LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: LastOrDefault<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)\n  fullName: System.Linq.Queryable.LastOrDefault<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LastOrDefault\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 102\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</p>\\n\"\n  syntax:\n    content: public static TSource LastOrDefault<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function LastOrDefault(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return an element from.</p>\\n\"\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>default(<em>TSource</em>) if <em>source</em> is empty or if no elements pass the test in the predicate function; otherwise, the last element of <em>source</em> that passes the test in the predicate function.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.LastOrDefault(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))\n  name.vb: LastOrDefault(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))\n  nameWithType: Queryable.LastOrDefault<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)\n  nameWithType.vb: Queryable.LastOrDefault(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))\n- uid: System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})\n  commentId: M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})\n  id: LongCount``1(System.Linq.IQueryable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: LongCount<TSource>(IQueryable<TSource>)\n  fullName: System.Linq.Queryable.LongCount<TSource>(System.Linq.IQueryable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LongCount\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 103\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the total number of elements in a sequence.</p>\\n\"\n  syntax:\n    content: public static long LongCount<TSource>(this IQueryable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function LongCount(Of TSource)(source As IQueryable(Of TSource)) As Long\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the elements to be counted.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The number of elements in <em>source</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The number of elements exceeds <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.LongCount(Of TSource)(System.Linq.IQueryable(Of TSource))\n  name.vb: LongCount(Of TSource)(IQueryable(Of TSource))\n  nameWithType: Queryable.LongCount<TSource>(IQueryable<TSource>)\n  nameWithType.vb: Queryable.LongCount(Of TSource)(IQueryable(Of TSource))\n- uid: System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  commentId: M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  id: LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: LongCount<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)\n  fullName: System.Linq.Queryable.LongCount<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LongCount\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 104\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the number of elements in a sequence that satisfy a condition.</p>\\n\"\n  syntax:\n    content: public static long LongCount<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function LongCount(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As Long\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the elements to be counted.</p>\\n\"\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The number of elements in <em>source</em> that satisfy the condition in the predicate function.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The number of matching elements exceeds <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.LongCount(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))\n  name.vb: LongCount(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))\n  nameWithType: Queryable.LongCount<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)\n  nameWithType.vb: Queryable.LongCount(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))\n- uid: System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})\n  commentId: M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})\n  id: Max``1(System.Linq.IQueryable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Max<TSource>(IQueryable<TSource>)\n  fullName: System.Linq.Queryable.Max<TSource>(System.Linq.IQueryable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 105\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the maximum value in a generic <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static TSource Max<TSource>(this IQueryable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(Of TSource)(source As IQueryable(Of TSource)) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the maximum of.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Max(Of TSource)(System.Linq.IQueryable(Of TSource))\n  name.vb: Max(Of TSource)(IQueryable(Of TSource))\n  nameWithType: Queryable.Max<TSource>(IQueryable<TSource>)\n  nameWithType.vb: Queryable.Max(Of TSource)(IQueryable(Of TSource))\n- uid: System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  commentId: M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  id: Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Max<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TResult>>)\n  fullName: System.Linq.Queryable.Max<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 106\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes a projection function on each element of a generic <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and returns the maximum resulting value.</p>\\n\"\n  syntax:\n    content: public static TResult Max<TSource, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TResult>> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(Of TSource, TResult)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, TResult))) As TResult\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the maximum of.</p>\\n\"\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}\n      description: \"\\n<p>A projection function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the value returned by the function represented by <em>selector</em>.</p>\\n\"\n    return:\n      type: '{TResult}'\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Max(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))\n  name.vb: Max(Of TSource, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TResult)))\n  nameWithType: Queryable.Max<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TResult>>)\n  nameWithType.vb: Queryable.Max(Of TSource, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TResult)))\n- uid: System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})\n  commentId: M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})\n  id: Min``1(System.Linq.IQueryable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Min<TSource>(IQueryable<TSource>)\n  fullName: System.Linq.Queryable.Min<TSource>(System.Linq.IQueryable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 107\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the minimum value of a generic <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static TSource Min<TSource>(this IQueryable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(Of TSource)(source As IQueryable(Of TSource)) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the minimum of.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Min(Of TSource)(System.Linq.IQueryable(Of TSource))\n  name.vb: Min(Of TSource)(IQueryable(Of TSource))\n  nameWithType: Queryable.Min<TSource>(IQueryable<TSource>)\n  nameWithType.vb: Queryable.Min(Of TSource)(IQueryable(Of TSource))\n- uid: System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  commentId: M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  id: Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Min<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TResult>>)\n  fullName: System.Linq.Queryable.Min<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 108\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes a projection function on each element of a generic <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and returns the minimum resulting value.</p>\\n\"\n  syntax:\n    content: public static TResult Min<TSource, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TResult>> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(Of TSource, TResult)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, TResult))) As TResult\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the minimum of.</p>\\n\"\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}\n      description: \"\\n<p>A projection function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the value returned by the function represented by <em>selector</em>.</p>\\n\"\n    return:\n      type: '{TResult}'\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Min(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))\n  name.vb: Min(Of TSource, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TResult)))\n  nameWithType: Queryable.Min<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TResult>>)\n  nameWithType.vb: Queryable.Min(Of TSource, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TResult)))\n- uid: System.Linq.Queryable.OfType``1(System.Linq.IQueryable)\n  commentId: M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)\n  id: OfType``1(System.Linq.IQueryable)\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: OfType<TResult>(IQueryable)\n  fullName: System.Linq.Queryable.OfType<TResult>(System.Linq.IQueryable)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OfType\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 109\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Filters the elements of an <xref href=\\\"System.Linq.IQueryable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> based on a specified type.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TResult> OfType<TResult>(this IQueryable source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function OfType(Of TResult)(source As IQueryable) As IQueryable(Of TResult)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements to filter.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type to filter the elements of the sequence on.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TResult}}\n      description: \"\\n<p>A collection that contains the elements from <em>source</em> that have type <em>TResult</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.OfType(Of TResult)(System.Linq.IQueryable)\n  name.vb: OfType(Of TResult)(IQueryable)\n  nameWithType: Queryable.OfType<TResult>(IQueryable)\n  nameWithType.vb: Queryable.OfType(Of TResult)(IQueryable)\n- uid: System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  commentId: M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  id: OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: OrderBy<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)\n  fullName: System.Linq.Queryable.OrderBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OrderBy\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 110\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Sorts the elements of a sequence in ascending order according to a key.</p>\\n\"\n  syntax:\n    content: public static IOrderedQueryable<TSource> OrderBy<TSource, TKey>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function OrderBy(Of TSource, TKey)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey))) As IOrderedQueryable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values to order.</p>\\n\"\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}\n      description: \"\\n<p>A function to extract a key from an element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by the function that is represented by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.IOrderedQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IOrderedQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are sorted according to a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.OrderBy(Of TSource, TKey)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))\n  name.vb: OrderBy(Of TSource, TKey)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)))\n  nameWithType: Queryable.OrderBy<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)\n  nameWithType.vb: Queryable.OrderBy(Of TSource, TKey)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)))\n- uid: System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  commentId: M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  id: OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: OrderBy<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, IComparer<TKey>)\n  fullName: System.Linq.Queryable.OrderBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OrderBy\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 111\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Sorts the elements of a sequence in ascending order by using a specified comparer.</p>\\n\"\n  syntax:\n    content: public static IOrderedQueryable<TSource> OrderBy<TSource, TKey>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, IComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function OrderBy(Of TSource, TKey)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), comparer As IComparer(Of TKey)) As IOrderedQueryable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values to order.</p>\\n\"\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}\n      description: \"\\n<p>A function to extract a key from an element.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by the function that is represented by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.IOrderedQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IOrderedQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are sorted according to a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>comparer</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.OrderBy(Of TSource, TKey)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IComparer(Of TKey))\n  name.vb: OrderBy(Of TSource, TKey)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), IComparer(Of TKey))\n  nameWithType: Queryable.OrderBy<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, IComparer<TKey>)\n  nameWithType.vb: Queryable.OrderBy(Of TSource, TKey)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), IComparer(Of TKey))\n- uid: System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  commentId: M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  id: OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: OrderByDescending<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)\n  fullName: System.Linq.Queryable.OrderByDescending<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OrderByDescending\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 112\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Sorts the elements of a sequence in descending order according to a key.</p>\\n\"\n  syntax:\n    content: public static IOrderedQueryable<TSource> OrderByDescending<TSource, TKey>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function OrderByDescending(Of TSource, TKey)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey))) As IOrderedQueryable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values to order.</p>\\n\"\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}\n      description: \"\\n<p>A function to extract a key from an element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by the function that is represented by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.IOrderedQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IOrderedQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are sorted in descending order according to a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.OrderByDescending(Of TSource, TKey)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))\n  name.vb: OrderByDescending(Of TSource, TKey)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)))\n  nameWithType: Queryable.OrderByDescending<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)\n  nameWithType.vb: Queryable.OrderByDescending(Of TSource, TKey)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)))\n- uid: System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  commentId: M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  id: OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: OrderByDescending<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, IComparer<TKey>)\n  fullName: System.Linq.Queryable.OrderByDescending<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OrderByDescending\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 113\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Sorts the elements of a sequence in descending order by using a specified comparer.</p>\\n\"\n  syntax:\n    content: public static IOrderedQueryable<TSource> OrderByDescending<TSource, TKey>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, IComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function OrderByDescending(Of TSource, TKey)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), comparer As IComparer(Of TKey)) As IOrderedQueryable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values to order.</p>\\n\"\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}\n      description: \"\\n<p>A function to extract a key from an element.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by the function that is represented by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.IOrderedQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IOrderedQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are sorted in descending order according to a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>comparer</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.OrderByDescending(Of TSource, TKey)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IComparer(Of TKey))\n  name.vb: OrderByDescending(Of TSource, TKey)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), IComparer(Of TKey))\n  nameWithType: Queryable.OrderByDescending<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, IComparer<TKey>)\n  nameWithType.vb: Queryable.OrderByDescending(Of TSource, TKey)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), IComparer(Of TKey))\n- uid: System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})\n  commentId: M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})\n  id: Reverse``1(System.Linq.IQueryable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Reverse<TSource>(IQueryable<TSource>)\n  fullName: System.Linq.Queryable.Reverse<TSource>(System.Linq.IQueryable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Reverse\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 114\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Inverts the order of the elements in a sequence.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TSource> Reverse<TSource>(this IQueryable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Reverse(Of TSource)(source As IQueryable(Of TSource)) As IQueryable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values to reverse.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements correspond to those of the input sequence in reverse order.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Reverse(Of TSource)(System.Linq.IQueryable(Of TSource))\n  name.vb: Reverse(Of TSource)(IQueryable(Of TSource))\n  nameWithType: Queryable.Reverse<TSource>(IQueryable<TSource>)\n  nameWithType.vb: Queryable.Reverse(Of TSource)(IQueryable(Of TSource))\n- uid: System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  commentId: M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  id: Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Select<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TResult>>)\n  fullName: System.Linq.Queryable.Select<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Select\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 115\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Projects each element of a sequence into a new form.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TResult> Select<TSource, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TResult>> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Select(Of TSource, TResult)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, TResult))) As IQueryable(Of TResult)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values to project.</p>\\n\"\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}\n      description: \"\\n<p>A projection function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the value returned by the function represented by <em>selector</em>.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TResult}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are the result of invoking a projection function on each element of <em>source</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Select(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))\n  name.vb: Select(Of TSource, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TResult)))\n  nameWithType: Queryable.Select<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TResult>>)\n  nameWithType.vb: Queryable.Select(Of TSource, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TResult)))\n- uid: System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})\n  commentId: M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})\n  id: Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Select<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, TResult>>)\n  fullName: System.Linq.Queryable.Select<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, TResult>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Select\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 116\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Projects each element of a sequence into a new form by incorporating the element's index.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TResult> Select<TSource, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, int, TResult>> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Select(Of TSource, TResult)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Integer, TResult))) As IQueryable(Of TResult)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values to project.</p>\\n\"\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,{TResult}}}\n      description: \"\\n<p>A projection function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the value returned by the function represented by <em>selector</em>.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TResult}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are the result of invoking a projection function on each element of <em>source</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Select(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, TResult)))\n  name.vb: Select(Of TSource, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32, TResult)))\n  nameWithType: Queryable.Select<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, TResult>>)\n  nameWithType.vb: Queryable.Select(Of TSource, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32, TResult)))\n- uid: System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})\n  commentId: M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})\n  id: SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: SelectMany<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, IEnumerable<TResult>>>)\n  fullName: System.Linq.Queryable.SelectMany<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SelectMany\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 117\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Projects each element of a sequence to an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and combines the resulting sequences into one sequence.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TResult> SelectMany<TSource, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, IEnumerable<TResult>>> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SelectMany(Of TSource, TResult)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, IEnumerable(Of TResult)))) As IQueryable(Of TResult)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values to project.</p>\\n\"\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}}\n      description: \"\\n<p>A projection function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the elements of the sequence returned by the function represented by <em>selector</em>.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TResult}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.SelectMany(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult))))\n  name.vb: SelectMany(Of TSource, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, IEnumerable(Of TResult))))\n  nameWithType: Queryable.SelectMany<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, IEnumerable<TResult>>>)\n  nameWithType.vb: Queryable.SelectMany(Of TSource, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, IEnumerable(Of TResult))))\n- uid: System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})\n  commentId: M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})\n  id: SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: SelectMany<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, IEnumerable<TResult>>>)\n  fullName: System.Linq.Queryable.SelectMany<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TResult>>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SelectMany\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 118\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Projects each element of a sequence to an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and combines the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TResult> SelectMany<TSource, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, int, IEnumerable<TResult>>> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SelectMany(Of TSource, TResult)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Integer, IEnumerable(Of TResult)))) As IQueryable(Of TResult)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values to project.</p>\\n\"\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TResult}}}}\n      description: \"\\n<p>A projection function to apply to each element; the second parameter of this function represents the index of the source element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the elements of the sequence returned by the function represented by <em>selector</em>.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TResult}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.SelectMany(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TResult))))\n  name.vb: SelectMany(Of TSource, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32, IEnumerable(Of TResult))))\n  nameWithType: Queryable.SelectMany<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, IEnumerable<TResult>>>)\n  nameWithType.vb: Queryable.SelectMany(Of TSource, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32, IEnumerable(Of TResult))))\n- uid: System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  commentId: M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  id: SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: SelectMany<TSource, TCollection, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, IEnumerable<TCollection>>>, Expressions.Expression<Func<TSource, TCollection, TResult>>)\n  fullName: System.Linq.Queryable.SelectMany<TSource, TCollection, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>>, System.Linq.Expressions.Expression<System.Func<TSource, TCollection, TResult>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SelectMany\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 119\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Projects each element of a sequence to an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and invokes a result selector function on each element therein. The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TResult> SelectMany<TSource, TCollection, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, IEnumerable<TCollection>>> collectionSelector, Expressions.Expression<Func<TSource, TCollection, TResult>> resultSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SelectMany(Of TSource, TCollection, TResult)(source As IQueryable(Of TSource), collectionSelector As Expressions.Expression(Of Func(Of TSource, IEnumerable(Of TCollection))), resultSelector As Expressions.Expression(Of Func(Of TSource, TCollection, TResult))) As IQueryable(Of TResult)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values to project.</p>\\n\"\n    - id: collectionSelector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Collections.Generic.IEnumerable{{TCollection}}}}\n      description: \"\\n<p>A projection function to apply to each element of the input sequence.</p>\\n\"\n    - id: resultSelector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TCollection},{TResult}}}\n      description: \"\\n<p>A projection function to apply to each element of each intermediate sequence.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TCollection\n      description: \"\\n<p>The type of the intermediate elements collected by the function represented by <em>collectionSelector</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the elements of the resulting sequence.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TResult}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are the result of invoking the one-to-many projection function <em>collectionSelector</em> on each element of <em>source</em> and then mapping each of those sequence elements and their corresponding <em>source</em> element to a result element.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>collectionSelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.SelectMany(Of TSource, TCollection, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection))), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TCollection, TResult)))\n  name.vb: SelectMany(Of TSource, TCollection, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, IEnumerable(Of TCollection))), Expressions.Expression(Of Func(Of TSource, TCollection, TResult)))\n  nameWithType: Queryable.SelectMany<TSource, TCollection, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, IEnumerable<TCollection>>>, Expressions.Expression<Func<TSource, TCollection, TResult>>)\n  nameWithType.vb: Queryable.SelectMany(Of TSource, TCollection, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, IEnumerable(Of TCollection))), Expressions.Expression(Of Func(Of TSource, TCollection, TResult)))\n- uid: System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  commentId: M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  id: SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: SelectMany<TSource, TCollection, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, IEnumerable<TCollection>>>, Expressions.Expression<Func<TSource, TCollection, TResult>>)\n  fullName: System.Linq.Queryable.SelectMany<TSource, TCollection, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TCollection>>>, System.Linq.Expressions.Expression<System.Func<TSource, TCollection, TResult>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SelectMany\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 120\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Projects each element of a sequence to an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that incorporates the index of the source element that produced it. A result selector function is invoked on each element of each intermediate sequence, and the resulting values are combined into a single, one-dimensional sequence and returned.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TResult> SelectMany<TSource, TCollection, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, int, IEnumerable<TCollection>>> collectionSelector, Expressions.Expression<Func<TSource, TCollection, TResult>> resultSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SelectMany(Of TSource, TCollection, TResult)(source As IQueryable(Of TSource), collectionSelector As Expressions.Expression(Of Func(Of TSource, Integer, IEnumerable(Of TCollection))), resultSelector As Expressions.Expression(Of Func(Of TSource, TCollection, TResult))) As IQueryable(Of TResult)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values to project.</p>\\n\"\n    - id: collectionSelector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TCollection}}}}\n      description: \"\\n<p>A projection function to apply to each element of the input sequence; the second parameter of this function represents the index of the source element.</p>\\n\"\n    - id: resultSelector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TCollection},{TResult}}}\n      description: \"\\n<p>A projection function to apply to each element of each intermediate sequence.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TCollection\n      description: \"\\n<p>The type of the intermediate elements collected by the function represented by <em>collectionSelector</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the elements of the resulting sequence.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TResult}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are the result of invoking the one-to-many projection function <em>collectionSelector</em> on each element of <em>source</em> and then mapping each of those sequence elements and their corresponding <em>source</em> element to a result element.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>collectionSelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.SelectMany(Of TSource, TCollection, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TCollection))), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TCollection, TResult)))\n  name.vb: SelectMany(Of TSource, TCollection, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32, IEnumerable(Of TCollection))), Expressions.Expression(Of Func(Of TSource, TCollection, TResult)))\n  nameWithType: Queryable.SelectMany<TSource, TCollection, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, IEnumerable<TCollection>>>, Expressions.Expression<Func<TSource, TCollection, TResult>>)\n  nameWithType.vb: Queryable.SelectMany(Of TSource, TCollection, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32, IEnumerable(Of TCollection))), Expressions.Expression(Of Func(Of TSource, TCollection, TResult)))\n- uid: System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  id: SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  fullName: System.Linq.Queryable.SequenceEqual<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SequenceEqual\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 121\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Determines whether two sequences are equal by using the default equality comparer to compare elements.</p>\\n\"\n  syntax:\n    content: public static bool SequenceEqual<TSource>(this IQueryable<TSource> source1, IEnumerable<TSource> source2)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SequenceEqual(Of TSource)(source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource)) As Boolean\n    parameters:\n    - id: source1\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements to compare to those of <em>source2</em>.</p>\\n\"\n    - id: source2\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements to compare to those of the first sequence.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of the input sequences.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source1</em> or <em>source2</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.SequenceEqual(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: SequenceEqual(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource))\n  nameWithType: Queryable.SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  nameWithType.vb: Queryable.SequenceEqual(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource))\n- uid: System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: System.Linq.Queryable.SequenceEqual<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SequenceEqual\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 122\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Determines whether two sequences are equal by using a specified <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare elements.</p>\\n\"\n  syntax:\n    content: public static bool SequenceEqual<TSource>(this IQueryable<TSource> source1, IEnumerable<TSource> source2, IEqualityComparer<TSource> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SequenceEqual(Of TSource)(source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As Boolean\n    parameters:\n    - id: source1\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements to compare to those of <em>source2</em>.</p>\\n\"\n    - id: source2\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements to compare to those of the first sequence.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use to compare elements.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of the input sequences.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source1</em> or <em>source2</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.SequenceEqual(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))\n  name.vb: SequenceEqual(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))\n  nameWithType: Queryable.SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType.vb: Queryable.SequenceEqual(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))\n- uid: System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})\n  commentId: M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})\n  id: Single``1(System.Linq.IQueryable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Single<TSource>(IQueryable<TSource>)\n  fullName: System.Linq.Queryable.Single<TSource>(System.Linq.IQueryable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Single\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 123\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</p>\\n\"\n  syntax:\n    content: public static TSource Single<TSource>(this IQueryable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Single(Of TSource)(source As IQueryable(Of TSource)) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return the single element of.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The single element of the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> has more than one element.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Single(Of TSource)(System.Linq.IQueryable(Of TSource))\n  name.vb: Single(Of TSource)(IQueryable(Of TSource))\n  nameWithType: Queryable.Single<TSource>(IQueryable<TSource>)\n  nameWithType.vb: Queryable.Single(Of TSource)(IQueryable(Of TSource))\n- uid: System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  commentId: M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  id: Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Single<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)\n  fullName: System.Linq.Queryable.Single<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Single\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 124\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</p>\\n\"\n  syntax:\n    content: public static TSource Single<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Single(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return a single element from.</p>\\n\"\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}\n      description: \"\\n<p>A function to test an element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The single element of the input sequence that satisfies the condition in <em>predicate</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>No element satisfies the condition in <em>predicate</em>.</p>\\n<p>-or-</p>\\n<p>More than one element satisfies the condition in <em>predicate</em>.</p>\\n<p>-or-</p>\\n<p>The source sequence is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Single(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))\n  name.vb: Single(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))\n  nameWithType: Queryable.Single<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)\n  nameWithType.vb: Queryable.Single(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))\n- uid: System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})\n  commentId: M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})\n  id: SingleOrDefault``1(System.Linq.IQueryable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: SingleOrDefault<TSource>(IQueryable<TSource>)\n  fullName: System.Linq.Queryable.SingleOrDefault<TSource>(System.Linq.IQueryable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SingleOrDefault\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 125\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</p>\\n\"\n  syntax:\n    content: public static TSource SingleOrDefault<TSource>(this IQueryable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SingleOrDefault(Of TSource)(source As IQueryable(Of TSource)) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return the single element of.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The single element of the input sequence, or default(<em>TSource</em>) if the sequence contains no elements.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> has more than one element.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.SingleOrDefault(Of TSource)(System.Linq.IQueryable(Of TSource))\n  name.vb: SingleOrDefault(Of TSource)(IQueryable(Of TSource))\n  nameWithType: Queryable.SingleOrDefault<TSource>(IQueryable<TSource>)\n  nameWithType.vb: Queryable.SingleOrDefault(Of TSource)(IQueryable(Of TSource))\n- uid: System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  commentId: M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  id: SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: SingleOrDefault<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)\n  fullName: System.Linq.Queryable.SingleOrDefault<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SingleOrDefault\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 126\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</p>\\n\"\n  syntax:\n    content: public static TSource SingleOrDefault<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SingleOrDefault(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return a single element from.</p>\\n\"\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}\n      description: \"\\n<p>A function to test an element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The single element of the input sequence that satisfies the condition in <em>predicate</em>, or default(<em>TSource</em>) if no such element is found.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>More than one element satisfies the condition in <em>predicate</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.SingleOrDefault(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))\n  name.vb: SingleOrDefault(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))\n  nameWithType: Queryable.SingleOrDefault<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)\n  nameWithType.vb: Queryable.SingleOrDefault(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))\n- uid: System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)\n  commentId: M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)\n  id: Skip``1(System.Linq.IQueryable{``0},System.Int32)\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Skip<TSource>(IQueryable<TSource>, Int32)\n  fullName: System.Linq.Queryable.Skip<TSource>(System.Linq.IQueryable<TSource>, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Skip\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 127\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TSource> Skip<TSource>(this IQueryable<TSource> source, int count)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Skip(Of TSource)(source As IQueryable(Of TSource), count As Integer) As IQueryable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return elements from.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements to skip before returning the remaining elements.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains elements that occur after the specified index in the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Skip(Of TSource)(System.Linq.IQueryable(Of TSource), System.Int32)\n  name.vb: Skip(Of TSource)(IQueryable(Of TSource), Int32)\n  nameWithType: Queryable.Skip<TSource>(IQueryable<TSource>, Int32)\n  nameWithType.vb: Queryable.Skip(Of TSource)(IQueryable(Of TSource), Int32)\n- uid: System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  commentId: M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  id: SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: SkipWhile<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)\n  fullName: System.Linq.Queryable.SkipWhile<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SkipWhile\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 128\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TSource> SkipWhile<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SkipWhile(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As IQueryable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return elements from.</p>\\n\"\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains elements from <em>source</em> starting at the first element in the linear series that does not pass the test specified by <em>predicate</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.SkipWhile(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))\n  name.vb: SkipWhile(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))\n  nameWithType: Queryable.SkipWhile<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)\n  nameWithType.vb: Queryable.SkipWhile(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))\n- uid: System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  commentId: M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  id: SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: SkipWhile<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, Boolean>>)\n  fullName: System.Linq.Queryable.SkipWhile<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Boolean>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SkipWhile\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 129\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TSource> SkipWhile<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, int, bool>> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SkipWhile(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Integer, Boolean))) As IQueryable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return elements from.</p>\\n\"\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,System.Boolean}}\n      description: \"\\n<p>A function to test each element for a condition; the second parameter of this function represents the index of the source element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains elements from <em>source</em> starting at the first element in the linear series that does not pass the test specified by <em>predicate</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.SkipWhile(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, System.Boolean)))\n  name.vb: SkipWhile(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32, Boolean)))\n  nameWithType: Queryable.SkipWhile<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, Boolean>>)\n  nameWithType.vb: Queryable.SkipWhile(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32, Boolean)))\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})\n  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})\n  id: Sum(System.Linq.IQueryable{System.Decimal})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Sum(IQueryable<Decimal>)\n  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Decimal>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 130\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of a sequence of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static decimal Sum(this IQueryable<decimal> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As IQueryable(Of Decimal)) As Decimal\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Decimal}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The sum of the values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Decimal))\n  name.vb: Sum(IQueryable(Of Decimal))\n  nameWithType: Queryable.Sum(IQueryable<Decimal>)\n  nameWithType.vb: Queryable.Sum(IQueryable(Of Decimal))\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})\n  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})\n  id: Sum(System.Linq.IQueryable{System.Double})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Sum(IQueryable<Double>)\n  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Double>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 131\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of a sequence of <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static double Sum(this IQueryable<double> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As IQueryable(Of Double)) As Double\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Double}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The sum of the values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Double))\n  name.vb: Sum(IQueryable(Of Double))\n  nameWithType: Queryable.Sum(IQueryable<Double>)\n  nameWithType.vb: Queryable.Sum(IQueryable(Of Double))\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})\n  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})\n  id: Sum(System.Linq.IQueryable{System.Int32})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Sum(IQueryable<Int32>)\n  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Int32>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 132\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of a sequence of <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static int Sum(this IQueryable<int> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As IQueryable(Of Integer)) As Integer\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Int32}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The sum of the values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Int32))\n  name.vb: Sum(IQueryable(Of Int32))\n  nameWithType: Queryable.Sum(IQueryable<Int32>)\n  nameWithType.vb: Queryable.Sum(IQueryable(Of Int32))\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})\n  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})\n  id: Sum(System.Linq.IQueryable{System.Int64})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Sum(IQueryable<Int64>)\n  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 133\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of a sequence of <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static long Sum(this IQueryable<long> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As IQueryable(Of Long)) As Long\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Int64}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The sum of the values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Int64))\n  name.vb: Sum(IQueryable(Of Int64))\n  nameWithType: Queryable.Sum(IQueryable<Int64>)\n  nameWithType.vb: Queryable.Sum(IQueryable(Of Int64))\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})\n  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})\n  id: Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Sum(IQueryable<Nullable<Decimal>>)\n  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Nullable<System.Decimal>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 134\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of a sequence of nullable <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static decimal ? Sum(this IQueryable<decimal ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As IQueryable(Of Decimal?)) As Decimal?\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Nullable{System.Decimal}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Decimal}\n      description: \"\\n<p>The sum of the values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Nullable(Of System.Decimal)))\n  name.vb: Sum(IQueryable(Of Nullable(Of Decimal)))\n  nameWithType: Queryable.Sum(IQueryable<Nullable<Decimal>>)\n  nameWithType.vb: Queryable.Sum(IQueryable(Of Nullable(Of Decimal)))\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})\n  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})\n  id: Sum(System.Linq.IQueryable{System.Nullable{System.Double}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Sum(IQueryable<Nullable<Double>>)\n  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Nullable<System.Double>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 135\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of a sequence of nullable <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static double ? Sum(this IQueryable<double ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As IQueryable(Of Double?)) As Double?\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Nullable{System.Double}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The sum of the values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Nullable(Of System.Double)))\n  name.vb: Sum(IQueryable(Of Nullable(Of Double)))\n  nameWithType: Queryable.Sum(IQueryable<Nullable<Double>>)\n  nameWithType.vb: Queryable.Sum(IQueryable(Of Nullable(Of Double)))\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})\n  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})\n  id: Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Sum(IQueryable<Nullable<Int32>>)\n  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Nullable<System.Int32>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 136\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of a sequence of nullable <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static int ? Sum(this IQueryable<int ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As IQueryable(Of Integer?)) As Integer?\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Nullable{System.Int32}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Int32}\n      description: \"\\n<p>The sum of the values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Nullable(Of System.Int32)))\n  name.vb: Sum(IQueryable(Of Nullable(Of Int32)))\n  nameWithType: Queryable.Sum(IQueryable<Nullable<Int32>>)\n  nameWithType.vb: Queryable.Sum(IQueryable(Of Nullable(Of Int32)))\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})\n  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})\n  id: Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Sum(IQueryable<Nullable<Int64>>)\n  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Nullable<System.Int64>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 137\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of a sequence of nullable <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static long ? Sum(this IQueryable<long ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As IQueryable(Of Long?)) As Long?\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Nullable{System.Int64}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Int64}\n      description: \"\\n<p>The sum of the values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Nullable(Of System.Int64)))\n  name.vb: Sum(IQueryable(Of Nullable(Of Int64)))\n  nameWithType: Queryable.Sum(IQueryable<Nullable<Int64>>)\n  nameWithType.vb: Queryable.Sum(IQueryable(Of Nullable(Of Int64)))\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})\n  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})\n  id: Sum(System.Linq.IQueryable{System.Nullable{System.Single}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Sum(IQueryable<Nullable<Single>>)\n  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Nullable<System.Single>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 138\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of a sequence of nullable <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static float ? Sum(this IQueryable<float ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As IQueryable(Of Single?)) As Single?\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Nullable{System.Single}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Single}\n      description: \"\\n<p>The sum of the values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Nullable(Of System.Single)))\n  name.vb: Sum(IQueryable(Of Nullable(Of Single)))\n  nameWithType: Queryable.Sum(IQueryable<Nullable<Single>>)\n  nameWithType.vb: Queryable.Sum(IQueryable(Of Nullable(Of Single)))\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})\n  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})\n  id: Sum(System.Linq.IQueryable{System.Single})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Sum(IQueryable<Single>)\n  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Single>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 139\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of a sequence of <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static float Sum(this IQueryable<float> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As IQueryable(Of Single)) As Single\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Single}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The sum of the values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Single))\n  name.vb: Sum(IQueryable(Of Single))\n  nameWithType: Queryable.Sum(IQueryable<Single>)\n  nameWithType.vb: Queryable.Sum(IQueryable(Of Single))\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})\n  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})\n  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Decimal>>)\n  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 140\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of the sequence of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static decimal Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, decimal>> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Decimal))) As Decimal\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values of type <em>TSource</em>.</p>\\n\"\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Decimal}}\n      description: \"\\n<p>A projection function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The sum of the projected values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Decimal)))\n  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Decimal)))\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Decimal>>)\n  nameWithType.vb: Queryable.Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Decimal)))\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\n  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\n  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Double>>)\n  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Double>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 141\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of the sequence of <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static double Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, double>> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Double))) As Double\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values of type <em>TSource</em>.</p>\\n\"\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Double}}\n      description: \"\\n<p>A projection function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The sum of the projected values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Double)))\n  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Double)))\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Double>>)\n  nameWithType.vb: Queryable.Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Double)))\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\n  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\n  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32>>)\n  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 142\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of the sequence of <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static int Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, int>> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Integer))) As Integer\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values of type <em>TSource</em>.</p>\\n\"\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32}}\n      description: \"\\n<p>A projection function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The sum of the projected values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32)))\n  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32)))\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32>>)\n  nameWithType.vb: Queryable.Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32)))\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})\n  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})\n  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int64>>)\n  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 143\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of the sequence of <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static long Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, long>> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Long))) As Long\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values of type <em>TSource</em>.</p>\\n\"\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int64}}\n      description: \"\\n<p>A projection function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The sum of the projected values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int64)))\n  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int64)))\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int64>>)\n  nameWithType.vb: Queryable.Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int64)))\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})\n  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})\n  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Decimal>>>)\n  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 144\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of the sequence of nullable <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static decimal ? Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, decimal ? >> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Decimal?))) As Decimal?\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values of type <em>TSource</em>.</p>\\n\"\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Decimal}}}\n      description: \"\\n<p>A projection function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Decimal}\n      description: \"\\n<p>The sum of the projected values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal))))\n  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Decimal))))\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Decimal>>>)\n  nameWithType.vb: Queryable.Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Decimal))))\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})\n  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})\n  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Double>>>)\n  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 145\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of the sequence of nullable <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static double ? Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, double ? >> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Double?))) As Double?\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values of type <em>TSource</em>.</p>\\n\"\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Double}}}\n      description: \"\\n<p>A projection function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The sum of the projected values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double))))\n  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Double))))\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Double>>>)\n  nameWithType.vb: Queryable.Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Double))))\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})\n  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})\n  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Int32>>>)\n  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 146\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of the sequence of nullable <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static int ? Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, int ? >> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Integer?))) As Integer?\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values of type <em>TSource</em>.</p>\\n\"\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int32}}}\n      description: \"\\n<p>A projection function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Int32}\n      description: \"\\n<p>The sum of the projected values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32))))\n  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Int32))))\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Int32>>>)\n  nameWithType.vb: Queryable.Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Int32))))\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})\n  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})\n  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Int64>>>)\n  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 147\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of the sequence of nullable <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static long ? Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, long ? >> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Long?))) As Long?\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values of type <em>TSource</em>.</p>\\n\"\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int64}}}\n      description: \"\\n<p>A projection function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Int64}\n      description: \"\\n<p>The sum of the projected values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64))))\n  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Int64))))\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Int64>>>)\n  nameWithType.vb: Queryable.Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Int64))))\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})\n  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})\n  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Single>>>)\n  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 148\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of the sequence of nullable <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static float ? Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, float ? >> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Single?))) As Single?\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values of type <em>TSource</em>.</p>\\n\"\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Single}}}\n      description: \"\\n<p>A projection function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Single}\n      description: \"\\n<p>The sum of the projected values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single))))\n  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Single))))\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Single>>>)\n  nameWithType.vb: Queryable.Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Single))))\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})\n  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})\n  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Single>>)\n  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Single>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 149\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of the sequence of <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static float Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, float>> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Single))) As Single\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence of values of type <em>TSource</em>.</p>\\n\"\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Single}}\n      description: \"\\n<p>A projection function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The sum of the projected values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Single)))\n  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Single)))\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Single>>)\n  nameWithType.vb: Queryable.Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Single)))\n- uid: System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)\n  commentId: M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)\n  id: Take``1(System.Linq.IQueryable{``0},System.Int32)\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Take<TSource>(IQueryable<TSource>, Int32)\n  fullName: System.Linq.Queryable.Take<TSource>(System.Linq.IQueryable<TSource>, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Take\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 150\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Returns a specified number of contiguous elements from the start of a sequence.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TSource> Take<TSource>(this IQueryable<TSource> source, int count)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Take(Of TSource)(source As IQueryable(Of TSource), count As Integer) As IQueryable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>The sequence to return elements from.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements to return.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the specified number of elements from the start of <em>source</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Take(Of TSource)(System.Linq.IQueryable(Of TSource), System.Int32)\n  name.vb: Take(Of TSource)(IQueryable(Of TSource), Int32)\n  nameWithType: Queryable.Take<TSource>(IQueryable<TSource>, Int32)\n  nameWithType.vb: Queryable.Take(Of TSource)(IQueryable(Of TSource), Int32)\n- uid: System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  commentId: M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  id: TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: TakeWhile<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)\n  fullName: System.Linq.Queryable.TakeWhile<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TakeWhile\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 151\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Returns elements from a sequence as long as a specified condition is true.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TSource> TakeWhile<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function TakeWhile(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As IQueryable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>The sequence to return elements from.</p>\\n\"\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains elements from the input sequence occurring before the element at which the test specified by <em>predicate</em> no longer passes.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.TakeWhile(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))\n  name.vb: TakeWhile(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))\n  nameWithType: Queryable.TakeWhile<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)\n  nameWithType.vb: Queryable.TakeWhile(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))\n- uid: System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  commentId: M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  id: TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: TakeWhile<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, Boolean>>)\n  fullName: System.Linq.Queryable.TakeWhile<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Boolean>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TakeWhile\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 152\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TSource> TakeWhile<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, int, bool>> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function TakeWhile(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Integer, Boolean))) As IQueryable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>The sequence to return elements from.</p>\\n\"\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,System.Boolean}}\n      description: \"\\n<p>A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains elements from the input sequence occurring before the element at which the test specified by <em>predicate</em> no longer passes.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.TakeWhile(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, System.Boolean)))\n  name.vb: TakeWhile(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32, Boolean)))\n  nameWithType: Queryable.TakeWhile<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, Boolean>>)\n  nameWithType.vb: Queryable.TakeWhile(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32, Boolean)))\n- uid: System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  commentId: M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  id: ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: ThenBy<TSource, TKey>(IOrderedQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)\n  fullName: System.Linq.Queryable.ThenBy<TSource, TKey>(System.Linq.IOrderedQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ThenBy\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 153\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</p>\\n\"\n  syntax:\n    content: public static IOrderedQueryable<TSource> ThenBy<TSource, TKey>(this IOrderedQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ThenBy(Of TSource, TKey)(source As IOrderedQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey))) As IOrderedQueryable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.IOrderedQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IOrderedQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains elements to sort.</p>\\n\"\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}\n      description: \"\\n<p>A function to extract a key from each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by the function represented by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.IOrderedQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IOrderedQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are sorted according to a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.ThenBy(Of TSource, TKey)(System.Linq.IOrderedQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))\n  name.vb: ThenBy(Of TSource, TKey)(IOrderedQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)))\n  nameWithType: Queryable.ThenBy<TSource, TKey>(IOrderedQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)\n  nameWithType.vb: Queryable.ThenBy(Of TSource, TKey)(IOrderedQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)))\n- uid: System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  commentId: M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  id: ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: ThenBy<TSource, TKey>(IOrderedQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, IComparer<TKey>)\n  fullName: System.Linq.Queryable.ThenBy<TSource, TKey>(System.Linq.IOrderedQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ThenBy\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 154\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</p>\\n\"\n  syntax:\n    content: public static IOrderedQueryable<TSource> ThenBy<TSource, TKey>(this IOrderedQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, IComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ThenBy(Of TSource, TKey)(source As IOrderedQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), comparer As IComparer(Of TKey)) As IOrderedQueryable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.IOrderedQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IOrderedQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains elements to sort.</p>\\n\"\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}\n      description: \"\\n<p>A function to extract a key from each element.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by the function represented by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.IOrderedQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IOrderedQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are sorted according to a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>comparer</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.ThenBy(Of TSource, TKey)(System.Linq.IOrderedQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IComparer(Of TKey))\n  name.vb: ThenBy(Of TSource, TKey)(IOrderedQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), IComparer(Of TKey))\n  nameWithType: Queryable.ThenBy<TSource, TKey>(IOrderedQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, IComparer<TKey>)\n  nameWithType.vb: Queryable.ThenBy(Of TSource, TKey)(IOrderedQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), IComparer(Of TKey))\n- uid: System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  commentId: M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  id: ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: ThenByDescending<TSource, TKey>(IOrderedQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)\n  fullName: System.Linq.Queryable.ThenByDescending<TSource, TKey>(System.Linq.IOrderedQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ThenByDescending\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 155\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</p>\\n\"\n  syntax:\n    content: public static IOrderedQueryable<TSource> ThenByDescending<TSource, TKey>(this IOrderedQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ThenByDescending(Of TSource, TKey)(source As IOrderedQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey))) As IOrderedQueryable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.IOrderedQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IOrderedQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains elements to sort.</p>\\n\"\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}\n      description: \"\\n<p>A function to extract a key from each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by the function represented by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.IOrderedQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IOrderedQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are sorted in descending order according to a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.ThenByDescending(Of TSource, TKey)(System.Linq.IOrderedQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))\n  name.vb: ThenByDescending(Of TSource, TKey)(IOrderedQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)))\n  nameWithType: Queryable.ThenByDescending<TSource, TKey>(IOrderedQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)\n  nameWithType.vb: Queryable.ThenByDescending(Of TSource, TKey)(IOrderedQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)))\n- uid: System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  commentId: M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  id: ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: ThenByDescending<TSource, TKey>(IOrderedQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, IComparer<TKey>)\n  fullName: System.Linq.Queryable.ThenByDescending<TSource, TKey>(System.Linq.IOrderedQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ThenByDescending\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 156\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</p>\\n\"\n  syntax:\n    content: public static IOrderedQueryable<TSource> ThenByDescending<TSource, TKey>(this IOrderedQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, IComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ThenByDescending(Of TSource, TKey)(source As IOrderedQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), comparer As IComparer(Of TKey)) As IOrderedQueryable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.IOrderedQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IOrderedQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains elements to sort.</p>\\n\"\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}\n      description: \"\\n<p>A function to extract a key from each element.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key that is returned by the <em>keySelector</em> function.</p>\\n\"\n    return:\n      type: System.Linq.IOrderedQueryable{{TSource}}\n      description: \"\\n<p>A collection whose elements are sorted in descending order according to a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>comparer</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.ThenByDescending(Of TSource, TKey)(System.Linq.IOrderedQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IComparer(Of TKey))\n  name.vb: ThenByDescending(Of TSource, TKey)(IOrderedQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), IComparer(Of TKey))\n  nameWithType: Queryable.ThenByDescending<TSource, TKey>(IOrderedQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, IComparer<TKey>)\n  nameWithType.vb: Queryable.ThenByDescending(Of TSource, TKey)(IOrderedQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), IComparer(Of TKey))\n- uid: System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  id: Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  fullName: System.Linq.Queryable.Union<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Union\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 157\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Produces the set union of two sequences by using the default equality comparer.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TSource> Union<TSource>(this IQueryable<TSource> source1, IEnumerable<TSource> source2)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Union(Of TSource)(source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource)) As IQueryable(Of TSource)\n    parameters:\n    - id: source1\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence whose distinct elements form the first set for the union operation.</p>\\n\"\n    - id: source2\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence whose distinct elements form the second set for the union operation.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of the input sequences.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the elements from both input sequences, excluding duplicates.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source1</em> or <em>source2</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Union(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: Union(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource))\n  nameWithType: Queryable.Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  nameWithType.vb: Queryable.Union(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource))\n- uid: System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: System.Linq.Queryable.Union<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Union\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 158\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Produces the set union of two sequences by using a specified <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TSource> Union<TSource>(this IQueryable<TSource> source1, IEnumerable<TSource> source2, IEqualityComparer<TSource> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Union(Of TSource)(source1 As IQueryable(Of TSource), source2 As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IQueryable(Of TSource)\n    parameters:\n    - id: source1\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>A sequence whose distinct elements form the first set for the union operation.</p>\\n\"\n    - id: source2\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence whose distinct elements form the second set for the union operation.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare values.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of the input sequences.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the elements from both input sequences, excluding duplicates.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source1</em> or <em>source2</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Union(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))\n  name.vb: Union(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))\n  nameWithType: Queryable.Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType.vb: Queryable.Union(Of TSource)(IQueryable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))\n- uid: System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  commentId: M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  id: Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Where<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)\n  fullName: System.Linq.Queryable.Where<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Where\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 159\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Filters a sequence of values based on a predicate.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TSource> Where<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Where(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As IQueryable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to filter.</p>\\n\"\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains elements from the input sequence that satisfy the condition specified by <em>predicate</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Where(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))\n  name.vb: Where(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))\n  nameWithType: Queryable.Where<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)\n  nameWithType.vb: Queryable.Where(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))\n- uid: System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  commentId: M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  id: Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Where<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, Boolean>>)\n  fullName: System.Linq.Queryable.Where<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Boolean>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Where\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 160\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TSource> Where<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, int, bool>> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Where(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Integer, Boolean))) As IQueryable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to filter.</p>\\n\"\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,System.Boolean}}\n      description: \"\\n<p>A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains elements from the input sequence that satisfy the condition specified by <em>predicate</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Where(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, System.Boolean)))\n  name.vb: Where(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32, Boolean)))\n  nameWithType: Queryable.Where<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, Boolean>>)\n  nameWithType.vb: Queryable.Where(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32, Boolean)))\n- uid: System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  commentId: M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  id: Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  isExtensionMethod: true\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  - vb\n  name: Zip<TFirst, TSecond, TResult>(IQueryable<TFirst>, IEnumerable<TSecond>, Expressions.Expression<Func<TFirst, TSecond, TResult>>)\n  fullName: System.Linq.Queryable.Zip<TFirst, TSecond, TResult>(System.Linq.IQueryable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Linq.Expressions.Expression<System.Func<TFirst, TSecond, TResult>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Zip\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 161\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Merges two sequences by using the specified predicate function.</p>\\n\"\n  syntax:\n    content: public static IQueryable<TResult> Zip<TFirst, TSecond, TResult>(this IQueryable<TFirst> source1, IEnumerable<TSecond> source2, Expressions.Expression<Func<TFirst, TSecond, TResult>> resultSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Zip(Of TFirst, TSecond, TResult)(source1 As IQueryable(Of TFirst), source2 As IEnumerable(Of TSecond), resultSelector As Expressions.Expression(Of Func(Of TFirst, TSecond, TResult))) As IQueryable(Of TResult)\n    parameters:\n    - id: source1\n      type: System.Linq.IQueryable{{TFirst}}\n      description: \"\\n<p>The first sequence to merge.</p>\\n\"\n    - id: source2\n      type: System.Collections.Generic.IEnumerable{{TSecond}}\n      description: \"\\n<p>The second sequence to merge.</p>\\n\"\n    - id: resultSelector\n      type: System.Linq.Expressions.Expression{System.Func{{TFirst},{TSecond},{TResult}}}\n      description: \"\\n<p>A function that specifies how to merge the elements from the two sequences.</p>\\n\"\n    typeParameters:\n    - id: TFirst\n      description: \"\\n<p>The type of the elements of the first input sequence.</p>\\n\"\n    - id: TSecond\n      description: \"\\n<p>The type of the elements of the second input sequence.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the elements of the result sequence.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TResult}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains merged elements of two input sequences.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source1</em>or <em>source2 </em>is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Queryable.Zip(Of TFirst, TSecond, TResult)(System.Linq.IQueryable(Of TFirst), System.Collections.Generic.IEnumerable(Of TSecond), System.Linq.Expressions.Expression(Of System.Func(Of TFirst, TSecond, TResult)))\n  name.vb: Zip(Of TFirst, TSecond, TResult)(IQueryable(Of TFirst), IEnumerable(Of TSecond), Expressions.Expression(Of Func(Of TFirst, TSecond, TResult)))\n  nameWithType: Queryable.Zip<TFirst, TSecond, TResult>(IQueryable<TFirst>, IEnumerable<TSecond>, Expressions.Expression<Func<TFirst, TSecond, TResult>>)\n  nameWithType.vb: Queryable.Zip(Of TFirst, TSecond, TResult)(IQueryable(Of TFirst), IEnumerable(Of TSecond), Expressions.Expression(Of Func(Of TFirst, TSecond, TResult)))\nreferences:\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  commentId: N:System.Linq\n  nameWithType: System.Linq\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Linq.IQueryable{{TSource}}\n  definition: System.Linq.IQueryable`1\n  name: IQueryable<TSource>\n  fullName: System.Linq.IQueryable<TSource>\n  fullname.vb: System.Linq.IQueryable(Of TSource)\n  name.vb: IQueryable(Of TSource)\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.IQueryable{``0}'\n  nameWithType: IQueryable<TSource>\n  nameWithType.vb: IQueryable(Of TSource)\n- uid: System.Linq.Expressions.Expression{System.Func{{TSource},{TSource},{TSource}}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TSource, TSource, TSource>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource, TSource, TSource>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, TSource, TSource))\n  name.vb: Expressions.Expression(Of Func(Of TSource, TSource, TSource))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``0,``0,``0}}'\n  nameWithType: Expressions.Expression<Func<TSource, TSource, TSource>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TSource, TSource, TSource))\n- uid: '{TSource}'\n  definition: TSource\n  name: TSource\n  fullName: TSource\n  commentId: '!:TSource'\n  nameWithType: TSource\n- uid: System.Linq.IQueryable`1\n  isExternal: false\n  name: IQueryable<T>\n  fullName: System.Linq.IQueryable<T>\n  fullname.vb: System.Linq.IQueryable(Of T)\n  name.vb: IQueryable(Of T)\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.IQueryable`1\n  nameWithType: IQueryable<T>\n  nameWithType.vb: IQueryable(Of T)\n- uid: System.Linq.Expressions.Expression`1\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<TDelegate>\n  fullName: System.Linq.Expressions.Expression<TDelegate>\n  fullname.vb: System.Linq.Expressions.Expression(Of TDelegate)\n  name.vb: Expression(Of TDelegate)\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    fullName: <\n  - name: TDelegate\n    fullName: TDelegate\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TDelegate\n    fullName: TDelegate\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.Expressions.Expression`1\n  nameWithType: Expression<TDelegate>\n  nameWithType.vb: Expression(Of TDelegate)\n- uid: TSource\n  isExternal: false\n  name: TSource\n  fullName: TSource\n  nameWithType: TSource\n- uid: System.Linq.Expressions\n  isExternal: false\n  name: System.Linq.Expressions\n  fullName: System.Linq.Expressions\n  commentId: N:System.Linq.Expressions\n  nameWithType: System.Linq.Expressions\n- uid: '{TAccumulate}'\n  definition: TAccumulate\n  name: TAccumulate\n  fullName: TAccumulate\n  commentId: '!:TAccumulate'\n  nameWithType: TAccumulate\n- uid: System.Linq.Expressions.Expression{System.Func{{TAccumulate},{TSource},{TAccumulate}}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TAccumulate, TSource, TAccumulate>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TAccumulate, TSource, TAccumulate>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TAccumulate, TSource, TAccumulate))\n  name.vb: Expressions.Expression(Of Func(Of TAccumulate, TSource, TAccumulate))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TAccumulate\n    fullName: TAccumulate\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TAccumulate\n    fullName: TAccumulate\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TAccumulate\n    fullName: TAccumulate\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TAccumulate\n    fullName: TAccumulate\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``1,``0,``1}}'\n  nameWithType: Expressions.Expression<Func<TAccumulate, TSource, TAccumulate>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TAccumulate, TSource, TAccumulate))\n- uid: TAccumulate\n  isExternal: false\n  name: TAccumulate\n  fullName: TAccumulate\n  nameWithType: TAccumulate\n- uid: System.Linq.Expressions.Expression{System.Func{{TAccumulate},{TResult}}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TAccumulate, TResult>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TAccumulate, TResult>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TAccumulate, TResult))\n  name.vb: Expressions.Expression(Of Func(Of TAccumulate, TResult))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TAccumulate\n    fullName: TAccumulate\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TAccumulate\n    fullName: TAccumulate\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``1,``2}}'\n  nameWithType: Expressions.Expression<Func<TAccumulate, TResult>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TAccumulate, TResult))\n- uid: '{TResult}'\n  definition: TResult\n  name: TResult\n  fullName: TResult\n  commentId: '!:TResult'\n  nameWithType: TResult\n- uid: TResult\n  isExternal: false\n  name: TResult\n  fullName: TResult\n  nameWithType: TResult\n- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TSource, Boolean>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean))\n  name.vb: Expressions.Expression(Of Func(Of TSource, Boolean))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}'\n  nameWithType: Expressions.Expression<Func<TSource, Boolean>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TSource, Boolean))\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  commentId: T:System.Collections.IEnumerable\n  nameWithType: IEnumerable\n- uid: System.Linq.IQueryable\n  parent: System.Linq\n  isExternal: false\n  name: IQueryable\n  fullName: System.Linq.IQueryable\n  commentId: T:System.Linq.IQueryable\n  nameWithType: IQueryable\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  commentId: N:System.Collections\n  nameWithType: System.Collections\n- uid: System.Collections.Generic.IEnumerable{{TElement}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<TElement>\n  fullName: System.Collections.Generic.IEnumerable<TElement>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of TElement)\n  name.vb: IEnumerable(Of TElement)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TElement\n    fullName: TElement\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TElement\n    fullName: TElement\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{``0}\n  nameWithType: IEnumerable<TElement>\n  nameWithType.vb: IEnumerable(Of TElement)\n- uid: System.Linq.IQueryable{{TElement}}\n  parent: System.Linq\n  definition: System.Linq.IQueryable`1\n  name: IQueryable<TElement>\n  fullName: System.Linq.IQueryable<TElement>\n  fullname.vb: System.Linq.IQueryable(Of TElement)\n  name.vb: IQueryable(Of TElement)\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n  - name: <\n    fullName: <\n  - name: TElement\n    fullName: TElement\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TElement\n    fullName: TElement\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.IQueryable{``0}\n  nameWithType: IQueryable<TElement>\n  nameWithType.vb: IQueryable(Of TElement)\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable`1\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n  nameWithType: System.Collections.Generic\n- uid: System.Linq.IQueryable{System.Decimal}\n  definition: System.Linq.IQueryable`1\n  name: IQueryable<Decimal>\n  fullName: System.Linq.IQueryable<System.Decimal>\n  fullname.vb: System.Linq.IQueryable(Of System.Decimal)\n  name.vb: IQueryable(Of Decimal)\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.IQueryable{System.Decimal}'\n  nameWithType: IQueryable<Decimal>\n  nameWithType.vb: IQueryable(Of Decimal)\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  fullName: System.Decimal\n  commentId: T:System.Decimal\n  nameWithType: Decimal\n- uid: System.Linq.IQueryable{System.Double}\n  definition: System.Linq.IQueryable`1\n  name: IQueryable<Double>\n  fullName: System.Linq.IQueryable<System.Double>\n  fullname.vb: System.Linq.IQueryable(Of System.Double)\n  name.vb: IQueryable(Of Double)\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.IQueryable{System.Double}'\n  nameWithType: IQueryable<Double>\n  nameWithType.vb: IQueryable(Of Double)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  commentId: T:System.Double\n  nameWithType: Double\n- uid: System.Linq.IQueryable{System.Int32}\n  definition: System.Linq.IQueryable`1\n  name: IQueryable<Int32>\n  fullName: System.Linq.IQueryable<System.Int32>\n  fullname.vb: System.Linq.IQueryable(Of System.Int32)\n  name.vb: IQueryable(Of Int32)\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.IQueryable{System.Int32}'\n  nameWithType: IQueryable<Int32>\n  nameWithType.vb: IQueryable(Of Int32)\n- uid: System.Linq.IQueryable{System.Int64}\n  definition: System.Linq.IQueryable`1\n  name: IQueryable<Int64>\n  fullName: System.Linq.IQueryable<System.Int64>\n  fullname.vb: System.Linq.IQueryable(Of System.Int64)\n  name.vb: IQueryable(Of Int64)\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.IQueryable{System.Int64}'\n  nameWithType: IQueryable<Int64>\n  nameWithType.vb: IQueryable(Of Int64)\n- uid: System.Linq.IQueryable{System.Nullable{System.Decimal}}\n  definition: System.Linq.IQueryable`1\n  name: IQueryable<Nullable<Decimal>>\n  fullName: System.Linq.IQueryable<System.Nullable<System.Decimal>>\n  fullname.vb: System.Linq.IQueryable(Of System.Nullable(Of System.Decimal))\n  name.vb: IQueryable(Of Nullable(Of Decimal))\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.IQueryable{System.Nullable{System.Decimal}}'\n  nameWithType: IQueryable<Nullable<Decimal>>\n  nameWithType.vb: IQueryable(Of Nullable(Of Decimal))\n- uid: System.Nullable{System.Decimal}\n  parent: System\n  definition: System.Nullable`1\n  name: Nullable<Decimal>\n  fullName: System.Nullable<System.Decimal>\n  fullname.vb: System.Nullable(Of System.Decimal)\n  name.vb: Nullable(Of Decimal)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Nullable{System.Decimal}\n  nameWithType: Nullable<Decimal>\n  nameWithType.vb: Nullable(Of Decimal)\n- uid: System.Nullable`1\n  parent: System\n  isExternal: false\n  name: Nullable<T>\n  fullName: System.Nullable<T>\n  fullname.vb: System.Nullable(Of T)\n  name.vb: Nullable(Of T)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Nullable`1\n  nameWithType: Nullable<T>\n  nameWithType.vb: Nullable(Of T)\n- uid: System.Linq.IQueryable{System.Nullable{System.Double}}\n  definition: System.Linq.IQueryable`1\n  name: IQueryable<Nullable<Double>>\n  fullName: System.Linq.IQueryable<System.Nullable<System.Double>>\n  fullname.vb: System.Linq.IQueryable(Of System.Nullable(Of System.Double))\n  name.vb: IQueryable(Of Nullable(Of Double))\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.IQueryable{System.Nullable{System.Double}}'\n  nameWithType: IQueryable<Nullable<Double>>\n  nameWithType.vb: IQueryable(Of Nullable(Of Double))\n- uid: System.Nullable{System.Double}\n  parent: System\n  definition: System.Nullable`1\n  name: Nullable<Double>\n  fullName: System.Nullable<System.Double>\n  fullname.vb: System.Nullable(Of System.Double)\n  name.vb: Nullable(Of Double)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Nullable{System.Double}\n  nameWithType: Nullable<Double>\n  nameWithType.vb: Nullable(Of Double)\n- uid: System.Linq.IQueryable{System.Nullable{System.Int32}}\n  definition: System.Linq.IQueryable`1\n  name: IQueryable<Nullable<Int32>>\n  fullName: System.Linq.IQueryable<System.Nullable<System.Int32>>\n  fullname.vb: System.Linq.IQueryable(Of System.Nullable(Of System.Int32))\n  name.vb: IQueryable(Of Nullable(Of Int32))\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.IQueryable{System.Nullable{System.Int32}}'\n  nameWithType: IQueryable<Nullable<Int32>>\n  nameWithType.vb: IQueryable(Of Nullable(Of Int32))\n- uid: System.Linq.IQueryable{System.Nullable{System.Int64}}\n  definition: System.Linq.IQueryable`1\n  name: IQueryable<Nullable<Int64>>\n  fullName: System.Linq.IQueryable<System.Nullable<System.Int64>>\n  fullname.vb: System.Linq.IQueryable(Of System.Nullable(Of System.Int64))\n  name.vb: IQueryable(Of Nullable(Of Int64))\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.IQueryable{System.Nullable{System.Int64}}'\n  nameWithType: IQueryable<Nullable<Int64>>\n  nameWithType.vb: IQueryable(Of Nullable(Of Int64))\n- uid: System.Linq.IQueryable{System.Nullable{System.Single}}\n  definition: System.Linq.IQueryable`1\n  name: IQueryable<Nullable<Single>>\n  fullName: System.Linq.IQueryable<System.Nullable<System.Single>>\n  fullname.vb: System.Linq.IQueryable(Of System.Nullable(Of System.Single))\n  name.vb: IQueryable(Of Nullable(Of Single))\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.IQueryable{System.Nullable{System.Single}}'\n  nameWithType: IQueryable<Nullable<Single>>\n  nameWithType.vb: IQueryable(Of Nullable(Of Single))\n- uid: System.Nullable{System.Single}\n  parent: System\n  definition: System.Nullable`1\n  name: Nullable<Single>\n  fullName: System.Nullable<System.Single>\n  fullname.vb: System.Nullable(Of System.Single)\n  name.vb: Nullable(Of Single)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Nullable{System.Single}\n  nameWithType: Nullable<Single>\n  nameWithType.vb: Nullable(Of Single)\n- uid: System.Linq.IQueryable{System.Single}\n  definition: System.Linq.IQueryable`1\n  name: IQueryable<Single>\n  fullName: System.Linq.IQueryable<System.Single>\n  fullname.vb: System.Linq.IQueryable(Of System.Single)\n  name.vb: IQueryable(Of Single)\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.IQueryable{System.Single}'\n  nameWithType: IQueryable<Single>\n  nameWithType.vb: IQueryable(Of Single)\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  commentId: T:System.Single\n  nameWithType: Single\n- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Decimal}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TSource, Decimal>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Decimal))\n  name.vb: Expressions.Expression(Of Func(Of TSource, Decimal))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}}'\n  nameWithType: Expressions.Expression<Func<TSource, Decimal>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TSource, Decimal))\n- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Double}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TSource, Double>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Double>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Double))\n  name.vb: Expressions.Expression(Of Func(Of TSource, Double))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``0,System.Double}}'\n  nameWithType: Expressions.Expression<Func<TSource, Double>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TSource, Double))\n- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TSource, Int32>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32))\n  name.vb: Expressions.Expression(Of Func(Of TSource, Int32))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``0,System.Int32}}'\n  nameWithType: Expressions.Expression<Func<TSource, Int32>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TSource, Int32))\n- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int64}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TSource, Int64>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int64))\n  name.vb: Expressions.Expression(Of Func(Of TSource, Int64))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``0,System.Int64}}'\n  nameWithType: Expressions.Expression<Func<TSource, Int64>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TSource, Int64))\n- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Decimal}}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TSource, Nullable<Decimal>>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal)))\n  name.vb: Expressions.Expression(Of Func(Of TSource, Nullable(Of Decimal)))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}}'\n  nameWithType: Expressions.Expression<Func<TSource, Nullable<Decimal>>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TSource, Nullable(Of Decimal)))\n- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Double}}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TSource, Nullable<Double>>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double)))\n  name.vb: Expressions.Expression(Of Func(Of TSource, Nullable(Of Double)))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}}'\n  nameWithType: Expressions.Expression<Func<TSource, Nullable<Double>>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TSource, Nullable(Of Double)))\n- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int32}}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TSource, Nullable<Int32>>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32)))\n  name.vb: Expressions.Expression(Of Func(Of TSource, Nullable(Of Int32)))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}}'\n  nameWithType: Expressions.Expression<Func<TSource, Nullable<Int32>>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TSource, Nullable(Of Int32)))\n- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int64}}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TSource, Nullable<Int64>>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64)))\n  name.vb: Expressions.Expression(Of Func(Of TSource, Nullable(Of Int64)))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}}'\n  nameWithType: Expressions.Expression<Func<TSource, Nullable<Int64>>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TSource, Nullable(Of Int64)))\n- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Single}}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TSource, Nullable<Single>>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single)))\n  name.vb: Expressions.Expression(Of Func(Of TSource, Nullable(Of Single)))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}}'\n  nameWithType: Expressions.Expression<Func<TSource, Nullable<Single>>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TSource, Nullable(Of Single)))\n- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Single}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TSource, Single>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Single>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Single))\n  name.vb: Expressions.Expression(Of Func(Of TSource, Single))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``0,System.Single}}'\n  nameWithType: Expressions.Expression<Func<TSource, Single>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TSource, Single))\n- uid: System.Linq.IQueryable{{TResult}}\n  definition: System.Linq.IQueryable`1\n  name: IQueryable<TResult>\n  fullName: System.Linq.IQueryable<TResult>\n  fullname.vb: System.Linq.IQueryable(Of TResult)\n  name.vb: IQueryable(Of TResult)\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.IQueryable{``0}'\n  nameWithType: IQueryable<TResult>\n  nameWithType.vb: IQueryable(Of TResult)\n- uid: System.Collections.Generic.IEnumerable{{TSource}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<TSource>\n  fullName: System.Collections.Generic.IEnumerable<TSource>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of TSource)\n  name.vb: IEnumerable(Of TSource)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{``0}\n  nameWithType: IEnumerable<TSource>\n  nameWithType.vb: IEnumerable(Of TSource)\n- uid: System.Collections.Generic.IEqualityComparer{{TSource}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEqualityComparer`1\n  name: IEqualityComparer<TSource>\n  fullName: System.Collections.Generic.IEqualityComparer<TSource>\n  fullname.vb: System.Collections.Generic.IEqualityComparer(Of TSource)\n  name.vb: IEqualityComparer(Of TSource)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEqualityComparer{``0}\n  nameWithType: IEqualityComparer<TSource>\n  nameWithType.vb: IEqualityComparer(Of TSource)\n- uid: System.Collections.Generic.IEqualityComparer`1\n  isExternal: false\n  name: IEqualityComparer<T>\n  fullName: System.Collections.Generic.IEqualityComparer<T>\n  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T)\n  name.vb: IEqualityComparer(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEqualityComparer`1\n  nameWithType: IEqualityComparer<T>\n  nameWithType.vb: IEqualityComparer(Of T)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TSource, TKey>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource, TKey>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey))\n  name.vb: Expressions.Expression(Of Func(Of TSource, TKey))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TKey\n    fullName: TKey\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TKey\n    fullName: TKey\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``0,``1}}'\n  nameWithType: Expressions.Expression<Func<TSource, TKey>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TSource, TKey))\n- uid: System.Linq.IQueryable{System.Linq.IGrouping{{TKey},{TSource}}}\n  definition: System.Linq.IQueryable`1\n  name: IQueryable<IGrouping<TKey, TSource>>\n  fullName: System.Linq.IQueryable<System.Linq.IGrouping<TKey, TSource>>\n  fullname.vb: System.Linq.IQueryable(Of System.Linq.IGrouping(Of TKey, TSource))\n  name.vb: IQueryable(Of IGrouping(Of TKey, TSource))\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Linq.IGrouping`2\n    name: IGrouping\n    fullName: System.Linq.IGrouping\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Linq.IGrouping`2\n    name: IGrouping\n    fullName: System.Linq.IGrouping\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.IQueryable{System.Linq.IGrouping{``1,``0}}'\n  nameWithType: IQueryable<IGrouping<TKey, TSource>>\n  nameWithType.vb: IQueryable(Of IGrouping(Of TKey, TSource))\n- uid: System.Collections.Generic.IEqualityComparer{{TKey}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEqualityComparer`1\n  name: IEqualityComparer<TKey>\n  fullName: System.Collections.Generic.IEqualityComparer<TKey>\n  fullname.vb: System.Collections.Generic.IEqualityComparer(Of TKey)\n  name.vb: IEqualityComparer(Of TKey)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEqualityComparer{``1}\n  nameWithType: IEqualityComparer<TKey>\n  nameWithType.vb: IEqualityComparer(Of TKey)\n- uid: System.Linq.Expressions.Expression{System.Func{{TSource},{TElement}}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TSource, TElement>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource, TElement>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, TElement))\n  name.vb: Expressions.Expression(Of Func(Of TSource, TElement))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TElement\n    fullName: TElement\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TElement\n    fullName: TElement\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``0,``2}}'\n  nameWithType: Expressions.Expression<Func<TSource, TElement>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TSource, TElement))\n- uid: System.Linq.IQueryable{System.Linq.IGrouping{{TKey},{TElement}}}\n  definition: System.Linq.IQueryable`1\n  name: IQueryable<IGrouping<TKey, TElement>>\n  fullName: System.Linq.IQueryable<System.Linq.IGrouping<TKey, TElement>>\n  fullname.vb: System.Linq.IQueryable(Of System.Linq.IGrouping(Of TKey, TElement))\n  name.vb: IQueryable(Of IGrouping(Of TKey, TElement))\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Linq.IGrouping`2\n    name: IGrouping\n    fullName: System.Linq.IGrouping\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TElement\n    fullName: TElement\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Linq.IGrouping`2\n    name: IGrouping\n    fullName: System.Linq.IGrouping\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TElement\n    fullName: TElement\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.IQueryable{System.Linq.IGrouping{``1,``2}}'\n  nameWithType: IQueryable<IGrouping<TKey, TElement>>\n  nameWithType.vb: IQueryable(Of IGrouping(Of TKey, TElement))\n- uid: System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TKey, IEnumerable<TSource>, TResult>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult))\n  name.vb: Expressions.Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}}'\n  nameWithType: Expressions.Expression<Func<TKey, IEnumerable<TSource>, TResult>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult))\n- uid: System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TKey, IEnumerable<TElement>, TResult>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult))\n  name.vb: Expressions.Expression(Of Func(Of TKey, IEnumerable(Of TElement), TResult))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TElement\n    fullName: TElement\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TElement\n    fullName: TElement\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}}'\n  nameWithType: Expressions.Expression<Func<TKey, IEnumerable<TElement>, TResult>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TKey, IEnumerable(Of TElement), TResult))\n- uid: System.Linq.IQueryable{{TOuter}}\n  definition: System.Linq.IQueryable`1\n  name: IQueryable<TOuter>\n  fullName: System.Linq.IQueryable<TOuter>\n  fullname.vb: System.Linq.IQueryable(Of TOuter)\n  name.vb: IQueryable(Of TOuter)\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TOuter\n    fullName: TOuter\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TOuter\n    fullName: TOuter\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.IQueryable{``0}'\n  nameWithType: IQueryable<TOuter>\n  nameWithType.vb: IQueryable(Of TOuter)\n- uid: System.Collections.Generic.IEnumerable{{TInner}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<TInner>\n  fullName: System.Collections.Generic.IEnumerable<TInner>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of TInner)\n  name.vb: IEnumerable(Of TInner)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TInner\n    fullName: TInner\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TInner\n    fullName: TInner\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{``1}\n  nameWithType: IEnumerable<TInner>\n  nameWithType.vb: IEnumerable(Of TInner)\n- uid: System.Linq.Expressions.Expression{System.Func{{TOuter},{TKey}}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TOuter, TKey>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey))\n  name.vb: Expressions.Expression(Of Func(Of TOuter, TKey))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TOuter\n    fullName: TOuter\n  - name: ', '\n    fullName: ', '\n  - name: TKey\n    fullName: TKey\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TOuter\n    fullName: TOuter\n  - name: ', '\n    fullName: ', '\n  - name: TKey\n    fullName: TKey\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``0,``2}}'\n  nameWithType: Expressions.Expression<Func<TOuter, TKey>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TOuter, TKey))\n- uid: System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TInner, TKey>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TInner, TKey>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey))\n  name.vb: Expressions.Expression(Of Func(Of TInner, TKey))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TInner\n    fullName: TInner\n  - name: ', '\n    fullName: ', '\n  - name: TKey\n    fullName: TKey\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TInner\n    fullName: TInner\n  - name: ', '\n    fullName: ', '\n  - name: TKey\n    fullName: TKey\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``1,``2}}'\n  nameWithType: Expressions.Expression<Func<TInner, TKey>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TInner, TKey))\n- uid: System.Linq.Expressions.Expression{System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TOuter, IEnumerable<TInner>, TResult>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult))\n  name.vb: Expressions.Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TOuter\n    fullName: TOuter\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TInner\n    fullName: TInner\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TOuter\n    fullName: TOuter\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TInner\n    fullName: TInner\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}}'\n  nameWithType: Expressions.Expression<Func<TOuter, IEnumerable<TInner>, TResult>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult))\n- uid: System.Linq.Expressions.Expression{System.Func{{TOuter},{TInner},{TResult}}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TOuter, TInner, TResult>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult))\n  name.vb: Expressions.Expression(Of Func(Of TOuter, TInner, TResult))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TOuter\n    fullName: TOuter\n  - name: ', '\n    fullName: ', '\n  - name: TInner\n    fullName: TInner\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TOuter\n    fullName: TOuter\n  - name: ', '\n    fullName: ', '\n  - name: TInner\n    fullName: TInner\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``0,``1,``3}}'\n  nameWithType: Expressions.Expression<Func<TOuter, TInner, TResult>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TOuter, TInner, TResult))\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  commentId: T:System.Int64\n  nameWithType: Int64\n- uid: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TSource, TResult>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource, TResult>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult))\n  name.vb: Expressions.Expression(Of Func(Of TSource, TResult))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``0,``1}}'\n  nameWithType: Expressions.Expression<Func<TSource, TResult>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TSource, TResult))\n- uid: System.Linq.IOrderedQueryable{{TSource}}\n  definition: System.Linq.IOrderedQueryable`1\n  name: IOrderedQueryable<TSource>\n  fullName: System.Linq.IOrderedQueryable<TSource>\n  fullname.vb: System.Linq.IOrderedQueryable(Of TSource)\n  name.vb: IOrderedQueryable(Of TSource)\n  spec.csharp:\n  - uid: System.Linq.IOrderedQueryable`1\n    name: IOrderedQueryable\n    fullName: System.Linq.IOrderedQueryable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.IOrderedQueryable`1\n    name: IOrderedQueryable\n    fullName: System.Linq.IOrderedQueryable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.IOrderedQueryable{``0}'\n  nameWithType: IOrderedQueryable<TSource>\n  nameWithType.vb: IOrderedQueryable(Of TSource)\n- uid: System.Linq.IOrderedQueryable`1\n  isExternal: false\n  name: IOrderedQueryable<T>\n  fullName: System.Linq.IOrderedQueryable<T>\n  fullname.vb: System.Linq.IOrderedQueryable(Of T)\n  name.vb: IOrderedQueryable(Of T)\n  spec.csharp:\n  - uid: System.Linq.IOrderedQueryable`1\n    name: IOrderedQueryable\n    fullName: System.Linq.IOrderedQueryable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.IOrderedQueryable`1\n    name: IOrderedQueryable\n    fullName: System.Linq.IOrderedQueryable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.IOrderedQueryable`1\n  nameWithType: IOrderedQueryable<T>\n  nameWithType.vb: IOrderedQueryable(Of T)\n- uid: System.Collections.Generic.IComparer{{TKey}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IComparer`1\n  name: IComparer<TKey>\n  fullName: System.Collections.Generic.IComparer<TKey>\n  fullname.vb: System.Collections.Generic.IComparer(Of TKey)\n  name.vb: IComparer(Of TKey)\n  spec.csharp:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IComparer{``1}\n  nameWithType: IComparer<TKey>\n  nameWithType.vb: IComparer(Of TKey)\n- uid: System.Collections.Generic.IComparer`1\n  isExternal: false\n  name: IComparer<T>\n  fullName: System.Collections.Generic.IComparer<T>\n  fullname.vb: System.Collections.Generic.IComparer(Of T)\n  name.vb: IComparer(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IComparer`1\n  nameWithType: IComparer<T>\n  nameWithType.vb: IComparer(Of T)\n- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,{TResult}}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TSource, Int32, TResult>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, TResult>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, TResult))\n  name.vb: Expressions.Expression(Of Func(Of TSource, Int32, TResult))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}}'\n  nameWithType: Expressions.Expression<Func<TSource, Int32, TResult>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TSource, Int32, TResult))\n- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TSource, IEnumerable<TResult>>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult)))\n  name.vb: Expressions.Expression(Of Func(Of TSource, IEnumerable(Of TResult)))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}}'\n  nameWithType: Expressions.Expression<Func<TSource, IEnumerable<TResult>>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TSource, IEnumerable(Of TResult)))\n- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TResult}}}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TSource, Int32, IEnumerable<TResult>>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TResult>>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TResult)))\n  name.vb: Expressions.Expression(Of Func(Of TSource, Int32, IEnumerable(Of TResult)))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}}'\n  nameWithType: Expressions.Expression<Func<TSource, Int32, IEnumerable<TResult>>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TSource, Int32, IEnumerable(Of TResult)))\n- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Collections.Generic.IEnumerable{{TCollection}}}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TSource, IEnumerable<TCollection>>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection)))\n  name.vb: Expressions.Expression(Of Func(Of TSource, IEnumerable(Of TCollection)))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TCollection\n    fullName: TCollection\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TCollection\n    fullName: TCollection\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}}'\n  nameWithType: Expressions.Expression<Func<TSource, IEnumerable<TCollection>>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TSource, IEnumerable(Of TCollection)))\n- uid: System.Linq.Expressions.Expression{System.Func{{TSource},{TCollection},{TResult}}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TSource, TCollection, TResult>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource, TCollection, TResult>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, TCollection, TResult))\n  name.vb: Expressions.Expression(Of Func(Of TSource, TCollection, TResult))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TCollection\n    fullName: TCollection\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TCollection\n    fullName: TCollection\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``0,``1,``2}}'\n  nameWithType: Expressions.Expression<Func<TSource, TCollection, TResult>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TSource, TCollection, TResult))\n- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TCollection}}}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TSource, Int32, IEnumerable<TCollection>>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TCollection>>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TCollection)))\n  name.vb: Expressions.Expression(Of Func(Of TSource, Int32, IEnumerable(Of TCollection)))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TCollection\n    fullName: TCollection\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TCollection\n    fullName: TCollection\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}}'\n  nameWithType: Expressions.Expression<Func<TSource, Int32, IEnumerable<TCollection>>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TSource, Int32, IEnumerable(Of TCollection)))\n- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,System.Boolean}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TSource, Int32, Boolean>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Boolean>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, System.Boolean))\n  name.vb: Expressions.Expression(Of Func(Of TSource, Int32, Boolean))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}}'\n  nameWithType: Expressions.Expression<Func<TSource, Int32, Boolean>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TSource, Int32, Boolean))\n- uid: System.Nullable{System.Int32}\n  parent: System\n  definition: System.Nullable`1\n  name: Nullable<Int32>\n  fullName: System.Nullable<System.Int32>\n  fullname.vb: System.Nullable(Of System.Int32)\n  name.vb: Nullable(Of Int32)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Nullable{System.Int32}\n  nameWithType: Nullable<Int32>\n  nameWithType.vb: Nullable(Of Int32)\n- uid: System.Nullable{System.Int64}\n  parent: System\n  definition: System.Nullable`1\n  name: Nullable<Int64>\n  fullName: System.Nullable<System.Int64>\n  fullname.vb: System.Nullable(Of System.Int64)\n  name.vb: Nullable(Of Int64)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Nullable{System.Int64}\n  nameWithType: Nullable<Int64>\n  nameWithType.vb: Nullable(Of Int64)\n- uid: System.Linq.IQueryable{{TFirst}}\n  definition: System.Linq.IQueryable`1\n  name: IQueryable<TFirst>\n  fullName: System.Linq.IQueryable<TFirst>\n  fullname.vb: System.Linq.IQueryable(Of TFirst)\n  name.vb: IQueryable(Of TFirst)\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TFirst\n    fullName: TFirst\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TFirst\n    fullName: TFirst\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.IQueryable{``0}'\n  nameWithType: IQueryable<TFirst>\n  nameWithType.vb: IQueryable(Of TFirst)\n- uid: System.Collections.Generic.IEnumerable{{TSecond}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<TSecond>\n  fullName: System.Collections.Generic.IEnumerable<TSecond>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of TSecond)\n  name.vb: IEnumerable(Of TSecond)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSecond\n    fullName: TSecond\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSecond\n    fullName: TSecond\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{``1}\n  nameWithType: IEnumerable<TSecond>\n  nameWithType.vb: IEnumerable(Of TSecond)\n- uid: System.Linq.Expressions.Expression{System.Func{{TFirst},{TSecond},{TResult}}}\n  definition: System.Linq.Expressions.Expression`1\n  name: Expressions.Expression<Func<TFirst, TSecond, TResult>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TFirst, TSecond, TResult>>\n  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TFirst, TSecond, TResult))\n  name.vb: Expressions.Expression(Of Func(Of TFirst, TSecond, TResult))\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TFirst\n    fullName: TFirst\n  - name: ', '\n    fullName: ', '\n  - name: TSecond\n    fullName: TSecond\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expressions.Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TFirst\n    fullName: TFirst\n  - name: ', '\n    fullName: ', '\n  - name: TSecond\n    fullName: TSecond\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.Expressions.Expression{System.Func{``0,``1,``2}}'\n  nameWithType: Expressions.Expression<Func<TFirst, TSecond, TResult>>\n  nameWithType.vb: Expressions.Expression(Of Func(Of TFirst, TSecond, TResult))\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.InvalidCastException\n  isExternal: false\n  name: InvalidCastException\n  fullName: System.InvalidCastException\n  nameWithType: InvalidCastException\n  commentId: T:System.InvalidCastException\n- uid: System.OverflowException\n  isExternal: false\n  name: OverflowException\n  fullName: System.OverflowException\n  nameWithType: OverflowException\n  commentId: T:System.OverflowException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}