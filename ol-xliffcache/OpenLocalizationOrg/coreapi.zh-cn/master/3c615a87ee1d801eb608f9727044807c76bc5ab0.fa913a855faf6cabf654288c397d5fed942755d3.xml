{"nodes":[{"pos":[1668,1680],"content":"BinaryWriter","needQuote":true,"nodes":[{"content":"BinaryWriter","pos":[0,12]}]},{"pos":[4033,4042],"content":"OutStream","needQuote":true,"nodes":[{"content":"OutStream","pos":[0,9]}]},{"pos":[4845,4859],"content":"BinaryWriter()","needQuote":true,"nodes":[{"content":"BinaryWriter()","pos":[0,14]}]},{"pos":[5792,5812],"content":"BinaryWriter(Stream)","needQuote":true,"nodes":[{"content":"BinaryWriter(Stream)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The output stream.","pos":[6575,6598],"source":"\\n<p>The output stream."},{"content":"&lt;/p&gt;\\n","pos":[6599,6605],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream does not support writing or is already closed.","pos":[6716,6778],"source":"\\n<p>The stream does not support writing or is already closed."},{"content":"&lt;/p&gt;\\n","pos":[6779,6785],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;output&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[6890,6938],"source":"\\n<p>\\n<em>output</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[6939,6945],"source":" </p>\\n"},{"pos":[7424,7454],"content":"BinaryWriter(Stream, Encoding)","needQuote":true,"nodes":[{"content":"BinaryWriter(Stream, Encoding)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The output stream.","pos":[8278,8301],"source":"\\n<p>The output stream."},{"content":"&lt;/p&gt;\\n","pos":[8302,8308],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character encoding to use.","pos":[8382,8417],"source":"\\n<p>The character encoding to use."},{"content":"&lt;/p&gt;\\n","pos":[8418,8424],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream does not support writing or is already closed.","pos":[8535,8597],"source":"\\n<p>The stream does not support writing or is already closed."},{"content":"&lt;/p&gt;\\n","pos":[8598,8604],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;output&lt;/em&gt; or &lt;em&gt;encoding&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[8709,8778],"source":"\\n<p>\\n<em>output</em> or <em>encoding</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[8779,8785],"source":" </p>\\n"},{"pos":[9309,9348],"content":"BinaryWriter(Stream, Encoding, Boolean)","needQuote":true,"nodes":[{"content":"BinaryWriter(Stream, Encoding, Boolean)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The output stream.&lt;/p&gt;\\n","pos":[10265,10294],"source":"\\n<p>The output stream.</p>\\n"},{"content":"\\n&lt;p&gt;The character encoding to use.&lt;/p&gt;\\n","pos":[10368,10409],"source":"\\n<p>The character encoding to use.</p>\\n"},{"content":"\\n&lt;p&gt;The stream does not support writing or is already closed.","pos":[10796,10858],"source":"\\n<p>The stream does not support writing or is already closed."},{"content":"&lt;/p&gt;\\n","pos":[10859,10865],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;output&lt;/em&gt; or &lt;em&gt;encoding&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[10970,11039],"source":"\\n<p>\\n<em>output</em> or <em>encoding</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[11040,11046],"source":" </p>\\n"},{"pos":[11430,11440],"content":"BaseStream","needQuote":true,"nodes":[{"content":"BaseStream","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The underlying stream associated with the &lt;strong&gt;BinaryWriter&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12155,12238],"source":"\\n<p>The underlying stream associated with the <strong>BinaryWriter</strong>.</p>\\n"},{"pos":[12553,12562],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[13519,13535],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to release both managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to release only unmanaged resources.","pos":[14320,14457],"source":"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources."},{"content":"&lt;/p&gt;\\n","pos":[14458,14464],"source":" </p>\\n"},{"pos":[14764,14771],"content":"Flush()","needQuote":true,"nodes":[{"content":"Flush()","pos":[0,7]}]},{"pos":[15731,15754],"content":"Seek(Int32, SeekOrigin)","needQuote":true,"nodes":[{"content":"Seek(Int32, SeekOrigin)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;A byte offset relative to &lt;em&gt;origin&lt;/em&gt;.","pos":[16454,16501],"source":"\\n<p>A byte offset relative to <em>origin</em>."},{"content":"&lt;/p&gt;\\n","pos":[16502,16508],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The position with the current stream.&lt;/p&gt;\\n","pos":[16820,16868],"source":"\\n<p>The position with the current stream.</p>\\n"},{"content":"\\n&lt;p&gt;The file pointer was moved to an invalid location.","pos":[16973,17028],"source":"\\n<p>The file pointer was moved to an invalid location."},{"content":"&lt;/p&gt;\\n","pos":[17029,17035],"source":" </p>\\n"},{"pos":[17595,17609],"content":"Write(Boolean)","needQuote":true,"nodes":[{"content":"Write(Boolean)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;Boolean&lt;/strong&gt; value to write (0 or 1).","pos":[18351,18409],"source":"\\n<p>The <strong>Boolean</strong> value to write (0 or 1)."},{"content":"&lt;/p&gt;\\n","pos":[18410,18416],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[18521,18546],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[18547,18553],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[18662,18688],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[18689,18695],"source":" </p>\\n"},{"pos":[19026,19037],"content":"Write(Byte)","needQuote":true,"nodes":[{"content":"Write(Byte)","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The unsigned byte to write.","pos":[19705,19737],"source":"\\n<p>The unsigned byte to write."},{"content":"&lt;/p&gt;\\n","pos":[19738,19744],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[19849,19874],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[19875,19881],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[19990,20016],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[20017,20023],"source":" </p>\\n"},{"pos":[20357,20370],"content":"Write(Byte[])","needQuote":true,"nodes":[{"content":"Write(Byte[])","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A byte array containing the data to write.","pos":[21003,21050],"source":"\\n<p>A byte array containing the data to write."},{"content":"&lt;/p&gt;\\n","pos":[21051,21057],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[21162,21187],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[21188,21194],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[21303,21329],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[21330,21336],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[21441,21489],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[21490,21496],"source":" </p>\\n"},{"pos":[22040,22067],"content":"Write(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Write(Byte[], Int32, Int32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;A byte array containing the data to write.","pos":[22795,22842],"source":"\\n<p>A byte array containing the data to write."},{"content":"&lt;/p&gt;\\n","pos":[22843,22849],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting point in &lt;em&gt;buffer&lt;/em&gt; at which to begin writing.","pos":[22912,22981],"source":"\\n<p>The starting point in <em>buffer</em> at which to begin writing."},{"content":"&lt;/p&gt;\\n","pos":[22982,22988],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to write.","pos":[23051,23085],"source":"\\n<p>The number of bytes to write."},{"content":"&lt;/p&gt;\\n","pos":[23086,23092],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The buffer length minus &lt;em&gt;index&lt;/em&gt; is less than &lt;em&gt;count&lt;/em&gt;.","pos":[23203,23275],"source":"\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>."},{"content":"&lt;/p&gt;\\n","pos":[23276,23282],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[23387,23435],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[23436,23442],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.","pos":[23559,23611],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is negative."},{"content":"&lt;/p&gt;\\n","pos":[23612,23618],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[23709,23734],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[23735,23741],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[23850,23876],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[23877,23883],"source":" </p>\\n"},{"pos":[24413,24424],"content":"Write(Char)","needQuote":true,"nodes":[{"content":"Write(Char)","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The non-surrogate, Unicode character to write.","pos":[25277,25328],"source":"\\n<p>The non-surrogate, Unicode character to write."},{"content":"&lt;/p&gt;\\n","pos":[25329,25335],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[25440,25465],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[25466,25472],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[25581,25607],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[25608,25614],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;ch&lt;/em&gt; is a single surrogate character.&lt;/p&gt;\\n","pos":[25711,25768],"source":"\\n<p>\\n<em>ch</em> is a single surrogate character.</p>\\n"},{"pos":[26182,26195],"content":"Write(Char[])","needQuote":true,"nodes":[{"content":"Write(Char[])","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A character array containing the data to write.","pos":[26985,27037],"source":"\\n<p>A character array containing the data to write."},{"content":"&lt;/p&gt;\\n","pos":[27038,27044],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[27163,27210],"source":"\\n<p>\\n<em>chars</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[27211,27217],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[27326,27352],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[27353,27359],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[27450,27475],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[27476,27482],"source":" </p>\\n"},{"pos":[28106,28133],"content":"Write(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Write(Char[], Int32, Int32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;A character array containing the data to write.","pos":[29031,29083],"source":"\\n<p>A character array containing the data to write."},{"content":"&lt;/p&gt;\\n","pos":[29084,29090],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting point in &lt;em&gt;chars&lt;/em&gt; from which to begin writing.","pos":[29153,29223],"source":"\\n<p>The starting point in <em>chars</em> from which to begin writing."},{"content":"&lt;/p&gt;\\n","pos":[29224,29230],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to write.","pos":[29293,29332],"source":"\\n<p>The number of characters to write."},{"content":"&lt;/p&gt;\\n","pos":[29333,29339],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The buffer length minus &lt;em&gt;index&lt;/em&gt; is less than &lt;em&gt;count&lt;/em&gt;.","pos":[29450,29522],"source":"\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>."},{"content":"&lt;/p&gt;\\n","pos":[29523,29529],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[29634,29681],"source":"\\n<p>\\n<em>chars</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[29682,29688],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.","pos":[29805,29857],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is negative."},{"content":"&lt;/p&gt;\\n","pos":[29858,29864],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[29955,29980],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[29981,29987],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[30096,30122],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[30123,30129],"source":" </p>\\n"},{"pos":[30748,30762],"content":"Write(Decimal)","needQuote":true,"nodes":[{"content":"Write(Decimal)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The decimal value to write.","pos":[31446,31478],"source":"\\n<p>The decimal value to write."},{"content":"&lt;/p&gt;\\n","pos":[31479,31485],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[31590,31615],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[31616,31622],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[31731,31757],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[31758,31764],"source":" </p>\\n"},{"pos":[32101,32114],"content":"Write(Double)","needQuote":true,"nodes":[{"content":"Write(Double)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The eight-byte floating-point value to write.","pos":[32889,32939],"source":"\\n<p>The eight-byte floating-point value to write."},{"content":"&lt;/p&gt;\\n","pos":[32940,32946],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[33051,33076],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[33077,33083],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[33192,33218],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[33219,33225],"source":" </p>\\n"},{"pos":[33558,33570],"content":"Write(Int16)","needQuote":true,"nodes":[{"content":"Write(Int16)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The two-byte signed integer to write.","pos":[34252,34294],"source":"\\n<p>The two-byte signed integer to write."},{"content":"&lt;/p&gt;\\n","pos":[34295,34301],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[34406,34431],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[34432,34438],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[34547,34573],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[34574,34580],"source":" </p>\\n"},{"pos":[34912,34924],"content":"Write(Int32)","needQuote":true,"nodes":[{"content":"Write(Int32)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The four-byte signed integer to write.","pos":[35608,35651],"source":"\\n<p>The four-byte signed integer to write."},{"content":"&lt;/p&gt;\\n","pos":[35652,35658],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[35763,35788],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[35789,35795],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[35904,35930],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[35931,35937],"source":" </p>\\n"},{"pos":[36269,36281],"content":"Write(Int64)","needQuote":true,"nodes":[{"content":"Write(Int64)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The eight-byte signed integer to write.","pos":[36966,37010],"source":"\\n<p>The eight-byte signed integer to write."},{"content":"&lt;/p&gt;\\n","pos":[37011,37017],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[37122,37147],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[37148,37154],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[37263,37289],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[37290,37296],"source":" </p>\\n"},{"pos":[37628,37640],"content":"Write(SByte)","needQuote":true,"nodes":[{"content":"Write(SByte)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The signed byte to write.","pos":[38385,38415],"source":"\\n<p>The signed byte to write."},{"content":"&lt;/p&gt;\\n","pos":[38416,38422],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[38527,38552],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[38553,38559],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[38668,38694],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[38695,38701],"source":" </p>\\n"},{"pos":[39211,39224],"content":"Write(Single)","needQuote":true,"nodes":[{"content":"Write(Single)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The four-byte floating-point value to write.","pos":[39995,40044],"source":"\\n<p>The four-byte floating-point value to write."},{"content":"&lt;/p&gt;\\n","pos":[40045,40051],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[40156,40181],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[40182,40188],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[40297,40323],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[40324,40330],"source":" </p>\\n"},{"pos":[40666,40679],"content":"Write(String)","needQuote":true,"nodes":[{"content":"Write(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The value to write.","pos":[41645,41669],"source":"\\n<p>The value to write."},{"content":"&lt;/p&gt;\\n","pos":[41670,41676],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[41781,41806],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[41807,41813],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[41918,41965],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[41966,41972],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[42081,42107],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[42108,42114],"source":" </p>\\n"},{"pos":[42530,42543],"content":"Write(UInt16)","needQuote":true,"nodes":[{"content":"Write(UInt16)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The two-byte unsigned integer to write.","pos":[43307,43351],"source":"\\n<p>The two-byte unsigned integer to write."},{"content":"&lt;/p&gt;\\n","pos":[43352,43358],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[43463,43488],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[43489,43495],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[43604,43630],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[43631,43637],"source":" </p>\\n"},{"pos":[44148,44161],"content":"Write(UInt32)","needQuote":true,"nodes":[{"content":"Write(UInt32)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The four-byte unsigned integer to write.","pos":[44927,44972],"source":"\\n<p>The four-byte unsigned integer to write."},{"content":"&lt;/p&gt;\\n","pos":[44973,44979],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[45084,45109],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[45110,45116],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[45225,45251],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[45252,45258],"source":" </p>\\n"},{"pos":[45769,45782],"content":"Write(UInt64)","needQuote":true,"nodes":[{"content":"Write(UInt64)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The eight-byte unsigned integer to write.","pos":[46549,46595],"source":"\\n<p>The eight-byte unsigned integer to write."},{"content":"&lt;/p&gt;\\n","pos":[46596,46602],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[46707,46732],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[46733,46739],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[46848,46874],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[46875,46881],"source":" </p>\\n"},{"pos":[47431,47457],"content":"Write7BitEncodedInt(Int32)","needQuote":true,"nodes":[{"content":"Write7BitEncodedInt(Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The 32-bit integer to be written.","pos":[48127,48165],"source":"\\n<p>The 32-bit integer to be written."},{"content":"&lt;/p&gt;\\n","pos":[48166,48172],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The end of the stream is reached.","pos":[48295,48333],"source":"\\n<p>The end of the stream is reached."},{"content":"&lt;/p&gt;\\n","pos":[48334,48340],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[48449,48475],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[48476,48482],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[48573,48599],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[48600,48606],"source":" </p>\\n"},{"pos":[48785,48794],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[48934,48940],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[49090,49101],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[49276,49286],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[49381,49389],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[49458,49459],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49486,49487],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49557,49565],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[49634,49635],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49662,49663],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49846,49860],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[49979,49985],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[50052,50053],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50103,50109],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[50169,50170],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50253,50259],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[50326,50327],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50377,50383],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[50443,50444],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50658,50680],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[50828,50834],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[50901,50902],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50952,50958],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[51019,51020]},{"pos":[51075,51081],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[51141,51142],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51239,51245],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[51312,51313],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51363,51369],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[51430,51431]},{"pos":[51486,51492],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[51552,51553],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51798,51829],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[51995,52010],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[52086,52087],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52137,52143],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[52204,52205]},{"pos":[52260,52266],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[52326,52327],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52433,52448],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[52524,52525],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52575,52581],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[52642,52643]},{"pos":[52698,52704],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[52764,52765],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52995,53008],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[53109,53120],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[53192,53193],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53220,53221],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53294,53305],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[53377,53378],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53405,53406],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53581,53590],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[53683,53690],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[53758,53759],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53786,53787],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53856,53863],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[53931,53932],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53959,53960],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54135,54152],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[54261,54276],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[54352,54353],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54380,54381],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54458,54473],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[54549,54550],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54577,54578],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54723,54729],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[54872,54884],"content":"BinaryWriter","needQuote":true,"nodes":[{"content":"BinaryWriter","pos":[0,12]}]},{"pos":[55059,55065],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[55228,55236],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"pos":[55378,55389],"content":"System.Text","needQuote":true,"nodes":[{"content":"System.Text","pos":[0,11]}]},{"pos":[55536,55543],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[55716,55725],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[55828,55835],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[55887,55888],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55915,55916],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55990,55997],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[56049,56050],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56077,56078],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56240,56245],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[56397,56407],"content":"SeekOrigin","needQuote":true,"nodes":[{"content":"SeekOrigin","pos":[0,10]}]},{"pos":[56569,56574],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[56714,56718],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[56820,56826],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[56946,56950],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[57009,57011]},{"pos":[57074,57078],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[57136,57138],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[57269,57273],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[57375,57381],"content":"Char[]","needQuote":true,"nodes":[{"content":"Char[]","pos":[0,6]}]},{"pos":[57501,57505],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[57564,57566]},{"pos":[57629,57633],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[57691,57693],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[57827,57834],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[57982,57988],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[58132,58137],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[58278,58283],"content":"SByte","needQuote":true,"nodes":[{"content":"SByte","pos":[0,5]}]},{"pos":[58425,58431],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[58576,58582],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[58727,58733],"content":"UInt16","needQuote":true,"nodes":[{"content":"UInt16","pos":[0,6]}]},{"pos":[58878,58884],"content":"UInt32","needQuote":true,"nodes":[{"content":"UInt32","pos":[0,6]}]},{"pos":[59029,59035],"content":"UInt64","needQuote":true,"nodes":[{"content":"UInt64","pos":[0,6]}]},{"pos":[59191,59208],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[59384,59405],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[59606,59617],"content":"IOException","needQuote":true,"nodes":[{"content":"IOException","pos":[0,11]}]},{"pos":[59783,59806],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]},{"pos":[60006,60033],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[60241,60261],"content":"EndOfStreamException","needQuote":true,"nodes":[{"content":"EndOfStreamException","pos":[0,20]}]}],"content":"items:\n- uid: System.IO.BinaryWriter\n  commentId: T:System.IO.BinaryWriter\n  id: BinaryWriter\n  parent: System.IO\n  children:\n  - System.IO.BinaryWriter.#ctor\n  - System.IO.BinaryWriter.#ctor(System.IO.Stream)\n  - System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)\n  - System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)\n  - System.IO.BinaryWriter.BaseStream\n  - System.IO.BinaryWriter.Dispose\n  - System.IO.BinaryWriter.Dispose(System.Boolean)\n  - System.IO.BinaryWriter.Flush\n  - System.IO.BinaryWriter.Null\n  - System.IO.BinaryWriter.OutStream\n  - System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)\n  - System.IO.BinaryWriter.Write(System.Boolean)\n  - System.IO.BinaryWriter.Write(System.Byte)\n  - System.IO.BinaryWriter.Write(System.Byte[])\n  - System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)\n  - System.IO.BinaryWriter.Write(System.Char)\n  - System.IO.BinaryWriter.Write(System.Char[])\n  - System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)\n  - System.IO.BinaryWriter.Write(System.Decimal)\n  - System.IO.BinaryWriter.Write(System.Double)\n  - System.IO.BinaryWriter.Write(System.Int16)\n  - System.IO.BinaryWriter.Write(System.Int32)\n  - System.IO.BinaryWriter.Write(System.Int64)\n  - System.IO.BinaryWriter.Write(System.SByte)\n  - System.IO.BinaryWriter.Write(System.Single)\n  - System.IO.BinaryWriter.Write(System.String)\n  - System.IO.BinaryWriter.Write(System.UInt16)\n  - System.IO.BinaryWriter.Write(System.UInt32)\n  - System.IO.BinaryWriter.Write(System.UInt64)\n  - System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)\n  langs:\n  - csharp\n  - vb\n  name: BinaryWriter\n  fullName: System.IO.BinaryWriter\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BinaryWriter\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 26\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes primitive types in binary to a stream and supports writing strings in a specific encoding.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public class BinaryWriter : IDisposable\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public Class BinaryWriter\n          Implements IDisposable\n  seealso:\n  - type: System.Text.Encoding\n    commentId: T:System.Text.Encoding\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: BinaryWriter\n- uid: System.IO.BinaryWriter.Null\n  commentId: F:System.IO.BinaryWriter.Null\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  fullName: System.IO.BinaryWriter.Null\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 30\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Specifies a <xref href=\\\"System.IO.BinaryWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with no backing store.</p>\\n\"\n  syntax:\n    content: public static readonly BinaryWriter Null\n    content.vb: Public Shared ReadOnly Null As BinaryWriter\n    return:\n      type: System.IO.BinaryWriter\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: BinaryWriter.Null\n- uid: System.IO.BinaryWriter.OutStream\n  commentId: F:System.IO.BinaryWriter.OutStream\n  id: OutStream\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: OutStream\n  fullName: System.IO.BinaryWriter.OutStream\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OutStream\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 32\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Holds the underlying stream.</p>\\n\"\n  syntax:\n    content: protected Stream OutStream\n    content.vb: Protected OutStream As Stream\n    return:\n      type: System.IO.Stream\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: BinaryWriter.OutStream\n- uid: System.IO.BinaryWriter.#ctor\n  commentId: M:System.IO.BinaryWriter.#ctor\n  id: '#ctor'\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: BinaryWriter()\n  fullName: System.IO.BinaryWriter.BinaryWriter()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 56\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.IO.BinaryWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that writes to a stream.</p>\\n\"\n  syntax:\n    content: protected BinaryWriter()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: BinaryWriter.BinaryWriter()\n- uid: System.IO.BinaryWriter.#ctor(System.IO.Stream)\n  commentId: M:System.IO.BinaryWriter.#ctor(System.IO.Stream)\n  id: '#ctor(System.IO.Stream)'\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: BinaryWriter(Stream)\n  fullName: System.IO.BinaryWriter.BinaryWriter(System.IO.Stream)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 64\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.IO.BinaryWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class based on the specified stream and using UTF-8 encoding.</p>\\n\"\n  syntax:\n    content: public BinaryWriter(Stream output)\n    content.vb: Public Sub New(output As Stream)\n    parameters:\n    - id: output\n      type: System.IO.Stream\n      description: \"\\n<p>The output stream. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The stream does not support writing or is already closed. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>output</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.UTF8\n    commentId: P:System.Text.Encoding.UTF8\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BinaryWriter.BinaryWriter(Stream)\n- uid: System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)\n  commentId: M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)\n  id: '#ctor(System.IO.Stream,System.Text.Encoding)'\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: BinaryWriter(Stream, Encoding)\n  fullName: System.IO.BinaryWriter.BinaryWriter(System.IO.Stream, System.Text.Encoding)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 68\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.IO.BinaryWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class based on the specified stream and character encoding.</p>\\n\"\n  syntax:\n    content: public BinaryWriter(Stream output, Encoding encoding)\n    content.vb: Public Sub New(output As Stream, encoding As Encoding)\n    parameters:\n    - id: output\n      type: System.IO.Stream\n      description: \"\\n<p>The output stream. </p>\\n\"\n    - id: encoding\n      type: System.Text.Encoding\n      description: \"\\n<p>The character encoding to use. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The stream does not support writing or is already closed. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>output</em> or <em>encoding</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Text.Encoding\n    commentId: T:System.Text.Encoding\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BinaryWriter.BinaryWriter(Stream, Encoding)\n- uid: System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)\n  commentId: M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)\n  id: '#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)'\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: BinaryWriter(Stream, Encoding, Boolean)\n  fullName: System.IO.BinaryWriter.BinaryWriter(System.IO.Stream, System.Text.Encoding, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 72\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.IO.BinaryWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class based on the specified stream and character encoding, and optionally leaves the stream open.</p>\\n\"\n  syntax:\n    content: public BinaryWriter(Stream output, Encoding encoding, bool leaveOpen)\n    content.vb: Public Sub New(output As Stream, encoding As Encoding, leaveOpen As Boolean)\n    parameters:\n    - id: output\n      type: System.IO.Stream\n      description: \"\\n<p>The output stream.</p>\\n\"\n    - id: encoding\n      type: System.Text.Encoding\n      description: \"\\n<p>The character encoding to use.</p>\\n\"\n    - id: leaveOpen\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to leave the stream open after the <xref href=\\\"System.IO.BinaryWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is disposed; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The stream does not support writing or is already closed. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>output</em> or <em>encoding</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Text.Encoding\n    commentId: T:System.Text.Encoding\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BinaryWriter.BinaryWriter(Stream, Encoding, Boolean)\n- uid: System.IO.BinaryWriter.BaseStream\n  commentId: P:System.IO.BinaryWriter.BaseStream\n  id: BaseStream\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: BaseStream\n  fullName: System.IO.BinaryWriter.BaseStream\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BaseStream\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 117\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Gets the underlying stream of the <xref href=\\\"System.IO.BinaryWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual Stream BaseStream { get; }\n    content.vb: Public Overridable ReadOnly Property BaseStream As Stream\n    parameters: []\n    return:\n      type: System.IO.Stream\n      description: \"\\n<p>The underlying stream associated with the <strong>BinaryWriter</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: BinaryWriter.BaseStream\n- uid: System.IO.BinaryWriter.Dispose\n  commentId: M:System.IO.BinaryWriter.Dispose\n  id: Dispose\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.IO.BinaryWriter.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 107\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Releases all resources used by the current instance of the <xref href=\\\"System.IO.BinaryWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BinaryWriter.Dispose()\n- uid: System.IO.BinaryWriter.Dispose(System.Boolean)\n  commentId: M:System.IO.BinaryWriter.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.IO.BinaryWriter.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 97\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.IO.BinaryWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and optionally releases the managed resources.</p>\\n\"\n  syntax:\n    content: protected virtual void Dispose(bool disposing)\n    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: BinaryWriter.Dispose(Boolean)\n- uid: System.IO.BinaryWriter.Flush\n  commentId: M:System.IO.BinaryWriter.Flush\n  id: Flush\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: Flush()\n  fullName: System.IO.BinaryWriter.Flush()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Flush\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 126\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.</p>\\n\"\n  syntax:\n    content: public virtual void Flush()\n    content.vb: Public Overridable Sub Flush\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryWriter.Flush()\n- uid: System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)\n  commentId: M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)\n  id: Seek(System.Int32,System.IO.SeekOrigin)\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: Seek(Int32, SeekOrigin)\n  fullName: System.IO.BinaryWriter.Seek(System.Int32, System.IO.SeekOrigin)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Seek\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 131\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Sets the position within the current stream.</p>\\n\"\n  syntax:\n    content: public virtual long Seek(int offset, SeekOrigin origin)\n    content.vb: Public Overridable Function Seek(offset As Integer, origin As SeekOrigin) As Long\n    parameters:\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>A byte offset relative to <em>origin</em>. </p>\\n\"\n    - id: origin\n      type: System.IO.SeekOrigin\n      description: \"\\n<p>A field of <xref href=\\\"System.IO.SeekOrigin\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> indicating the reference point from which the new position is to be obtained. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The position with the current stream.</p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>The file pointer was moved to an invalid location. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <xref href=\\\"System.IO.SeekOrigin\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is invalid. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryWriter.Seek(Int32, SeekOrigin)\n- uid: System.IO.BinaryWriter.Write(System.Boolean)\n  commentId: M:System.IO.BinaryWriter.Write(System.Boolean)\n  id: Write(System.Boolean)\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(Boolean)\n  fullName: System.IO.BinaryWriter.Write(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 139\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a one-byte <strong>Boolean</strong> value to the current stream, with 0 representing <strong>false</strong> and 1 representing <strong>true</strong>.</p>\\n\"\n  syntax:\n    content: public virtual void Write(bool value)\n    content.vb: Public Overridable Sub Write(value As Boolean)\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: \"\\n<p>The <strong>Boolean</strong> value to write (0 or 1). </p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryWriter.Write(Boolean)\n- uid: System.IO.BinaryWriter.Write(System.Byte)\n  commentId: M:System.IO.BinaryWriter.Write(System.Byte)\n  id: Write(System.Byte)\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(Byte)\n  fullName: System.IO.BinaryWriter.Write(System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 147\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes an unsigned byte to the current stream and advances the stream position by one byte.</p>\\n\"\n  syntax:\n    content: public virtual void Write(byte value)\n    content.vb: Public Overridable Sub Write(value As Byte)\n    parameters:\n    - id: value\n      type: System.Byte\n      description: \"\\n<p>The unsigned byte to write. </p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryWriter.Write(Byte)\n- uid: System.IO.BinaryWriter.Write(System.Byte[])\n  commentId: M:System.IO.BinaryWriter.Write(System.Byte[])\n  id: Write(System.Byte[])\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(Byte[])\n  fullName: System.IO.BinaryWriter.Write(System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 166\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a byte array to the underlying stream.</p>\\n\"\n  syntax:\n    content: public virtual void Write(byte[] buffer)\n    content.vb: Public Overridable Sub Write(buffer As Byte())\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>A byte array containing the data to write. </p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.IO.BinaryWriter.Write(System.Byte())\n  name.vb: Write(Byte())\n  nameWithType: BinaryWriter.Write(Byte[])\n  nameWithType.vb: BinaryWriter.Write(Byte())\n- uid: System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)\n  id: Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(Byte[], Int32, Int32)\n  fullName: System.IO.BinaryWriter.Write(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 178\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a region of a byte array to the current stream.</p>\\n\"\n  syntax:\n    content: public virtual void Write(byte[] buffer, int index, int count)\n    content.vb: Public Overridable Sub Write(buffer As Byte(), index As Integer, count As Integer)\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>A byte array containing the data to write. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The starting point in <em>buffer</em> at which to begin writing. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to write. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is negative. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.IO.BinaryWriter.Write(System.Byte(), System.Int32, System.Int32)\n  name.vb: Write(Byte(), Int32, Int32)\n  nameWithType: BinaryWriter.Write(Byte[], Int32, Int32)\n  nameWithType.vb: BinaryWriter.Write(Byte(), Int32, Int32)\n- uid: System.IO.BinaryWriter.Write(System.Char)\n  commentId: M:System.IO.BinaryWriter.Write(System.Char)\n  id: Write(System.Char)\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(Char)\n  fullName: System.IO.BinaryWriter.Write(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 187\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a Unicode character to the current stream and advances the current position of the stream in accordance with the <strong>Encoding</strong> used and the specific characters being written to the stream.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public virtual void Write(char ch)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overridable Sub Write(ch As Char)\n    parameters:\n    - id: ch\n      type: System.Char\n      description: \"\\n<p>The non-surrogate, Unicode character to write. </p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>ch</em> is a single surrogate character.</p>\\n\"\n  seealso:\n  - type: System.Text.Encoding\n    commentId: T:System.Text.Encoding\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryWriter.Write(Char)\n- uid: System.IO.BinaryWriter.Write(System.Char[])\n  commentId: M:System.IO.BinaryWriter.Write(System.Char[])\n  id: Write(System.Char[])\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(Char[])\n  fullName: System.IO.BinaryWriter.Write(System.Char[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 206\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a character array to the current stream and advances the current position of the stream in accordance with the <strong>Encoding</strong> used and the specific characters being written to the stream.</p>\\n\"\n  syntax:\n    content: public virtual void Write(char[] chars)\n    content.vb: Public Overridable Sub Write(chars As Char())\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>A character array containing the data to write. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.Text.Encoding\n    commentId: T:System.Text.Encoding\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.IO.BinaryWriter.Write(System.Char())\n  name.vb: Write(Char())\n  nameWithType: BinaryWriter.Write(Char[])\n  nameWithType.vb: BinaryWriter.Write(Char())\n- uid: System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)\n  id: Write(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(Char[], Int32, Int32)\n  fullName: System.IO.BinaryWriter.Write(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 221\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a section of a character array to the current stream, and advances the current position of the stream in accordance with the <strong>Encoding</strong> used and perhaps the specific characters being written to the stream.</p>\\n\"\n  syntax:\n    content: public virtual void Write(char[] chars, int index, int count)\n    content.vb: Public Overridable Sub Write(chars As Char(), index As Integer, count As Integer)\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>A character array containing the data to write. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The starting point in <em>chars</em> from which to begin writing. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to write. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is negative. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  seealso:\n  - type: System.Text.Encoding\n    commentId: T:System.Text.Encoding\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.IO.BinaryWriter.Write(System.Char(), System.Int32, System.Int32)\n  name.vb: Write(Char(), Int32, Int32)\n  nameWithType: BinaryWriter.Write(Char[], Int32, Int32)\n  nameWithType.vb: BinaryWriter.Write(Char(), Int32, Int32)\n- uid: System.IO.BinaryWriter.Write(System.Decimal)\n  commentId: M:System.IO.BinaryWriter.Write(System.Decimal)\n  id: Write(System.Decimal)\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(Decimal)\n  fullName: System.IO.BinaryWriter.Write(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 246\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a decimal value to the current stream and advances the stream position by sixteen bytes.</p>\\n\"\n  syntax:\n    content: public virtual void Write(decimal value)\n    content.vb: Public Overridable Sub Write(value As Decimal)\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The decimal value to write. </p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryWriter.Write(Decimal)\n- uid: System.IO.BinaryWriter.Write(System.Double)\n  commentId: M:System.IO.BinaryWriter.Write(System.Double)\n  id: Write(System.Double)\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(Double)\n  fullName: System.IO.BinaryWriter.Write(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 231\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes an eight-byte floating-point value to the current stream and advances the stream position by eight bytes.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public virtual void Write(double value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overridable Sub Write(value As Double)\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The eight-byte floating-point value to write. </p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryWriter.Write(Double)\n- uid: System.IO.BinaryWriter.Write(System.Int16)\n  commentId: M:System.IO.BinaryWriter.Write(System.Int16)\n  id: Write(System.Int16)\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(Int16)\n  fullName: System.IO.BinaryWriter.Write(System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 255\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a two-byte signed integer to the current stream and advances the stream position by two bytes.</p>\\n\"\n  syntax:\n    content: public virtual void Write(short value)\n    content.vb: Public Overridable Sub Write(value As Short)\n    parameters:\n    - id: value\n      type: System.Int16\n      description: \"\\n<p>The two-byte signed integer to write. </p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryWriter.Write(Int16)\n- uid: System.IO.BinaryWriter.Write(System.Int32)\n  commentId: M:System.IO.BinaryWriter.Write(System.Int32)\n  id: Write(System.Int32)\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(Int32)\n  fullName: System.IO.BinaryWriter.Write(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 276\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a four-byte signed integer to the current stream and advances the stream position by four bytes.</p>\\n\"\n  syntax:\n    content: public virtual void Write(int value)\n    content.vb: Public Overridable Sub Write(value As Integer)\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The four-byte signed integer to write. </p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryWriter.Write(Int32)\n- uid: System.IO.BinaryWriter.Write(System.Int64)\n  commentId: M:System.IO.BinaryWriter.Write(System.Int64)\n  id: Write(System.Int64)\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(Int64)\n  fullName: System.IO.BinaryWriter.Write(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 301\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes an eight-byte signed integer to the current stream and advances the stream position by eight bytes.</p>\\n\"\n  syntax:\n    content: public virtual void Write(long value)\n    content.vb: Public Overridable Sub Write(value As Long)\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The eight-byte signed integer to write. </p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryWriter.Write(Int64)\n- uid: System.IO.BinaryWriter.Write(System.SByte)\n  commentId: M:System.IO.BinaryWriter.Write(System.SByte)\n  id: Write(System.SByte)\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(SByte)\n  fullName: System.IO.BinaryWriter.Write(System.SByte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 155\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a signed byte to the current stream and advances the stream position by one byte.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public virtual void Write(sbyte value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Overridable Sub Write(value As SByte)\n    parameters:\n    - id: value\n      type: System.SByte\n      description: \"\\n<p>The signed byte to write. </p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryWriter.Write(SByte)\n- uid: System.IO.BinaryWriter.Write(System.Single)\n  commentId: M:System.IO.BinaryWriter.Write(System.Single)\n  id: Write(System.Single)\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(Single)\n  fullName: System.IO.BinaryWriter.Write(System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 334\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a four-byte floating-point value to the current stream and advances the stream position by four bytes.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public virtual void Write(float value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overridable Sub Write(value As Single)\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The four-byte floating-point value to write. </p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryWriter.Write(Single)\n- uid: System.IO.BinaryWriter.Write(System.String)\n  commentId: M:System.IO.BinaryWriter.Write(System.String)\n  id: Write(System.String)\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(String)\n  fullName: System.IO.BinaryWriter.Write(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 351\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a length-prefixed string to this stream in the current encoding of the <xref href=\\\"System.IO.BinaryWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and advances the current position of the stream in accordance with the encoding used and the specific characters being written to the stream.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public virtual void Write(string value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overridable Sub Write(value As String)\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The value to write. </p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  seealso:\n  - type: System.Text.Encoding\n    commentId: T:System.Text.Encoding\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryWriter.Write(String)\n- uid: System.IO.BinaryWriter.Write(System.UInt16)\n  commentId: M:System.IO.BinaryWriter.Write(System.UInt16)\n  id: Write(System.UInt16)\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(UInt16)\n  fullName: System.IO.BinaryWriter.Write(System.UInt16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 265\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a two-byte unsigned integer to the current stream and advances the stream position by two bytes.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public virtual void Write(ushort value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Overridable Sub Write(value As UShort)\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: \"\\n<p>The two-byte unsigned integer to write. </p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryWriter.Write(UInt16)\n- uid: System.IO.BinaryWriter.Write(System.UInt32)\n  commentId: M:System.IO.BinaryWriter.Write(System.UInt32)\n  id: Write(System.UInt32)\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(UInt32)\n  fullName: System.IO.BinaryWriter.Write(System.UInt32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 288\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a four-byte unsigned integer to the current stream and advances the stream position by four bytes.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public virtual void Write(uint value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Overridable Sub Write(value As UInteger)\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>The four-byte unsigned integer to write. </p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryWriter.Write(UInt32)\n- uid: System.IO.BinaryWriter.Write(System.UInt64)\n  commentId: M:System.IO.BinaryWriter.Write(System.UInt64)\n  id: Write(System.UInt64)\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(UInt64)\n  fullName: System.IO.BinaryWriter.Write(System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 317\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes an eight-byte unsigned integer to the current stream and advances the stream position by eight bytes.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public virtual void Write(ulong value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Overridable Sub Write(value As ULong)\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>The eight-byte unsigned integer to write. </p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryWriter.Write(UInt64)\n- uid: System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)\n  commentId: M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)\n  id: Write7BitEncodedInt(System.Int32)\n  parent: System.IO.BinaryWriter\n  langs:\n  - csharp\n  - vb\n  name: Write7BitEncodedInt(Int32)\n  fullName: System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write7BitEncodedInt\n    path: src/mscorlib/src/System/IO/BinaryWriter.cs\n    startLine: 404\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a 32-bit integer in a compressed format.</p>\\n\"\n  syntax:\n    content: protected void Write7BitEncodedInt(int value)\n    content.vb: Protected Sub Write7BitEncodedInt(value As Integer)\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The 32-bit integer to be written. </p>\\n\"\n  exceptions:\n  - type: System.IO.EndOfStreamException\n    commentId: T:System.IO.EndOfStreamException\n    description: \"\\n<p>The end of the stream is reached. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: BinaryWriter.Write7BitEncodedInt(Int32)\nreferences:\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  nameWithType: System.IO\n  commentId: N:System.IO\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.IO.BinaryWriter\n  parent: System.IO\n  isExternal: false\n  name: BinaryWriter\n  fullName: System.IO.BinaryWriter\n  nameWithType: BinaryWriter\n  commentId: T:System.IO.BinaryWriter\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  fullName: System.IO.Stream\n  nameWithType: Stream\n  commentId: T:System.IO.Stream\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: false\n  name: Encoding\n  fullName: System.Text.Encoding\n  nameWithType: Encoding\n  commentId: T:System.Text.Encoding\n- uid: System.Text\n  isExternal: false\n  name: System.Text\n  fullName: System.Text\n  nameWithType: System.Text\n  commentId: N:System.Text\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDisposable.Dispose()\n  commentId: M:System.IDisposable.Dispose\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.IO.SeekOrigin\n  parent: System.IO\n  isExternal: false\n  name: SeekOrigin\n  fullName: System.IO.SeekOrigin\n  nameWithType: SeekOrigin\n  commentId: T:System.IO.SeekOrigin\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  nameWithType: Byte\n  commentId: T:System.Byte\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  nameWithType: Char\n  commentId: T:System.Char\n- uid: System.Char[]\n  name: Char[]\n  fullName: System.Char[]\n  fullname.vb: System.Char()\n  name.vb: Char()\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Char[]\n  nameWithType.vb: Char()\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  fullName: System.Decimal\n  nameWithType: Decimal\n  commentId: T:System.Decimal\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  nameWithType: Double\n  commentId: T:System.Double\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  nameWithType: Int16\n  commentId: T:System.Int16\n- uid: System.SByte\n  parent: System\n  isExternal: false\n  name: SByte\n  fullName: System.SByte\n  nameWithType: SByte\n  commentId: T:System.SByte\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  nameWithType: Single\n  commentId: T:System.Single\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.UInt16\n  parent: System\n  isExternal: false\n  name: UInt16\n  fullName: System.UInt16\n  nameWithType: UInt16\n  commentId: T:System.UInt16\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  fullName: System.UInt32\n  nameWithType: UInt32\n  commentId: T:System.UInt32\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  fullName: System.UInt64\n  nameWithType: UInt64\n  commentId: T:System.UInt64\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  fullName: System.IO.IOException\n  nameWithType: IOException\n  commentId: T:System.IO.IOException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.IO.EndOfStreamException\n  isExternal: false\n  name: EndOfStreamException\n  fullName: System.IO.EndOfStreamException\n  nameWithType: EndOfStreamException\n  commentId: T:System.IO.EndOfStreamException\n"}