{"nodes":[{"pos":[1072,1102],"content":"EventRegistrationTokenTable<T>","needQuote":true,"nodes":[{"content":"EventRegistrationTokenTable&lt;T&gt;","pos":[0,30],"source":"EventRegistrationTokenTable<T>"}]},{"content":"\\n&lt;p&gt;The type of the event handler delegate for a particular event.","pos":[2084,2151],"source":"\\n<p>The type of the event handler delegate for a particular event."},{"content":"&lt;/p&gt;\\n","pos":[2152,2158],"source":" </p>\\n"},{"pos":[3156,3185],"content":"EventRegistrationTokenTable()","needQuote":true,"nodes":[{"content":"EventRegistrationTokenTable()","pos":[0,29]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;T&lt;/em&gt; is not a delegate type.","pos":[4201,4242],"source":"\\n<p>\\n<em>T</em> is not a delegate type."},{"content":"&lt;/p&gt;\\n","pos":[4243,4249],"source":" </p>\\n"},{"pos":[4940,4954],"content":"InvocationList","needQuote":true,"nodes":[{"content":"InvocationList","pos":[0,14]}]},{"content":"\\n&lt;p&gt;A delegate of type &lt;em&gt;T&lt;/em&gt; that represents all the event handler delegates that are currently registered for an event.","pos":[5969,6095],"source":"\\n<p>A delegate of type <em>T</em> that represents all the event handler delegates that are currently registered for an event."},{"content":"&lt;/p&gt;\\n","pos":[6096,6102],"source":" </p>\\n"},{"pos":[6779,6797],"content":"AddEventHandler(T)","needQuote":true,"nodes":[{"content":"AddEventHandler(T)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The event handler to add.","pos":[7794,7824],"source":"\\n<p>The event handler to add."},{"content":"&lt;/p&gt;\\n","pos":[7825,7831],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A token that can be used to remove the event handler from the table and the invocation list.","pos":[7946,8043],"source":"\\n<p>A token that can be used to remove the event handler from the table and the invocation list."},{"content":"&lt;/p&gt;\\n","pos":[8044,8050],"source":" </p>\\n"},{"pos":[9020,9094],"content":"GetOrCreateEventRegistrationTokenTable(ref EventRegistrationTokenTable<T>)","needQuote":true,"nodes":[{"content":"GetOrCreateEventRegistrationTokenTable(ref EventRegistrationTokenTable&lt;T&gt;)","pos":[0,74],"source":"GetOrCreateEventRegistrationTokenTable(ref EventRegistrationTokenTable<T>)"}]},{"content":"\\n&lt;p&gt;An event registration token table, passed by reference.","pos":[10462,10522],"source":"\\n<p>An event registration token table, passed by reference."},{"content":"&lt;/p&gt;\\n","pos":[10523,10529],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The event registration token table that is specified by &lt;em&gt;refEventTable&lt;/em&gt;, if it is not &lt;strong&gt;null&lt;/strong&gt;; otherwise, a new event registration token table.&lt;/p&gt;\\n","pos":[10651,10826],"source":"\\n<p>The event registration token table that is specified by <em>refEventTable</em>, if it is not <strong>null</strong>; otherwise, a new event registration token table.</p>\\n"},{"pos":[11845,11866],"content":"RemoveEventHandler(T)","needQuote":true,"nodes":[{"content":"RemoveEventHandler(T)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The event handler to remove.","pos":[12772,12805],"source":"\\n<p>The event handler to remove."},{"content":"&lt;/p&gt;\\n","pos":[12806,12812],"source":" </p>\\n"},{"pos":[13701,13743],"content":"RemoveEventHandler(EventRegistrationToken)","needQuote":true,"nodes":[{"content":"RemoveEventHandler(EventRegistrationToken)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;The token that was returned when the event handler was added.","pos":[14840,14906],"source":"\\n<p>The token that was returned when the event handler was added."},{"content":"&lt;/p&gt;\\n","pos":[14907,14913],"source":" </p>\\n"},{"pos":[15436,15481],"content":"System.Runtime.InteropServices.WindowsRuntime","needQuote":true,"nodes":[{"content":"System.Runtime.InteropServices.WindowsRuntime","pos":[0,45]}]},{"pos":[15729,15735],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15895,15905],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[16000,16008],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[16077,16078],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16105,16106],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16176,16184],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[16253,16254],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16281,16282],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16465,16479],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[16598,16604],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16671,16672],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16722,16728],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16788,16789],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16872,16878],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16945,16946],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16996,17002],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17062,17063],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17277,17299],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[17447,17453],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17520,17521],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17571,17577],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17638,17639]},{"pos":[17694,17700],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17760,17761],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17858,17864],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17931,17932],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17982,17988],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18049,18050]},{"pos":[18105,18111],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18171,18172],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18417,18448],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[18614,18629],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[18705,18706],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18756,18762],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18823,18824]},{"pos":[18879,18885],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18945,18946],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19052,19067],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[19143,19144],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19194,19200],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19261,19262]},{"pos":[19317,19323],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19383,19384],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19614,19627],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[19728,19739],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[19811,19812],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19839,19840],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19913,19924],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[19996,19997],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20024,20025],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20200,20209],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[20302,20309],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[20377,20378],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20405,20406],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20475,20482],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[20550,20551],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20578,20579],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20754,20771],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[20880,20895],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[20971,20972],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20999,21000],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21077,21092],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[21168,21169],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21196,21197],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21342,21348],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[21450,21451],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[21540,21541],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[21734,21756],"content":"EventRegistrationToken","needQuote":true,"nodes":[{"content":"EventRegistrationToken","pos":[0,22]}]},{"pos":[22128,22158],"content":"EventRegistrationTokenTable<T>","needQuote":true,"nodes":[{"content":"EventRegistrationTokenTable&lt;T&gt;","pos":[0,30],"source":"EventRegistrationTokenTable<T>"}]},{"pos":[22498,22525],"content":"EventRegistrationTokenTable","needQuote":true,"nodes":[{"content":"EventRegistrationTokenTable","pos":[0,27]}]},{"pos":[22624,22625],"content":"<","needQuote":true,"nodes":[]},{"pos":[22652,22653],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[22808,22835],"content":"EventRegistrationTokenTable","needQuote":true,"nodes":[{"content":"EventRegistrationTokenTable","pos":[0,27]}]},{"content":"(Of","pos":[22935,22938]},{"pos":[22972,22973],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[23000,23001],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23294,23319],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]}],"content":"items:\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  commentId: T:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  id: EventRegistrationTokenTable`1\n  parent: System.Runtime.InteropServices.WindowsRuntime\n  children:\n  - System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.#ctor\n  - System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.AddEventHandler(`0)\n  - System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.GetOrCreateEventRegistrationTokenTable(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable{`0}@)\n  - System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.InvocationList\n  - System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.RemoveEventHandler(`0)\n  - System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.RemoveEventHandler(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)\n  langs:\n  - csharp\n  - vb\n  name: EventRegistrationTokenTable<T>\n  fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable<T>\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationTokenTable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EventRegistrationTokenTable\n    path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationTokenTable.cs\n    startLine: 15\n  assemblies:\n  - System.Runtime.InteropServices.WindowsRuntime\n  namespace: System.Runtime.InteropServices.WindowsRuntime\n  summary: \"\\n<p>Stores mappings between delegates and event tokens, to support the implementation of a Windows Runtime event in managed code.</p>\\n\"\n  syntax:\n    content: >-\n      public sealed class EventRegistrationTokenTable<T>\n          where T : class\n    content.vb: Public NotInheritable Class EventRegistrationTokenTable(Of T As Class)\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the event handler delegate for a particular event. </p>\\n\"\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  fullName.vb: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable(Of T)\n  name.vb: EventRegistrationTokenTable(Of T)\n  nameWithType: EventRegistrationTokenTable<T>\n  nameWithType.vb: EventRegistrationTokenTable(Of T)\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.#ctor\n  commentId: M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.#ctor\n  id: '#ctor'\n  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  langs:\n  - csharp\n  - vb\n  name: EventRegistrationTokenTable()\n  fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable<T>.EventRegistrationTokenTable()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationTokenTable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationTokenTable.cs\n    startLine: 24\n  assemblies:\n  - System.Runtime.InteropServices.WindowsRuntime\n  namespace: System.Runtime.InteropServices.WindowsRuntime\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. </p>\\n\"\n  syntax:\n    content: public EventRegistrationTokenTable()\n    content.vb: Public Sub New\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>T</em> is not a delegate type. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable(Of T).EventRegistrationTokenTable()\n  nameWithType: EventRegistrationTokenTable<T>.EventRegistrationTokenTable()\n  nameWithType.vb: EventRegistrationTokenTable(Of T).EventRegistrationTokenTable()\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.InvocationList\n  commentId: P:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.InvocationList\n  id: InvocationList\n  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  langs:\n  - csharp\n  - vb\n  name: InvocationList\n  fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable<T>.InvocationList\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationTokenTable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: InvocationList\n    path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationTokenTable.cs\n    startLine: 36\n  assemblies:\n  - System.Runtime.InteropServices.WindowsRuntime\n  namespace: System.Runtime.InteropServices.WindowsRuntime\n  summary: \"\\n<p>Gets or sets a delegate of type <em>T</em> whose invocation list includes all the event handler delegates that have been added, and that have not yet been removed. Invoking this delegate invokes all the event handlers. </p>\\n\"\n  syntax:\n    content: public T InvocationList { get; set; }\n    content.vb: Public Property InvocationList As T\n    parameters: []\n    return:\n      type: '{T}'\n      description: \"\\n<p>A delegate of type <em>T</em> that represents all the event handler delegates that are currently registered for an event. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable(Of T).InvocationList\n  nameWithType: EventRegistrationTokenTable<T>.InvocationList\n  nameWithType.vb: EventRegistrationTokenTable(Of T).InvocationList\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.AddEventHandler(`0)\n  commentId: M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.AddEventHandler(`0)\n  id: AddEventHandler(`0)\n  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  langs:\n  - csharp\n  - vb\n  name: AddEventHandler(T)\n  fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable<T>.AddEventHandler(T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationTokenTable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddEventHandler\n    path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationTokenTable.cs\n    startLine: 59\n  assemblies:\n  - System.Runtime.InteropServices.WindowsRuntime\n  namespace: System.Runtime.InteropServices.WindowsRuntime\n  summary: \"\\n<p>Adds the specified event handler to the table and to the invocation list, and returns a token that can be used to remove the event handler. </p>\\n\"\n  syntax:\n    content: public EventRegistrationToken AddEventHandler(T handler)\n    content.vb: Public Function AddEventHandler(handler As T) As EventRegistrationToken\n    parameters:\n    - id: handler\n      type: '{T}'\n      description: \"\\n<p>The event handler to add. </p>\\n\"\n    return:\n      type: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken\n      description: \"\\n<p>A token that can be used to remove the event handler from the table and the invocation list. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable(Of T).AddEventHandler(T)\n  nameWithType: EventRegistrationTokenTable<T>.AddEventHandler(T)\n  nameWithType.vb: EventRegistrationTokenTable(Of T).AddEventHandler(T)\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.GetOrCreateEventRegistrationTokenTable(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable{`0}@)\n  commentId: M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.GetOrCreateEventRegistrationTokenTable(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable{`0}@)\n  id: GetOrCreateEventRegistrationTokenTable(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable{`0}@)\n  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  langs:\n  - csharp\n  - vb\n  name: GetOrCreateEventRegistrationTokenTable(ref EventRegistrationTokenTable<T>)\n  fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable<T>.GetOrCreateEventRegistrationTokenTable(ref System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable<T>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationTokenTable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetOrCreateEventRegistrationTokenTable\n    path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationTokenTable.cs\n    startLine: 245\n  assemblies:\n  - System.Runtime.InteropServices.WindowsRuntime\n  namespace: System.Runtime.InteropServices.WindowsRuntime\n  summary: \"\\n<p>Returns the specified event registration token table, if it is not <strong>null</strong>; otherwise, returns a new event registration token table. </p>\\n\"\n  syntax:\n    content: public static EventRegistrationTokenTable<T> GetOrCreateEventRegistrationTokenTable(ref EventRegistrationTokenTable<T> refEventTable)\n    content.vb: Public Shared Function GetOrCreateEventRegistrationTokenTable(ByRef refEventTable As EventRegistrationTokenTable(Of T)) As EventRegistrationTokenTable(Of T)\n    parameters:\n    - id: refEventTable\n      type: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n      description: \"\\n<p>An event registration token table, passed by reference. </p>\\n\"\n    return:\n      type: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n      description: \"\\n<p>The event registration token table that is specified by <em>refEventTable</em>, if it is not <strong>null</strong>; otherwise, a new event registration token table.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable(Of T).GetOrCreateEventRegistrationTokenTable(ByRef System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable(Of T))\n  name.vb: GetOrCreateEventRegistrationTokenTable(ByRef EventRegistrationTokenTable(Of T))\n  nameWithType: EventRegistrationTokenTable<T>.GetOrCreateEventRegistrationTokenTable(ref EventRegistrationTokenTable<T>)\n  nameWithType.vb: EventRegistrationTokenTable(Of T).GetOrCreateEventRegistrationTokenTable(ByRef EventRegistrationTokenTable(Of T))\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.RemoveEventHandler(`0)\n  commentId: M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.RemoveEventHandler(`0)\n  id: RemoveEventHandler(`0)\n  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  langs:\n  - csharp\n  - vb\n  name: RemoveEventHandler(T)\n  fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable<T>.RemoveEventHandler(T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationTokenTable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RemoveEventHandler\n    path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationTokenTable.cs\n    startLine: 185\n  assemblies:\n  - System.Runtime.InteropServices.WindowsRuntime\n  namespace: System.Runtime.InteropServices.WindowsRuntime\n  summary: \"\\n<p>Removes the specified event handler delegate from the table and the invocation list. </p>\\n\"\n  syntax:\n    content: public void RemoveEventHandler(T handler)\n    content.vb: Public Sub RemoveEventHandler(handler As T)\n    parameters:\n    - id: handler\n      type: '{T}'\n      description: \"\\n<p>The event handler to remove. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable(Of T).RemoveEventHandler(T)\n  nameWithType: EventRegistrationTokenTable<T>.RemoveEventHandler(T)\n  nameWithType.vb: EventRegistrationTokenTable(Of T).RemoveEventHandler(T)\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.RemoveEventHandler(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)\n  commentId: M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.RemoveEventHandler(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)\n  id: RemoveEventHandler(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)\n  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  langs:\n  - csharp\n  - vb\n  name: RemoveEventHandler(EventRegistrationToken)\n  fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable<T>.RemoveEventHandler(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationTokenTable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RemoveEventHandler\n    path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationTokenTable.cs\n    startLine: 171\n  assemblies:\n  - System.Runtime.InteropServices.WindowsRuntime\n  namespace: System.Runtime.InteropServices.WindowsRuntime\n  summary: \"\\n<p>Removes the event handler that is associated with the specified token from the table and the invocation list. </p>\\n\"\n  syntax:\n    content: public void RemoveEventHandler(EventRegistrationToken token)\n    content.vb: Public Sub RemoveEventHandler(token As EventRegistrationToken)\n    parameters:\n    - id: token\n      type: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken\n      description: \"\\n<p>The token that was returned when the event handler was added. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable(Of T).RemoveEventHandler(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)\n  nameWithType: EventRegistrationTokenTable<T>.RemoveEventHandler(EventRegistrationToken)\n  nameWithType.vb: EventRegistrationTokenTable(Of T).RemoveEventHandler(EventRegistrationToken)\nreferences:\n- uid: System.Runtime.InteropServices.WindowsRuntime\n  isExternal: false\n  name: System.Runtime.InteropServices.WindowsRuntime\n  fullName: System.Runtime.InteropServices.WindowsRuntime\n  nameWithType: System.Runtime.InteropServices.WindowsRuntime\n  commentId: N:System.Runtime.InteropServices.WindowsRuntime\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: '{T}'\n  definition: T\n  name: T\n  fullName: T\n  nameWithType: T\n  commentId: '!:T'\n- uid: T\n  isExternal: false\n  name: T\n  fullName: T\n  nameWithType: T\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken\n  parent: System.Runtime.InteropServices.WindowsRuntime\n  isExternal: false\n  name: EventRegistrationToken\n  fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken\n  nameWithType: EventRegistrationToken\n  commentId: T:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n  parent: System.Runtime.InteropServices.WindowsRuntime\n  isExternal: false\n  name: EventRegistrationTokenTable<T>\n  fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable<T>\n  fullname.vb: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable(Of T)\n  name.vb: EventRegistrationTokenTable(Of T)\n  spec.csharp:\n  - uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n    name: EventRegistrationTokenTable\n    fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n    name: EventRegistrationTokenTable\n    fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: EventRegistrationTokenTable<T>\n  nameWithType.vb: EventRegistrationTokenTable(Of T)\n  commentId: T:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n"}