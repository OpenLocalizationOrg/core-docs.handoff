{"nodes":[{"pos":[1507,1523],"content":"CngKeyBlobFormat","needQuote":true,"nodes":[{"content":"CngKeyBlobFormat","pos":[0,16]}]},{"pos":[3067,3091],"content":"CngKeyBlobFormat(String)","needQuote":true,"nodes":[{"content":"CngKeyBlobFormat(String)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The key BLOB format to initialize.&lt;/p&gt;\\n","pos":[3987,4032],"source":"\\n<p>The key BLOB format to initialize.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;format&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[4151,4217],"source":"\\n<p>The <em>format</em> parameter is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;format&lt;/em&gt; parameter length is 0 (zero).&lt;/p&gt;\\n","pos":[4314,4374],"source":"\\n<p>The <em>format</em> parameter length is 0 (zero).</p>\\n"},{"pos":[4760,4778],"content":"EccFullPrivateBlob","needQuote":true,"nodes":[{"content":"EccFullPrivateBlob","pos":[0,18]}]},{"pos":[5956,5973],"content":"EccFullPublicBlob","needQuote":true,"nodes":[{"content":"EccFullPublicBlob","pos":[0,17]}]},{"pos":[7137,7151],"content":"EccPrivateBlob","needQuote":true,"nodes":[{"content":"EccPrivateBlob","pos":[0,14]}]},{"content":"\\n&lt;p&gt;An object that specifies an ECC private key BLOB.&lt;/p&gt;\\n","pos":[8139,8199],"source":"\\n<p>An object that specifies an ECC private key BLOB.</p>\\n"},{"pos":[8603,8616],"content":"EccPublicBlob","needQuote":true,"nodes":[{"content":"EccPublicBlob","pos":[0,13]}]},{"content":"\\n&lt;p&gt;An object that specifies an ECC public key BLOB.&lt;/p&gt;\\n","pos":[9599,9658],"source":"\\n<p>An object that specifies an ECC public key BLOB.</p>\\n"},{"pos":[10040,10046],"content":"Format","needQuote":true,"nodes":[{"content":"Format","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The embedded key BLOB format name.&lt;/p&gt;\\n","pos":[10914,10959],"source":"\\n<p>The embedded key BLOB format name.</p>\\n"},{"pos":[11348,11366],"content":"GenericPrivateBlob","needQuote":true,"nodes":[{"content":"GenericPrivateBlob","pos":[0,18]}]},{"content":"\\n&lt;p&gt;An object that specifies a generic private key BLOB.&lt;/p&gt;\\n","pos":[12333,12396],"source":"\\n<p>An object that specifies a generic private key BLOB.</p>\\n"},{"pos":[12816,12833],"content":"GenericPublicBlob","needQuote":true,"nodes":[{"content":"GenericPublicBlob","pos":[0,17]}]},{"content":"\\n&lt;p&gt;An object that specifies a generic public key BLOB.&lt;/p&gt;\\n","pos":[13795,13857],"source":"\\n<p>An object that specifies a generic public key BLOB.</p>\\n"},{"pos":[14282,14301],"content":"OpaqueTransportBlob","needQuote":true,"nodes":[{"content":"OpaqueTransportBlob","pos":[0,19]}]},{"content":"\\n&lt;p&gt;An object that specifies an opaque transport key BLOB.&lt;/p&gt;\\n","pos":[15274,15339],"source":"\\n<p>An object that specifies an opaque transport key BLOB.</p>\\n"},{"pos":[15757,15773],"content":"Pkcs8PrivateBlob","needQuote":true,"nodes":[{"content":"Pkcs8PrivateBlob","pos":[0,16]}]},{"content":"\\n&lt;p&gt;An object that specifies a PKCS #8 private key BLOB.&lt;/p&gt;\\n","pos":[16766,16829],"source":"\\n<p>An object that specifies a PKCS #8 private key BLOB.</p>\\n"},{"pos":[17259,17273],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[19224,19248],"content":"Equals(CngKeyBlobFormat)","needQuote":true,"nodes":[{"content":"Equals(CngKeyBlobFormat)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;other&lt;/em&gt; parameter specifies the same key BLOB format as the current object; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[20538,20697],"source":"\\n<p>\\n<strong>true</strong> if the <em>other</em> parameter specifies the same key BLOB format as the current object; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[21199,21212],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The hash value of the embedded key BLOB format.","pos":[22088,22140],"source":"\\n<p>The hash value of the embedded key BLOB format."},{"content":"&lt;/p&gt;\\n","pos":[22141,22147],"source":" </p>\\n"},{"pos":[22847,22891],"content":"Equality(CngKeyBlobFormat, CngKeyBlobFormat)","needQuote":true,"nodes":[{"content":"Equality(CngKeyBlobFormat, CngKeyBlobFormat)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;An object that specifies a key BLOB format.&lt;/p&gt;\\n","pos":[23980,24034],"source":"\\n<p>An object that specifies a key BLOB format.</p>\\n"},{"content":"\\n&lt;p&gt;A second object, to be compared to the object identified by the &lt;em&gt;left&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[24130,24229],"source":"\\n<p>A second object, to be compared to the object identified by the <em>left</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two objects specify the same key BLOB format; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[24290,24412],"source":"\\n<p>\\n<strong>true</strong> if the two objects specify the same key BLOB format; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[25104,25150],"content":"Inequality(CngKeyBlobFormat, CngKeyBlobFormat)","needQuote":true,"nodes":[{"content":"Inequality(CngKeyBlobFormat, CngKeyBlobFormat)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;An object that specifies a key BLOB format.&lt;/p&gt;\\n","pos":[26251,26305],"source":"\\n<p>An object that specifies a key BLOB format.</p>\\n"},{"content":"\\n&lt;p&gt;A second object, to be compared to the object identified by the &lt;em&gt;left&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[26401,26500],"source":"\\n<p>A second object, to be compared to the object identified by the <em>left</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two objects do not specify the same key BLOB format; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[26561,26690],"source":"\\n<p>\\n<strong>true</strong> if the two objects do not specify the same key BLOB format; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[27090,27100],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The embedded key BLOB format name.&lt;/p&gt;\\n","pos":[27960,28005],"source":"\\n<p>The embedded key BLOB format name.</p>\\n"},{"pos":[28249,28277],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[28474,28480],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28690,28718],"content":"IEquatable<CngKeyBlobFormat>","needQuote":true,"nodes":[{"content":"IEquatable&lt;CngKeyBlobFormat&gt;","pos":[0,28],"source":"IEquatable<CngKeyBlobFormat>"}]},{"pos":[28976,28986],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[29050,29051],"content":"<","needQuote":true,"nodes":[]},{"pos":[29133,29149],"content":"CngKeyBlobFormat","needQuote":true,"nodes":[{"content":"CngKeyBlobFormat","pos":[0,16]}]},{"pos":[29292,29302],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[29367,29370]},{"pos":[29459,29475],"content":"CngKeyBlobFormat","needQuote":true,"nodes":[{"content":"CngKeyBlobFormat","pos":[0,16]}]},{"pos":[29546,29547],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29848,29870],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[30018,30024],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[30091,30092],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30142,30148],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30209,30210]},{"pos":[30265,30271],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30331,30332],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30429,30435],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[30502,30503],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30553,30559],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30620,30621]},{"pos":[30676,30682],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30742,30743],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30988,31019],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[31185,31200],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[31276,31277],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31327,31333],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[31394,31395]},{"pos":[31450,31456],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31516,31517],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31623,31638],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[31714,31715],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31765,31771],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[31832,31833]},{"pos":[31888,31894],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31954,31955],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32181,32190],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[32283,32290],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[32358,32359],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32386,32387],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32456,32463],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[32531,32532],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32559,32560],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32735,32752],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[32861,32876],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[32952,32953],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32980,32981],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33058,33073],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[33149,33150],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33177,33178],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33323,33329],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[33449,33462],"content":"IEquatable<T>","needQuote":true,"nodes":[{"content":"IEquatable&lt;T&gt;","pos":[0,13],"source":"IEquatable<T>"}]},{"pos":[33617,33627],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[33670,33671],"content":"<","needQuote":true,"nodes":[]},{"pos":[33698,33699],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[33798,33808],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[33852,33855]},{"pos":[33889,33890],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[33917,33918],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34102,34108],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[34307,34323],"content":"CngKeyBlobFormat","needQuote":true,"nodes":[{"content":"CngKeyBlobFormat","pos":[0,16]}]},{"pos":[34570,34584],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[34703,34709],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[34776,34777],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34827,34833],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34893,34894],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34977,34983],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[35050,35051],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35101,35107],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[35167,35168],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35341,35348],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[35684,35708],"content":"Equals(CngKeyBlobFormat)","needQuote":true,"nodes":[{"content":"Equals(CngKeyBlobFormat)","pos":[0,24]}]},{"pos":[36042,36048],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[36166,36167],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36249,36265],"content":"CngKeyBlobFormat","needQuote":true,"nodes":[{"content":"CngKeyBlobFormat","pos":[0,16]}]},{"pos":[36336,36337],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36415,36421],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[36542,36543],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36625,36641],"content":"CngKeyBlobFormat","needQuote":true,"nodes":[{"content":"CngKeyBlobFormat","pos":[0,16]}]},{"pos":[36712,36713],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37076,37085],"content":"Equals(T)","needQuote":true,"nodes":[{"content":"Equals(T)","pos":[0,9]}]},{"pos":[37243,37249],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[37302,37303],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37330,37331],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[37358,37359],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37437,37443],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[37499,37500],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37527,37528],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[37555,37556],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37789,37802],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[37903,37914],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[37986,37987],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38014,38015],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38088,38099],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[38171,38172],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38199,38200],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38360,38365],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[38522,38532],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[38627,38635],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[38704,38705],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38732,38733],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38803,38811],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[38880,38881],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38908,38909],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39062,39083],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[39284,39301],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Security.Cryptography.CngKeyBlobFormat\n  commentId: T:System.Security.Cryptography.CngKeyBlobFormat\n  id: CngKeyBlobFormat\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.CngKeyBlobFormat.#ctor(System.String)\n  - System.Security.Cryptography.CngKeyBlobFormat.EccFullPrivateBlob\n  - System.Security.Cryptography.CngKeyBlobFormat.EccFullPublicBlob\n  - System.Security.Cryptography.CngKeyBlobFormat.EccPrivateBlob\n  - System.Security.Cryptography.CngKeyBlobFormat.EccPublicBlob\n  - System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Object)\n  - System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Security.Cryptography.CngKeyBlobFormat)\n  - System.Security.Cryptography.CngKeyBlobFormat.Format\n  - System.Security.Cryptography.CngKeyBlobFormat.GenericPrivateBlob\n  - System.Security.Cryptography.CngKeyBlobFormat.GenericPublicBlob\n  - System.Security.Cryptography.CngKeyBlobFormat.GetHashCode\n  - System.Security.Cryptography.CngKeyBlobFormat.op_Equality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)\n  - System.Security.Cryptography.CngKeyBlobFormat.op_Inequality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)\n  - System.Security.Cryptography.CngKeyBlobFormat.OpaqueTransportBlob\n  - System.Security.Cryptography.CngKeyBlobFormat.Pkcs8PrivateBlob\n  - System.Security.Cryptography.CngKeyBlobFormat.ToString\n  langs:\n  - csharp\n  - vb\n  name: CngKeyBlobFormat\n  fullName: System.Security.Cryptography.CngKeyBlobFormat\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CngKeyBlobFormat\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 137\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Specifies a key BLOB format for use with Microsoft Cryptography Next Generation (CNG) objects. </p>\\n\"\n  syntax:\n    content: 'public sealed class CngKeyBlobFormat : IEquatable<CngKeyBlobFormat>'\n    content.vb: >-\n      Public NotInheritable Class CngKeyBlobFormat\n          Implements IEquatable(Of CngKeyBlobFormat)\n  inheritance:\n  - System.Object\n  implements:\n  - System.IEquatable{System.Security.Cryptography.CngKeyBlobFormat}\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: CngKeyBlobFormat\n- uid: System.Security.Cryptography.CngKeyBlobFormat.#ctor(System.String)\n  commentId: M:System.Security.Cryptography.CngKeyBlobFormat.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Security.Cryptography.CngKeyBlobFormat\n  langs:\n  - csharp\n  - vb\n  name: CngKeyBlobFormat(String)\n  fullName: System.Security.Cryptography.CngKeyBlobFormat.CngKeyBlobFormat(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 139\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.CngKeyBlobFormat\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class by using the specified format.</p>\\n\"\n  syntax:\n    content: public CngKeyBlobFormat(string format)\n    content.vb: Public Sub New(format As String)\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>The key BLOB format to initialize.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>format</em> parameter is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>format</em> parameter length is 0 (zero).</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CngKeyBlobFormat.CngKeyBlobFormat(String)\n- uid: System.Security.Cryptography.CngKeyBlobFormat.EccFullPrivateBlob\n  commentId: P:System.Security.Cryptography.CngKeyBlobFormat.EccFullPrivateBlob\n  id: EccFullPrivateBlob\n  parent: System.Security.Cryptography.CngKeyBlobFormat\n  langs:\n  - csharp\n  - vb\n  name: EccFullPrivateBlob\n  fullName: System.Security.Cryptography.CngKeyBlobFormat.EccFullPrivateBlob\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EccFullPrivateBlob\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 140\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static CngKeyBlobFormat EccFullPrivateBlob { get; }\n    content.vb: Public Shared ReadOnly Property EccFullPrivateBlob As CngKeyBlobFormat\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngKeyBlobFormat\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngKeyBlobFormat.EccFullPrivateBlob\n- uid: System.Security.Cryptography.CngKeyBlobFormat.EccFullPublicBlob\n  commentId: P:System.Security.Cryptography.CngKeyBlobFormat.EccFullPublicBlob\n  id: EccFullPublicBlob\n  parent: System.Security.Cryptography.CngKeyBlobFormat\n  langs:\n  - csharp\n  - vb\n  name: EccFullPublicBlob\n  fullName: System.Security.Cryptography.CngKeyBlobFormat.EccFullPublicBlob\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EccFullPublicBlob\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 141\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static CngKeyBlobFormat EccFullPublicBlob { get; }\n    content.vb: Public Shared ReadOnly Property EccFullPublicBlob As CngKeyBlobFormat\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngKeyBlobFormat\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngKeyBlobFormat.EccFullPublicBlob\n- uid: System.Security.Cryptography.CngKeyBlobFormat.EccPrivateBlob\n  commentId: P:System.Security.Cryptography.CngKeyBlobFormat.EccPrivateBlob\n  id: EccPrivateBlob\n  parent: System.Security.Cryptography.CngKeyBlobFormat\n  langs:\n  - csharp\n  - vb\n  name: EccPrivateBlob\n  fullName: System.Security.Cryptography.CngKeyBlobFormat.EccPrivateBlob\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EccPrivateBlob\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 142\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Security.Cryptography.CngKeyBlobFormat\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies a private key BLOB for an elliptic curve cryptography (ECC) key.</p>\\n\"\n  syntax:\n    content: public static CngKeyBlobFormat EccPrivateBlob { get; }\n    content.vb: Public Shared ReadOnly Property EccPrivateBlob As CngKeyBlobFormat\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngKeyBlobFormat\n      description: \"\\n<p>An object that specifies an ECC private key BLOB.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngKeyBlobFormat.EccPrivateBlob\n- uid: System.Security.Cryptography.CngKeyBlobFormat.EccPublicBlob\n  commentId: P:System.Security.Cryptography.CngKeyBlobFormat.EccPublicBlob\n  id: EccPublicBlob\n  parent: System.Security.Cryptography.CngKeyBlobFormat\n  langs:\n  - csharp\n  - vb\n  name: EccPublicBlob\n  fullName: System.Security.Cryptography.CngKeyBlobFormat.EccPublicBlob\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EccPublicBlob\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 143\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Security.Cryptography.CngKeyBlobFormat\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies a public key BLOB for an elliptic curve cryptography (ECC) key.</p>\\n\"\n  syntax:\n    content: public static CngKeyBlobFormat EccPublicBlob { get; }\n    content.vb: Public Shared ReadOnly Property EccPublicBlob As CngKeyBlobFormat\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngKeyBlobFormat\n      description: \"\\n<p>An object that specifies an ECC public key BLOB.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngKeyBlobFormat.EccPublicBlob\n- uid: System.Security.Cryptography.CngKeyBlobFormat.Format\n  commentId: P:System.Security.Cryptography.CngKeyBlobFormat.Format\n  id: Format\n  parent: System.Security.Cryptography.CngKeyBlobFormat\n  langs:\n  - csharp\n  - vb\n  name: Format\n  fullName: System.Security.Cryptography.CngKeyBlobFormat.Format\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Format\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 144\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the name of the key BLOB format that the current <xref href=\\\"System.Security.Cryptography.CngKeyBlobFormat\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object specifies.</p>\\n\"\n  syntax:\n    content: public string Format { get; }\n    content.vb: Public ReadOnly Property Format As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The embedded key BLOB format name.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CngKeyBlobFormat.Format\n- uid: System.Security.Cryptography.CngKeyBlobFormat.GenericPrivateBlob\n  commentId: P:System.Security.Cryptography.CngKeyBlobFormat.GenericPrivateBlob\n  id: GenericPrivateBlob\n  parent: System.Security.Cryptography.CngKeyBlobFormat\n  langs:\n  - csharp\n  - vb\n  name: GenericPrivateBlob\n  fullName: System.Security.Cryptography.CngKeyBlobFormat.GenericPrivateBlob\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GenericPrivateBlob\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 145\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Security.Cryptography.CngKeyBlobFormat\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies a generic private key BLOB.</p>\\n\"\n  syntax:\n    content: public static CngKeyBlobFormat GenericPrivateBlob { get; }\n    content.vb: Public Shared ReadOnly Property GenericPrivateBlob As CngKeyBlobFormat\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngKeyBlobFormat\n      description: \"\\n<p>An object that specifies a generic private key BLOB.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngKeyBlobFormat.GenericPrivateBlob\n- uid: System.Security.Cryptography.CngKeyBlobFormat.GenericPublicBlob\n  commentId: P:System.Security.Cryptography.CngKeyBlobFormat.GenericPublicBlob\n  id: GenericPublicBlob\n  parent: System.Security.Cryptography.CngKeyBlobFormat\n  langs:\n  - csharp\n  - vb\n  name: GenericPublicBlob\n  fullName: System.Security.Cryptography.CngKeyBlobFormat.GenericPublicBlob\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GenericPublicBlob\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 146\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Security.Cryptography.CngKeyBlobFormat\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies a generic public key BLOB.</p>\\n\"\n  syntax:\n    content: public static CngKeyBlobFormat GenericPublicBlob { get; }\n    content.vb: Public Shared ReadOnly Property GenericPublicBlob As CngKeyBlobFormat\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngKeyBlobFormat\n      description: \"\\n<p>An object that specifies a generic public key BLOB.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngKeyBlobFormat.GenericPublicBlob\n- uid: System.Security.Cryptography.CngKeyBlobFormat.OpaqueTransportBlob\n  commentId: P:System.Security.Cryptography.CngKeyBlobFormat.OpaqueTransportBlob\n  id: OpaqueTransportBlob\n  parent: System.Security.Cryptography.CngKeyBlobFormat\n  langs:\n  - csharp\n  - vb\n  name: OpaqueTransportBlob\n  fullName: System.Security.Cryptography.CngKeyBlobFormat.OpaqueTransportBlob\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OpaqueTransportBlob\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 147\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Security.Cryptography.CngKeyBlobFormat\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies an opaque transport key BLOB.</p>\\n\"\n  syntax:\n    content: public static CngKeyBlobFormat OpaqueTransportBlob { get; }\n    content.vb: Public Shared ReadOnly Property OpaqueTransportBlob As CngKeyBlobFormat\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngKeyBlobFormat\n      description: \"\\n<p>An object that specifies an opaque transport key BLOB.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngKeyBlobFormat.OpaqueTransportBlob\n- uid: System.Security.Cryptography.CngKeyBlobFormat.Pkcs8PrivateBlob\n  commentId: P:System.Security.Cryptography.CngKeyBlobFormat.Pkcs8PrivateBlob\n  id: Pkcs8PrivateBlob\n  parent: System.Security.Cryptography.CngKeyBlobFormat\n  langs:\n  - csharp\n  - vb\n  name: Pkcs8PrivateBlob\n  fullName: System.Security.Cryptography.CngKeyBlobFormat.Pkcs8PrivateBlob\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Pkcs8PrivateBlob\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 148\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Security.Cryptography.CngKeyBlobFormat\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies a Private Key Information Syntax Standard (PKCS #8) key BLOB.</p>\\n\"\n  syntax:\n    content: public static CngKeyBlobFormat Pkcs8PrivateBlob { get; }\n    content.vb: Public Shared ReadOnly Property Pkcs8PrivateBlob As CngKeyBlobFormat\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngKeyBlobFormat\n      description: \"\\n<p>An object that specifies a PKCS #8 private key BLOB.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngKeyBlobFormat.Pkcs8PrivateBlob\n- uid: System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Object)\n  commentId: M:System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Security.Cryptography.CngKeyBlobFormat\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 149\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Compares the specified object to the current <xref href=\\\"System.Security.Cryptography.CngKeyBlobFormat\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>An object to be compared to the current <xref href=\\\"System.Security.Cryptography.CngKeyBlobFormat\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>obj</em> parameter is a <xref href=\\\"System.Security.Cryptography.CngKeyBlobFormat\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies the same key BLOB format as the current object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CngKeyBlobFormat.Equals(Object)\n- uid: System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Security.Cryptography.CngKeyBlobFormat)\n  commentId: M:System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Security.Cryptography.CngKeyBlobFormat)\n  id: Equals(System.Security.Cryptography.CngKeyBlobFormat)\n  parent: System.Security.Cryptography.CngKeyBlobFormat\n  langs:\n  - csharp\n  - vb\n  name: Equals(CngKeyBlobFormat)\n  fullName: System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Security.Cryptography.CngKeyBlobFormat)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 150\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Compares the specified <xref href=\\\"System.Security.Cryptography.CngKeyBlobFormat\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to the current <xref href=\\\"System.Security.Cryptography.CngKeyBlobFormat\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public bool Equals(CngKeyBlobFormat other)\n    content.vb: Public Function Equals(other As CngKeyBlobFormat) As Boolean\n    parameters:\n    - id: other\n      type: System.Security.Cryptography.CngKeyBlobFormat\n      description: \"\\n<p>An object to be compared to the current <xref href=\\\"System.Security.Cryptography.CngKeyBlobFormat\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>other</em> parameter specifies the same key BLOB format as the current object; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.IEquatable{System.Security.Cryptography.CngKeyBlobFormat}.Equals(System.Security.Cryptography.CngKeyBlobFormat)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CngKeyBlobFormat.Equals(CngKeyBlobFormat)\n- uid: System.Security.Cryptography.CngKeyBlobFormat.GetHashCode\n  commentId: M:System.Security.Cryptography.CngKeyBlobFormat.GetHashCode\n  id: GetHashCode\n  parent: System.Security.Cryptography.CngKeyBlobFormat\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Security.Cryptography.CngKeyBlobFormat.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 151\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Generates a hash value for the embedded key BLOB format in the current <xref href=\\\"System.Security.Cryptography.CngKeyBlobFormat\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The hash value of the embedded key BLOB format. </p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CngKeyBlobFormat.GetHashCode()\n- uid: System.Security.Cryptography.CngKeyBlobFormat.op_Equality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)\n  commentId: M:System.Security.Cryptography.CngKeyBlobFormat.op_Equality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)\n  id: op_Equality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)\n  parent: System.Security.Cryptography.CngKeyBlobFormat\n  langs:\n  - csharp\n  - vb\n  name: Equality(CngKeyBlobFormat, CngKeyBlobFormat)\n  fullName: System.Security.Cryptography.CngKeyBlobFormat.Equality(System.Security.Cryptography.CngKeyBlobFormat, System.Security.Cryptography.CngKeyBlobFormat)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 152\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Determines whether two <xref href=\\\"System.Security.Cryptography.CngKeyBlobFormat\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects specify the same key BLOB format.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(CngKeyBlobFormat left, CngKeyBlobFormat right)\n    content.vb: Public Shared Operator =(left As CngKeyBlobFormat, right As CngKeyBlobFormat) As Boolean\n    parameters:\n    - id: left\n      type: System.Security.Cryptography.CngKeyBlobFormat\n      description: \"\\n<p>An object that specifies a key BLOB format.</p>\\n\"\n    - id: right\n      type: System.Security.Cryptography.CngKeyBlobFormat\n      description: \"\\n<p>A second object, to be compared to the object identified by the <em>left</em> parameter.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two objects specify the same key BLOB format; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CngKeyBlobFormat.Equality(CngKeyBlobFormat, CngKeyBlobFormat)\n- uid: System.Security.Cryptography.CngKeyBlobFormat.op_Inequality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)\n  commentId: M:System.Security.Cryptography.CngKeyBlobFormat.op_Inequality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)\n  id: op_Inequality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)\n  parent: System.Security.Cryptography.CngKeyBlobFormat\n  langs:\n  - csharp\n  - vb\n  name: Inequality(CngKeyBlobFormat, CngKeyBlobFormat)\n  fullName: System.Security.Cryptography.CngKeyBlobFormat.Inequality(System.Security.Cryptography.CngKeyBlobFormat, System.Security.Cryptography.CngKeyBlobFormat)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 153\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Determines whether two <xref href=\\\"System.Security.Cryptography.CngKeyBlobFormat\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects do not specify the same key BLOB format.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(CngKeyBlobFormat left, CngKeyBlobFormat right)\n    content.vb: Public Shared Operator <>(left As CngKeyBlobFormat, right As CngKeyBlobFormat) As Boolean\n    parameters:\n    - id: left\n      type: System.Security.Cryptography.CngKeyBlobFormat\n      description: \"\\n<p>An object that specifies a key BLOB format.</p>\\n\"\n    - id: right\n      type: System.Security.Cryptography.CngKeyBlobFormat\n      description: \"\\n<p>A second object, to be compared to the object identified by the <em>left</em> parameter.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two objects do not specify the same key BLOB format; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CngKeyBlobFormat.Inequality(CngKeyBlobFormat, CngKeyBlobFormat)\n- uid: System.Security.Cryptography.CngKeyBlobFormat.ToString\n  commentId: M:System.Security.Cryptography.CngKeyBlobFormat.ToString\n  id: ToString\n  parent: System.Security.Cryptography.CngKeyBlobFormat\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Security.Cryptography.CngKeyBlobFormat.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 154\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the name of the key BLOB format that the current <xref href=\\\"System.Security.Cryptography.CngKeyBlobFormat\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object specifies.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The embedded key BLOB format name.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CngKeyBlobFormat.ToString()\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.IEquatable{System.Security.Cryptography.CngKeyBlobFormat}\n  parent: System\n  definition: System.IEquatable`1\n  name: IEquatable<CngKeyBlobFormat>\n  fullName: System.IEquatable<System.Security.Cryptography.CngKeyBlobFormat>\n  fullname.vb: System.IEquatable(Of System.Security.Cryptography.CngKeyBlobFormat)\n  name.vb: IEquatable(Of CngKeyBlobFormat)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Security.Cryptography.CngKeyBlobFormat\n    name: CngKeyBlobFormat\n    fullName: System.Security.Cryptography.CngKeyBlobFormat\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Security.Cryptography.CngKeyBlobFormat\n    name: CngKeyBlobFormat\n    fullName: System.Security.Cryptography.CngKeyBlobFormat\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable{System.Security.Cryptography.CngKeyBlobFormat}\n  nameWithType: IEquatable<CngKeyBlobFormat>\n  nameWithType.vb: IEquatable(Of CngKeyBlobFormat)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.IEquatable`1\n  isExternal: false\n  name: IEquatable<T>\n  fullName: System.IEquatable<T>\n  fullname.vb: System.IEquatable(Of T)\n  name.vb: IEquatable(Of T)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable`1\n  nameWithType: IEquatable<T>\n  nameWithType.vb: IEquatable(Of T)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Security.Cryptography.CngKeyBlobFormat\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKeyBlobFormat\n  fullName: System.Security.Cryptography.CngKeyBlobFormat\n  commentId: T:System.Security.Cryptography.CngKeyBlobFormat\n  nameWithType: CngKeyBlobFormat\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.IEquatable{System.Security.Cryptography.CngKeyBlobFormat}.Equals(System.Security.Cryptography.CngKeyBlobFormat)\n  parent: System.IEquatable{System.Security.Cryptography.CngKeyBlobFormat}\n  definition: System.IEquatable`1.Equals(`0)\n  name: Equals(CngKeyBlobFormat)\n  fullName: System.IEquatable<System.Security.Cryptography.CngKeyBlobFormat>.Equals(System.Security.Cryptography.CngKeyBlobFormat)\n  fullname.vb: System.IEquatable(Of System.Security.Cryptography.CngKeyBlobFormat).Equals(System.Security.Cryptography.CngKeyBlobFormat)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<System.Security.Cryptography.CngKeyBlobFormat>.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.CngKeyBlobFormat\n    name: CngKeyBlobFormat\n    fullName: System.Security.Cryptography.CngKeyBlobFormat\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of System.Security.Cryptography.CngKeyBlobFormat).Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.CngKeyBlobFormat\n    name: CngKeyBlobFormat\n    fullName: System.Security.Cryptography.CngKeyBlobFormat\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable{System.Security.Cryptography.CngKeyBlobFormat}.Equals(System.Security.Cryptography.CngKeyBlobFormat)\n  nameWithType: IEquatable<CngKeyBlobFormat>.Equals(CngKeyBlobFormat)\n  nameWithType.vb: IEquatable(Of CngKeyBlobFormat).Equals(CngKeyBlobFormat)\n- uid: System.IEquatable`1.Equals(`0)\n  isExternal: false\n  name: Equals(T)\n  fullName: System.IEquatable<T>.Equals(T)\n  fullname.vb: System.IEquatable(Of T).Equals(T)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<T>.Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of T).Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable`1.Equals(`0)\n  nameWithType: IEquatable<T>.Equals(T)\n  nameWithType.vb: IEquatable(Of T).Equals(T)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}