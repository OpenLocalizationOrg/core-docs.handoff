{"nodes":[{"pos":[1147,1166],"content":"BitVector32.Section","needQuote":true,"nodes":[{"content":"BitVector32.Section","pos":[0,19]}]},{"pos":[2814,2818],"content":"Mask","needQuote":true,"nodes":[{"content":"Mask","pos":[0,4]}]},{"pos":[4200,4206],"content":"Offset","needQuote":true,"nodes":[{"content":"Offset","pos":[0,6]}]},{"pos":[5762,5789],"content":"Equals(BitVector32.Section)","needQuote":true,"nodes":[{"content":"Equals(BitVector32.Section)","pos":[0,27]}]},{"pos":[7917,7931],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[9885,9898],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[12088,12138],"content":"Equality(BitVector32.Section, BitVector32.Section)","needQuote":true,"nodes":[{"content":"Equality(BitVector32.Section, BitVector32.Section)","pos":[0,50]}]},{"pos":[14667,14719],"content":"Inequality(BitVector32.Section, BitVector32.Section)","needQuote":true,"nodes":[{"content":"Inequality(BitVector32.Section, BitVector32.Section)","pos":[0,52]}]},{"pos":[16935,16945],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[18686,18715],"content":"ToString(BitVector32.Section)","needQuote":true,"nodes":[{"content":"ToString(BitVector32.Section)","pos":[0,29]}]},{"pos":[20386,20416],"content":"System.Collections.Specialized","needQuote":true,"nodes":[{"content":"System.Collections.Specialized","pos":[0,30]}]},{"pos":[20661,20683],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[20831,20837],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20904,20905],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20955,20961],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21022,21023]},{"pos":[21078,21084],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21144,21145],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21242,21248],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21315,21316],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21366,21372],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21433,21434]},{"pos":[21489,21495],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21555,21556],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21801,21832],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[21998,22013],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[22089,22090],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22140,22146],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22207,22208]},{"pos":[22263,22269],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22329,22330],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22436,22451],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[22527,22528],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22578,22584],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22645,22646]},{"pos":[22701,22707],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22767,22768],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22994,23003],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[23096,23103],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[23171,23172],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23199,23200],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23269,23276],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[23344,23345],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23372,23373],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23526,23532],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23653,23659],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[23789,23794],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[23997,24016],"content":"BitVector32.Section","needQuote":true,"nodes":[{"content":"BitVector32.Section","pos":[0,19]}]},{"pos":[24249,24256],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[24438,24452],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[24577,24583],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24632,24633],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24683,24689],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24749,24750],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24836,24842],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24891,24892],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24942,24948],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25008,25009],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25190,25199],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[25378,25391],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[25498,25509],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[25563,25564],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25591,25592],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25668,25679],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[25733,25734],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25761,25762],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25928,25933],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[26097,26107],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[26208,26216],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[26267,26268],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26295,26296],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26369,26377],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[26428,26429],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26456,26457],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26618,26624],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]}],"content":"items:\n- uid: System.Collections.Specialized.BitVector32.Section\n  commentId: T:System.Collections.Specialized.BitVector32.Section\n  id: BitVector32.Section\n  parent: System.Collections.Specialized\n  children:\n  - System.Collections.Specialized.BitVector32.Section.Equals(System.Collections.Specialized.BitVector32.Section)\n  - System.Collections.Specialized.BitVector32.Section.Equals(System.Object)\n  - System.Collections.Specialized.BitVector32.Section.GetHashCode\n  - System.Collections.Specialized.BitVector32.Section.Mask\n  - System.Collections.Specialized.BitVector32.Section.Offset\n  - System.Collections.Specialized.BitVector32.Section.op_Equality(System.Collections.Specialized.BitVector32.Section,System.Collections.Specialized.BitVector32.Section)\n  - System.Collections.Specialized.BitVector32.Section.op_Inequality(System.Collections.Specialized.BitVector32.Section,System.Collections.Specialized.BitVector32.Section)\n  - System.Collections.Specialized.BitVector32.Section.ToString\n  - System.Collections.Specialized.BitVector32.Section.ToString(System.Collections.Specialized.BitVector32.Section)\n  langs:\n  - csharp\n  - vb\n  name: BitVector32.Section\n  fullName: System.Collections.Specialized.BitVector32.Section\n  type: Struct\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Section\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n    startLine: 226\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Represents a section of the vector that can contain an integer number.</p>\\n\"\n  syntax:\n    content: public struct Section\n    content.vb: Public Structure Section\n  seealso:\n  - type: System.Collections.Specialized.BitVector32.CreateSection(System.Int16)\n    commentId: M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16)\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: BitVector32.Section\n- uid: System.Collections.Specialized.BitVector32.Section.Mask\n  commentId: P:System.Collections.Specialized.BitVector32.Section.Mask\n  id: Mask\n  parent: System.Collections.Specialized.BitVector32.Section\n  langs:\n  - csharp\n  - vb\n  name: Mask\n  fullName: System.Collections.Specialized.BitVector32.Section.Mask\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Mask\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n    startLine: 237\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets a mask that isolates this section within the <xref href=\\\"System.Collections.Specialized.BitVector32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public short Mask { get; }\n    content.vb: Public ReadOnly Property Mask As Short\n    parameters: []\n    return:\n      type: System.Int16\n      description: \"\\n<p>A mask that isolates this section within the <xref href=\\\"System.Collections.Specialized.BitVector32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: BitVector32.Section.Mask\n- uid: System.Collections.Specialized.BitVector32.Section.Offset\n  commentId: P:System.Collections.Specialized.BitVector32.Section.Offset\n  id: Offset\n  parent: System.Collections.Specialized.BitVector32.Section\n  langs:\n  - csharp\n  - vb\n  name: Offset\n  fullName: System.Collections.Specialized.BitVector32.Section.Offset\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Offset\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n    startLine: 245\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets the offset of this section from the start of the <xref href=\\\"System.Collections.Specialized.BitVector32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public short Offset { get; }\n    content.vb: Public ReadOnly Property Offset As Short\n    parameters: []\n    return:\n      type: System.Int16\n      description: \"\\n<p>The offset of this section from the start of the <xref href=\\\"System.Collections.Specialized.BitVector32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: BitVector32.Section.Offset\n- uid: System.Collections.Specialized.BitVector32.Section.Equals(System.Collections.Specialized.BitVector32.Section)\n  commentId: M:System.Collections.Specialized.BitVector32.Section.Equals(System.Collections.Specialized.BitVector32.Section)\n  id: Equals(System.Collections.Specialized.BitVector32.Section)\n  parent: System.Collections.Specialized.BitVector32.Section\n  langs:\n  - csharp\n  - vb\n  name: Equals(BitVector32.Section)\n  fullName: System.Collections.Specialized.BitVector32.Section.Equals(System.Collections.Specialized.BitVector32.Section)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n    startLine: 261\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Determines whether the specified <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is the same as the current <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public bool Equals(BitVector32.Section obj)\n    content.vb: Public Function Equals(obj As BitVector32.Section) As Boolean\n    parameters:\n    - id: obj\n      type: System.Collections.Specialized.BitVector32.Section\n      description: \"\\n<p>The <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to compare with the current <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>obj</em> parameter is the same as the current <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BitVector32.Section.Equals(BitVector32.Section)\n- uid: System.Collections.Specialized.BitVector32.Section.Equals(System.Object)\n  commentId: M:System.Collections.Specialized.BitVector32.Section.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Collections.Specialized.BitVector32.Section\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Collections.Specialized.BitVector32.Section.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n    startLine: 253\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Determines whether the specified object is the same as the current <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object o)\n    content.vb: Public Overrides Function Equals(o As Object) As Boolean\n    parameters:\n    - id: o\n      type: System.Object\n      description: \"\\n<p>The object to compare with the current <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified object is the same as the current <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  seealso:\n  - type: System.Object.Equals(System.Object)\n    commentId: M:System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: BitVector32.Section.Equals(Object)\n- uid: System.Collections.Specialized.BitVector32.Section.GetHashCode\n  commentId: M:System.Collections.Specialized.BitVector32.Section.GetHashCode\n  id: GetHashCode\n  parent: System.Collections.Specialized.BitVector32.Section\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Collections.Specialized.BitVector32.Section.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n    startLine: 276\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Serves as a hash function for the current <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, suitable for hashing algorithms and data structures, such as a hash table.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A hash code for the current <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  seealso:\n  - type: System.Object.GetHashCode\n    commentId: M:System.Object.GetHashCode\n  - type: System.Collections.Hashtable\n    commentId: T:System.Collections.Hashtable\n  - type: System.Collections.Specialized.BitVector32.Section.Equals(System.Object)\n    commentId: M:System.Collections.Specialized.BitVector32.Section.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: BitVector32.Section.GetHashCode()\n- uid: System.Collections.Specialized.BitVector32.Section.op_Equality(System.Collections.Specialized.BitVector32.Section,System.Collections.Specialized.BitVector32.Section)\n  commentId: M:System.Collections.Specialized.BitVector32.Section.op_Equality(System.Collections.Specialized.BitVector32.Section,System.Collections.Specialized.BitVector32.Section)\n  id: op_Equality(System.Collections.Specialized.BitVector32.Section,System.Collections.Specialized.BitVector32.Section)\n  parent: System.Collections.Specialized.BitVector32.Section\n  langs:\n  - csharp\n  - vb\n  name: Equality(BitVector32.Section, BitVector32.Section)\n  fullName: System.Collections.Specialized.BitVector32.Section.Equality(System.Collections.Specialized.BitVector32.Section, System.Collections.Specialized.BitVector32.Section)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n    startLine: 266\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Determines whether two specified <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects are equal.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(BitVector32.Section a, BitVector32.Section b)\n    content.vb: Public Shared Operator =(a As BitVector32.Section, b As BitVector32.Section) As Boolean\n    parameters:\n    - id: a\n      type: System.Collections.Specialized.BitVector32.Section\n      description: \"\\n<p>A <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    - id: b\n      type: System.Collections.Specialized.BitVector32.Section\n      description: \"\\n<p>A <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>a</em> and <em>b</em> parameters represent the same <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BitVector32.Section.Equality(BitVector32.Section, BitVector32.Section)\n- uid: System.Collections.Specialized.BitVector32.Section.op_Inequality(System.Collections.Specialized.BitVector32.Section,System.Collections.Specialized.BitVector32.Section)\n  commentId: M:System.Collections.Specialized.BitVector32.Section.op_Inequality(System.Collections.Specialized.BitVector32.Section,System.Collections.Specialized.BitVector32.Section)\n  id: op_Inequality(System.Collections.Specialized.BitVector32.Section,System.Collections.Specialized.BitVector32.Section)\n  parent: System.Collections.Specialized.BitVector32.Section\n  langs:\n  - csharp\n  - vb\n  name: Inequality(BitVector32.Section, BitVector32.Section)\n  fullName: System.Collections.Specialized.BitVector32.Section.Inequality(System.Collections.Specialized.BitVector32.Section, System.Collections.Specialized.BitVector32.Section)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n    startLine: 271\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Determines whether two <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects have different values.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(BitVector32.Section a, BitVector32.Section b)\n    content.vb: Public Shared Operator <>(a As BitVector32.Section, b As BitVector32.Section) As Boolean\n    parameters:\n    - id: a\n      type: System.Collections.Specialized.BitVector32.Section\n      description: \"\\n<p>A <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    - id: b\n      type: System.Collections.Specialized.BitVector32.Section\n      description: \"\\n<p>A <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>a</em> and <em>b</em> parameters represent different <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BitVector32.Section.Inequality(BitVector32.Section, BitVector32.Section)\n- uid: System.Collections.Specialized.BitVector32.Section.ToString\n  commentId: M:System.Collections.Specialized.BitVector32.Section.ToString\n  id: ToString\n  parent: System.Collections.Specialized.BitVector32.Section\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Collections.Specialized.BitVector32.Section.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n    startLine: 286\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Returns a string that represents the current <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string that represents the current <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.ValueType.ToString\n  seealso:\n  - type: System.Object.ToString\n    commentId: M:System.Object.ToString\n  - type: System.String\n    commentId: T:System.String\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: BitVector32.Section.ToString()\n- uid: System.Collections.Specialized.BitVector32.Section.ToString(System.Collections.Specialized.BitVector32.Section)\n  commentId: M:System.Collections.Specialized.BitVector32.Section.ToString(System.Collections.Specialized.BitVector32.Section)\n  id: ToString(System.Collections.Specialized.BitVector32.Section)\n  parent: System.Collections.Specialized.BitVector32.Section\n  langs:\n  - csharp\n  - vb\n  name: ToString(BitVector32.Section)\n  fullName: System.Collections.Specialized.BitVector32.Section.ToString(System.Collections.Specialized.BitVector32.Section)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n    startLine: 281\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Returns a string that represents the specified <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static string ToString(BitVector32.Section value)\n    content.vb: Public Shared Function ToString(value As BitVector32.Section) As String\n    parameters:\n    - id: value\n      type: System.Collections.Specialized.BitVector32.Section\n      description: \"\\n<p>The <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to represent.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string that represents the specified <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.String\n    commentId: T:System.String\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BitVector32.Section.ToString(BitVector32.Section)\nreferences:\n- uid: System.Collections.Specialized\n  isExternal: false\n  name: System.Collections.Specialized\n  fullName: System.Collections.Specialized\n  nameWithType: System.Collections.Specialized\n  commentId: N:System.Collections.Specialized\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  nameWithType: Int16\n  commentId: T:System.Int16\n- uid: System.Collections.Specialized.BitVector32.Section\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: BitVector32.Section\n  fullName: System.Collections.Specialized.BitVector32.Section\n  nameWithType: BitVector32.Section\n  commentId: T:System.Collections.Specialized.BitVector32.Section\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n"}