{"nodes":[{"pos":[1223,1241],"content":"RegistryAccessRule","needQuote":true,"nodes":[{"content":"RegistryAccessRule","pos":[0,18]}]},{"pos":[3882,3954],"content":"RegistryAccessRule(IdentityReference, RegistryRights, AccessControlType)","needQuote":true,"nodes":[{"content":"RegistryAccessRule(IdentityReference, RegistryRights, AccessControlType)","pos":[0,72]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;registryRights&lt;/em&gt; specifies an invalid value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;type&lt;/em&gt; specifies an invalid value.&lt;/p&gt;\\n","pos":[6420,6549],"source":"\\n<p>\\n<em>registryRights</em> specifies an invalid value.</p>\\n<p>-or-</p>\\n<p>\\n<em>type</em> specifies an invalid value.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;identity&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[6654,6704],"source":"\\n<p>\\n<em>identity</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;eventRights&lt;/em&gt; is zero.&lt;/p&gt;\\n","pos":[6705,6764],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>eventRights</em> is zero.</p>\\n"},{"pos":[8373,8481],"content":"RegistryAccessRule(IdentityReference, RegistryRights, InheritanceFlags, PropagationFlags, AccessControlType)","needQuote":true,"nodes":[{"content":"RegistryAccessRule(IdentityReference, RegistryRights, InheritanceFlags, PropagationFlags, AccessControlType)","pos":[0,108]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;registryRights&lt;/em&gt; specifies an invalid value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;type&lt;/em&gt; specifies an invalid value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;inheritanceFlags&lt;/em&gt; specifies an invalid value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;propagationFlags&lt;/em&gt; specifies an invalid value.&lt;/p&gt;\\n","pos":[11872,12155],"source":"\\n<p>\\n<em>registryRights</em> specifies an invalid value.</p>\\n<p>-or-</p>\\n<p>\\n<em>type</em> specifies an invalid value.</p>\\n<p>-or-</p>\\n<p>\\n<em>inheritanceFlags</em> specifies an invalid value.</p>\\n<p>-or-</p>\\n<p>\\n<em>propagationFlags</em> specifies an invalid value.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;identity&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;registryRights&lt;/em&gt; is zero.&lt;/p&gt;\\n","pos":[12260,12372],"source":"\\n<p>\\n<em>identity</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>registryRights</em> is zero.</p>\\n"},{"pos":[13646,13707],"content":"RegistryAccessRule(String, RegistryRights, AccessControlType)","needQuote":true,"nodes":[{"content":"RegistryAccessRule(String, RegistryRights, AccessControlType)","pos":[0,61]}]},{"content":"\\n&lt;p&gt;The name of the user or group the rule applies to.&lt;/p&gt;\\n","pos":[14974,15035],"source":"\\n<p>The name of the user or group the rule applies to.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;registryRights&lt;/em&gt; specifies an invalid value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;type&lt;/em&gt; specifies an invalid value.&lt;/p&gt;\\n","pos":[15744,15873],"source":"\\n<p>\\n<em>registryRights</em> specifies an invalid value.</p>\\n<p>-or-</p>\\n<p>\\n<em>type</em> specifies an invalid value.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;registryRights&lt;/em&gt; is zero.&lt;/p&gt;\\n","pos":[15978,16023],"source":"\\n<p>\\n<em>registryRights</em> is zero.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;identity&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;identity&lt;/em&gt; is a zero-length string.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;identity&lt;/em&gt; is longer than 512 characters.&lt;/p&gt;\\n","pos":[16120,16314],"source":"\\n<p>\\n<em>identity</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>identity</em> is a zero-length string.</p>\\n<p>-or-</p>\\n<p>\\n<em>identity</em> is longer than 512 characters.</p>\\n"},{"pos":[17317,17414],"content":"RegistryAccessRule(String, RegistryRights, InheritanceFlags, PropagationFlags, AccessControlType)","needQuote":true,"nodes":[{"content":"RegistryAccessRule(String, RegistryRights, InheritanceFlags, PropagationFlags, AccessControlType)","pos":[0,97]}]},{"content":"\\n&lt;p&gt;The name of the user or group the rule applies to.&lt;/p&gt;\\n","pos":[18969,19030],"source":"\\n<p>The name of the user or group the rule applies to.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;registryRights&lt;/em&gt; specifies an invalid value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;type&lt;/em&gt; specifies an invalid value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;inheritanceFlags&lt;/em&gt; specifies an invalid value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;propagationFlags&lt;/em&gt; specifies an invalid value.&lt;/p&gt;\\n","pos":[20376,20659],"source":"\\n<p>\\n<em>registryRights</em> specifies an invalid value.</p>\\n<p>-or-</p>\\n<p>\\n<em>type</em> specifies an invalid value.</p>\\n<p>-or-</p>\\n<p>\\n<em>inheritanceFlags</em> specifies an invalid value.</p>\\n<p>-or-</p>\\n<p>\\n<em>propagationFlags</em> specifies an invalid value.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;eventRights&lt;/em&gt; is zero.&lt;/p&gt;\\n","pos":[20764,20806],"source":"\\n<p>\\n<em>eventRights</em> is zero.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;identity&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;identity&lt;/em&gt; is a zero-length string.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;identity&lt;/em&gt; is longer than 512 characters.&lt;/p&gt;\\n","pos":[20903,21097],"source":"\\n<p>\\n<em>identity</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>identity</em> is a zero-length string.</p>\\n<p>-or-</p>\\n<p>\\n<em>identity</em> is longer than 512 characters.</p>\\n"},{"pos":[21555,21569],"content":"RegistryRights","needQuote":true,"nodes":[{"content":"RegistryRights","pos":[0,14]}]},{"pos":[22840,22869],"content":"System.Security.AccessControl","needQuote":true,"nodes":[{"content":"System.Security.AccessControl","pos":[0,29]}]},{"pos":[23069,23075],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23277,23294],"content":"AuthorizationRule","needQuote":true,"nodes":[{"content":"AuthorizationRule","pos":[0,17]}]},{"pos":[23568,23578],"content":"AccessRule","needQuote":true,"nodes":[{"content":"AccessRule","pos":[0,10]}]},{"pos":[23860,23877],"content":"AccessControlType","needQuote":true,"nodes":[{"content":"AccessControlType","pos":[0,17]}]},{"pos":[24227,24244],"content":"IdentityReference","needQuote":true,"nodes":[{"content":"IdentityReference","pos":[0,17]}]},{"pos":[24608,24618],"content":"AccessMask","needQuote":true,"nodes":[{"content":"AccessMask","pos":[0,10]}]},{"pos":[24962,24973],"content":"IsInherited","needQuote":true,"nodes":[{"content":"IsInherited","pos":[0,11]}]},{"pos":[25325,25341],"content":"InheritanceFlags","needQuote":true,"nodes":[{"content":"InheritanceFlags","pos":[0,16]}]},{"pos":[25708,25724],"content":"PropagationFlags","needQuote":true,"nodes":[{"content":"PropagationFlags","pos":[0,16]}]},{"pos":[26014,26024],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[26119,26127],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[26196,26197],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26224,26225],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26295,26303],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[26372,26373],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26400,26401],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26584,26598],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[26717,26723],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26790,26791],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26841,26847],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26907,26908],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26991,26997],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27064,27065],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27115,27121],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27181,27182],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27396,27418],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[27566,27572],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27639,27640],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27690,27696],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27757,27758]},{"pos":[27813,27819],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27879,27880],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27977,27983],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28050,28051],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28101,28107],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28168,28169]},{"pos":[28224,28230],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28290,28291],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28536,28567],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[28733,28748],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[28824,28825],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28875,28881],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28942,28943]},{"pos":[28998,29004],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29064,29065],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29171,29186],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[29262,29263],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29313,29319],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29380,29381]},{"pos":[29436,29442],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29502,29503],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29733,29746],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[29847,29858],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[29930,29931],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29958,29959],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30032,30043],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[30115,30116],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30143,30144],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30319,30328],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[30421,30428],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[30496,30497],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30524,30525],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30594,30601],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[30669,30670],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30697,30698],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30873,30890],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[30999,31014],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[31090,31091],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31118,31119],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31196,31211],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[31287,31288],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31315,31316],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31461,31467],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[31647,31664],"content":"IdentityReference","needQuote":true,"nodes":[{"content":"IdentityReference","pos":[0,17]}]},{"pos":[31934,31948],"content":"RegistryRights","needQuote":true,"nodes":[{"content":"RegistryRights","pos":[0,14]}]},{"pos":[32220,32237],"content":"AccessControlType","needQuote":true,"nodes":[{"content":"AccessControlType","pos":[0,17]}]},{"pos":[32456,32481],"content":"System.Security.Principal","needQuote":true,"nodes":[{"content":"System.Security.Principal","pos":[0,25]}]},{"pos":[32725,32741],"content":"InheritanceFlags","needQuote":true,"nodes":[{"content":"InheritanceFlags","pos":[0,16]}]},{"pos":[33018,33034],"content":"PropagationFlags","needQuote":true,"nodes":[{"content":"PropagationFlags","pos":[0,16]}]},{"pos":[33255,33261],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[33410,33437],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[33643,33664],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[33865,33882],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Security.AccessControl.RegistryAccessRule\n  commentId: T:System.Security.AccessControl.RegistryAccessRule\n  id: RegistryAccessRule\n  parent: System.Security.AccessControl\n  children:\n  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)\n  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)\n  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  - System.Security.AccessControl.RegistryAccessRule.RegistryRights\n  langs:\n  - csharp\n  - vb\n  name: RegistryAccessRule\n  fullName: System.Security.AccessControl.RegistryAccessRule\n  type: Class\n  source:\n    remote:\n      path: src/Microsoft.Win32.Registry.AccessControl/ref/Microsoft.Win32.Registry.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RegistryAccessRule\n    path: src/Microsoft.Win32.Registry.AccessControl/ref/Microsoft.Win32.Registry.AccessControl.cs\n    startLine: 20\n  assemblies:\n  - Microsoft.Win32.Registry.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Represents a set of access rights allowed or denied for a user or group. This class cannot be inherited.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public sealed class RegistryAccessRule : AccessRule\n    content.vb: >-\n      <SecurityCritical>\n\n      Public NotInheritable Class RegistryAccessRule\n          Inherits AccessRule\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.AuthorizationRule\n  - System.Security.AccessControl.AccessRule\n  inheritedMembers:\n  - System.Security.AccessControl.AccessRule.AccessControlType\n  - System.Security.AccessControl.AuthorizationRule.IdentityReference\n  - System.Security.AccessControl.AuthorizationRule.AccessMask\n  - System.Security.AccessControl.AuthorizationRule.IsInherited\n  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  - System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: RegistryAccessRule\n- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)\n  commentId: M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)\n  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)'\n  parent: System.Security.AccessControl.RegistryAccessRule\n  langs:\n  - csharp\n  - vb\n  name: RegistryAccessRule(IdentityReference, RegistryRights, AccessControlType)\n  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(System.Security.Principal.IdentityReference, System.Security.AccessControl.RegistryRights, System.Security.AccessControl.AccessControlType)\n  type: Constructor\n  source:\n    remote:\n      path: src/Microsoft.Win32.Registry.AccessControl/ref/Microsoft.Win32.Registry.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/Microsoft.Win32.Registry.AccessControl/ref/Microsoft.Win32.Registry.AccessControl.cs\n    startLine: 23\n  assemblies:\n  - Microsoft.Win32.Registry.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.RegistryAccessRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, specifying the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.</p>\\n\"\n  syntax:\n    content: public RegistryAccessRule(IdentityReference identity, RegistryRights registryRights, AccessControlType type)\n    content.vb: Public Sub New(identity As IdentityReference, registryRights As RegistryRights, type As AccessControlType)\n    parameters:\n    - id: identity\n      type: System.Security.Principal.IdentityReference\n      description: \"\\n<p>The user or group the rule applies to. Must be of type <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or a type such as <xref href=\\\"System.Security.Principal.NTAccount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can be converted to type <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: registryRights\n      type: System.Security.AccessControl.RegistryRights\n      description: \"\\n<p>A bitwise combination of <xref href=\\\"System.Security.AccessControl.RegistryRights\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values indicating the rights allowed or denied.</p>\\n\"\n    - id: type\n      type: System.Security.AccessControl.AccessControlType\n      description: \"\\n<p>One of the <xref href=\\\"System.Security.AccessControl.AccessControlType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values indicating whether the rights are allowed or denied.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>registryRights</em> specifies an invalid value.</p>\\n<p>-or-</p>\\n<p>\\n<em>type</em> specifies an invalid value.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>identity</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>eventRights</em> is zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>identity</em> is neither of type <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> nor of a type such as <xref href=\\\"System.Security.Principal.NTAccount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can be converted to type <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RegistryAccessRule.RegistryAccessRule(IdentityReference, RegistryRights, AccessControlType)\n- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  commentId: M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)'\n  parent: System.Security.AccessControl.RegistryAccessRule\n  langs:\n  - csharp\n  - vb\n  name: RegistryAccessRule(IdentityReference, RegistryRights, InheritanceFlags, PropagationFlags, AccessControlType)\n  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(System.Security.Principal.IdentityReference, System.Security.AccessControl.RegistryRights, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)\n  type: Constructor\n  source:\n    remote:\n      path: src/Microsoft.Win32.Registry.AccessControl/ref/Microsoft.Win32.Registry.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/Microsoft.Win32.Registry.AccessControl/ref/Microsoft.Win32.Registry.AccessControl.cs\n    startLine: 24\n  assemblies:\n  - Microsoft.Win32.Registry.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.RegistryAccessRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, specifying the user or group the rule applies to, the access rights, the inheritance flags, the propagation flags, and whether the specified access rights are allowed or denied.</p>\\n\"\n  syntax:\n    content: public RegistryAccessRule(IdentityReference identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type)\n    content.vb: Public Sub New(identity As IdentityReference, registryRights As RegistryRights, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, type As AccessControlType)\n    parameters:\n    - id: identity\n      type: System.Security.Principal.IdentityReference\n      description: \"\\n<p>The user or group the rule applies to. Must be of type <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or a type such as <xref href=\\\"System.Security.Principal.NTAccount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can be converted to type <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: registryRights\n      type: System.Security.AccessControl.RegistryRights\n      description: \"\\n<p>A bitwise combination of <xref href=\\\"System.Security.AccessControl.RegistryRights\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values specifying the rights allowed or denied.</p>\\n\"\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: \"\\n<p>A bitwise combination of <xref href=\\\"System.Security.AccessControl.InheritanceFlags\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flags specifying how access rights are inherited from other objects.</p>\\n\"\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: \"\\n<p>A bitwise combination of <xref href=\\\"System.Security.AccessControl.PropagationFlags\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flags specifying how access rights are propagated to other objects.</p>\\n\"\n    - id: type\n      type: System.Security.AccessControl.AccessControlType\n      description: \"\\n<p>One of the <xref href=\\\"System.Security.AccessControl.AccessControlType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values specifying whether the rights are allowed or denied.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>registryRights</em> specifies an invalid value.</p>\\n<p>-or-</p>\\n<p>\\n<em>type</em> specifies an invalid value.</p>\\n<p>-or-</p>\\n<p>\\n<em>inheritanceFlags</em> specifies an invalid value.</p>\\n<p>-or-</p>\\n<p>\\n<em>propagationFlags</em> specifies an invalid value.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>identity</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>registryRights</em> is zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>identity</em> is neither of type <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, nor of a type such as <xref href=\\\"System.Security.Principal.NTAccount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can be converted to type <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RegistryAccessRule.RegistryAccessRule(IdentityReference, RegistryRights, InheritanceFlags, PropagationFlags, AccessControlType)\n- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)\n  commentId: M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)\n  id: '#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)'\n  parent: System.Security.AccessControl.RegistryAccessRule\n  langs:\n  - csharp\n  - vb\n  name: RegistryAccessRule(String, RegistryRights, AccessControlType)\n  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(System.String, System.Security.AccessControl.RegistryRights, System.Security.AccessControl.AccessControlType)\n  type: Constructor\n  source:\n    remote:\n      path: src/Microsoft.Win32.Registry.AccessControl/ref/Microsoft.Win32.Registry.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/Microsoft.Win32.Registry.AccessControl/ref/Microsoft.Win32.Registry.AccessControl.cs\n    startLine: 25\n  assemblies:\n  - Microsoft.Win32.Registry.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.RegistryAccessRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, specifying the name of the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.</p>\\n\"\n  syntax:\n    content: public RegistryAccessRule(string identity, RegistryRights registryRights, AccessControlType type)\n    content.vb: Public Sub New(identity As String, registryRights As RegistryRights, type As AccessControlType)\n    parameters:\n    - id: identity\n      type: System.String\n      description: \"\\n<p>The name of the user or group the rule applies to.</p>\\n\"\n    - id: registryRights\n      type: System.Security.AccessControl.RegistryRights\n      description: \"\\n<p>A bitwise combination of <xref href=\\\"System.Security.AccessControl.RegistryRights\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values indicating the rights allowed or denied.</p>\\n\"\n    - id: type\n      type: System.Security.AccessControl.AccessControlType\n      description: \"\\n<p>One of the <xref href=\\\"System.Security.AccessControl.AccessControlType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values indicating whether the rights are allowed or denied.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>registryRights</em> specifies an invalid value.</p>\\n<p>-or-</p>\\n<p>\\n<em>type</em> specifies an invalid value.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>registryRights</em> is zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>identity</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>identity</em> is a zero-length string.</p>\\n<p>-or-</p>\\n<p>\\n<em>identity</em> is longer than 512 characters.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RegistryAccessRule.RegistryAccessRule(String, RegistryRights, AccessControlType)\n- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  commentId: M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  id: '#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)'\n  parent: System.Security.AccessControl.RegistryAccessRule\n  langs:\n  - csharp\n  - vb\n  name: RegistryAccessRule(String, RegistryRights, InheritanceFlags, PropagationFlags, AccessControlType)\n  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(System.String, System.Security.AccessControl.RegistryRights, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)\n  type: Constructor\n  source:\n    remote:\n      path: src/Microsoft.Win32.Registry.AccessControl/ref/Microsoft.Win32.Registry.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/Microsoft.Win32.Registry.AccessControl/ref/Microsoft.Win32.Registry.AccessControl.cs\n    startLine: 26\n  assemblies:\n  - Microsoft.Win32.Registry.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.RegistryAccessRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, specifying the name of the user or group the rule applies to, the access rights, the inheritance flags, the propagation flags, and whether the specified access rights are allowed or denied.</p>\\n\"\n  syntax:\n    content: public RegistryAccessRule(string identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type)\n    content.vb: Public Sub New(identity As String, registryRights As RegistryRights, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, type As AccessControlType)\n    parameters:\n    - id: identity\n      type: System.String\n      description: \"\\n<p>The name of the user or group the rule applies to.</p>\\n\"\n    - id: registryRights\n      type: System.Security.AccessControl.RegistryRights\n      description: \"\\n<p>A bitwise combination of <xref href=\\\"System.Security.AccessControl.RegistryRights\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values indicating the rights allowed or denied.</p>\\n\"\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: \"\\n<p>A bitwise combination of <xref href=\\\"System.Security.AccessControl.InheritanceFlags\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flags specifying how access rights are inherited from other objects.</p>\\n\"\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: \"\\n<p>A bitwise combination of <xref href=\\\"System.Security.AccessControl.PropagationFlags\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flags specifying how access rights are propagated to other objects.</p>\\n\"\n    - id: type\n      type: System.Security.AccessControl.AccessControlType\n      description: \"\\n<p>One of the <xref href=\\\"System.Security.AccessControl.AccessControlType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values specifying whether the rights are allowed or denied.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>registryRights</em> specifies an invalid value.</p>\\n<p>-or-</p>\\n<p>\\n<em>type</em> specifies an invalid value.</p>\\n<p>-or-</p>\\n<p>\\n<em>inheritanceFlags</em> specifies an invalid value.</p>\\n<p>-or-</p>\\n<p>\\n<em>propagationFlags</em> specifies an invalid value.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>eventRights</em> is zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>identity</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>identity</em> is a zero-length string.</p>\\n<p>-or-</p>\\n<p>\\n<em>identity</em> is longer than 512 characters.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RegistryAccessRule.RegistryAccessRule(String, RegistryRights, InheritanceFlags, PropagationFlags, AccessControlType)\n- uid: System.Security.AccessControl.RegistryAccessRule.RegistryRights\n  commentId: P:System.Security.AccessControl.RegistryAccessRule.RegistryRights\n  id: RegistryRights\n  parent: System.Security.AccessControl.RegistryAccessRule\n  langs:\n  - csharp\n  - vb\n  name: RegistryRights\n  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryRights\n  type: Property\n  source:\n    remote:\n      path: src/Microsoft.Win32.Registry.AccessControl/ref/Microsoft.Win32.Registry.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RegistryRights\n    path: src/Microsoft.Win32.Registry.AccessControl/ref/Microsoft.Win32.Registry.AccessControl.cs\n    startLine: 27\n  assemblies:\n  - Microsoft.Win32.Registry.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the rights allowed or denied by the access rule.</p>\\n\"\n  syntax:\n    content: public RegistryRights RegistryRights { get; }\n    content.vb: Public ReadOnly Property RegistryRights As RegistryRights\n    parameters: []\n    return:\n      type: System.Security.AccessControl.RegistryRights\n      description: \"\\n<p>A bitwise combination of <xref href=\\\"System.Security.AccessControl.RegistryRights\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values indicating the rights allowed or denied by the access rule.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: RegistryAccessRule.RegistryRights\nreferences:\n- uid: System.Security.AccessControl\n  isExternal: false\n  name: System.Security.AccessControl\n  fullName: System.Security.AccessControl\n  commentId: N:System.Security.AccessControl\n  nameWithType: System.Security.AccessControl\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.AccessControl.AuthorizationRule\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AuthorizationRule\n  fullName: System.Security.AccessControl.AuthorizationRule\n  commentId: T:System.Security.AccessControl.AuthorizationRule\n  nameWithType: AuthorizationRule\n- uid: System.Security.AccessControl.AccessRule\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessRule\n  fullName: System.Security.AccessControl.AccessRule\n  commentId: T:System.Security.AccessControl.AccessRule\n  nameWithType: AccessRule\n- uid: System.Security.AccessControl.AccessRule.AccessControlType\n  parent: System.Security.AccessControl.AccessRule\n  isExternal: false\n  name: AccessControlType\n  fullName: System.Security.AccessControl.AccessRule.AccessControlType\n  commentId: P:System.Security.AccessControl.AccessRule.AccessControlType\n  nameWithType: AccessRule.AccessControlType\n- uid: System.Security.AccessControl.AuthorizationRule.IdentityReference\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: IdentityReference\n  fullName: System.Security.AccessControl.AuthorizationRule.IdentityReference\n  commentId: P:System.Security.AccessControl.AuthorizationRule.IdentityReference\n  nameWithType: AuthorizationRule.IdentityReference\n- uid: System.Security.AccessControl.AuthorizationRule.AccessMask\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: AccessMask\n  fullName: System.Security.AccessControl.AuthorizationRule.AccessMask\n  commentId: P:System.Security.AccessControl.AuthorizationRule.AccessMask\n  nameWithType: AuthorizationRule.AccessMask\n- uid: System.Security.AccessControl.AuthorizationRule.IsInherited\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: IsInherited\n  fullName: System.Security.AccessControl.AuthorizationRule.IsInherited\n  commentId: P:System.Security.AccessControl.AuthorizationRule.IsInherited\n  nameWithType: AuthorizationRule.IsInherited\n- uid: System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: InheritanceFlags\n  fullName: System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  commentId: P:System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  nameWithType: AuthorizationRule.InheritanceFlags\n- uid: System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: PropagationFlags\n  fullName: System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  commentId: P:System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  nameWithType: AuthorizationRule.PropagationFlags\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.Principal.IdentityReference\n  parent: System.Security.Principal\n  isExternal: false\n  name: IdentityReference\n  fullName: System.Security.Principal.IdentityReference\n  commentId: T:System.Security.Principal.IdentityReference\n  nameWithType: IdentityReference\n- uid: System.Security.AccessControl.RegistryRights\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: RegistryRights\n  fullName: System.Security.AccessControl.RegistryRights\n  commentId: T:System.Security.AccessControl.RegistryRights\n  nameWithType: RegistryRights\n- uid: System.Security.AccessControl.AccessControlType\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessControlType\n  fullName: System.Security.AccessControl.AccessControlType\n  commentId: T:System.Security.AccessControl.AccessControlType\n  nameWithType: AccessControlType\n- uid: System.Security.Principal\n  isExternal: false\n  name: System.Security.Principal\n  fullName: System.Security.Principal\n  commentId: N:System.Security.Principal\n  nameWithType: System.Security.Principal\n- uid: System.Security.AccessControl.InheritanceFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: InheritanceFlags\n  fullName: System.Security.AccessControl.InheritanceFlags\n  commentId: T:System.Security.AccessControl.InheritanceFlags\n  nameWithType: InheritanceFlags\n- uid: System.Security.AccessControl.PropagationFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: PropagationFlags\n  fullName: System.Security.AccessControl.PropagationFlags\n  commentId: T:System.Security.AccessControl.PropagationFlags\n  nameWithType: PropagationFlags\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}