{"nodes":[{"pos":[1615,1627],"content":"DbConnection","needQuote":true,"nodes":[{"content":"DbConnection","pos":[0,12]}]},{"pos":[3015,3029],"content":"DbConnection()","needQuote":true,"nodes":[{"content":"DbConnection()","pos":[0,14]}]},{"pos":[4015,4031],"content":"ConnectionString","needQuote":true,"nodes":[{"content":"ConnectionString","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The connection string used to establish the initial connection.","pos":[4763,4831],"source":"\\n<p>The connection string used to establish the initial connection."},{"content":"The exact contents of the connection string depend on the specific data source for this connection.","pos":[4832,4931]},{"content":"The default value is an empty string.&lt;/p&gt;\\n","pos":[4932,4975],"source":" The default value is an empty string.</p>\\n"},{"pos":[5411,5428],"content":"ConnectionTimeout","needQuote":true,"nodes":[{"content":"ConnectionTimeout","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The time (in seconds) to wait for a connection to open.","pos":[6220,6280],"source":"\\n<p>The time (in seconds) to wait for a connection to open."},{"content":"The default value is determined by the specific type of connection that you are using.&lt;/p&gt;\\n","pos":[6281,6373],"source":" The default value is determined by the specific type of connection that you are using.</p>\\n"},{"pos":[6787,6795],"content":"Database","needQuote":true,"nodes":[{"content":"Database","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The name of the current database or the name of the database to be used after a connection is opened.","pos":[7603,7709],"source":"\\n<p>The name of the current database or the name of the database to be used after a connection is opened."},{"content":"The default value is an empty string.&lt;/p&gt;\\n","pos":[7710,7753],"source":" The default value is an empty string.</p>\\n"},{"pos":[8157,8167],"content":"DataSource","needQuote":true,"nodes":[{"content":"DataSource","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The name of the database server to which to connect.","pos":[8884,8941],"source":"\\n<p>The name of the database server to which to connect."},{"content":"The default value is an empty string.&lt;/p&gt;\\n","pos":[8942,8985],"source":" The default value is an empty string.</p>\\n"},{"pos":[9347,9360],"content":"ServerVersion","needQuote":true,"nodes":[{"content":"ServerVersion","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The version of the database.","pos":[10121,10154],"source":"\\n<p>The version of the database."},{"content":"The format of the string returned depends on the specific type of connection you are using.&lt;/p&gt;\\n","pos":[10155,10252],"source":" The format of the string returned depends on the specific type of connection you are using.</p>\\n"},{"pos":[11044,11049],"content":"State","needQuote":true,"nodes":[{"content":"State","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The state of the connection.","pos":[11778,11811],"source":"\\n<p>The state of the connection."},{"content":"The format of the string returned depends on the specific type of connection you are using.&lt;/p&gt;\\n","pos":[11812,11909],"source":" The format of the string returned depends on the specific type of connection you are using.</p>\\n"},{"pos":[12310,12321],"content":"StateChange","needQuote":true,"nodes":[{"content":"StateChange","pos":[0,11]}]},{"pos":[13462,13496],"content":"BeginDbTransaction(IsolationLevel)","needQuote":true,"nodes":[{"content":"BeginDbTransaction(IsolationLevel)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;Specifies the isolation level for the transaction.&lt;/p&gt;\\n","pos":[14334,14395],"source":"\\n<p>Specifies the isolation level for the transaction.</p>\\n"},{"content":"\\n&lt;p&gt;An object representing the new transaction.&lt;/p&gt;\\n","pos":[14474,14528],"source":"\\n<p>An object representing the new transaction.</p>\\n"},{"pos":[14908,14926],"content":"BeginTransaction()","needQuote":true,"nodes":[{"content":"BeginTransaction()","pos":[0,18]}]},{"content":"\\n&lt;p&gt;An object representing the new transaction.&lt;/p&gt;\\n","pos":[15616,15670],"source":"\\n<p>An object representing the new transaction.</p>\\n"},{"pos":[16082,16114],"content":"BeginTransaction(IsolationLevel)","needQuote":true,"nodes":[{"content":"BeginTransaction(IsolationLevel)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;Specifies the isolation level for the transaction.&lt;/p&gt;\\n","pos":[16951,17012],"source":"\\n<p>Specifies the isolation level for the transaction.</p>\\n"},{"content":"\\n&lt;p&gt;An object representing the new transaction.&lt;/p&gt;\\n","pos":[17091,17145],"source":"\\n<p>An object representing the new transaction.</p>\\n"},{"pos":[17526,17548],"content":"ChangeDatabase(String)","needQuote":true,"nodes":[{"content":"ChangeDatabase(String)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;Specifies the name of the database for the connection to use.&lt;/p&gt;\\n","pos":[18307,18379],"source":"\\n<p>Specifies the name of the database for the connection to use.</p>\\n"},{"pos":[18782,18789],"content":"Close()","needQuote":true,"nodes":[{"content":"Close()","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The connection-level error that occurred while opening the connection.","pos":[19539,19614],"source":"\\n<p>The connection-level error that occurred while opening the connection."},{"content":"&lt;/p&gt;\\n","pos":[19615,19621],"source":" </p>\\n"},{"pos":[20121,20136],"content":"CreateCommand()","needQuote":true,"nodes":[{"content":"CreateCommand()","pos":[0,15]}]},{"pos":[21360,21377],"content":"CreateDbCommand()","needQuote":true,"nodes":[{"content":"CreateDbCommand()","pos":[0,17]}]},{"pos":[22772,22807],"content":"OnStateChange(StateChangeEventArgs)","needQuote":true,"nodes":[{"content":"OnStateChange(StateChangeEventArgs)","pos":[0,35]}]},{"pos":[24177,24183],"content":"Open()","needQuote":true,"nodes":[{"content":"Open()","pos":[0,6]}]},{"pos":[25254,25265],"content":"OpenAsync()","needQuote":true,"nodes":[{"content":"OpenAsync()","pos":[0,11]}]},{"content":"\\n&lt;p&gt;A task representing the asynchronous operation.&lt;/p&gt;\\n","pos":[26384,26442],"source":"\\n<p>A task representing the asynchronous operation.</p>\\n"},{"pos":[26850,26878],"content":"OpenAsync(CancellationToken)","needQuote":true,"nodes":[{"content":"OpenAsync(CancellationToken)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The cancellation instruction.&lt;/p&gt;\\n","pos":[28419,28459],"source":"\\n<p>The cancellation instruction.</p>\\n"},{"content":"\\n&lt;p&gt;A task representing the asynchronous operation.&lt;/p&gt;\\n","pos":[28533,28591],"source":"\\n<p>A task representing the asynchronous operation.</p>\\n"},{"pos":[29049,29081],"content":"IDbConnection.BeginTransaction()","needQuote":true,"nodes":[{"content":"IDbConnection.BeginTransaction()","pos":[0,32]}]},{"content":"\\n&lt;p&gt;An object that represents the new transaction.&lt;/p&gt;\\n","pos":[29888,29945],"source":"\\n<p>An object that represents the new transaction.</p>\\n"},{"pos":[30599,30645],"content":"IDbConnection.BeginTransaction(IsolationLevel)","needQuote":true,"nodes":[{"content":"IDbConnection.BeginTransaction(IsolationLevel)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;An object that represents the new transaction.&lt;/p&gt;\\n","pos":[31871,31928],"source":"\\n<p>An object that represents the new transaction.</p>\\n"},{"pos":[32559,32588],"content":"IDbConnection.CreateCommand()","needQuote":true,"nodes":[{"content":"IDbConnection.CreateCommand()","pos":[0,29]}]},{"pos":[34090,34099],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[34974,34990],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[35825,35843],"content":"System.Data.Common","needQuote":true,"nodes":[{"content":"System.Data.Common","pos":[0,18]}]},{"pos":[36010,36016],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[36178,36191],"content":"IDbConnection","needQuote":true,"nodes":[{"content":"IDbConnection","pos":[0,13]}]},{"pos":[36372,36383],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[36558,36568],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[36663,36671],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[36740,36741],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36768,36769],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36839,36847],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[36916,36917],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36944,36945],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37128,37142],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[37261,37267],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[37334,37335],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37385,37391],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[37451,37452],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37535,37541],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[37608,37609],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37659,37665],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[37725,37726],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37940,37962],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[38110,38116],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[38183,38184],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38234,38240],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[38301,38302]},{"pos":[38357,38363],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[38423,38424],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38521,38527],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[38594,38595],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38645,38651],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[38712,38713]},{"pos":[38768,38774],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[38834,38835],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39080,39111],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[39277,39292],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[39368,39369],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39419,39425],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[39486,39487]},{"pos":[39542,39548],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[39608,39609],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39715,39730],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[39806,39807],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39857,39863],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[39924,39925]},{"pos":[39980,39986],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[40046,40047],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40277,40290],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[40391,40402],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[40474,40475],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40502,40503],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40576,40587],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[40659,40660],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40687,40688],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40863,40872],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[40965,40972],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[41040,41041],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41068,41069],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41138,41145],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[41213,41214],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41241,41242],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41417,41434],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[41543,41558],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[41634,41635],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41662,41663],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41740,41755],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[41831,41832],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41859,41860],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42005,42011],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[42123,42134],"content":"System.Data","needQuote":true,"nodes":[{"content":"System.Data","pos":[0,11]}]},{"pos":[42328,42344],"content":"ConnectionString","needQuote":true,"nodes":[{"content":"ConnectionString","pos":[0,16]}]},{"pos":[42571,42577],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[42771,42788],"content":"ConnectionTimeout","needQuote":true,"nodes":[{"content":"ConnectionTimeout","pos":[0,17]}]},{"pos":[43017,43022],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[43204,43212],"content":"Database","needQuote":true,"nodes":[{"content":"Database","pos":[0,8]}]},{"pos":[43452,43457],"content":"State","needQuote":true,"nodes":[{"content":"State","pos":[0,5]}]},{"pos":[43670,43685],"content":"ConnectionState","needQuote":true,"nodes":[{"content":"ConnectionState","pos":[0,15]}]},{"pos":[43894,43917],"content":"StateChangeEventHandler","needQuote":true,"nodes":[{"content":"StateChangeEventHandler","pos":[0,23]}]},{"pos":[44141,44155],"content":"IsolationLevel","needQuote":true,"nodes":[{"content":"IsolationLevel","pos":[0,14]}]},{"pos":[44365,44378],"content":"DbTransaction","needQuote":true,"nodes":[{"content":"DbTransaction","pos":[0,13]}]},{"pos":[44628,44650],"content":"ChangeDatabase(String)","needQuote":true,"nodes":[{"content":"ChangeDatabase(String)","pos":[0,22]}]},{"pos":[44809,44823],"content":"ChangeDatabase","needQuote":true,"nodes":[{"content":"ChangeDatabase","pos":[0,14]}]},{"pos":[44889,44890],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44940,44946],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[45006,45007],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45110,45124],"content":"ChangeDatabase","needQuote":true,"nodes":[{"content":"ChangeDatabase","pos":[0,14]}]},{"pos":[45190,45191],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45241,45247],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[45307,45308],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45552,45559],"content":"Close()","needQuote":true,"nodes":[{"content":"Close()","pos":[0,7]}]},{"pos":[45672,45677],"content":"Close","needQuote":true,"nodes":[{"content":"Close","pos":[0,5]}]},{"pos":[45734,45735],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45762,45763],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45842,45847],"content":"Close","needQuote":true,"nodes":[{"content":"Close","pos":[0,5]}]},{"pos":[45904,45905],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45932,45933],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46128,46137],"content":"DbCommand","needQuote":true,"nodes":[{"content":"DbCommand","pos":[0,9]}]},{"pos":[46339,46359],"content":"StateChangeEventArgs","needQuote":true,"nodes":[{"content":"StateChangeEventArgs","pos":[0,20]}]},{"pos":[46592,46598],"content":"Open()","needQuote":true,"nodes":[{"content":"Open()","pos":[0,6]}]},{"pos":[46709,46713],"content":"Open","needQuote":true,"nodes":[{"content":"Open","pos":[0,4]}]},{"pos":[46769,46770],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46797,46798],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46876,46880],"content":"Open","needQuote":true,"nodes":[{"content":"Open","pos":[0,4]}]},{"pos":[46936,46937],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46964,46965],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47161,47165],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[47328,47350],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[47560,47577],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[47761,47777],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[47986,48004],"content":"BeginTransaction()","needQuote":true,"nodes":[{"content":"BeginTransaction()","pos":[0,18]}]},{"pos":[48139,48155],"content":"BeginTransaction","needQuote":true,"nodes":[{"content":"BeginTransaction","pos":[0,16]}]},{"pos":[48223,48224],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48251,48252],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48342,48358],"content":"BeginTransaction","needQuote":true,"nodes":[{"content":"BeginTransaction","pos":[0,16]}]},{"pos":[48426,48427],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48454,48455],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48663,48677],"content":"IDbTransaction","needQuote":true,"nodes":[{"content":"IDbTransaction","pos":[0,14]}]},{"pos":[48932,48964],"content":"BeginTransaction(IsolationLevel)","needQuote":true,"nodes":[{"content":"BeginTransaction(IsolationLevel)","pos":[0,32]}]},{"pos":[49153,49169],"content":"BeginTransaction","needQuote":true,"nodes":[{"content":"BeginTransaction","pos":[0,16]}]},{"pos":[49237,49238],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49301,49315],"content":"IsolationLevel","needQuote":true,"nodes":[{"content":"IsolationLevel","pos":[0,14]}]},{"pos":[49367,49368],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49486,49502],"content":"BeginTransaction","needQuote":true,"nodes":[{"content":"BeginTransaction","pos":[0,16]}]},{"pos":[49570,49571],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49634,49648],"content":"IsolationLevel","needQuote":true,"nodes":[{"content":"IsolationLevel","pos":[0,14]}]},{"pos":[49700,49701],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49978,49993],"content":"CreateCommand()","needQuote":true,"nodes":[{"content":"CreateCommand()","pos":[0,15]}]},{"pos":[50122,50135],"content":"CreateCommand","needQuote":true,"nodes":[{"content":"CreateCommand","pos":[0,13]}]},{"pos":[50200,50201],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50228,50229],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50316,50329],"content":"CreateCommand","needQuote":true,"nodes":[{"content":"CreateCommand","pos":[0,13]}]},{"pos":[50394,50395],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50422,50423],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50621,50631],"content":"IDbCommand","needQuote":true,"nodes":[{"content":"IDbCommand","pos":[0,10]}]},{"pos":[50823,50832],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[50935,50942],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[50994,50995],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51022,51023],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51097,51104],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[51156,51157],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51184,51185],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51349,51356],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[51523,51548],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[51750,51761],"content":"DbException","needQuote":true,"nodes":[{"content":"DbException","pos":[0,11]}]}],"content":"items:\n- uid: System.Data.Common.DbConnection\n  commentId: T:System.Data.Common.DbConnection\n  id: DbConnection\n  parent: System.Data.Common\n  children:\n  - System.Data.Common.DbConnection.#ctor\n  - System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)\n  - System.Data.Common.DbConnection.BeginTransaction\n  - System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)\n  - System.Data.Common.DbConnection.ChangeDatabase(System.String)\n  - System.Data.Common.DbConnection.Close\n  - System.Data.Common.DbConnection.ConnectionString\n  - System.Data.Common.DbConnection.ConnectionTimeout\n  - System.Data.Common.DbConnection.CreateCommand\n  - System.Data.Common.DbConnection.CreateDbCommand\n  - System.Data.Common.DbConnection.Database\n  - System.Data.Common.DbConnection.DataSource\n  - System.Data.Common.DbConnection.Dispose\n  - System.Data.Common.DbConnection.Dispose(System.Boolean)\n  - System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)\n  - System.Data.Common.DbConnection.Open\n  - System.Data.Common.DbConnection.OpenAsync\n  - System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)\n  - System.Data.Common.DbConnection.ServerVersion\n  - System.Data.Common.DbConnection.State\n  - System.Data.Common.DbConnection.StateChange\n  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction\n  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)\n  - System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand\n  langs:\n  - csharp\n  - vb\n  name: DbConnection\n  fullName: System.Data.Common.DbConnection\n  type: Class\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DbConnection\n    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n    startLine: 16\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Represents a connection to a database. </p>\\n\"\n  syntax:\n    content: 'public abstract class DbConnection : IDbConnection, IDisposable'\n    content.vb: >-\n      Public MustInherit Class DbConnection\n          Implements IDbConnection, IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.Data.IDbConnection\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: DbConnection\n- uid: System.Data.Common.DbConnection.#ctor\n  commentId: M:System.Data.Common.DbConnection.#ctor\n  id: '#ctor'\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  - vb\n  name: DbConnection()\n  fullName: System.Data.Common.DbConnection.DbConnection()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n    startLine: 22\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Data.Common.DbConnection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected DbConnection()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: DbConnection.DbConnection()\n- uid: System.Data.Common.DbConnection.ConnectionString\n  commentId: P:System.Data.Common.DbConnection.ConnectionString\n  id: ConnectionString\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  - vb\n  name: ConnectionString\n  fullName: System.Data.Common.DbConnection.ConnectionString\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConnectionString\n    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n    startLine: 31\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets or sets the string used to open the connection.</p>\\n\"\n  syntax:\n    content: public abstract string ConnectionString { get; set; }\n    content.vb: Public MustOverride Property ConnectionString As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The connection string used to establish the initial connection. The exact contents of the connection string depend on the specific data source for this connection. The default value is an empty string.</p>\\n\"\n  implements:\n  - System.Data.IDbConnection.ConnectionString\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbConnection.ConnectionString\n- uid: System.Data.Common.DbConnection.ConnectionTimeout\n  commentId: P:System.Data.Common.DbConnection.ConnectionTimeout\n  id: ConnectionTimeout\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  - vb\n  name: ConnectionTimeout\n  fullName: System.Data.Common.DbConnection.ConnectionTimeout\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConnectionTimeout\n    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n    startLine: 37\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the time to wait while establishing a connection before terminating the attempt and generating an error.</p>\\n\"\n  syntax:\n    content: public virtual int ConnectionTimeout { get; }\n    content.vb: Public Overridable ReadOnly Property ConnectionTimeout As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The time (in seconds) to wait for a connection to open. The default value is determined by the specific type of connection that you are using.</p>\\n\"\n  implements:\n  - System.Data.IDbConnection.ConnectionTimeout\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: DbConnection.ConnectionTimeout\n- uid: System.Data.Common.DbConnection.Database\n  commentId: P:System.Data.Common.DbConnection.Database\n  id: Database\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  - vb\n  name: Database\n  fullName: System.Data.Common.DbConnection.Database\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Database\n    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n    startLine: 45\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the name of the current database after a connection is opened, or the database name specified in the connection string before the connection is opened.</p>\\n\"\n  syntax:\n    content: public abstract string Database { get; }\n    content.vb: Public MustOverride ReadOnly Property Database As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the current database or the name of the database to be used after a connection is opened. The default value is an empty string.</p>\\n\"\n  implements:\n  - System.Data.IDbConnection.Database\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: DbConnection.Database\n- uid: System.Data.Common.DbConnection.DataSource\n  commentId: P:System.Data.Common.DbConnection.DataSource\n  id: DataSource\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  - vb\n  name: DataSource\n  fullName: System.Data.Common.DbConnection.DataSource\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DataSource\n    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n    startLine: 50\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the name of the database server to which to connect.</p>\\n\"\n  syntax:\n    content: public abstract string DataSource { get; }\n    content.vb: Public MustOverride ReadOnly Property DataSource As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the database server to which to connect. The default value is an empty string.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: DbConnection.DataSource\n- uid: System.Data.Common.DbConnection.ServerVersion\n  commentId: P:System.Data.Common.DbConnection.ServerVersion\n  id: ServerVersion\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  - vb\n  name: ServerVersion\n  fullName: System.Data.Common.DbConnection.ServerVersion\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ServerVersion\n    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n    startLine: 57\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets a string that represents the version of the server to which the object is connected.</p>\\n\"\n  syntax:\n    content: public abstract string ServerVersion { get; }\n    content.vb: Public MustOverride ReadOnly Property ServerVersion As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The version of the database. The format of the string returned depends on the specific type of connection you are using.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<xref href=\\\"System.Data.Common.DbConnection.ServerVersion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> was called while the returned Task was not completed and the connection was not opened after a call to <xref href=\\\"System.Data.Common.DbConnection.OpenAsync\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: DbConnection.ServerVersion\n- uid: System.Data.Common.DbConnection.State\n  commentId: P:System.Data.Common.DbConnection.State\n  id: State\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  - vb\n  name: State\n  fullName: System.Data.Common.DbConnection.State\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: State\n    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n    startLine: 62\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets a string that describes the state of the connection.</p>\\n\"\n  syntax:\n    content: public abstract ConnectionState State { get; }\n    content.vb: Public MustOverride ReadOnly Property State As ConnectionState\n    parameters: []\n    return:\n      type: System.Data.ConnectionState\n      description: \"\\n<p>The state of the connection. The format of the string returned depends on the specific type of connection you are using.</p>\\n\"\n  implements:\n  - System.Data.IDbConnection.State\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: DbConnection.State\n- uid: System.Data.Common.DbConnection.StateChange\n  commentId: E:System.Data.Common.DbConnection.StateChange\n  id: StateChange\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  - vb\n  name: StateChange\n  fullName: System.Data.Common.DbConnection.StateChange\n  type: Event\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: StateChange\n    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n    startLine: 67\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Occurs when the state of the event changes.</p>\\n\"\n  syntax:\n    content: public virtual event StateChangeEventHandler StateChange\n    content.vb: Public Overridable Event StateChange As StateChangeEventHandler\n    return:\n      type: System.Data.StateChangeEventHandler\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: DbConnection.StateChange\n- uid: System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)\n  commentId: M:System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)\n  id: BeginDbTransaction(System.Data.IsolationLevel)\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  - vb\n  name: BeginDbTransaction(IsolationLevel)\n  fullName: System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BeginDbTransaction\n    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n    startLine: 79\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Starts a database transaction.</p>\\n\"\n  syntax:\n    content: protected abstract DbTransaction BeginDbTransaction(IsolationLevel isolationLevel)\n    content.vb: Protected MustOverride Function BeginDbTransaction(isolationLevel As IsolationLevel) As DbTransaction\n    parameters:\n    - id: isolationLevel\n      type: System.Data.IsolationLevel\n      description: \"\\n<p>Specifies the isolation level for the transaction.</p>\\n\"\n    return:\n      type: System.Data.Common.DbTransaction\n      description: \"\\n<p>An object representing the new transaction.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - abstract\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  nameWithType: DbConnection.BeginDbTransaction(IsolationLevel)\n- uid: System.Data.Common.DbConnection.BeginTransaction\n  commentId: M:System.Data.Common.DbConnection.BeginTransaction\n  id: BeginTransaction\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  - vb\n  name: BeginTransaction()\n  fullName: System.Data.Common.DbConnection.BeginTransaction()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BeginTransaction\n    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n    startLine: 81\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Starts a database transaction.</p>\\n\"\n  syntax:\n    content: public DbTransaction BeginTransaction()\n    content.vb: Public Function BeginTransaction As DbTransaction\n    return:\n      type: System.Data.Common.DbTransaction\n      description: \"\\n<p>An object representing the new transaction.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DbConnection.BeginTransaction()\n- uid: System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)\n  commentId: M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)\n  id: BeginTransaction(System.Data.IsolationLevel)\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  - vb\n  name: BeginTransaction(IsolationLevel)\n  fullName: System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BeginTransaction\n    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n    startLine: 86\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Starts a database transaction with the specified isolation level.</p>\\n\"\n  syntax:\n    content: public DbTransaction BeginTransaction(IsolationLevel isolationLevel)\n    content.vb: Public Function BeginTransaction(isolationLevel As IsolationLevel) As DbTransaction\n    parameters:\n    - id: isolationLevel\n      type: System.Data.IsolationLevel\n      description: \"\\n<p>Specifies the isolation level for the transaction.</p>\\n\"\n    return:\n      type: System.Data.Common.DbTransaction\n      description: \"\\n<p>An object representing the new transaction.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DbConnection.BeginTransaction(IsolationLevel)\n- uid: System.Data.Common.DbConnection.ChangeDatabase(System.String)\n  commentId: M:System.Data.Common.DbConnection.ChangeDatabase(System.String)\n  id: ChangeDatabase(System.String)\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  - vb\n  name: ChangeDatabase(String)\n  fullName: System.Data.Common.DbConnection.ChangeDatabase(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ChangeDatabase\n    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n    startLine: 94\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Changes the current database for an open connection.</p>\\n\"\n  syntax:\n    content: public abstract void ChangeDatabase(string databaseName)\n    content.vb: Public MustOverride Sub ChangeDatabase(databaseName As String)\n    parameters:\n    - id: databaseName\n      type: System.String\n      description: \"\\n<p>Specifies the name of the database for the connection to use.</p>\\n\"\n  implements:\n  - System.Data.IDbConnection.ChangeDatabase(System.String)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbConnection.ChangeDatabase(String)\n- uid: System.Data.Common.DbConnection.Close\n  commentId: M:System.Data.Common.DbConnection.Close\n  id: Close\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  - vb\n  name: Close()\n  fullName: System.Data.Common.DbConnection.Close()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Close\n    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n    startLine: 92\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Closes the connection to the database. This is the preferred method of closing any open connection.</p>\\n\"\n  syntax:\n    content: public abstract void Close()\n    content.vb: Public MustOverride Sub Close\n  exceptions:\n  - type: System.Data.Common.DbException\n    commentId: T:System.Data.Common.DbException\n    description: \"\\n<p>The connection-level error that occurred while opening the connection. </p>\\n\"\n  seealso:\n  - type: System.Data.Common.DbConnection.Open\n    commentId: M:System.Data.Common.DbConnection.Open\n  implements:\n  - System.Data.IDbConnection.Close\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbConnection.Close()\n- uid: System.Data.Common.DbConnection.CreateCommand\n  commentId: M:System.Data.Common.DbConnection.CreateCommand\n  id: CreateCommand\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  - vb\n  name: CreateCommand()\n  fullName: System.Data.Common.DbConnection.CreateCommand()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateCommand\n    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n    startLine: 96\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Creates and returns a <xref href=\\\"System.Data.Common.DbCommand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object associated with the current connection.</p>\\n\"\n  syntax:\n    content: public DbCommand CreateCommand()\n    content.vb: Public Function CreateCommand As DbCommand\n    return:\n      type: System.Data.Common.DbCommand\n      description: \"\\n<p>A <xref href=\\\"System.Data.Common.DbCommand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DbConnection.CreateCommand()\n- uid: System.Data.Common.DbConnection.CreateDbCommand\n  commentId: M:System.Data.Common.DbConnection.CreateDbCommand\n  id: CreateDbCommand\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  - vb\n  name: CreateDbCommand()\n  fullName: System.Data.Common.DbConnection.CreateDbCommand()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateDbCommand\n    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n    startLine: 102\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Creates and returns a <xref href=\\\"System.Data.Common.DbCommand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object associated with the current connection.</p>\\n\"\n  syntax:\n    content: protected abstract DbCommand CreateDbCommand()\n    content.vb: Protected MustOverride Function CreateDbCommand As DbCommand\n    return:\n      type: System.Data.Common.DbCommand\n      description: \"\\n<p>A <xref href=\\\"System.Data.Common.DbCommand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - abstract\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  nameWithType: DbConnection.CreateDbCommand()\n- uid: System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)\n  commentId: M:System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)\n  id: OnStateChange(System.Data.StateChangeEventArgs)\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  - vb\n  name: OnStateChange(StateChangeEventArgs)\n  fullName: System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OnStateChange\n    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n    startLine: 105\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Raises the <xref href=\\\"System.Data.Common.DbConnection.StateChange\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> event.</p>\\n\"\n  syntax:\n    content: protected virtual void OnStateChange(StateChangeEventArgs stateChange)\n    content.vb: Protected Overridable Sub OnStateChange(stateChange As StateChangeEventArgs)\n    parameters:\n    - id: stateChange\n      type: System.Data.StateChangeEventArgs\n      description: \"\\n<p>A <xref href=\\\"System.Data.StateChangeEventArgs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the event data.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: DbConnection.OnStateChange(StateChangeEventArgs)\n- uid: System.Data.Common.DbConnection.Open\n  commentId: M:System.Data.Common.DbConnection.Open\n  id: Open\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  - vb\n  name: Open()\n  fullName: System.Data.Common.DbConnection.Open()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Open\n    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n    startLine: 115\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Opens a database connection with the settings specified by the <xref href=\\\"System.Data.Common.DbConnection.ConnectionString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public abstract void Open()\n    content.vb: Public MustOverride Sub Open\n  implements:\n  - System.Data.IDbConnection.Open\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbConnection.Open()\n- uid: System.Data.Common.DbConnection.OpenAsync\n  commentId: M:System.Data.Common.DbConnection.OpenAsync\n  id: OpenAsync\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  - vb\n  name: OpenAsync()\n  fullName: System.Data.Common.DbConnection.OpenAsync()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OpenAsync\n    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n    startLine: 117\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>An asynchronous version of <xref href=\\\"System.Data.Common.DbConnection.Open\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, which opens a database connection with the settings specified by the <xref href=\\\"System.Data.Common.DbConnection.ConnectionString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This method invokes the virtual method <xref href=\\\"System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with CancellationToken.None.</p>\\n\"\n  syntax:\n    content: public Task OpenAsync()\n    content.vb: Public Function OpenAsync As Task\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task representing the asynchronous operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DbConnection.OpenAsync()\n- uid: System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)\n  commentId: M:System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)\n  id: OpenAsync(System.Threading.CancellationToken)\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  - vb\n  name: OpenAsync(CancellationToken)\n  fullName: System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OpenAsync\n    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n    startLine: 122\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>This is the asynchronous version of <xref href=\\\"System.Data.Common.DbConnection.Open\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. Providers should override with an appropriate implementation. The cancellation token can optionally be honored.</p>\\n<p>The default implementation invokes the synchronous <xref href=\\\"System.Data.Common.DbConnection.Open\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> call and returns a completed task. The default implementation will return a cancelled task if passed an already cancelled cancellationToken. Exceptions thrown by Open will be communicated via the returned Task Exception property.</p>\\n<p>Do not invoke other methods and properties of the <strong>DbConnection</strong> object until the returned Task is complete.</p>\\n\"\n  syntax:\n    content: public virtual Task OpenAsync(CancellationToken cancellationToken)\n    content.vb: Public Overridable Function OpenAsync(cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation instruction.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task representing the asynchronous operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: DbConnection.OpenAsync(CancellationToken)\n- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction\n  commentId: M:System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction\n  id: System#Data#IDbConnection#BeginTransaction\n  isEii: true\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  - vb\n  name: IDbConnection.BeginTransaction()\n  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Data.IDbConnection.BeginTransaction\n    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n    startLine: 156\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Begins a database transaction.</p>\\n\"\n  syntax:\n    content: IDbTransaction IDbConnection.BeginTransaction()\n    content.vb: Function System.Data.IDbConnection.BeginTransaction As IDbTransaction Implements IDbConnection.BeginTransaction\n    return:\n      type: System.Data.IDbTransaction\n      description: \"\\n<p>An object that represents the new transaction.</p>\\n\"\n  implements:\n  - System.Data.IDbConnection.BeginTransaction\n  name.vb: System.Data.IDbConnection.BeginTransaction()\n  nameWithType: DbConnection.IDbConnection.BeginTransaction()\n  nameWithType.vb: DbConnection.System.Data.IDbConnection.BeginTransaction()\n- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)\n  commentId: M:System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)\n  id: System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)\n  isEii: true\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  - vb\n  name: IDbConnection.BeginTransaction(IsolationLevel)\n  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Data.IDbConnection.BeginTransaction\n    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n    startLine: 161\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Begins a database transaction with the specified <xref href=\\\"System.Data.IsolationLevel\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: IDbTransaction IDbConnection.BeginTransaction(IsolationLevel isolationLevel)\n    content.vb: Function System.Data.IDbConnection.BeginTransaction(isolationLevel As IsolationLevel) As IDbTransaction Implements IDbConnection.BeginTransaction\n    parameters:\n    - id: isolationLevel\n      type: System.Data.IsolationLevel\n      description: \"\\n<p>One of the <xref href=\\\"System.Data.IsolationLevel\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n    return:\n      type: System.Data.IDbTransaction\n      description: \"\\n<p>An object that represents the new transaction.</p>\\n\"\n  implements:\n  - System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)\n  name.vb: System.Data.IDbConnection.BeginTransaction(IsolationLevel)\n  nameWithType: DbConnection.IDbConnection.BeginTransaction(IsolationLevel)\n  nameWithType.vb: DbConnection.System.Data.IDbConnection.BeginTransaction(IsolationLevel)\n- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand\n  commentId: M:System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand\n  id: System#Data#IDbConnection#CreateCommand\n  isEii: true\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  - vb\n  name: IDbConnection.CreateCommand()\n  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.CreateCommand()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Data.IDbConnection.CreateCommand\n    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n    startLine: 166\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Creates and returns a <xref href=\\\"System.Data.Common.DbCommand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that is associated with the current connection.</p>\\n\"\n  syntax:\n    content: IDbCommand IDbConnection.CreateCommand()\n    content.vb: Function System.Data.IDbConnection.CreateCommand As IDbCommand Implements IDbConnection.CreateCommand\n    return:\n      type: System.Data.IDbCommand\n      description: \"\\n<p>A <xref href=\\\"System.Data.Common.DbCommand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that is associated with the connection.</p>\\n\"\n  implements:\n  - System.Data.IDbConnection.CreateCommand\n  name.vb: System.Data.IDbConnection.CreateCommand()\n  nameWithType: DbConnection.IDbConnection.CreateCommand()\n  nameWithType.vb: DbConnection.System.Data.IDbConnection.CreateCommand()\n- uid: System.Data.Common.DbConnection.Dispose\n  commentId: M:System.Data.Common.DbConnection.Dispose\n  id: Dispose\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Data.Common.DbConnection.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n    startLine: 142\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DbConnection.Dispose()\n- uid: System.Data.Common.DbConnection.Dispose(System.Boolean)\n  commentId: M:System.Data.Common.DbConnection.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Data.Common.DbConnection\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Data.Common.DbConnection.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs\n    startLine: 148\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  syntax:\n    content: protected virtual void Dispose(bool disposing)\n    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: DbConnection.Dispose(Boolean)\nreferences:\n- uid: System.Data.Common\n  isExternal: false\n  name: System.Data.Common\n  fullName: System.Data.Common\n  nameWithType: System.Data.Common\n  commentId: N:System.Data.Common\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Data.IDbConnection\n  parent: System.Data\n  isExternal: false\n  name: IDbConnection\n  fullName: System.Data.IDbConnection\n  nameWithType: IDbConnection\n  commentId: T:System.Data.IDbConnection\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Data\n  isExternal: false\n  name: System.Data\n  fullName: System.Data\n  nameWithType: System.Data\n  commentId: N:System.Data\n- uid: System.Data.IDbConnection.ConnectionString\n  parent: System.Data.IDbConnection\n  isExternal: false\n  name: ConnectionString\n  fullName: System.Data.IDbConnection.ConnectionString\n  nameWithType: IDbConnection.ConnectionString\n  commentId: P:System.Data.IDbConnection.ConnectionString\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Data.IDbConnection.ConnectionTimeout\n  parent: System.Data.IDbConnection\n  isExternal: false\n  name: ConnectionTimeout\n  fullName: System.Data.IDbConnection.ConnectionTimeout\n  nameWithType: IDbConnection.ConnectionTimeout\n  commentId: P:System.Data.IDbConnection.ConnectionTimeout\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Data.IDbConnection.Database\n  parent: System.Data.IDbConnection\n  isExternal: false\n  name: Database\n  fullName: System.Data.IDbConnection.Database\n  nameWithType: IDbConnection.Database\n  commentId: P:System.Data.IDbConnection.Database\n- uid: System.Data.IDbConnection.State\n  parent: System.Data.IDbConnection\n  isExternal: false\n  name: State\n  fullName: System.Data.IDbConnection.State\n  nameWithType: IDbConnection.State\n  commentId: P:System.Data.IDbConnection.State\n- uid: System.Data.ConnectionState\n  parent: System.Data\n  isExternal: false\n  name: ConnectionState\n  fullName: System.Data.ConnectionState\n  nameWithType: ConnectionState\n  commentId: T:System.Data.ConnectionState\n- uid: System.Data.StateChangeEventHandler\n  parent: System.Data\n  isExternal: false\n  name: StateChangeEventHandler\n  fullName: System.Data.StateChangeEventHandler\n  nameWithType: StateChangeEventHandler\n  commentId: T:System.Data.StateChangeEventHandler\n- uid: System.Data.IsolationLevel\n  parent: System.Data\n  isExternal: false\n  name: IsolationLevel\n  fullName: System.Data.IsolationLevel\n  nameWithType: IsolationLevel\n  commentId: T:System.Data.IsolationLevel\n- uid: System.Data.Common.DbTransaction\n  parent: System.Data.Common\n  isExternal: false\n  name: DbTransaction\n  fullName: System.Data.Common.DbTransaction\n  nameWithType: DbTransaction\n  commentId: T:System.Data.Common.DbTransaction\n- uid: System.Data.IDbConnection.ChangeDatabase(System.String)\n  parent: System.Data.IDbConnection\n  isExternal: true\n  name: ChangeDatabase(String)\n  fullName: System.Data.IDbConnection.ChangeDatabase(System.String)\n  spec.csharp:\n  - uid: System.Data.IDbConnection.ChangeDatabase(System.String)\n    name: ChangeDatabase\n    fullName: System.Data.IDbConnection.ChangeDatabase\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDbConnection.ChangeDatabase(System.String)\n    name: ChangeDatabase\n    fullName: System.Data.IDbConnection.ChangeDatabase\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDbConnection.ChangeDatabase(String)\n  commentId: M:System.Data.IDbConnection.ChangeDatabase(System.String)\n- uid: System.Data.IDbConnection.Close\n  parent: System.Data.IDbConnection\n  isExternal: false\n  name: Close()\n  fullName: System.Data.IDbConnection.Close()\n  spec.csharp:\n  - uid: System.Data.IDbConnection.Close\n    name: Close\n    fullName: System.Data.IDbConnection.Close\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDbConnection.Close\n    name: Close\n    fullName: System.Data.IDbConnection.Close\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDbConnection.Close()\n  commentId: M:System.Data.IDbConnection.Close\n- uid: System.Data.Common.DbCommand\n  parent: System.Data.Common\n  isExternal: false\n  name: DbCommand\n  fullName: System.Data.Common.DbCommand\n  nameWithType: DbCommand\n  commentId: T:System.Data.Common.DbCommand\n- uid: System.Data.StateChangeEventArgs\n  parent: System.Data\n  isExternal: false\n  name: StateChangeEventArgs\n  fullName: System.Data.StateChangeEventArgs\n  nameWithType: StateChangeEventArgs\n  commentId: T:System.Data.StateChangeEventArgs\n- uid: System.Data.IDbConnection.Open\n  parent: System.Data.IDbConnection\n  isExternal: false\n  name: Open()\n  fullName: System.Data.IDbConnection.Open()\n  spec.csharp:\n  - uid: System.Data.IDbConnection.Open\n    name: Open\n    fullName: System.Data.IDbConnection.Open\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDbConnection.Open\n    name: Open\n    fullName: System.Data.IDbConnection.Open\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDbConnection.Open()\n  commentId: M:System.Data.IDbConnection.Open\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  fullName: System.Threading.Tasks.Task\n  nameWithType: Task\n  commentId: T:System.Threading.Tasks.Task\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  fullName: System.Threading.CancellationToken\n  nameWithType: CancellationToken\n  commentId: T:System.Threading.CancellationToken\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.Data.IDbConnection.BeginTransaction\n  parent: System.Data.IDbConnection\n  isExternal: false\n  name: BeginTransaction()\n  fullName: System.Data.IDbConnection.BeginTransaction()\n  spec.csharp:\n  - uid: System.Data.IDbConnection.BeginTransaction\n    name: BeginTransaction\n    fullName: System.Data.IDbConnection.BeginTransaction\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDbConnection.BeginTransaction\n    name: BeginTransaction\n    fullName: System.Data.IDbConnection.BeginTransaction\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDbConnection.BeginTransaction()\n  commentId: M:System.Data.IDbConnection.BeginTransaction\n- uid: System.Data.IDbTransaction\n  parent: System.Data\n  isExternal: false\n  name: IDbTransaction\n  fullName: System.Data.IDbTransaction\n  nameWithType: IDbTransaction\n  commentId: T:System.Data.IDbTransaction\n- uid: System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)\n  parent: System.Data.IDbConnection\n  isExternal: false\n  name: BeginTransaction(IsolationLevel)\n  fullName: System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)\n  spec.csharp:\n  - uid: System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)\n    name: BeginTransaction\n    fullName: System.Data.IDbConnection.BeginTransaction\n  - name: (\n    fullName: (\n  - uid: System.Data.IsolationLevel\n    name: IsolationLevel\n    fullName: System.Data.IsolationLevel\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)\n    name: BeginTransaction\n    fullName: System.Data.IDbConnection.BeginTransaction\n  - name: (\n    fullName: (\n  - uid: System.Data.IsolationLevel\n    name: IsolationLevel\n    fullName: System.Data.IsolationLevel\n  - name: )\n    fullName: )\n  nameWithType: IDbConnection.BeginTransaction(IsolationLevel)\n  commentId: M:System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)\n- uid: System.Data.IDbConnection.CreateCommand\n  parent: System.Data.IDbConnection\n  isExternal: false\n  name: CreateCommand()\n  fullName: System.Data.IDbConnection.CreateCommand()\n  spec.csharp:\n  - uid: System.Data.IDbConnection.CreateCommand\n    name: CreateCommand\n    fullName: System.Data.IDbConnection.CreateCommand\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDbConnection.CreateCommand\n    name: CreateCommand\n    fullName: System.Data.IDbConnection.CreateCommand\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDbConnection.CreateCommand()\n  commentId: M:System.Data.IDbConnection.CreateCommand\n- uid: System.Data.IDbCommand\n  parent: System.Data\n  isExternal: false\n  name: IDbCommand\n  fullName: System.Data.IDbCommand\n  nameWithType: IDbCommand\n  commentId: T:System.Data.IDbCommand\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDisposable.Dispose()\n  commentId: M:System.IDisposable.Dispose\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.Data.Common.DbException\n  isExternal: false\n  name: DbException\n  fullName: System.Data.Common.DbException\n  nameWithType: DbException\n  commentId: T:System.Data.Common.DbException\n"}