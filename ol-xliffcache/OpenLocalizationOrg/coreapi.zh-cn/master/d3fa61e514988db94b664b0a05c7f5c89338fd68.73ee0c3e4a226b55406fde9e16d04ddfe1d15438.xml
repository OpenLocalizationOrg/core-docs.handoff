{"nodes":[{"pos":[471,490],"content":"IPv6MulticastOption","needQuote":true,"nodes":[{"content":"IPv6MulticastOption","pos":[0,19]}]},{"pos":[1789,1819],"content":"IPv6MulticastOption(IPAddress)","needQuote":true,"nodes":[{"content":"IPv6MulticastOption(IPAddress)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;group&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[2888,2935],"source":"\\n<p>\\n<em>group</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[2936,2942],"source":" </p>\\n"},{"pos":[3384,3421],"content":"IPv6MulticastOption(IPAddress, Int64)","needQuote":true,"nodes":[{"content":"IPv6MulticastOption(IPAddress, Int64)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The local interface address.","pos":[4498,4531],"source":"\\n<p>The local interface address."},{"content":"&lt;/p&gt;\\n","pos":[4532,4538],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;ifindex&lt;/em&gt; is less than 0.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;ifindex&lt;/em&gt; is greater than 0x00000000FFFFFFFF.","pos":[4669,4785],"source":"\\n<p>\\n<em>ifindex</em> is less than 0.</p>\\n<p>-or- </p>\\n<p>\\n<em>ifindex</em> is greater than 0x00000000FFFFFFFF."},{"content":"&lt;/p&gt;\\n","pos":[4786,4792],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;group&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[4897,4944],"source":"\\n<p>\\n<em>group</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[4945,4951],"source":" </p>\\n"},{"pos":[5293,5298],"content":"Group","needQuote":true,"nodes":[{"content":"Group","pos":[0,5]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;group&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[6225,6272],"source":"\\n<p>\\n<em>group</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[6273,6279],"source":" </p>\\n"},{"pos":[6632,6646],"content":"InterfaceIndex","needQuote":true,"nodes":[{"content":"InterfaceIndex","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The value that is specified for a set operation is less than 0 or greater than 0x00000000FFFFFFFF.","pos":[7615,7718],"source":"\\n<p>The value that is specified for a set operation is less than 0 or greater than 0x00000000FFFFFFFF."},{"content":"&lt;/p&gt;\\n","pos":[7719,7725],"source":" </p>\\n"},{"pos":[7918,7936],"content":"System.Net.Sockets","needQuote":true,"nodes":[{"content":"System.Net.Sockets","pos":[0,18]}]},{"pos":[8103,8109],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8269,8279],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[8374,8382],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[8451,8452],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8479,8480],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8550,8558],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[8627,8628],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8655,8656],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8839,8853],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[8972,8978],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9045,9046],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9096,9102],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9162,9163],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9246,9252],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9319,9320],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9370,9376],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9436,9437],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9651,9673],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[9821,9827],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9894,9895],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9945,9951],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10012,10013]},{"pos":[10068,10074],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10134,10135],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10232,10238],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10305,10306],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10356,10362],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10423,10424]},{"pos":[10479,10485],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10545,10546],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10791,10822],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[10988,11003],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[11079,11080],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11130,11136],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11197,11198]},{"pos":[11253,11259],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11319,11320],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11426,11441],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[11517,11518],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11568,11574],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11635,11636]},{"pos":[11691,11697],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11757,11758],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11988,12001],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[12102,12113],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[12185,12186],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12213,12214],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12287,12298],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[12370,12371],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12398,12399],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12574,12583],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[12676,12683],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[12751,12752],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12779,12780],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12849,12856],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[12924,12925],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12952,12953],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13128,13145],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[13254,13269],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[13345,13346],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13373,13374],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13451,13466],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[13542,13543],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13570,13571],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13716,13722],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[13864,13873],"content":"IPAddress","needQuote":true,"nodes":[{"content":"IPAddress","pos":[0,9]}]},{"pos":[14015,14025],"content":"System.Net","needQuote":true,"nodes":[{"content":"System.Net","pos":[0,10]}]},{"pos":[14167,14172],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[14312,14333],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[14527,14554],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Net.Sockets.IPv6MulticastOption\n  commentId: T:System.Net.Sockets.IPv6MulticastOption\n  id: IPv6MulticastOption\n  parent: System.Net.Sockets\n  children:\n  - System.Net.Sockets.IPv6MulticastOption.#ctor(System.Net.IPAddress)\n  - System.Net.Sockets.IPv6MulticastOption.#ctor(System.Net.IPAddress,System.Int64)\n  - System.Net.Sockets.IPv6MulticastOption.Group\n  - System.Net.Sockets.IPv6MulticastOption.InterfaceIndex\n  langs:\n  - csharp\n  - vb\n  name: IPv6MulticastOption\n  fullName: System.Net.Sockets.IPv6MulticastOption\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IPv6MulticastOption\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 64\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Contains option values for joining an IPv6 multicast group.</p>\\n\"\n  syntax:\n    content: public class IPv6MulticastOption\n    content.vb: Public Class IPv6MulticastOption\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: IPv6MulticastOption\n- uid: System.Net.Sockets.IPv6MulticastOption.#ctor(System.Net.IPAddress)\n  commentId: M:System.Net.Sockets.IPv6MulticastOption.#ctor(System.Net.IPAddress)\n  id: '#ctor(System.Net.IPAddress)'\n  parent: System.Net.Sockets.IPv6MulticastOption\n  langs:\n  - csharp\n  - vb\n  name: IPv6MulticastOption(IPAddress)\n  fullName: System.Net.Sockets.IPv6MulticastOption.IPv6MulticastOption(System.Net.IPAddress)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 66\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Initializes a new version of the <xref href=\\\"System.Net.Sockets.IPv6MulticastOption\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class for the specified IP multicast group.</p>\\n\"\n  syntax:\n    content: public IPv6MulticastOption(IPAddress group)\n    content.vb: Public Sub New(group As IPAddress)\n    parameters:\n    - id: group\n      type: System.Net.IPAddress\n      description: \"\\n<p>The <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the multicast group. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>group</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: IPv6MulticastOption.IPv6MulticastOption(IPAddress)\n- uid: System.Net.Sockets.IPv6MulticastOption.#ctor(System.Net.IPAddress,System.Int64)\n  commentId: M:System.Net.Sockets.IPv6MulticastOption.#ctor(System.Net.IPAddress,System.Int64)\n  id: '#ctor(System.Net.IPAddress,System.Int64)'\n  parent: System.Net.Sockets.IPv6MulticastOption\n  langs:\n  - csharp\n  - vb\n  name: IPv6MulticastOption(IPAddress, Int64)\n  fullName: System.Net.Sockets.IPv6MulticastOption.IPv6MulticastOption(System.Net.IPAddress, System.Int64)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 67\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Sockets.IPv6MulticastOption\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified IP multicast group and the local interface address.</p>\\n\"\n  syntax:\n    content: public IPv6MulticastOption(IPAddress group, long ifindex)\n    content.vb: Public Sub New(group As IPAddress, ifindex As Long)\n    parameters:\n    - id: group\n      type: System.Net.IPAddress\n      description: \"\\n<p>The group <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: ifindex\n      type: System.Int64\n      description: \"\\n<p>The local interface address. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>ifindex</em> is less than 0.</p>\\n<p>-or- </p>\\n<p>\\n<em>ifindex</em> is greater than 0x00000000FFFFFFFF. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>group</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: IPv6MulticastOption.IPv6MulticastOption(IPAddress, Int64)\n- uid: System.Net.Sockets.IPv6MulticastOption.Group\n  commentId: P:System.Net.Sockets.IPv6MulticastOption.Group\n  id: Group\n  parent: System.Net.Sockets.IPv6MulticastOption\n  langs:\n  - csharp\n  - vb\n  name: Group\n  fullName: System.Net.Sockets.IPv6MulticastOption.Group\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Group\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 68\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets the IP address of a multicast group.</p>\\n\"\n  syntax:\n    content: public IPAddress Group { get; set; }\n    content.vb: Public Property Group As IPAddress\n    parameters: []\n    return:\n      type: System.Net.IPAddress\n      description: \"\\n<p>An <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the Internet address of a multicast group.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>group</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: IPv6MulticastOption.Group\n- uid: System.Net.Sockets.IPv6MulticastOption.InterfaceIndex\n  commentId: P:System.Net.Sockets.IPv6MulticastOption.InterfaceIndex\n  id: InterfaceIndex\n  parent: System.Net.Sockets.IPv6MulticastOption\n  langs:\n  - csharp\n  - vb\n  name: InterfaceIndex\n  fullName: System.Net.Sockets.IPv6MulticastOption.InterfaceIndex\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InterfaceIndex\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 69\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets the interface index that is associated with a multicast group.</p>\\n\"\n  syntax:\n    content: public long InterfaceIndex { get; set; }\n    content.vb: Public Property InterfaceIndex As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>A <xref href=\\\"System.UInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that specifies the address of the interface.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The value that is specified for a set operation is less than 0 or greater than 0x00000000FFFFFFFF. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: IPv6MulticastOption.InterfaceIndex\nreferences:\n- uid: System.Net.Sockets\n  isExternal: false\n  name: System.Net.Sockets\n  fullName: System.Net.Sockets\n  commentId: N:System.Net.Sockets\n  nameWithType: System.Net.Sockets\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Net.IPAddress\n  parent: System.Net\n  isExternal: false\n  name: IPAddress\n  fullName: System.Net.IPAddress\n  commentId: T:System.Net.IPAddress\n  nameWithType: IPAddress\n- uid: System.Net\n  isExternal: false\n  name: System.Net\n  fullName: System.Net\n  commentId: N:System.Net\n  nameWithType: System.Net\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  commentId: T:System.Int64\n  nameWithType: Int64\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}