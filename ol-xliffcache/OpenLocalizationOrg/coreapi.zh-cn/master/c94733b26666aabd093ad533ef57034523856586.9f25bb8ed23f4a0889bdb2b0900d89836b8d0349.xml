{"nodes":[{"pos":[428,442],"content":"TaskExtensions","needQuote":true,"nodes":[{"content":"TaskExtensions","pos":[0,14]}]},{"pos":[2009,2027],"content":"Unwrap(Task<Task>)","needQuote":true,"nodes":[{"content":"Unwrap(Task&lt;Task&gt;)","pos":[0,18],"source":"Unwrap(Task<Task>)"}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;Task&lt;Task&gt;&lt;/strong&gt; (C#) or &lt;strong&gt;Task (Of Task)&lt;/strong&gt; (Visual Basic) to unwrap.&lt;/p&gt;\\n","pos":[3141,3249],"source":"\\n<p>The <strong>Task<Task></strong> (C#) or <strong>Task (Of Task)</strong> (Visual Basic) to unwrap.</p>\\n"},{"content":"\\n&lt;p&gt;A Task that represents the asynchronous operation of the provided &lt;strong&gt;System.Threading.Tasks.Task(Of Task)&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[3323,3454],"source":"\\n<p>A Task that represents the asynchronous operation of the provided <strong>System.Threading.Tasks.Task(Of Task)</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown if the &lt;em&gt;task&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[3573,3651],"source":"\\n<p>The exception that is thrown if the <em>task</em> argument is null.</p>\\n"},{"pos":[4425,4461],"content":"Unwrap<TResult>(Task<Task<TResult>>)","needQuote":true,"nodes":[{"content":"Unwrap&lt;TResult&gt;(Task&lt;Task&lt;TResult&gt;&gt;)","pos":[0,36],"source":"Unwrap<TResult>(Task<Task<TResult>>)"}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;Task&lt;Task&lt;T&gt;&gt;&lt;/strong&gt; (C#) or &lt;strong&gt;Task (Of Task(Of T))&lt;/strong&gt; (Visual Basic) to unwrap.&lt;/p&gt;\\n","pos":[5597,5714],"source":"\\n<p>The <strong>Task<Task<T>></strong> (C#) or <strong>Task (Of Task(Of T))</strong> (Visual Basic) to unwrap.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the task's result.&lt;/p&gt;\\n","pos":[5774,5815],"source":"\\n<p>The type of the task's result.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown if the &lt;em&gt;task&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[6271,6349],"source":"\\n<p>The exception that is thrown if the <em>task</em> argument is null.</p>\\n"},{"pos":[6851,6873],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[7052,7058],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7218,7228],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[7323,7331],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7400,7401],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7428,7429],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7499,7507],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7576,7577],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7604,7605],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7788,7802],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[7921,7927],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7994,7995],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8045,8051],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8111,8112],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8195,8201],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8268,8269],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8319,8325],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8385,8386],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8600,8622],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[8770,8776],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8843,8844],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8894,8900],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8961,8962]},{"pos":[9017,9023],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9083,9084],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9181,9187],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9254,9255],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9305,9311],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9372,9373]},{"pos":[9428,9434],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9494,9495],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9740,9771],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[9937,9952],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10028,10029],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10079,10085],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10146,10147]},{"pos":[10202,10208],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10268,10269],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10375,10390],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10466,10467],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10517,10523],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10584,10585]},{"pos":[10640,10646],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10706,10707],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10937,10950],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[11051,11062],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[11134,11135],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11162,11163],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11236,11247],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[11319,11320],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11347,11348],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11523,11532],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[11625,11632],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11700,11701],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11728,11729],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11798,11805],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11873,11874],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11901,11902],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12077,12094],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[12203,12218],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12294,12295],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12322,12323],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12400,12415],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12491,12492],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12519,12520],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12665,12671],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[12885,12895],"content":"Task<Task>","needQuote":true,"nodes":[{"content":"Task&lt;Task&gt;","pos":[0,10],"source":"Task<Task>"}]},{"pos":[13129,13133],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[13186,13187],"content":"<","needQuote":true,"nodes":[]},{"pos":[13251,13255],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[13390,13394],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[13448,13451]},{"pos":[13522,13526],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[13579,13580],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13825,13829],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[13999,14012],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[14209,14213],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[14266,14267],"content":"<","needQuote":true,"nodes":[]},{"pos":[14294,14301],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[14416,14420],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[14474,14477]},{"pos":[14511,14518],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[14551,14552],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14840,14859],"content":"Task<Task<TResult>>","needQuote":true,"nodes":[{"content":"Task&lt;Task&lt;TResult&gt;&gt;","pos":[0,19],"source":"Task<Task<TResult>>"}]},{"pos":[15126,15130],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[15183,15184],"content":"<","needQuote":true,"nodes":[]},{"pos":[15250,15254],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[15307,15308],"content":"<","needQuote":true,"nodes":[]},{"pos":[15335,15342],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[15489,15493],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[15547,15550]},{"pos":[15623,15627],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[15681,15684]},{"pos":[15718,15725],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[15758,15759],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15786,15787],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16093,16106],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[16303,16307],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[16360,16361],"content":"<","needQuote":true,"nodes":[]},{"pos":[16388,16395],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[16510,16514],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[16568,16571]},{"pos":[16605,16612],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[16645,16646],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16840,16861],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Threading.Tasks.TaskExtensions\n  commentId: T:System.Threading.Tasks.TaskExtensions\n  id: TaskExtensions\n  parent: System.Threading.Tasks\n  children:\n  - System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})\n  - System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})\n  langs:\n  - csharp\n  - vb\n  name: TaskExtensions\n  fullName: System.Threading.Tasks.TaskExtensions\n  type: Class\n  source:\n    remote:\n      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TaskExtensions\n    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs\n    startLine: 390\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Provides a set of static (Shared in Visual Basic) methods for working with specific kinds of <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances.</p>\\n\"\n  syntax:\n    content: public class TaskExtensions\n    content.vb: Public Class TaskExtensions\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: TaskExtensions\n- uid: System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})\n  commentId: M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})\n  id: Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})\n  isExtensionMethod: true\n  parent: System.Threading.Tasks.TaskExtensions\n  langs:\n  - csharp\n  - vb\n  name: Unwrap(Task<Task>)\n  fullName: System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task<System.Threading.Tasks.Task>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Unwrap\n    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs\n    startLine: 392\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a proxy <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the asynchronous operation of a <xref href=\\\"System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static Task Unwrap(this Task<Task> task)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Unwrap(task As Task(Of Task)) As Task\n    parameters:\n    - id: task\n      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task}\n      description: \"\\n<p>The <strong>Task<Task></strong> (C#) or <strong>Task (Of Task)</strong> (Visual Basic) to unwrap.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A Task that represents the asynchronous operation of the provided <strong>System.Threading.Tasks.Task(Of Task)</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown if the <em>task</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task(Of System.Threading.Tasks.Task))\n  name.vb: Unwrap(Task(Of Task))\n  nameWithType: TaskExtensions.Unwrap(Task<Task>)\n  nameWithType.vb: TaskExtensions.Unwrap(Task(Of Task))\n- uid: System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})\n  commentId: M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})\n  id: Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})\n  isExtensionMethod: true\n  parent: System.Threading.Tasks.TaskExtensions\n  langs:\n  - csharp\n  - vb\n  name: Unwrap<TResult>(Task<Task<TResult>>)\n  fullName: System.Threading.Tasks.TaskExtensions.Unwrap<TResult>(System.Threading.Tasks.Task<System.Threading.Tasks.Task<TResult>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Unwrap\n    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs\n    startLine: 393\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a proxy <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the asynchronous operation of a <strong>Task<Task<T>></strong> (C#) or <strong>Task (Of Task(Of T))</strong> (Visual Basic).</p>\\n\"\n  syntax:\n    content: public static Task<TResult> Unwrap<TResult>(this Task<Task<TResult>> task)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Unwrap(Of TResult)(task As Task(Of Task(Of TResult))) As Task(Of TResult)\n    parameters:\n    - id: task\n      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task{{TResult}}}\n      description: \"\\n<p>The <strong>Task<Task<T>></strong> (C#) or <strong>Task (Of Task(Of T))</strong> (Visual Basic) to unwrap.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the task's result.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>A <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the asynchronous operation of the provided <strong>Task<Task<T>></strong> (C#) or <strong>Task (Of Task(Of T))</strong> (Visual Basic).</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown if the <em>task</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.TaskExtensions.Unwrap(Of TResult)(System.Threading.Tasks.Task(Of System.Threading.Tasks.Task(Of TResult)))\n  name.vb: Unwrap(Of TResult)(Task(Of Task(Of TResult)))\n  nameWithType: TaskExtensions.Unwrap<TResult>(Task<Task<TResult>>)\n  nameWithType.vb: TaskExtensions.Unwrap(Of TResult)(Task(Of Task(Of TResult)))\nreferences:\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Threading.Tasks.Task{System.Threading.Tasks.Task}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<Task>\n  fullName: System.Threading.Tasks.Task<System.Threading.Tasks.Task>\n  fullname.vb: System.Threading.Tasks.Task(Of System.Threading.Tasks.Task)\n  name.vb: Task(Of Task)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: )\n    fullName: )\n  commentId: T:System.Threading.Tasks.Task{System.Threading.Tasks.Task}\n  nameWithType: Task<Task>\n  nameWithType.vb: Task(Of Task)\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  fullName: System.Threading.Tasks.Task\n  commentId: T:System.Threading.Tasks.Task\n  nameWithType: Task\n- uid: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Threading.Tasks.Task`1\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n- uid: System.Threading.Tasks.Task{System.Threading.Tasks.Task{{TResult}}}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<Task<TResult>>\n  fullName: System.Threading.Tasks.Task<System.Threading.Tasks.Task<TResult>>\n  fullname.vb: System.Threading.Tasks.Task(Of System.Threading.Tasks.Task(Of TResult))\n  name.vb: Task(Of Task(Of TResult))\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}}\n  nameWithType: Task<Task<TResult>>\n  nameWithType.vb: Task(Of Task(Of TResult))\n- uid: System.Threading.Tasks.Task{{TResult}}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Threading.Tasks.Task{`0}\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}