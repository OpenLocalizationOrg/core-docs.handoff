{"nodes":[{"pos":[1854,1861],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[3566,3576],"content":"Attributes","needQuote":true,"nodes":[{"content":"Attributes","pos":[0,10]}]},{"content":"\\n&lt;p&gt;An &lt;strong&gt;XmlAttributeCollection&lt;/strong&gt; containing the attributes of the node.&lt;/p&gt;\\n&lt;p&gt;If the node is of type XmlNodeType.Element, the attributes of the node are returned.","pos":[4401,4580],"source":"\\n<p>An <strong>XmlAttributeCollection</strong> containing the attributes of the node.</p>\\n<p>If the node is of type XmlNodeType.Element, the attributes of the node are returned."},{"content":"Otherwise, this property returns &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[4581,4642],"source":" Otherwise, this property returns <strong>null</strong>.</p>\\n"},{"pos":[4940,4947],"content":"BaseURI","needQuote":true,"nodes":[{"content":"BaseURI","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The location from which the node was loaded or String.Empty if the node has no base URI.&lt;/p&gt;\\n","pos":[5605,5704],"source":"\\n<p>The location from which the node was loaded or String.Empty if the node has no base URI.</p>\\n"},{"pos":[6008,6018],"content":"ChildNodes","needQuote":true,"nodes":[{"content":"ChildNodes","pos":[0,10]}]},{"pos":[7232,7242],"content":"FirstChild","needQuote":true,"nodes":[{"content":"FirstChild","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The first child of the node.","pos":[7914,7947],"source":"\\n<p>The first child of the node."},{"content":"If there is no such node, &lt;strong&gt;null&lt;/strong&gt; is returned.&lt;/p&gt;\\n","pos":[7948,8014],"source":" If there is no such node, <strong>null</strong> is returned.</p>\\n"},{"pos":[8330,8343],"content":"HasChildNodes","needQuote":true,"nodes":[{"content":"HasChildNodes","pos":[0,13]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the node has child nodes; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9049,9147],"source":"\\n<p>\\n<strong>true</strong> if the node has child nodes; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[9454,9463],"content":"InnerText","needQuote":true,"nodes":[{"content":"InnerText","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The concatenated values of the node and all its child nodes.&lt;/p&gt;\\n","pos":[10160,10231],"source":"\\n<p>The concatenated values of the node and all its child nodes.</p>\\n"},{"pos":[10526,10534],"content":"InnerXml","needQuote":true,"nodes":[{"content":"InnerXml","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The markup of the child nodes of this node.&lt;/p&gt;\\n&lt;p&gt;\\n&lt;strong&gt;InnerXml&lt;/strong&gt; does not return default attributes.&lt;/p&gt;\\n","pos":[11225,11351],"source":"\\n<p>The markup of the child nodes of this node.</p>\\n<p>\\n<strong>InnerXml</strong> does not return default attributes.</p>\\n"},{"content":"\\n&lt;p&gt;Setting this property on a node that cannot have child nodes.","pos":[11478,11544],"source":"\\n<p>Setting this property on a node that cannot have child nodes."},{"content":"&lt;/p&gt;\\n","pos":[11545,11551],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The XML specified when setting this property is not well-formed.","pos":[11646,11715],"source":"\\n<p>The XML specified when setting this property is not well-formed."},{"content":"&lt;/p&gt;\\n","pos":[11716,11722],"source":" </p>\\n"},{"pos":[12022,12032],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the node is read-only; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12718,12812],"source":"\\n<p>\\n<strong>true</strong> if the node is read-only; otherwise <strong>false</strong>.</p>\\n"},{"pos":[13146,13158],"content":"Item[String]","needQuote":true,"nodes":[{"content":"Item[String]","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The qualified name of the element to retrieve.","pos":[13952,14003],"source":"\\n<p>The qualified name of the element to retrieve."},{"content":"&lt;/p&gt;\\n","pos":[14004,14010],"source":" </p>\\n"},{"pos":[14802,14822],"content":"Item[String, String]","needQuote":true,"nodes":[{"content":"Item[String, String]","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The local name of the element.","pos":[15772,15807],"source":"\\n<p>The local name of the element."},{"content":"&lt;/p&gt;\\n","pos":[15808,15814],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.","pos":[15875,15913],"source":"\\n<p>The namespace URI of the element."},{"content":"&lt;/p&gt;\\n","pos":[15914,15920],"source":" </p>\\n"},{"pos":[16702,16711],"content":"LastChild","needQuote":true,"nodes":[{"content":"LastChild","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The last child of the node.","pos":[17378,17410],"source":"\\n<p>The last child of the node."},{"content":"If there is no such node, &lt;strong&gt;null&lt;/strong&gt; is returned.&lt;/p&gt;\\n","pos":[17411,17477],"source":" If there is no such node, <strong>null</strong> is returned.</p>\\n"},{"pos":[17780,17789],"content":"LocalName","needQuote":true,"nodes":[{"content":"LocalName","pos":[0,9]}]},{"pos":[20514,20518],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[22992,23004],"content":"NamespaceURI","needQuote":true,"nodes":[{"content":"NamespaceURI","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The namespace URI of this node.","pos":[23680,23716],"source":"\\n<p>The namespace URI of this node."},{"content":"If there is no namespace URI, this property returns String.Empty.&lt;/p&gt;\\n","pos":[23717,23788],"source":" If there is no namespace URI, this property returns String.Empty.</p>\\n"},{"pos":[24100,24111],"content":"NextSibling","needQuote":true,"nodes":[{"content":"NextSibling","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The next &lt;strong&gt;XmlNode&lt;/strong&gt;.","pos":[24800,24839],"source":"\\n<p>The next <strong>XmlNode</strong>."},{"content":"If there is no next node, &lt;strong&gt;null&lt;/strong&gt; is returned.&lt;/p&gt;\\n","pos":[24840,24906],"source":" If there is no next node, <strong>null</strong> is returned.</p>\\n"},{"pos":[25208,25216],"content":"NodeType","needQuote":true,"nodes":[{"content":"NodeType","pos":[0,8]}]},{"pos":[26344,26352],"content":"OuterXml","needQuote":true,"nodes":[{"content":"OuterXml","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The markup containing this node and all its child nodes.&lt;/p&gt;\\n&lt;p&gt;\\n&lt;strong&gt;OuterXml&lt;/strong&gt; does not return default attributes.&lt;/p&gt;\\n","pos":[27037,27176],"source":"\\n<p>The markup containing this node and all its child nodes.</p>\\n<p>\\n<strong>OuterXml</strong> does not return default attributes.</p>\\n"},{"pos":[27490,27503],"content":"OwnerDocument","needQuote":true,"nodes":[{"content":"OwnerDocument","pos":[0,13]}]},{"pos":[28914,28924],"content":"ParentNode","needQuote":true,"nodes":[{"content":"ParentNode","pos":[0,10]}]},{"pos":[31656,31662],"content":"Prefix","needQuote":true,"nodes":[{"content":"Prefix","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The namespace prefix of this node.","pos":[32321,32360],"source":"\\n<p>The namespace prefix of this node."},{"content":"For example, &lt;strong&gt;Prefix&lt;/strong&gt; is bk for the element &lt;bk:book&gt;.","pos":[32361,32430],"source":" For example, <strong>Prefix</strong> is bk for the element <bk:book>."},{"content":"If there is no prefix, this property returns String.Empty.&lt;/p&gt;\\n","pos":[32431,32495],"source":" If there is no prefix, this property returns String.Empty.</p>\\n"},{"content":"\\n&lt;p&gt;This node is read-only.","pos":[32606,32634],"source":"\\n<p>This node is read-only."},{"content":"&lt;/p&gt;\\n","pos":[32635,32641],"source":" </p>\\n"},{"pos":[33532,33547],"content":"PreviousSibling","needQuote":true,"nodes":[{"content":"PreviousSibling","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The preceding &lt;strong&gt;XmlNode&lt;/strong&gt;.","pos":[34252,34296],"source":"\\n<p>The preceding <strong>XmlNode</strong>."},{"content":"If there is no preceding node, &lt;strong&gt;null&lt;/strong&gt; is returned.&lt;/p&gt;\\n","pos":[34297,34368],"source":" If there is no preceding node, <strong>null</strong> is returned.</p>\\n"},{"pos":[34686,34698],"content":"PreviousText","needQuote":true,"nodes":[{"content":"PreviousText","pos":[0,12]}]},{"pos":[35792,35797],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"content":"\\n&lt;p&gt;Setting the value of a node that is read-only.","pos":[38591,38642],"source":"\\n<p>Setting the value of a node that is read-only."},{"content":"&lt;/p&gt;\\n","pos":[38643,38649],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Setting the value of a node that is not supposed to have a value (for example, an Element node).","pos":[38762,38863],"source":"\\n<p>Setting the value of a node that is not supposed to have a value (for example, an Element node)."},{"content":"&lt;/p&gt;\\n","pos":[38864,38870],"source":" </p>\\n"},{"pos":[39230,39250],"content":"AppendChild(XmlNode)","needQuote":true,"nodes":[{"content":"AppendChild(XmlNode)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The node to add.","pos":[40012,40033],"source":"\\n<p>The node to add."},{"content":"All the contents of the node to be added are moved into the specified location.","pos":[40034,40113]},{"content":"&lt;/p&gt;\\n","pos":[40114,40120],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The node added.&lt;/p&gt;\\n","pos":[40185,40211],"source":"\\n<p>The node added.</p>\\n"},{"content":"\\n&lt;p&gt;This node is of a type that does not allow child nodes of the type of the &lt;em&gt;newChild&lt;/em&gt; node.&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;newChild&lt;/em&gt; is an ancestor of this node.","pos":[40338,40499],"source":"\\n<p>This node is of a type that does not allow child nodes of the type of the <em>newChild</em> node.</p>\\n<p>The <em>newChild</em> is an ancestor of this node."},{"content":"&lt;/p&gt;\\n","pos":[40500,40506],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;newChild&lt;/em&gt; was created from a different document than the one that created this node.&lt;/p&gt;\\n&lt;p&gt;This node is read-only.","pos":[40603,40736],"source":"\\n<p>The <em>newChild</em> was created from a different document than the one that created this node.</p>\\n<p>This node is read-only."},{"content":"&lt;/p&gt;\\n","pos":[40737,40743],"source":" </p>\\n"},{"pos":[41260,41278],"content":"CloneNode(Boolean)","needQuote":true,"nodes":[{"content":"CloneNode(Boolean)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to recursively clone the subtree under the specified node; &lt;strong&gt;false&lt;/strong&gt; to clone only the node itself.","pos":[42003,42144],"source":"\\n<p>\\n<strong>true</strong> to recursively clone the subtree under the specified node; <strong>false</strong> to clone only the node itself."},{"content":"&lt;/p&gt;\\n","pos":[42145,42151],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The cloned node.&lt;/p&gt;\\n","pos":[42216,42243],"source":"\\n<p>The cloned node.</p>\\n"},{"content":"\\n&lt;p&gt;Calling this method on a node type that cannot be cloned.","pos":[42370,42432],"source":"\\n<p>Calling this method on a node type that cannot be cloned."},{"content":"&lt;/p&gt;\\n","pos":[42433,42439],"source":" </p>\\n"},{"pos":[42744,42759],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[43973,44001],"content":"GetNamespaceOfPrefix(String)","needQuote":true,"nodes":[{"content":"GetNamespaceOfPrefix(String)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The prefix whose namespace URI you want to find.","pos":[44850,44903],"source":"\\n<p>The prefix whose namespace URI you want to find."},{"content":"&lt;/p&gt;\\n","pos":[44904,44910],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the specified prefix.&lt;/p&gt;\\n","pos":[44970,45023],"source":"\\n<p>The namespace URI of the specified prefix.</p>\\n"},{"pos":[45402,45430],"content":"GetPrefixOfNamespace(String)","needQuote":true,"nodes":[{"content":"GetPrefixOfNamespace(String)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The namespace URI whose prefix you want to find.","pos":[46306,46359],"source":"\\n<p>The namespace URI whose prefix you want to find."},{"content":"&lt;/p&gt;\\n","pos":[46360,46366],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The prefix for the specified namespace URI.&lt;/p&gt;\\n","pos":[46426,46480],"source":"\\n<p>The prefix for the specified namespace URI.</p>\\n"},{"pos":[46904,46933],"content":"InsertAfter(XmlNode, XmlNode)","needQuote":true,"nodes":[{"content":"InsertAfter(XmlNode, XmlNode)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlNode&lt;/strong&gt; to insert.","pos":[47752,47796],"source":"\\n<p>The <strong>XmlNode</strong> to insert."},{"content":"&lt;/p&gt;\\n","pos":[47797,47803],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlNode&lt;/strong&gt; that is the reference node.","pos":[47875,47936],"source":"\\n<p>The <strong>XmlNode</strong> that is the reference node."},{"content":"The &lt;em&gt;newNode&lt;/em&gt; is placed after the &lt;em&gt;refNode&lt;/em&gt;.","pos":[47937,47995],"source":" The <em>newNode</em> is placed after the <em>refNode</em>."},{"content":"&lt;/p&gt;\\n","pos":[47996,48002],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The node being inserted.&lt;/p&gt;\\n","pos":[48067,48102],"source":"\\n<p>The node being inserted.</p>\\n"},{"content":"\\n&lt;p&gt;This node is of a type that does not allow child nodes of the type of the &lt;em&gt;newChild&lt;/em&gt; node.&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;newChild&lt;/em&gt; is an ancestor of this node.","pos":[48229,48390],"source":"\\n<p>This node is of a type that does not allow child nodes of the type of the <em>newChild</em> node.</p>\\n<p>The <em>newChild</em> is an ancestor of this node."},{"content":"&lt;/p&gt;\\n","pos":[48391,48397],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;newChild&lt;/em&gt; was created from a different document than the one that created this node.&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;refChild&lt;/em&gt; is not a child of this node.&lt;/p&gt;\\n&lt;p&gt;This node is read-only.","pos":[48494,48686],"source":"\\n<p>The <em>newChild</em> was created from a different document than the one that created this node.</p>\\n<p>The <em>refChild</em> is not a child of this node.</p>\\n<p>This node is read-only."},{"content":"&lt;/p&gt;\\n","pos":[48687,48693],"source":" </p>\\n"},{"pos":[49297,49327],"content":"InsertBefore(XmlNode, XmlNode)","needQuote":true,"nodes":[{"content":"InsertBefore(XmlNode, XmlNode)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlNode&lt;/strong&gt; to insert.","pos":[50151,50195],"source":"\\n<p>The <strong>XmlNode</strong> to insert."},{"content":"&lt;/p&gt;\\n","pos":[50196,50202],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlNode&lt;/strong&gt; that is the reference node.","pos":[50274,50335],"source":"\\n<p>The <strong>XmlNode</strong> that is the reference node."},{"content":"The &lt;em&gt;newChild&lt;/em&gt; is placed before this node.","pos":[50336,50385],"source":" The <em>newChild</em> is placed before this node."},{"content":"&lt;/p&gt;\\n","pos":[50386,50392],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The node being inserted.&lt;/p&gt;\\n","pos":[50457,50492],"source":"\\n<p>The node being inserted.</p>\\n"},{"content":"\\n&lt;p&gt;The current node is of a type that does not allow child nodes of the type of the &lt;em&gt;newChild&lt;/em&gt; node.&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;newChild&lt;/em&gt; is an ancestor of this node.","pos":[50619,50787],"source":"\\n<p>The current node is of a type that does not allow child nodes of the type of the <em>newChild</em> node.</p>\\n<p>The <em>newChild</em> is an ancestor of this node."},{"content":"&lt;/p&gt;\\n","pos":[50788,50794],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;newChild&lt;/em&gt; was created from a different document than the one that created this node.&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;refChild&lt;/em&gt; is not a child of this node.&lt;/p&gt;\\n&lt;p&gt;This node is read-only.","pos":[50891,51083],"source":"\\n<p>The <em>newChild</em> was created from a different document than the one that created this node.</p>\\n<p>The <em>refChild</em> is not a child of this node.</p>\\n<p>This node is read-only."},{"content":"&lt;/p&gt;\\n","pos":[51084,51090],"source":" </p>\\n"},{"pos":[51569,51580],"content":"Normalize()","needQuote":true,"nodes":[{"content":"Normalize()","pos":[0,11]}]},{"pos":[52731,52752],"content":"PrependChild(XmlNode)","needQuote":true,"nodes":[{"content":"PrependChild(XmlNode)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The node to add.","pos":[53524,53545],"source":"\\n<p>The node to add."},{"content":"All the contents of the node to be added are moved into the specified location.&lt;/p&gt;\\n","pos":[53546,53631],"source":" All the contents of the node to be added are moved into the specified location.</p>\\n"},{"content":"\\n&lt;p&gt;The node added.&lt;/p&gt;\\n","pos":[53696,53722],"source":"\\n<p>The node added.</p>\\n"},{"content":"\\n&lt;p&gt;This node is of a type that does not allow child nodes of the type of the &lt;em&gt;newChild&lt;/em&gt; node.&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;newChild&lt;/em&gt; is an ancestor of this node.","pos":[53849,54010],"source":"\\n<p>This node is of a type that does not allow child nodes of the type of the <em>newChild</em> node.</p>\\n<p>The <em>newChild</em> is an ancestor of this node."},{"content":"&lt;/p&gt;\\n","pos":[54011,54017],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;newChild&lt;/em&gt; was created from a different document than the one that created this node.&lt;/p&gt;\\n&lt;p&gt;This node is read-only.","pos":[54114,54247],"source":"\\n<p>The <em>newChild</em> was created from a different document than the one that created this node.</p>\\n<p>This node is read-only."},{"content":"&lt;/p&gt;\\n","pos":[54248,54254],"source":" </p>\\n"},{"pos":[54724,54735],"content":"RemoveAll()","needQuote":true,"nodes":[{"content":"RemoveAll()","pos":[0,11]}]},{"pos":[55667,55687],"content":"RemoveChild(XmlNode)","needQuote":true,"nodes":[{"content":"RemoveChild(XmlNode)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The node being removed.","pos":[56402,56430],"source":"\\n<p>The node being removed."},{"content":"&lt;/p&gt;\\n","pos":[56431,56437],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The node removed.&lt;/p&gt;\\n","pos":[56502,56530],"source":"\\n<p>The node removed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;oldChild&lt;/em&gt; is not a child of this node.","pos":[56641,56696],"source":"\\n<p>The <em>oldChild</em> is not a child of this node."},{"content":"Or this node is read-only.","pos":[56697,56723]},{"content":"&lt;/p&gt;\\n","pos":[56724,56730],"source":" </p>\\n"},{"pos":[57149,57179],"content":"ReplaceChild(XmlNode, XmlNode)","needQuote":true,"nodes":[{"content":"ReplaceChild(XmlNode, XmlNode)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The new node to put in the child list.","pos":[57998,58041],"source":"\\n<p>The new node to put in the child list."},{"content":"&lt;/p&gt;\\n","pos":[58042,58048],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The node being replaced in the list.","pos":[58120,58161],"source":"\\n<p>The node being replaced in the list."},{"content":"&lt;/p&gt;\\n","pos":[58162,58168],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The node replaced.&lt;/p&gt;\\n","pos":[58233,58262],"source":"\\n<p>The node replaced.</p>\\n"},{"content":"\\n&lt;p&gt;This node is of a type that does not allow child nodes of the type of the &lt;em&gt;newChild&lt;/em&gt; node.&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;newChild&lt;/em&gt; is an ancestor of this node.","pos":[58389,58550],"source":"\\n<p>This node is of a type that does not allow child nodes of the type of the <em>newChild</em> node.</p>\\n<p>The <em>newChild</em> is an ancestor of this node."},{"content":"&lt;/p&gt;\\n","pos":[58551,58557],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;newChild&lt;/em&gt; was created from a different document than the one that created this node.&lt;/p&gt;\\n&lt;p&gt;This node is read-only.&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;oldChild&lt;/em&gt; is not a child of this node.","pos":[58654,58846],"source":"\\n<p>The <em>newChild</em> was created from a different document than the one that created this node.</p>\\n<p>This node is read-only.</p>\\n<p>The <em>oldChild</em> is not a child of this node."},{"content":"&lt;/p&gt;\\n","pos":[58847,58853],"source":" </p>\\n"},{"pos":[59416,59440],"content":"Supports(String, String)","needQuote":true,"nodes":[{"content":"Supports(String, String)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The package name of the feature to test.","pos":[60208,60253],"source":"\\n<p>The package name of the feature to test."},{"content":"This name is not case-sensitive.","pos":[60254,60286]},{"content":"&lt;/p&gt;\\n","pos":[60287,60293],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The version number of the package name to test.","pos":[60359,60411],"source":"\\n<p>The version number of the package name to test."},{"content":"If the version is not specified (null), supporting any version of the feature causes the method to return true.","pos":[60412,60523]},{"content":"&lt;/p&gt;\\n","pos":[60524,60530],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the feature is implemented in the specified version; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[60591,60710],"source":"\\n<p>\\n<strong>true</strong> if the feature is implemented in the specified version; otherwise, <strong>false</strong>."},{"content":"The following table describes the combinations that return &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;Feature &lt;/p&gt;\\n&lt;p&gt;Version &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;XML &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;1.0 &lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;XML &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;2.0 &lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[60711,60978],"source":" The following table describes the combinations that return <strong>true</strong>.</p>\\n<p>Feature </p>\\n<p>Version </p>\\n<table><tbody><tr><td>\\n<p>XML </p>\\n</td><td>\\n<p>1.0 </p>\\n</td></tr><tr><td>\\n<p>XML </p>\\n</td><td>\\n<p>2.0 </p>\\n</td></tr></tbody></table>\\n"},{"pos":[61394,61421],"content":"IEnumerable.GetEnumerator()","needQuote":true,"nodes":[{"content":"IEnumerable.GetEnumerator()","pos":[0,27]}]},{"content":"\\n&lt;p&gt;Returns an enumerator for the collection.&lt;/p&gt;\\n","pos":[62296,62348],"source":"\\n<p>Returns an enumerator for the collection.</p>\\n"},{"pos":[62838,62863],"content":"WriteContentTo(XmlWriter)","needQuote":true,"nodes":[{"content":"WriteContentTo(XmlWriter)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlWriter&lt;/strong&gt; to which you want to save.","pos":[63703,63765],"source":"\\n<p>The <strong>XmlWriter</strong> to which you want to save."},{"content":"&lt;/p&gt;\\n","pos":[63766,63772],"source":" </p>\\n"},{"pos":[64268,64286],"content":"WriteTo(XmlWriter)","needQuote":true,"nodes":[{"content":"WriteTo(XmlWriter)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlWriter&lt;/strong&gt; to which you want to save.","pos":[65083,65145],"source":"\\n<p>The <strong>XmlWriter</strong> to which you want to save."},{"content":"&lt;/p&gt;\\n","pos":[65146,65152],"source":" </p>\\n"},{"pos":[65343,65353],"content":"System.Xml","needQuote":true,"nodes":[{"content":"System.Xml","pos":[0,10]}]},{"pos":[65496,65502],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[65676,65687],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[65886,65896],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[65991,65999],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[66068,66069],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66096,66097],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66167,66175],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[66244,66245],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66272,66273],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66456,66470],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[66589,66595],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[66662,66663],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66713,66719],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[66779,66780],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66863,66869],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[66936,66937],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66987,66993],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[67053,67054],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67268,67290],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[67438,67444],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[67511,67512],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67562,67568],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[67629,67630]},{"pos":[67685,67691],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[67751,67752],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67849,67855],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[67922,67923],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67973,67979],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[68040,68041]},{"pos":[68096,68102],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[68162,68163],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68408,68439],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[68605,68620],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[68696,68697],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68747,68753],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[68814,68815]},{"pos":[68870,68876],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[68936,68937],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69043,69058],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[69134,69135],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69185,69191],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[69252,69253]},{"pos":[69308,69314],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[69374,69375],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69605,69618],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[69719,69730],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[69802,69803],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69830,69831],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69904,69915],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[69987,69988],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70015,70016],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70191,70200],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[70293,70300],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[70368,70369],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70396,70397],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70466,70473],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[70541,70542],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70569,70570],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70745,70762],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[70871,70886],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[70962,70963],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70990,70991],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71068,71083],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[71159,71160],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71187,71188],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71483,71496],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[71613,71624],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[71683,71684],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71711,71712],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71793,71804],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[71863,71864],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71891,71892],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72247,72259],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[72392,72402],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[72469,72470],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72497,72498],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72587,72597],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[72664,72665],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72692,72693],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73034,73049],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[73253,73266],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[73328,73329],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73356,73357],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73435,73451],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[73516,73517],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73544,73545],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73923,73940],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[74152,74167],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[74231,74232],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74259,74260],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74340,74358],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[74425,74426],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74453,74454],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74689,74695],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[74814,74832],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[75033,75057],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[75236,75247],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[75306,75307],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75374,75385],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[75462,75463],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75576,75587],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[75646,75647],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75714,75725],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[75802,75803],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76031,76040],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[76246,76269],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[76464,76474],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[76541,76542],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76609,76620],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[76697,76698],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76819,76829],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[76896,76897],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76964,76975],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[77052,77053],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77306,77324],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[77546,77572],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[77879,77892],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[77954,77955],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78022,78033],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[78110,78111],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78221,78237],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[78302,78303],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78370,78381],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[78458,78459],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78748,78758],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[78958,78986],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[79301,79316],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[79380,79381],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79448,79459],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[79536,79537],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79649,79667],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[79734,79735],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79802,79813],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[79890,79891],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80153,80164],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[80334,80356],"content":"XmlAttributeCollection","needQuote":true,"nodes":[{"content":"XmlAttributeCollection","pos":[0,22]}]},{"pos":[80557,80563],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[80721,80732],"content":"XmlNodeList","needQuote":true,"nodes":[{"content":"XmlNodeList","pos":[0,11]}]},{"pos":[80909,80916],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[81073,81080],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[81240,81250],"content":"XmlElement","needQuote":true,"nodes":[{"content":"XmlElement","pos":[0,10]}]},{"pos":[81428,81439],"content":"XmlNodeType","needQuote":true,"nodes":[{"content":"XmlNodeType","pos":[0,11]}]},{"pos":[81620,81631],"content":"XmlDocument","needQuote":true,"nodes":[{"content":"XmlDocument","pos":[0,11]}]},{"pos":[81828,81839],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[82078,82093],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[82232,82245],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[82315,82316],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82343,82344],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82436,82449],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[82519,82520],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82547,82548],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82746,82755],"content":"XmlWriter","needQuote":true,"nodes":[{"content":"XmlWriter","pos":[0,9]}]},{"pos":[82936,82961],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[83156,83168],"content":"XmlException","needQuote":true,"nodes":[{"content":"XmlException","pos":[0,12]}]},{"pos":[83350,83367],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Xml.XmlNode\n  commentId: T:System.Xml.XmlNode\n  id: XmlNode\n  parent: System.Xml\n  children:\n  - System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)\n  - System.Xml.XmlNode.Attributes\n  - System.Xml.XmlNode.BaseURI\n  - System.Xml.XmlNode.ChildNodes\n  - System.Xml.XmlNode.CloneNode(System.Boolean)\n  - System.Xml.XmlNode.FirstChild\n  - System.Xml.XmlNode.GetEnumerator\n  - System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)\n  - System.Xml.XmlNode.GetPrefixOfNamespace(System.String)\n  - System.Xml.XmlNode.HasChildNodes\n  - System.Xml.XmlNode.InnerText\n  - System.Xml.XmlNode.InnerXml\n  - System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)\n  - System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)\n  - System.Xml.XmlNode.IsReadOnly\n  - System.Xml.XmlNode.Item(System.String)\n  - System.Xml.XmlNode.Item(System.String,System.String)\n  - System.Xml.XmlNode.LastChild\n  - System.Xml.XmlNode.LocalName\n  - System.Xml.XmlNode.Name\n  - System.Xml.XmlNode.NamespaceURI\n  - System.Xml.XmlNode.NextSibling\n  - System.Xml.XmlNode.NodeType\n  - System.Xml.XmlNode.Normalize\n  - System.Xml.XmlNode.OuterXml\n  - System.Xml.XmlNode.OwnerDocument\n  - System.Xml.XmlNode.ParentNode\n  - System.Xml.XmlNode.Prefix\n  - System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)\n  - System.Xml.XmlNode.PreviousSibling\n  - System.Xml.XmlNode.PreviousText\n  - System.Xml.XmlNode.RemoveAll\n  - System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)\n  - System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)\n  - System.Xml.XmlNode.Supports(System.String,System.String)\n  - System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator\n  - System.Xml.XmlNode.Value\n  - System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)\n  - System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)\n  langs:\n  - csharp\n  - vb\n  name: XmlNode\n  fullName: System.Xml.XmlNode\n  type: Class\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XmlNode\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 241\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Represents a single node in the XML document. </p>\\n\"\n  syntax:\n    content: 'public abstract class XmlNode : IEnumerable'\n    content.vb: >-\n      Public MustInherit Class XmlNode\n          Implements IEnumerable\n  seealso:\n  - type: System.Xml.XmlNode.SelectNodes(System.String)\n    commentId: M:System.Xml.XmlNode.SelectNodes(System.String)\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: XmlNode\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Xml.XmlNode.Attributes\n  commentId: P:System.Xml.XmlNode.Attributes\n  id: Attributes\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: Attributes\n  fullName: System.Xml.XmlNode.Attributes\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Attributes\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 244\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets an <xref href=\\\"System.Xml.XmlAttributeCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the attributes of this node.</p>\\n\"\n  syntax:\n    content: public virtual XmlAttributeCollection Attributes { get; }\n    content.vb: Public Overridable ReadOnly Property Attributes As XmlAttributeCollection\n    parameters: []\n    return:\n      type: System.Xml.XmlAttributeCollection\n      description: \"\\n<p>An <strong>XmlAttributeCollection</strong> containing the attributes of the node.</p>\\n<p>If the node is of type XmlNodeType.Element, the attributes of the node are returned. Otherwise, this property returns <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: XmlNode.Attributes\n- uid: System.Xml.XmlNode.BaseURI\n  commentId: P:System.Xml.XmlNode.BaseURI\n  id: BaseURI\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: BaseURI\n  fullName: System.Xml.XmlNode.BaseURI\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BaseURI\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 245\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the base URI of the current node.</p>\\n\"\n  syntax:\n    content: public virtual string BaseURI { get; }\n    content.vb: Public Overridable ReadOnly Property BaseURI As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The location from which the node was loaded or String.Empty if the node has no base URI.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: XmlNode.BaseURI\n- uid: System.Xml.XmlNode.ChildNodes\n  commentId: P:System.Xml.XmlNode.ChildNodes\n  id: ChildNodes\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: ChildNodes\n  fullName: System.Xml.XmlNode.ChildNodes\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ChildNodes\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 246\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets all the child nodes of the node.</p>\\n\"\n  syntax:\n    content: public virtual XmlNodeList ChildNodes { get; }\n    content.vb: Public Overridable ReadOnly Property ChildNodes As XmlNodeList\n    parameters: []\n    return:\n      type: System.Xml.XmlNodeList\n      description: \"\\n<p>An object that contains all the child nodes of the node.</p>\\n<p>If there are no child nodes, this property returns an empty <xref href=\\\"System.Xml.XmlNodeList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: XmlNode.ChildNodes\n- uid: System.Xml.XmlNode.FirstChild\n  commentId: P:System.Xml.XmlNode.FirstChild\n  id: FirstChild\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: FirstChild\n  fullName: System.Xml.XmlNode.FirstChild\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FirstChild\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 247\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the first child of the node.</p>\\n\"\n  syntax:\n    content: public virtual XmlNode FirstChild { get; }\n    content.vb: Public Overridable ReadOnly Property FirstChild As XmlNode\n    parameters: []\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The first child of the node. If there is no such node, <strong>null</strong> is returned.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: XmlNode.FirstChild\n- uid: System.Xml.XmlNode.HasChildNodes\n  commentId: P:System.Xml.XmlNode.HasChildNodes\n  id: HasChildNodes\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: HasChildNodes\n  fullName: System.Xml.XmlNode.HasChildNodes\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HasChildNodes\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 248\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets a value indicating whether this node has any child nodes.</p>\\n\"\n  syntax:\n    content: public virtual bool HasChildNodes { get; }\n    content.vb: Public Overridable ReadOnly Property HasChildNodes As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the node has child nodes; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: XmlNode.HasChildNodes\n- uid: System.Xml.XmlNode.InnerText\n  commentId: P:System.Xml.XmlNode.InnerText\n  id: InnerText\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: InnerText\n  fullName: System.Xml.XmlNode.InnerText\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InnerText\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 249\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets the concatenated values of the node and all its child nodes.</p>\\n\"\n  syntax:\n    content: public virtual string InnerText { get; set; }\n    content.vb: Public Overridable Property InnerText As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The concatenated values of the node and all its child nodes.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNode.InnerText\n- uid: System.Xml.XmlNode.InnerXml\n  commentId: P:System.Xml.XmlNode.InnerXml\n  id: InnerXml\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: InnerXml\n  fullName: System.Xml.XmlNode.InnerXml\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InnerXml\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 250\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets the markup representing only the child nodes of this node.</p>\\n\"\n  syntax:\n    content: public virtual string InnerXml { get; set; }\n    content.vb: Public Overridable Property InnerXml As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The markup of the child nodes of this node.</p>\\n<p>\\n<strong>InnerXml</strong> does not return default attributes.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>Setting this property on a node that cannot have child nodes. </p>\\n\"\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: \"\\n<p>The XML specified when setting this property is not well-formed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNode.InnerXml\n- uid: System.Xml.XmlNode.IsReadOnly\n  commentId: P:System.Xml.XmlNode.IsReadOnly\n  id: IsReadOnly\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: IsReadOnly\n  fullName: System.Xml.XmlNode.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsReadOnly\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 251\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets a value indicating whether the node is read-only.</p>\\n\"\n  syntax:\n    content: public virtual bool IsReadOnly { get; }\n    content.vb: Public Overridable ReadOnly Property IsReadOnly As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the node is read-only; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: XmlNode.IsReadOnly\n- uid: System.Xml.XmlNode.Item(System.String)\n  commentId: P:System.Xml.XmlNode.Item(System.String)\n  id: Item(System.String)\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: Item[String]\n  fullName: System.Xml.XmlNode.Item[System.String]\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 252\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the first child element with the specified <xref href=\\\"System.Xml.XmlNode.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual XmlElement this[string name] { get; }\n    content.vb: Public Overridable ReadOnly Property Item(name As String) As XmlElement\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The qualified name of the element to retrieve. </p>\\n\"\n    return:\n      type: System.Xml.XmlElement\n      description: \"\\n<p>The first <xref href=\\\"System.Xml.XmlElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that matches the specified name. It returns a null reference (<strong>Nothing</strong> in Visual Basic) if there is no match.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  fullName.vb: System.Xml.XmlNode.Item(System.String)\n  name.vb: Item(String)\n  nameWithType: XmlNode.Item[String]\n  nameWithType.vb: XmlNode.Item(String)\n- uid: System.Xml.XmlNode.Item(System.String,System.String)\n  commentId: P:System.Xml.XmlNode.Item(System.String,System.String)\n  id: Item(System.String,System.String)\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: Item[String, String]\n  fullName: System.Xml.XmlNode.Item[System.String, System.String]\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 253\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the first child element with the specified <xref href=\\\"System.Xml.XmlNode.LocalName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Xml.XmlNode.NamespaceURI\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual XmlElement this[string localname, string ns] { get; }\n    content.vb: Public Overridable ReadOnly Property Item(localname As String, ns As String) As XmlElement\n    parameters:\n    - id: localname\n      type: System.String\n      description: \"\\n<p>The local name of the element. </p>\\n\"\n    - id: ns\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element. </p>\\n\"\n    return:\n      type: System.Xml.XmlElement\n      description: \"\\n<p>The first <xref href=\\\"System.Xml.XmlElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the matching <em>localname</em> and <em>ns</em>. . It returns a null reference (<strong>Nothing</strong> in Visual Basic) if there is no match.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  fullName.vb: System.Xml.XmlNode.Item(System.String, System.String)\n  name.vb: Item(String, String)\n  nameWithType: XmlNode.Item[String, String]\n  nameWithType.vb: XmlNode.Item(String, String)\n- uid: System.Xml.XmlNode.LastChild\n  commentId: P:System.Xml.XmlNode.LastChild\n  id: LastChild\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: LastChild\n  fullName: System.Xml.XmlNode.LastChild\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LastChild\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 254\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the last child of the node.</p>\\n\"\n  syntax:\n    content: public virtual XmlNode LastChild { get; }\n    content.vb: Public Overridable ReadOnly Property LastChild As XmlNode\n    parameters: []\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The last child of the node. If there is no such node, <strong>null</strong> is returned.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: XmlNode.LastChild\n- uid: System.Xml.XmlNode.LocalName\n  commentId: P:System.Xml.XmlNode.LocalName\n  id: LocalName\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: LocalName\n  fullName: System.Xml.XmlNode.LocalName\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LocalName\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 255\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the local name of the node, when overridden in a derived class.</p>\\n\"\n  syntax:\n    content: public abstract string LocalName { get; }\n    content.vb: Public MustOverride ReadOnly Property LocalName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the node with the prefix removed. For example, <strong>LocalName</strong> is book for the element <bk:book>.</p>\\n<p>The name returned is dependent on the <xref href=\\\"System.Xml.XmlNode.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the node: </p>\\n<p>Type </p>\\n<p>Name </p>\\n<table><tbody><tr><td>\\n<p>Attribute </p>\\n</td><td>\\n<p>The local name of the attribute. </p>\\n</td></tr><tr><td>\\n<p>CDATA </p>\\n</td><td>\\n<p>#cdata-section </p>\\n</td></tr><tr><td>\\n<p>Comment </p>\\n</td><td>\\n<p>#comment </p>\\n</td></tr><tr><td>\\n<p>Document </p>\\n</td><td>\\n<p>#document </p>\\n</td></tr><tr><td>\\n<p>DocumentFragment </p>\\n</td><td>\\n<p>#document-fragment </p>\\n</td></tr><tr><td>\\n<p>DocumentType </p>\\n</td><td>\\n<p>The document type name. </p>\\n</td></tr><tr><td>\\n<p>Element </p>\\n</td><td>\\n<p>The local name of the element. </p>\\n</td></tr><tr><td>\\n<p>Entity </p>\\n</td><td>\\n<p>The name of the entity. </p>\\n</td></tr><tr><td>\\n<p>EntityReference </p>\\n</td><td>\\n<p>The name of the entity referenced. </p>\\n</td></tr><tr><td>\\n<p>Notation </p>\\n</td><td>\\n<p>The notation name. </p>\\n</td></tr><tr><td>\\n<p>ProcessingInstruction </p>\\n</td><td>\\n<p>The target of the processing instruction. </p>\\n</td></tr><tr><td>\\n<p>Text </p>\\n</td><td>\\n<p>#text </p>\\n</td></tr><tr><td>\\n<p>Whitespace </p>\\n</td><td>\\n<p>#whitespace </p>\\n</td></tr><tr><td>\\n<p>SignificantWhitespace </p>\\n</td><td>\\n<p>#significant-whitespace </p>\\n</td></tr><tr><td>\\n<p>XmlDeclaration </p>\\n</td><td>\\n<p>#xml-declaration </p>\\n</td></tr></tbody></table>\\n\"\n  seealso:\n  - type: System.Xml.XmlNode.Prefix\n    commentId: P:System.Xml.XmlNode.Prefix\n  - type: System.Xml.XmlNode.Name\n    commentId: P:System.Xml.XmlNode.Name\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: XmlNode.LocalName\n- uid: System.Xml.XmlNode.Name\n  commentId: P:System.Xml.XmlNode.Name\n  id: Name\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: Name\n  fullName: System.Xml.XmlNode.Name\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Name\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 256\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the qualified name of the node, when overridden in a derived class.</p>\\n\"\n  syntax:\n    content: public abstract string Name { get; }\n    content.vb: Public MustOverride ReadOnly Property Name As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The qualified name of the node. The name returned is dependent on the <xref href=\\\"System.Xml.XmlNode.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the node: </p>\\n<p>Type </p>\\n<p>Name </p>\\n<table><tbody><tr><td>\\n<p>Attribute </p>\\n</td><td>\\n<p>The qualified name of the attribute. </p>\\n</td></tr><tr><td>\\n<p>CDATA </p>\\n</td><td>\\n<p>#cdata-section </p>\\n</td></tr><tr><td>\\n<p>Comment </p>\\n</td><td>\\n<p>#comment </p>\\n</td></tr><tr><td>\\n<p>Document </p>\\n</td><td>\\n<p>#document </p>\\n</td></tr><tr><td>\\n<p>DocumentFragment </p>\\n</td><td>\\n<p>#document-fragment </p>\\n</td></tr><tr><td>\\n<p>DocumentType </p>\\n</td><td>\\n<p>The document type name. </p>\\n</td></tr><tr><td>\\n<p>Element </p>\\n</td><td>\\n<p>The qualified name of the element. </p>\\n</td></tr><tr><td>\\n<p>Entity </p>\\n</td><td>\\n<p>The name of the entity. </p>\\n</td></tr><tr><td>\\n<p>EntityReference </p>\\n</td><td>\\n<p>The name of the entity referenced. </p>\\n</td></tr><tr><td>\\n<p>Notation </p>\\n</td><td>\\n<p>The notation name. </p>\\n</td></tr><tr><td>\\n<p>ProcessingInstruction </p>\\n</td><td>\\n<p>The target of the processing instruction. </p>\\n</td></tr><tr><td>\\n<p>Text </p>\\n</td><td>\\n<p>#text </p>\\n</td></tr><tr><td>\\n<p>Whitespace </p>\\n</td><td>\\n<p>#whitespace </p>\\n</td></tr><tr><td>\\n<p>SignificantWhitespace </p>\\n</td><td>\\n<p>#significant-whitespace </p>\\n</td></tr><tr><td>\\n<p>XmlDeclaration </p>\\n</td><td>\\n<p>#xml-declaration </p>\\n</td></tr></tbody></table>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: XmlNode.Name\n- uid: System.Xml.XmlNode.NamespaceURI\n  commentId: P:System.Xml.XmlNode.NamespaceURI\n  id: NamespaceURI\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: NamespaceURI\n  fullName: System.Xml.XmlNode.NamespaceURI\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NamespaceURI\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 257\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the namespace URI of this node.</p>\\n\"\n  syntax:\n    content: public virtual string NamespaceURI { get; }\n    content.vb: Public Overridable ReadOnly Property NamespaceURI As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The namespace URI of this node. If there is no namespace URI, this property returns String.Empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: XmlNode.NamespaceURI\n- uid: System.Xml.XmlNode.NextSibling\n  commentId: P:System.Xml.XmlNode.NextSibling\n  id: NextSibling\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: NextSibling\n  fullName: System.Xml.XmlNode.NextSibling\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NextSibling\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 258\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the node immediately following this node.</p>\\n\"\n  syntax:\n    content: public virtual XmlNode NextSibling { get; }\n    content.vb: Public Overridable ReadOnly Property NextSibling As XmlNode\n    parameters: []\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The next <strong>XmlNode</strong>. If there is no next node, <strong>null</strong> is returned.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: XmlNode.NextSibling\n- uid: System.Xml.XmlNode.NodeType\n  commentId: P:System.Xml.XmlNode.NodeType\n  id: NodeType\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: NodeType\n  fullName: System.Xml.XmlNode.NodeType\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NodeType\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 259\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the type of the current node, when overridden in a derived class.</p>\\n\"\n  syntax:\n    content: public abstract XmlNodeType NodeType { get; }\n    content.vb: Public MustOverride ReadOnly Property NodeType As XmlNodeType\n    parameters: []\n    return:\n      type: System.Xml.XmlNodeType\n      description: \"\\n<p>One of the <xref href=\\\"System.Xml.XmlNodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: XmlNode.NodeType\n- uid: System.Xml.XmlNode.OuterXml\n  commentId: P:System.Xml.XmlNode.OuterXml\n  id: OuterXml\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: OuterXml\n  fullName: System.Xml.XmlNode.OuterXml\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OuterXml\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 260\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the markup containing this node and all its child nodes.</p>\\n\"\n  syntax:\n    content: public virtual string OuterXml { get; }\n    content.vb: Public Overridable ReadOnly Property OuterXml As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The markup containing this node and all its child nodes.</p>\\n<p>\\n<strong>OuterXml</strong> does not return default attributes.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: XmlNode.OuterXml\n- uid: System.Xml.XmlNode.OwnerDocument\n  commentId: P:System.Xml.XmlNode.OwnerDocument\n  id: OwnerDocument\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: OwnerDocument\n  fullName: System.Xml.XmlNode.OwnerDocument\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OwnerDocument\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 261\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Xml.XmlDocument\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which this node belongs.</p>\\n\"\n  syntax:\n    content: public virtual XmlDocument OwnerDocument { get; }\n    content.vb: Public Overridable ReadOnly Property OwnerDocument As XmlDocument\n    parameters: []\n    return:\n      type: System.Xml.XmlDocument\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlDocument\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which this node belongs.</p>\\n<p>If the node is an <xref href=\\\"System.Xml.XmlDocument\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> (NodeType equals XmlNodeType.Document), this property returns <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: XmlNode.OwnerDocument\n- uid: System.Xml.XmlNode.ParentNode\n  commentId: P:System.Xml.XmlNode.ParentNode\n  id: ParentNode\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: ParentNode\n  fullName: System.Xml.XmlNode.ParentNode\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ParentNode\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 262\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the parent of this node (for nodes that can have parents).</p>\\n\"\n  syntax:\n    content: public virtual XmlNode ParentNode { get; }\n    content.vb: Public Overridable ReadOnly Property ParentNode As XmlNode\n    parameters: []\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The <strong>XmlNode</strong> that is the parent of the current node. If a node has just been created and not yet added to the tree, or if it has been removed from the tree, the parent is <strong>null</strong>. For all other nodes, the value returned depends on the <xref href=\\\"System.Xml.XmlNode.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the node. The following table describes the possible return values for the <strong>ParentNode</strong> property.</p>\\n<p>NodeType </p>\\n<p>Return Value of ParentNode </p>\\n<table><tbody><tr><td>\\n<p>Attribute, Document, DocumentFragment, Entity, Notation </p>\\n</td><td>\\n<p>Returns <strong>null</strong>; these nodes do not have parents. </p>\\n</td></tr><tr><td>\\n<p>CDATA </p>\\n</td><td>\\n<p>Returns the element or entity reference containing the CDATA section. </p>\\n</td></tr><tr><td>\\n<p>Comment </p>\\n</td><td>\\n<p>Returns the element, entity reference, document type, or document containing the comment. </p>\\n</td></tr><tr><td>\\n<p>DocumentType </p>\\n</td><td>\\n<p>Returns the document node. </p>\\n</td></tr><tr><td>\\n<p>Element </p>\\n</td><td>\\n<p>Returns the parent node of the element. If the element is the root node in the tree, the parent is the document node. </p>\\n</td></tr><tr><td>\\n<p>EntityReference </p>\\n</td><td>\\n<p>Returns the element, attribute, or entity reference containing the entity reference. </p>\\n</td></tr><tr><td>\\n<p>ProcessingInstruction </p>\\n</td><td>\\n<p>Returns the document, element, document type, or entity reference containing the processing instruction. </p>\\n</td></tr><tr><td>\\n<p>Text </p>\\n</td><td>\\n<p>Returns the parent element, attribute, or entity reference containing the text node. </p>\\n</td></tr></tbody></table>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: XmlNode.ParentNode\n- uid: System.Xml.XmlNode.Prefix\n  commentId: P:System.Xml.XmlNode.Prefix\n  id: Prefix\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: Prefix\n  fullName: System.Xml.XmlNode.Prefix\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Prefix\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 263\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets the namespace prefix of this node.</p>\\n\"\n  syntax:\n    content: public virtual string Prefix { get; set; }\n    content.vb: Public Overridable Property Prefix As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The namespace prefix of this node. For example, <strong>Prefix</strong> is bk for the element <bk:book>. If there is no prefix, this property returns String.Empty.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>This node is read-only. </p>\\n\"\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: \"\\n<p>The specified prefix contains an invalid character.</p>\\n<p>The specified prefix is malformed.</p>\\n<p>The specified prefix is \\\"xml\\\" and the namespaceURI of this node is different from \\\"http://www.w3.org/XML/1998/namespace\\\".</p>\\n<p>This node is an attribute and the specified prefix is \\\"xmlns\\\" and the namespaceURI of this node is different from \\\"http://www.w3.org/2000/xmlns/ \\\".</p>\\n<p>This node is an attribute and the qualifiedName of this node is \\\"xmlns\\\". </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNode.Prefix\n- uid: System.Xml.XmlNode.PreviousSibling\n  commentId: P:System.Xml.XmlNode.PreviousSibling\n  id: PreviousSibling\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: PreviousSibling\n  fullName: System.Xml.XmlNode.PreviousSibling\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PreviousSibling\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 264\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the node immediately preceding this node.</p>\\n\"\n  syntax:\n    content: public virtual XmlNode PreviousSibling { get; }\n    content.vb: Public Overridable ReadOnly Property PreviousSibling As XmlNode\n    parameters: []\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The preceding <strong>XmlNode</strong>. If there is no preceding node, <strong>null</strong> is returned.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: XmlNode.PreviousSibling\n- uid: System.Xml.XmlNode.PreviousText\n  commentId: P:System.Xml.XmlNode.PreviousText\n  id: PreviousText\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: PreviousText\n  fullName: System.Xml.XmlNode.PreviousText\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PreviousText\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 265\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the text node that immediately precedes this node.</p>\\n\"\n  syntax:\n    content: public virtual XmlNode PreviousText { get; }\n    content.vb: Public Overridable ReadOnly Property PreviousText As XmlNode\n    parameters: []\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>Returns <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: XmlNode.PreviousText\n- uid: System.Xml.XmlNode.Value\n  commentId: P:System.Xml.XmlNode.Value\n  id: Value\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: Value\n  fullName: System.Xml.XmlNode.Value\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Value\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 266\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets the value of the node.</p>\\n\"\n  syntax:\n    content: public virtual string Value { get; set; }\n    content.vb: Public Overridable Property Value As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The value returned depends on the <xref href=\\\"System.Xml.XmlNode.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the node: </p>\\n<p>Type </p>\\n<p>Value </p>\\n<table><tbody><tr><td>\\n<p>Attribute </p>\\n</td><td>\\n<p>The value of the attribute. </p>\\n</td></tr><tr><td>\\n<p>CDATASection </p>\\n</td><td>\\n<p>The content of the CDATA Section. </p>\\n</td></tr><tr><td>\\n<p>Comment </p>\\n</td><td>\\n<p>The content of the comment. </p>\\n</td></tr><tr><td>\\n<p>Document </p>\\n</td><td>\\n<p>\\n<strong>null</strong>. </p>\\n</td></tr><tr><td>\\n<p>DocumentFragment </p>\\n</td><td>\\n<p>\\n<strong>null</strong>. </p>\\n</td></tr><tr><td>\\n<p>DocumentType </p>\\n</td><td>\\n<p>\\n<strong>null</strong>. </p>\\n</td></tr><tr><td>\\n<p>Element </p>\\n</td><td>\\n<p>\\n<strong>null</strong>. You can use the <xref href=\\\"System.Xml.XmlElement.InnerText\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Xml.XmlElement.InnerXml\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties to access the value of the element node. </p>\\n</td></tr><tr><td>\\n<p>Entity </p>\\n</td><td>\\n<p>\\n<strong>null</strong>. </p>\\n</td></tr><tr><td>\\n<p>EntityReference </p>\\n</td><td>\\n<p>\\n<strong>null</strong>. </p>\\n</td></tr><tr><td>\\n<p>Notation </p>\\n</td><td>\\n<p>\\n<strong>null</strong>. </p>\\n</td></tr><tr><td>\\n<p>ProcessingInstruction </p>\\n</td><td>\\n<p>The entire content excluding the target. </p>\\n</td></tr><tr><td>\\n<p>Text </p>\\n</td><td>\\n<p>The content of the text node. </p>\\n</td></tr><tr><td>\\n<p>SignificantWhitespace </p>\\n</td><td>\\n<p>The white space characters. White space can consist of one or more space characters, carriage returns, line feeds, or tabs. </p>\\n</td></tr><tr><td>\\n<p>Whitespace </p>\\n</td><td>\\n<p>The white space characters. White space can consist of one or more space characters, carriage returns, line feeds, or tabs. </p>\\n</td></tr><tr><td>\\n<p>XmlDeclaration </p>\\n</td><td>\\n<p>The content of the declaration (that is, everything between <?xml and ?>). </p>\\n</td></tr></tbody></table>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Setting the value of a node that is read-only. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>Setting the value of a node that is not supposed to have a value (for example, an Element node). </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNode.Value\n- uid: System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)\n  commentId: M:System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)\n  id: AppendChild(System.Xml.XmlNode)\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: AppendChild(XmlNode)\n  fullName: System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AppendChild\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 267\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Adds the specified node to the end of the list of child nodes, of this node.</p>\\n\"\n  syntax:\n    content: public virtual XmlNode AppendChild(XmlNode newChild)\n    content.vb: Public Overridable Function AppendChild(newChild As XmlNode) As XmlNode\n    parameters:\n    - id: newChild\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The node to add. All the contents of the node to be added are moved into the specified location. </p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The node added.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>This node is of a type that does not allow child nodes of the type of the <em>newChild</em> node.</p>\\n<p>The <em>newChild</em> is an ancestor of this node. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>newChild</em> was created from a different document than the one that created this node.</p>\\n<p>This node is read-only. </p>\\n\"\n  seealso:\n  - type: System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)\n    commentId: M:System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNode.AppendChild(XmlNode)\n- uid: System.Xml.XmlNode.CloneNode(System.Boolean)\n  commentId: M:System.Xml.XmlNode.CloneNode(System.Boolean)\n  id: CloneNode(System.Boolean)\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: CloneNode(Boolean)\n  fullName: System.Xml.XmlNode.CloneNode(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CloneNode\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 268\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Creates a duplicate of the node, when overridden in a derived class.</p>\\n\"\n  syntax:\n    content: public abstract XmlNode CloneNode(bool deep)\n    content.vb: Public MustOverride Function CloneNode(deep As Boolean) As XmlNode\n    parameters:\n    - id: deep\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to recursively clone the subtree under the specified node; <strong>false</strong> to clone only the node itself. </p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The cloned node.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>Calling this method on a node type that cannot be cloned. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XmlNode.CloneNode(Boolean)\n- uid: System.Xml.XmlNode.GetEnumerator\n  commentId: M:System.Xml.XmlNode.GetEnumerator\n  id: GetEnumerator\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Xml.XmlNode.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEnumerator\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 269\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Get an enumerator that iterates through the child nodes in the current node.</p>\\n\"\n  syntax:\n    content: public IEnumerator GetEnumerator()\n    content.vb: Public Function GetEnumerator As IEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that can be used to iterate through the child nodes in the current node.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlNode.GetEnumerator()\n- uid: System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)\n  commentId: M:System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)\n  id: GetNamespaceOfPrefix(System.String)\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: GetNamespaceOfPrefix(String)\n  fullName: System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetNamespaceOfPrefix\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 270\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Looks up the closest xmlns declaration for the given prefix that is in scope for the current node and returns the namespace URI in the declaration.</p>\\n\"\n  syntax:\n    content: public virtual string GetNamespaceOfPrefix(string prefix)\n    content.vb: Public Overridable Function GetNamespaceOfPrefix(prefix As String) As String\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The prefix whose namespace URI you want to find. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The namespace URI of the specified prefix.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNode.GetNamespaceOfPrefix(String)\n- uid: System.Xml.XmlNode.GetPrefixOfNamespace(System.String)\n  commentId: M:System.Xml.XmlNode.GetPrefixOfNamespace(System.String)\n  id: GetPrefixOfNamespace(System.String)\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: GetPrefixOfNamespace(String)\n  fullName: System.Xml.XmlNode.GetPrefixOfNamespace(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetPrefixOfNamespace\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 271\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Looks up the closest xmlns declaration for the given namespace URI that is in scope for the current node and returns the prefix defined in that declaration.</p>\\n\"\n  syntax:\n    content: public virtual string GetPrefixOfNamespace(string namespaceURI)\n    content.vb: Public Overridable Function GetPrefixOfNamespace(namespaceURI As String) As String\n    parameters:\n    - id: namespaceURI\n      type: System.String\n      description: \"\\n<p>The namespace URI whose prefix you want to find. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The prefix for the specified namespace URI.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNode.GetPrefixOfNamespace(String)\n- uid: System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)\n  commentId: M:System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)\n  id: InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: InsertAfter(XmlNode, XmlNode)\n  fullName: System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode, System.Xml.XmlNode)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InsertAfter\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 272\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Inserts the specified node immediately after the specified reference node.</p>\\n\"\n  syntax:\n    content: public virtual XmlNode InsertAfter(XmlNode newChild, XmlNode refChild)\n    content.vb: Public Overridable Function InsertAfter(newChild As XmlNode, refChild As XmlNode) As XmlNode\n    parameters:\n    - id: newChild\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The <strong>XmlNode</strong> to insert. </p>\\n\"\n    - id: refChild\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The <strong>XmlNode</strong> that is the reference node. The <em>newNode</em> is placed after the <em>refNode</em>. </p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The node being inserted.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>This node is of a type that does not allow child nodes of the type of the <em>newChild</em> node.</p>\\n<p>The <em>newChild</em> is an ancestor of this node. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>newChild</em> was created from a different document than the one that created this node.</p>\\n<p>The <em>refChild</em> is not a child of this node.</p>\\n<p>This node is read-only. </p>\\n\"\n  seealso:\n  - type: System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)\n    commentId: M:System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNode.InsertAfter(XmlNode, XmlNode)\n- uid: System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)\n  commentId: M:System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)\n  id: InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: InsertBefore(XmlNode, XmlNode)\n  fullName: System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode, System.Xml.XmlNode)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InsertBefore\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 273\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Inserts the specified node immediately before the specified reference node.</p>\\n\"\n  syntax:\n    content: public virtual XmlNode InsertBefore(XmlNode newChild, XmlNode refChild)\n    content.vb: Public Overridable Function InsertBefore(newChild As XmlNode, refChild As XmlNode) As XmlNode\n    parameters:\n    - id: newChild\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The <strong>XmlNode</strong> to insert. </p>\\n\"\n    - id: refChild\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The <strong>XmlNode</strong> that is the reference node. The <em>newChild</em> is placed before this node. </p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The node being inserted.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The current node is of a type that does not allow child nodes of the type of the <em>newChild</em> node.</p>\\n<p>The <em>newChild</em> is an ancestor of this node. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>newChild</em> was created from a different document than the one that created this node.</p>\\n<p>The <em>refChild</em> is not a child of this node.</p>\\n<p>This node is read-only. </p>\\n\"\n  seealso:\n  - type: System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)\n    commentId: M:System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNode.InsertBefore(XmlNode, XmlNode)\n- uid: System.Xml.XmlNode.Normalize\n  commentId: M:System.Xml.XmlNode.Normalize\n  id: Normalize\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: Normalize()\n  fullName: System.Xml.XmlNode.Normalize()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Normalize\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 274\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Puts all XmlText nodes in the full depth of the sub-tree underneath this XmlNode into a \\\"normal\\\" form where only markup (that is, tags, comments, processing instructions, CDATA sections, and entity references) separates XmlText nodes, that is, there are no adjacent XmlText nodes.</p>\\n\"\n  syntax:\n    content: public virtual void Normalize()\n    content.vb: Public Overridable Sub Normalize\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNode.Normalize()\n- uid: System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)\n  commentId: M:System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)\n  id: PrependChild(System.Xml.XmlNode)\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: PrependChild(XmlNode)\n  fullName: System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PrependChild\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 275\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Adds the specified node to the beginning of the list of child nodes for this node.</p>\\n\"\n  syntax:\n    content: public virtual XmlNode PrependChild(XmlNode newChild)\n    content.vb: Public Overridable Function PrependChild(newChild As XmlNode) As XmlNode\n    parameters:\n    - id: newChild\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The node to add. All the contents of the node to be added are moved into the specified location.</p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The node added.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>This node is of a type that does not allow child nodes of the type of the <em>newChild</em> node.</p>\\n<p>The <em>newChild</em> is an ancestor of this node. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>newChild</em> was created from a different document than the one that created this node.</p>\\n<p>This node is read-only. </p>\\n\"\n  seealso:\n  - type: System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)\n    commentId: M:System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNode.PrependChild(XmlNode)\n- uid: System.Xml.XmlNode.RemoveAll\n  commentId: M:System.Xml.XmlNode.RemoveAll\n  id: RemoveAll\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: RemoveAll()\n  fullName: System.Xml.XmlNode.RemoveAll()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveAll\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 276\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Removes all the child nodes and/or attributes of the current node.</p>\\n\"\n  syntax:\n    content: public virtual void RemoveAll()\n    content.vb: Public Overridable Sub RemoveAll\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNode.RemoveAll()\n- uid: System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)\n  commentId: M:System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)\n  id: RemoveChild(System.Xml.XmlNode)\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: RemoveChild(XmlNode)\n  fullName: System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveChild\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 277\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Removes specified child node.</p>\\n\"\n  syntax:\n    content: public virtual XmlNode RemoveChild(XmlNode oldChild)\n    content.vb: Public Overridable Function RemoveChild(oldChild As XmlNode) As XmlNode\n    parameters:\n    - id: oldChild\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The node being removed. </p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The node removed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>oldChild</em> is not a child of this node. Or this node is read-only. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNode.RemoveChild(XmlNode)\n- uid: System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)\n  commentId: M:System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)\n  id: ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: ReplaceChild(XmlNode, XmlNode)\n  fullName: System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode, System.Xml.XmlNode)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReplaceChild\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 278\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Replaces the child node <em>oldChild</em> with <em>newChild</em> node.</p>\\n\"\n  syntax:\n    content: public virtual XmlNode ReplaceChild(XmlNode newChild, XmlNode oldChild)\n    content.vb: Public Overridable Function ReplaceChild(newChild As XmlNode, oldChild As XmlNode) As XmlNode\n    parameters:\n    - id: newChild\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The new node to put in the child list. </p>\\n\"\n    - id: oldChild\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The node being replaced in the list. </p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The node replaced.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>This node is of a type that does not allow child nodes of the type of the <em>newChild</em> node.</p>\\n<p>The <em>newChild</em> is an ancestor of this node. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>newChild</em> was created from a different document than the one that created this node.</p>\\n<p>This node is read-only.</p>\\n<p>The <em>oldChild</em> is not a child of this node. </p>\\n\"\n  seealso:\n  - type: System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)\n    commentId: M:System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNode.ReplaceChild(XmlNode, XmlNode)\n- uid: System.Xml.XmlNode.Supports(System.String,System.String)\n  commentId: M:System.Xml.XmlNode.Supports(System.String,System.String)\n  id: Supports(System.String,System.String)\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: Supports(String, String)\n  fullName: System.Xml.XmlNode.Supports(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Supports\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 279\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Tests if the DOM implementation implements a specific feature.</p>\\n\"\n  syntax:\n    content: public virtual bool Supports(string feature, string version)\n    content.vb: Public Overridable Function Supports(feature As String, version As String) As Boolean\n    parameters:\n    - id: feature\n      type: System.String\n      description: \"\\n<p>The package name of the feature to test. This name is not case-sensitive. </p>\\n\"\n    - id: version\n      type: System.String\n      description: \"\\n<p>The version number of the package name to test. If the version is not specified (null), supporting any version of the feature causes the method to return true. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the feature is implemented in the specified version; otherwise, <strong>false</strong>. The following table describes the combinations that return <strong>true</strong>.</p>\\n<p>Feature </p>\\n<p>Version </p>\\n<table><tbody><tr><td>\\n<p>XML </p>\\n</td><td>\\n<p>1.0 </p>\\n</td></tr><tr><td>\\n<p>XML </p>\\n</td><td>\\n<p>2.0 </p>\\n</td></tr></tbody></table>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNode.Supports(String, String)\n- uid: System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator\n  commentId: M:System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: IEnumerable.GetEnumerator()\n  fullName: System.Xml.XmlNode.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IEnumerable.GetEnumerator\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 280\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.Xml.XmlNode.GetEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: IEnumerator IEnumerable.GetEnumerator()\n    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>Returns an enumerator for the collection.</p>\\n\"\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  name.vb: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: XmlNode.IEnumerable.GetEnumerator()\n  nameWithType.vb: XmlNode.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)\n  commentId: M:System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)\n  id: WriteContentTo(System.Xml.XmlWriter)\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: WriteContentTo(XmlWriter)\n  fullName: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteContentTo\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 281\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Saves all the child nodes of the node to the specified <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, when overridden in a derived class.</p>\\n\"\n  syntax:\n    content: public abstract void WriteContentTo(XmlWriter w)\n    content.vb: Public MustOverride Sub WriteContentTo(w As XmlWriter)\n    parameters:\n    - id: w\n      type: System.Xml.XmlWriter\n      description: \"\\n<p>The <strong>XmlWriter</strong> to which you want to save. </p>\\n\"\n  seealso:\n  - type: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)\n    commentId: M:System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XmlNode.WriteContentTo(XmlWriter)\n- uid: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)\n  commentId: M:System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)\n  id: WriteTo(System.Xml.XmlWriter)\n  parent: System.Xml.XmlNode\n  langs:\n  - csharp\n  - vb\n  name: WriteTo(XmlWriter)\n  fullName: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteTo\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 282\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Saves the current node to the specified <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, when overridden in a derived class.</p>\\n\"\n  syntax:\n    content: public abstract void WriteTo(XmlWriter w)\n    content.vb: Public MustOverride Sub WriteTo(w As XmlWriter)\n    parameters:\n    - id: w\n      type: System.Xml.XmlWriter\n      description: \"\\n<p>The <strong>XmlWriter</strong> to which you want to save. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XmlNode.WriteTo(XmlWriter)\nreferences:\n- uid: System.Xml\n  isExternal: false\n  name: System.Xml\n  fullName: System.Xml\n  commentId: N:System.Xml\n  nameWithType: System.Xml\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  commentId: T:System.Collections.IEnumerable\n  nameWithType: IEnumerable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  nameWithType: Queryable.AsQueryable()\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel()\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  commentId: N:System.Collections\n  nameWithType: System.Collections\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  commentId: T:System.Linq.Queryable\n  nameWithType: Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  commentId: T:System.Linq.Enumerable\n  nameWithType: Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  commentId: N:System.Linq\n  nameWithType: System.Linq\n- uid: System.Xml.XmlAttributeCollection\n  parent: System.Xml\n  isExternal: false\n  name: XmlAttributeCollection\n  fullName: System.Xml.XmlAttributeCollection\n  commentId: T:System.Xml.XmlAttributeCollection\n  nameWithType: XmlAttributeCollection\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Xml.XmlNodeList\n  parent: System.Xml\n  isExternal: false\n  name: XmlNodeList\n  fullName: System.Xml.XmlNodeList\n  commentId: T:System.Xml.XmlNodeList\n  nameWithType: XmlNodeList\n- uid: System.Xml.XmlNode\n  parent: System.Xml\n  isExternal: false\n  name: XmlNode\n  fullName: System.Xml.XmlNode\n  commentId: T:System.Xml.XmlNode\n  nameWithType: XmlNode\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Xml.XmlElement\n  parent: System.Xml\n  isExternal: false\n  name: XmlElement\n  fullName: System.Xml.XmlElement\n  commentId: T:System.Xml.XmlElement\n  nameWithType: XmlElement\n- uid: System.Xml.XmlNodeType\n  parent: System.Xml\n  isExternal: false\n  name: XmlNodeType\n  fullName: System.Xml.XmlNodeType\n  commentId: T:System.Xml.XmlNodeType\n  nameWithType: XmlNodeType\n- uid: System.Xml.XmlDocument\n  parent: System.Xml\n  isExternal: false\n  name: XmlDocument\n  fullName: System.Xml.XmlDocument\n  commentId: T:System.Xml.XmlDocument\n  nameWithType: XmlDocument\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  commentId: T:System.Collections.IEnumerator\n  nameWithType: IEnumerator\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n  nameWithType: IEnumerable.GetEnumerator()\n- uid: System.Xml.XmlWriter\n  parent: System.Xml\n  isExternal: false\n  name: XmlWriter\n  fullName: System.Xml.XmlWriter\n  commentId: T:System.Xml.XmlWriter\n  nameWithType: XmlWriter\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.Xml.XmlException\n  isExternal: false\n  name: XmlException\n  fullName: System.Xml.XmlException\n  commentId: T:System.Xml.XmlException\n  nameWithType: XmlException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}