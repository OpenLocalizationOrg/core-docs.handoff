{"nodes":[{"pos":[3316,3325],"content":"Operators","needQuote":true,"nodes":[{"content":"Operators","pos":[0,9]}]},{"pos":[5097,5122],"content":"AddObject(Object, Object)","needQuote":true,"nodes":[{"content":"AddObject(Object, Object)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;Required.","pos":[5917,5931],"source":"\\n<p>Required."},{"content":"Any numeric expression.&lt;/p&gt;\\n","pos":[5932,5961],"source":" Any numeric expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[6025,6039],"source":"\\n<p>Required."},{"content":"Any numeric expression.&lt;/p&gt;\\n","pos":[6040,6069],"source":" Any numeric expression.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of &lt;em&gt;Left&lt;/em&gt; and &lt;em&gt;Right&lt;/em&gt;.&lt;/p&gt;\\n","pos":[6129,6184],"source":"\\n<p>The sum of <em>Left</em> and <em>Right</em>.</p>\\n"},{"pos":[6655,6680],"content":"AndObject(Object, Object)","needQuote":true,"nodes":[{"content":"AndObject(Object, Object)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;Required.","pos":[7483,7497],"source":"\\n<p>Required."},{"content":"Any &lt;strong&gt;Boolean&lt;/strong&gt; or numeric expression.&lt;/p&gt;\\n","pos":[7498,7555],"source":" Any <strong>Boolean</strong> or numeric expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[7619,7633],"source":"\\n<p>Required."},{"content":"Any &lt;strong&gt;Boolean&lt;/strong&gt; or numeric expression.&lt;/p&gt;\\n","pos":[7634,7691],"source":" Any <strong>Boolean</strong> or numeric expression.</p>\\n"},{"content":"\\n&lt;p&gt;For &lt;strong&gt;Boolean&lt;/strong&gt; operations, &lt;strong&gt;True&lt;/strong&gt; if both &lt;em&gt;Left&lt;/em&gt; and &lt;em&gt;Right&lt;/em&gt; evaluate to &lt;strong&gt;True&lt;/strong&gt;; otherwise, &lt;strong&gt;False&lt;/strong&gt;.","pos":[7751,7929],"source":"\\n<p>For <strong>Boolean</strong> operations, <strong>True</strong> if both <em>Left</em> and <em>Right</em> evaluate to <strong>True</strong>; otherwise, <strong>False</strong>."},{"content":"For bitwise operations, 1 if both &lt;em&gt;Left&lt;/em&gt; and &lt;em&gt;Right&lt;/em&gt; evaluate to 1; otherwise, 0.&lt;/p&gt;\\n","pos":[7930,8031],"source":" For bitwise operations, 1 if both <em>Left</em> and <em>Right</em> evaluate to 1; otherwise, 0.</p>\\n"},{"pos":[8574,8617],"content":"CompareObjectEqual(Object, Object, Boolean)","needQuote":true,"nodes":[{"content":"CompareObjectEqual(Object, Object, Boolean)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;Required.","pos":[9503,9517],"source":"\\n<p>Required."},{"content":"Any expression.&lt;/p&gt;\\n","pos":[9518,9539],"source":" Any expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[9603,9617],"source":"\\n<p>Required."},{"content":"Any expression.&lt;/p&gt;\\n","pos":[9618,9639],"source":" Any expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[9710,9724],"source":"\\n<p>Required."},{"content":"&lt;strong&gt;True&lt;/strong&gt; to perform a case-insensitive string comparison; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9725,9836],"source":" <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;True&lt;/strong&gt; if &lt;em&gt;Left&lt;/em&gt; and &lt;em&gt;Right&lt;/em&gt; are equal; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9896,10012],"source":"\\n<p>\\n<strong>True</strong> if <em>Left</em> and <em>Right</em> are equal; otherwise, <strong>False</strong>.</p>\\n"},{"pos":[10579,10624],"content":"CompareObjectGreater(Object, Object, Boolean)","needQuote":true,"nodes":[{"content":"CompareObjectGreater(Object, Object, Boolean)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;Required.","pos":[11525,11539],"source":"\\n<p>Required."},{"content":"Any expression.&lt;/p&gt;\\n","pos":[11540,11561],"source":" Any expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[11625,11639],"source":"\\n<p>Required."},{"content":"Any expression.&lt;/p&gt;\\n","pos":[11640,11661],"source":" Any expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[11732,11746],"source":"\\n<p>Required."},{"content":"&lt;strong&gt;True&lt;/strong&gt; to perform a case-insensitive string comparison; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[11747,11858],"source":" <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;True&lt;/strong&gt; if &lt;em&gt;Left&lt;/em&gt; is greater than &lt;em&gt;Right&lt;/em&gt;; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[11918,12036],"source":"\\n<p>\\n<strong>True</strong> if <em>Left</em> is greater than <em>Right</em>; otherwise, <strong>False</strong>.</p>\\n"},{"pos":[12620,12670],"content":"CompareObjectGreaterEqual(Object, Object, Boolean)","needQuote":true,"nodes":[{"content":"CompareObjectGreaterEqual(Object, Object, Boolean)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;Required.","pos":[13604,13618],"source":"\\n<p>Required."},{"content":"Any expression.&lt;/p&gt;\\n","pos":[13619,13640],"source":" Any expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[13704,13718],"source":"\\n<p>Required."},{"content":"Any expression.&lt;/p&gt;\\n","pos":[13719,13740],"source":" Any expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[13811,13825],"source":"\\n<p>Required."},{"content":"&lt;strong&gt;True&lt;/strong&gt; to perform a case-insensitive string comparison; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[13826,13937],"source":" <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;True&lt;/strong&gt; if &lt;em&gt;Left&lt;/em&gt; is greater than or equal to &lt;em&gt;Right&lt;/em&gt;; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[13997,14127],"source":"\\n<p>\\n<strong>True</strong> if <em>Left</em> is greater than or equal to <em>Right</em>; otherwise, <strong>False</strong>.</p>\\n"},{"pos":[14692,14734],"content":"CompareObjectLess(Object, Object, Boolean)","needQuote":true,"nodes":[{"content":"CompareObjectLess(Object, Object, Boolean)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;Required.","pos":[15620,15634],"source":"\\n<p>Required."},{"content":"Any expression.&lt;/p&gt;\\n","pos":[15635,15656],"source":" Any expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[15720,15734],"source":"\\n<p>Required."},{"content":"Any expression.&lt;/p&gt;\\n","pos":[15735,15756],"source":" Any expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[15827,15841],"source":"\\n<p>Required."},{"content":"&lt;strong&gt;True&lt;/strong&gt; to perform a case-insensitive string comparison; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[15842,15953],"source":" <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;True&lt;/strong&gt; if &lt;em&gt;Left&lt;/em&gt; is less than &lt;em&gt;Right&lt;/em&gt;; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16013,16128],"source":"\\n<p>\\n<strong>True</strong> if <em>Left</em> is less than <em>Right</em>; otherwise, <strong>False</strong>.</p>\\n"},{"pos":[16700,16747],"content":"CompareObjectLessEqual(Object, Object, Boolean)","needQuote":true,"nodes":[{"content":"CompareObjectLessEqual(Object, Object, Boolean)","pos":[0,47]}]},{"content":"\\n&lt;p&gt;Required.","pos":[17666,17680],"source":"\\n<p>Required."},{"content":"Any expression.&lt;/p&gt;\\n","pos":[17681,17702],"source":" Any expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[17766,17780],"source":"\\n<p>Required."},{"content":"Any expression.&lt;/p&gt;\\n","pos":[17781,17802],"source":" Any expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[17873,17887],"source":"\\n<p>Required."},{"content":"&lt;strong&gt;True&lt;/strong&gt; to perform a case-insensitive string comparison; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17888,17999],"source":" <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;True&lt;/strong&gt; if &lt;em&gt;Left&lt;/em&gt; is less than or equal to &lt;em&gt;Right&lt;/em&gt;; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18059,18186],"source":"\\n<p>\\n<strong>True</strong> if <em>Left</em> is less than or equal to <em>Right</em>; otherwise, <strong>False</strong>.</p>\\n"},{"pos":[18760,18806],"content":"CompareObjectNotEqual(Object, Object, Boolean)","needQuote":true,"nodes":[{"content":"CompareObjectNotEqual(Object, Object, Boolean)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;Required.","pos":[19709,19723],"source":"\\n<p>Required."},{"content":"Any expression.&lt;/p&gt;\\n","pos":[19724,19745],"source":" Any expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[19809,19823],"source":"\\n<p>Required."},{"content":"Any expression.&lt;/p&gt;\\n","pos":[19824,19845],"source":" Any expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[19916,19930],"source":"\\n<p>Required."},{"content":"&lt;strong&gt;True&lt;/strong&gt; to perform a case-insensitive string comparison; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[19931,20042],"source":" <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;True&lt;/strong&gt; if &lt;em&gt;Left&lt;/em&gt; is not equal to &lt;em&gt;Right&lt;/em&gt;; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[20102,20220],"source":"\\n<p>\\n<strong>True</strong> if <em>Left</em> is not equal to <em>Right</em>; otherwise, <strong>False</strong>.</p>\\n"},{"pos":[20769,20807],"content":"CompareString(String, String, Boolean)","needQuote":true,"nodes":[{"content":"CompareString(String, String, Boolean)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;Required.","pos":[21689,21703],"source":"\\n<p>Required."},{"content":"Any &lt;strong&gt;String&lt;/strong&gt; expression.&lt;/p&gt;\\n","pos":[21704,21749],"source":" Any <strong>String</strong> expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[21813,21827],"source":"\\n<p>Required."},{"content":"Any &lt;strong&gt;String&lt;/strong&gt; expression.&lt;/p&gt;\\n","pos":[21828,21873],"source":" Any <strong>String</strong> expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[21944,21958],"source":"\\n<p>Required."},{"content":"&lt;strong&gt;True&lt;/strong&gt; to perform a case-insensitive string comparison; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[21959,22070],"source":" <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;Value &lt;/p&gt;\\n&lt;p&gt;Condition &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;-1 &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;Left&lt;/em&gt; is less than &lt;em&gt;Right&lt;/em&gt;.","pos":[22129,22259],"source":"\\n<p>Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>-1 </p>\\n</td><td>\\n<p>\\n<em>Left</em> is less than <em>Right</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;0&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;Left&lt;/em&gt; is equal to &lt;em&gt;Right&lt;/em&gt;.","pos":[22260,22353],"source":" </p>\\n</td></tr><tr><td>\\n<p>0</p>\\n</td><td>\\n<p>\\n<em>Left</em> is equal to <em>Right</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;1 &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;Left&lt;/em&gt; is greater than &lt;em&gt;Right&lt;/em&gt;.","pos":[22354,22452],"source":" </p>\\n</td></tr><tr><td>\\n<p>1 </p>\\n</td><td>\\n<p>\\n<em>Left</em> is greater than <em>Right</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[22453,22487],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[22995,23028],"content":"ConcatenateObject(Object, Object)","needQuote":true,"nodes":[{"content":"ConcatenateObject(Object, Object)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;Required.","pos":[23860,23874],"source":"\\n<p>Required."},{"content":"Any expression.&lt;/p&gt;\\n","pos":[23875,23896],"source":" Any expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[23960,23974],"source":"\\n<p>Required."},{"content":"Any expression.&lt;/p&gt;\\n","pos":[23975,23996],"source":" Any expression.</p>\\n"},{"content":"\\n&lt;p&gt;A string representing the concatenation of &lt;em&gt;Left&lt;/em&gt; and &lt;em&gt;Right&lt;/em&gt;.&lt;/p&gt;\\n","pos":[24056,24143],"source":"\\n<p>A string representing the concatenation of <em>Left</em> and <em>Right</em>.</p>\\n"},{"pos":[24727,24781],"content":"ConditionalCompareObjectEqual(Object, Object, Boolean)","needQuote":true,"nodes":[{"content":"ConditionalCompareObjectEqual(Object, Object, Boolean)","pos":[0,54]}]},{"content":"\\n&lt;p&gt;Required.","pos":[25722,25736],"source":"\\n<p>Required."},{"content":"Any expression.&lt;/p&gt;\\n","pos":[25737,25758],"source":" Any expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[25822,25836],"source":"\\n<p>Required."},{"content":"Any expression.&lt;/p&gt;\\n","pos":[25837,25858],"source":" Any expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[25929,25943],"source":"\\n<p>Required."},{"content":"&lt;strong&gt;True&lt;/strong&gt; to perform a case-insensitive string comparison; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[25944,26055],"source":" <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The result of the overloaded equals operator.","pos":[26116,26166],"source":"\\n<p>The result of the overloaded equals operator."},{"content":"&lt;strong&gt;False&lt;/strong&gt; if operator overloading is not supported.&lt;/p&gt;\\n","pos":[26167,26237],"source":" <strong>False</strong> if operator overloading is not supported.</p>\\n"},{"pos":[26848,26904],"content":"ConditionalCompareObjectGreater(Object, Object, Boolean)","needQuote":true,"nodes":[{"content":"ConditionalCompareObjectGreater(Object, Object, Boolean)","pos":[0,56]}]},{"content":"\\n&lt;p&gt;Required.","pos":[27859,27873],"source":"\\n<p>Required."},{"content":"Any expression.&lt;/p&gt;\\n","pos":[27874,27895],"source":" Any expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[27959,27973],"source":"\\n<p>Required."},{"content":"Any expression.&lt;/p&gt;\\n","pos":[27974,27995],"source":" Any expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[28066,28080],"source":"\\n<p>Required."},{"content":"&lt;strong&gt;True&lt;/strong&gt; to perform a case-insensitive string comparison; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[28081,28192],"source":" <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The result of the overloaded greater-than operator.","pos":[28253,28309],"source":"\\n<p>The result of the overloaded greater-than operator."},{"content":"&lt;strong&gt;False&lt;/strong&gt; if operator overloading is not supported.&lt;/p&gt;\\n","pos":[28310,28380],"source":" <strong>False</strong> if operator overloading is not supported.</p>\\n"},{"pos":[29008,29069],"content":"ConditionalCompareObjectGreaterEqual(Object, Object, Boolean)","needQuote":true,"nodes":[{"content":"ConditionalCompareObjectGreaterEqual(Object, Object, Boolean)","pos":[0,61]}]},{"content":"\\n&lt;p&gt;Required.","pos":[30057,30071],"source":"\\n<p>Required."},{"content":"Any expression.&lt;/p&gt;\\n","pos":[30072,30093],"source":" Any expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[30157,30171],"source":"\\n<p>Required."},{"content":"Any expression.&lt;/p&gt;\\n","pos":[30172,30193],"source":" Any expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[30264,30278],"source":"\\n<p>Required."},{"content":"&lt;strong&gt;True&lt;/strong&gt; to perform a case-insensitive string comparison; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[30279,30390],"source":" <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The result of the overloaded greater-than or equal-to operator.","pos":[30451,30519],"source":"\\n<p>The result of the overloaded greater-than or equal-to operator."},{"content":"&lt;strong&gt;False&lt;/strong&gt; if operator overloading is not supported.&lt;/p&gt;\\n","pos":[30520,30590],"source":" <strong>False</strong> if operator overloading is not supported.</p>\\n"},{"pos":[31199,31252],"content":"ConditionalCompareObjectLess(Object, Object, Boolean)","needQuote":true,"nodes":[{"content":"ConditionalCompareObjectLess(Object, Object, Boolean)","pos":[0,53]}]},{"content":"\\n&lt;p&gt;Required.","pos":[32192,32206],"source":"\\n<p>Required."},{"content":"Any expression.&lt;/p&gt;\\n","pos":[32207,32228],"source":" Any expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[32292,32306],"source":"\\n<p>Required."},{"content":"Any expression.&lt;/p&gt;\\n","pos":[32307,32328],"source":" Any expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[32399,32413],"source":"\\n<p>Required."},{"content":"&lt;strong&gt;True&lt;/strong&gt; to perform a case-insensitive string comparison; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[32414,32525],"source":" <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The result of the overloaded less-than operator.","pos":[32586,32639],"source":"\\n<p>The result of the overloaded less-than operator."},{"content":"&lt;strong&gt;False&lt;/strong&gt; if operator overloading is not supported.&lt;/p&gt;\\n","pos":[32640,32710],"source":" <strong>False</strong> if operator overloading is not supported.</p>\\n"},{"pos":[33326,33384],"content":"ConditionalCompareObjectLessEqual(Object, Object, Boolean)","needQuote":true,"nodes":[{"content":"ConditionalCompareObjectLessEqual(Object, Object, Boolean)","pos":[0,58]}]},{"content":"\\n&lt;p&gt;Required.","pos":[34357,34371],"source":"\\n<p>Required."},{"content":"Any expression.&lt;/p&gt;\\n","pos":[34372,34393],"source":" Any expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[34457,34471],"source":"\\n<p>Required."},{"content":"Any expression.&lt;/p&gt;\\n","pos":[34472,34493],"source":" Any expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[34564,34578],"source":"\\n<p>Required."},{"content":"&lt;strong&gt;True&lt;/strong&gt; to perform a case-insensitive string comparison; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[34579,34690],"source":" <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The result of the overloaded less-than or equal-to operator.","pos":[34751,34816],"source":"\\n<p>The result of the overloaded less-than or equal-to operator."},{"content":"&lt;strong&gt;False&lt;/strong&gt; if operator overloading is not supported.&lt;/p&gt;\\n","pos":[34817,34887],"source":" <strong>False</strong> if operator overloading is not supported.</p>\\n"},{"pos":[35505,35562],"content":"ConditionalCompareObjectNotEqual(Object, Object, Boolean)","needQuote":true,"nodes":[{"content":"ConditionalCompareObjectNotEqual(Object, Object, Boolean)","pos":[0,57]}]},{"content":"\\n&lt;p&gt;Required.","pos":[36519,36533],"source":"\\n<p>Required."},{"content":"Any expression.&lt;/p&gt;\\n","pos":[36534,36555],"source":" Any expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[36619,36633],"source":"\\n<p>Required."},{"content":"Any expression.&lt;/p&gt;\\n","pos":[36634,36655],"source":" Any expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[36726,36740],"source":"\\n<p>Required."},{"content":"&lt;strong&gt;True&lt;/strong&gt; to perform a case-insensitive string comparison; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[36741,36852],"source":" <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The result of the overloaded not-equal operator.","pos":[36913,36966],"source":"\\n<p>The result of the overloaded not-equal operator."},{"content":"&lt;strong&gt;False&lt;/strong&gt; if operator overloading is not supported.&lt;/p&gt;\\n","pos":[36967,37037],"source":" <strong>False</strong> if operator overloading is not supported.</p>\\n"},{"pos":[37549,37577],"content":"DivideObject(Object, Object)","needQuote":true,"nodes":[{"content":"DivideObject(Object, Object)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;Required.","pos":[38384,38398],"source":"\\n<p>Required."},{"content":"Any numeric expression.&lt;/p&gt;\\n","pos":[38399,38428],"source":" Any numeric expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[38492,38506],"source":"\\n<p>Required."},{"content":"Any numeric expression.&lt;/p&gt;\\n","pos":[38507,38536],"source":" Any numeric expression.</p>\\n"},{"content":"\\n&lt;p&gt;The full quotient of &lt;em&gt;Left&lt;/em&gt; divided by &lt;em&gt;Right&lt;/em&gt;, including any remainder.&lt;/p&gt;\\n","pos":[38596,38693],"source":"\\n<p>The full quotient of <em>Left</em> divided by <em>Right</em>, including any remainder.</p>\\n"},{"pos":[39182,39212],"content":"ExponentObject(Object, Object)","needQuote":true,"nodes":[{"content":"ExponentObject(Object, Object)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;Required.","pos":[40027,40041],"source":"\\n<p>Required."},{"content":"Any numeric expression.&lt;/p&gt;\\n","pos":[40042,40071],"source":" Any numeric expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[40135,40149],"source":"\\n<p>Required."},{"content":"Any numeric expression.&lt;/p&gt;\\n","pos":[40150,40179],"source":" Any numeric expression.</p>\\n"},{"content":"\\n&lt;p&gt;The result of &lt;em&gt;Left&lt;/em&gt; raised to the power of &lt;em&gt;Right&lt;/em&gt;.&lt;/p&gt;\\n","pos":[40239,40316],"source":"\\n<p>The result of <em>Left</em> raised to the power of <em>Right</em>.</p>\\n"},{"pos":[40810,40841],"content":"IntDivideObject(Object, Object)","needQuote":true,"nodes":[{"content":"IntDivideObject(Object, Object)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;Required.","pos":[41669,41683],"source":"\\n<p>Required."},{"content":"Any numeric expression.&lt;/p&gt;\\n","pos":[41684,41713],"source":" Any numeric expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[41777,41791],"source":"\\n<p>Required."},{"content":"Any numeric expression.&lt;/p&gt;\\n","pos":[41792,41821],"source":" Any numeric expression.</p>\\n"},{"content":"\\n&lt;p&gt;The integer quotient of &lt;em&gt;Left&lt;/em&gt; divided by &lt;em&gt;Right&lt;/em&gt;, which discards any remainder and retains only the integer portion.&lt;/p&gt;\\n","pos":[41881,42023],"source":"\\n<p>The integer quotient of <em>Left</em> divided by <em>Right</em>, which discards any remainder and retains only the integer portion.</p>\\n"},{"pos":[42518,42549],"content":"LeftShiftObject(Object, Object)","needQuote":true,"nodes":[{"content":"LeftShiftObject(Object, Object)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;Required.","pos":[43393,43407],"source":"\\n<p>Required."},{"content":"Integral numeric expression.","pos":[43408,43436]},{"content":"The bit pattern to be shifted.","pos":[43437,43467]},{"content":"The data type must be an integral type (&lt;strong&gt;SByte&lt;/strong&gt;, &lt;strong&gt;Byte&lt;/strong&gt;, &lt;strong&gt;Short&lt;/strong&gt;, &lt;strong&gt;UShort&lt;/strong&gt;, &lt;strong&gt;Integer&lt;/strong&gt;, &lt;strong&gt;UInteger&lt;/strong&gt;, &lt;strong&gt;Long&lt;/strong&gt;, or &lt;strong&gt;ULong&lt;/strong&gt;).&lt;/p&gt;\\n","pos":[43468,43713],"source":" The data type must be an integral type (<strong>SByte</strong>, <strong>Byte</strong>, <strong>Short</strong>, <strong>UShort</strong>, <strong>Integer</strong>, <strong>UInteger</strong>, <strong>Long</strong>, or <strong>ULong</strong>).</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[43778,43792],"source":"\\n<p>Required."},{"content":"Numeric expression.","pos":[43793,43812]},{"content":"The number of bits to shift the bit pattern.","pos":[43813,43857]},{"content":"The data type must be &lt;strong&gt;Integer&lt;/strong&gt; or widen to &lt;strong&gt;Integer&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[43858,43948],"source":" The data type must be <strong>Integer</strong> or widen to <strong>Integer</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;An integral numeric value.","pos":[44008,44039],"source":"\\n<p>An integral numeric value."},{"content":"The result of shifting the bit pattern.","pos":[44040,44079]},{"content":"The data type is the same as that of &lt;em&gt;Operand&lt;/em&gt;.&lt;/p&gt;\\n","pos":[44080,44140],"source":" The data type is the same as that of <em>Operand</em>.</p>\\n"},{"pos":[44617,44642],"content":"ModObject(Object, Object)","needQuote":true,"nodes":[{"content":"ModObject(Object, Object)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;Required.","pos":[45445,45459],"source":"\\n<p>Required."},{"content":"Any numeric expression.&lt;/p&gt;\\n","pos":[45460,45489],"source":" Any numeric expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[45553,45567],"source":"\\n<p>Required."},{"content":"Any numeric expression.&lt;/p&gt;\\n","pos":[45568,45597],"source":" Any numeric expression.</p>\\n"},{"content":"\\n&lt;p&gt;The remainder after &lt;em&gt;Left&lt;/em&gt; is divided by &lt;em&gt;Right&lt;/em&gt;.","pos":[45657,45725],"source":"\\n<p>The remainder after <em>Left</em> is divided by <em>Right</em>."},{"content":"&lt;/p&gt;\\n","pos":[45726,45732],"source":" </p>\\n"},{"pos":[46218,46248],"content":"MultiplyObject(Object, Object)","needQuote":true,"nodes":[{"content":"MultiplyObject(Object, Object)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;Required.","pos":[47063,47077],"source":"\\n<p>Required."},{"content":"Any numeric expression.&lt;/p&gt;\\n","pos":[47078,47107],"source":" Any numeric expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[47171,47185],"source":"\\n<p>Required."},{"content":"Any numeric expression.&lt;/p&gt;\\n","pos":[47186,47215],"source":" Any numeric expression.</p>\\n"},{"content":"\\n&lt;p&gt;The product of &lt;em&gt;Left&lt;/em&gt; and &lt;em&gt;Right&lt;/em&gt;.&lt;/p&gt;\\n","pos":[47275,47334],"source":"\\n<p>The product of <em>Left</em> and <em>Right</em>.</p>\\n"},{"pos":[47777,47797],"content":"NegateObject(Object)","needQuote":true,"nodes":[{"content":"NegateObject(Object)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;Required.","pos":[48570,48584],"source":"\\n<p>Required."},{"content":"Any numeric expression.&lt;/p&gt;\\n","pos":[48585,48614],"source":" Any numeric expression.</p>\\n"},{"content":"\\n&lt;p&gt;The negative value of &lt;em&gt;Operand&lt;/em&gt;.&lt;/p&gt;\\n","pos":[48674,48724],"source":"\\n<p>The negative value of <em>Operand</em>.</p>\\n"},{"pos":[49148,49165],"content":"NotObject(Object)","needQuote":true,"nodes":[{"content":"NotObject(Object)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;Required.","pos":[49931,49945],"source":"\\n<p>Required."},{"content":"Any &lt;strong&gt;Boolean&lt;/strong&gt; or numeric expression.&lt;/p&gt;\\n","pos":[49946,50003],"source":" Any <strong>Boolean</strong> or numeric expression.</p>\\n"},{"content":"\\n&lt;p&gt;For &lt;strong&gt;Boolean&lt;/strong&gt; operations, &lt;strong&gt;False&lt;/strong&gt; if &lt;em&gt;Operand&lt;/em&gt; is &lt;strong&gt;True&lt;/strong&gt;; otherwise, &lt;strong&gt;True&lt;/strong&gt;.","pos":[50063,50211],"source":"\\n<p>For <strong>Boolean</strong> operations, <strong>False</strong> if <em>Operand</em> is <strong>True</strong>; otherwise, <strong>True</strong>."},{"content":"For bitwise operations, 1 if &lt;em&gt;Operand&lt;/em&gt; is 0; otherwise, 0.&lt;/p&gt;\\n","pos":[50212,50283],"source":" For bitwise operations, 1 if <em>Operand</em> is 0; otherwise, 0.</p>\\n"},{"pos":[50743,50767],"content":"OrObject(Object, Object)","needQuote":true,"nodes":[{"content":"OrObject(Object, Object)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;Required.","pos":[51565,51579],"source":"\\n<p>Required."},{"content":"Any &lt;strong&gt;Boolean&lt;/strong&gt; or numeric expression.&lt;/p&gt;\\n","pos":[51580,51637],"source":" Any <strong>Boolean</strong> or numeric expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[51701,51715],"source":"\\n<p>Required."},{"content":"Any &lt;strong&gt;Boolean&lt;/strong&gt; or numeric expression.&lt;/p&gt;\\n","pos":[51716,51773],"source":" Any <strong>Boolean</strong> or numeric expression.</p>\\n"},{"content":"\\n&lt;p&gt;For &lt;strong&gt;Boolean&lt;/strong&gt; operations, &lt;strong&gt;False&lt;/strong&gt; if both &lt;em&gt;Left&lt;/em&gt; and &lt;em&gt;Right&lt;/em&gt; evaluate to &lt;strong&gt;False&lt;/strong&gt;; otherwise, &lt;strong&gt;True&lt;/strong&gt;.","pos":[51833,52012],"source":"\\n<p>For <strong>Boolean</strong> operations, <strong>False</strong> if both <em>Left</em> and <em>Right</em> evaluate to <strong>False</strong>; otherwise, <strong>True</strong>."},{"content":"For bitwise operations, 0 if both &lt;em&gt;Left&lt;/em&gt; and &lt;em&gt;Right&lt;/em&gt; evaluate to 0; otherwise, 1.&lt;/p&gt;\\n","pos":[52013,52114],"source":" For bitwise operations, 0 if both <em>Left</em> and <em>Right</em> evaluate to 0; otherwise, 1.</p>\\n"},{"pos":[52545,52563],"content":"PlusObject(Object)","needQuote":true,"nodes":[{"content":"PlusObject(Object)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;Required.","pos":[53327,53341],"source":"\\n<p>Required."},{"content":"Any numeric expression.&lt;/p&gt;\\n","pos":[53342,53371],"source":" Any numeric expression.</p>\\n"},{"content":"\\n&lt;p&gt;The value of &lt;em&gt;Operand&lt;/em&gt;.","pos":[53431,53466],"source":"\\n<p>The value of <em>Operand</em>."},{"content":"(The sign of the &lt;em&gt;Operand&lt;/em&gt; is unchanged.)&lt;/p&gt;\\n","pos":[53467,53521],"source":" (The sign of the <em>Operand</em> is unchanged.)</p>\\n"},{"pos":[54006,54038],"content":"RightShiftObject(Object, Object)","needQuote":true,"nodes":[{"content":"RightShiftObject(Object, Object)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;Required.","pos":[54887,54901],"source":"\\n<p>Required."},{"content":"Integral numeric expression.","pos":[54902,54930]},{"content":"The bit pattern to be shifted.","pos":[54931,54961]},{"content":"The data type must be an integral type (&lt;strong&gt;SByte&lt;/strong&gt;, &lt;strong&gt;Byte&lt;/strong&gt;, &lt;strong&gt;Short&lt;/strong&gt;, &lt;strong&gt;UShort&lt;/strong&gt;, &lt;strong&gt;Integer&lt;/strong&gt;, &lt;strong&gt;UInteger&lt;/strong&gt;, &lt;strong&gt;Long&lt;/strong&gt;, or &lt;strong&gt;ULong&lt;/strong&gt;).&lt;/p&gt;\\n","pos":[54962,55207],"source":" The data type must be an integral type (<strong>SByte</strong>, <strong>Byte</strong>, <strong>Short</strong>, <strong>UShort</strong>, <strong>Integer</strong>, <strong>UInteger</strong>, <strong>Long</strong>, or <strong>ULong</strong>).</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[55272,55286],"source":"\\n<p>Required."},{"content":"Numeric expression.","pos":[55287,55306]},{"content":"The number of bits to shift the bit pattern.","pos":[55307,55351]},{"content":"The data type must be &lt;strong&gt;Integer&lt;/strong&gt; or widen to &lt;strong&gt;Integer&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[55352,55442],"source":" The data type must be <strong>Integer</strong> or widen to <strong>Integer</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;An integral numeric value.","pos":[55502,55533],"source":"\\n<p>An integral numeric value."},{"content":"The result of shifting the bit pattern.","pos":[55534,55573]},{"content":"The data type is the same as that of &lt;em&gt;Operand&lt;/em&gt;.&lt;/p&gt;\\n","pos":[55574,55634],"source":" The data type is the same as that of <em>Operand</em>.</p>\\n"},{"pos":[56127,56157],"content":"SubtractObject(Object, Object)","needQuote":true,"nodes":[{"content":"SubtractObject(Object, Object)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;Required.","pos":[56975,56989],"source":"\\n<p>Required."},{"content":"Any numeric expression.","pos":[56990,57013]},{"content":"&lt;/p&gt;\\n","pos":[57014,57020],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[57084,57098],"source":"\\n<p>Required."},{"content":"Any numeric expression.&lt;/p&gt;\\n","pos":[57099,57128],"source":" Any numeric expression.</p>\\n"},{"content":"\\n&lt;p&gt;The difference between &lt;em&gt;Left&lt;/em&gt; and &lt;em&gt;Right&lt;/em&gt;.&lt;/p&gt;\\n","pos":[57188,57255],"source":"\\n<p>The difference between <em>Left</em> and <em>Right</em>.</p>\\n"},{"pos":[57731,57756],"content":"XorObject(Object, Object)","needQuote":true,"nodes":[{"content":"XorObject(Object, Object)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;Required.","pos":[58559,58573],"source":"\\n<p>Required."},{"content":"Any &lt;strong&gt;Boolean&lt;/strong&gt; or numeric expression.&lt;/p&gt;\\n","pos":[58574,58631],"source":" Any <strong>Boolean</strong> or numeric expression.</p>\\n"},{"content":"\\n&lt;p&gt;Required.","pos":[58695,58709],"source":"\\n<p>Required."},{"content":"Any &lt;strong&gt;Boolean&lt;/strong&gt; or numeric expression.&lt;/p&gt;\\n","pos":[58710,58767],"source":" Any <strong>Boolean</strong> or numeric expression.</p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;Boolean&lt;/strong&gt; or numeric value.","pos":[58827,58876],"source":"\\n<p>A <strong>Boolean</strong> or numeric value."},{"content":"For a &lt;strong&gt;Boolean&lt;/strong&gt; comparison, the return value is the logical exclusion (exclusive logical disjunction) of two &lt;strong&gt;Boolean&lt;/strong&gt; values.","pos":[58877,59033],"source":" For a <strong>Boolean</strong> comparison, the return value is the logical exclusion (exclusive logical disjunction) of two <strong>Boolean</strong> values."},{"content":"For bitwise (numeric) operations, the return value is a numeric value that represents the bitwise exclusion (exclusive bitwise disjunction) of two numeric bit patterns.","pos":[59034,59202]},{"content":"For more information, see Xor Operator (Visual Basic).&lt;/p&gt;\\n","pos":[59203,59263],"source":" For more information, see Xor Operator (Visual Basic).</p>\\n"},{"pos":[59483,59521],"content":"Microsoft.VisualBasic.CompilerServices","needQuote":true,"nodes":[{"content":"Microsoft.VisualBasic.CompilerServices","pos":[0,38]}]},{"pos":[59748,59754],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[59914,59924],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[60019,60027],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[60096,60097],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60124,60125],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60195,60203],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[60272,60273],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60300,60301],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60484,60498],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[60617,60623],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[60690,60691],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60741,60747],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[60807,60808],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60891,60897],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[60964,60965],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61015,61021],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[61081,61082],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61296,61318],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[61466,61472],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[61539,61540],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61590,61596],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[61657,61658]},{"pos":[61713,61719],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[61779,61780],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61877,61883],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[61950,61951],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62001,62007],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[62068,62069]},{"pos":[62124,62130],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[62190,62191],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62436,62467],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[62633,62648],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[62724,62725],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62775,62781],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[62842,62843]},{"pos":[62898,62904],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[62964,62965],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63071,63086],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[63162,63163],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63213,63219],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[63280,63281]},{"pos":[63336,63342],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[63402,63403],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63633,63646],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[63747,63758],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[63830,63831],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63858,63859],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63932,63943],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[64015,64016],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64043,64044],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64219,64228],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[64321,64328],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[64396,64397],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64424,64425],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64494,64501],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[64569,64570],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64597,64598],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64773,64790],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[64899,64914],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[64990,64991],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65018,65019],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65096,65111],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[65187,65188],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65215,65216],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65361,65367],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[65499,65506],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[65654,65660],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[65804,65809],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]}],"content":"items:\n- uid: Microsoft.VisualBasic.CompilerServices.Operators\n  commentId: T:Microsoft.VisualBasic.CompilerServices.Operators\n  id: Operators\n  parent: Microsoft.VisualBasic.CompilerServices\n  children:\n  - Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.AndObject(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectEqual(System.Object,System.Object,System.Boolean)\n  - Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreater(System.Object,System.Object,System.Boolean)\n  - Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)\n  - Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLess(System.Object,System.Object,System.Boolean)\n  - Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLessEqual(System.Object,System.Object,System.Boolean)\n  - Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectNotEqual(System.Object,System.Object,System.Boolean)\n  - Microsoft.VisualBasic.CompilerServices.Operators.CompareString(System.String,System.String,System.Boolean)\n  - Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual(System.Object,System.Object,System.Boolean)\n  - Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreater(System.Object,System.Object,System.Boolean)\n  - Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)\n  - Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLess(System.Object,System.Object,System.Boolean)\n  - Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLessEqual(System.Object,System.Object,System.Boolean)\n  - Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectNotEqual(System.Object,System.Object,System.Boolean)\n  - Microsoft.VisualBasic.CompilerServices.Operators.DivideObject(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.ExponentObject(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.IntDivideObject(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.LeftShiftObject(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.ModObject(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.MultiplyObject(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.NegateObject(System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.NotObject(System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.OrObject(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.PlusObject(System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.RightShiftObject(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.SubtractObject(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.XorObject(System.Object,System.Object)\n  langs:\n  - csharp\n  - vb\n  name: Operators\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators\n  type: Class\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Operators\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 150\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Provides late-bound math operators, such as <xref href=\\\"Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object,System.Object)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"Microsoft.VisualBasic.CompilerServices.Operators.CompareObject(System.Object,System.Object,System.Boolean)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, which the Visual Basic compiler uses internally. </p>\\n\"\n  syntax:\n    content: public sealed class Operators\n    content.vb: Public NotInheritable Class Operators\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: Operators\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object,System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object,System.Object)\n  id: AddObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: AddObject(Object, Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddObject\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 154\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Represents the Visual Basic addition (+) operator.</p>\\n\"\n  syntax:\n    content: public static object AddObject(object Left, object Right)\n    content.vb: Public Shared Function AddObject(Left As Object, Right As Object) As Object\n    parameters:\n    - id: Left\n      type: System.Object\n      description: \"\\n<p>Required. Any numeric expression.</p>\\n\"\n    - id: Right\n      type: System.Object\n      description: \"\\n<p>Required. Any numeric expression.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The sum of <em>Left</em> and <em>Right</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.AddObject(Object, Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.AndObject(System.Object,System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.AndObject(System.Object,System.Object)\n  id: AndObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: AndObject(Object, Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.AndObject(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AndObject\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 155\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Represents the Visual Basic <strong>And</strong> operator.</p>\\n\"\n  syntax:\n    content: public static object AndObject(object Left, object Right)\n    content.vb: Public Shared Function AndObject(Left As Object, Right As Object) As Object\n    parameters:\n    - id: Left\n      type: System.Object\n      description: \"\\n<p>Required. Any <strong>Boolean</strong> or numeric expression.</p>\\n\"\n    - id: Right\n      type: System.Object\n      description: \"\\n<p>Required. Any <strong>Boolean</strong> or numeric expression.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>For <strong>Boolean</strong> operations, <strong>True</strong> if both <em>Left</em> and <em>Right</em> evaluate to <strong>True</strong>; otherwise, <strong>False</strong>. For bitwise operations, 1 if both <em>Left</em> and <em>Right</em> evaluate to 1; otherwise, 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.AndObject(Object, Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectEqual(System.Object,System.Object,System.Boolean)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectEqual(System.Object,System.Object,System.Boolean)\n  id: CompareObjectEqual(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: CompareObjectEqual(Object, Object, Boolean)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectEqual(System.Object, System.Object, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CompareObjectEqual\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 156\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Represents the Visual Basic equal (=) operator.</p>\\n\"\n  syntax:\n    content: public static object CompareObjectEqual(object Left, object Right, bool TextCompare)\n    content.vb: Public Shared Function CompareObjectEqual(Left As Object, Right As Object, TextCompare As Boolean) As Object\n    parameters:\n    - id: Left\n      type: System.Object\n      description: \"\\n<p>Required. Any expression.</p>\\n\"\n    - id: Right\n      type: System.Object\n      description: \"\\n<p>Required. Any expression.</p>\\n\"\n    - id: TextCompare\n      type: System.Boolean\n      description: \"\\n<p>Required. <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>\\n<strong>True</strong> if <em>Left</em> and <em>Right</em> are equal; otherwise, <strong>False</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.CompareObjectEqual(Object, Object, Boolean)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreater(System.Object,System.Object,System.Boolean)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreater(System.Object,System.Object,System.Boolean)\n  id: CompareObjectGreater(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: CompareObjectGreater(Object, Object, Boolean)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreater(System.Object, System.Object, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CompareObjectGreater\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 157\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Represents the Visual Basic greater-than (>) operator.</p>\\n\"\n  syntax:\n    content: public static object CompareObjectGreater(object Left, object Right, bool TextCompare)\n    content.vb: Public Shared Function CompareObjectGreater(Left As Object, Right As Object, TextCompare As Boolean) As Object\n    parameters:\n    - id: Left\n      type: System.Object\n      description: \"\\n<p>Required. Any expression.</p>\\n\"\n    - id: Right\n      type: System.Object\n      description: \"\\n<p>Required. Any expression.</p>\\n\"\n    - id: TextCompare\n      type: System.Boolean\n      description: \"\\n<p>Required. <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>\\n<strong>True</strong> if <em>Left</em> is greater than <em>Right</em>; otherwise, <strong>False</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.CompareObjectGreater(Object, Object, Boolean)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)\n  id: CompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: CompareObjectGreaterEqual(Object, Object, Boolean)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreaterEqual(System.Object, System.Object, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CompareObjectGreaterEqual\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 158\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Represents the Visual Basic greater-than or equal-to (>=) operator.</p>\\n\"\n  syntax:\n    content: public static object CompareObjectGreaterEqual(object Left, object Right, bool TextCompare)\n    content.vb: Public Shared Function CompareObjectGreaterEqual(Left As Object, Right As Object, TextCompare As Boolean) As Object\n    parameters:\n    - id: Left\n      type: System.Object\n      description: \"\\n<p>Required. Any expression.</p>\\n\"\n    - id: Right\n      type: System.Object\n      description: \"\\n<p>Required. Any expression.</p>\\n\"\n    - id: TextCompare\n      type: System.Boolean\n      description: \"\\n<p>Required. <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>\\n<strong>True</strong> if <em>Left</em> is greater than or equal to <em>Right</em>; otherwise, <strong>False</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.CompareObjectGreaterEqual(Object, Object, Boolean)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLess(System.Object,System.Object,System.Boolean)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLess(System.Object,System.Object,System.Boolean)\n  id: CompareObjectLess(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: CompareObjectLess(Object, Object, Boolean)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLess(System.Object, System.Object, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CompareObjectLess\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 159\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Represents the Visual Basic less-than (<) operator.</p>\\n\"\n  syntax:\n    content: public static object CompareObjectLess(object Left, object Right, bool TextCompare)\n    content.vb: Public Shared Function CompareObjectLess(Left As Object, Right As Object, TextCompare As Boolean) As Object\n    parameters:\n    - id: Left\n      type: System.Object\n      description: \"\\n<p>Required. Any expression.</p>\\n\"\n    - id: Right\n      type: System.Object\n      description: \"\\n<p>Required. Any expression.</p>\\n\"\n    - id: TextCompare\n      type: System.Boolean\n      description: \"\\n<p>Required. <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>\\n<strong>True</strong> if <em>Left</em> is less than <em>Right</em>; otherwise, <strong>False</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.CompareObjectLess(Object, Object, Boolean)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLessEqual(System.Object,System.Object,System.Boolean)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLessEqual(System.Object,System.Object,System.Boolean)\n  id: CompareObjectLessEqual(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: CompareObjectLessEqual(Object, Object, Boolean)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLessEqual(System.Object, System.Object, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CompareObjectLessEqual\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 160\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Represents the Visual Basic less-than or equal-to (<=) operator.</p>\\n\"\n  syntax:\n    content: public static object CompareObjectLessEqual(object Left, object Right, bool TextCompare)\n    content.vb: Public Shared Function CompareObjectLessEqual(Left As Object, Right As Object, TextCompare As Boolean) As Object\n    parameters:\n    - id: Left\n      type: System.Object\n      description: \"\\n<p>Required. Any expression.</p>\\n\"\n    - id: Right\n      type: System.Object\n      description: \"\\n<p>Required. Any expression.</p>\\n\"\n    - id: TextCompare\n      type: System.Boolean\n      description: \"\\n<p>Required. <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>\\n<strong>True</strong> if <em>Left</em> is less than or equal to <em>Right</em>; otherwise, <strong>False</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.CompareObjectLessEqual(Object, Object, Boolean)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectNotEqual(System.Object,System.Object,System.Boolean)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectNotEqual(System.Object,System.Object,System.Boolean)\n  id: CompareObjectNotEqual(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: CompareObjectNotEqual(Object, Object, Boolean)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectNotEqual(System.Object, System.Object, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CompareObjectNotEqual\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 161\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Represents the Visual Basic not-equal (<>) operator.</p>\\n\"\n  syntax:\n    content: public static object CompareObjectNotEqual(object Left, object Right, bool TextCompare)\n    content.vb: Public Shared Function CompareObjectNotEqual(Left As Object, Right As Object, TextCompare As Boolean) As Object\n    parameters:\n    - id: Left\n      type: System.Object\n      description: \"\\n<p>Required. Any expression.</p>\\n\"\n    - id: Right\n      type: System.Object\n      description: \"\\n<p>Required. Any expression.</p>\\n\"\n    - id: TextCompare\n      type: System.Boolean\n      description: \"\\n<p>Required. <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>\\n<strong>True</strong> if <em>Left</em> is not equal to <em>Right</em>; otherwise, <strong>False</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.CompareObjectNotEqual(Object, Object, Boolean)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareString(System.String,System.String,System.Boolean)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.CompareString(System.String,System.String,System.Boolean)\n  id: CompareString(System.String,System.String,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: CompareString(String, String, Boolean)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.CompareString(System.String, System.String, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CompareString\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 162\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Performs binary or text string comparison when given two strings.</p>\\n\"\n  syntax:\n    content: public static int CompareString(string Left, string Right, bool TextCompare)\n    content.vb: Public Shared Function CompareString(Left As String, Right As String, TextCompare As Boolean) As Integer\n    parameters:\n    - id: Left\n      type: System.String\n      description: \"\\n<p>Required. Any <strong>String</strong> expression.</p>\\n\"\n    - id: Right\n      type: System.String\n      description: \"\\n<p>Required. Any <strong>String</strong> expression.</p>\\n\"\n    - id: TextCompare\n      type: System.Boolean\n      description: \"\\n<p>Required. <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>-1 </p>\\n</td><td>\\n<p>\\n<em>Left</em> is less than <em>Right</em>. </p>\\n</td></tr><tr><td>\\n<p>0</p>\\n</td><td>\\n<p>\\n<em>Left</em> is equal to <em>Right</em>. </p>\\n</td></tr><tr><td>\\n<p>1 </p>\\n</td><td>\\n<p>\\n<em>Left</em> is greater than <em>Right</em>. </p>\\n</td></tr></tbody></table>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.CompareString(String, String, Boolean)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject(System.Object,System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject(System.Object,System.Object)\n  id: ConcatenateObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: ConcatenateObject(Object, Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConcatenateObject\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 163\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Represents the Visual Basic concatenation (&) operator.</p>\\n\"\n  syntax:\n    content: public static object ConcatenateObject(object Left, object Right)\n    content.vb: Public Shared Function ConcatenateObject(Left As Object, Right As Object) As Object\n    parameters:\n    - id: Left\n      type: System.Object\n      description: \"\\n<p>Required. Any expression.</p>\\n\"\n    - id: Right\n      type: System.Object\n      description: \"\\n<p>Required. Any expression.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>A string representing the concatenation of <em>Left</em> and <em>Right</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.ConcatenateObject(Object, Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual(System.Object,System.Object,System.Boolean)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual(System.Object,System.Object,System.Boolean)\n  id: ConditionalCompareObjectEqual(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: ConditionalCompareObjectEqual(Object, Object, Boolean)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual(System.Object, System.Object, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConditionalCompareObjectEqual\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 164\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Represents the overloaded Visual Basic equals (=) operator.</p>\\n\"\n  syntax:\n    content: public static bool ConditionalCompareObjectEqual(object Left, object Right, bool TextCompare)\n    content.vb: Public Shared Function ConditionalCompareObjectEqual(Left As Object, Right As Object, TextCompare As Boolean) As Boolean\n    parameters:\n    - id: Left\n      type: System.Object\n      description: \"\\n<p>Required. Any expression.</p>\\n\"\n    - id: Right\n      type: System.Object\n      description: \"\\n<p>Required. Any expression.</p>\\n\"\n    - id: TextCompare\n      type: System.Boolean\n      description: \"\\n<p>Required. <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>The result of the overloaded equals operator. <strong>False</strong> if operator overloading is not supported.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.ConditionalCompareObjectEqual(Object, Object, Boolean)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreater(System.Object,System.Object,System.Boolean)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreater(System.Object,System.Object,System.Boolean)\n  id: ConditionalCompareObjectGreater(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: ConditionalCompareObjectGreater(Object, Object, Boolean)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreater(System.Object, System.Object, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConditionalCompareObjectGreater\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 165\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Represents the overloaded Visual Basic greater-than (>) operator.</p>\\n\"\n  syntax:\n    content: public static bool ConditionalCompareObjectGreater(object Left, object Right, bool TextCompare)\n    content.vb: Public Shared Function ConditionalCompareObjectGreater(Left As Object, Right As Object, TextCompare As Boolean) As Boolean\n    parameters:\n    - id: Left\n      type: System.Object\n      description: \"\\n<p>Required. Any expression.</p>\\n\"\n    - id: Right\n      type: System.Object\n      description: \"\\n<p>Required. Any expression.</p>\\n\"\n    - id: TextCompare\n      type: System.Boolean\n      description: \"\\n<p>Required. <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>The result of the overloaded greater-than operator. <strong>False</strong> if operator overloading is not supported.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.ConditionalCompareObjectGreater(Object, Object, Boolean)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)\n  id: ConditionalCompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: ConditionalCompareObjectGreaterEqual(Object, Object, Boolean)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreaterEqual(System.Object, System.Object, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConditionalCompareObjectGreaterEqual\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 166\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Represents the overloaded Visual Basic greater-than or equal-to (>=) operator.</p>\\n\"\n  syntax:\n    content: public static bool ConditionalCompareObjectGreaterEqual(object Left, object Right, bool TextCompare)\n    content.vb: Public Shared Function ConditionalCompareObjectGreaterEqual(Left As Object, Right As Object, TextCompare As Boolean) As Boolean\n    parameters:\n    - id: Left\n      type: System.Object\n      description: \"\\n<p>Required. Any expression.</p>\\n\"\n    - id: Right\n      type: System.Object\n      description: \"\\n<p>Required. Any expression.</p>\\n\"\n    - id: TextCompare\n      type: System.Boolean\n      description: \"\\n<p>Required. <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>The result of the overloaded greater-than or equal-to operator. <strong>False</strong> if operator overloading is not supported.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.ConditionalCompareObjectGreaterEqual(Object, Object, Boolean)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLess(System.Object,System.Object,System.Boolean)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLess(System.Object,System.Object,System.Boolean)\n  id: ConditionalCompareObjectLess(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: ConditionalCompareObjectLess(Object, Object, Boolean)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLess(System.Object, System.Object, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConditionalCompareObjectLess\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 167\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Represents the overloaded Visual Basic less-than (<) operator.</p>\\n\"\n  syntax:\n    content: public static bool ConditionalCompareObjectLess(object Left, object Right, bool TextCompare)\n    content.vb: Public Shared Function ConditionalCompareObjectLess(Left As Object, Right As Object, TextCompare As Boolean) As Boolean\n    parameters:\n    - id: Left\n      type: System.Object\n      description: \"\\n<p>Required. Any expression.</p>\\n\"\n    - id: Right\n      type: System.Object\n      description: \"\\n<p>Required. Any expression.</p>\\n\"\n    - id: TextCompare\n      type: System.Boolean\n      description: \"\\n<p>Required. <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>The result of the overloaded less-than operator. <strong>False</strong> if operator overloading is not supported.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.ConditionalCompareObjectLess(Object, Object, Boolean)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLessEqual(System.Object,System.Object,System.Boolean)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLessEqual(System.Object,System.Object,System.Boolean)\n  id: ConditionalCompareObjectLessEqual(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: ConditionalCompareObjectLessEqual(Object, Object, Boolean)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLessEqual(System.Object, System.Object, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConditionalCompareObjectLessEqual\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 168\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Represents the overloaded Visual Basic less-than or equal-to (<=) operator.</p>\\n\"\n  syntax:\n    content: public static bool ConditionalCompareObjectLessEqual(object Left, object Right, bool TextCompare)\n    content.vb: Public Shared Function ConditionalCompareObjectLessEqual(Left As Object, Right As Object, TextCompare As Boolean) As Boolean\n    parameters:\n    - id: Left\n      type: System.Object\n      description: \"\\n<p>Required. Any expression.</p>\\n\"\n    - id: Right\n      type: System.Object\n      description: \"\\n<p>Required. Any expression.</p>\\n\"\n    - id: TextCompare\n      type: System.Boolean\n      description: \"\\n<p>Required. <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>The result of the overloaded less-than or equal-to operator. <strong>False</strong> if operator overloading is not supported.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.ConditionalCompareObjectLessEqual(Object, Object, Boolean)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectNotEqual(System.Object,System.Object,System.Boolean)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectNotEqual(System.Object,System.Object,System.Boolean)\n  id: ConditionalCompareObjectNotEqual(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: ConditionalCompareObjectNotEqual(Object, Object, Boolean)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectNotEqual(System.Object, System.Object, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConditionalCompareObjectNotEqual\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 169\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Represents the overloaded Visual Basic not-equal (<>) operator.</p>\\n\"\n  syntax:\n    content: public static bool ConditionalCompareObjectNotEqual(object Left, object Right, bool TextCompare)\n    content.vb: Public Shared Function ConditionalCompareObjectNotEqual(Left As Object, Right As Object, TextCompare As Boolean) As Boolean\n    parameters:\n    - id: Left\n      type: System.Object\n      description: \"\\n<p>Required. Any expression.</p>\\n\"\n    - id: Right\n      type: System.Object\n      description: \"\\n<p>Required. Any expression.</p>\\n\"\n    - id: TextCompare\n      type: System.Boolean\n      description: \"\\n<p>Required. <strong>True</strong> to perform a case-insensitive string comparison; otherwise, <strong>False</strong>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>The result of the overloaded not-equal operator. <strong>False</strong> if operator overloading is not supported.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.ConditionalCompareObjectNotEqual(Object, Object, Boolean)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.DivideObject(System.Object,System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.DivideObject(System.Object,System.Object)\n  id: DivideObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: DivideObject(Object, Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.DivideObject(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DivideObject\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 170\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Represents the Visual Basic division (/) operator.</p>\\n\"\n  syntax:\n    content: public static object DivideObject(object Left, object Right)\n    content.vb: Public Shared Function DivideObject(Left As Object, Right As Object) As Object\n    parameters:\n    - id: Left\n      type: System.Object\n      description: \"\\n<p>Required. Any numeric expression.</p>\\n\"\n    - id: Right\n      type: System.Object\n      description: \"\\n<p>Required. Any numeric expression.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The full quotient of <em>Left</em> divided by <em>Right</em>, including any remainder.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.DivideObject(Object, Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ExponentObject(System.Object,System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.ExponentObject(System.Object,System.Object)\n  id: ExponentObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: ExponentObject(Object, Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.ExponentObject(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExponentObject\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 171\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Represents the Visual Basic exponent (^) operator.</p>\\n\"\n  syntax:\n    content: public static object ExponentObject(object Left, object Right)\n    content.vb: Public Shared Function ExponentObject(Left As Object, Right As Object) As Object\n    parameters:\n    - id: Left\n      type: System.Object\n      description: \"\\n<p>Required. Any numeric expression.</p>\\n\"\n    - id: Right\n      type: System.Object\n      description: \"\\n<p>Required. Any numeric expression.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The result of <em>Left</em> raised to the power of <em>Right</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.ExponentObject(Object, Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.IntDivideObject(System.Object,System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.IntDivideObject(System.Object,System.Object)\n  id: IntDivideObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: IntDivideObject(Object, Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.IntDivideObject(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IntDivideObject\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 172\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Represents the Visual Basic integer division (\\\\) operator.</p>\\n\"\n  syntax:\n    content: public static object IntDivideObject(object Left, object Right)\n    content.vb: Public Shared Function IntDivideObject(Left As Object, Right As Object) As Object\n    parameters:\n    - id: Left\n      type: System.Object\n      description: \"\\n<p>Required. Any numeric expression.</p>\\n\"\n    - id: Right\n      type: System.Object\n      description: \"\\n<p>Required. Any numeric expression.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The integer quotient of <em>Left</em> divided by <em>Right</em>, which discards any remainder and retains only the integer portion.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.IntDivideObject(Object, Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.LeftShiftObject(System.Object,System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.LeftShiftObject(System.Object,System.Object)\n  id: LeftShiftObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: LeftShiftObject(Object, Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.LeftShiftObject(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LeftShiftObject\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 173\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Represents the Visual Basic arithmetic left shift (<<) operator.</p>\\n\"\n  syntax:\n    content: public static object LeftShiftObject(object Operand, object Amount)\n    content.vb: Public Shared Function LeftShiftObject(Operand As Object, Amount As Object) As Object\n    parameters:\n    - id: Operand\n      type: System.Object\n      description: \"\\n<p>Required. Integral numeric expression. The bit pattern to be shifted. The data type must be an integral type (<strong>SByte</strong>, <strong>Byte</strong>, <strong>Short</strong>, <strong>UShort</strong>, <strong>Integer</strong>, <strong>UInteger</strong>, <strong>Long</strong>, or <strong>ULong</strong>).</p>\\n\"\n    - id: Amount\n      type: System.Object\n      description: \"\\n<p>Required. Numeric expression. The number of bits to shift the bit pattern. The data type must be <strong>Integer</strong> or widen to <strong>Integer</strong>.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An integral numeric value. The result of shifting the bit pattern. The data type is the same as that of <em>Operand</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.LeftShiftObject(Object, Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ModObject(System.Object,System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.ModObject(System.Object,System.Object)\n  id: ModObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: ModObject(Object, Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.ModObject(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ModObject\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 174\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Represents the Visual Basic <strong>Mod</strong> operator.</p>\\n\"\n  syntax:\n    content: public static object ModObject(object Left, object Right)\n    content.vb: Public Shared Function ModObject(Left As Object, Right As Object) As Object\n    parameters:\n    - id: Left\n      type: System.Object\n      description: \"\\n<p>Required. Any numeric expression.</p>\\n\"\n    - id: Right\n      type: System.Object\n      description: \"\\n<p>Required. Any numeric expression.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The remainder after <em>Left</em> is divided by <em>Right</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.ModObject(Object, Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.MultiplyObject(System.Object,System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.MultiplyObject(System.Object,System.Object)\n  id: MultiplyObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: MultiplyObject(Object, Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.MultiplyObject(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MultiplyObject\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 175\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Represents the Visual Basic multiply (*) operator.</p>\\n\"\n  syntax:\n    content: public static object MultiplyObject(object Left, object Right)\n    content.vb: Public Shared Function MultiplyObject(Left As Object, Right As Object) As Object\n    parameters:\n    - id: Left\n      type: System.Object\n      description: \"\\n<p>Required. Any numeric expression.</p>\\n\"\n    - id: Right\n      type: System.Object\n      description: \"\\n<p>Required. Any numeric expression.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The product of <em>Left</em> and <em>Right</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.MultiplyObject(Object, Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.NegateObject(System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.NegateObject(System.Object)\n  id: NegateObject(System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: NegateObject(Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.NegateObject(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NegateObject\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 176\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Represents the Visual Basic unary minus (–) operator.</p>\\n\"\n  syntax:\n    content: public static object NegateObject(object Operand)\n    content.vb: Public Shared Function NegateObject(Operand As Object) As Object\n    parameters:\n    - id: Operand\n      type: System.Object\n      description: \"\\n<p>Required. Any numeric expression.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The negative value of <em>Operand</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.NegateObject(Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.NotObject(System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.NotObject(System.Object)\n  id: NotObject(System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: NotObject(Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.NotObject(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NotObject\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 177\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Represents the Visual Basic <strong>Not</strong> operator.</p>\\n\"\n  syntax:\n    content: public static object NotObject(object Operand)\n    content.vb: Public Shared Function NotObject(Operand As Object) As Object\n    parameters:\n    - id: Operand\n      type: System.Object\n      description: \"\\n<p>Required. Any <strong>Boolean</strong> or numeric expression.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>For <strong>Boolean</strong> operations, <strong>False</strong> if <em>Operand</em> is <strong>True</strong>; otherwise, <strong>True</strong>. For bitwise operations, 1 if <em>Operand</em> is 0; otherwise, 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.NotObject(Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.OrObject(System.Object,System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.OrObject(System.Object,System.Object)\n  id: OrObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: OrObject(Object, Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.OrObject(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OrObject\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 178\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Represents the Visual Basic <strong>Or</strong> operator.</p>\\n\"\n  syntax:\n    content: public static object OrObject(object Left, object Right)\n    content.vb: Public Shared Function OrObject(Left As Object, Right As Object) As Object\n    parameters:\n    - id: Left\n      type: System.Object\n      description: \"\\n<p>Required. Any <strong>Boolean</strong> or numeric expression.</p>\\n\"\n    - id: Right\n      type: System.Object\n      description: \"\\n<p>Required. Any <strong>Boolean</strong> or numeric expression.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>For <strong>Boolean</strong> operations, <strong>False</strong> if both <em>Left</em> and <em>Right</em> evaluate to <strong>False</strong>; otherwise, <strong>True</strong>. For bitwise operations, 0 if both <em>Left</em> and <em>Right</em> evaluate to 0; otherwise, 1.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.OrObject(Object, Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.PlusObject(System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.PlusObject(System.Object)\n  id: PlusObject(System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: PlusObject(Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.PlusObject(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PlusObject\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 179\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Represents the Visual Basic unary plus (+) operator.</p>\\n\"\n  syntax:\n    content: public static object PlusObject(object Operand)\n    content.vb: Public Shared Function PlusObject(Operand As Object) As Object\n    parameters:\n    - id: Operand\n      type: System.Object\n      description: \"\\n<p>Required. Any numeric expression.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The value of <em>Operand</em>. (The sign of the <em>Operand</em> is unchanged.)</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.PlusObject(Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.RightShiftObject(System.Object,System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.RightShiftObject(System.Object,System.Object)\n  id: RightShiftObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: RightShiftObject(Object, Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.RightShiftObject(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RightShiftObject\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 180\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Represents the Visual Basic arithmetic right shift (>>) operator.</p>\\n\"\n  syntax:\n    content: public static object RightShiftObject(object Operand, object Amount)\n    content.vb: Public Shared Function RightShiftObject(Operand As Object, Amount As Object) As Object\n    parameters:\n    - id: Operand\n      type: System.Object\n      description: \"\\n<p>Required. Integral numeric expression. The bit pattern to be shifted. The data type must be an integral type (<strong>SByte</strong>, <strong>Byte</strong>, <strong>Short</strong>, <strong>UShort</strong>, <strong>Integer</strong>, <strong>UInteger</strong>, <strong>Long</strong>, or <strong>ULong</strong>).</p>\\n\"\n    - id: Amount\n      type: System.Object\n      description: \"\\n<p>Required. Numeric expression. The number of bits to shift the bit pattern. The data type must be <strong>Integer</strong> or widen to <strong>Integer</strong>.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An integral numeric value. The result of shifting the bit pattern. The data type is the same as that of <em>Operand</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.RightShiftObject(Object, Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.SubtractObject(System.Object,System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.SubtractObject(System.Object,System.Object)\n  id: SubtractObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: SubtractObject(Object, Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.SubtractObject(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SubtractObject\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 181\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Represents the Visual Basic subtraction (–) operator.</p>\\n\"\n  syntax:\n    content: public static object SubtractObject(object Left, object Right)\n    content.vb: Public Shared Function SubtractObject(Left As Object, Right As Object) As Object\n    parameters:\n    - id: Left\n      type: System.Object\n      description: \"\\n<p>Required. Any numeric expression. </p>\\n\"\n    - id: Right\n      type: System.Object\n      description: \"\\n<p>Required. Any numeric expression.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The difference between <em>Left</em> and <em>Right</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.SubtractObject(Object, Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.XorObject(System.Object,System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.XorObject(System.Object,System.Object)\n  id: XorObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  - vb\n  name: XorObject(Object, Object)\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators.XorObject(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XorObject\n    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs\n    startLine: 182\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: \"\\n<p>Represents the Visual Basic <strong>Xor</strong> operator.</p>\\n\"\n  syntax:\n    content: public static object XorObject(object Left, object Right)\n    content.vb: Public Shared Function XorObject(Left As Object, Right As Object) As Object\n    parameters:\n    - id: Left\n      type: System.Object\n      description: \"\\n<p>Required. Any <strong>Boolean</strong> or numeric expression.</p>\\n\"\n    - id: Right\n      type: System.Object\n      description: \"\\n<p>Required. Any <strong>Boolean</strong> or numeric expression.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>A <strong>Boolean</strong> or numeric value. For a <strong>Boolean</strong> comparison, the return value is the logical exclusion (exclusive logical disjunction) of two <strong>Boolean</strong> values. For bitwise (numeric) operations, the return value is a numeric value that represents the bitwise exclusion (exclusive bitwise disjunction) of two numeric bit patterns. For more information, see Xor Operator (Visual Basic).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Operators.XorObject(Object, Object)\nreferences:\n- uid: Microsoft.VisualBasic.CompilerServices\n  isExternal: false\n  name: Microsoft.VisualBasic.CompilerServices\n  fullName: Microsoft.VisualBasic.CompilerServices\n  commentId: N:Microsoft.VisualBasic.CompilerServices\n  nameWithType: Microsoft.VisualBasic.CompilerServices\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n"}