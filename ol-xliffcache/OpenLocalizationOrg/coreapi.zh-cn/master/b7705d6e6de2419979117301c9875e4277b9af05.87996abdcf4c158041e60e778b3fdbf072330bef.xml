{"nodes":[{"pos":[1444,1463],"content":"AttributeCollection","needQuote":true,"nodes":[{"content":"AttributeCollection","pos":[0,19]}]},{"pos":[3547,3552],"content":"Empty","needQuote":true,"nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[4742,4763],"content":"AttributeCollection()","needQuote":true,"nodes":[{"content":"AttributeCollection()","pos":[0,21]}]},{"pos":[6003,6035],"content":"AttributeCollection(Attribute[])","needQuote":true,"nodes":[{"content":"AttributeCollection(Attribute[])","pos":[0,32]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;attributes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[7242,7300],"source":"\\n<p>\\n<em>attributes</em> is <strong>null</strong>.</p>\\n"},{"pos":[7946,7956],"content":"Attributes","needQuote":true,"nodes":[{"content":"Attributes","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The attribute collection.&lt;/p&gt;\\n","pos":[9051,9087],"source":"\\n<p>The attribute collection.</p>\\n"},{"pos":[9601,9620],"content":"Contains(Attribute)","needQuote":true,"nodes":[{"content":"Contains(Attribute)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the collection contains the attribute or is the default attribute for the type of attribute; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10641,10806],"source":"\\n<p>\\n<strong>true</strong> if the collection contains the attribute or is the default attribute for the type of attribute; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[11280,11301],"content":"Contains(Attribute[])","needQuote":true,"nodes":[{"content":"Contains(Attribute[])","pos":[0,21]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the collection contains all the attributes; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12376,12492],"source":"\\n<p>\\n<strong>true</strong> if the collection contains all the attributes; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[13163,13183],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The index to start from.","pos":[14184,14213],"source":"\\n<p>The index to start from."},{"content":"&lt;/p&gt;\\n","pos":[14214,14220],"source":" </p>\\n"},{"pos":[14709,14714],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The number of attributes.&lt;/p&gt;\\n","pos":[15444,15480],"source":"\\n<p>The number of attributes.</p>\\n"},{"pos":[16154,16200],"content":"FromExisting(AttributeCollection, Attribute[])","needQuote":true,"nodes":[{"content":"FromExisting(AttributeCollection, Attribute[])","pos":[0,46]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;existing&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18187,18243],"source":"\\n<p>\\n<em>existing</em> is <strong>null</strong>.</p>\\n"},{"pos":[18983,19008],"content":"GetDefaultAttribute(Type)","needQuote":true,"nodes":[{"content":"GetDefaultAttribute(Type)","pos":[0,25]}]},{"pos":[20685,20700],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[22277,22303],"content":"ICollection.IsSynchronized","needQuote":true,"nodes":[{"content":"ICollection.IsSynchronized","pos":[0,26]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if access to the collection is synchronized (thread-safe); otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[23268,23396],"source":"\\n<p>\\n<strong>true</strong> if access to the collection is synchronized (thread-safe); otherwise, <strong>false</strong>.</p>\\n"},{"pos":[24001,24019],"content":"Matches(Attribute)","needQuote":true,"nodes":[{"content":"Matches(Attribute)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the attribute is contained within the collection and has the same value as the attribute in the collection; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[25082,25262],"source":"\\n<p>\\n<strong>true</strong> if the attribute is contained within the collection and has the same value as the attribute in the collection; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[25841,25861],"content":"Matches(Attribute[])","needQuote":true,"nodes":[{"content":"Matches(Attribute[])","pos":[0,20]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if all the attributes in the array are contained in the collection and have the same values as the attributes in the collection; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[26966,27164],"source":"\\n<p>\\n<strong>true</strong> if all the attributes in the array are contained in the collection and have the same values as the attributes in the collection; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[27863,27883],"content":"ICollection.SyncRoot","needQuote":true,"nodes":[{"content":"ICollection.SyncRoot","pos":[0,20]}]},{"content":"\\n&lt;p&gt;An object that can be used to synchronize access to the collection.&lt;/p&gt;\\n","pos":[28803,28881],"source":"\\n<p>An object that can be used to synchronize access to the collection.</p>\\n"},{"pos":[29441,29452],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[31230,31240],"content":"Item[Type]","needQuote":true,"nodes":[{"content":"Item[Type]","pos":[0,10]}]},{"pos":[32973,32994],"content":"System.ComponentModel","needQuote":true,"nodes":[{"content":"System.ComponentModel","pos":[0,21]}]},{"pos":[33170,33176],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33350,33361],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[33574,33585],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[33784,33794],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[33889,33897],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[33966,33967],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33994,33995],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34065,34073],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[34142,34143],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34170,34171],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34354,34368],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[34487,34493],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[34560,34561],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34611,34617],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34677,34678],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34761,34767],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[34834,34835],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34885,34891],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34951,34952],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35166,35188],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[35336,35342],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[35409,35410],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35460,35466],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[35527,35528]},{"pos":[35583,35589],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[35649,35650],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35747,35753],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[35820,35821],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35871,35877],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[35938,35939]},{"pos":[35994,36000],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[36060,36061],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36306,36337],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[36503,36518],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[36594,36595],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36645,36651],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[36712,36713]},{"pos":[36768,36774],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[36834,36835],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36941,36956],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[37032,37033],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37083,37089],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[37150,37151]},{"pos":[37206,37212],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[37272,37273],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37503,37516],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[37617,37628],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[37700,37701],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37728,37729],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37802,37813],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[37885,37886],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37913,37914],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38089,38098],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[38191,38198],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[38266,38267],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38294,38295],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38364,38371],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[38439,38440],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38467,38468],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38643,38660],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[38769,38784],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[38860,38861],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38888,38889],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38966,38981],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[39057,39058],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39085,39086],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39381,39394],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[39511,39522],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[39581,39582],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39609,39610],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39691,39702],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[39761,39762],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39789,39790],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40145,40157],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[40290,40300],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[40367,40368],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40395,40396],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40485,40495],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[40562,40563],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40590,40591],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40932,40947],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[41151,41164],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[41226,41227],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41254,41255],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41333,41349],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[41414,41415],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41442,41443],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41821,41838],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[42050,42065],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[42129,42130],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42157,42158],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42238,42256],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[42323,42324],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42351,42352],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42587,42593],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[42712,42730],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[42931,42955],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[43134,43145],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[43204,43205],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43272,43283],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[43360,43361],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43474,43485],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[43544,43545],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43612,43623],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[43700,43701],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43929,43938],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[44144,44167],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[44362,44372],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[44439,44440],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44507,44518],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[44595,44596],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44717,44727],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[44794,44795],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44862,44873],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[44950,44951],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45204,45222],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[45444,45470],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[45777,45790],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[45852,45853],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45920,45931],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[46008,46009],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46119,46135],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[46200,46201],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46268,46279],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[46356,46357],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46646,46656],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[46856,46884],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[47199,47214],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[47278,47279],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47346,47357],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[47434,47435],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47547,47565],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[47632,47633],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47700,47711],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[47788,47789],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48051,48062],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[48251,48270],"content":"AttributeCollection","needQuote":true,"nodes":[{"content":"AttributeCollection","pos":[0,19]}]},{"pos":[48452,48463],"content":"Attribute[]","needQuote":true,"nodes":[{"content":"Attribute[]","pos":[0,11]}]},{"pos":[48603,48612],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"content":"[]","pos":[48676,48678]},{"pos":[48746,48755],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"pos":[48818,48820],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[48966,48975],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"pos":[49130,49137],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[49359,49379],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"pos":[49557,49563],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[49626,49627],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49676,49681],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[49720,49721]},{"pos":[49775,49780],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[49839,49840],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49952,49958],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[50021,50022],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50071,50076],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[50115,50116]},{"pos":[50170,50175],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[50234,50235],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50446,50451],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[50592,50597],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[50786,50791],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[50991,50995],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[51189,51204],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[51343,51356],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[51426,51427],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51454,51455],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51547,51560],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[51630,51631],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51658,51659],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51875,51886],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[52126,52140],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[52419,52427],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[52636,52657],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.ComponentModel.AttributeCollection\n  commentId: T:System.ComponentModel.AttributeCollection\n  id: AttributeCollection\n  parent: System.ComponentModel\n  children:\n  - System.ComponentModel.AttributeCollection.#ctor\n  - System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])\n  - System.ComponentModel.AttributeCollection.Attributes\n  - System.ComponentModel.AttributeCollection.Contains(System.Attribute)\n  - System.ComponentModel.AttributeCollection.Contains(System.Attribute[])\n  - System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)\n  - System.ComponentModel.AttributeCollection.Count\n  - System.ComponentModel.AttributeCollection.Empty\n  - System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])\n  - System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)\n  - System.ComponentModel.AttributeCollection.GetEnumerator\n  - System.ComponentModel.AttributeCollection.Item(System.Int32)\n  - System.ComponentModel.AttributeCollection.Item(System.Type)\n  - System.ComponentModel.AttributeCollection.Matches(System.Attribute)\n  - System.ComponentModel.AttributeCollection.Matches(System.Attribute[])\n  - System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized\n  - System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot\n  langs:\n  - csharp\n  - vb\n  name: AttributeCollection\n  fullName: System.ComponentModel.AttributeCollection\n  type: Class\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AttributeCollection\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n    startLine: 14\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Represents a collection of attributes.</p>\\n\"\n  syntax:\n    content: 'public class AttributeCollection : ICollection, IEnumerable'\n    content.vb: >-\n      Public Class AttributeCollection\n          Implements ICollection, IEnumerable\n  seealso:\n  - type: System.Attribute\n    commentId: T:System.Attribute\n  - type: System.ComponentModel.BrowsableAttribute\n    commentId: T:System.ComponentModel.BrowsableAttribute\n  - type: System.ComponentModel.DescriptionAttribute\n    commentId: T:System.ComponentModel.DescriptionAttribute\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.ICollection\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: AttributeCollection\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.ComponentModel.AttributeCollection.Empty\n  commentId: F:System.ComponentModel.AttributeCollection.Empty\n  id: Empty\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  - vb\n  name: Empty\n  fullName: System.ComponentModel.AttributeCollection.Empty\n  type: Field\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Empty\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n    startLine: 19\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Specifies an empty collection that you can use, rather than creating a new one. This field is read-only.</p>\\n\"\n  syntax:\n    content: public static readonly AttributeCollection Empty\n    content.vb: Public Shared ReadOnly Empty As AttributeCollection\n    return:\n      type: System.ComponentModel.AttributeCollection\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: AttributeCollection.Empty\n- uid: System.ComponentModel.AttributeCollection.#ctor\n  commentId: M:System.ComponentModel.AttributeCollection.#ctor\n  id: '#ctor'\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  - vb\n  name: AttributeCollection()\n  fullName: System.ComponentModel.AttributeCollection.AttributeCollection()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n    startLine: 54\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ComponentModel.AttributeCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. </p>\\n\"\n  syntax:\n    content: protected AttributeCollection()\n    content.vb: Protected Sub New\n  seealso:\n  - type: System.Attribute\n    commentId: T:System.Attribute\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: AttributeCollection.AttributeCollection()\n- uid: System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])\n  commentId: M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])\n  id: '#ctor(System.Attribute[])'\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  - vb\n  name: AttributeCollection(Attribute[])\n  fullName: System.ComponentModel.AttributeCollection.AttributeCollection(System.Attribute[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n    startLine: 41\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ComponentModel.AttributeCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public AttributeCollection(params Attribute[] attributes)\n    content.vb: Public Sub New(ParamArray attributes As Attribute())\n    parameters:\n    - id: attributes\n      type: System.Attribute[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides the attributes for this collection. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>attributes</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Attribute\n    commentId: T:System.Attribute\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.ComponentModel.AttributeCollection.AttributeCollection(System.Attribute())\n  name.vb: AttributeCollection(Attribute())\n  nameWithType: AttributeCollection.AttributeCollection(Attribute[])\n  nameWithType.vb: AttributeCollection.AttributeCollection(Attribute())\n- uid: System.ComponentModel.AttributeCollection.Attributes\n  commentId: P:System.ComponentModel.AttributeCollection.Attributes\n  id: Attributes\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  - vb\n  name: Attributes\n  fullName: System.ComponentModel.AttributeCollection.Attributes\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Attributes\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n    startLine: 126\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets the attribute collection.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Performance\", \"CA1819:PropertiesShouldNotReturnArrays\", Justification = \"Matches constructor input type\")]\n\n      protected virtual Attribute[] Attributes { get; }\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Performance\", \"CA1819:PropertiesShouldNotReturnArrays\", Justification:=\"Matches constructor input type\")>\n\n      Protected Overridable ReadOnly Property Attributes As Attribute()\n    parameters: []\n    return:\n      type: System.Attribute[]\n      description: \"\\n<p>The attribute collection.</p>\\n\"\n  seealso:\n  - type: System.Attribute\n    commentId: T:System.Attribute\n  modifiers.csharp:\n  - protected\n  - virtual\n  - get\n  modifiers.vb:\n  - Protected\n  - Overridable\n  - ReadOnly\n  nameWithType: AttributeCollection.Attributes\n- uid: System.ComponentModel.AttributeCollection.Contains(System.Attribute)\n  commentId: M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)\n  id: Contains(System.Attribute)\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  - vb\n  name: Contains(Attribute)\n  fullName: System.ComponentModel.AttributeCollection.Contains(System.Attribute)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Contains\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n    startLine: 242\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Determines whether this collection of attributes has the specified attribute.</p>\\n\"\n  syntax:\n    content: public bool Contains(Attribute attribute)\n    content.vb: Public Function Contains(attribute As Attribute) As Boolean\n    parameters:\n    - id: attribute\n      type: System.Attribute\n      description: \"\\n<p>An <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to find in the collection. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the collection contains the attribute or is the default attribute for the type of attribute; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Attribute\n    commentId: T:System.Attribute\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: AttributeCollection.Contains(Attribute)\n- uid: System.ComponentModel.AttributeCollection.Contains(System.Attribute[])\n  commentId: M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])\n  id: Contains(System.Attribute[])\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  - vb\n  name: Contains(Attribute[])\n  fullName: System.ComponentModel.AttributeCollection.Contains(System.Attribute[])\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Contains\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n    startLine: 253\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Determines whether this attribute collection contains all the specified attributes in the attribute array.</p>\\n\"\n  syntax:\n    content: public bool Contains(Attribute[] attributes)\n    content.vb: Public Function Contains(attributes As Attribute()) As Boolean\n    parameters:\n    - id: attributes\n      type: System.Attribute[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to find in the collection. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the collection contains all the attributes; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Attribute\n    commentId: T:System.Attribute\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.ComponentModel.AttributeCollection.Contains(System.Attribute())\n  name.vb: Contains(Attribute())\n  nameWithType: AttributeCollection.Contains(Attribute[])\n  nameWithType.vb: AttributeCollection.Contains(Attribute())\n- uid: System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)\n  commentId: M:System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(Array, Int32)\n  fullName: System.ComponentModel.AttributeCollection.CopyTo(System.Array, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CopyTo\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n    startLine: 383\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Copies the collection to an array, starting at the specified index.</p>\\n\"\n  syntax:\n    content: public void CopyTo(Array array, int index)\n    content.vb: Public Sub CopyTo(array As Array, index As Integer)\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to copy the collection to. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index to start from. </p>\\n\"\n  seealso:\n  - type: System.Attribute\n    commentId: T:System.Attribute\n  implements:\n  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: AttributeCollection.CopyTo(Array, Int32)\n- uid: System.ComponentModel.AttributeCollection.Count\n  commentId: P:System.ComponentModel.AttributeCollection.Count\n  id: Count\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.ComponentModel.AttributeCollection.Count\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n    startLine: 138\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets the number of attributes.</p>\\n\"\n  syntax:\n    content: public int Count { get; }\n    content.vb: Public ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of attributes.</p>\\n\"\n  seealso:\n  - type: System.Attribute\n    commentId: T:System.Attribute\n  implements:\n  - System.Collections.ICollection.Count\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: AttributeCollection.Count\n- uid: System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])\n  commentId: M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])\n  id: FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  - vb\n  name: FromExisting(AttributeCollection, Attribute[])\n  fullName: System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection, System.Attribute[])\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FromExisting\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n    startLine: 61\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Creates a new <xref href=\\\"System.ComponentModel.AttributeCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from an existing <xref href=\\\"System.ComponentModel.AttributeCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static AttributeCollection FromExisting(AttributeCollection existing, params Attribute[] newAttributes)\n    content.vb: Public Shared Function FromExisting(existing As AttributeCollection, ParamArray newAttributes As Attribute()) As AttributeCollection\n    parameters:\n    - id: existing\n      type: System.ComponentModel.AttributeCollection\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.AttributeCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from which to create the copy.</p>\\n\"\n    - id: newAttributes\n      type: System.Attribute[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides the attributes for this collection. Can be <strong>null</strong>.</p>\\n\"\n    return:\n      type: System.ComponentModel.AttributeCollection\n      description: \"\\n<p>A new <xref href=\\\"System.ComponentModel.AttributeCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is a copy of <em>existing</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>existing</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection, System.Attribute())\n  name.vb: FromExisting(AttributeCollection, Attribute())\n  nameWithType: AttributeCollection.FromExisting(AttributeCollection, Attribute[])\n  nameWithType.vb: AttributeCollection.FromExisting(AttributeCollection, Attribute())\n- uid: System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)\n  commentId: M:System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)\n  id: GetDefaultAttribute(System.Type)\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  - vb\n  name: GetDefaultAttribute(Type)\n  fullName: System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetDefaultAttribute\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n    startLine: 275\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns the default <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of a given <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected Attribute GetDefaultAttribute(Type attributeType)\n    content.vb: Protected Function GetDefaultAttribute(attributeType As Type) As Attribute\n    parameters:\n    - id: attributeType\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the attribute to retrieve. </p>\\n\"\n    return:\n      type: System.Attribute\n      description: \"\\n<p>The default <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of a given <em>attributeType</em>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: AttributeCollection.GetDefaultAttribute(Type)\n- uid: System.ComponentModel.AttributeCollection.GetEnumerator\n  commentId: M:System.ComponentModel.AttributeCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.ComponentModel.AttributeCollection.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEnumerator\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n    startLine: 324\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets an enumerator for this collection.</p>\\n\"\n  syntax:\n    content: public IEnumerator GetEnumerator()\n    content.vb: Public Function GetEnumerator As IEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An enumerator of type <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Attribute\n    commentId: T:System.Attribute\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: AttributeCollection.GetEnumerator()\n- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  - vb\n  name: ICollection.IsSynchronized\n  fullName: System.ComponentModel.AttributeCollection.System.Collections.ICollection.IsSynchronized\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.IsSynchronized\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n    startLine: 363\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets a value indicating whether access to the collection is synchronized (thread-safe).</p>\\n\"\n  syntax:\n    content: bool ICollection.IsSynchronized { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if access to the collection is synchronized (thread-safe); otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.IsSynchronized\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.IsSynchronized\n  nameWithType: AttributeCollection.ICollection.IsSynchronized\n  nameWithType.vb: AttributeCollection.System.Collections.ICollection.IsSynchronized\n- uid: System.ComponentModel.AttributeCollection.Matches(System.Attribute)\n  commentId: M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)\n  id: Matches(System.Attribute)\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  - vb\n  name: Matches(Attribute)\n  fullName: System.ComponentModel.AttributeCollection.Matches(System.Attribute)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Matches\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n    startLine: 333\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Determines whether a specified attribute is the same as an attribute in the collection.</p>\\n\"\n  syntax:\n    content: public bool Matches(Attribute attribute)\n    content.vb: Public Function Matches(attribute As Attribute) As Boolean\n    parameters:\n    - id: attribute\n      type: System.Attribute\n      description: \"\\n<p>An instance of <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare with the attributes in this collection. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the attribute is contained within the collection and has the same value as the attribute in the collection; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Attribute\n    commentId: T:System.Attribute\n  - type: System.ComponentModel.BrowsableAttribute\n    commentId: T:System.ComponentModel.BrowsableAttribute\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: AttributeCollection.Matches(Attribute)\n- uid: System.ComponentModel.AttributeCollection.Matches(System.Attribute[])\n  commentId: M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])\n  id: Matches(System.Attribute[])\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  - vb\n  name: Matches(Attribute[])\n  fullName: System.ComponentModel.AttributeCollection.Matches(System.Attribute[])\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Matches\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n    startLine: 349\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Determines whether the attributes in the specified array are the same as the attributes in the collection.</p>\\n\"\n  syntax:\n    content: public bool Matches(Attribute[] attributes)\n    content.vb: Public Function Matches(attributes As Attribute()) As Boolean\n    parameters:\n    - id: attributes\n      type: System.Attribute[]\n      description: \"\\n<p>An array of <xref href=\\\"System.CodeDom.MemberAttributes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare with the attributes in this collection. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if all the attributes in the array are contained in the collection and have the same values as the attributes in the collection; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Attribute\n    commentId: T:System.Attribute\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.ComponentModel.AttributeCollection.Matches(System.Attribute())\n  name.vb: Matches(Attribute())\n  nameWithType: AttributeCollection.Matches(Attribute[])\n  nameWithType.vb: AttributeCollection.Matches(Attribute())\n- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot\n  commentId: P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  - vb\n  name: ICollection.SyncRoot\n  fullName: System.ComponentModel.AttributeCollection.System.Collections.ICollection.SyncRoot\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.SyncRoot\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n    startLine: 372\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets an object that can be used to synchronize access to the collection.</p>\\n\"\n  syntax:\n    content: object ICollection.SyncRoot { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>An object that can be used to synchronize access to the collection.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.SyncRoot\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.SyncRoot\n  nameWithType: AttributeCollection.ICollection.SyncRoot\n  nameWithType.vb: AttributeCollection.System.Collections.ICollection.SyncRoot\n- uid: System.ComponentModel.AttributeCollection.Item(System.Int32)\n  commentId: P:System.ComponentModel.AttributeCollection.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  - vb\n  name: Item[Int32]\n  fullName: System.ComponentModel.AttributeCollection.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n    startLine: 149\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets the attribute with the specified index number.</p>\\n\"\n  syntax:\n    content: public virtual Attribute this[int index] { get; }\n    content.vb: Public Overridable ReadOnly Property Item(index As Integer) As Attribute\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of <xref href=\\\"System.ComponentModel.AttributeCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Attribute\n      description: \"\\n<p>The <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified index number.</p>\\n\"\n  seealso:\n  - type: System.Attribute\n    commentId: T:System.Attribute\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  fullName.vb: System.ComponentModel.AttributeCollection.Item(System.Int32)\n  name.vb: Item(Int32)\n  nameWithType: AttributeCollection.Item[Int32]\n  nameWithType.vb: AttributeCollection.Item(Int32)\n- uid: System.ComponentModel.AttributeCollection.Item(System.Type)\n  commentId: P:System.ComponentModel.AttributeCollection.Item(System.Type)\n  id: Item(System.Type)\n  parent: System.ComponentModel.AttributeCollection\n  langs:\n  - csharp\n  - vb\n  name: Item[Type]\n  fullName: System.ComponentModel.AttributeCollection.Item[System.Type]\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs\n    startLine: 160\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets the attribute with the specified type.</p>\\n\"\n  syntax:\n    content: public virtual Attribute this[Type attributeType] { get; }\n    content.vb: Public Overridable ReadOnly Property Item(attributeType As Type) As Attribute\n    parameters:\n    - id: attributeType\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to get from the collection. </p>\\n\"\n    return:\n      type: System.Attribute\n      description: \"\\n<p>The <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified type or, if the attribute does not exist, the default value for the attribute type.</p>\\n\"\n  seealso:\n  - type: System.Attribute\n    commentId: T:System.Attribute\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  fullName.vb: System.ComponentModel.AttributeCollection.Item(System.Type)\n  name.vb: Item(Type)\n  nameWithType: AttributeCollection.Item[Type]\n  nameWithType.vb: AttributeCollection.Item(Type)\nreferences:\n- uid: System.ComponentModel\n  isExternal: false\n  name: System.ComponentModel\n  fullName: System.ComponentModel\n  nameWithType: System.ComponentModel\n  commentId: N:System.ComponentModel\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  nameWithType: ICollection\n  commentId: T:System.Collections.ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable()\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel()\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  nameWithType: Queryable\n  commentId: T:System.Linq.Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  nameWithType: Enumerable\n  commentId: T:System.Linq.Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  nameWithType: System.Linq\n  commentId: N:System.Linq\n- uid: System.ComponentModel.AttributeCollection\n  parent: System.ComponentModel\n  isExternal: false\n  name: AttributeCollection\n  fullName: System.ComponentModel.AttributeCollection\n  nameWithType: AttributeCollection\n  commentId: T:System.ComponentModel.AttributeCollection\n- uid: System.Attribute[]\n  name: Attribute[]\n  fullName: System.Attribute[]\n  fullname.vb: System.Attribute()\n  name.vb: Attribute()\n  spec.csharp:\n  - uid: System.Attribute\n    name: Attribute\n    fullName: System.Attribute\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Attribute\n    name: Attribute\n    fullName: System.Attribute\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Attribute[]\n  nameWithType.vb: Attribute()\n- uid: System.Attribute\n  parent: System\n  isExternal: false\n  name: Attribute\n  fullName: System.Attribute\n  nameWithType: Attribute\n  commentId: T:System.Attribute\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ICollection\n  isExternal: true\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  spec.csharp:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection.CopyTo(Array, Int32)\n  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  nameWithType: Array\n  commentId: T:System.Array\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Collections.ICollection.Count\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: Count\n  fullName: System.Collections.ICollection.Count\n  nameWithType: ICollection.Count\n  commentId: P:System.Collections.ICollection.Count\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable.GetEnumerator()\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.Collections.ICollection.IsSynchronized\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Collections.ICollection.IsSynchronized\n  nameWithType: ICollection.IsSynchronized\n  commentId: P:System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.ICollection.SyncRoot\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Collections.ICollection.SyncRoot\n  nameWithType: ICollection.SyncRoot\n  commentId: P:System.Collections.ICollection.SyncRoot\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}