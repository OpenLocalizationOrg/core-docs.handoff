{"nodes":[{"pos":[564,585],"content":"KeyTransRecipientInfo","needQuote":true,"nodes":[{"content":"KeyTransRecipientInfo","pos":[0,21]}]},{"pos":[2884,2896],"content":"EncryptedKey","needQuote":true,"nodes":[{"content":"EncryptedKey","pos":[0,12]}]},{"content":"\\n&lt;p&gt;An array of byte values that represents the encrypted key.&lt;/p&gt;\\n","pos":[3853,3922],"source":"\\n<p>An array of byte values that represents the encrypted key.</p>\\n"},{"pos":[4996,5018],"content":"KeyEncryptionAlgorithm","needQuote":true,"nodes":[{"content":"KeyEncryptionAlgorithm","pos":[0,22]}]},{"pos":[7367,7386],"content":"RecipientIdentifier","needQuote":true,"nodes":[{"content":"RecipientIdentifier","pos":[0,19]}]},{"pos":[9690,9697],"content":"Version","needQuote":true,"nodes":[{"content":"Version","pos":[0,7]}]},{"pos":[11830,11863],"content":"System.Security.Cryptography.Pkcs","needQuote":true,"nodes":[{"content":"System.Security.Cryptography.Pkcs","pos":[0,33]}]},{"pos":[12075,12081],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12287,12300],"content":"RecipientInfo","needQuote":true,"nodes":[{"content":"RecipientInfo","pos":[0,13]}]},{"pos":[12600,12604],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[12854,12864],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[12959,12967],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[13036,13037],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13064,13065],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13135,13143],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[13212,13213],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13240,13241],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13424,13438],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[13557,13563],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13630,13631],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13681,13687],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13747,13748],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13831,13837],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13904,13905],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13955,13961],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14021,14022],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14236,14258],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[14406,14412],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14479,14480],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14530,14536],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14597,14598]},{"pos":[14653,14659],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14719,14720],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14817,14823],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14890,14891],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14941,14947],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15008,15009]},{"pos":[15064,15070],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15130,15131],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15376,15407],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[15573,15588],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[15664,15665],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15715,15721],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15782,15783]},{"pos":[15838,15844],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15904,15905],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16011,16026],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[16102,16103],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16153,16159],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16220,16221]},{"pos":[16276,16282],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16342,16343],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16573,16586],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[16687,16698],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[16770,16771],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16798,16799],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16872,16883],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[16955,16956],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16983,16984],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17159,17168],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[17261,17268],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[17336,17337],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17364,17365],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17434,17441],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[17509,17510],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17537,17538],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17713,17730],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[17839,17854],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[17930,17931],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17958,17959],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18036,18051],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[18127,18128],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18155,18156],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18301,18307],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[18526,18538],"content":"EncryptedKey","needQuote":true,"nodes":[{"content":"EncryptedKey","pos":[0,12]}]},{"pos":[18760,18766],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[18886,18890],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[18949,18951]},{"pos":[19014,19018],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[19076,19078],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[19309,19331],"content":"KeyEncryptionAlgorithm","needQuote":true,"nodes":[{"content":"KeyEncryptionAlgorithm","pos":[0,22]}]},{"pos":[19687,19706],"content":"AlgorithmIdentifier","needQuote":true,"nodes":[{"content":"AlgorithmIdentifier","pos":[0,19]}]},{"pos":[20039,20058],"content":"RecipientIdentifier","needQuote":true,"nodes":[{"content":"RecipientIdentifier","pos":[0,19]}]},{"pos":[20403,20420],"content":"SubjectIdentifier","needQuote":true,"nodes":[{"content":"SubjectIdentifier","pos":[0,17]}]},{"pos":[20735,20742],"content":"Version","needQuote":true,"nodes":[{"content":"Version","pos":[0,7]}]},{"pos":[20985,20990],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]}],"content":"items:\n- uid: System.Security.Cryptography.Pkcs.KeyTransRecipientInfo\n  commentId: T:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo\n  id: KeyTransRecipientInfo\n  parent: System.Security.Cryptography.Pkcs\n  children:\n  - System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.EncryptedKey\n  - System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.KeyEncryptionAlgorithm\n  - System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.RecipientIdentifier\n  - System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.Version\n  langs:\n  - csharp\n  - vb\n  name: KeyTransRecipientInfo\n  fullName: System.Security.Cryptography.Pkcs.KeyTransRecipientInfo\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: KeyTransRecipientInfo\n    path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n    startLine: 121\n  assemblies:\n  - System.Security.Cryptography.Pkcs\n  namespace: System.Security.Cryptography.Pkcs\n  summary: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.Pkcs.KeyTransRecipientInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class defines key transport recipient information.        Key transport algorithms typically use the RSA algorithm, in which  an originator establishes a shared cryptographic key with a recipient by generating that key and  then transporting it to the recipient. This is in contrast to key agreement algorithms, in which the two parties that will be using a cryptographic key both take part in its generation, thereby mutually agreeing to that key.</p>\\n\"\n  syntax:\n    content: 'public sealed class KeyTransRecipientInfo : RecipientInfo'\n    content.vb: >-\n      Public NotInheritable Class KeyTransRecipientInfo\n          Inherits RecipientInfo\n  seealso:\n  - type: System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo\n    commentId: T:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.Pkcs.RecipientInfo\n  inheritedMembers:\n  - System.Security.Cryptography.Pkcs.RecipientInfo.Type\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: KeyTransRecipientInfo\n- uid: System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.EncryptedKey\n  commentId: P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.EncryptedKey\n  id: EncryptedKey\n  parent: System.Security.Cryptography.Pkcs.KeyTransRecipientInfo\n  langs:\n  - csharp\n  - vb\n  name: EncryptedKey\n  fullName: System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.EncryptedKey\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EncryptedKey\n    path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n    startLine: 124\n  assemblies:\n  - System.Security.Cryptography.Pkcs\n  namespace: System.Security.Cryptography.Pkcs\n  summary: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.EncryptedKey\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property retrieves the encrypted key for this key transport recipient.</p>\\n\"\n  syntax:\n    content: public override byte[] EncryptedKey { get; }\n    content.vb: Public Overrides ReadOnly Property EncryptedKey As Byte()\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>An array of byte values that represents the encrypted key.</p>\\n\"\n  overridden: System.Security.Cryptography.Pkcs.RecipientInfo.EncryptedKey\n  seealso:\n  - type: System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.KeyEncryptionAlgorithm\n    commentId: P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.KeyEncryptionAlgorithm\n  - type: System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.RecipientIdentifier\n    commentId: P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.RecipientIdentifier\n  - type: System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.Version\n    commentId: P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.Version\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: KeyTransRecipientInfo.EncryptedKey\n- uid: System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.KeyEncryptionAlgorithm\n  commentId: P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.KeyEncryptionAlgorithm\n  id: KeyEncryptionAlgorithm\n  parent: System.Security.Cryptography.Pkcs.KeyTransRecipientInfo\n  langs:\n  - csharp\n  - vb\n  name: KeyEncryptionAlgorithm\n  fullName: System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.KeyEncryptionAlgorithm\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: KeyEncryptionAlgorithm\n    path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n    startLine: 125\n  assemblies:\n  - System.Security.Cryptography.Pkcs\n  namespace: System.Security.Cryptography.Pkcs\n  summary: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.KeyEncryptionAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property retrieves the key encryption algorithm used to encrypt the content encryption key.</p>\\n\"\n  syntax:\n    content: public override AlgorithmIdentifier KeyEncryptionAlgorithm { get; }\n    content.vb: Public Overrides ReadOnly Property KeyEncryptionAlgorithm As AlgorithmIdentifier\n    parameters: []\n    return:\n      type: System.Security.Cryptography.Pkcs.AlgorithmIdentifier\n      description: \"\\n<p> An  <xref href=\\\"System.Security.Cryptography.Pkcs.AlgorithmIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  object that stores the key encryption algorithm identifier.</p>\\n\"\n  overridden: System.Security.Cryptography.Pkcs.RecipientInfo.KeyEncryptionAlgorithm\n  seealso:\n  - type: System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.EncryptedKey\n    commentId: P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.EncryptedKey\n  - type: System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.RecipientIdentifier\n    commentId: P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.RecipientIdentifier\n  - type: System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.Version\n    commentId: P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.Version\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: KeyTransRecipientInfo.KeyEncryptionAlgorithm\n- uid: System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.RecipientIdentifier\n  commentId: P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.RecipientIdentifier\n  id: RecipientIdentifier\n  parent: System.Security.Cryptography.Pkcs.KeyTransRecipientInfo\n  langs:\n  - csharp\n  - vb\n  name: RecipientIdentifier\n  fullName: System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.RecipientIdentifier\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RecipientIdentifier\n    path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n    startLine: 126\n  assemblies:\n  - System.Security.Cryptography.Pkcs\n  namespace: System.Security.Cryptography.Pkcs\n  summary: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.RecipientIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property retrieves the subject identifier associated with the encrypted content.</p>\\n\"\n  syntax:\n    content: public override SubjectIdentifier RecipientIdentifier { get; }\n    content.vb: Public Overrides ReadOnly Property RecipientIdentifier As SubjectIdentifier\n    parameters: []\n    return:\n      type: System.Security.Cryptography.Pkcs.SubjectIdentifier\n      description: \"\\n<p>A   <xref href=\\\"System.Security.Cryptography.Pkcs.SubjectIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  object that  stores the identifier of the recipient taking part in the key transport.</p>\\n\"\n  overridden: System.Security.Cryptography.Pkcs.RecipientInfo.RecipientIdentifier\n  seealso:\n  - type: System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.EncryptedKey\n    commentId: P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.EncryptedKey\n  - type: System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.KeyEncryptionAlgorithm\n    commentId: P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.KeyEncryptionAlgorithm\n  - type: System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.Version\n    commentId: P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.Version\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: KeyTransRecipientInfo.RecipientIdentifier\n- uid: System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.Version\n  commentId: P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.Version\n  id: Version\n  parent: System.Security.Cryptography.Pkcs.KeyTransRecipientInfo\n  langs:\n  - csharp\n  - vb\n  name: Version\n  fullName: System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.Version\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Version\n    path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n    startLine: 127\n  assemblies:\n  - System.Security.Cryptography.Pkcs\n  namespace: System.Security.Cryptography.Pkcs\n  summary: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property retrieves the version of the key transport recipient. The version of the key transport recipient is automatically set for  objects in this class, and the value  implies that the recipient is taking part in a key transport algorithm.</p>\\n\"\n  syntax:\n    content: public override int Version { get; }\n    content.vb: Public Overrides ReadOnly Property Version As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>An int value that represents the version of the key transport <xref href=\\\"System.Security.Cryptography.Pkcs.RecipientInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Security.Cryptography.Pkcs.RecipientInfo.Version\n  seealso:\n  - type: System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.EncryptedKey\n    commentId: P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.EncryptedKey\n  - type: System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.KeyEncryptionAlgorithm\n    commentId: P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.KeyEncryptionAlgorithm\n  - type: System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.RecipientIdentifier\n    commentId: P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.RecipientIdentifier\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: KeyTransRecipientInfo.Version\nreferences:\n- uid: System.Security.Cryptography.Pkcs\n  isExternal: false\n  name: System.Security.Cryptography.Pkcs\n  fullName: System.Security.Cryptography.Pkcs\n  commentId: N:System.Security.Cryptography.Pkcs\n  nameWithType: System.Security.Cryptography.Pkcs\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.Cryptography.Pkcs.RecipientInfo\n  parent: System.Security.Cryptography.Pkcs\n  isExternal: false\n  name: RecipientInfo\n  fullName: System.Security.Cryptography.Pkcs.RecipientInfo\n  commentId: T:System.Security.Cryptography.Pkcs.RecipientInfo\n  nameWithType: RecipientInfo\n- uid: System.Security.Cryptography.Pkcs.RecipientInfo.Type\n  parent: System.Security.Cryptography.Pkcs.RecipientInfo\n  isExternal: false\n  name: Type\n  fullName: System.Security.Cryptography.Pkcs.RecipientInfo.Type\n  commentId: P:System.Security.Cryptography.Pkcs.RecipientInfo.Type\n  nameWithType: RecipientInfo.Type\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.Cryptography.Pkcs.RecipientInfo.EncryptedKey\n  parent: System.Security.Cryptography.Pkcs.RecipientInfo\n  isExternal: false\n  name: EncryptedKey\n  fullName: System.Security.Cryptography.Pkcs.RecipientInfo.EncryptedKey\n  commentId: P:System.Security.Cryptography.Pkcs.RecipientInfo.EncryptedKey\n  nameWithType: RecipientInfo.EncryptedKey\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Security.Cryptography.Pkcs.RecipientInfo.KeyEncryptionAlgorithm\n  parent: System.Security.Cryptography.Pkcs.RecipientInfo\n  isExternal: false\n  name: KeyEncryptionAlgorithm\n  fullName: System.Security.Cryptography.Pkcs.RecipientInfo.KeyEncryptionAlgorithm\n  commentId: P:System.Security.Cryptography.Pkcs.RecipientInfo.KeyEncryptionAlgorithm\n  nameWithType: RecipientInfo.KeyEncryptionAlgorithm\n- uid: System.Security.Cryptography.Pkcs.AlgorithmIdentifier\n  parent: System.Security.Cryptography.Pkcs\n  isExternal: false\n  name: AlgorithmIdentifier\n  fullName: System.Security.Cryptography.Pkcs.AlgorithmIdentifier\n  commentId: T:System.Security.Cryptography.Pkcs.AlgorithmIdentifier\n  nameWithType: AlgorithmIdentifier\n- uid: System.Security.Cryptography.Pkcs.RecipientInfo.RecipientIdentifier\n  parent: System.Security.Cryptography.Pkcs.RecipientInfo\n  isExternal: false\n  name: RecipientIdentifier\n  fullName: System.Security.Cryptography.Pkcs.RecipientInfo.RecipientIdentifier\n  commentId: P:System.Security.Cryptography.Pkcs.RecipientInfo.RecipientIdentifier\n  nameWithType: RecipientInfo.RecipientIdentifier\n- uid: System.Security.Cryptography.Pkcs.SubjectIdentifier\n  parent: System.Security.Cryptography.Pkcs\n  isExternal: false\n  name: SubjectIdentifier\n  fullName: System.Security.Cryptography.Pkcs.SubjectIdentifier\n  commentId: T:System.Security.Cryptography.Pkcs.SubjectIdentifier\n  nameWithType: SubjectIdentifier\n- uid: System.Security.Cryptography.Pkcs.RecipientInfo.Version\n  parent: System.Security.Cryptography.Pkcs.RecipientInfo\n  isExternal: false\n  name: Version\n  fullName: System.Security.Cryptography.Pkcs.RecipientInfo.Version\n  commentId: P:System.Security.Cryptography.Pkcs.RecipientInfo.Version\n  nameWithType: RecipientInfo.Version\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n"}