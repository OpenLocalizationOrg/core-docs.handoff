{"nodes":[{"pos":[40351,40361],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[41810,41822],"content":"Expression()","needQuote":true,"nodes":[{"content":"Expression()","pos":[0,12]}]},{"pos":[42788,42797],"content":"CanReduce","needQuote":true,"nodes":[{"content":"CanReduce","pos":[0,9]}]},{"content":"\\n&lt;p&gt;True if the node can be reduced, otherwise false.&lt;/p&gt;\\n","pos":[43590,43650],"source":"\\n<p>True if the node can be reduced, otherwise false.</p>\\n"},{"pos":[44001,44009],"content":"NodeType","needQuote":true,"nodes":[{"content":"NodeType","pos":[0,8]}]},{"pos":[45296,45300],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[46697,46722],"content":"Accept(ExpressionVisitor)","needQuote":true,"nodes":[{"content":"Accept(ExpressionVisitor)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The visitor to visit this node with.&lt;/p&gt;\\n","pos":[47849,47896],"source":"\\n<p>The visitor to visit this node with.</p>\\n"},{"content":"\\n&lt;p&gt;The result of visiting this node.&lt;/p&gt;\\n","pos":[47977,48021],"source":"\\n<p>The result of visiting this node.</p>\\n"},{"pos":[48571,48598],"content":"Add(Expression, Expression)","needQuote":true,"nodes":[{"content":"Add(Expression, Expression)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[50990,51060],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The addition operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[51173,51268],"source":"\\n<p>The addition operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[51895,51934],"content":"Add(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"Add(Expression, Expression, MethodInfo)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[54867,54937],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\\n","pos":[55034,55265],"source":"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the addition operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[55378,55520],"source":"\\n<p>\\n<em>method</em> is <strong>null</strong> and the addition operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[56090,56123],"content":"AddAssign(Expression, Expression)","needQuote":true,"nodes":[{"content":"AddAssign(Expression, Expression)","pos":[0,33]}]},{"pos":[59079,59124],"content":"AddAssign(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"AddAssign(Expression, Expression, MethodInfo)","pos":[0,45]}]},{"pos":[62715,62778],"content":"AddAssign(Expression, Expression, MethodInfo, LambdaExpression)","needQuote":true,"nodes":[{"content":"AddAssign(Expression, Expression, MethodInfo, LambdaExpression)","pos":[0,63]}]},{"pos":[66765,66805],"content":"AddAssignChecked(Expression, Expression)","needQuote":true,"nodes":[{"content":"AddAssignChecked(Expression, Expression)","pos":[0,40]}]},{"pos":[69814,69866],"content":"AddAssignChecked(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"AddAssignChecked(Expression, Expression, MethodInfo)","pos":[0,52]}]},{"pos":[73510,73580],"content":"AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)","needQuote":true,"nodes":[{"content":"AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)","pos":[0,70]}]},{"pos":[77581,77615],"content":"AddChecked(Expression, Expression)","needQuote":true,"nodes":[{"content":"AddChecked(Expression, Expression)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[80032,80102],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The addition operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[80215,80310],"source":"\\n<p>The addition operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[80965,81011],"content":"AddChecked(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"AddChecked(Expression, Expression, MethodInfo)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[83969,84039],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\\n","pos":[84136,84367],"source":"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the addition operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[84480,84622],"source":"\\n<p>\\n<em>method</em> is <strong>null</strong> and the addition operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[85181,85208],"content":"And(Expression, Expression)","needQuote":true,"nodes":[{"content":"And(Expression, Expression)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[87571,87641],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The bitwise &lt;strong&gt;AND&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[87754,87869],"source":"\\n<p>The bitwise <strong>AND</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[88496,88535],"content":"And(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"And(Expression, Expression, MethodInfo)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[91442,91512],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\\n","pos":[91609,91840],"source":"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the bitwise &lt;strong&gt;AND&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[91953,92115],"source":"\\n<p>\\n<em>method</em> is <strong>null</strong> and the bitwise <strong>AND</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[92679,92710],"content":"AndAlso(Expression, Expression)","needQuote":true,"nodes":[{"content":"AndAlso(Expression, Expression)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[95192,95262],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The bitwise &lt;strong&gt;AND&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type are not the same Boolean type.&lt;/p&gt;\\n","pos":[95375,95587],"source":"\\n<p>The bitwise <strong>AND</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n<p>-or-</p>\\n<p>\\n<em>left</em>.Type and <em>right</em>.Type are not the same Boolean type.</p>\\n"},{"pos":[96230,96273],"content":"AndAlso(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"AndAlso(Expression, Expression, MethodInfo)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[99282,99352],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\\n","pos":[99449,99680],"source":"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the bitwise &lt;strong&gt;AND&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type are not the same Boolean type.&lt;/p&gt;\\n","pos":[99793,100097],"source":"\\n<p>\\n<em>method</em> is <strong>null</strong> and the bitwise <strong>AND</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n<p>-or-</p>\\n<p>\\n<em>method</em> is <strong>null</strong> and <em>left</em>.Type and <em>right</em>.Type are not the same Boolean type.</p>\\n"},{"pos":[100671,100704],"content":"AndAssign(Expression, Expression)","needQuote":true,"nodes":[{"content":"AndAssign(Expression, Expression)","pos":[0,33]}]},{"pos":[103625,103670],"content":"AndAssign(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"AndAssign(Expression, Expression, MethodInfo)","pos":[0,45]}]},{"pos":[107226,107289],"content":"AndAssign(Expression, Expression, MethodInfo, LambdaExpression)","needQuote":true,"nodes":[{"content":"AndAssign(Expression, Expression, MethodInfo, LambdaExpression)","pos":[0,63]}]},{"pos":[111346,111394],"content":"ArrayAccess(Expression, IEnumerable<Expression>)","needQuote":true,"nodes":[{"content":"ArrayAccess(Expression, IEnumerable&lt;Expression&gt;)","pos":[0,48],"source":"ArrayAccess(Expression, IEnumerable<Expression>)"}]},{"content":"\\n&lt;p&gt;An expression that represents the multidimensional array.&lt;/p&gt;\\n","pos":[112447,112515],"source":"\\n<p>An expression that represents the multidimensional array.</p>\\n"},{"pos":[113926,113963],"content":"ArrayAccess(Expression, Expression[])","needQuote":true,"nodes":[{"content":"ArrayAccess(Expression, Expression[])","pos":[0,37]}]},{"content":"\\n&lt;p&gt;An expression representing the array to index.&lt;/p&gt;\\n","pos":[114955,115012],"source":"\\n<p>An expression representing the array to index.</p>\\n"},{"content":"\\n&lt;p&gt;An array that contains expressions used to index the array.&lt;/p&gt;\\n","pos":[115101,115171],"source":"\\n<p>An array that contains expressions used to index the array.</p>\\n"},{"pos":[116324,116371],"content":"ArrayIndex(Expression, IEnumerable<Expression>)","needQuote":true,"nodes":[{"content":"ArrayIndex(Expression, IEnumerable&lt;Expression&gt;)","pos":[0,47],"source":"ArrayIndex(Expression, IEnumerable<Expression>)"}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; or &lt;em&gt;indexes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[119085,119158],"source":"\\n<p>\\n<em>array</em> or <em>indexes</em> is <strong>null</strong>.</p>\\n"},{"pos":[120613,120647],"content":"ArrayIndex(Expression, Expression)","needQuote":true,"nodes":[{"content":"ArrayIndex(Expression, Expression)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; or &lt;em&gt;index&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[123064,123135],"source":"\\n<p>\\n<em>array</em> or <em>index</em> is <strong>null</strong>.</p>\\n"},{"pos":[124106,124142],"content":"ArrayIndex(Expression, Expression[])","needQuote":true,"nodes":[{"content":"ArrayIndex(Expression, Expression[])","pos":[0,36]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; or &lt;em&gt;indexes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[126579,126652],"source":"\\n<p>\\n<em>array</em> or <em>indexes</em> is <strong>null</strong>.</p>\\n"},{"pos":[127925,127948],"content":"ArrayLength(Expression)","needQuote":true,"nodes":[{"content":"ArrayLength(Expression)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[129858,129911],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt;.Type does not represent an array type.&lt;/p&gt;\\n","pos":[130008,130074],"source":"\\n<p>\\n<em>array</em>.Type does not represent an array type.</p>\\n"},{"pos":[130619,130649],"content":"Assign(Expression, Expression)","needQuote":true,"nodes":[{"content":"Assign(Expression, Expression)","pos":[0,30]}]},{"pos":[133421,133449],"content":"Bind(MemberInfo, Expression)","needQuote":true,"nodes":[{"content":"Bind(MemberInfo, Expression)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;member&lt;/em&gt; or &lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[135832,135909],"source":"\\n<p>\\n<em>member</em> or <em>expression</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;member&lt;/em&gt; does not represent a field or property.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The property represented by &lt;em&gt;member&lt;/em&gt; does not have a &lt;strong&gt;set&lt;/strong&gt; accessor.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt;.Type is not assignable to the type of the field or property that &lt;em&gt;member&lt;/em&gt; represents.&lt;/p&gt;\\n","pos":[136006,136322],"source":"\\n<p>\\n<em>member</em> does not represent a field or property.</p>\\n<p>-or-</p>\\n<p>The property represented by <em>member</em> does not have a <strong>set</strong> accessor.</p>\\n<p>-or-</p>\\n<p>\\n<em>expression</em>.Type is not assignable to the type of the field or property that <em>member</em> represents.</p>\\n"},{"pos":[136848,136876],"content":"Bind(MethodInfo, Expression)","needQuote":true,"nodes":[{"content":"Bind(MethodInfo, Expression)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;propertyAccessor&lt;/em&gt; or &lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[139413,139500],"source":"\\n<p>\\n<em>propertyAccessor</em> or <em>expression</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;propertyAccessor&lt;/em&gt; does not represent a property accessor method.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The property accessed by &lt;em&gt;propertyAccessor&lt;/em&gt; does not have a &lt;strong&gt;set&lt;/strong&gt; accessor.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt;.Type is not assignable to the type of the field or property that &lt;em&gt;member&lt;/em&gt; represents.&lt;/p&gt;\\n","pos":[139597,139937],"source":"\\n<p>\\n<em>propertyAccessor</em> does not represent a property accessor method.</p>\\n<p>-or-</p>\\n<p>The property accessed by <em>propertyAccessor</em> does not have a <strong>set</strong> accessor.</p>\\n<p>-or-</p>\\n<p>\\n<em>expression</em>.Type is not assignable to the type of the field or property that <em>member</em> represents.</p>\\n"},{"pos":[140499,140529],"content":"Block(IEnumerable<Expression>)","needQuote":true,"nodes":[{"content":"Block(IEnumerable&lt;Expression&gt;)","pos":[0,30],"source":"Block(IEnumerable<Expression>)"}]},{"content":"\\n&lt;p&gt;The expressions in the block.&lt;/p&gt;\\n","pos":[141558,141598],"source":"\\n<p>The expressions in the block.</p>\\n"},{"pos":[142867,142931],"content":"Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>)","needQuote":true,"nodes":[{"content":"Block(IEnumerable&lt;ParameterExpression&gt;, IEnumerable&lt;Expression&gt;)","pos":[0,64],"source":"Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>)"}]},{"content":"\\n&lt;p&gt;The variables in the block.&lt;/p&gt;\\n","pos":[144139,144177],"source":"\\n<p>The variables in the block.</p>\\n"},{"content":"\\n&lt;p&gt;The expressions in the block.&lt;/p&gt;\\n","pos":[144308,144348],"source":"\\n<p>The expressions in the block.</p>\\n"},{"pos":[145699,145752],"content":"Block(IEnumerable<ParameterExpression>, Expression[])","needQuote":true,"nodes":[{"content":"Block(IEnumerable&lt;ParameterExpression&gt;, Expression[])","pos":[0,53],"source":"Block(IEnumerable<ParameterExpression>, Expression[])"}]},{"content":"\\n&lt;p&gt;The variables in the block.&lt;/p&gt;\\n","pos":[146915,146953],"source":"\\n<p>The variables in the block.</p>\\n"},{"content":"\\n&lt;p&gt;The expressions in the block.&lt;/p&gt;\\n","pos":[147046,147086],"source":"\\n<p>The expressions in the block.</p>\\n"},{"pos":[148204,148233],"content":"Block(Expression, Expression)","needQuote":true,"nodes":[{"content":"Block(Expression, Expression)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The first expression in the block.&lt;/p&gt;\\n","pos":[149199,149244],"source":"\\n<p>The first expression in the block.</p>\\n"},{"content":"\\n&lt;p&gt;The second expression in the block.&lt;/p&gt;\\n","pos":[149328,149374],"source":"\\n<p>The second expression in the block.</p>\\n"},{"pos":[150236,150277],"content":"Block(Expression, Expression, Expression)","needQuote":true,"nodes":[{"content":"Block(Expression, Expression, Expression)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;The first expression in the block.&lt;/p&gt;\\n","pos":[151318,151363],"source":"\\n<p>The first expression in the block.</p>\\n"},{"content":"\\n&lt;p&gt;The second expression in the block.&lt;/p&gt;\\n","pos":[151447,151493],"source":"\\n<p>The second expression in the block.</p>\\n"},{"content":"\\n&lt;p&gt;The third expression in the block.&lt;/p&gt;\\n","pos":[151577,151622],"source":"\\n<p>The third expression in the block.</p>\\n"},{"pos":[152601,152654],"content":"Block(Expression, Expression, Expression, Expression)","needQuote":true,"nodes":[{"content":"Block(Expression, Expression, Expression, Expression)","pos":[0,53]}]},{"content":"\\n&lt;p&gt;The first expression in the block.&lt;/p&gt;\\n","pos":[153767,153812],"source":"\\n<p>The first expression in the block.</p>\\n"},{"content":"\\n&lt;p&gt;The second expression in the block.&lt;/p&gt;\\n","pos":[153896,153942],"source":"\\n<p>The second expression in the block.</p>\\n"},{"content":"\\n&lt;p&gt;The third expression in the block.&lt;/p&gt;\\n","pos":[154026,154071],"source":"\\n<p>The third expression in the block.</p>\\n"},{"content":"\\n&lt;p&gt;The fourth expression in the block.&lt;/p&gt;\\n","pos":[154155,154201],"source":"\\n<p>The fourth expression in the block.</p>\\n"},{"pos":[155297,155362],"content":"Block(Expression, Expression, Expression, Expression, Expression)","needQuote":true,"nodes":[{"content":"Block(Expression, Expression, Expression, Expression, Expression)","pos":[0,65]}]},{"content":"\\n&lt;p&gt;The first expression in the block.&lt;/p&gt;\\n","pos":[156548,156593],"source":"\\n<p>The first expression in the block.</p>\\n"},{"content":"\\n&lt;p&gt;The second expression in the block.&lt;/p&gt;\\n","pos":[156677,156723],"source":"\\n<p>The second expression in the block.</p>\\n"},{"content":"\\n&lt;p&gt;The third expression in the block.&lt;/p&gt;\\n","pos":[156807,156852],"source":"\\n<p>The third expression in the block.</p>\\n"},{"content":"\\n&lt;p&gt;The fourth expression in the block.&lt;/p&gt;\\n","pos":[156936,156982],"source":"\\n<p>The fourth expression in the block.</p>\\n"},{"content":"\\n&lt;p&gt;The fifth expression in the block.&lt;/p&gt;\\n","pos":[157066,157111],"source":"\\n<p>The fifth expression in the block.</p>\\n"},{"pos":[157805,157824],"content":"Block(Expression[])","needQuote":true,"nodes":[{"content":"Block(Expression[])","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The expressions in the block.&lt;/p&gt;\\n","pos":[158770,158810],"source":"\\n<p>The expressions in the block.</p>\\n"},{"pos":[159783,159819],"content":"Block(Type, IEnumerable<Expression>)","needQuote":true,"nodes":[{"content":"Block(Type, IEnumerable&lt;Expression&gt;)","pos":[0,36],"source":"Block(Type, IEnumerable<Expression>)"}]},{"content":"\\n&lt;p&gt;The result type of the block.&lt;/p&gt;\\n","pos":[160842,160882],"source":"\\n<p>The result type of the block.</p>\\n"},{"content":"\\n&lt;p&gt;The expressions in the block.&lt;/p&gt;\\n","pos":[161013,161053],"source":"\\n<p>The expressions in the block.</p>\\n"},{"pos":[162389,162459],"content":"Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>)","needQuote":true,"nodes":[{"content":"Block(Type, IEnumerable&lt;ParameterExpression&gt;, IEnumerable&lt;Expression&gt;)","pos":[0,70],"source":"Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>)"}]},{"content":"\\n&lt;p&gt;The result type of the block.&lt;/p&gt;\\n","pos":[163628,163668],"source":"\\n<p>The result type of the block.</p>\\n"},{"content":"\\n&lt;p&gt;The variables in the block.&lt;/p&gt;\\n","pos":[163806,163844],"source":"\\n<p>The variables in the block.</p>\\n"},{"content":"\\n&lt;p&gt;The expressions in the block.&lt;/p&gt;\\n","pos":[163975,164015],"source":"\\n<p>The expressions in the block.</p>\\n"},{"pos":[165433,165492],"content":"Block(Type, IEnumerable<ParameterExpression>, Expression[])","needQuote":true,"nodes":[{"content":"Block(Type, IEnumerable&lt;ParameterExpression&gt;, Expression[])","pos":[0,59],"source":"Block(Type, IEnumerable<ParameterExpression>, Expression[])"}]},{"content":"\\n&lt;p&gt;The result type of the block.&lt;/p&gt;\\n","pos":[166616,166656],"source":"\\n<p>The result type of the block.</p>\\n"},{"content":"\\n&lt;p&gt;The variables in the block.&lt;/p&gt;\\n","pos":[166794,166832],"source":"\\n<p>The variables in the block.</p>\\n"},{"content":"\\n&lt;p&gt;The expressions in the block.&lt;/p&gt;\\n","pos":[166925,166965],"source":"\\n<p>The expressions in the block.</p>\\n"},{"pos":[168051,168076],"content":"Block(Type, Expression[])","needQuote":true,"nodes":[{"content":"Block(Type, Expression[])","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The result type of the block.&lt;/p&gt;\\n","pos":[169054,169094],"source":"\\n<p>The result type of the block.</p>\\n"},{"content":"\\n&lt;p&gt;The expressions in the block.&lt;/p&gt;\\n","pos":[169187,169227],"source":"\\n<p>The expressions in the block.</p>\\n"},{"pos":[170078,170096],"content":"Break(LabelTarget)","needQuote":true,"nodes":[{"content":"Break(LabelTarget)","pos":[0,18]}]},{"pos":[172276,172306],"content":"Break(LabelTarget, Expression)","needQuote":true,"nodes":[{"content":"Break(LabelTarget, Expression)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The value that will be passed to the associated label upon jumping.&lt;/p&gt;\\n","pos":[173639,173717],"source":"\\n<p>The value that will be passed to the associated label upon jumping.</p>\\n"},{"pos":[174835,174871],"content":"Break(LabelTarget, Expression, Type)","needQuote":true,"nodes":[{"content":"Break(LabelTarget, Expression, Type)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The value that will be passed to the associated label upon jumping.&lt;/p&gt;\\n","pos":[176266,176344],"source":"\\n<p>The value that will be passed to the associated label upon jumping.</p>\\n"},{"pos":[177774,177798],"content":"Break(LabelTarget, Type)","needQuote":true,"nodes":[{"content":"Break(LabelTarget, Type)","pos":[0,24]}]},{"pos":[180373,180401],"content":"Call(Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"Call(Expression, MethodInfo)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;instance&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and &lt;em&gt;method&lt;/em&gt; represents an instance method.&lt;/p&gt;\\n","pos":[182834,183005],"source":"\\n<p>\\n<em>method</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>instance</em> is <strong>null</strong> and <em>method</em> represents an instance method.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;instance&lt;/em&gt;.Type is not assignable to the declaring type of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\\n","pos":[183102,183223],"source":"\\n<p>\\n<em>instance</em>.Type is not assignable to the declaring type of the method represented by <em>method</em>.</p>\\n"},{"pos":[183974,184027],"content":"Call(Expression, MethodInfo, IEnumerable<Expression>)","needQuote":true,"nodes":[{"content":"Call(Expression, MethodInfo, IEnumerable&lt;Expression&gt;)","pos":[0,53],"source":"Call(Expression, MethodInfo, IEnumerable<Expression>)"}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;instance&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and &lt;em&gt;method&lt;/em&gt; represents an instance method.&lt;/p&gt;\\n","pos":[187321,187492],"source":"\\n<p>\\n<em>method</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>instance</em> is <strong>null</strong> and <em>method</em> represents an instance method.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;instance&lt;/em&gt;.Type is not assignable to the declaring type of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The number of elements in &lt;em&gt;arguments&lt;/em&gt; does not equal the number of parameters for the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;One or more of the elements of &lt;em&gt;arguments&lt;/em&gt; is not assignable to the corresponding parameter for the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\\n","pos":[187589,188030],"source":"\\n<p>\\n<em>instance</em>.Type is not assignable to the declaring type of the method represented by <em>method</em>.</p>\\n<p>-or-</p>\\n<p>The number of elements in <em>arguments</em> does not equal the number of parameters for the method represented by <em>method</em>.</p>\\n<p>-or-</p>\\n<p>One or more of the elements of <em>arguments</em> is not assignable to the corresponding parameter for the method represented by <em>method</em>.</p>\\n"},{"pos":[189146,189198],"content":"Call(Expression, MethodInfo, Expression, Expression)","needQuote":true,"nodes":[{"content":"Call(Expression, MethodInfo, Expression, Expression)","pos":[0,52]}]},{"pos":[192821,192885],"content":"Call(Expression, MethodInfo, Expression, Expression, Expression)","needQuote":true,"nodes":[{"content":"Call(Expression, MethodInfo, Expression, Expression, Expression)","pos":[0,64]}]},{"pos":[196620,196662],"content":"Call(Expression, MethodInfo, Expression[])","needQuote":true,"nodes":[{"content":"Call(Expression, MethodInfo, Expression[])","pos":[0,42]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;instance&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and &lt;em&gt;method&lt;/em&gt; represents an instance method.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;arguments&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and one or more of its elements is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[199682,199982],"source":"\\n<p>\\n<em>method</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>instance</em> is <strong>null</strong> and <em>method</em> represents an instance method.</p>\\n<p>-or-</p>\\n<p>\\n<em>arguments</em> is not <strong>null</strong> and one or more of its elements is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;instance&lt;/em&gt;.Type is not assignable to the declaring type of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The number of elements in &lt;em&gt;arguments&lt;/em&gt; does not equal the number of parameters for the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;One or more of the elements of &lt;em&gt;arguments&lt;/em&gt; is not assignable to the corresponding parameter for the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\\n","pos":[200079,200520],"source":"\\n<p>\\n<em>instance</em>.Type is not assignable to the declaring type of the method represented by <em>method</em>.</p>\\n<p>-or-</p>\\n<p>The number of elements in <em>arguments</em> does not equal the number of parameters for the method represented by <em>method</em>.</p>\\n<p>-or-</p>\\n<p>One or more of the elements of <em>arguments</em> is not assignable to the corresponding parameter for the method represented by <em>method</em>.</p>\\n"},{"pos":[201454,201500],"content":"Call(Expression, String, Type[], Expression[])","needQuote":true,"nodes":[{"content":"Call(Expression, String, Type[], Expression[])","pos":[0,46]}]},{"content":"\\n&lt;p&gt;The name of the method.&lt;/p&gt;\\n","pos":[203005,203039],"source":"\\n<p>The name of the method.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;instance&lt;/em&gt; or &lt;em&gt;methodName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[204737,204816],"source":"\\n<p>\\n<em>instance</em> or <em>methodName</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;No method whose name is &lt;em&gt;methodName&lt;/em&gt;, whose type parameters match &lt;em&gt;typeArguments&lt;/em&gt;, and whose parameter types match &lt;em&gt;arguments&lt;/em&gt; is found in &lt;em&gt;instance&lt;/em&gt;.Type or its base types.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;More than one method whose name is &lt;em&gt;methodName&lt;/em&gt;, whose type parameters match &lt;em&gt;typeArguments&lt;/em&gt;, and whose parameter types match &lt;em&gt;arguments&lt;/em&gt; is found in &lt;em&gt;instance&lt;/em&gt;.Type or its base types.&lt;/p&gt;\\n","pos":[204929,205375],"source":"\\n<p>No method whose name is <em>methodName</em>, whose type parameters match <em>typeArguments</em>, and whose parameter types match <em>arguments</em> is found in <em>instance</em>.Type or its base types.</p>\\n<p>-or-</p>\\n<p>More than one method whose name is <em>methodName</em>, whose type parameters match <em>typeArguments</em>, and whose parameter types match <em>arguments</em> is found in <em>instance</em>.Type or its base types.</p>\\n"},{"pos":[206333,206374],"content":"Call(MethodInfo, IEnumerable<Expression>)","needQuote":true,"nodes":[{"content":"Call(MethodInfo, IEnumerable&lt;Expression&gt;)","pos":[0,41],"source":"Call(MethodInfo, IEnumerable<Expression>)"}]},{"pos":[209421,209449],"content":"Call(MethodInfo, Expression)","needQuote":true,"nodes":[{"content":"Call(MethodInfo, Expression)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is null.&lt;/p&gt;\\n","pos":[211808,211845],"source":"\\n<p>\\n<em>method</em> is null.</p>\\n"},{"pos":[212476,212516],"content":"Call(MethodInfo, Expression, Expression)","needQuote":true,"nodes":[{"content":"Call(MethodInfo, Expression, Expression)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is null.&lt;/p&gt;\\n","pos":[215120,215157],"source":"\\n<p>\\n<em>method</em> is null.</p>\\n"},{"pos":[215905,215957],"content":"Call(MethodInfo, Expression, Expression, Expression)","needQuote":true,"nodes":[{"content":"Call(MethodInfo, Expression, Expression, Expression)","pos":[0,52]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is null.&lt;/p&gt;\\n","pos":[218865,218902],"source":"\\n<p>\\n<em>method</em> is null.</p>\\n"},{"pos":[219767,219831],"content":"Call(MethodInfo, Expression, Expression, Expression, Expression)","needQuote":true,"nodes":[{"content":"Call(MethodInfo, Expression, Expression, Expression, Expression)","pos":[0,64]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is null.&lt;/p&gt;\\n","pos":[223041,223078],"source":"\\n<p>\\n<em>method</em> is null.</p>\\n"},{"pos":[224060,224136],"content":"Call(MethodInfo, Expression, Expression, Expression, Expression, Expression)","needQuote":true,"nodes":[{"content":"Call(MethodInfo, Expression, Expression, Expression, Expression, Expression)","pos":[0,76]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is null.&lt;/p&gt;\\n","pos":[227648,227685],"source":"\\n<p>\\n<em>method</em> is null.</p>\\n"},{"pos":[228265,228295],"content":"Call(MethodInfo, Expression[])","needQuote":true,"nodes":[{"content":"Call(MethodInfo, Expression[])","pos":[0,30]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[230914,230968],"source":"\\n<p>\\n<em>method</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in &lt;em&gt;arguments&lt;/em&gt; does not equal the number of parameters for the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;One or more of the elements of &lt;em&gt;arguments&lt;/em&gt; is not assignable to the corresponding parameter for the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\\n","pos":[231065,231374],"source":"\\n<p>The number of elements in <em>arguments</em> does not equal the number of parameters for the method represented by <em>method</em>.</p>\\n<p>-or-</p>\\n<p>One or more of the elements of <em>arguments</em> is not assignable to the corresponding parameter for the method represented by <em>method</em>.</p>\\n"},{"pos":[232167,232207],"content":"Call(Type, String, Type[], Expression[])","needQuote":true,"nodes":[{"content":"Call(Type, String, Type[], Expression[])","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The name of the method.&lt;/p&gt;\\n","pos":[233651,233685],"source":"\\n<p>The name of the method.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;type&lt;/em&gt; or &lt;em&gt;methodName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[235312,235387],"source":"\\n<p>\\n<em>type</em> or <em>methodName</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;No method whose name is &lt;em&gt;methodName&lt;/em&gt;, whose type parameters match &lt;em&gt;typeArguments&lt;/em&gt;, and whose parameter types match &lt;em&gt;arguments&lt;/em&gt; is found in &lt;em&gt;type&lt;/em&gt; or its base types.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;More than one method whose name is &lt;em&gt;methodName&lt;/em&gt;, whose type parameters match &lt;em&gt;typeArguments&lt;/em&gt;, and whose parameter types match &lt;em&gt;arguments&lt;/em&gt; is found in &lt;em&gt;type&lt;/em&gt; or its base types.&lt;/p&gt;\\n","pos":[235500,235928],"source":"\\n<p>No method whose name is <em>methodName</em>, whose type parameters match <em>typeArguments</em>, and whose parameter types match <em>arguments</em> is found in <em>type</em> or its base types.</p>\\n<p>-or-</p>\\n<p>More than one method whose name is <em>methodName</em>, whose type parameters match <em>typeArguments</em>, and whose parameter types match <em>arguments</em> is found in <em>type</em> or its base types.</p>\\n"},{"pos":[236773,236811],"content":"Catch(ParameterExpression, Expression)","needQuote":true,"nodes":[{"content":"Catch(ParameterExpression, Expression)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The body of the catch statement.&lt;/p&gt;\\n","pos":[238273,238316],"source":"\\n<p>The body of the catch statement.</p>\\n"},{"pos":[239204,239254],"content":"Catch(ParameterExpression, Expression, Expression)","needQuote":true,"nodes":[{"content":"Catch(ParameterExpression, Expression, Expression)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;The body of the catch statement.&lt;/p&gt;\\n","pos":[240856,240899],"source":"\\n<p>The body of the catch statement.</p>\\n"},{"pos":[241795,241818],"content":"Catch(Type, Expression)","needQuote":true,"nodes":[{"content":"Catch(Type, Expression)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The body of the catch statement.&lt;/p&gt;\\n","pos":[243082,243125],"source":"\\n<p>The body of the catch statement.</p>\\n"},{"pos":[243902,243937],"content":"Catch(Type, Expression, Expression)","needQuote":true,"nodes":[{"content":"Catch(Type, Expression, Expression)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The body of the catch statement.&lt;/p&gt;\\n","pos":[245485,245528],"source":"\\n<p>The body of the catch statement.</p>\\n"},{"pos":[246424,246458],"content":"ClearDebugInfo(SymbolDocumentInfo)","needQuote":true,"nodes":[{"content":"ClearDebugInfo(SymbolDocumentInfo)","pos":[0,34]}]},{"pos":[248385,248417],"content":"Coalesce(Expression, Expression)","needQuote":true,"nodes":[{"content":"Coalesce(Expression, Expression)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[250789,250859],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type are not convertible to each other.&lt;/p&gt;\\n","pos":[251271,251361],"source":"\\n<p>\\n<em>left</em>.Type and <em>right</em>.Type are not convertible to each other.</p>\\n"},{"pos":[252044,252094],"content":"Coalesce(Expression, Expression, LambdaExpression)","needQuote":true,"nodes":[{"content":"Coalesce(Expression, Expression, LambdaExpression)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[255062,255132],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type are not convertible to each other.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;conversion&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and &lt;em&gt;conversion&lt;/em&gt;.Type is a delegate type that does not take exactly one argument.&lt;/p&gt;\\n","pos":[255229,255480],"source":"\\n<p>\\n<em>left</em>.Type and <em>right</em>.Type are not convertible to each other.</p>\\n<p>-or-</p>\\n<p>\\n<em>conversion</em> is not <strong>null</strong> and <em>conversion</em>.Type is a delegate type that does not take exactly one argument.</p>\\n"},{"pos":[256973,257018],"content":"Condition(Expression, Expression, Expression)","needQuote":true,"nodes":[{"content":"Condition(Expression, Expression, Expression)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;test&lt;/em&gt; or &lt;em&gt;ifTrue&lt;/em&gt; or &lt;em&gt;ifFalse&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[259982,260073],"source":"\\n<p>\\n<em>test</em> or <em>ifTrue</em> or <em>ifFalse</em> is <strong>null</strong>.</p>\\n"},{"pos":[261679,261730],"content":"Condition(Expression, Expression, Expression, Type)","needQuote":true,"nodes":[{"content":"Condition(Expression, Expression, Expression, Type)","pos":[0,51]}]},{"pos":[265327,265343],"content":"Constant(Object)","needQuote":true,"nodes":[{"content":"Constant(Object)","pos":[0,16]}]},{"pos":[267556,267578],"content":"Constant(Object, Type)","needQuote":true,"nodes":[{"content":"Constant(Object, Type)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[270025,270077],"source":"\\n<p>\\n<em>type</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and &lt;em&gt;type&lt;/em&gt; is not assignable from the dynamic type of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[270174,270307],"source":"\\n<p>\\n<em>value</em> is not <strong>null</strong> and <em>type</em> is not assignable from the dynamic type of <em>value</em>.</p>\\n"},{"pos":[270755,270776],"content":"Continue(LabelTarget)","needQuote":true,"nodes":[{"content":"Continue(LabelTarget)","pos":[0,21]}]},{"pos":[272917,272944],"content":"Continue(LabelTarget, Type)","needQuote":true,"nodes":[{"content":"Continue(LabelTarget, Type)","pos":[0,27]}]},{"pos":[275558,275583],"content":"Convert(Expression, Type)","needQuote":true,"nodes":[{"content":"Convert(Expression, Type)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt; or &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[277873,277948],"source":"\\n<p>\\n<em>expression</em> or <em>type</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;No conversion operator is defined between &lt;em&gt;expression&lt;/em&gt;.Type and &lt;em&gt;type&lt;/em&gt;.&lt;/p&gt;\\n","pos":[278061,278157],"source":"\\n<p>No conversion operator is defined between <em>expression</em>.Type and <em>type</em>.</p>\\n"},{"pos":[278725,278762],"content":"Convert(Expression, Type, MethodInfo)","needQuote":true,"nodes":[{"content":"Convert(Expression, Type, MethodInfo)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt; or &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[281592,281667],"source":"\\n<p>\\n<em>expression</em> or <em>type</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly one argument.&lt;/p&gt;\\n","pos":[281764,281994],"source":"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly one argument.</p>\\n"},{"content":"\\n&lt;p&gt;No conversion operator is defined between &lt;em&gt;expression&lt;/em&gt;.Type and &lt;em&gt;type&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt;.Type is not assignable to the argument type of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The return type of the method represented by &lt;em&gt;method&lt;/em&gt; is not assignable to &lt;em&gt;type&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt;.Type or &lt;em&gt;type&lt;/em&gt; is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\\n","pos":[282107,282703],"source":"\\n<p>No conversion operator is defined between <em>expression</em>.Type and <em>type</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>expression</em>.Type is not assignable to the argument type of the method represented by <em>method</em>.</p>\\n<p>-or-</p>\\n<p>The return type of the method represented by <em>method</em> is not assignable to <em>type</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>expression</em>.Type or <em>type</em> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <em>method</em>.</p>\\n"},{"content":"\\n&lt;p&gt;More than one method that matches the &lt;em&gt;method&lt;/em&gt; description was found.&lt;/p&gt;\\n","pos":[282834,282921],"source":"\\n<p>More than one method that matches the <em>method</em> description was found.</p>\\n"},{"pos":[283435,283467],"content":"ConvertChecked(Expression, Type)","needQuote":true,"nodes":[{"content":"ConvertChecked(Expression, Type)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt; or &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[285845,285920],"source":"\\n<p>\\n<em>expression</em> or <em>type</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;No conversion operator is defined between &lt;em&gt;expression&lt;/em&gt;.Type and &lt;em&gt;type&lt;/em&gt;.&lt;/p&gt;\\n","pos":[286033,286129],"source":"\\n<p>No conversion operator is defined between <em>expression</em>.Type and <em>type</em>.</p>\\n"},{"pos":[286725,286769],"content":"ConvertChecked(Expression, Type, MethodInfo)","needQuote":true,"nodes":[{"content":"ConvertChecked(Expression, Type, MethodInfo)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt; or &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[289696,289771],"source":"\\n<p>\\n<em>expression</em> or <em>type</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly one argument.&lt;/p&gt;\\n","pos":[289868,290098],"source":"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly one argument.</p>\\n"},{"content":"\\n&lt;p&gt;No conversion operator is defined between &lt;em&gt;expression&lt;/em&gt;.Type and &lt;em&gt;type&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt;.Type is not assignable to the argument type of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The return type of the method represented by &lt;em&gt;method&lt;/em&gt; is not assignable to &lt;em&gt;type&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt;.Type or &lt;em&gt;type&lt;/em&gt; is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\\n","pos":[290211,290807],"source":"\\n<p>No conversion operator is defined between <em>expression</em>.Type and <em>type</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>expression</em>.Type is not assignable to the argument type of the method represented by <em>method</em>.</p>\\n<p>-or-</p>\\n<p>The return type of the method represented by <em>method</em> is not assignable to <em>type</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>expression</em>.Type or <em>type</em> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <em>method</em>.</p>\\n"},{"content":"\\n&lt;p&gt;More than one method that matches the &lt;em&gt;method&lt;/em&gt; description was found.&lt;/p&gt;\\n","pos":[290938,291025],"source":"\\n<p>More than one method that matches the <em>method</em> description was found.</p>\\n"},{"pos":[291675,291732],"content":"DebugInfo(SymbolDocumentInfo, Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"DebugInfo(SymbolDocumentInfo, Int32, Int32, Int32, Int32)","pos":[0,57]}]},{"pos":[294776,294797],"content":"Decrement(Expression)","needQuote":true,"nodes":[{"content":"Decrement(Expression)","pos":[0,21]}]},{"pos":[296627,296660],"content":"Decrement(Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"Decrement(Expression, MethodInfo)","pos":[0,33]}]},{"pos":[298633,298646],"content":"Default(Type)","needQuote":true,"nodes":[{"content":"Default(Type)","pos":[0,13]}]},{"pos":[300929,300959],"content":"Divide(Expression, Expression)","needQuote":true,"nodes":[{"content":"Divide(Expression, Expression)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[303319,303389],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The division operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[303502,303597],"source":"\\n<p>The division operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[304236,304278],"content":"Divide(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"Divide(Expression, Expression, MethodInfo)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[307192,307262],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\\n","pos":[307359,307590],"source":"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the division operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[307703,307845],"source":"\\n<p>\\n<em>method</em> is <strong>null</strong> and the division operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[308427,308463],"content":"DivideAssign(Expression, Expression)","needQuote":true,"nodes":[{"content":"DivideAssign(Expression, Expression)","pos":[0,36]}]},{"pos":[311445,311493],"content":"DivideAssign(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"DivideAssign(Expression, Expression, MethodInfo)","pos":[0,48]}]},{"pos":[315110,315176],"content":"DivideAssign(Expression, Expression, MethodInfo, LambdaExpression)","needQuote":true,"nodes":[{"content":"DivideAssign(Expression, Expression, MethodInfo, LambdaExpression)","pos":[0,66]}]},{"pos":[319267,319315],"content":"ElementInit(MethodInfo, IEnumerable<Expression>)","needQuote":true,"nodes":[{"content":"ElementInit(MethodInfo, IEnumerable&lt;Expression&gt;)","pos":[0,48],"source":"ElementInit(MethodInfo, IEnumerable<Expression>)"}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;addMethod&lt;/em&gt; or &lt;em&gt;arguments&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[321771,321850],"source":"\\n<p>\\n<em>addMethod</em> or <em>arguments</em> is <strong>null</strong>.</p>\\n"},{"pos":[323484,323521],"content":"ElementInit(MethodInfo, Expression[])","needQuote":true,"nodes":[{"content":"ElementInit(MethodInfo, Expression[])","pos":[0,37]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;addMethod&lt;/em&gt; or &lt;em&gt;arguments&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[325703,325782],"source":"\\n<p>\\n<em>addMethod</em> or <em>arguments</em> is <strong>null</strong>.</p>\\n"},{"pos":[327079,327086],"content":"Empty()","needQuote":true,"nodes":[{"content":"Empty()","pos":[0,7]}]},{"pos":[328934,328963],"content":"Equal(Expression, Expression)","needQuote":true,"nodes":[{"content":"Equal(Expression, Expression)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[331320,331390],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The equality operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[331503,331598],"source":"\\n<p>The equality operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[332278,332328],"content":"Equal(Expression, Expression, Boolean, MethodInfo)","needQuote":true,"nodes":[{"content":"Equal(Expression, Expression, Boolean, MethodInfo)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[335826,335896],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\\n","pos":[335993,336224],"source":"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the equality operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[336337,336479],"source":"\\n<p>\\n<em>method</em> is <strong>null</strong> and the equality operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[337066,337101],"content":"ExclusiveOr(Expression, Expression)","needQuote":true,"nodes":[{"content":"ExclusiveOr(Expression, Expression)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[339564,339634],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XOR&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[339747,339854],"source":"\\n<p>The <strong>XOR</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[340513,340560],"content":"ExclusiveOr(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"ExclusiveOr(Expression, Expression, MethodInfo)","pos":[0,47]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[343565,343635],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\\n","pos":[343732,343963],"source":"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the &lt;strong&gt;XOR&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[344076,344230],"source":"\\n<p>\\n<em>method</em> is <strong>null</strong> and the <strong>XOR</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[344832,344873],"content":"ExclusiveOrAssign(Expression, Expression)","needQuote":true,"nodes":[{"content":"ExclusiveOrAssign(Expression, Expression)","pos":[0,41]}]},{"pos":[347924,347977],"content":"ExclusiveOrAssign(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"ExclusiveOrAssign(Expression, Expression, MethodInfo)","pos":[0,53]}]},{"pos":[351663,351734],"content":"ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression)","needQuote":true,"nodes":[{"content":"ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression)","pos":[0,71]}]},{"pos":[355738,355766],"content":"Field(Expression, FieldInfo)","needQuote":true,"nodes":[{"content":"Field(Expression, FieldInfo)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;field&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The field represented by &lt;em&gt;field&lt;/em&gt; is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic) and &lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[358257,358494],"source":"\\n<p>\\n<em>field</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The field represented by <em>field</em> is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic) and <em>expression</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt;.Type is not assignable to the declaring type of the field represented by &lt;em&gt;field&lt;/em&gt;.&lt;/p&gt;\\n","pos":[358591,358712],"source":"\\n<p>\\n<em>expression</em>.Type is not assignable to the declaring type of the field represented by <em>field</em>.</p>\\n"},{"pos":[359196,359221],"content":"Field(Expression, String)","needQuote":true,"nodes":[{"content":"Field(Expression, String)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The name of a field to be accessed.&lt;/p&gt;\\n","pos":[360561,360607],"source":"\\n<p>The name of a field to be accessed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt; or &lt;em&gt;fieldName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[361608,361688],"source":"\\n<p>\\n<em>expression</em> or <em>fieldName</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;No field named &lt;em&gt;fieldName&lt;/em&gt; is defined in &lt;em&gt;expression&lt;/em&gt;.Type or its base types.&lt;/p&gt;\\n","pos":[361785,361887],"source":"\\n<p>No field named <em>fieldName</em> is defined in <em>expression</em>.Type or its base types.</p>\\n"},{"pos":[362404,362435],"content":"Field(Expression, Type, String)","needQuote":true,"nodes":[{"content":"Field(Expression, Type, String)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The containing object of the field.","pos":[363424,363464],"source":"\\n<p>The containing object of the field."},{"content":"This can be null for static fields.&lt;/p&gt;\\n","pos":[363465,363506],"source":" This can be null for static fields.</p>\\n"},{"content":"\\n&lt;p&gt;The field to be accessed.&lt;/p&gt;\\n","pos":[363774,363810],"source":"\\n<p>The field to be accessed.</p>\\n"},{"pos":[364427,364448],"content":"GetActionType(Type[])","needQuote":true,"nodes":[{"content":"GetActionType(Type[])","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The type of a System.Action delegate that has the specified type arguments.&lt;/p&gt;\\n","pos":[365606,365692],"source":"\\n<p>The type of a System.Action delegate that has the specified type arguments.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;typeArgs&lt;/em&gt; contains more than sixteen elements.&lt;/p&gt;\\n","pos":[365803,365870],"source":"\\n<p>\\n<em>typeArgs</em> contains more than sixteen elements.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;typeArgs&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[365975,366031],"source":"\\n<p>\\n<em>typeArgs</em> is <strong>null</strong>.</p>\\n"},{"pos":[366597,366620],"content":"GetDelegateType(Type[])","needQuote":true,"nodes":[{"content":"GetDelegateType(Type[])","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The type arguments of the delegate.&lt;/p&gt;\\n","pos":[367592,367638],"source":"\\n<p>The type arguments of the delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate type.&lt;/p&gt;\\n","pos":[367696,367725],"source":"\\n<p>The delegate type.</p>\\n"},{"pos":[368287,368306],"content":"GetFuncType(Type[])","needQuote":true,"nodes":[{"content":"GetFuncType(Type[])","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The type of a System.Func delegate that has the specified type arguments.&lt;/p&gt;\\n","pos":[369570,369654],"source":"\\n<p>The type of a System.Func delegate that has the specified type arguments.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;typeArgs&lt;/em&gt; contains fewer than one or more than seventeen elements.&lt;/p&gt;\\n","pos":[369765,369852],"source":"\\n<p>\\n<em>typeArgs</em> contains fewer than one or more than seventeen elements.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;typeArgs&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[369957,370013],"source":"\\n<p>\\n<em>typeArgs</em> is <strong>null</strong>.</p>\\n"},{"pos":[370604,370621],"content":"Goto(LabelTarget)","needQuote":true,"nodes":[{"content":"Goto(LabelTarget)","pos":[0,17]}]},{"pos":[372800,372829],"content":"Goto(LabelTarget, Expression)","needQuote":true,"nodes":[{"content":"Goto(LabelTarget, Expression)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The value that will be passed to the associated label upon jumping.&lt;/p&gt;\\n","pos":[374162,374240],"source":"\\n<p>The value that will be passed to the associated label upon jumping.</p>\\n"},{"pos":[375353,375388],"content":"Goto(LabelTarget, Expression, Type)","needQuote":true,"nodes":[{"content":"Goto(LabelTarget, Expression, Type)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The value that will be passed to the associated label upon jumping.&lt;/p&gt;\\n","pos":[376783,376861],"source":"\\n<p>The value that will be passed to the associated label upon jumping.</p>\\n"},{"pos":[378286,378309],"content":"Goto(LabelTarget, Type)","needQuote":true,"nodes":[{"content":"Goto(LabelTarget, Type)","pos":[0,23]}]},{"pos":[380985,381020],"content":"GreaterThan(Expression, Expression)","needQuote":true,"nodes":[{"content":"GreaterThan(Expression, Expression)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[383422,383492],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"pos":[384412,384468],"content":"GreaterThan(Expression, Expression, Boolean, MethodInfo)","needQuote":true,"nodes":[{"content":"GreaterThan(Expression, Expression, Boolean, MethodInfo)","pos":[0,56]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[388011,388081],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\\n","pos":[388178,388409],"source":"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n"},{"pos":[389286,389328],"content":"GreaterThanOrEqual(Expression, Expression)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual(Expression, Expression)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[391774,391844],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"pos":[392801,392864],"content":"GreaterThanOrEqual(Expression, Expression, Boolean, MethodInfo)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual(Expression, Expression, Boolean, MethodInfo)","pos":[0,63]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[396409,396479],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\\n","pos":[396576,396807],"source":"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n"},{"pos":[397664,397694],"content":"IfThen(Expression, Expression)","needQuote":true,"nodes":[{"content":"IfThen(Expression, Expression)","pos":[0,30]}]},{"pos":[401086,401132],"content":"IfThenElse(Expression, Expression, Expression)","needQuote":true,"nodes":[{"content":"IfThenElse(Expression, Expression, Expression)","pos":[0,46]}]},{"pos":[404743,404764],"content":"Increment(Expression)","needQuote":true,"nodes":[{"content":"Increment(Expression)","pos":[0,21]}]},{"pos":[406600,406633],"content":"Increment(Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"Increment(Expression, MethodInfo)","pos":[0,33]}]},{"pos":[408897,408940],"content":"Invoke(Expression, IEnumerable<Expression>)","needQuote":true,"nodes":[{"content":"Invoke(Expression, IEnumerable&lt;Expression&gt;)","pos":[0,43],"source":"Invoke(Expression, IEnumerable<Expression>)"}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[411082,411140],"source":"\\n<p>\\n<em>expression</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;arguments&lt;/em&gt; does not contain the same number of elements as the list of parameters for the delegate represented by &lt;em&gt;expression&lt;/em&gt;.&lt;/p&gt;\\n","pos":[411809,411964],"source":"\\n<p>\\n<em>arguments</em> does not contain the same number of elements as the list of parameters for the delegate represented by <em>expression</em>.</p>\\n"},{"pos":[412842,412874],"content":"Invoke(Expression, Expression[])","needQuote":true,"nodes":[{"content":"Invoke(Expression, Expression[])","pos":[0,32]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[414824,414882],"source":"\\n<p>\\n<em>expression</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;arguments&lt;/em&gt; does not contain the same number of elements as the list of parameters for the delegate represented by &lt;em&gt;expression&lt;/em&gt;.&lt;/p&gt;\\n","pos":[415551,415706],"source":"\\n<p>\\n<em>arguments</em> does not contain the same number of elements as the list of parameters for the delegate represented by <em>expression</em>.</p>\\n"},{"pos":[416396,416415],"content":"IsFalse(Expression)","needQuote":true,"nodes":[{"content":"IsFalse(Expression)","pos":[0,19]}]},{"pos":[418082,418113],"content":"IsFalse(Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"IsFalse(Expression, MethodInfo)","pos":[0,31]}]},{"pos":[419995,420013],"content":"IsTrue(Expression)","needQuote":true,"nodes":[{"content":"IsTrue(Expression)","pos":[0,18]}]},{"pos":[421671,421701],"content":"IsTrue(Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"IsTrue(Expression, MethodInfo)","pos":[0,30]}]},{"pos":[423466,423473],"content":"Label()","needQuote":true,"nodes":[{"content":"Label()","pos":[0,7]}]},{"pos":[424803,424821],"content":"Label(LabelTarget)","needQuote":true,"nodes":[{"content":"Label(LabelTarget)","pos":[0,18]}]},{"pos":[426727,426757],"content":"Label(LabelTarget, Expression)","needQuote":true,"nodes":[{"content":"Label(LabelTarget, Expression)","pos":[0,30]}]},{"pos":[428879,428892],"content":"Label(String)","needQuote":true,"nodes":[{"content":"Label(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The name of the label.&lt;/p&gt;\\n","pos":[429727,429760],"source":"\\n<p>The name of the label.</p>\\n"},{"pos":[430315,430326],"content":"Label(Type)","needQuote":true,"nodes":[{"content":"Label(Type)","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The type of value that is passed when jumping to the label.&lt;/p&gt;\\n","pos":[431139,431209],"source":"\\n<p>The type of value that is passed when jumping to the label.</p>\\n"},{"pos":[431804,431823],"content":"Label(Type, String)","needQuote":true,"nodes":[{"content":"Label(Type, String)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The type of value that is passed when jumping to the label.&lt;/p&gt;\\n","pos":[432689,432759],"source":"\\n<p>The type of value that is passed when jumping to the label.</p>\\n"},{"content":"\\n&lt;p&gt;The name of the label.&lt;/p&gt;\\n","pos":[432822,432855],"source":"\\n<p>The name of the label.</p>\\n"},{"pos":[433785,433846],"content":"Lambda(Expression, Boolean, IEnumerable<ParameterExpression>)","needQuote":true,"nodes":[{"content":"Lambda(Expression, Boolean, IEnumerable&lt;ParameterExpression&gt;)","pos":[0,61],"source":"Lambda(Expression, Boolean, IEnumerable<ParameterExpression>)"}]},{"pos":[437550,437600],"content":"Lambda(Expression, Boolean, ParameterExpression[])","needQuote":true,"nodes":[{"content":"Lambda(Expression, Boolean, ParameterExpression[])","pos":[0,50]}]},{"pos":[441115,441167],"content":"Lambda(Expression, IEnumerable<ParameterExpression>)","needQuote":true,"nodes":[{"content":"Lambda(Expression, IEnumerable&lt;ParameterExpression&gt;)","pos":[0,52],"source":"Lambda(Expression, IEnumerable<ParameterExpression>)"}]},{"pos":[444480,444521],"content":"Lambda(Expression, ParameterExpression[])","needQuote":true,"nodes":[{"content":"Lambda(Expression, ParameterExpression[])","pos":[0,41]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;body&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;One or more elements of &lt;em&gt;parameters&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[447000,447144],"source":"\\n<p>\\n<em>body</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>One or more elements of <em>parameters</em> are <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;parameters&lt;/em&gt; contains more than sixteen elements.&lt;/p&gt;\\n","pos":[447241,447310],"source":"\\n<p>\\n<em>parameters</em> contains more than sixteen elements.</p>\\n"},{"pos":[448372,448441],"content":"Lambda(Expression, String, Boolean, IEnumerable<ParameterExpression>)","needQuote":true,"nodes":[{"content":"Lambda(Expression, String, Boolean, IEnumerable&lt;ParameterExpression&gt;)","pos":[0,69],"source":"Lambda(Expression, String, Boolean, IEnumerable<ParameterExpression>)"}]},{"content":"\\n&lt;p&gt;The name for the lambda.","pos":[449828,449857],"source":"\\n<p>The name for the lambda."},{"content":"Used for emitting debug information.&lt;/p&gt;\\n","pos":[449858,449900],"source":" Used for emitting debug information.</p>\\n"},{"pos":[452474,452534],"content":"Lambda(Expression, String, IEnumerable<ParameterExpression>)","needQuote":true,"nodes":[{"content":"Lambda(Expression, String, IEnumerable&lt;ParameterExpression&gt;)","pos":[0,60],"source":"Lambda(Expression, String, IEnumerable<ParameterExpression>)"}]},{"content":"\\n&lt;p&gt;The name for the lambda.","pos":[453869,453898],"source":"\\n<p>The name for the lambda."},{"content":"Used for emitting debug information.&lt;/p&gt;\\n","pos":[453899,453941],"source":" Used for emitting debug information.</p>\\n"},{"pos":[456260,456327],"content":"Lambda(Type, Expression, Boolean, IEnumerable<ParameterExpression>)","needQuote":true,"nodes":[{"content":"Lambda(Type, Expression, Boolean, IEnumerable&lt;ParameterExpression&gt;)","pos":[0,67],"source":"Lambda(Type, Expression, Boolean, IEnumerable<ParameterExpression>)"}]},{"pos":[460385,460441],"content":"Lambda(Type, Expression, Boolean, ParameterExpression[])","needQuote":true,"nodes":[{"content":"Lambda(Type, Expression, Boolean, ParameterExpression[])","pos":[0,56]}]},{"pos":[464310,464368],"content":"Lambda(Type, Expression, IEnumerable<ParameterExpression>)","needQuote":true,"nodes":[{"content":"Lambda(Type, Expression, IEnumerable&lt;ParameterExpression&gt;)","pos":[0,58],"source":"Lambda(Type, Expression, IEnumerable<ParameterExpression>)"}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;delegateType&lt;/em&gt; or &lt;em&gt;body&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;One or more elements in &lt;em&gt;parameters&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[467308,467477],"source":"\\n<p>\\n<em>delegateType</em> or <em>body</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>One or more elements in <em>parameters</em> are <strong>null</strong>.</p>\\n"},{"pos":[469285,469332],"content":"Lambda(Type, Expression, ParameterExpression[])","needQuote":true,"nodes":[{"content":"Lambda(Type, Expression, ParameterExpression[])","pos":[0,47]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;delegateType&lt;/em&gt; or &lt;em&gt;body&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;One or more elements in &lt;em&gt;parameters&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[472083,472252],"source":"\\n<p>\\n<em>delegateType</em> or <em>body</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>One or more elements in <em>parameters</em> are <strong>null</strong>.</p>\\n"},{"pos":[474181,474256],"content":"Lambda(Type, Expression, String, Boolean, IEnumerable<ParameterExpression>)","needQuote":true,"nodes":[{"content":"Lambda(Type, Expression, String, Boolean, IEnumerable&lt;ParameterExpression&gt;)","pos":[0,75],"source":"Lambda(Type, Expression, String, Boolean, IEnumerable<ParameterExpression>)"}]},{"content":"\\n&lt;p&gt;The name for the lambda.","pos":[475931,475960],"source":"\\n<p>The name for the lambda."},{"content":"Used for emitting debug information.&lt;/p&gt;\\n","pos":[475961,476003],"source":" Used for emitting debug information.</p>\\n"},{"pos":[478646,478712],"content":"Lambda(Type, Expression, String, IEnumerable<ParameterExpression>)","needQuote":true,"nodes":[{"content":"Lambda(Type, Expression, String, IEnumerable&lt;ParameterExpression&gt;)","pos":[0,66],"source":"Lambda(Type, Expression, String, IEnumerable<ParameterExpression>)"}]},{"content":"\\n&lt;p&gt;The name for the lambda.","pos":[480334,480363],"source":"\\n<p>The name for the lambda."},{"content":"Used for emitting debug information.&lt;/p&gt;\\n","pos":[480364,480406],"source":" Used for emitting debug information.</p>\\n"},{"pos":[482729,482801],"content":"Lambda<TDelegate>(Expression, Boolean, IEnumerable<ParameterExpression>)","needQuote":true,"nodes":[{"content":"Lambda&lt;TDelegate&gt;(Expression, Boolean, IEnumerable&lt;ParameterExpression&gt;)","pos":[0,72],"source":"Lambda<TDelegate>(Expression, Boolean, IEnumerable<ParameterExpression>)"}]},{"content":"\\n&lt;p&gt;The delegate type.","pos":[485061,485084],"source":"\\n<p>The delegate type."},{"content":"&lt;/p&gt;\\n","pos":[485085,485091],"source":" </p>\\n"},{"pos":[486903,486964],"content":"Lambda<TDelegate>(Expression, Boolean, ParameterExpression[])","needQuote":true,"nodes":[{"content":"Lambda&lt;TDelegate&gt;(Expression, Boolean, ParameterExpression[])","pos":[0,61],"source":"Lambda<TDelegate>(Expression, Boolean, ParameterExpression[])"}]},{"content":"\\n&lt;p&gt;The delegate type.","pos":[489046,489069],"source":"\\n<p>The delegate type."},{"content":"&lt;/p&gt;\\n","pos":[489070,489076],"source":" </p>\\n"},{"pos":[490871,490934],"content":"Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>)","needQuote":true,"nodes":[{"content":"Lambda&lt;TDelegate&gt;(Expression, IEnumerable&lt;ParameterExpression&gt;)","pos":[0,63],"source":"Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>)"}]},{"content":"\\n&lt;p&gt;A delegate type.&lt;/p&gt;\\n","pos":[492891,492918],"source":"\\n<p>A delegate type.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;body&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;One or more elements in &lt;em&gt;parameters&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[493752,493896],"source":"\\n<p>\\n<em>body</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>One or more elements in <em>parameters</em> are <strong>null</strong>.</p>\\n"},{"pos":[495576,495628],"content":"Lambda<TDelegate>(Expression, ParameterExpression[])","needQuote":true,"nodes":[{"content":"Lambda&lt;TDelegate&gt;(Expression, ParameterExpression[])","pos":[0,52],"source":"Lambda<TDelegate>(Expression, ParameterExpression[])"}]},{"content":"\\n&lt;p&gt;A delegate type.&lt;/p&gt;\\n","pos":[497396,497423],"source":"\\n<p>A delegate type.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;body&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;One or more elements in &lt;em&gt;parameters&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[498257,498401],"source":"\\n<p>\\n<em>body</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>One or more elements in <em>parameters</em> are <strong>null</strong>.</p>\\n"},{"pos":[500202,500282],"content":"Lambda<TDelegate>(Expression, String, Boolean, IEnumerable<ParameterExpression>)","needQuote":true,"nodes":[{"content":"Lambda&lt;TDelegate&gt;(Expression, String, Boolean, IEnumerable&lt;ParameterExpression&gt;)","pos":[0,80],"source":"Lambda<TDelegate>(Expression, String, Boolean, IEnumerable<ParameterExpression>)"}]},{"content":"\\n&lt;p&gt;The name of the lambda.","pos":[501810,501838],"source":"\\n<p>The name of the lambda."},{"content":"Used for generating debugging info.&lt;/p&gt;\\n","pos":[501839,501880],"source":" Used for generating debugging info.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate type.","pos":[502719,502742],"source":"\\n<p>The delegate type."},{"content":"&lt;/p&gt;\\n","pos":[502743,502749],"source":" </p>\\n"},{"pos":[504711,504782],"content":"Lambda<TDelegate>(Expression, String, IEnumerable<ParameterExpression>)","needQuote":true,"nodes":[{"content":"Lambda&lt;TDelegate&gt;(Expression, String, IEnumerable&lt;ParameterExpression&gt;)","pos":[0,71],"source":"Lambda<TDelegate>(Expression, String, IEnumerable<ParameterExpression>)"}]},{"content":"\\n&lt;p&gt;The name of the lambda.","pos":[506258,506286],"source":"\\n<p>The name of the lambda."},{"content":"Used for generating debugging information.&lt;/p&gt;\\n","pos":[506287,506335],"source":" Used for generating debugging information.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate type.","pos":[506923,506946],"source":"\\n<p>The delegate type."},{"content":"&lt;/p&gt;\\n","pos":[506947,506953],"source":" </p>\\n"},{"pos":[508677,508710],"content":"LeftShift(Expression, Expression)","needQuote":true,"nodes":[{"content":"LeftShift(Expression, Expression)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[511095,511165],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The left-shift operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[511278,511375],"source":"\\n<p>The left-shift operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[512026,512071],"content":"LeftShift(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"LeftShift(Expression, Expression, MethodInfo)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[514956,515026],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\\n","pos":[515123,515354],"source":"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the left-shift operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[515467,515611],"source":"\\n<p>\\n<em>method</em> is <strong>null</strong> and the left-shift operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[516205,516244],"content":"LeftShiftAssign(Expression, Expression)","needQuote":true,"nodes":[{"content":"LeftShiftAssign(Expression, Expression)","pos":[0,39]}]},{"pos":[519226,519277],"content":"LeftShiftAssign(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"LeftShiftAssign(Expression, Expression, MethodInfo)","pos":[0,51]}]},{"pos":[522894,522963],"content":"LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)","needQuote":true,"nodes":[{"content":"LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)","pos":[0,69]}]},{"pos":[526934,526966],"content":"LessThan(Expression, Expression)","needQuote":true,"nodes":[{"content":"LessThan(Expression, Expression)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[529350,529420],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"pos":[530325,530378],"content":"LessThan(Expression, Expression, Boolean, MethodInfo)","needQuote":true,"nodes":[{"content":"LessThan(Expression, Expression, Boolean, MethodInfo)","pos":[0,53]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[533861,533931],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\\n","pos":[534028,534259],"source":"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n"},{"pos":[535121,535160],"content":"LessThanOrEqual(Expression, Expression)","needQuote":true,"nodes":[{"content":"LessThanOrEqual(Expression, Expression)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[537589,537659],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"pos":[538601,538661],"content":"LessThanOrEqual(Expression, Expression, Boolean, MethodInfo)","needQuote":true,"nodes":[{"content":"LessThanOrEqual(Expression, Expression, Boolean, MethodInfo)","pos":[0,60]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[542188,542258],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\\n","pos":[542355,542586],"source":"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n"},{"pos":[543548,543594],"content":"ListBind(MemberInfo, IEnumerable<ElementInit>)","needQuote":true,"nodes":[{"content":"ListBind(MemberInfo, IEnumerable&lt;ElementInit&gt;)","pos":[0,46],"source":"ListBind(MemberInfo, IEnumerable<ElementInit>)"}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;member&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[546284,546332],"source":"\\n<p>\\n<em>member</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[546333,546433],"source":" </p>\\n<p>-or-</p>\\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\\n"},{"pos":[547871,547906],"content":"ListBind(MemberInfo, ElementInit[])","needQuote":true,"nodes":[{"content":"ListBind(MemberInfo, ElementInit[])","pos":[0,35]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;member&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[550407,550455],"source":"\\n<p>\\n<em>member</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[550456,550556],"source":" </p>\\n<p>-or-</p>\\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\\n"},{"pos":[552028,552074],"content":"ListBind(MethodInfo, IEnumerable<ElementInit>)","needQuote":true,"nodes":[{"content":"ListBind(MethodInfo, IEnumerable&lt;ElementInit&gt;)","pos":[0,46],"source":"ListBind(MethodInfo, IEnumerable<ElementInit>)"}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;propertyAccessor&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[554861,554919],"source":"\\n<p>\\n<em>propertyAccessor</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[554920,555020],"source":" </p>\\n<p>-or-</p>\\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\\n"},{"pos":[556399,556434],"content":"ListBind(MethodInfo, ElementInit[])","needQuote":true,"nodes":[{"content":"ListBind(MethodInfo, ElementInit[])","pos":[0,35]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;propertyAccessor&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[559039,559097],"source":"\\n<p>\\n<em>propertyAccessor</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[559098,559198],"source":" </p>\\n<p>-or-</p>\\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\\n"},{"pos":[560638,560687],"content":"ListInit(NewExpression, IEnumerable<ElementInit>)","needQuote":true,"nodes":[{"content":"ListInit(NewExpression, IEnumerable&lt;ElementInit&gt;)","pos":[0,49],"source":"ListInit(NewExpression, IEnumerable<ElementInit>)"}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;newExpression&lt;/em&gt; or &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[563525,563705],"source":"\\n<p>\\n<em>newExpression</em> or <em>initializers</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\\n"},{"pos":[564984,565032],"content":"ListInit(NewExpression, IEnumerable<Expression>)","needQuote":true,"nodes":[{"content":"ListInit(NewExpression, IEnumerable&lt;Expression&gt;)","pos":[0,48],"source":"ListInit(NewExpression, IEnumerable<Expression>)"}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;newExpression&lt;/em&gt; or &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[567656,567836],"source":"\\n<p>\\n<em>newExpression</em> or <em>initializers</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\\n"},{"pos":[569827,569865],"content":"ListInit(NewExpression, ElementInit[])","needQuote":true,"nodes":[{"content":"ListInit(NewExpression, ElementInit[])","pos":[0,38]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;newExpression&lt;/em&gt; or &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[572514,572694],"source":"\\n<p>\\n<em>newExpression</em> or <em>initializers</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\\n"},{"pos":[573779,573816],"content":"ListInit(NewExpression, Expression[])","needQuote":true,"nodes":[{"content":"ListInit(NewExpression, Expression[])","pos":[0,37]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;newExpression&lt;/em&gt; or &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[576251,576431],"source":"\\n<p>\\n<em>newExpression</em> or <em>initializers</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\\n"},{"pos":[578540,578600],"content":"ListInit(NewExpression, MethodInfo, IEnumerable<Expression>)","needQuote":true,"nodes":[{"content":"ListInit(NewExpression, MethodInfo, IEnumerable&lt;Expression&gt;)","pos":[0,60],"source":"ListInit(NewExpression, MethodInfo, IEnumerable<Expression>)"}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;newExpression&lt;/em&gt; or &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[581588,581768],"source":"\\n<p>\\n<em>newExpression</em> or <em>initializers</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\\n"},{"pos":[583916,583965],"content":"ListInit(NewExpression, MethodInfo, Expression[])","needQuote":true,"nodes":[{"content":"ListInit(NewExpression, MethodInfo, Expression[])","pos":[0,49]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;newExpression&lt;/em&gt; or &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[586755,586935],"source":"\\n<p>\\n<em>newExpression</em> or <em>initializers</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\\n"},{"pos":[588784,588800],"content":"Loop(Expression)","needQuote":true,"nodes":[{"content":"Loop(Expression)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The body of the loop.&lt;/p&gt;\\n","pos":[589655,589687],"source":"\\n<p>The body of the loop.</p>\\n"},{"pos":[590429,590458],"content":"Loop(Expression, LabelTarget)","needQuote":true,"nodes":[{"content":"Loop(Expression, LabelTarget)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The body of the loop.&lt;/p&gt;\\n","pos":[591408,591440],"source":"\\n<p>The body of the loop.</p>\\n"},{"content":"\\n&lt;p&gt;The break target used by the loop body.&lt;/p&gt;\\n","pos":[591526,591576],"source":"\\n<p>The break target used by the loop body.</p>\\n"},{"pos":[592439,592481],"content":"Loop(Expression, LabelTarget, LabelTarget)","needQuote":true,"nodes":[{"content":"Loop(Expression, LabelTarget, LabelTarget)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;The body of the loop.&lt;/p&gt;\\n","pos":[593498,593530],"source":"\\n<p>The body of the loop.</p>\\n"},{"content":"\\n&lt;p&gt;The break target used by the loop body.&lt;/p&gt;\\n","pos":[593616,593666],"source":"\\n<p>The break target used by the loop body.</p>\\n"},{"content":"\\n&lt;p&gt;The continue target used by the loop body.&lt;/p&gt;\\n","pos":[593755,593808],"source":"\\n<p>The continue target used by the loop body.</p>\\n"},{"pos":[594708,594758],"content":"MakeBinary(ExpressionType, Expression, Expression)","needQuote":true,"nodes":[{"content":"MakeBinary(ExpressionType, Expression, Expression)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;binaryType&lt;/em&gt; does not correspond to a binary expression node.&lt;/p&gt;\\n","pos":[596865,596946],"source":"\\n<p>\\n<em>binaryType</em> does not correspond to a binary expression node.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[597051,597121],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"pos":[597954,598025],"content":"MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo)","needQuote":true,"nodes":[{"content":"MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo)","pos":[0,71]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;binaryType&lt;/em&gt; does not correspond to a binary expression node.&lt;/p&gt;\\n","pos":[600935,601016],"source":"\\n<p>\\n<em>binaryType</em> does not correspond to a binary expression node.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[601121,601191],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"pos":[602168,602257],"content":"MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo, LambdaExpression)","needQuote":true,"nodes":[{"content":"MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo, LambdaExpression)","pos":[0,89]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;binaryType&lt;/em&gt; does not correspond to a binary expression node.&lt;/p&gt;\\n","pos":[605736,605817],"source":"\\n<p>\\n<em>binaryType</em> does not correspond to a binary expression node.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[605922,605992],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"pos":[606795,606860],"content":"MakeCatchBlock(Type, ParameterExpression, Expression, Expression)","needQuote":true,"nodes":[{"content":"MakeCatchBlock(Type, ParameterExpression, Expression, Expression)","pos":[0,65]}]},{"content":"\\n&lt;p&gt;The body of the catch statement.&lt;/p&gt;\\n","pos":[608726,608769],"source":"\\n<p>The body of the catch statement.</p>\\n"},{"pos":[609926,609985],"content":"MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type)","needQuote":true,"nodes":[{"content":"MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type)","pos":[0,59]}]},{"content":"\\n&lt;p&gt;The value that will be passed to the associated label upon jumping.&lt;/p&gt;\\n","pos":[611895,611973],"source":"\\n<p>The value that will be passed to the associated label upon jumping.</p>\\n"},{"pos":[613725,613785],"content":"MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>)","needQuote":true,"nodes":[{"content":"MakeIndex(Expression, PropertyInfo, IEnumerable&lt;Expression&gt;)","pos":[0,60],"source":"MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>)"}]},{"content":"\\n&lt;p&gt;The object to which the property belongs.","pos":[614946,614992],"source":"\\n<p>The object to which the property belongs."},{"content":"It should be null if the property is &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;shared&lt;/strong&gt; in Visual Basic).&lt;/p&gt;\\n","pos":[614993,615102],"source":" It should be null if the property is <strong>static</strong> (<strong>shared</strong> in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;An &lt;code&gt;IEnumerable&lt;Expression&gt;&lt;/code&gt; (&lt;code&gt;IEnumerable (Of Expression)&lt;/code&gt; in Visual Basic) that contains the arguments that will be used to index the property.&lt;/p&gt;\\n","pos":[615458,615636],"source":"\\n<p>An <code>IEnumerable<Expression></code> (<code>IEnumerable (Of Expression)</code> in Visual Basic) that contains the arguments that will be used to index the property.</p>\\n"},{"pos":[616815,616855],"content":"MakeMemberAccess(Expression, MemberInfo)","needQuote":true,"nodes":[{"content":"MakeMemberAccess(Expression, MemberInfo)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;member&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[618703,618757],"source":"\\n<p>\\n<em>member</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;member&lt;/em&gt; does not represent a field or property.&lt;/p&gt;\\n","pos":[618854,618922],"source":"\\n<p>\\n<em>member</em> does not represent a field or property.</p>\\n"},{"pos":[619853,619927],"content":"MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>)","needQuote":true,"nodes":[{"content":"MakeTry(Type, Expression, Expression, Expression, IEnumerable&lt;CatchBlock&gt;)","pos":[0,74],"source":"MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>)"}]},{"content":"\\n&lt;p&gt;The result type of the try expression.","pos":[621143,621186],"source":"\\n<p>The result type of the try expression."},{"content":"If null, bodh and all handlers must have identical type.&lt;/p&gt;\\n","pos":[621187,621249],"source":" If null, bodh and all handlers must have identical type.</p>\\n"},{"content":"\\n&lt;p&gt;The body of the try block.&lt;/p&gt;\\n","pos":[621333,621370],"source":"\\n<p>The body of the try block.</p>\\n"},{"content":"\\n&lt;p&gt;The body of the finally block.","pos":[621457,621492],"source":"\\n<p>The body of the finally block."},{"content":"Pass null if the try block has no finally block associated with it.&lt;/p&gt;\\n","pos":[621493,621566],"source":" Pass null if the try block has no finally block associated with it.</p>\\n"},{"content":"\\n&lt;p&gt;The body of the fault block.","pos":[621651,621684],"source":"\\n<p>The body of the fault block."},{"content":"Pass null if the try block has no fault block associated with it.&lt;/p&gt;\\n","pos":[621685,621756],"source":" Pass null if the try block has no fault block associated with it.</p>\\n"},{"pos":[623390,623433],"content":"MakeUnary(ExpressionType, Expression, Type)","needQuote":true,"nodes":[{"content":"MakeUnary(ExpressionType, Expression, Type)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;operand&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[625496,625551],"source":"\\n<p>\\n<em>operand</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;unaryType&lt;/em&gt; does not correspond to a unary expression node.&lt;/p&gt;\\n","pos":[625648,625727],"source":"\\n<p>\\n<em>unaryType</em> does not correspond to a unary expression node.</p>\\n"},{"pos":[626436,626491],"content":"MakeUnary(ExpressionType, Expression, Type, MethodInfo)","needQuote":true,"nodes":[{"content":"MakeUnary(ExpressionType, Expression, Type, MethodInfo)","pos":[0,55]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;operand&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[628873,628928],"source":"\\n<p>\\n<em>operand</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;unaryType&lt;/em&gt; does not correspond to a unary expression node.&lt;/p&gt;\\n","pos":[629025,629104],"source":"\\n<p>\\n<em>unaryType</em> does not correspond to a unary expression node.</p>\\n"},{"pos":[629804,629854],"content":"MemberBind(MemberInfo, IEnumerable<MemberBinding>)","needQuote":true,"nodes":[{"content":"MemberBind(MemberInfo, IEnumerable&lt;MemberBinding&gt;)","pos":[0,50],"source":"MemberBind(MemberInfo, IEnumerable<MemberBinding>)"}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;member&lt;/em&gt; or &lt;em&gt;bindings&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[632563,632638],"source":"\\n<p>\\n<em>member</em> or <em>bindings</em> is <strong>null</strong>.</p>\\n"},{"pos":[633978,634017],"content":"MemberBind(MemberInfo, MemberBinding[])","needQuote":true,"nodes":[{"content":"MemberBind(MemberInfo, MemberBinding[])","pos":[0,39]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;member&lt;/em&gt; or &lt;em&gt;bindings&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[636537,636612],"source":"\\n<p>\\n<em>member</em> or <em>bindings</em> is <strong>null</strong>.</p>\\n"},{"pos":[637986,638036],"content":"MemberBind(MethodInfo, IEnumerable<MemberBinding>)","needQuote":true,"nodes":[{"content":"MemberBind(MethodInfo, IEnumerable&lt;MemberBinding&gt;)","pos":[0,50],"source":"MemberBind(MethodInfo, IEnumerable<MemberBinding>)"}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;propertyAccessor&lt;/em&gt; or &lt;em&gt;bindings&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[640902,640987],"source":"\\n<p>\\n<em>propertyAccessor</em> or <em>bindings</em> is <strong>null</strong>.</p>\\n"},{"pos":[642368,642407],"content":"MemberBind(MethodInfo, MemberBinding[])","needQuote":true,"nodes":[{"content":"MemberBind(MethodInfo, MemberBinding[])","pos":[0,39]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;propertyAccessor&lt;/em&gt; or &lt;em&gt;bindings&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[645084,645169],"source":"\\n<p>\\n<em>propertyAccessor</em> or <em>bindings</em> is <strong>null</strong>.</p>\\n"},{"pos":[646611,646664],"content":"MemberInit(NewExpression, IEnumerable<MemberBinding>)","needQuote":true,"nodes":[{"content":"MemberInit(NewExpression, IEnumerable&lt;MemberBinding&gt;)","pos":[0,53],"source":"MemberInit(NewExpression, IEnumerable<MemberBinding>)"}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;newExpression&lt;/em&gt; or &lt;em&gt;bindings&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[649346,649428],"source":"\\n<p>\\n<em>newExpression</em> or <em>bindings</em> is <strong>null</strong>.</p>\\n"},{"pos":[650721,650763],"content":"MemberInit(NewExpression, MemberBinding[])","needQuote":true,"nodes":[{"content":"MemberInit(NewExpression, MemberBinding[])","pos":[0,42]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;newExpression&lt;/em&gt; or &lt;em&gt;bindings&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[653279,653361],"source":"\\n<p>\\n<em>newExpression</em> or <em>bindings</em> is <strong>null</strong>.</p>\\n"},{"pos":[654538,654568],"content":"Modulo(Expression, Expression)","needQuote":true,"nodes":[{"content":"Modulo(Expression, Expression)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[656941,657011],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The modulus operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[657124,657218],"source":"\\n<p>The modulus operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[657857,657899],"content":"Modulo(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"Modulo(Expression, Expression, MethodInfo)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[660772,660842],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\\n","pos":[660939,661170],"source":"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the modulus operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[661283,661424],"source":"\\n<p>\\n<em>method</em> is <strong>null</strong> and the modulus operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[662006,662042],"content":"ModuloAssign(Expression, Expression)","needQuote":true,"nodes":[{"content":"ModuloAssign(Expression, Expression)","pos":[0,36]}]},{"pos":[664988,665036],"content":"ModuloAssign(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"ModuloAssign(Expression, Expression, MethodInfo)","pos":[0,48]}]},{"pos":[668617,668683],"content":"ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression)","needQuote":true,"nodes":[{"content":"ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression)","pos":[0,66]}]},{"pos":[672627,672659],"content":"Multiply(Expression, Expression)","needQuote":true,"nodes":[{"content":"Multiply(Expression, Expression)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[675084,675154],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The multiplication operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[675267,675368],"source":"\\n<p>The multiplication operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[676015,676059],"content":"Multiply(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"Multiply(Expression, Expression, MethodInfo)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[678984,679054],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\\n","pos":[679151,679382],"source":"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the multiplication operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[679495,679643],"source":"\\n<p>\\n<em>method</em> is <strong>null</strong> and the multiplication operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[680233,680271],"content":"MultiplyAssign(Expression, Expression)","needQuote":true,"nodes":[{"content":"MultiplyAssign(Expression, Expression)","pos":[0,38]}]},{"pos":[683277,683327],"content":"MultiplyAssign(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"MultiplyAssign(Expression, Expression, MethodInfo)","pos":[0,50]}]},{"pos":[686968,687036],"content":"MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression)","needQuote":true,"nodes":[{"content":"MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression)","pos":[0,68]}]},{"pos":[691073,691118],"content":"MultiplyAssignChecked(Expression, Expression)","needQuote":true,"nodes":[{"content":"MultiplyAssignChecked(Expression, Expression)","pos":[0,45]}]},{"pos":[694177,694234],"content":"MultiplyAssignChecked(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"MultiplyAssignChecked(Expression, Expression, MethodInfo)","pos":[0,57]}]},{"pos":[697928,698003],"content":"MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)","needQuote":true,"nodes":[{"content":"MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)","pos":[0,75]}]},{"pos":[702054,702093],"content":"MultiplyChecked(Expression, Expression)","needQuote":true,"nodes":[{"content":"MultiplyChecked(Expression, Expression)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[704543,704613],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The multiplication operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[704726,704827],"source":"\\n<p>The multiplication operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[705502,705553],"content":"MultiplyChecked(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"MultiplyChecked(Expression, Expression, MethodInfo)","pos":[0,51]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[708503,708573],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\\n","pos":[708670,708901],"source":"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the multiplication operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[709014,709162],"source":"\\n<p>\\n<em>method</em> is <strong>null</strong> and the multiplication operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[709630,709648],"content":"Negate(Expression)","needQuote":true,"nodes":[{"content":"Negate(Expression)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[711518,711576],"source":"\\n<p>\\n<em>expression</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The unary minus operator is not defined for &lt;em&gt;expression&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[711689,711769],"source":"\\n<p>The unary minus operator is not defined for <em>expression</em>.Type.</p>\\n"},{"pos":[712291,712321],"content":"Negate(Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"Negate(Expression, MethodInfo)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[714694,714752],"source":"\\n<p>\\n<em>expression</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly one argument.&lt;/p&gt;\\n","pos":[714849,715079],"source":"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly one argument.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the unary minus operator is not defined for &lt;em&gt;expression&lt;/em&gt;.Type.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt;.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\\n","pos":[715192,715524],"source":"\\n<p>\\n<em>method</em> is <strong>null</strong> and the unary minus operator is not defined for <em>expression</em>.Type.</p>\\n<p>-or-</p>\\n<p>\\n<em>expression</em>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <em>method</em>.</p>\\n"},{"pos":[715992,716017],"content":"NegateChecked(Expression)","needQuote":true,"nodes":[{"content":"NegateChecked(Expression)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[717949,718007],"source":"\\n<p>\\n<em>expression</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The unary minus operator is not defined for &lt;em&gt;expression&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[718120,718200],"source":"\\n<p>The unary minus operator is not defined for <em>expression</em>.Type.</p>\\n"},{"pos":[718750,718787],"content":"NegateChecked(Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"NegateChecked(Expression, MethodInfo)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[721264,721322],"source":"\\n<p>\\n<em>expression</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly one argument.&lt;/p&gt;\\n","pos":[721419,721649],"source":"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly one argument.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the unary minus operator is not defined for &lt;em&gt;expression&lt;/em&gt;.Type.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt;.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\\n","pos":[721762,722094],"source":"\\n<p>\\n<em>method</em> is <strong>null</strong> and the unary minus operator is not defined for <em>expression</em>.Type.</p>\\n<p>-or-</p>\\n<p>\\n<em>expression</em>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <em>method</em>.</p>\\n"},{"pos":[722536,722556],"content":"New(ConstructorInfo)","needQuote":true,"nodes":[{"content":"New(ConstructorInfo)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;constructor&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[724441,724500],"source":"\\n<p>\\n<em>constructor</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The constructor that &lt;em&gt;constructor&lt;/em&gt; represents has at least one parameter.&lt;/p&gt;\\n","pos":[724597,724688],"source":"\\n<p>The constructor that <em>constructor</em> represents has at least one parameter.</p>\\n"},{"pos":[725338,725383],"content":"New(ConstructorInfo, IEnumerable<Expression>)","needQuote":true,"nodes":[{"content":"New(ConstructorInfo, IEnumerable&lt;Expression&gt;)","pos":[0,45],"source":"New(ConstructorInfo, IEnumerable<Expression>)"}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;constructor&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;An element of &lt;em&gt;arguments&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[728043,728182],"source":"\\n<p>\\n<em>constructor</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>An element of <em>arguments</em> is <strong>null</strong>.</p>\\n"},{"pos":[729930,730000],"content":"New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>)","needQuote":true,"nodes":[{"content":"New(ConstructorInfo, IEnumerable&lt;Expression&gt;, IEnumerable&lt;MemberInfo&gt;)","pos":[0,70],"source":"New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>)"}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;constructor&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;An element of &lt;em&gt;arguments&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;An element of &lt;em&gt;members&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[733470,733687],"source":"\\n<p>\\n<em>constructor</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>An element of <em>arguments</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>An element of <em>members</em> is <strong>null</strong>.</p>\\n"},{"pos":[735903,735962],"content":"New(ConstructorInfo, IEnumerable<Expression>, MemberInfo[])","needQuote":true,"nodes":[{"content":"New(ConstructorInfo, IEnumerable&lt;Expression&gt;, MemberInfo[])","pos":[0,59],"source":"New(ConstructorInfo, IEnumerable<Expression>, MemberInfo[])"}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;constructor&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;An element of &lt;em&gt;arguments&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;An element of &lt;em&gt;members&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[739255,739472],"source":"\\n<p>\\n<em>constructor</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>An element of <em>arguments</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>An element of <em>members</em> is <strong>null</strong>.</p>\\n"},{"pos":[741401,741435],"content":"New(ConstructorInfo, Expression[])","needQuote":true,"nodes":[{"content":"New(ConstructorInfo, Expression[])","pos":[0,34]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;constructor&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;An element of &lt;em&gt;arguments&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[743906,744045],"source":"\\n<p>\\n<em>constructor</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>An element of <em>arguments</em> is <strong>null</strong>.</p>\\n"},{"pos":[745178,745187],"content":"New(Type)","needQuote":true,"nodes":[{"content":"New(Type)","pos":[0,9]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[747023,747075],"source":"\\n<p>\\n<em>type</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The type that &lt;em&gt;type&lt;/em&gt; represents does not have a constructor without parameters.&lt;/p&gt;\\n","pos":[747172,747269],"source":"\\n<p>The type that <em>type</em> represents does not have a constructor without parameters.</p>\\n"},{"pos":[747875,747920],"content":"NewArrayBounds(Type, IEnumerable<Expression>)","needQuote":true,"nodes":[{"content":"NewArrayBounds(Type, IEnumerable&lt;Expression&gt;)","pos":[0,45],"source":"NewArrayBounds(Type, IEnumerable<Expression>)"}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;type&lt;/em&gt; or &lt;em&gt;bounds&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;An element of &lt;em&gt;bounds&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[750325,750473],"source":"\\n<p>\\n<em>type</em> or <em>bounds</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>An element of <em>bounds</em> is <strong>null</strong>.</p>\\n"},{"pos":[751587,751621],"content":"NewArrayBounds(Type, Expression[])","needQuote":true,"nodes":[{"content":"NewArrayBounds(Type, Expression[])","pos":[0,34]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;type&lt;/em&gt; or &lt;em&gt;bounds&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;An element of &lt;em&gt;bounds&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[753837,753985],"source":"\\n<p>\\n<em>type</em> or <em>bounds</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>An element of <em>bounds</em> is <strong>null</strong>.</p>\\n"},{"pos":[755127,755170],"content":"NewArrayInit(Type, IEnumerable<Expression>)","needQuote":true,"nodes":[{"content":"NewArrayInit(Type, IEnumerable&lt;Expression&gt;)","pos":[0,43],"source":"NewArrayInit(Type, IEnumerable<Expression>)"}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;type&lt;/em&gt; or &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;An element of &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[757616,757776],"source":"\\n<p>\\n<em>type</em> or <em>initializers</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>An element of <em>initializers</em> is <strong>null</strong>.</p>\\n"},{"pos":[758945,758977],"content":"NewArrayInit(Type, Expression[])","needQuote":true,"nodes":[{"content":"NewArrayInit(Type, Expression[])","pos":[0,32]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;type&lt;/em&gt; or &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;An element of &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[761234,761394],"source":"\\n<p>\\n<em>type</em> or <em>initializers</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>An element of <em>initializers</em> is <strong>null</strong>.</p>\\n"},{"pos":[762398,762413],"content":"Not(Expression)","needQuote":true,"nodes":[{"content":"Not(Expression)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[764266,764324],"source":"\\n<p>\\n<em>expression</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The unary not operator is not defined for &lt;em&gt;expression&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[764437,764515],"source":"\\n<p>The unary not operator is not defined for <em>expression</em>.Type.</p>\\n"},{"pos":[765025,765052],"content":"Not(Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"Not(Expression, MethodInfo)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[767450,767508],"source":"\\n<p>\\n<em>expression</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly one argument.&lt;/p&gt;\\n","pos":[767605,767835],"source":"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly one argument.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the unary not operator is not defined for &lt;em&gt;expression&lt;/em&gt;.Type.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt;.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\\n","pos":[767948,768278],"source":"\\n<p>\\n<em>method</em> is <strong>null</strong> and the unary not operator is not defined for <em>expression</em>.Type.</p>\\n<p>-or-</p>\\n<p>\\n<em>expression</em>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <em>method</em>.</p>\\n"},{"pos":[768833,768865],"content":"NotEqual(Expression, Expression)","needQuote":true,"nodes":[{"content":"NotEqual(Expression, Expression)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[771239,771309],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The inequality operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[771422,771519],"source":"\\n<p>The inequality operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[772211,772264],"content":"NotEqual(Expression, Expression, Boolean, MethodInfo)","needQuote":true,"nodes":[{"content":"NotEqual(Expression, Expression, Boolean, MethodInfo)","pos":[0,53]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[775737,775807],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\\n","pos":[775904,776135],"source":"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the inequality operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[776248,776392],"source":"\\n<p>\\n<em>method</em> is <strong>null</strong> and the inequality operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[776886,776912],"content":"OnesComplement(Expression)","needQuote":true,"nodes":[{"content":"OnesComplement(Expression)","pos":[0,26]}]},{"pos":[778629,778667],"content":"OnesComplement(Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"OnesComplement(Expression, MethodInfo)","pos":[0,38]}]},{"pos":[780671,780697],"content":"Or(Expression, Expression)","needQuote":true,"nodes":[{"content":"Or(Expression, Expression)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[783056,783126],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The bitwise &lt;strong&gt;OR&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[783239,783353],"source":"\\n<p>The bitwise <strong>OR</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[783976,784014],"content":"Or(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"Or(Expression, Expression, MethodInfo)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[786873,786943],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\\n","pos":[787040,787271],"source":"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the bitwise &lt;strong&gt;OR&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[787384,787545],"source":"\\n<p>\\n<em>method</em> is <strong>null</strong> and the bitwise <strong>OR</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[788111,788143],"content":"OrAssign(Expression, Expression)","needQuote":true,"nodes":[{"content":"OrAssign(Expression, Expression)","pos":[0,32]}]},{"pos":[791054,791098],"content":"OrAssign(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"OrAssign(Expression, Expression, MethodInfo)","pos":[0,44]}]},{"pos":[794644,794706],"content":"OrAssign(Expression, Expression, MethodInfo, LambdaExpression)","needQuote":true,"nodes":[{"content":"OrAssign(Expression, Expression, MethodInfo, LambdaExpression)","pos":[0,62]}]},{"pos":[798621,798651],"content":"OrElse(Expression, Expression)","needQuote":true,"nodes":[{"content":"OrElse(Expression, Expression)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[801130,801200],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The bitwise &lt;strong&gt;OR&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type are not the same Boolean type.&lt;/p&gt;\\n","pos":[801313,801524],"source":"\\n<p>The bitwise <strong>OR</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n<p>-or-</p>\\n<p>\\n<em>left</em>.Type and <em>right</em>.Type are not the same Boolean type.</p>\\n"},{"pos":[802163,802205],"content":"OrElse(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"OrElse(Expression, Expression, MethodInfo)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[805184,805254],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\\n","pos":[805351,805582],"source":"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the bitwise &lt;strong&gt;OR&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type are not the same Boolean type.&lt;/p&gt;\\n","pos":[805695,805998],"source":"\\n<p>\\n<em>method</em> is <strong>null</strong> and the bitwise <strong>OR</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n<p>-or-</p>\\n<p>\\n<em>method</em> is <strong>null</strong> and <em>left</em>.Type and <em>right</em>.Type are not the same Boolean type.</p>\\n"},{"pos":[806397,806412],"content":"Parameter(Type)","needQuote":true,"nodes":[{"content":"Parameter(Type)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The type of the parameter or variable.&lt;/p&gt;\\n","pos":[807306,807355],"source":"\\n<p>The type of the parameter or variable.</p>\\n"},{"pos":[808014,808037],"content":"Parameter(Type, String)","needQuote":true,"nodes":[{"content":"Parameter(Type, String)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The type of the parameter or variable.&lt;/p&gt;\\n","pos":[808975,809024],"source":"\\n<p>The type of the parameter or variable.</p>\\n"},{"content":"\\n&lt;p&gt;The name of the parameter or variable, used for debugging or printing purpose only.&lt;/p&gt;\\n","pos":[809087,809181],"source":"\\n<p>The name of the parameter or variable, used for debugging or printing purpose only.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[810011,810063],"source":"\\n<p>\\n<em>type</em> is <strong>null</strong>.</p>\\n"},{"pos":[810542,810573],"content":"PostDecrementAssign(Expression)","needQuote":true,"nodes":[{"content":"PostDecrementAssign(Expression)","pos":[0,31]}]},{"pos":[812555,812598],"content":"PostDecrementAssign(Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"PostDecrementAssign(Expression, MethodInfo)","pos":[0,43]}]},{"pos":[814798,814829],"content":"PostIncrementAssign(Expression)","needQuote":true,"nodes":[{"content":"PostIncrementAssign(Expression)","pos":[0,31]}]},{"pos":[816811,816854],"content":"PostIncrementAssign(Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"PostIncrementAssign(Expression, MethodInfo)","pos":[0,43]}]},{"pos":[819117,819146],"content":"Power(Expression, Expression)","needQuote":true,"nodes":[{"content":"Power(Expression, Expression)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[821508,821578],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"pos":[822579,822620],"content":"Power(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"Power(Expression, Expression, MethodInfo)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[825482,825552],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\\n","pos":[825649,825880],"source":"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n"},{"pos":[826916,826951],"content":"PowerAssign(Expression, Expression)","needQuote":true,"nodes":[{"content":"PowerAssign(Expression, Expression)","pos":[0,35]}]},{"pos":[829936,829983],"content":"PowerAssign(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"PowerAssign(Expression, Expression, MethodInfo)","pos":[0,47]}]},{"pos":[833603,833668],"content":"PowerAssign(Expression, Expression, MethodInfo, LambdaExpression)","needQuote":true,"nodes":[{"content":"PowerAssign(Expression, Expression, MethodInfo, LambdaExpression)","pos":[0,65]}]},{"pos":[837579,837609],"content":"PreDecrementAssign(Expression)","needQuote":true,"nodes":[{"content":"PreDecrementAssign(Expression)","pos":[0,30]}]},{"pos":[839549,839591],"content":"PreDecrementAssign(Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"PreDecrementAssign(Expression, MethodInfo)","pos":[0,42]}]},{"pos":[841749,841779],"content":"PreIncrementAssign(Expression)","needQuote":true,"nodes":[{"content":"PreIncrementAssign(Expression)","pos":[0,30]}]},{"pos":[843719,843761],"content":"PreIncrementAssign(Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"PreIncrementAssign(Expression, MethodInfo)","pos":[0,42]}]},{"pos":[845976,846008],"content":"Property(Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"Property(Expression, MethodInfo)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;propertyAccessor&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The method that &lt;em&gt;propertyAccessor&lt;/em&gt; represents is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic) and &lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[848588,848849],"source":"\\n<p>\\n<em>propertyAccessor</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The method that <em>propertyAccessor</em> represents is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic) and <em>expression</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt;.Type is not assignable to the declaring type of the method represented by &lt;em&gt;propertyAccessor&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The method that &lt;em&gt;propertyAccessor&lt;/em&gt; represents is not a property accessor method.&lt;/p&gt;\\n","pos":[848946,849188],"source":"\\n<p>\\n<em>expression</em>.Type is not assignable to the declaring type of the method represented by <em>propertyAccessor</em>.</p>\\n<p>-or-</p>\\n<p>The method that <em>propertyAccessor</em> represents is not a property accessor method.</p>\\n"},{"pos":[849736,849770],"content":"Property(Expression, PropertyInfo)","needQuote":true,"nodes":[{"content":"Property(Expression, PropertyInfo)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;property&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The property that &lt;em&gt;property&lt;/em&gt; represents is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic) and &lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[852218,852465],"source":"\\n<p>\\n<em>property</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The property that <em>property</em> represents is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic) and <em>expression</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt;.Type is not assignable to the declaring type of the property that &lt;em&gt;property&lt;/em&gt; represents.&lt;/p&gt;\\n","pos":[852562,852690],"source":"\\n<p>\\n<em>expression</em>.Type is not assignable to the declaring type of the property that <em>property</em> represents.</p>\\n"},{"pos":[853465,853524],"content":"Property(Expression, PropertyInfo, IEnumerable<Expression>)","needQuote":true,"nodes":[{"content":"Property(Expression, PropertyInfo, IEnumerable&lt;Expression&gt;)","pos":[0,59],"source":"Property(Expression, PropertyInfo, IEnumerable<Expression>)"}]},{"content":"\\n&lt;p&gt;The object to which the property belongs.","pos":[854669,854715],"source":"\\n<p>The object to which the property belongs."},{"content":"If the property is static/shared, it must be null.&lt;/p&gt;\\n","pos":[854716,854772],"source":" If the property is static/shared, it must be null.</p>\\n"},{"pos":[856653,856701],"content":"Property(Expression, PropertyInfo, Expression[])","needQuote":true,"nodes":[{"content":"Property(Expression, PropertyInfo, Expression[])","pos":[0,48]}]},{"content":"\\n&lt;p&gt;The object to which the property belongs.","pos":[857801,857847],"source":"\\n<p>The object to which the property belongs."},{"content":"If the property is static/shared, it must be null.&lt;/p&gt;\\n","pos":[857848,857904],"source":" If the property is static/shared, it must be null.</p>\\n"},{"pos":[859410,859438],"content":"Property(Expression, String)","needQuote":true,"nodes":[{"content":"Property(Expression, String)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The name of a property to be accessed.&lt;/p&gt;\\n","pos":[860801,860850],"source":"\\n<p>The name of a property to be accessed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt; or &lt;em&gt;propertyName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[861860,861943],"source":"\\n<p>\\n<em>expression</em> or <em>propertyName</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;No property named &lt;em&gt;propertyName&lt;/em&gt; is defined in &lt;em&gt;expression&lt;/em&gt;.Type or its base types.&lt;/p&gt;\\n","pos":[862040,862148],"source":"\\n<p>No property named <em>propertyName</em> is defined in <em>expression</em>.Type or its base types.</p>\\n"},{"pos":[862752,862794],"content":"Property(Expression, String, Expression[])","needQuote":true,"nodes":[{"content":"Property(Expression, String, Expression[])","pos":[0,42]}]},{"content":"\\n&lt;p&gt;The object to which the property belongs.","pos":[863875,863921],"source":"\\n<p>The object to which the property belongs."},{"content":"If the property is static/shared, it must be null.&lt;/p&gt;\\n","pos":[863922,863978],"source":" If the property is static/shared, it must be null.</p>\\n"},{"content":"\\n&lt;p&gt;The name of the indexer.&lt;/p&gt;\\n","pos":[864049,864084],"source":"\\n<p>The name of the indexer.</p>\\n"},{"pos":[865364,865398],"content":"Property(Expression, Type, String)","needQuote":true,"nodes":[{"content":"Property(Expression, Type, String)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The containing object of the property.","pos":[866392,866435],"source":"\\n<p>The containing object of the property."},{"content":"This can be null for static properties.&lt;/p&gt;\\n","pos":[866436,866481],"source":" This can be null for static properties.</p>\\n"},{"content":"\\n&lt;p&gt;The property to be accessed.&lt;/p&gt;\\n","pos":[866755,866794],"source":"\\n<p>The property to be accessed.</p>\\n"},{"pos":[867525,867560],"content":"PropertyOrField(Expression, String)","needQuote":true,"nodes":[{"content":"PropertyOrField(Expression, String)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The name of a property or field to be accessed.&lt;/p&gt;\\n","pos":[868977,869035],"source":"\\n<p>The name of a property or field to be accessed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt; or &lt;em&gt;propertyOrFieldName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[870152,870242],"source":"\\n<p>\\n<em>expression</em> or <em>propertyOrFieldName</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;No property or field named &lt;em&gt;propertyOrFieldName&lt;/em&gt; is defined in &lt;em&gt;expression&lt;/em&gt;.Type or its base types.&lt;/p&gt;\\n","pos":[870339,870463],"source":"\\n<p>No property or field named <em>propertyOrFieldName</em> is defined in <em>expression</em>.Type or its base types.</p>\\n"},{"pos":[870912,870929],"content":"Quote(Expression)","needQuote":true,"nodes":[{"content":"Quote(Expression)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[872904,872962],"source":"\\n<p>\\n<em>expression</em> is <strong>null</strong>.</p>\\n"},{"pos":[873288,873296],"content":"Reduce()","needQuote":true,"nodes":[{"content":"Reduce()","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The reduced expression.&lt;/p&gt;\\n","pos":[874114,874148],"source":"\\n<p>The reduced expression.</p>\\n"},{"pos":[874495,874511],"content":"ReduceAndCheck()","needQuote":true,"nodes":[{"content":"ReduceAndCheck()","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The reduced expression.&lt;/p&gt;\\n","pos":[875341,875375],"source":"\\n<p>The reduced expression.</p>\\n"},{"pos":[875708,875726],"content":"ReduceExtensions()","needQuote":true,"nodes":[{"content":"ReduceExtensions()","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The reduced expression.&lt;/p&gt;\\n","pos":[876527,876561],"source":"\\n<p>The reduced expression.</p>\\n"},{"pos":[877103,877141],"content":"ReferenceEqual(Expression, Expression)","needQuote":true,"nodes":[{"content":"ReferenceEqual(Expression, Expression)","pos":[0,38]}]},{"pos":[880017,880058],"content":"ReferenceNotEqual(Expression, Expression)","needQuote":true,"nodes":[{"content":"ReferenceNotEqual(Expression, Expression)","pos":[0,41]}]},{"pos":[882711,882720],"content":"Rethrow()","needQuote":true,"nodes":[{"content":"Rethrow()","pos":[0,9]}]},{"pos":[884050,884063],"content":"Rethrow(Type)","needQuote":true,"nodes":[{"content":"Rethrow(Type)","pos":[0,13]}]},{"pos":[885704,885723],"content":"Return(LabelTarget)","needQuote":true,"nodes":[{"content":"Return(LabelTarget)","pos":[0,19]}]},{"pos":[887913,887944],"content":"Return(LabelTarget, Expression)","needQuote":true,"nodes":[{"content":"Return(LabelTarget, Expression)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The value that will be passed to the associated label upon jumping.&lt;/p&gt;\\n","pos":[889282,889360],"source":"\\n<p>The value that will be passed to the associated label upon jumping.</p>\\n"},{"pos":[890485,890522],"content":"Return(LabelTarget, Expression, Type)","needQuote":true,"nodes":[{"content":"Return(LabelTarget, Expression, Type)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The value that will be passed to the associated label upon jumping.&lt;/p&gt;\\n","pos":[891922,892000],"source":"\\n<p>The value that will be passed to the associated label upon jumping.</p>\\n"},{"pos":[893437,893462],"content":"Return(LabelTarget, Type)","needQuote":true,"nodes":[{"content":"Return(LabelTarget, Type)","pos":[0,25]}]},{"pos":[896140,896174],"content":"RightShift(Expression, Expression)","needQuote":true,"nodes":[{"content":"RightShift(Expression, Expression)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[898565,898635],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The right-shift operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[898748,898846],"source":"\\n<p>The right-shift operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[899501,899547],"content":"RightShift(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"RightShift(Expression, Expression, MethodInfo)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[902438,902508],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\\n","pos":[902605,902836],"source":"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the right-shift operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[902949,903094],"source":"\\n<p>\\n<em>method</em> is <strong>null</strong> and the right-shift operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[903692,903732],"content":"RightShiftAssign(Expression, Expression)","needQuote":true,"nodes":[{"content":"RightShiftAssign(Expression, Expression)","pos":[0,40]}]},{"pos":[906724,906776],"content":"RightShiftAssign(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"RightShiftAssign(Expression, Expression, MethodInfo)","pos":[0,52]}]},{"pos":[910403,910473],"content":"RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)","needQuote":true,"nodes":[{"content":"RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)","pos":[0,70]}]},{"pos":[914517,914567],"content":"RuntimeVariables(IEnumerable<ParameterExpression>)","needQuote":true,"nodes":[{"content":"RuntimeVariables(IEnumerable&lt;ParameterExpression&gt;)","pos":[0,50],"source":"RuntimeVariables(IEnumerable<ParameterExpression>)"}]},{"pos":[917437,917476],"content":"RuntimeVariables(ParameterExpression[])","needQuote":true,"nodes":[{"content":"RuntimeVariables(ParameterExpression[])","pos":[0,39]}]},{"pos":[920227,920259],"content":"Subtract(Expression, Expression)","needQuote":true,"nodes":[{"content":"Subtract(Expression, Expression)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[922680,922750],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The subtraction operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[922863,922961],"source":"\\n<p>The subtraction operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[923608,923652],"content":"Subtract(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"Subtract(Expression, Expression, MethodInfo)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[926572,926642],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\\n","pos":[926739,926970],"source":"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the subtraction operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[927083,927228],"source":"\\n<p>\\n<em>method</em> is <strong>null</strong> and the subtraction operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[927818,927856],"content":"SubtractAssign(Expression, Expression)","needQuote":true,"nodes":[{"content":"SubtractAssign(Expression, Expression)","pos":[0,38]}]},{"pos":[930859,930909],"content":"SubtractAssign(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"SubtractAssign(Expression, Expression, MethodInfo)","pos":[0,50]}]},{"pos":[934547,934615],"content":"SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression)","needQuote":true,"nodes":[{"content":"SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression)","pos":[0,68]}]},{"pos":[938649,938694],"content":"SubtractAssignChecked(Expression, Expression)","needQuote":true,"nodes":[{"content":"SubtractAssignChecked(Expression, Expression)","pos":[0,45]}]},{"pos":[941750,941807],"content":"SubtractAssignChecked(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"SubtractAssignChecked(Expression, Expression, MethodInfo)","pos":[0,57]}]},{"pos":[945498,945573],"content":"SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)","needQuote":true,"nodes":[{"content":"SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)","pos":[0,75]}]},{"pos":[949621,949660],"content":"SubtractChecked(Expression, Expression)","needQuote":true,"nodes":[{"content":"SubtractChecked(Expression, Expression)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[952105,952175],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The subtraction operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[952288,952386],"source":"\\n<p>The subtraction operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[953061,953112],"content":"SubtractChecked(Expression, Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"SubtractChecked(Expression, Expression, MethodInfo)","pos":[0,51]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[956057,956127],"source":"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\\n","pos":[956224,956455],"source":"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the subtraction operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[956568,956713],"source":"\\n<p>\\n<em>method</em> is <strong>null</strong> and the subtraction operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n"},{"pos":[957397,957441],"content":"Switch(Expression, Expression, SwitchCase[])","needQuote":true,"nodes":[{"content":"Switch(Expression, Expression, SwitchCase[])","pos":[0,44]}]},{"content":"\\n&lt;p&gt;The value to be tested against each case.&lt;/p&gt;\\n","pos":[958573,958625],"source":"\\n<p>The value to be tested against each case.</p>\\n"},{"content":"\\n&lt;p&gt;The result of the switch if &lt;em&gt;switchValue&lt;/em&gt; does not match any of the cases.&lt;/p&gt;\\n","pos":[958716,958808],"source":"\\n<p>The result of the switch if <em>switchValue</em> does not match any of the cases.</p>\\n"},{"content":"\\n&lt;p&gt;The set of cases for this switch expression.&lt;/p&gt;\\n","pos":[958895,958950],"source":"\\n<p>The set of cases for this switch expression.</p>\\n"},{"pos":[960337,960404],"content":"Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)","needQuote":true,"nodes":[{"content":"Switch(Expression, Expression, MethodInfo, IEnumerable&lt;SwitchCase&gt;)","pos":[0,67],"source":"Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)"}]},{"content":"\\n&lt;p&gt;The value to be tested against each case.&lt;/p&gt;\\n","pos":[961660,961712],"source":"\\n<p>The value to be tested against each case.</p>\\n"},{"content":"\\n&lt;p&gt;The result of the switch if &lt;em&gt;switchValue&lt;/em&gt; does not match any of the cases.&lt;/p&gt;\\n","pos":[961803,961895],"source":"\\n<p>The result of the switch if <em>switchValue</em> does not match any of the cases.</p>\\n"},{"content":"\\n&lt;p&gt;The equality comparison method to use.&lt;/p&gt;\\n","pos":[961979,962028],"source":"\\n<p>The equality comparison method to use.</p>\\n"},{"content":"\\n&lt;p&gt;The set of cases for this switch expression.&lt;/p&gt;\\n","pos":[962153,962208],"source":"\\n<p>The set of cases for this switch expression.</p>\\n"},{"pos":[963627,963683],"content":"Switch(Expression, Expression, MethodInfo, SwitchCase[])","needQuote":true,"nodes":[{"content":"Switch(Expression, Expression, MethodInfo, SwitchCase[])","pos":[0,56]}]},{"content":"\\n&lt;p&gt;The value to be tested against each case.&lt;/p&gt;\\n","pos":[964894,964946],"source":"\\n<p>The value to be tested against each case.</p>\\n"},{"content":"\\n&lt;p&gt;The result of the switch if &lt;em&gt;switchValue&lt;/em&gt; does not match any of the cases.&lt;/p&gt;\\n","pos":[965037,965129],"source":"\\n<p>The result of the switch if <em>switchValue</em> does not match any of the cases.</p>\\n"},{"content":"\\n&lt;p&gt;The equality comparison method to use.&lt;/p&gt;\\n","pos":[965213,965262],"source":"\\n<p>The equality comparison method to use.</p>\\n"},{"content":"\\n&lt;p&gt;The set of cases for this switch expression.&lt;/p&gt;\\n","pos":[965349,965404],"source":"\\n<p>The set of cases for this switch expression.</p>\\n"},{"pos":[966551,966583],"content":"Switch(Expression, SwitchCase[])","needQuote":true,"nodes":[{"content":"Switch(Expression, SwitchCase[])","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The value to be tested against each case.&lt;/p&gt;\\n","pos":[967627,967679],"source":"\\n<p>The value to be tested against each case.</p>\\n"},{"content":"\\n&lt;p&gt;The set of cases for this switch expression.&lt;/p&gt;\\n","pos":[967766,967821],"source":"\\n<p>The set of cases for this switch expression.</p>\\n"},{"pos":[969172,969245],"content":"Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)","needQuote":true,"nodes":[{"content":"Switch(Type, Expression, Expression, MethodInfo, IEnumerable&lt;SwitchCase&gt;)","pos":[0,73],"source":"Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)"}]},{"content":"\\n&lt;p&gt;The result type of the switch.&lt;/p&gt;\\n","pos":[970509,970550],"source":"\\n<p>The result type of the switch.</p>\\n"},{"content":"\\n&lt;p&gt;The value to be tested against each case.&lt;/p&gt;\\n","pos":[970641,970693],"source":"\\n<p>The value to be tested against each case.</p>\\n"},{"content":"\\n&lt;p&gt;The result of the switch if &lt;em&gt;switchValue&lt;/em&gt; does not match any of the cases.&lt;/p&gt;\\n","pos":[970784,970876],"source":"\\n<p>The result of the switch if <em>switchValue</em> does not match any of the cases.</p>\\n"},{"content":"\\n&lt;p&gt;The equality comparison method to use.&lt;/p&gt;\\n","pos":[970960,971009],"source":"\\n<p>The equality comparison method to use.</p>\\n"},{"content":"\\n&lt;p&gt;The set of cases for this switch expression.&lt;/p&gt;\\n","pos":[971134,971189],"source":"\\n<p>The set of cases for this switch expression.</p>\\n"},{"pos":[972675,972737],"content":"Switch(Type, Expression, Expression, MethodInfo, SwitchCase[])","needQuote":true,"nodes":[{"content":"Switch(Type, Expression, Expression, MethodInfo, SwitchCase[])","pos":[0,62]}]},{"content":"\\n&lt;p&gt;The result type of the switch.&lt;/p&gt;\\n","pos":[973957,973998],"source":"\\n<p>The result type of the switch.</p>\\n"},{"content":"\\n&lt;p&gt;The value to be tested against each case.&lt;/p&gt;\\n","pos":[974089,974141],"source":"\\n<p>The value to be tested against each case.</p>\\n"},{"content":"\\n&lt;p&gt;The result of the switch if &lt;em&gt;switchValue&lt;/em&gt; does not match any of the cases.&lt;/p&gt;\\n","pos":[974232,974324],"source":"\\n<p>The result of the switch if <em>switchValue</em> does not match any of the cases.</p>\\n"},{"content":"\\n&lt;p&gt;The equality comparison method to use.&lt;/p&gt;\\n","pos":[974408,974457],"source":"\\n<p>The equality comparison method to use.</p>\\n"},{"content":"\\n&lt;p&gt;The set of cases for this switch expression.&lt;/p&gt;\\n","pos":[974544,974599],"source":"\\n<p>The set of cases for this switch expression.</p>\\n"},{"pos":[975903,975950],"content":"SwitchCase(Expression, IEnumerable<Expression>)","needQuote":true,"nodes":[{"content":"SwitchCase(Expression, IEnumerable&lt;Expression&gt;)","pos":[0,47],"source":"SwitchCase(Expression, IEnumerable<Expression>)"}]},{"content":"\\n&lt;p&gt;The body of the case.&lt;/p&gt;\\n","pos":[977082,977114],"source":"\\n<p>The body of the case.</p>\\n"},{"content":"\\n&lt;p&gt;The test values of the case.&lt;/p&gt;\\n","pos":[977244,977283],"source":"\\n<p>The test values of the case.</p>\\n"},{"pos":[978388,978424],"content":"SwitchCase(Expression, Expression[])","needQuote":true,"nodes":[{"content":"SwitchCase(Expression, Expression[])","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The body of the case.&lt;/p&gt;\\n","pos":[979494,979526],"source":"\\n<p>The body of the case.</p>\\n"},{"content":"\\n&lt;p&gt;The test values of the case.&lt;/p&gt;\\n","pos":[979618,979657],"source":"\\n<p>The test values of the case.</p>\\n"},{"pos":[980520,980542],"content":"SymbolDocument(String)","needQuote":true,"nodes":[{"content":"SymbolDocument(String)","pos":[0,22]}]},{"pos":[982425,982453],"content":"SymbolDocument(String, Guid)","needQuote":true,"nodes":[{"content":"SymbolDocument(String, Guid)","pos":[0,28]}]},{"pos":[984824,984858],"content":"SymbolDocument(String, Guid, Guid)","needQuote":true,"nodes":[{"content":"SymbolDocument(String, Guid, Guid)","pos":[0,34]}]},{"pos":[987745,987785],"content":"SymbolDocument(String, Guid, Guid, Guid)","needQuote":true,"nodes":[{"content":"SymbolDocument(String, Guid, Guid, Guid)","pos":[0,40]}]},{"pos":[991070,991087],"content":"Throw(Expression)","needQuote":true,"nodes":[{"content":"Throw(Expression)","pos":[0,17]}]},{"pos":[992780,992803],"content":"Throw(Expression, Type)","needQuote":true,"nodes":[{"content":"Throw(Expression, Type)","pos":[0,23]}]},{"pos":[994593,994603],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[996084,996118],"content":"TryCatch(Expression, CatchBlock[])","needQuote":true,"nodes":[{"content":"TryCatch(Expression, CatchBlock[])","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The body of the try block.&lt;/p&gt;\\n","pos":[997170,997207],"source":"\\n<p>The body of the try block.</p>\\n"},{"pos":[998654,998707],"content":"TryCatchFinally(Expression, Expression, CatchBlock[])","needQuote":true,"nodes":[{"content":"TryCatchFinally(Expression, Expression, CatchBlock[])","pos":[0,53]}]},{"content":"\\n&lt;p&gt;The body of the try block.&lt;/p&gt;\\n","pos":[999848,999885],"source":"\\n<p>The body of the try block.</p>\\n"},{"content":"\\n&lt;p&gt;The body of the finally block.&lt;/p&gt;\\n","pos":[999972,1000013],"source":"\\n<p>The body of the finally block.</p>\\n"},{"pos":[1001428,1001460],"content":"TryFault(Expression, Expression)","needQuote":true,"nodes":[{"content":"TryFault(Expression, Expression)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The body of the try block.&lt;/p&gt;\\n","pos":[1002451,1002488],"source":"\\n<p>The body of the try block.</p>\\n"},{"content":"\\n&lt;p&gt;The body of the fault block.&lt;/p&gt;\\n","pos":[1002573,1002612],"source":"\\n<p>The body of the fault block.</p>\\n"},{"pos":[1003383,1003417],"content":"TryFinally(Expression, Expression)","needQuote":true,"nodes":[{"content":"TryFinally(Expression, Expression)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The body of the try block.&lt;/p&gt;\\n","pos":[1004422,1004459],"source":"\\n<p>The body of the try block.</p>\\n"},{"content":"\\n&lt;p&gt;The body of the finally block.&lt;/p&gt;\\n","pos":[1004546,1004587],"source":"\\n<p>The body of the finally block.</p>\\n"},{"pos":[1005249,1005283],"content":"TryGetActionType(Type[], out Type)","needQuote":true,"nodes":[{"content":"TryGetActionType(Type[], out Type)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;An array of Type objects that specify the type arguments for the System.Action delegate type.&lt;/p&gt;\\n","pos":[1006270,1006374],"source":"\\n<p>An array of Type objects that specify the type arguments for the System.Action delegate type.</p>\\n"},{"content":"\\n&lt;p&gt;When this method returns, contains the generic System.Action delegate type that has specific type arguments.","pos":[1006441,1006554],"source":"\\n<p>When this method returns, contains the generic System.Action delegate type that has specific type arguments."},{"content":"Contains null if there is no generic System.Action delegate that matches the &lt;em&gt;typeArgs&lt;/em&gt;.This parameter is passed uninitialized.&lt;/p&gt;\\n","pos":[1006555,1006695],"source":" Contains null if there is no generic System.Action delegate that matches the <em>typeArgs</em>.This parameter is passed uninitialized.</p>\\n"},{"content":"\\n&lt;p&gt;true if generic System.Action delegate type was created for specific &lt;em&gt;typeArgs&lt;/em&gt;; false otherwise.&lt;/p&gt;\\n","pos":[1006756,1006871],"source":"\\n<p>true if generic System.Action delegate type was created for specific <em>typeArgs</em>; false otherwise.</p>\\n"},{"pos":[1007538,1007570],"content":"TryGetFuncType(Type[], out Type)","needQuote":true,"nodes":[{"content":"TryGetFuncType(Type[], out Type)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;An array of Type objects that specify the type arguments for the System.Func delegate type.&lt;/p&gt;\\n","pos":[1008617,1008719],"source":"\\n<p>An array of Type objects that specify the type arguments for the System.Func delegate type.</p>\\n"},{"content":"\\n&lt;p&gt;When this method returns, contains the generic System.Func delegate type that has specific type arguments.","pos":[1008784,1008895],"source":"\\n<p>When this method returns, contains the generic System.Func delegate type that has specific type arguments."},{"content":"Contains null if there is no generic System.Func delegate that matches the &lt;em&gt;typeArgs&lt;/em&gt;.This parameter is passed uninitialized.&lt;/p&gt;\\n","pos":[1008896,1009034],"source":" Contains null if there is no generic System.Func delegate that matches the <em>typeArgs</em>.This parameter is passed uninitialized.</p>\\n"},{"content":"\\n&lt;p&gt;true if generic System.Func delegate type was created for specific &lt;em&gt;typeArgs&lt;/em&gt;; false otherwise.&lt;/p&gt;\\n","pos":[1009095,1009208],"source":"\\n<p>true if generic System.Func delegate type was created for specific <em>typeArgs</em>; false otherwise.</p>\\n"},{"pos":[1009903,1009927],"content":"TypeAs(Expression, Type)","needQuote":true,"nodes":[{"content":"TypeAs(Expression, Type)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt; or &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[1012291,1012366],"source":"\\n<p>\\n<em>expression</em> or <em>type</em> is <strong>null</strong>.</p>\\n"},{"pos":[1012852,1012879],"content":"TypeEqual(Expression, Type)","needQuote":true,"nodes":[{"content":"TypeEqual(Expression, Type)","pos":[0,27]}]},{"pos":[1015656,1015680],"content":"TypeIs(Expression, Type)","needQuote":true,"nodes":[{"content":"TypeIs(Expression, Type)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt; or &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[1018042,1018117],"source":"\\n<p>\\n<em>expression</em> or <em>type</em> is <strong>null</strong>.</p>\\n"},{"pos":[1018567,1018588],"content":"UnaryPlus(Expression)","needQuote":true,"nodes":[{"content":"UnaryPlus(Expression)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[1020463,1020521],"source":"\\n<p>\\n<em>expression</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The unary plus operator is not defined for &lt;em&gt;expression&lt;/em&gt;.Type.&lt;/p&gt;\\n","pos":[1020634,1020713],"source":"\\n<p>The unary plus operator is not defined for <em>expression</em>.Type.</p>\\n"},{"pos":[1021247,1021280],"content":"UnaryPlus(Expression, MethodInfo)","needQuote":true,"nodes":[{"content":"UnaryPlus(Expression, MethodInfo)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[1023658,1023716],"source":"\\n<p>\\n<em>expression</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly one argument.&lt;/p&gt;\\n","pos":[1023813,1024043],"source":"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly one argument.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the unary plus operator is not defined for &lt;em&gt;expression&lt;/em&gt;.Type.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;expression&lt;/em&gt;.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\\n","pos":[1024156,1024487],"source":"\\n<p>\\n<em>method</em> is <strong>null</strong> and the unary plus operator is not defined for <em>expression</em>.Type.</p>\\n<p>-or-</p>\\n<p>\\n<em>expression</em>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <em>method</em>.</p>\\n"},{"pos":[1024970,1024993],"content":"Unbox(Expression, Type)","needQuote":true,"nodes":[{"content":"Unbox(Expression, Type)","pos":[0,23]}]},{"pos":[1026805,1026819],"content":"Variable(Type)","needQuote":true,"nodes":[{"content":"Variable(Type)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The type of the parameter or variable.&lt;/p&gt;\\n","pos":[1027709,1027758],"source":"\\n<p>The type of the parameter or variable.</p>\\n"},{"pos":[1028412,1028434],"content":"Variable(Type, String)","needQuote":true,"nodes":[{"content":"Variable(Type, String)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The type of the parameter or variable.&lt;/p&gt;\\n","pos":[1029368,1029417],"source":"\\n<p>The type of the parameter or variable.</p>\\n"},{"content":"\\n&lt;p&gt;The name of the parameter or variable.","pos":[1029480,1029523],"source":"\\n<p>The name of the parameter or variable."},{"content":"This name is used for debugging or printing purpose only.&lt;/p&gt;\\n","pos":[1029524,1029587],"source":" This name is used for debugging or printing purpose only.</p>\\n"},{"pos":[1030313,1030345],"content":"VisitChildren(ExpressionVisitor)","needQuote":true,"nodes":[{"content":"VisitChildren(ExpressionVisitor)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The expression being visited, or an expression which should replace it in the tree.&lt;/p&gt;\\n","pos":[1031469,1031563],"source":"\\n<p>The expression being visited, or an expression which should replace it in the tree.</p>\\n"},{"pos":[1031788,1031811],"content":"System.Linq.Expressions","needQuote":true,"nodes":[{"content":"System.Linq.Expressions","pos":[0,23]}]},{"pos":[1031993,1031999],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[1032172,1032186],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[1032305,1032311],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[1032378,1032379],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[1032429,1032435],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[1032495,1032496],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[1032579,1032585],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[1032652,1032653],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[1032703,1032709],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[1032769,1032770],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[1032984,1033006],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[1033154,1033160],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[1033227,1033228],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[1033278,1033284],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[1033345,1033346]},{"pos":[1033401,1033407],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[1033467,1033468],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[1033565,1033571],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[1033638,1033639],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[1033689,1033695],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[1033756,1033757]},{"pos":[1033812,1033818],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[1033878,1033879],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[1034124,1034155],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[1034321,1034336],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[1034412,1034413],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[1034463,1034469],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[1034530,1034531]},{"pos":[1034586,1034592],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[1034652,1034653],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[1034759,1034774],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[1034850,1034851],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[1034901,1034907],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[1034968,1034969]},{"pos":[1035024,1035030],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[1035090,1035091],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[1035321,1035334],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[1035435,1035446],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[1035518,1035519],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[1035546,1035547],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[1035620,1035631],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[1035703,1035704],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[1035731,1035732],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[1035907,1035916],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[1036009,1036016],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[1036084,1036085],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[1036112,1036113],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[1036182,1036189],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[1036257,1036258],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[1036285,1036286],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[1036461,1036478],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[1036587,1036602],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[1036678,1036679],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[1036706,1036707],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[1036784,1036799],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[1036875,1036876],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[1036903,1036904],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[1037049,1037055],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[1037187,1037194],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[1037384,1037398],"content":"ExpressionType","needQuote":true,"nodes":[{"content":"ExpressionType","pos":[0,14]}]},{"pos":[1037599,1037603],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[1037787,1037804],"content":"ExpressionVisitor","needQuote":true,"nodes":[{"content":"ExpressionVisitor","pos":[0,17]}]},{"pos":[1038054,1038064],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[1038299,1038315],"content":"BinaryExpression","needQuote":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[1038550,1038560],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[1038726,1038743],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[1038951,1038967],"content":"LambdaExpression","needQuote":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[1039292,1039315],"content":"IEnumerable<Expression>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;Expression&gt;","pos":[0,23],"source":"IEnumerable<Expression>"}]},{"pos":[1039609,1039620],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[1039705,1039706],"content":"<","needQuote":true,"nodes":[]},{"pos":[1039777,1039787],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[1039940,1039951],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[1040037,1040040]},{"pos":[1040118,1040128],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[1040188,1040189],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[1040491,1040506],"content":"IndexExpression","needQuote":true,"nodes":[{"content":"IndexExpression","pos":[0,15]}]},{"pos":[1040722,1040736],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[1040955,1040966],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[1041030,1041031],"content":"<","needQuote":true,"nodes":[]},{"pos":[1041058,1041059],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[1041179,1041190],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[1041255,1041258]},{"pos":[1041292,1041293],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[1041320,1041321],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[1041524,1041550],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[1041727,1041739],"content":"Expression[]","needQuote":true,"nodes":[{"content":"Expression[]","pos":[0,12]}]},{"pos":[1041934,1041944],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"content":"[]","pos":[1042005,1042007]},{"pos":[1042093,1042103],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[1042163,1042165],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[1042358,1042378],"content":"MethodCallExpression","needQuote":true,"nodes":[{"content":"MethodCallExpression","pos":[0,20]}]},{"pos":[1042642,1042657],"content":"UnaryExpression","needQuote":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[1042889,1042899],"content":"MemberInfo","needQuote":true,"nodes":[{"content":"MemberInfo","pos":[0,10]}]},{"pos":[1043122,1043138],"content":"MemberAssignment","needQuote":true,"nodes":[{"content":"MemberAssignment","pos":[0,16]}]},{"pos":[1043390,1043405],"content":"BlockExpression","needQuote":true,"nodes":[{"content":"BlockExpression","pos":[0,15]}]},{"pos":[1043736,1043768],"content":"IEnumerable<ParameterExpression>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;ParameterExpression&gt;","pos":[0,32],"source":"IEnumerable<ParameterExpression>"}]},{"pos":[1044089,1044100],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[1044185,1044186],"content":"<","needQuote":true,"nodes":[]},{"pos":[1044266,1044285],"content":"ParameterExpression","needQuote":true,"nodes":[{"content":"ParameterExpression","pos":[0,19]}]},{"pos":[1044447,1044458],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[1044544,1044547]},{"pos":[1044634,1044653],"content":"ParameterExpression","needQuote":true,"nodes":[{"content":"ParameterExpression","pos":[0,19]}]},{"pos":[1044722,1044723],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[1045048,1045059],"content":"LabelTarget","needQuote":true,"nodes":[{"content":"LabelTarget","pos":[0,11]}]},{"pos":[1045295,1045309],"content":"GotoExpression","needQuote":true,"nodes":[{"content":"GotoExpression","pos":[0,14]}]},{"pos":[1045512,1045518],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[1045626,1045632],"content":"Type[]","needQuote":true,"nodes":[{"content":"Type[]","pos":[0,6]}]},{"pos":[1045752,1045756],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":"[]","pos":[1045794,1045796]},{"pos":[1045859,1045863],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[1045900,1045902],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[1046082,1046101],"content":"ParameterExpression","needQuote":true,"nodes":[{"content":"ParameterExpression","pos":[0,19]}]},{"pos":[1046357,1046367],"content":"CatchBlock","needQuote":true,"nodes":[{"content":"CatchBlock","pos":[0,10]}]},{"pos":[1046604,1046622],"content":"SymbolDocumentInfo","needQuote":true,"nodes":[{"content":"SymbolDocumentInfo","pos":[0,18]}]},{"pos":[1046884,1046903],"content":"DebugInfoExpression","needQuote":true,"nodes":[{"content":"DebugInfoExpression","pos":[0,19]}]},{"pos":[1047170,1047191],"content":"ConditionalExpression","needQuote":true,"nodes":[{"content":"ConditionalExpression","pos":[0,21]}]},{"pos":[1047461,1047479],"content":"ConstantExpression","needQuote":true,"nodes":[{"content":"ConstantExpression","pos":[0,18]}]},{"pos":[1047693,1047698],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[1047885,1047902],"content":"DefaultExpression","needQuote":true,"nodes":[{"content":"DefaultExpression","pos":[0,17]}]},{"pos":[1048153,1048164],"content":"ElementInit","needQuote":true,"nodes":[{"content":"ElementInit","pos":[0,11]}]},{"pos":[1048383,1048392],"content":"FieldInfo","needQuote":true,"nodes":[{"content":"FieldInfo","pos":[0,9]}]},{"pos":[1048612,1048628],"content":"MemberExpression","needQuote":true,"nodes":[{"content":"MemberExpression","pos":[0,16]}]},{"pos":[1048885,1048905],"content":"InvocationExpression","needQuote":true,"nodes":[{"content":"InvocationExpression","pos":[0,20]}]},{"pos":[1049169,1049184],"content":"LabelExpression","needQuote":true,"nodes":[{"content":"LabelExpression","pos":[0,15]}]},{"pos":[1049385,1049406],"content":"ParameterExpression[]","needQuote":true,"nodes":[{"content":"ParameterExpression[]","pos":[0,21]}]},{"pos":[1049637,1049656],"content":"ParameterExpression","needQuote":true,"nodes":[{"content":"ParameterExpression","pos":[0,19]}]},{"content":"[]","pos":[1049726,1049728]},{"pos":[1049823,1049842],"content":"ParameterExpression","needQuote":true,"nodes":[{"content":"ParameterExpression","pos":[0,19]}]},{"pos":[1049911,1049913],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[1050158,1050179],"content":"Expression<TDelegate>","needQuote":true,"nodes":[{"content":"Expression&lt;TDelegate&gt;","pos":[0,21],"source":"Expression<TDelegate>"}]},{"pos":[1050409,1050419],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[1050479,1050480],"content":"<","needQuote":true,"nodes":[]},{"pos":[1050507,1050516],"content":"TDelegate","needQuote":true,"nodes":[{"content":"TDelegate","pos":[0,9]}]},{"pos":[1050640,1050650],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"content":"(Of","pos":[1050711,1050714]},{"pos":[1050748,1050757],"content":"TDelegate","needQuote":true,"nodes":[{"content":"TDelegate","pos":[0,9]}]},{"pos":[1050792,1050793],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[1051053,1051074],"content":"Expression<TDelegate>","needQuote":true,"nodes":[{"content":"Expression&lt;TDelegate&gt;","pos":[0,21],"source":"Expression<TDelegate>"}]},{"pos":[1051304,1051314],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[1051374,1051375],"content":"<","needQuote":true,"nodes":[]},{"pos":[1051402,1051411],"content":"TDelegate","needQuote":true,"nodes":[{"content":"TDelegate","pos":[0,9]}]},{"pos":[1051535,1051545],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"content":"(Of","pos":[1051606,1051609]},{"pos":[1051643,1051652],"content":"TDelegate","needQuote":true,"nodes":[{"content":"TDelegate","pos":[0,9]}]},{"pos":[1051687,1051688],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[1052022,1052046],"content":"IEnumerable<ElementInit>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;ElementInit&gt;","pos":[0,24],"source":"IEnumerable<ElementInit>"}]},{"pos":[1052343,1052354],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[1052439,1052440],"content":"<","needQuote":true,"nodes":[]},{"pos":[1052512,1052523],"content":"ElementInit","needQuote":true,"nodes":[{"content":"ElementInit","pos":[0,11]}]},{"pos":[1052677,1052688],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[1052774,1052777]},{"pos":[1052856,1052867],"content":"ElementInit","needQuote":true,"nodes":[{"content":"ElementInit","pos":[0,11]}]},{"pos":[1052928,1052929],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[1053236,1053253],"content":"MemberListBinding","needQuote":true,"nodes":[{"content":"MemberListBinding","pos":[0,17]}]},{"pos":[1053452,1053465],"content":"ElementInit[]","needQuote":true,"nodes":[{"content":"ElementInit[]","pos":[0,13]}]},{"pos":[1053664,1053675],"content":"ElementInit","needQuote":true,"nodes":[{"content":"ElementInit","pos":[0,11]}]},{"content":"[]","pos":[1053737,1053739]},{"pos":[1053826,1053837],"content":"ElementInit","needQuote":true,"nodes":[{"content":"ElementInit","pos":[0,11]}]},{"pos":[1053898,1053900],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[1054088,1054101],"content":"NewExpression","needQuote":true,"nodes":[{"content":"NewExpression","pos":[0,13]}]},{"pos":[1054347,1054365],"content":"ListInitExpression","needQuote":true,"nodes":[{"content":"ListInitExpression","pos":[0,18]}]},{"pos":[1054622,1054636],"content":"LoopExpression","needQuote":true,"nodes":[{"content":"LoopExpression","pos":[0,14]}]},{"pos":[1054885,1054903],"content":"GotoExpressionKind","needQuote":true,"nodes":[{"content":"GotoExpressionKind","pos":[0,18]}]},{"pos":[1055146,1055158],"content":"PropertyInfo","needQuote":true,"nodes":[{"content":"PropertyInfo","pos":[0,12]}]},{"pos":[1055459,1055482],"content":"IEnumerable<CatchBlock>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;CatchBlock&gt;","pos":[0,23],"source":"IEnumerable<CatchBlock>"}]},{"pos":[1055776,1055787],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[1055872,1055873],"content":"<","needQuote":true,"nodes":[]},{"pos":[1055944,1055954],"content":"CatchBlock","needQuote":true,"nodes":[{"content":"CatchBlock","pos":[0,10]}]},{"pos":[1056107,1056118],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[1056204,1056207]},{"pos":[1056285,1056295],"content":"CatchBlock","needQuote":true,"nodes":[{"content":"CatchBlock","pos":[0,10]}]},{"pos":[1056355,1056356],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[1056656,1056669],"content":"TryExpression","needQuote":true,"nodes":[{"content":"TryExpression","pos":[0,13]}]},{"pos":[1056988,1057014],"content":"IEnumerable<MemberBinding>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;MemberBinding&gt;","pos":[0,26],"source":"IEnumerable<MemberBinding>"}]},{"pos":[1057317,1057328],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[1057413,1057414],"content":"<","needQuote":true,"nodes":[]},{"pos":[1057488,1057501],"content":"MemberBinding","needQuote":true,"nodes":[{"content":"MemberBinding","pos":[0,13]}]},{"pos":[1057657,1057668],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[1057754,1057757]},{"pos":[1057838,1057851],"content":"MemberBinding","needQuote":true,"nodes":[{"content":"MemberBinding","pos":[0,13]}]},{"pos":[1057914,1057915],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[1058230,1058249],"content":"MemberMemberBinding","needQuote":true,"nodes":[{"content":"MemberMemberBinding","pos":[0,19]}]},{"pos":[1058456,1058471],"content":"MemberBinding[]","needQuote":true,"nodes":[{"content":"MemberBinding[]","pos":[0,15]}]},{"pos":[1058678,1058691],"content":"MemberBinding","needQuote":true,"nodes":[{"content":"MemberBinding","pos":[0,13]}]},{"content":"[]","pos":[1058755,1058757]},{"pos":[1058846,1058859],"content":"MemberBinding","needQuote":true,"nodes":[{"content":"MemberBinding","pos":[0,13]}]},{"pos":[1058922,1058924],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[1059123,1059143],"content":"MemberInitExpression","needQuote":true,"nodes":[{"content":"MemberInitExpression","pos":[0,20]}]},{"pos":[1059395,1059410],"content":"ConstructorInfo","needQuote":true,"nodes":[{"content":"ConstructorInfo","pos":[0,15]}]},{"pos":[1059714,1059737],"content":"IEnumerable<MemberInfo>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;MemberInfo&gt;","pos":[0,23],"source":"IEnumerable<MemberInfo>"}]},{"pos":[1060019,1060030],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[1060115,1060116],"content":"<","needQuote":true,"nodes":[]},{"pos":[1060181,1060191],"content":"MemberInfo","needQuote":true,"nodes":[{"content":"MemberInfo","pos":[0,10]}]},{"pos":[1060338,1060349],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[1060435,1060438]},{"pos":[1060510,1060520],"content":"MemberInfo","needQuote":true,"nodes":[{"content":"MemberInfo","pos":[0,10]}]},{"pos":[1060574,1060575],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[1060808,1060820],"content":"MemberInfo[]","needQuote":true,"nodes":[{"content":"MemberInfo[]","pos":[0,12]}]},{"pos":[1060997,1061007],"content":"MemberInfo","needQuote":true,"nodes":[{"content":"MemberInfo","pos":[0,10]}]},{"content":"[]","pos":[1061062,1061064]},{"pos":[1061144,1061154],"content":"MemberInfo","needQuote":true,"nodes":[{"content":"MemberInfo","pos":[0,10]}]},{"pos":[1061208,1061210],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[1061401,1061419],"content":"NewArrayExpression","needQuote":true,"nodes":[{"content":"NewArrayExpression","pos":[0,18]}]},{"pos":[1061688,1061714],"content":"RuntimeVariablesExpression","needQuote":true,"nodes":[{"content":"RuntimeVariablesExpression","pos":[0,26]}]},{"pos":[1061939,1061951],"content":"SwitchCase[]","needQuote":true,"nodes":[{"content":"SwitchCase[]","pos":[0,12]}]},{"pos":[1062146,1062156],"content":"SwitchCase","needQuote":true,"nodes":[{"content":"SwitchCase","pos":[0,10]}]},{"content":"[]","pos":[1062217,1062219]},{"pos":[1062305,1062315],"content":"SwitchCase","needQuote":true,"nodes":[{"content":"SwitchCase","pos":[0,10]}]},{"pos":[1062375,1062377],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[1062566,1062582],"content":"SwitchExpression","needQuote":true,"nodes":[{"content":"SwitchExpression","pos":[0,16]}]},{"pos":[1062907,1062930],"content":"IEnumerable<SwitchCase>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;SwitchCase&gt;","pos":[0,23],"source":"IEnumerable<SwitchCase>"}]},{"pos":[1063224,1063235],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[1063320,1063321],"content":"<","needQuote":true,"nodes":[]},{"pos":[1063392,1063402],"content":"SwitchCase","needQuote":true,"nodes":[{"content":"SwitchCase","pos":[0,10]}]},{"pos":[1063555,1063566],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[1063652,1063655]},{"pos":[1063733,1063743],"content":"SwitchCase","needQuote":true,"nodes":[{"content":"SwitchCase","pos":[0,10]}]},{"pos":[1063803,1063804],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[1064101,1064111],"content":"SwitchCase","needQuote":true,"nodes":[{"content":"SwitchCase","pos":[0,10]}]},{"pos":[1064300,1064304],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[1064458,1064468],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[1064563,1064571],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[1064640,1064641],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[1064668,1064669],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[1064739,1064747],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[1064816,1064817],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[1064844,1064845],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[1064986,1064998],"content":"CatchBlock[]","needQuote":true,"nodes":[{"content":"CatchBlock[]","pos":[0,12]}]},{"pos":[1065193,1065203],"content":"CatchBlock","needQuote":true,"nodes":[{"content":"CatchBlock","pos":[0,10]}]},{"content":"[]","pos":[1065264,1065266]},{"pos":[1065352,1065362],"content":"CatchBlock","needQuote":true,"nodes":[{"content":"CatchBlock","pos":[0,10]}]},{"pos":[1065422,1065424],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[1065617,1065637],"content":"TypeBinaryExpression","needQuote":true,"nodes":[{"content":"TypeBinaryExpression","pos":[0,20]}]},{"pos":[1065856,1065877],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[1066086,1066111],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[1066324,1066341],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[1066530,1066553],"content":"AmbiguousMatchException","needQuote":true,"nodes":[{"content":"AmbiguousMatchException","pos":[0,23]}]}],"content":"items:\n- uid: System.Linq.Expressions.Expression\n  commentId: T:System.Linq.Expressions.Expression\n  id: Expression\n  parent: System.Linq.Expressions\n  children:\n  - System.Linq.Expressions.Expression.#ctor\n  - System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)\n  - System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.CanReduce\n  - System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)\n  - System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Constant(System.Object)\n  - System.Linq.Expressions.Expression.Constant(System.Object,System.Type)\n  - System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)\n  - System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Default(System.Type)\n  - System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Empty\n  - System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)\n  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)\n  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)\n  - System.Linq.Expressions.Expression.GetActionType(System.Type[])\n  - System.Linq.Expressions.Expression.GetDelegateType(System.Type[])\n  - System.Linq.Expressions.Expression.GetFuncType(System.Type[])\n  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)\n  - System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Label\n  - System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Label(System.String)\n  - System.Linq.Expressions.Expression.Label(System.Type)\n  - System.Linq.Expressions.Expression.Label(System.Type,System.String)\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])\n  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)\n  - System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})\n  - System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])\n  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])\n  - System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  - System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])\n  - System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.New(System.Type)\n  - System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.NodeType\n  - System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Parameter(System.Type)\n  - System.Linq.Expressions.Expression.Parameter(System.Type,System.String)\n  - System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)\n  - System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)\n  - System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Reduce\n  - System.Linq.Expressions.Expression.ReduceAndCheck\n  - System.Linq.Expressions.Expression.ReduceExtensions\n  - System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Rethrow\n  - System.Linq.Expressions.Expression.Rethrow(System.Type)\n  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)\n  - System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  - System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  - System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  - System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.SymbolDocument(System.String)\n  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)\n  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)\n  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)\n  - System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.ToString\n  - System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  - System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  - System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)\n  - System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)\n  - System.Linq.Expressions.Expression.Type\n  - System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Variable(System.Type)\n  - System.Linq.Expressions.Expression.Variable(System.Type,System.String)\n  - System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)\n  langs:\n  - csharp\n  - vb\n  name: Expression\n  fullName: System.Linq.Expressions.Expression\n  type: Class\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Expression\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 119\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Provides the base class from which the classes that represent expression tree nodes are derived. It also contains <strong>static</strong> (<strong>Shared</strong> in Visual Basic) factory methods to create the various node types. This is an <strong>abstract</strong> class.</p>\\n\"\n  syntax:\n    content: public abstract class Expression\n    content.vb: Public MustInherit Class Expression\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: Expression\n- uid: System.Linq.Expressions.Expression.#ctor\n  commentId: M:System.Linq.Expressions.Expression.#ctor\n  id: '#ctor'\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Expression()\n  fullName: System.Linq.Expressions.Expression.Expression()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 121\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Constructs a new instance of <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected Expression()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: Expression.Expression()\n- uid: System.Linq.Expressions.Expression.CanReduce\n  commentId: P:System.Linq.Expressions.Expression.CanReduce\n  id: CanReduce\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: CanReduce\n  fullName: System.Linq.Expressions.Expression.CanReduce\n  type: Property\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CanReduce\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 122\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Indicates that the node can be reduced to a simpler node. If this returns true, Reduce() can be called to produce the reduced form.</p>\\n\"\n  syntax:\n    content: public virtual bool CanReduce { get; }\n    content.vb: Public Overridable ReadOnly Property CanReduce As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>True if the node can be reduced, otherwise false.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Expression.CanReduce\n- uid: System.Linq.Expressions.Expression.NodeType\n  commentId: P:System.Linq.Expressions.Expression.NodeType\n  id: NodeType\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: NodeType\n  fullName: System.Linq.Expressions.Expression.NodeType\n  type: Property\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NodeType\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 123\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Gets the node type of this <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual ExpressionType NodeType { get; }\n    content.vb: Public Overridable ReadOnly Property NodeType As ExpressionType\n    parameters: []\n    return:\n      type: System.Linq.Expressions.ExpressionType\n      description: \"\\n<p>One of the <xref href=\\\"System.Linq.Expressions.ExpressionType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Expression.NodeType\n- uid: System.Linq.Expressions.Expression.Type\n  commentId: P:System.Linq.Expressions.Expression.Type\n  id: Type\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Type\n  fullName: System.Linq.Expressions.Expression.Type\n  type: Property\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Type\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 124\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Gets the static type of the expression that this <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> represents.</p>\\n\"\n  syntax:\n    content: public virtual Type Type { get; }\n    content.vb: Public Overridable ReadOnly Property Type As Type\n    parameters: []\n    return:\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the static type of the expression.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Expression.Type\n- uid: System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)\n  commentId: M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)\n  id: Accept(System.Linq.Expressions.ExpressionVisitor)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Accept(ExpressionVisitor)\n  fullName: System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Accept\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 125\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Dispatches to the specific visit method for this node type. For example, <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> calls the <xref href=\\\"System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual Expression Accept(ExpressionVisitor visitor)\n    content.vb: Protected Overridable Function Accept(visitor As ExpressionVisitor) As Expression\n    parameters:\n    - id: visitor\n      type: System.Linq.Expressions.ExpressionVisitor\n      description: \"\\n<p>The visitor to visit this node with.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The result of visiting this node.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: Expression.Accept(ExpressionVisitor)\n- uid: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Add(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 126\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an arithmetic addition operation that does not have overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression Add(Expression left, Expression right)\n    content.vb: Public Shared Function Add(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Add\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The addition operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Add(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Add(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 127\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an arithmetic addition operation that does not have overflow checking. The implementing method can be specified.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression Add(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function Add(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Add\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong> and the addition operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Add(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: AddAssign(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 128\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an addition assignment operation that does not have overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression AddAssign(Expression left, Expression right)\n    content.vb: Public Shared Function AddAssign(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.AddAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.AddAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: AddAssign(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 129\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an addition assignment operation that does not have overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression AddAssign(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function AddAssign(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.AddAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.AddAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: AddAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 130\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an addition assignment operation that does not have overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression AddAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)\n    content.vb: Public Shared Function AddAssign(left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.AddAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.AddAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: AddAssignChecked(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddAssignChecked\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 131\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an addition assignment operation that has overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression AddAssignChecked(Expression left, Expression right)\n    content.vb: Public Shared Function AddAssignChecked(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.AddAssignChecked\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.AddAssignChecked(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: AddAssignChecked(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddAssignChecked\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 132\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an addition assignment operation that has overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression AddAssignChecked(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function AddAssignChecked(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.AddAssignChecked\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.AddAssignChecked(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddAssignChecked\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 133\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an addition assignment operation that has overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression AddAssignChecked(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)\n    content.vb: Public Shared Function AddAssignChecked(left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.AddAssignChecked\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: AddChecked(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddChecked\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 134\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an arithmetic addition operation that has overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression AddChecked(Expression left, Expression right)\n    content.vb: Public Shared Function AddChecked(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.AddChecked\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The addition operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.AddChecked(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: AddChecked(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddChecked\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 135\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an arithmetic addition operation that has overflow checking. The implementing method can be specified.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression AddChecked(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function AddChecked(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.AddChecked\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong> and the addition operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.AddChecked(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: And(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: And\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 136\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a bitwise <strong>AND</strong> operation.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression And(Expression left, Expression right)\n    content.vb: Public Shared Function And(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.And\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The bitwise <strong>AND</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.And(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: And(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: And\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 137\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a bitwise <strong>AND</strong> operation. The implementing method can be specified.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression And(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function And(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.And\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong> and the bitwise <strong>AND</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.And(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: AndAlso(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AndAlso\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 138\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a conditional <strong>AND</strong> operation that evaluates the second operand only if the first operand evaluates to <strong>true</strong>.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression AndAlso(Expression left, Expression right)\n    content.vb: Public Shared Function AndAlso(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.AndAlso\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The bitwise <strong>AND</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n<p>-or-</p>\\n<p>\\n<em>left</em>.Type and <em>right</em>.Type are not the same Boolean type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.AndAlso(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: AndAlso(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AndAlso\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 139\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a conditional <strong>AND</strong> operation that evaluates the second operand only if the first operand is resolved to true. The implementing method can be specified.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression AndAlso(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function AndAlso(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.AndAlso\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong> and the bitwise <strong>AND</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n<p>-or-</p>\\n<p>\\n<em>method</em> is <strong>null</strong> and <em>left</em>.Type and <em>right</em>.Type are not the same Boolean type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.AndAlso(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: AndAssign(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AndAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 140\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a bitwise AND assignment operation.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression AndAssign(Expression left, Expression right)\n    content.vb: Public Shared Function AndAssign(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.AndAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.AndAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: AndAssign(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AndAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 141\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a bitwise AND assignment operation.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression AndAssign(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function AndAssign(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.AndAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.AndAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: AndAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AndAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 142\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a bitwise AND assignment operation.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression AndAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)\n    content.vb: Public Shared Function AndAssign(left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.AndAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.AndAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ArrayAccess(Expression, IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ArrayAccess\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 143\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Linq.Expressions.IndexExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to access a multidimensional array.</p>\\n\"\n  syntax:\n    content: public static IndexExpression ArrayAccess(Expression array, IEnumerable<Expression> indexes)\n    content.vb: Public Shared Function ArrayAccess(array As Expression, indexes As IEnumerable(Of Expression)) As IndexExpression\n    parameters:\n    - id: array\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An expression that represents the multidimensional array.</p>\\n\"\n    - id: indexes\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing expressions used to index the array.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.IndexExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.IndexExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))\n  name.vb: ArrayAccess(Expression, IEnumerable(Of Expression))\n  nameWithType: Expression.ArrayAccess(Expression, IEnumerable<Expression>)\n  nameWithType.vb: Expression.ArrayAccess(Expression, IEnumerable(Of Expression))\n- uid: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  id: ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ArrayAccess(Expression, Expression[])\n  fullName: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ArrayAccess\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 144\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Linq.Expressions.IndexExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to access an array.</p>\\n\"\n  syntax:\n    content: public static IndexExpression ArrayAccess(Expression array, params Expression[] indexes)\n    content.vb: Public Shared Function ArrayAccess(array As Expression, ParamArray indexes As Expression()) As IndexExpression\n    parameters:\n    - id: array\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An expression representing the array to index.</p>\\n\"\n    - id: indexes\n      type: System.Linq.Expressions.Expression[]\n      description: \"\\n<p>An array that contains expressions used to index the array.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.IndexExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.IndexExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression())\n  name.vb: ArrayAccess(Expression, Expression())\n  nameWithType: Expression.ArrayAccess(Expression, Expression[])\n  nameWithType.vb: Expression.ArrayAccess(Expression, Expression())\n- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ArrayIndex(Expression, IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ArrayIndex\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 145\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents applying an array index operator to an array of rank more than one.</p>\\n\"\n  syntax:\n    content: public static MethodCallExpression ArrayIndex(Expression array, IEnumerable<Expression> indexes)\n    content.vb: Public Shared Function ArrayIndex(array As Expression, indexes As IEnumerable(Of Expression)) As MethodCallExpression\n    parameters:\n    - id: array\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: indexes\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Call\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> or <em>indexes</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>array</em>.Type does not represent an array type.</p>\\n<p>-or-</p>\\n<p>The rank of <em>array</em>.Type does not match the number of elements in <em>indexes</em>.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of one or more elements of <em>indexes</em> does not represent the <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))\n  name.vb: ArrayIndex(Expression, IEnumerable(Of Expression))\n  nameWithType: Expression.ArrayIndex(Expression, IEnumerable<Expression>)\n  nameWithType.vb: Expression.ArrayIndex(Expression, IEnumerable(Of Expression))\n- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ArrayIndex(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ArrayIndex\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 146\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents applying an array index operator to an array of rank one.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression ArrayIndex(Expression array, Expression index)\n    content.vb: Public Shared Function ArrayIndex(array As Expression, index As Expression) As BinaryExpression\n    parameters:\n    - id: array\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: index\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.ArrayIndex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> or <em>index</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>array</em>.Type does not represent an array type.</p>\\n<p>-or-</p>\\n<p>\\n<em>array</em>.Type represents an array type whose rank is not 1.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em>.Type does not represent the <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.ArrayIndex(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  id: ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ArrayIndex(Expression, Expression[])\n  fullName: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ArrayIndex\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 147\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents applying an array index operator to a multidimensional array.</p>\\n\"\n  syntax:\n    content: public static MethodCallExpression ArrayIndex(Expression array, params Expression[] indexes)\n    content.vb: Public Shared Function ArrayIndex(array As Expression, ParamArray indexes As Expression()) As MethodCallExpression\n    parameters:\n    - id: array\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An array of <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances - indexes for the array index operation.</p>\\n\"\n    - id: indexes\n      type: System.Linq.Expressions.Expression[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Call\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> or <em>indexes</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>array</em>.Type does not represent an array type.</p>\\n<p>-or-</p>\\n<p>The rank of <em>array</em>.Type does not match the number of elements in <em>indexes</em>.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of one or more elements of <em>indexes</em> does not represent the <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression())\n  name.vb: ArrayIndex(Expression, Expression())\n  nameWithType: Expression.ArrayIndex(Expression, Expression[])\n  nameWithType.vb: Expression.ArrayIndex(Expression, Expression())\n- uid: System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)\n  id: ArrayLength(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ArrayLength(Expression)\n  fullName: System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ArrayLength\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 148\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an expression for obtaining the length of a one-dimensional array.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression ArrayLength(Expression array)\n    content.vb: Public Shared Function ArrayLength(array As Expression) As UnaryExpression\n    parameters:\n    - id: array\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.ArrayLength\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <em>array</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>array</em>.Type does not represent an array type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.ArrayLength(Expression)\n- uid: System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Assign(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Assign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 149\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an assignment operation.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression Assign(Expression left, Expression right)\n    content.vb: Public Shared Function Assign(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Assign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Assign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)\n  id: Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Bind(MemberInfo, Expression)\n  fullName: System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Bind\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 150\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MemberAssignment\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the initialization of a field or property.</p>\\n\"\n  syntax:\n    content: public static MemberAssignment Bind(MemberInfo member, Expression expression)\n    content.vb: Public Shared Function Bind(member As MemberInfo, expression As Expression) As MemberAssignment\n    parameters:\n    - id: member\n      type: System.Reflection.MemberInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MemberInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.MemberBinding.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.MemberAssignment.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MemberAssignment\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MemberAssignment\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has <xref href=\\\"System.Linq.Expressions.MemberBinding.BindingType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to <xref href=\\\"System.Linq.Expressions.MemberBindingType.Assignment\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.MemberBinding.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.MemberAssignment.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>member</em> or <em>expression</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>member</em> does not represent a field or property.</p>\\n<p>-or-</p>\\n<p>The property represented by <em>member</em> does not have a <strong>set</strong> accessor.</p>\\n<p>-or-</p>\\n<p>\\n<em>expression</em>.Type is not assignable to the type of the field or property that <em>member</em> represents.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Bind(MemberInfo, Expression)\n- uid: System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  id: Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Bind(MethodInfo, Expression)\n  fullName: System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Bind\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 151\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MemberAssignment\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the initialization of a member by using a property accessor method.</p>\\n\"\n  syntax:\n    content: public static MemberAssignment Bind(MethodInfo propertyAccessor, Expression expression)\n    content.vb: Public Shared Function Bind(propertyAccessor As MethodInfo, expression As Expression) As MemberAssignment\n    parameters:\n    - id: propertyAccessor\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a property accessor method.</p>\\n\"\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.MemberAssignment.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MemberAssignment\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MemberAssignment\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.MemberBinding.BindingType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.MemberBindingType.Assignment\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the <xref href=\\\"System.Linq.Expressions.MemberBinding.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the <xref href=\\\"System.Reflection.PropertyInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the property accessed in <em>propertyAccessor</em>, and the <xref href=\\\"System.Linq.Expressions.MemberAssignment.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to <em>expression</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>propertyAccessor</em> or <em>expression</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>propertyAccessor</em> does not represent a property accessor method.</p>\\n<p>-or-</p>\\n<p>The property accessed by <em>propertyAccessor</em> does not have a <strong>set</strong> accessor.</p>\\n<p>-or-</p>\\n<p>\\n<em>expression</em>.Type is not assignable to the type of the field or property that <em>member</em> represents.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Bind(MethodInfo, Expression)\n- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Block(IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Block\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 152\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BlockExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the given expressions and has no variables.</p>\\n\"\n  syntax:\n    content: public static BlockExpression Block(IEnumerable<Expression> expressions)\n    content.vb: Public Shared Function Block(expressions As IEnumerable(Of Expression)) As BlockExpression\n    parameters:\n    - id: expressions\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: \"\\n<p>The expressions in the block.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.BlockExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))\n  name.vb: Block(IEnumerable(Of Expression))\n  nameWithType: Expression.Block(IEnumerable<Expression>)\n  nameWithType.vb: Expression.Block(IEnumerable(Of Expression))\n- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Block\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 153\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BlockExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the given variables and expressions.</p>\\n\"\n  syntax:\n    content: public static BlockExpression Block(IEnumerable<ParameterExpression> variables, IEnumerable<Expression> expressions)\n    content.vb: Public Shared Function Block(variables As IEnumerable(Of ParameterExpression), expressions As IEnumerable(Of Expression)) As BlockExpression\n    parameters:\n    - id: variables\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: \"\\n<p>The variables in the block.</p>\\n\"\n    - id: expressions\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: \"\\n<p>The expressions in the block.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.BlockExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))\n  name.vb: Block(IEnumerable(Of ParameterExpression), IEnumerable(Of Expression))\n  nameWithType: Expression.Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>)\n  nameWithType.vb: Expression.Block(IEnumerable(Of ParameterExpression), IEnumerable(Of Expression))\n- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  id: Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Block(IEnumerable<ParameterExpression>, Expression[])\n  fullName: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Linq.Expressions.Expression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Block\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 154\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BlockExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the given variables and expressions.</p>\\n\"\n  syntax:\n    content: public static BlockExpression Block(IEnumerable<ParameterExpression> variables, params Expression[] expressions)\n    content.vb: Public Shared Function Block(variables As IEnumerable(Of ParameterExpression), ParamArray expressions As Expression()) As BlockExpression\n    parameters:\n    - id: variables\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: \"\\n<p>The variables in the block.</p>\\n\"\n    - id: expressions\n      type: System.Linq.Expressions.Expression[]\n      description: \"\\n<p>The expressions in the block.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.BlockExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Linq.Expressions.Expression())\n  name.vb: Block(IEnumerable(Of ParameterExpression), Expression())\n  nameWithType: Expression.Block(IEnumerable<ParameterExpression>, Expression[])\n  nameWithType.vb: Expression.Block(IEnumerable(Of ParameterExpression), Expression())\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Block(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Block\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 155\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BlockExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains two expressions and has no variables.</p>\\n\"\n  syntax:\n    content: public static BlockExpression Block(Expression arg0, Expression arg1)\n    content.vb: Public Shared Function Block(arg0 As Expression, arg1 As Expression) As BlockExpression\n    parameters:\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The first expression in the block.</p>\\n\"\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The second expression in the block.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.BlockExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Block(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Block(Expression, Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Block\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 156\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BlockExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains three expressions and has no variables.</p>\\n\"\n  syntax:\n    content: public static BlockExpression Block(Expression arg0, Expression arg1, Expression arg2)\n    content.vb: Public Shared Function Block(arg0 As Expression, arg1 As Expression, arg2 As Expression) As BlockExpression\n    parameters:\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The first expression in the block.</p>\\n\"\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The second expression in the block.</p>\\n\"\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The third expression in the block.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.BlockExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Block(Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Block(Expression, Expression, Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Block\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 157\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BlockExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains four expressions and has no variables.</p>\\n\"\n  syntax:\n    content: public static BlockExpression Block(Expression arg0, Expression arg1, Expression arg2, Expression arg3)\n    content.vb: Public Shared Function Block(arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As BlockExpression\n    parameters:\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The first expression in the block.</p>\\n\"\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The second expression in the block.</p>\\n\"\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The third expression in the block.</p>\\n\"\n    - id: arg3\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The fourth expression in the block.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.BlockExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Block(Expression, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Block(Expression, Expression, Expression, Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Block\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 158\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BlockExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains five expressions and has no variables.</p>\\n\"\n  syntax:\n    content: public static BlockExpression Block(Expression arg0, Expression arg1, Expression arg2, Expression arg3, Expression arg4)\n    content.vb: Public Shared Function Block(arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression, arg4 As Expression) As BlockExpression\n    parameters:\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The first expression in the block.</p>\\n\"\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The second expression in the block.</p>\\n\"\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The third expression in the block.</p>\\n\"\n    - id: arg3\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The fourth expression in the block.</p>\\n\"\n    - id: arg4\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The fifth expression in the block.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.BlockExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Block(Expression, Expression, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])\n  id: Block(System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Block(Expression[])\n  fullName: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Block\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 159\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BlockExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the given expressions and has no variables.</p>\\n\"\n  syntax:\n    content: public static BlockExpression Block(params Expression[] expressions)\n    content.vb: Public Shared Function Block(ParamArray expressions As Expression()) As BlockExpression\n    parameters:\n    - id: expressions\n      type: System.Linq.Expressions.Expression[]\n      description: \"\\n<p>The expressions in the block.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.BlockExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression())\n  name.vb: Block(Expression())\n  nameWithType: Expression.Block(Expression[])\n  nameWithType.vb: Expression.Block(Expression())\n- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Block(Type, IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Block\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 160\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BlockExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the given expressions, has no variables and has specific result type.</p>\\n\"\n  syntax:\n    content: public static BlockExpression Block(Type type, IEnumerable<Expression> expressions)\n    content.vb: Public Shared Function Block(type As Type, expressions As IEnumerable(Of Expression)) As BlockExpression\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The result type of the block.</p>\\n\"\n    - id: expressions\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: \"\\n<p>The expressions in the block.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.BlockExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))\n  name.vb: Block(Type, IEnumerable(Of Expression))\n  nameWithType: Expression.Block(Type, IEnumerable<Expression>)\n  nameWithType.vb: Expression.Block(Type, IEnumerable(Of Expression))\n- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Block\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 161\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BlockExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the given variables and expressions.</p>\\n\"\n  syntax:\n    content: public static BlockExpression Block(Type type, IEnumerable<ParameterExpression> variables, IEnumerable<Expression> expressions)\n    content.vb: Public Shared Function Block(type As Type, variables As IEnumerable(Of ParameterExpression), expressions As IEnumerable(Of Expression)) As BlockExpression\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The result type of the block.</p>\\n\"\n    - id: variables\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: \"\\n<p>The variables in the block.</p>\\n\"\n    - id: expressions\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: \"\\n<p>The expressions in the block.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.BlockExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))\n  name.vb: Block(Type, IEnumerable(Of ParameterExpression), IEnumerable(Of Expression))\n  nameWithType: Expression.Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>)\n  nameWithType.vb: Expression.Block(Type, IEnumerable(Of ParameterExpression), IEnumerable(Of Expression))\n- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  id: Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Block(Type, IEnumerable<ParameterExpression>, Expression[])\n  fullName: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Linq.Expressions.Expression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Block\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 162\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BlockExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the given variables and expressions.</p>\\n\"\n  syntax:\n    content: public static BlockExpression Block(Type type, IEnumerable<ParameterExpression> variables, params Expression[] expressions)\n    content.vb: Public Shared Function Block(type As Type, variables As IEnumerable(Of ParameterExpression), ParamArray expressions As Expression()) As BlockExpression\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The result type of the block.</p>\\n\"\n    - id: variables\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: \"\\n<p>The variables in the block.</p>\\n\"\n    - id: expressions\n      type: System.Linq.Expressions.Expression[]\n      description: \"\\n<p>The expressions in the block.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.BlockExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Linq.Expressions.Expression())\n  name.vb: Block(Type, IEnumerable(Of ParameterExpression), Expression())\n  nameWithType: Expression.Block(Type, IEnumerable<ParameterExpression>, Expression[])\n  nameWithType.vb: Expression.Block(Type, IEnumerable(Of ParameterExpression), Expression())\n- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])\n  id: Block(System.Type,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Block(Type, Expression[])\n  fullName: System.Linq.Expressions.Expression.Block(System.Type, System.Linq.Expressions.Expression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Block\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 163\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BlockExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the given expressions, has no variables and has specific result type.</p>\\n\"\n  syntax:\n    content: public static BlockExpression Block(Type type, params Expression[] expressions)\n    content.vb: Public Shared Function Block(type As Type, ParamArray expressions As Expression()) As BlockExpression\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The result type of the block.</p>\\n\"\n    - id: expressions\n      type: System.Linq.Expressions.Expression[]\n      description: \"\\n<p>The expressions in the block.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.BlockExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Block(System.Type, System.Linq.Expressions.Expression())\n  name.vb: Block(Type, Expression())\n  nameWithType: Expression.Block(Type, Expression[])\n  nameWithType.vb: Expression.Block(Type, Expression())\n- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)\n  commentId: M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)\n  id: Break(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Break(LabelTarget)\n  fullName: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Break\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 164\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a break statement.</p>\\n\"\n  syntax:\n    content: public static GotoExpression Break(LabelTarget target)\n    content.vb: Public Shared Function Break(target As LabelTarget) As GotoExpression\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.LabelTarget\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that the <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will jump to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with <xref href=\\\"System.Linq.Expressions.GotoExpression.Kind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to Break, the <xref href=\\\"System.Linq.Expressions.GotoExpression.Target\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to <em>target</em>, and a null value to be passed to the target label upon jumping.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Break(LabelTarget)\n- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  id: Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Break(LabelTarget, Expression)\n  fullName: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Break\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 165\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a break statement. The value passed to the label upon jumping can be specified.</p>\\n\"\n  syntax:\n    content: public static GotoExpression Break(LabelTarget target, Expression value)\n    content.vb: Public Shared Function Break(target As LabelTarget, value As Expression) As GotoExpression\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.LabelTarget\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that the <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will jump to.</p>\\n\"\n    - id: value\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The value that will be passed to the associated label upon jumping.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with <xref href=\\\"System.Linq.Expressions.GotoExpression.Kind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to Break, the <xref href=\\\"System.Linq.Expressions.GotoExpression.Target\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to <em>target</em>, and <em>value</em> to be passed to the target label upon jumping.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Break(LabelTarget, Expression)\n- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  id: Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Break(LabelTarget, Expression, Type)\n  fullName: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Break\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 166\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a break statement with the specified type. The value passed to the label upon jumping can be specified.</p>\\n\"\n  syntax:\n    content: public static GotoExpression Break(LabelTarget target, Expression value, Type type)\n    content.vb: Public Shared Function Break(target As LabelTarget, value As Expression, type As Type) As GotoExpression\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.LabelTarget\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that the <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will jump to.</p>\\n\"\n    - id: value\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The value that will be passed to the associated label upon jumping.</p>\\n\"\n    - id: type\n      type: System.Type\n      description: \"\\n<p>An <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with <xref href=\\\"System.Linq.Expressions.GotoExpression.Kind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to Break, the <xref href=\\\"System.Linq.Expressions.GotoExpression.Target\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to <em>target</em>, the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to <em>type</em>, and <em>value</em> to be passed to the target label upon jumping.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Break(LabelTarget, Expression, Type)\n- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)\n  id: Break(System.Linq.Expressions.LabelTarget,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Break(LabelTarget, Type)\n  fullName: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Break\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 167\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a break statement with the specified type.</p>\\n\"\n  syntax:\n    content: public static GotoExpression Break(LabelTarget target, Type type)\n    content.vb: Public Shared Function Break(target As LabelTarget, type As Type) As GotoExpression\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.LabelTarget\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that the <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will jump to.</p>\\n\"\n    - id: type\n      type: System.Type\n      description: \"\\n<p>An <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with <xref href=\\\"System.Linq.Expressions.GotoExpression.Kind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to Break, the <xref href=\\\"System.Linq.Expressions.GotoExpression.Target\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to <em>target</em>, and the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to <em>type</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Break(LabelTarget, Type)\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Call(Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Call\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 168\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a call to a method that takes no arguments.</p>\\n\"\n  syntax:\n    content: public static MethodCallExpression Call(Expression instance, MethodInfo method)\n    content.vb: Public Shared Function Call(instance As Expression, method As MethodInfo) As MethodCallExpression\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the instance for an instance method call (pass <strong>null</strong> for a <strong>static</strong> (<strong>Shared</strong> in Visual Basic) method).</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Call\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>instance</em> is <strong>null</strong> and <em>method</em> represents an instance method.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>instance</em>.Type is not assignable to the declaring type of the method represented by <em>method</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Call(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Call(Expression, MethodInfo, IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Call\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 169\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a call to a method that takes arguments.</p>\\n\"\n  syntax:\n    content: public static MethodCallExpression Call(Expression instance, MethodInfo method, IEnumerable<Expression> arguments)\n    content.vb: Public Shared Function Call(instance As Expression, method As MethodInfo, arguments As IEnumerable(Of Expression)) As MethodCallExpression\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to (pass <strong>null</strong> for a <strong>static</strong> (<strong>Shared</strong> in Visual Basic) method).</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Call\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>instance</em> is <strong>null</strong> and <em>method</em> represents an instance method.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>instance</em>.Type is not assignable to the declaring type of the method represented by <em>method</em>.</p>\\n<p>-or-</p>\\n<p>The number of elements in <em>arguments</em> does not equal the number of parameters for the method represented by <em>method</em>.</p>\\n<p>-or-</p>\\n<p>One or more of the elements of <em>arguments</em> is not assignable to the corresponding parameter for the method represented by <em>method</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))\n  name.vb: Call(Expression, MethodInfo, IEnumerable(Of Expression))\n  nameWithType: Expression.Call(Expression, MethodInfo, IEnumerable<Expression>)\n  nameWithType.vb: Expression.Call(Expression, MethodInfo, IEnumerable(Of Expression))\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Call(Expression, MethodInfo, Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Call\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 170\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a call to a method that takes two arguments.</p>\\n\"\n  syntax:\n    content: public static MethodCallExpression Call(Expression instance, MethodInfo method, Expression arg0, Expression arg1)\n    content.vb: Public Shared Function Call(instance As Expression, method As MethodInfo, arg0 As Expression, arg1 As Expression) As MethodCallExpression\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the target method.</p>\\n\"\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the first argument.</p>\\n\"\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the second argument.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Call\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Call(Expression, MethodInfo, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Call(Expression, MethodInfo, Expression, Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Call\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 171\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a call to a method that takes three arguments.</p>\\n\"\n  syntax:\n    content: public static MethodCallExpression Call(Expression instance, MethodInfo method, Expression arg0, Expression arg1, Expression arg2)\n    content.vb: Public Shared Function Call(instance As Expression, method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression) As MethodCallExpression\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the target method.</p>\\n\"\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the first argument.</p>\\n\"\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the second argument.</p>\\n\"\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the third argument.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Call\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Call(Expression, MethodInfo, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Call(Expression, MethodInfo, Expression[])\n  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Call\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 172\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a call to a method that takes arguments.</p>\\n\"\n  syntax:\n    content: public static MethodCallExpression Call(Expression instance, MethodInfo method, params Expression[] arguments)\n    content.vb: Public Shared Function Call(instance As Expression, method As MethodInfo, ParamArray arguments As Expression()) As MethodCallExpression\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the instance for an instance method call (pass <strong>null</strong> for a <strong>static</strong> (<strong>Shared</strong> in Visual Basic) method).</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Call\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>instance</em> is <strong>null</strong> and <em>method</em> represents an instance method.</p>\\n<p>-or-</p>\\n<p>\\n<em>arguments</em> is not <strong>null</strong> and one or more of its elements is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>instance</em>.Type is not assignable to the declaring type of the method represented by <em>method</em>.</p>\\n<p>-or-</p>\\n<p>The number of elements in <em>arguments</em> does not equal the number of parameters for the method represented by <em>method</em>.</p>\\n<p>-or-</p>\\n<p>One or more of the elements of <em>arguments</em> is not assignable to the corresponding parameter for the method represented by <em>method</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression())\n  name.vb: Call(Expression, MethodInfo, Expression())\n  nameWithType: Expression.Call(Expression, MethodInfo, Expression[])\n  nameWithType.vb: Expression.Call(Expression, MethodInfo, Expression())\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  id: Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Call(Expression, String, Type[], Expression[])\n  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.String, System.Type[], System.Linq.Expressions.Expression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Call\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 173\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a call to a method by calling the appropriate factory method.</p>\\n\"\n  syntax:\n    content: public static MethodCallExpression Call(Expression instance, string methodName, Type[] typeArguments, params Expression[] arguments)\n    content.vb: Public Shared Function Call(instance As Expression, methodName As String, typeArguments As Type(), ParamArray arguments As Expression()) As MethodCallExpression\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property value will be searched for a specific method.</p>\\n\"\n    - id: methodName\n      type: System.String\n      description: \"\\n<p>The name of the method.</p>\\n\"\n    - id: typeArguments\n      type: System.Type[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.</p>\\n\"\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects that represents the arguments to the method.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Call\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <em>instance</em>, <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> set to the <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the specified instance method, and <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> set to the specified arguments.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>instance</em> or <em>methodName</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>No method whose name is <em>methodName</em>, whose type parameters match <em>typeArguments</em>, and whose parameter types match <em>arguments</em> is found in <em>instance</em>.Type or its base types.</p>\\n<p>-or-</p>\\n<p>More than one method whose name is <em>methodName</em>, whose type parameters match <em>typeArguments</em>, and whose parameter types match <em>arguments</em> is found in <em>instance</em>.Type or its base types.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.String, System.Type(), System.Linq.Expressions.Expression())\n  name.vb: Call(Expression, String, Type(), Expression())\n  nameWithType: Expression.Call(Expression, String, Type[], Expression[])\n  nameWithType.vb: Expression.Call(Expression, String, Type(), Expression())\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Call(MethodInfo, IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Call\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 174\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a call to a static (Shared in Visual Basic) method.</p>\\n\"\n  syntax:\n    content: public static MethodCallExpression Call(MethodInfo method, IEnumerable<Expression> arguments)\n    content.vb: Public Shared Function Call(method As MethodInfo, arguments As IEnumerable(Of Expression)) As MethodCallExpression\n    parameters:\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the target method.</p>\\n\"\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: \"\\n<p>A collection of <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the call arguments.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Call\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))\n  name.vb: Call(MethodInfo, IEnumerable(Of Expression))\n  nameWithType: Expression.Call(MethodInfo, IEnumerable<Expression>)\n  nameWithType.vb: Expression.Call(MethodInfo, IEnumerable(Of Expression))\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Call(MethodInfo, Expression)\n  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Call\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 175\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a call to a <strong>static</strong> (<strong>Shared</strong> in Visual Basic) method that takes one argument.</p>\\n\"\n  syntax:\n    content: public static MethodCallExpression Call(MethodInfo method, Expression arg0)\n    content.vb: Public Shared Function Call(method As MethodInfo, arg0 As Expression) As MethodCallExpression\n    parameters:\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the first argument.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Call\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>method</em> is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Call(MethodInfo, Expression)\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Call(MethodInfo, Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Call\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 176\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a call to a static method that takes two arguments.</p>\\n\"\n  syntax:\n    content: public static MethodCallExpression Call(MethodInfo method, Expression arg0, Expression arg1)\n    content.vb: Public Shared Function Call(method As MethodInfo, arg0 As Expression, arg1 As Expression) As MethodCallExpression\n    parameters:\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the first argument.</p>\\n\"\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the second argument.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Call\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>method</em> is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Call(MethodInfo, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Call(MethodInfo, Expression, Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Call\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 177\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a call to a static method that takes three arguments.</p>\\n\"\n  syntax:\n    content: public static MethodCallExpression Call(MethodInfo method, Expression arg0, Expression arg1, Expression arg2)\n    content.vb: Public Shared Function Call(method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression) As MethodCallExpression\n    parameters:\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the first argument.</p>\\n\"\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the second argument.</p>\\n\"\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the third argument.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Call\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>method</em> is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Call(MethodInfo, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Call(MethodInfo, Expression, Expression, Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Call\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 178\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a call to a static method that takes four arguments.</p>\\n\"\n  syntax:\n    content: public static MethodCallExpression Call(MethodInfo method, Expression arg0, Expression arg1, Expression arg2, Expression arg3)\n    content.vb: Public Shared Function Call(method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As MethodCallExpression\n    parameters:\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the first argument.</p>\\n\"\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the second argument.</p>\\n\"\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the third argument.</p>\\n\"\n    - id: arg3\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the fourth argument.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Call\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>method</em> is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Call(MethodInfo, Expression, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Call(MethodInfo, Expression, Expression, Expression, Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Call\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 179\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a call to a static method that takes five arguments.</p>\\n\"\n  syntax:\n    content: public static MethodCallExpression Call(MethodInfo method, Expression arg0, Expression arg1, Expression arg2, Expression arg3, Expression arg4)\n    content.vb: Public Shared Function Call(method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression, arg4 As Expression) As MethodCallExpression\n    parameters:\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the first argument.</p>\\n\"\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the second argument.</p>\\n\"\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the third argument.</p>\\n\"\n    - id: arg3\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the fourth argument.</p>\\n\"\n    - id: arg4\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the fifth argument.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Call\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>method</em> is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Call(MethodInfo, Expression, Expression, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Call(MethodInfo, Expression[])\n  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Call\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 180\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a call to a <strong>static</strong> (<strong>Shared</strong> in Visual Basic) method that has arguments.</p>\\n\"\n  syntax:\n    content: public static MethodCallExpression Call(MethodInfo method, params Expression[] arguments)\n    content.vb: Public Shared Function Call(method As MethodInfo, ParamArray arguments As Expression()) As MethodCallExpression\n    parameters:\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a <strong>static</strong> (<strong>Shared</strong> in Visual Basic) method to set the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Call\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The number of elements in <em>arguments</em> does not equal the number of parameters for the method represented by <em>method</em>.</p>\\n<p>-or-</p>\\n<p>One or more of the elements of <em>arguments</em> is not assignable to the corresponding parameter for the method represented by <em>method</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression())\n  name.vb: Call(MethodInfo, Expression())\n  nameWithType: Expression.Call(MethodInfo, Expression[])\n  nameWithType.vb: Expression.Call(MethodInfo, Expression())\n- uid: System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  id: Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Call(Type, String, Type[], Expression[])\n  fullName: System.Linq.Expressions.Expression.Call(System.Type, System.String, System.Type[], System.Linq.Expressions.Expression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Call\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 181\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a call to a <strong>static</strong> (<strong>Shared</strong> in Visual Basic) method by calling the appropriate factory method.</p>\\n\"\n  syntax:\n    content: public static MethodCallExpression Call(Type type, string methodName, Type[] typeArguments, params Expression[] arguments)\n    content.vb: Public Shared Function Call(type As Type, methodName As String, typeArguments As Type(), ParamArray arguments As Expression()) As MethodCallExpression\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the type that contains the specified <strong>static</strong> (<strong>Shared</strong> in Visual Basic) method.</p>\\n\"\n    - id: methodName\n      type: System.String\n      description: \"\\n<p>The name of the method.</p>\\n\"\n    - id: typeArguments\n      type: System.Type[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.</p>\\n\"\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects that represent the arguments to the method.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Call\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the specified <strong>static</strong> (<strong>Shared</strong> in Visual Basic) method, and the <xref href=\\\"System.Linq.Expressions.MethodCallExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the specified arguments.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>type</em> or <em>methodName</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>No method whose name is <em>methodName</em>, whose type parameters match <em>typeArguments</em>, and whose parameter types match <em>arguments</em> is found in <em>type</em> or its base types.</p>\\n<p>-or-</p>\\n<p>More than one method whose name is <em>methodName</em>, whose type parameters match <em>typeArguments</em>, and whose parameter types match <em>arguments</em> is found in <em>type</em> or its base types.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Call(System.Type, System.String, System.Type(), System.Linq.Expressions.Expression())\n  name.vb: Call(Type, String, Type(), Expression())\n  nameWithType: Expression.Call(Type, String, Type[], Expression[])\n  nameWithType.vb: Expression.Call(Type, String, Type(), Expression())\n- uid: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)\n  id: Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Catch(ParameterExpression, Expression)\n  fullName: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Catch\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 182\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.CatchBlock\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a catch statement with a reference to the caught <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for use in the handler body.</p>\\n\"\n  syntax:\n    content: public static CatchBlock Catch(ParameterExpression variable, Expression body)\n    content.vb: Public Shared Function Catch(variable As ParameterExpression, body As Expression) As CatchBlock\n    parameters:\n    - id: variable\n      type: System.Linq.Expressions.ParameterExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a reference to the <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object caught by this handler.</p>\\n\"\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The body of the catch statement.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.CatchBlock\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.CatchBlock\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Catch(ParameterExpression, Expression)\n- uid: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Catch(ParameterExpression, Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Catch\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 183\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.CatchBlock\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a catch statement with an <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> filter and a reference to the caught <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public static CatchBlock Catch(ParameterExpression variable, Expression body, Expression filter)\n    content.vb: Public Shared Function Catch(variable As ParameterExpression, body As Expression, filter As Expression) As CatchBlock\n    parameters:\n    - id: variable\n      type: System.Linq.Expressions.ParameterExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a reference to the <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object caught by this handler.</p>\\n\"\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The body of the catch statement.</p>\\n\"\n    - id: filter\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The body of the <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> filter.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.CatchBlock\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.CatchBlock\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Catch(ParameterExpression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)\n  id: Catch(System.Type,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Catch(Type, Expression)\n  fullName: System.Linq.Expressions.Expression.Catch(System.Type, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Catch\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 184\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.CatchBlock\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a catch statement.</p>\\n\"\n  syntax:\n    content: public static CatchBlock Catch(Type type, Expression body)\n    content.vb: Public Shared Function Catch(type As Type, body As Expression) As CatchBlock\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> this <xref href=\\\"System.Linq.Expressions.CatchBlock\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will handle.</p>\\n\"\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The body of the catch statement.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.CatchBlock\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.CatchBlock\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Catch(Type, Expression)\n- uid: System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Catch(Type, Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.Catch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Catch\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 185\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.CatchBlock\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a catch statement with an <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> filter but no reference to the caught <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public static CatchBlock Catch(Type type, Expression body, Expression filter)\n    content.vb: Public Shared Function Catch(type As Type, body As Expression, filter As Expression) As CatchBlock\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> this <xref href=\\\"System.Linq.Expressions.CatchBlock\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will handle.</p>\\n\"\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The body of the catch statement.</p>\\n\"\n    - id: filter\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The body of the <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> filter.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.CatchBlock\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.CatchBlock\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Catch(Type, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)\n  commentId: M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)\n  id: ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ClearDebugInfo(SymbolDocumentInfo)\n  fullName: System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ClearDebugInfo\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 186\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.DebugInfoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for clearing a sequence point.</p>\\n\"\n  syntax:\n    content: public static DebugInfoExpression ClearDebugInfo(SymbolDocumentInfo document)\n    content.vb: Public Shared Function ClearDebugInfo(document As SymbolDocumentInfo) As DebugInfoExpression\n    parameters:\n    - id: document\n      type: System.Linq.Expressions.SymbolDocumentInfo\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the source file.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.DebugInfoExpression\n      description: \"\\n<p>An instance of <xref href=\\\"System.Linq.Expressions.DebugInfoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for clearning a sequence point.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.ClearDebugInfo(SymbolDocumentInfo)\n- uid: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Coalesce(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Coalesce\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 187\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a coalescing operation.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression Coalesce(Expression left, Expression right)\n    content.vb: Public Shared Function Coalesce(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Coalesce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of <em>left</em> does not represent a reference type or a nullable value type.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>left</em>.Type and <em>right</em>.Type are not convertible to each other.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Coalesce(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)\n  id: Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Coalesce(Expression, Expression, LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.LambdaExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Coalesce\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 188\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a coalescing operation, given a conversion function.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression Coalesce(Expression left, Expression right, LambdaExpression conversion)\n    content.vb: Public Shared Function Coalesce(left As Expression, right As Expression, conversion As LambdaExpression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Coalesce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>left</em>.Type and <em>right</em>.Type are not convertible to each other.</p>\\n<p>-or-</p>\\n<p>\\n<em>conversion</em> is not <strong>null</strong> and <em>conversion</em>.Type is a delegate type that does not take exactly one argument.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of <em>left</em> does not represent a reference type or a nullable value type.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of <em>left</em> represents a type that is not assignable to the parameter type of the delegate type <em>conversion</em>.Type.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of <em>right</em> is not equal to the return type of the delegate type <em>conversion</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Coalesce(Expression, Expression, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Condition(Expression, Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Condition\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 189\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.ConditionalExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a conditional statement.</p>\\n\"\n  syntax:\n    content: public static ConditionalExpression Condition(Expression test, Expression ifTrue, Expression ifFalse)\n    content.vb: Public Shared Function Condition(test As Expression, ifTrue As Expression, ifFalse As Expression) As ConditionalExpression\n    parameters:\n    - id: test\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.ConditionalExpression.Test\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: ifTrue\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.ConditionalExpression.IfTrue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: ifFalse\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.ConditionalExpression.IfFalse\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.ConditionalExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.ConditionalExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Conditional\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.ConditionalExpression.Test\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.ConditionalExpression.IfTrue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.ConditionalExpression.IfFalse\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>test</em> or <em>ifTrue</em> or <em>ifFalse</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>test</em>.Type is not <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<em>ifTrue</em>.Type is not equal to <em>ifFalse</em>.Type.</p>\\n\"\n  seealso:\n  - type: System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n    commentId: M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - type: System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n    commentId: M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Condition(Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)\n  id: Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Condition(Expression, Expression, Expression, Type)\n  fullName: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Condition\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 190\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.ConditionalExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a conditional statement.</p>\\n\"\n  syntax:\n    content: public static ConditionalExpression Condition(Expression test, Expression ifTrue, Expression ifFalse, Type type)\n    content.vb: Public Shared Function Condition(test As Expression, ifTrue As Expression, ifFalse As Expression, type As Type) As ConditionalExpression\n    parameters:\n    - id: test\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.ConditionalExpression.Test\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: ifTrue\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.ConditionalExpression.IfTrue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: ifFalse\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.ConditionalExpression.IfFalse\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: type\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.ConditionalExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.ConditionalExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Conditional\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.ConditionalExpression.Test\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.ConditionalExpression.IfTrue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.ConditionalExpression.IfFalse\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Condition(Expression, Expression, Expression, Type)\n- uid: System.Linq.Expressions.Expression.Constant(System.Object)\n  commentId: M:System.Linq.Expressions.Expression.Constant(System.Object)\n  id: Constant(System.Object)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Constant(Object)\n  fullName: System.Linq.Expressions.Expression.Constant(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Constant\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 191\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.ConstantExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.ConstantExpression.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the specified value.</p>\\n\"\n  syntax:\n    content: public static ConstantExpression Constant(object value)\n    content.vb: Public Shared Function Constant(value As Object) As ConstantExpression\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.ConstantExpression.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.ConstantExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.ConstantExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Constant\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.ConstantExpression.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the specified value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Constant(Object)\n- uid: System.Linq.Expressions.Expression.Constant(System.Object,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)\n  id: Constant(System.Object,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Constant(Object, Type)\n  fullName: System.Linq.Expressions.Expression.Constant(System.Object, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Constant\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 192\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.ConstantExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.ConstantExpression.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  syntax:\n    content: public static ConstantExpression Constant(object value, Type type)\n    content.vb: Public Shared Function Constant(value As Object, type As Type) As ConstantExpression\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.ConstantExpression.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: type\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.ConstantExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.ConstantExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Constant\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.ConstantExpression.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>type</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>value</em> is not <strong>null</strong> and <em>type</em> is not assignable from the dynamic type of <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Constant(Object, Type)\n- uid: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)\n  commentId: M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)\n  id: Continue(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Continue(LabelTarget)\n  fullName: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Continue\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 193\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a continue statement.</p>\\n\"\n  syntax:\n    content: public static GotoExpression Continue(LabelTarget target)\n    content.vb: Public Shared Function Continue(target As LabelTarget) As GotoExpression\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.LabelTarget\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that the <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will jump to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with <xref href=\\\"System.Linq.Expressions.GotoExpression.Kind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to Continue, the <xref href=\\\"System.Linq.Expressions.GotoExpression.Target\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to <em>target</em>, and a null value to be passed to the target label upon jumping.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Continue(LabelTarget)\n- uid: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)\n  id: Continue(System.Linq.Expressions.LabelTarget,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Continue(LabelTarget, Type)\n  fullName: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Continue\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 194\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a continue statement with the specified type.</p>\\n\"\n  syntax:\n    content: public static GotoExpression Continue(LabelTarget target, Type type)\n    content.vb: Public Shared Function Continue(target As LabelTarget, type As Type) As GotoExpression\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.LabelTarget\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that the <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will jump to.</p>\\n\"\n    - id: type\n      type: System.Type\n      description: \"\\n<p>An <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with <xref href=\\\"System.Linq.Expressions.GotoExpression.Kind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to Continue, the <xref href=\\\"System.Linq.Expressions.GotoExpression.Target\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to <em>target</em>, the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to <em>type</em>, and a null value to be passed to the target label upon jumping.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Continue(LabelTarget, Type)\n- uid: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)\n  id: Convert(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Convert(Expression, Type)\n  fullName: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Convert\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 195\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a type conversion operation.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression Convert(Expression expression, Type type)\n    content.vb: Public Shared Function Convert(expression As Expression, type As Type) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: type\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Convert\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>expression</em> or <em>type</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>No conversion operator is defined between <em>expression</em>.Type and <em>type</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Convert(Expression, Type)\n- uid: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  id: Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Convert(Expression, Type, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Convert\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 196\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a conversion operation for which the implementing method is specified.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression Convert(Expression expression, Type type, MethodInfo method)\n    content.vb: Public Shared Function Convert(expression As Expression, type As Type, method As MethodInfo) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: type\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Convert\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.UnaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>expression</em> or <em>type</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly one argument.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>No conversion operator is defined between <em>expression</em>.Type and <em>type</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>expression</em>.Type is not assignable to the argument type of the method represented by <em>method</em>.</p>\\n<p>-or-</p>\\n<p>The return type of the method represented by <em>method</em> is not assignable to <em>type</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>expression</em>.Type or <em>type</em> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <em>method</em>.</p>\\n\"\n  - type: System.Reflection.AmbiguousMatchException\n    commentId: T:System.Reflection.AmbiguousMatchException\n    description: \"\\n<p>More than one method that matches the <em>method</em> description was found.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Convert(Expression, Type, MethodInfo)\n- uid: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)\n  id: ConvertChecked(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ConvertChecked(Expression, Type)\n  fullName: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConvertChecked\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 197\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a conversion operation that throws an exception if the target type is overflowed.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression ConvertChecked(Expression expression, Type type)\n    content.vb: Public Shared Function ConvertChecked(expression As Expression, type As Type) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: type\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.ConvertChecked\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>expression</em> or <em>type</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>No conversion operator is defined between <em>expression</em>.Type and <em>type</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.ConvertChecked(Expression, Type)\n- uid: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  id: ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ConvertChecked(Expression, Type, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConvertChecked\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 198\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression ConvertChecked(Expression expression, Type type, MethodInfo method)\n    content.vb: Public Shared Function ConvertChecked(expression As Expression, type As Type, method As MethodInfo) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: type\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.ConvertChecked\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.UnaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>expression</em> or <em>type</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly one argument.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>No conversion operator is defined between <em>expression</em>.Type and <em>type</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>expression</em>.Type is not assignable to the argument type of the method represented by <em>method</em>.</p>\\n<p>-or-</p>\\n<p>The return type of the method represented by <em>method</em> is not assignable to <em>type</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>expression</em>.Type or <em>type</em> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <em>method</em>.</p>\\n\"\n  - type: System.Reflection.AmbiguousMatchException\n    commentId: T:System.Reflection.AmbiguousMatchException\n    description: \"\\n<p>More than one method that matches the <em>method</em> description was found.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.ConvertChecked(Expression, Type, MethodInfo)\n- uid: System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: DebugInfo(SymbolDocumentInfo, Int32, Int32, Int32, Int32)\n  fullName: System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo, System.Int32, System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DebugInfo\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 199\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.DebugInfoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified span.</p>\\n\"\n  syntax:\n    content: public static DebugInfoExpression DebugInfo(SymbolDocumentInfo document, int startLine, int startColumn, int endLine, int endColumn)\n    content.vb: Public Shared Function DebugInfo(document As SymbolDocumentInfo, startLine As Integer, startColumn As Integer, endLine As Integer, endColumn As Integer) As DebugInfoExpression\n    parameters:\n    - id: document\n      type: System.Linq.Expressions.SymbolDocumentInfo\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the source file.</p>\\n\"\n    - id: startLine\n      type: System.Int32\n      description: \"\\n<p>The start line of this <xref href=\\\"System.Linq.Expressions.DebugInfoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. Must be greater than 0.</p>\\n\"\n    - id: startColumn\n      type: System.Int32\n      description: \"\\n<p>The start column of this <xref href=\\\"System.Linq.Expressions.DebugInfoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. Must be greater than 0.</p>\\n\"\n    - id: endLine\n      type: System.Int32\n      description: \"\\n<p>The end line of this <xref href=\\\"System.Linq.Expressions.DebugInfoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. Must be greater or equal than the start line.</p>\\n\"\n    - id: endColumn\n      type: System.Int32\n      description: \"\\n<p>The end column of this <xref href=\\\"System.Linq.Expressions.DebugInfoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If the end line is the same as the start line, it must be greater or equal than the start column. In any case, must be greater than 0.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.DebugInfoExpression\n      description: \"\\n<p>An instance of <xref href=\\\"System.Linq.Expressions.DebugInfoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.DebugInfo(SymbolDocumentInfo, Int32, Int32, Int32, Int32)\n- uid: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)\n  id: Decrement(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Decrement(Expression)\n  fullName: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Decrement\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 200\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the decrementing of the expression by 1.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression Decrement(Expression expression)\n    content.vb: Public Shared Function Decrement(expression As Expression) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to decrement.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the decremented expression.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Decrement(Expression)\n- uid: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Decrement(Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Decrement\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 201\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the decrementing of the expression by 1.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression Decrement(Expression expression, MethodInfo method)\n    content.vb: Public Shared Function Decrement(expression As Expression, method As MethodInfo) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to decrement.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the implementing method.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the decremented expression.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Decrement(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Default(System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Default(System.Type)\n  id: Default(System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Default(Type)\n  fullName: System.Linq.Expressions.Expression.Default(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Default\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 202\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.DefaultExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the specified type.</p>\\n\"\n  syntax:\n    content: public static DefaultExpression Default(Type type)\n    content.vb: Public Shared Function Default(type As Type) As DefaultExpression\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.DefaultExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.DefaultExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Default\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the specified type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Default(Type)\n- uid: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Divide(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Divide\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 203\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an arithmetic division operation.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression Divide(Expression left, Expression right)\n    content.vb: Public Shared Function Divide(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Divide\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The division operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Divide(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Divide(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Divide\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 204\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an arithmetic division operation. The implementing method can be specified.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression Divide(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function Divide(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Divide\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong> and the division operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Divide(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: DivideAssign(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DivideAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 205\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a division assignment operation that does not have overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression DivideAssign(Expression left, Expression right)\n    content.vb: Public Shared Function DivideAssign(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.DivideAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.DivideAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: DivideAssign(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DivideAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 206\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a division assignment operation that does not have overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression DivideAssign(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function DivideAssign(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.DivideAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.DivideAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: DivideAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DivideAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 207\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a division assignment operation that does not have overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression DivideAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)\n    content.vb: Public Shared Function DivideAssign(left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.DivideAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.DivideAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ElementInit(MethodInfo, IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ElementInit\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 208\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Linq.Expressions.ElementInit\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, given an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> as the second argument.</p>\\n\"\n  syntax:\n    content: public static ElementInit ElementInit(MethodInfo addMethod, IEnumerable<Expression> arguments)\n    content.vb: Public Shared Function ElementInit(addMethod As MethodInfo, arguments As IEnumerable(Of Expression)) As ElementInit\n    parameters:\n    - id: addMethod\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.ElementInit.AddMethod\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to set the <xref href=\\\"System.Linq.Expressions.ElementInit.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.ElementInit\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.ElementInit\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.ElementInit.AddMethod\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.ElementInit.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>addMethod</em> or <em>arguments</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The method that <em>addMethod</em> represents is not named \\\"Add\\\" (case insensitive).</p>\\n<p>-or-</p>\\n<p>The method that <em>addMethod</em> represents is not an instance method.</p>\\n<p>-or-</p>\\n<p>\\n<em>arguments</em> does not contain the same number of elements as the number of parameters for the method that <em>addMethod</em> represents.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of one or more elements of <em>arguments</em> is not assignable to the type of the corresponding parameter of the method that <em>addMethod</em> represents.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))\n  name.vb: ElementInit(MethodInfo, IEnumerable(Of Expression))\n  nameWithType: Expression.ElementInit(MethodInfo, IEnumerable<Expression>)\n  nameWithType.vb: Expression.ElementInit(MethodInfo, IEnumerable(Of Expression))\n- uid: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  id: ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ElementInit(MethodInfo, Expression[])\n  fullName: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo, System.Linq.Expressions.Expression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ElementInit\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 209\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Linq.Expressions.ElementInit\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, given an array of values as the second argument.</p>\\n\"\n  syntax:\n    content: public static ElementInit ElementInit(MethodInfo addMethod, params Expression[] arguments)\n    content.vb: Public Shared Function ElementInit(addMethod As MethodInfo, ParamArray arguments As Expression()) As ElementInit\n    parameters:\n    - id: addMethod\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.ElementInit.AddMethod\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to set the <xref href=\\\"System.Linq.Expressions.ElementInit.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.ElementInit\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.ElementInit\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.ElementInit.AddMethod\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.ElementInit.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>addMethod</em> or <em>arguments</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The method that addMethod represents is not named \\\"Add\\\" (case insensitive).</p>\\n<p>-or-</p>\\n<p>The method that addMethod represents is not an instance method.</p>\\n<p>-or-</p>\\n<p>arguments does not contain the same number of elements as the number of parameters for the method that addMethod represents.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of one or more elements of <em>arguments</em> is not assignable to the type of the corresponding parameter of the method that <em>addMethod</em> represents.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo, System.Linq.Expressions.Expression())\n  name.vb: ElementInit(MethodInfo, Expression())\n  nameWithType: Expression.ElementInit(MethodInfo, Expression[])\n  nameWithType.vb: Expression.ElementInit(MethodInfo, Expression())\n- uid: System.Linq.Expressions.Expression.Empty\n  commentId: M:System.Linq.Expressions.Expression.Empty\n  id: Empty\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Empty()\n  fullName: System.Linq.Expressions.Expression.Empty()\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Empty\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 210\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates an empty expression that has <xref href=\\\"System.Void\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type.</p>\\n\"\n  syntax:\n    content: public static DefaultExpression Empty()\n    content.vb: Public Shared Function Empty As DefaultExpression\n    return:\n      type: System.Linq.Expressions.DefaultExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.DefaultExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Default\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to <xref href=\\\"System.Void\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Empty()\n- uid: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Equal(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equal\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 211\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an equality comparison.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression Equal(Expression left, Expression right)\n    content.vb: Public Shared Function Equal(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Equal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The equality operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Equal(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  id: Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Equal(Expression, Expression, Boolean, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equal\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 212\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an equality comparison. The implementing method can be specified.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression Equal(Expression left, Expression right, bool liftToNull, MethodInfo method)\n    content.vb: Public Shared Function Equal(left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: liftToNull\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to set <xref href=\\\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to <strong>true</strong>; <strong>false</strong> to set <xref href=\\\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to <strong>false</strong>.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Equal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong> and the equality operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Equal(Expression, Expression, Boolean, MethodInfo)\n- uid: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ExclusiveOr(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExclusiveOr\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 213\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a bitwise <strong>XOR</strong> operation, using <code>op_ExclusiveOr</code> for user-defined types.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression ExclusiveOr(Expression left, Expression right)\n    content.vb: Public Shared Function ExclusiveOr(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.ExclusiveOr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <strong>XOR</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.ExclusiveOr(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ExclusiveOr(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExclusiveOr\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 214\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a bitwise <strong>XOR</strong> operation, using <code>op_ExclusiveOr</code> for user-defined types. The implementing method can be specified.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression ExclusiveOr(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function ExclusiveOr(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.ExclusiveOr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong> and the <strong>XOR</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.ExclusiveOr(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ExclusiveOrAssign(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExclusiveOrAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 215\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a bitwise XOR assignment operation, using <code>op_ExclusiveOr</code> for user-defined types.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression ExclusiveOrAssign(Expression left, Expression right)\n    content.vb: Public Shared Function ExclusiveOrAssign(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.ExclusiveOrAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.ExclusiveOrAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ExclusiveOrAssign(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExclusiveOrAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 216\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a bitwise XOR assignment operation, using <code>op_ExclusiveOr</code> for user-defined types.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression ExclusiveOrAssign(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function ExclusiveOrAssign(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.ExclusiveOrAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExclusiveOrAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 217\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a bitwise XOR assignment operation, using <code>op_ExclusiveOr</code> for user-defined types.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression ExclusiveOrAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)\n    content.vb: Public Shared Function ExclusiveOrAssign(left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.ExclusiveOrAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)\n  commentId: M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)\n  id: Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Field(Expression, FieldInfo)\n  fullName: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression, System.Reflection.FieldInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Field\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 218\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MemberExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents accessing a field.</p>\\n\"\n  syntax:\n    content: public static MemberExpression Field(Expression expression, FieldInfo field)\n    content.vb: Public Shared Function Field(expression As Expression, field As FieldInfo) As MemberExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.MemberExpression.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to. For <strong>static</strong> (<strong>Shared</strong> in Visual Basic), <em>expression</em> must be <strong>null</strong>.</p>\\n\"\n    - id: field\n      type: System.Reflection.FieldInfo\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.FieldInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.MemberExpression.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MemberExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MemberExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.MemberAccess\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.MemberExpression.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.MemberExpression.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>field</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The field represented by <em>field</em> is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic) and <em>expression</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>expression</em>.Type is not assignable to the declaring type of the field represented by <em>field</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Field(Expression, FieldInfo)\n- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)\n  commentId: M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)\n  id: Field(System.Linq.Expressions.Expression,System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Field(Expression, String)\n  fullName: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Field\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 219\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MemberExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents accessing a field given the name of the field.</p>\\n\"\n  syntax:\n    content: public static MemberExpression Field(Expression expression, string fieldName)\n    content.vb: Public Shared Function Field(expression As Expression, fieldName As String) As MemberExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains a field named <em>fieldName</em>. This can be null for static fields.</p>\\n\"\n    - id: fieldName\n      type: System.String\n      description: \"\\n<p>The name of a field to be accessed.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MemberExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MemberExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.MemberAccess\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the <xref href=\\\"System.Linq.Expressions.MemberExpression.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to <em>expression</em>, and the <xref href=\\\"System.Linq.Expressions.MemberExpression.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the <xref href=\\\"System.Reflection.FieldInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the field denoted by <em>fieldName</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>expression</em> or <em>fieldName</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>No field named <em>fieldName</em> is defined in <em>expression</em>.Type or its base types.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Field(Expression, String)\n- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)\n  commentId: M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)\n  id: Field(System.Linq.Expressions.Expression,System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Field(Expression, Type, String)\n  fullName: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression, System.Type, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Field\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 220\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MemberExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents accessing a field.</p>\\n\"\n  syntax:\n    content: public static MemberExpression Field(Expression expression, Type type, string fieldName)\n    content.vb: Public Shared Function Field(expression As Expression, type As Type, fieldName As String) As MemberExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The containing object of the field. This can be null for static fields.</p>\\n\"\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the field.</p>\\n\"\n    - id: fieldName\n      type: System.String\n      description: \"\\n<p>The field to be accessed.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MemberExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.MemberExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Field(Expression, Type, String)\n- uid: System.Linq.Expressions.Expression.GetActionType(System.Type[])\n  commentId: M:System.Linq.Expressions.Expression.GetActionType(System.Type[])\n  id: GetActionType(System.Type[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: GetActionType(Type[])\n  fullName: System.Linq.Expressions.Expression.GetActionType(System.Type[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetActionType\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 221\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents a generic System.Action delegate type that has specific type arguments.</p>\\n\"\n  syntax:\n    content: public static Type GetActionType(params Type[] typeArgs)\n    content.vb: Public Shared Function GetActionType(ParamArray typeArgs As Type()) As Type\n    parameters:\n    - id: typeArgs\n      type: System.Type[]\n      description: \"\\n<p>An array of up to sixteen <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects that specify the type arguments for the <strong>System.Action</strong> delegate type.</p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>The type of a System.Action delegate that has the specified type arguments.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>typeArgs</em> contains more than sixteen elements.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>typeArgs</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.GetActionType(System.Type())\n  name.vb: GetActionType(Type())\n  nameWithType: Expression.GetActionType(Type[])\n  nameWithType.vb: Expression.GetActionType(Type())\n- uid: System.Linq.Expressions.Expression.GetDelegateType(System.Type[])\n  commentId: M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])\n  id: GetDelegateType(System.Type[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: GetDelegateType(Type[])\n  fullName: System.Linq.Expressions.Expression.GetDelegateType(System.Type[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetDelegateType\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 222\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents a generic <code>System.Func</code> or <code>System.Action</code> delegate type that has specific type arguments.</p>\\n\"\n  syntax:\n    content: public static Type GetDelegateType(params Type[] typeArgs)\n    content.vb: Public Shared Function GetDelegateType(ParamArray typeArgs As Type()) As Type\n    parameters:\n    - id: typeArgs\n      type: System.Type[]\n      description: \"\\n<p>The type arguments of the delegate.</p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>The delegate type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.GetDelegateType(System.Type())\n  name.vb: GetDelegateType(Type())\n  nameWithType: Expression.GetDelegateType(Type[])\n  nameWithType.vb: Expression.GetDelegateType(Type())\n- uid: System.Linq.Expressions.Expression.GetFuncType(System.Type[])\n  commentId: M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])\n  id: GetFuncType(System.Type[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: GetFuncType(Type[])\n  fullName: System.Linq.Expressions.Expression.GetFuncType(System.Type[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetFuncType\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 223\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents a generic <code>System.Func</code> delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.</p>\\n\"\n  syntax:\n    content: public static Type GetFuncType(params Type[] typeArgs)\n    content.vb: Public Shared Function GetFuncType(ParamArray typeArgs As Type()) As Type\n    parameters:\n    - id: typeArgs\n      type: System.Type[]\n      description: \"\\n<p>An array of one to seventeen <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects that specify the type arguments for the <strong>System.Func</strong> delegate type.</p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>The type of a System.Func delegate that has the specified type arguments.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>typeArgs</em> contains fewer than one or more than seventeen elements.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>typeArgs</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.GetFuncType(System.Type())\n  name.vb: GetFuncType(Type())\n  nameWithType: Expression.GetFuncType(Type[])\n  nameWithType.vb: Expression.GetFuncType(Type())\n- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)\n  commentId: M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)\n  id: Goto(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Goto(LabelTarget)\n  fullName: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Goto\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 224\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a \\\"go to\\\" statement.</p>\\n\"\n  syntax:\n    content: public static GotoExpression Goto(LabelTarget target)\n    content.vb: Public Shared Function Goto(target As LabelTarget) As GotoExpression\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.LabelTarget\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that the <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will jump to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with <xref href=\\\"System.Linq.Expressions.GotoExpression.Kind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to Goto, the <xref href=\\\"System.Linq.Expressions.GotoExpression.Target\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the specified value, and a null value to be passed to the target label upon jumping.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Goto(LabelTarget)\n- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  id: Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Goto(LabelTarget, Expression)\n  fullName: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Goto\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 225\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a \\\"go to\\\" statement. The value passed to the label upon jumping can be specified.</p>\\n\"\n  syntax:\n    content: public static GotoExpression Goto(LabelTarget target, Expression value)\n    content.vb: Public Shared Function Goto(target As LabelTarget, value As Expression) As GotoExpression\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.LabelTarget\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that the <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will jump to.</p>\\n\"\n    - id: value\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The value that will be passed to the associated label upon jumping.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with <xref href=\\\"System.Linq.Expressions.GotoExpression.Kind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to Goto, the <xref href=\\\"System.Linq.Expressions.GotoExpression.Target\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to <em>target</em>, and <em>value</em> to be passed to the target label upon jumping.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Goto(LabelTarget, Expression)\n- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  id: Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Goto(LabelTarget, Expression, Type)\n  fullName: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Goto\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 226\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a \\\"go to\\\" statement with the specified type. The value passed to the label upon jumping can be specified.</p>\\n\"\n  syntax:\n    content: public static GotoExpression Goto(LabelTarget target, Expression value, Type type)\n    content.vb: Public Shared Function Goto(target As LabelTarget, value As Expression, type As Type) As GotoExpression\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.LabelTarget\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that the <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will jump to.</p>\\n\"\n    - id: value\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The value that will be passed to the associated label upon jumping.</p>\\n\"\n    - id: type\n      type: System.Type\n      description: \"\\n<p>An <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with <xref href=\\\"System.Linq.Expressions.GotoExpression.Kind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to Goto, the <xref href=\\\"System.Linq.Expressions.GotoExpression.Target\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to <em>target</em>, the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to <em>type</em>, and <em>value</em> to be passed to the target label upon jumping.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Goto(LabelTarget, Expression, Type)\n- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)\n  id: Goto(System.Linq.Expressions.LabelTarget,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Goto(LabelTarget, Type)\n  fullName: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Goto\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 227\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a \\\"go to\\\" statement with the specified type.</p>\\n\"\n  syntax:\n    content: public static GotoExpression Goto(LabelTarget target, Type type)\n    content.vb: Public Shared Function Goto(target As LabelTarget, type As Type) As GotoExpression\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.LabelTarget\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that the <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will jump to.</p>\\n\"\n    - id: type\n      type: System.Type\n      description: \"\\n<p>An <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with <xref href=\\\"System.Linq.Expressions.GotoExpression.Kind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to Goto, the <xref href=\\\"System.Linq.Expressions.GotoExpression.Target\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the specified value, the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to <em>type</em>, and a null value to be passed to the target label upon jumping.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Goto(LabelTarget, Type)\n- uid: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThan\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 228\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a \\\"greater than\\\" numeric comparison.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression GreaterThan(Expression left, Expression right)\n    content.vb: Public Shared Function GreaterThan(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.GreaterThan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The \\\"greater than\\\" operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.GreaterThan(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  id: GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(Expression, Expression, Boolean, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThan\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 229\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a \\\"greater than\\\" numeric comparison. The implementing method can be specified.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression GreaterThan(Expression left, Expression right, bool liftToNull, MethodInfo method)\n    content.vb: Public Shared Function GreaterThan(left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: liftToNull\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to set <xref href=\\\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to <strong>true</strong>; <strong>false</strong> to set <xref href=\\\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to <strong>false</strong>.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.GreaterThan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong> and the \\\"greater than\\\" operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.GreaterThan(Expression, Expression, Boolean, MethodInfo)\n- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThanOrEqual\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 230\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a \\\"greater than or equal\\\" numeric comparison.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression GreaterThanOrEqual(Expression left, Expression right)\n    content.vb: Public Shared Function GreaterThanOrEqual(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.GreaterThanOrEqual\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The \\\"greater than or equal\\\" operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.GreaterThanOrEqual(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  id: GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual(Expression, Expression, Boolean, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThanOrEqual\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 231\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a \\\"greater than or equal\\\" numeric comparison.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression GreaterThanOrEqual(Expression left, Expression right, bool liftToNull, MethodInfo method)\n    content.vb: Public Shared Function GreaterThanOrEqual(left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: liftToNull\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to set <xref href=\\\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to <strong>true</strong>; <strong>false</strong> to set <xref href=\\\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to <strong>false</strong>.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.GreaterThanOrEqual\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong> and the \\\"greater than or equal\\\" operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.GreaterThanOrEqual(Expression, Expression, Boolean, MethodInfo)\n- uid: System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: IfThen(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IfThen\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 232\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.ConditionalExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a conditional block with an <strong>if</strong> statement.</p>\\n\"\n  syntax:\n    content: public static ConditionalExpression IfThen(Expression test, Expression ifTrue)\n    content.vb: Public Shared Function IfThen(test As Expression, ifTrue As Expression) As ConditionalExpression\n    parameters:\n    - id: test\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.ConditionalExpression.Test\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: ifTrue\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.ConditionalExpression.IfTrue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.ConditionalExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.ConditionalExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Conditional\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.ConditionalExpression.Test\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.ConditionalExpression.IfTrue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, properties set to the specified values. The <xref href=\\\"System.Linq.Expressions.ConditionalExpression.IfFalse\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is set to default expression and the type of the resulting <xref href=\\\"System.Linq.Expressions.ConditionalExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> returned by this method is <xref href=\\\"System.Void\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.IfThen(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: IfThenElse(Expression, Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IfThenElse\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 233\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.ConditionalExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a conditional block with <strong>if</strong> and <strong>else</strong> statements.</p>\\n\"\n  syntax:\n    content: public static ConditionalExpression IfThenElse(Expression test, Expression ifTrue, Expression ifFalse)\n    content.vb: Public Shared Function IfThenElse(test As Expression, ifTrue As Expression, ifFalse As Expression) As ConditionalExpression\n    parameters:\n    - id: test\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.ConditionalExpression.Test\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: ifTrue\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.ConditionalExpression.IfTrue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: ifFalse\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.ConditionalExpression.IfFalse\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.ConditionalExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.ConditionalExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Conditional\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.ConditionalExpression.Test\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.ConditionalExpression.IfTrue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.ConditionalExpression.IfFalse\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values. The type of the resulting <xref href=\\\"System.Linq.Expressions.ConditionalExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> returned by this method is <xref href=\\\"System.Void\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.IfThenElse(Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)\n  id: Increment(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Increment(Expression)\n  fullName: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Increment\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 234\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the incrementing of the expression value by 1.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression Increment(Expression expression)\n    content.vb: Public Shared Function Increment(expression As Expression) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to increment.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the incremented expression.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Increment(Expression)\n- uid: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Increment(Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Increment\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 235\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the incrementing of the expression by 1.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression Increment(Expression expression, MethodInfo method)\n    content.vb: Public Shared Function Increment(expression As Expression, method As MethodInfo) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to increment.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the implementing method.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the incremented expression.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Increment(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Invoke(Expression, IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Invoke\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 236\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Linq.Expressions.InvocationExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that applies a delegate or lambda expression to a list of argument expressions.</p>\\n\"\n  syntax:\n    content: public static InvocationExpression Invoke(Expression expression, IEnumerable<Expression> arguments)\n    content.vb: Public Shared Function Invoke(expression As Expression, arguments As IEnumerable(Of Expression)) As InvocationExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the delegate or lambda expression to be applied to.</p>\\n\"\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects that represent the arguments that the delegate or lambda expression is applied to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.InvocationExpression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.InvocationExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that applies the specified delegate or lambda expression to the provided arguments.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>expression</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>expression</em>.Type does not represent a delegate type or an <xref href=\\\"System.Linq.Expressions.Expression`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of an element of <em>arguments</em> is not assignable to the type of the corresponding parameter of the delegate represented by <em>expression</em>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>arguments</em> does not contain the same number of elements as the list of parameters for the delegate represented by <em>expression</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))\n  name.vb: Invoke(Expression, IEnumerable(Of Expression))\n  nameWithType: Expression.Invoke(Expression, IEnumerable<Expression>)\n  nameWithType.vb: Expression.Invoke(Expression, IEnumerable(Of Expression))\n- uid: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  id: Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Invoke(Expression, Expression[])\n  fullName: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Invoke\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 237\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Linq.Expressions.InvocationExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that applies a delegate or lambda expression to a list of argument expressions.</p>\\n\"\n  syntax:\n    content: public static InvocationExpression Invoke(Expression expression, params Expression[] arguments)\n    content.vb: Public Shared Function Invoke(expression As Expression, ParamArray arguments As Expression()) As InvocationExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the delegate or lambda expression to be applied.</p>\\n\"\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects that represent the arguments that the delegate or lambda expression is applied to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.InvocationExpression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.InvocationExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that applies the specified delegate or lambda expression to the provided arguments.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>expression</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>expression</em>.Type does not represent a delegate type or an <xref href=\\\"System.Linq.Expressions.Expression`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of an element of <em>arguments</em> is not assignable to the type of the corresponding parameter of the delegate represented by <em>expression</em>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>arguments</em> does not contain the same number of elements as the list of parameters for the delegate represented by <em>expression</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression())\n  name.vb: Invoke(Expression, Expression())\n  nameWithType: Expression.Invoke(Expression, Expression[])\n  nameWithType.vb: Expression.Invoke(Expression, Expression())\n- uid: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)\n  id: IsFalse(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: IsFalse(Expression)\n  fullName: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsFalse\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 238\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Returns whether the expression evaluates to false.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression IsFalse(Expression expression)\n    content.vb: Public Shared Function IsFalse(expression As Expression) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to evaluate.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>An instance of <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.IsFalse(Expression)\n- uid: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: IsFalse(Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsFalse\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 239\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Returns whether the expression evaluates to false.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression IsFalse(Expression expression, MethodInfo method)\n    content.vb: Public Shared Function IsFalse(expression As Expression, method As MethodInfo) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to evaluate.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the implementing method.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>An instance of <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.IsFalse(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)\n  id: IsTrue(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: IsTrue(Expression)\n  fullName: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsTrue\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 240\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Returns whether the expression evaluates to true.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression IsTrue(Expression expression)\n    content.vb: Public Shared Function IsTrue(expression As Expression) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to evaluate.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>An instance of <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.IsTrue(Expression)\n- uid: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: IsTrue(Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsTrue\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 241\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Returns whether the expression evaluates to true.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression IsTrue(Expression expression, MethodInfo method)\n    content.vb: Public Shared Function IsTrue(expression As Expression, method As MethodInfo) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to evaluate.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the implementing method.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>An instance of <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.IsTrue(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Label\n  commentId: M:System.Linq.Expressions.Expression.Label\n  id: Label\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Label()\n  fullName: System.Linq.Expressions.Expression.Label()\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Label\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 242\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.LabelTarget\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a label with void type and no name.</p>\\n\"\n  syntax:\n    content: public static LabelTarget Label()\n    content.vb: Public Shared Function Label As LabelTarget\n    return:\n      type: System.Linq.Expressions.LabelTarget\n      description: \"\\n<p>The new <xref href=\\\"System.Linq.Expressions.LabelTarget\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Label()\n- uid: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)\n  commentId: M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)\n  id: Label(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Label(LabelTarget)\n  fullName: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Label\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 243\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.LabelExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a label without a default value.</p>\\n\"\n  syntax:\n    content: public static LabelExpression Label(LabelTarget target)\n    content.vb: Public Shared Function Label(target As LabelTarget) As LabelExpression\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.LabelTarget\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> which this <xref href=\\\"System.Linq.Expressions.LabelExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be associated with.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.LabelExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.LabelExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> without a default value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Label(LabelTarget)\n- uid: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  id: Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Label(LabelTarget, Expression)\n  fullName: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Label\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 244\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.LabelExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a label with the given default value.</p>\\n\"\n  syntax:\n    content: public static LabelExpression Label(LabelTarget target, Expression defaultValue)\n    content.vb: Public Shared Function Label(target As LabelTarget, defaultValue As Expression) As LabelExpression\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.LabelTarget\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> which this <xref href=\\\"System.Linq.Expressions.LabelExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be associated with.</p>\\n\"\n    - id: defaultValue\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The value of this <xref href=\\\"System.Linq.Expressions.LabelExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> when the label is reached through regular control flow.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.LabelExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.LabelExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the given default value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Label(LabelTarget, Expression)\n- uid: System.Linq.Expressions.Expression.Label(System.String)\n  commentId: M:System.Linq.Expressions.Expression.Label(System.String)\n  id: Label(System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Label(String)\n  fullName: System.Linq.Expressions.Expression.Label(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Label\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 245\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.LabelTarget\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a label with void type and the given name.</p>\\n\"\n  syntax:\n    content: public static LabelTarget Label(string name)\n    content.vb: Public Shared Function Label(name As String) As LabelTarget\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the label.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.LabelTarget\n      description: \"\\n<p>The new <xref href=\\\"System.Linq.Expressions.LabelTarget\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Label(String)\n- uid: System.Linq.Expressions.Expression.Label(System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Label(System.Type)\n  id: Label(System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Label(Type)\n  fullName: System.Linq.Expressions.Expression.Label(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Label\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 246\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.LabelTarget\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a label with the given type.</p>\\n\"\n  syntax:\n    content: public static LabelTarget Label(Type type)\n    content.vb: Public Shared Function Label(type As Type) As LabelTarget\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The type of value that is passed when jumping to the label.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.LabelTarget\n      description: \"\\n<p>The new <xref href=\\\"System.Linq.Expressions.LabelTarget\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Label(Type)\n- uid: System.Linq.Expressions.Expression.Label(System.Type,System.String)\n  commentId: M:System.Linq.Expressions.Expression.Label(System.Type,System.String)\n  id: Label(System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Label(Type, String)\n  fullName: System.Linq.Expressions.Expression.Label(System.Type, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Label\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 247\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.LabelTarget\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a label with the given type and name.</p>\\n\"\n  syntax:\n    content: public static LabelTarget Label(Type type, string name)\n    content.vb: Public Shared Function Label(type As Type, name As String) As LabelTarget\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The type of value that is passed when jumping to the label.</p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the label.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.LabelTarget\n      description: \"\\n<p>The new <xref href=\\\"System.Linq.Expressions.LabelTarget\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Label(Type, String)\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Lambda(Expression, Boolean, IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Lambda\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 248\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a LambdaExpression by first constructing a delegate type.</p>\\n\"\n  syntax:\n    content: public static LambdaExpression Lambda(Expression body, bool tailCall, IEnumerable<ParameterExpression> parameters)\n    content.vb: Public Shared Function Lambda(body As Expression, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: tailCall\n      type: System.Boolean\n      description: \"\\n<p>A <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.</p>\\n\"\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.LambdaExpression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to Lambda and the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))\n  name.vb: Lambda(Expression, Boolean, IEnumerable(Of ParameterExpression))\n  nameWithType: Expression.Lambda(Expression, Boolean, IEnumerable<ParameterExpression>)\n  nameWithType.vb: Expression.Lambda(Expression, Boolean, IEnumerable(Of ParameterExpression))\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  id: Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Lambda(Expression, Boolean, ParameterExpression[])\n  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Lambda\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 249\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a LambdaExpression by first constructing a delegate type.</p>\\n\"\n  syntax:\n    content: public static LambdaExpression Lambda(Expression body, bool tailCall, params ParameterExpression[] parameters)\n    content.vb: Public Shared Function Lambda(body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As LambdaExpression\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: tailCall\n      type: System.Boolean\n      description: \"\\n<p>A <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.</p>\\n\"\n    - id: parameters\n      type: System.Linq.Expressions.ParameterExpression[]\n      description: \"\\n<p>An array that contains <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.LambdaExpression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to Lambda and the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression())\n  name.vb: Lambda(Expression, Boolean, ParameterExpression())\n  nameWithType: Expression.Lambda(Expression, Boolean, ParameterExpression[])\n  nameWithType.vb: Expression.Lambda(Expression, Boolean, ParameterExpression())\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Lambda(Expression, IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Lambda\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 250\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a LambdaExpression by first constructing a delegate type.</p>\\n\"\n  syntax:\n    content: public static LambdaExpression Lambda(Expression body, IEnumerable<ParameterExpression> parameters)\n    content.vb: Public Shared Function Lambda(body As Expression, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.LambdaExpression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to Lambda and the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))\n  name.vb: Lambda(Expression, IEnumerable(Of ParameterExpression))\n  nameWithType: Expression.Lambda(Expression, IEnumerable<ParameterExpression>)\n  nameWithType.vb: Expression.Lambda(Expression, IEnumerable(Of ParameterExpression))\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  id: Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Lambda(Expression, ParameterExpression[])\n  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Lambda\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 251\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> by first constructing a delegate type.</p>\\n\"\n  syntax:\n    content: public static LambdaExpression Lambda(Expression body, params ParameterExpression[] parameters)\n    content.vb: Public Shared Function Lambda(body As Expression, ParamArray parameters As ParameterExpression()) As LambdaExpression\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: parameters\n      type: System.Linq.Expressions.ParameterExpression[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Lambda\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>body</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>One or more elements of <em>parameters</em> are <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>parameters</em> contains more than sixteen elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression())\n  name.vb: Lambda(Expression, ParameterExpression())\n  nameWithType: Expression.Lambda(Expression, ParameterExpression[])\n  nameWithType.vb: Expression.Lambda(Expression, ParameterExpression())\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Lambda(Expression, String, Boolean, IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Lambda\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 252\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a LambdaExpression by first constructing a delegate type.</p>\\n\"\n  syntax:\n    content: public static LambdaExpression Lambda(Expression body, string name, bool tailCall, IEnumerable<ParameterExpression> parameters)\n    content.vb: Public Shared Function Lambda(body As Expression, name As String, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name for the lambda. Used for emitting debug information.</p>\\n\"\n    - id: tailCall\n      type: System.Boolean\n      description: \"\\n<p>A <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.</p>\\n\"\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.LambdaExpression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to Lambda and the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))\n  name.vb: Lambda(Expression, String, Boolean, IEnumerable(Of ParameterExpression))\n  nameWithType: Expression.Lambda(Expression, String, Boolean, IEnumerable<ParameterExpression>)\n  nameWithType.vb: Expression.Lambda(Expression, String, Boolean, IEnumerable(Of ParameterExpression))\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Lambda(Expression, String, IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Lambda\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 253\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a LambdaExpression by first constructing a delegate type.</p>\\n\"\n  syntax:\n    content: public static LambdaExpression Lambda(Expression body, string name, IEnumerable<ParameterExpression> parameters)\n    content.vb: Public Shared Function Lambda(body As Expression, name As String, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name for the lambda. Used for emitting debug information.</p>\\n\"\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.LambdaExpression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to Lambda and the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))\n  name.vb: Lambda(Expression, String, IEnumerable(Of ParameterExpression))\n  nameWithType: Expression.Lambda(Expression, String, IEnumerable<ParameterExpression>)\n  nameWithType.vb: Expression.Lambda(Expression, String, IEnumerable(Of ParameterExpression))\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Lambda(Type, Expression, Boolean, IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Lambda\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 254\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a LambdaExpression by first constructing a delegate type.</p>\\n\"\n  syntax:\n    content: public static LambdaExpression Lambda(Type delegateType, Expression body, bool tailCall, IEnumerable<ParameterExpression> parameters)\n    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the delegate signature for the lambda.</p>\\n\"\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: tailCall\n      type: System.Boolean\n      description: \"\\n<p>A <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.</p>\\n\"\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.LambdaExpression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to Lambda and the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))\n  name.vb: Lambda(Type, Expression, Boolean, IEnumerable(Of ParameterExpression))\n  nameWithType: Expression.Lambda(Type, Expression, Boolean, IEnumerable<ParameterExpression>)\n  nameWithType.vb: Expression.Lambda(Type, Expression, Boolean, IEnumerable(Of ParameterExpression))\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Lambda(Type, Expression, Boolean, ParameterExpression[])\n  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Lambda\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 255\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a LambdaExpression by first constructing a delegate type.</p>\\n\"\n  syntax:\n    content: public static LambdaExpression Lambda(Type delegateType, Expression body, bool tailCall, params ParameterExpression[] parameters)\n    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As LambdaExpression\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the delegate signature for the lambda.</p>\\n\"\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: tailCall\n      type: System.Boolean\n      description: \"\\n<p>A <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.</p>\\n\"\n    - id: parameters\n      type: System.Linq.Expressions.ParameterExpression[]\n      description: \"\\n<p>An array that contains <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.LambdaExpression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to Lambda and the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression())\n  name.vb: Lambda(Type, Expression, Boolean, ParameterExpression())\n  nameWithType: Expression.Lambda(Type, Expression, Boolean, ParameterExpression[])\n  nameWithType.vb: Expression.Lambda(Type, Expression, Boolean, ParameterExpression())\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Lambda(Type, Expression, IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Lambda\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 256\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> by first constructing a delegate type. It can be used when the delegate type is not known at compile time.</p>\\n\"\n  syntax:\n    content: public static LambdaExpression Lambda(Type delegateType, Expression body, IEnumerable<ParameterExpression> parameters)\n    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a delegate signature for the lambda.</p>\\n\"\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"\\n<p>An object that represents a lambda expression which has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Lambda\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>delegateType</em> or <em>body</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>One or more elements in <em>parameters</em> are <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>delegateType</em> does not represent a delegate type.</p>\\n<p>-or-</p>\\n<p>\\n<em>body</em>.Type represents a type that is not assignable to the return type of the delegate type represented by <em>delegateType</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>parameters</em> does not contain the same number of elements as the list of parameters for the delegate type represented by <em>delegateType</em>.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of an element of <em>parameters</em> is not assignable from the type of the corresponding parameter type of the delegate type represented by <em>delegateType</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))\n  name.vb: Lambda(Type, Expression, IEnumerable(Of ParameterExpression))\n  nameWithType: Expression.Lambda(Type, Expression, IEnumerable<ParameterExpression>)\n  nameWithType.vb: Expression.Lambda(Type, Expression, IEnumerable(Of ParameterExpression))\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Lambda(Type, Expression, ParameterExpression[])\n  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Lambda\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 257\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> by first constructing a delegate type. It can be used when the delegate type is not known at compile time.</p>\\n\"\n  syntax:\n    content: public static LambdaExpression Lambda(Type delegateType, Expression body, params ParameterExpression[] parameters)\n    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, ParamArray parameters As ParameterExpression()) As LambdaExpression\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a delegate signature for the lambda.</p>\\n\"\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: parameters\n      type: System.Linq.Expressions.ParameterExpression[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"\\n<p>An object that represents a lambda expression which has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Lambda\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>delegateType</em> or <em>body</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>One or more elements in <em>parameters</em> are <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>delegateType</em> does not represent a delegate type.</p>\\n<p>-or-</p>\\n<p>\\n<em>body</em>.Type represents a type that is not assignable to the return type of the delegate type represented by <em>delegateType</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>parameters</em> does not contain the same number of elements as the list of parameters for the delegate type represented by <em>delegateType</em>.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of an element of <em>parameters</em> is not assignable from the type of the corresponding parameter type of the delegate type represented by <em>delegateType</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression())\n  name.vb: Lambda(Type, Expression, ParameterExpression())\n  nameWithType: Expression.Lambda(Type, Expression, ParameterExpression[])\n  nameWithType.vb: Expression.Lambda(Type, Expression, ParameterExpression())\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Lambda(Type, Expression, String, Boolean, IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Lambda\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 258\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a LambdaExpression by first constructing a delegate type.</p>\\n\"\n  syntax:\n    content: public static LambdaExpression Lambda(Type delegateType, Expression body, string name, bool tailCall, IEnumerable<ParameterExpression> parameters)\n    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, name As String, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the delegate signature for the lambda.</p>\\n\"\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to. </p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name for the lambda. Used for emitting debug information.</p>\\n\"\n    - id: tailCall\n      type: System.Boolean\n      description: \"\\n<p>A <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that indicates if tail call optimization will be applied when compiling the created expression. </p>\\n\"\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection. </p>\\n\"\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.LambdaExpression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to Lambda and the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))\n  name.vb: Lambda(Type, Expression, String, Boolean, IEnumerable(Of ParameterExpression))\n  nameWithType: Expression.Lambda(Type, Expression, String, Boolean, IEnumerable<ParameterExpression>)\n  nameWithType.vb: Expression.Lambda(Type, Expression, String, Boolean, IEnumerable(Of ParameterExpression))\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  commentId: M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Lambda(Type, Expression, String, IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Lambda\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 259\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a LambdaExpression by first constructing a delegate type.</p>\\n\"\n  syntax:\n    content: public static LambdaExpression Lambda(Type delegateType, Expression body, string name, IEnumerable<ParameterExpression> parameters)\n    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, name As String, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the delegate signature for the lambda.</p>\\n\"\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name for the lambda. Used for emitting debug information.</p>\\n\"\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.LambdaExpression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to Lambda and the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))\n  name.vb: Lambda(Type, Expression, String, IEnumerable(Of ParameterExpression))\n  nameWithType: Expression.Lambda(Type, Expression, String, IEnumerable<ParameterExpression>)\n  nameWithType.vb: Expression.Lambda(Type, Expression, String, IEnumerable(Of ParameterExpression))\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Lambda<TDelegate>(Expression, Boolean, IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Lambda\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 260\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Linq.Expressions.Expression`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> where the delegate type is known at compile time.</p>\\n\"\n  syntax:\n    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, bool tailCall, IEnumerable<ParameterExpression> parameters)\n    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: tailCall\n      type: System.Boolean\n      description: \"\\n<p>A <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.</p>\\n\"\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    typeParameters:\n    - id: TDelegate\n      description: \"\\n<p>The delegate type. </p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression{{TDelegate}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.LambdaExpression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Lambda\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))\n  name.vb: Lambda(Of TDelegate)(Expression, Boolean, IEnumerable(Of ParameterExpression))\n  nameWithType: Expression.Lambda<TDelegate>(Expression, Boolean, IEnumerable<ParameterExpression>)\n  nameWithType.vb: Expression.Lambda(Of TDelegate)(Expression, Boolean, IEnumerable(Of ParameterExpression))\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  id: Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Lambda<TDelegate>(Expression, Boolean, ParameterExpression[])\n  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Lambda\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 261\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Linq.Expressions.Expression`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> where the delegate type is known at compile time.</p>\\n\"\n  syntax:\n    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, bool tailCall, params ParameterExpression[] parameters)\n    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As Expression(Of TDelegate)\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: tailCall\n      type: System.Boolean\n      description: \"\\n<p>A <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.</p>\\n\"\n    - id: parameters\n      type: System.Linq.Expressions.ParameterExpression[]\n      description: \"\\n<p>An array that contains <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    typeParameters:\n    - id: TDelegate\n      description: \"\\n<p>The delegate type. </p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression{{TDelegate}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Lambda\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression())\n  name.vb: Lambda(Of TDelegate)(Expression, Boolean, ParameterExpression())\n  nameWithType: Expression.Lambda<TDelegate>(Expression, Boolean, ParameterExpression[])\n  nameWithType.vb: Expression.Lambda(Of TDelegate)(Expression, Boolean, ParameterExpression())\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Lambda\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 262\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Linq.Expressions.Expression`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> where the delegate type is known at compile time.</p>\\n\"\n  syntax:\n    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, IEnumerable<ParameterExpression> parameters)\n    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    typeParameters:\n    - id: TDelegate\n      description: \"\\n<p>A delegate type.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression{{TDelegate}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Lambda\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>body</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>One or more elements in <em>parameters</em> are <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>TDelegate</em> is not a delegate type.</p>\\n<p>-or-</p>\\n<p>\\n<em>body</em>.Type represents a type that is not assignable to the return type of <em>TDelegate</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>parameters</em> does not contain the same number of elements as the list of parameters for <em>TDelegate</em>.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of an element of <em>parameters</em> is not assignable from the type of the corresponding parameter type of <em>TDelegate</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))\n  name.vb: Lambda(Of TDelegate)(Expression, IEnumerable(Of ParameterExpression))\n  nameWithType: Expression.Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>)\n  nameWithType.vb: Expression.Lambda(Of TDelegate)(Expression, IEnumerable(Of ParameterExpression))\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  id: Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Lambda<TDelegate>(Expression, ParameterExpression[])\n  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Lambda\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 263\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Linq.Expressions.Expression`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> where the delegate type is known at compile time.</p>\\n\"\n  syntax:\n    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, params ParameterExpression[] parameters)\n    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, ParamArray parameters As ParameterExpression()) As Expression(Of TDelegate)\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: parameters\n      type: System.Linq.Expressions.ParameterExpression[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    typeParameters:\n    - id: TDelegate\n      description: \"\\n<p>A delegate type.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression{{TDelegate}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Lambda\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>body</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>One or more elements in <em>parameters</em> are <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>TDelegate</em> is not a delegate type.</p>\\n<p>-or-</p>\\n<p>\\n<em>body</em>.Type represents a type that is not assignable to the return type of <em>TDelegate</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>parameters</em> does not contain the same number of elements as the list of parameters for <em>TDelegate</em>.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of an element of <em>parameters</em> is not assignable from the type of the corresponding parameter type of <em>TDelegate</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression())\n  name.vb: Lambda(Of TDelegate)(Expression, ParameterExpression())\n  nameWithType: Expression.Lambda<TDelegate>(Expression, ParameterExpression[])\n  nameWithType.vb: Expression.Lambda(Of TDelegate)(Expression, ParameterExpression())\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Lambda<TDelegate>(Expression, String, Boolean, IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Lambda\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 264\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Linq.Expressions.Expression`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> where the delegate type is known at compile time.</p>\\n\"\n  syntax:\n    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, string name, bool tailCall, IEnumerable<ParameterExpression> parameters)\n    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, name As String, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the lambda. Used for generating debugging info.</p>\\n\"\n    - id: tailCall\n      type: System.Boolean\n      description: \"\\n<p>A <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that indicates if tail call optimization will be applied when compiling the created expression.</p>\\n\"\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    typeParameters:\n    - id: TDelegate\n      description: \"\\n<p>The delegate type. </p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression{{TDelegate}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.LambdaExpression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Lambda\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))\n  name.vb: Lambda(Of TDelegate)(Expression, String, Boolean, IEnumerable(Of ParameterExpression))\n  nameWithType: Expression.Lambda<TDelegate>(Expression, String, Boolean, IEnumerable<ParameterExpression>)\n  nameWithType.vb: Expression.Lambda(Of TDelegate)(Expression, String, Boolean, IEnumerable(Of ParameterExpression))\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  commentId: M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Lambda<TDelegate>(Expression, String, IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Lambda\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 265\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Linq.Expressions.Expression`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> where the delegate type is known at compile time.</p>\\n\"\n  syntax:\n    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, string name, IEnumerable<ParameterExpression> parameters)\n    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, name As String, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the lambda. Used for generating debugging information.</p>\\n\"\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    typeParameters:\n    - id: TDelegate\n      description: \"\\n<p>The delegate type. </p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression{{TDelegate}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Lambda\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.LambdaExpression.Body\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.LambdaExpression.Parameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))\n  name.vb: Lambda(Of TDelegate)(Expression, String, IEnumerable(Of ParameterExpression))\n  nameWithType: Expression.Lambda<TDelegate>(Expression, String, IEnumerable<ParameterExpression>)\n  nameWithType.vb: Expression.Lambda(Of TDelegate)(Expression, String, IEnumerable(Of ParameterExpression))\n- uid: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: LeftShift(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LeftShift\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 266\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a bitwise left-shift operation.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression LeftShift(Expression left, Expression right)\n    content.vb: Public Shared Function LeftShift(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.LeftShift\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The left-shift operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.LeftShift(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: LeftShift(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LeftShift\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 267\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a bitwise left-shift operation.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression LeftShift(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function LeftShift(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.LeftShift\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong> and the left-shift operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.LeftShift(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: LeftShiftAssign(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LeftShiftAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 268\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a bitwise left-shift assignment operation.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression LeftShiftAssign(Expression left, Expression right)\n    content.vb: Public Shared Function LeftShiftAssign(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.LeftShiftAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.LeftShiftAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: LeftShiftAssign(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LeftShiftAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 269\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a bitwise left-shift assignment operation.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression LeftShiftAssign(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function LeftShiftAssign(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.LeftShiftAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.LeftShiftAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LeftShiftAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 270\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a bitwise left-shift assignment operation.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression LeftShiftAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)\n    content.vb: Public Shared Function LeftShiftAssign(left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.LeftShiftAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: LessThan(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThan\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 271\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a \\\"less than\\\" numeric comparison.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression LessThan(Expression left, Expression right)\n    content.vb: Public Shared Function LessThan(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.LessThan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The \\\"less than\\\" operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.LessThan(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  id: LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: LessThan(Expression, Expression, Boolean, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThan\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 272\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a \\\"less than\\\" numeric comparison.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression LessThan(Expression left, Expression right, bool liftToNull, MethodInfo method)\n    content.vb: Public Shared Function LessThan(left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: liftToNull\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to set <xref href=\\\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to <strong>true</strong>; <strong>false</strong> to set <xref href=\\\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to <strong>false</strong>.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.LessThan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong> and the \\\"less than\\\" operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.LessThan(Expression, Expression, Boolean, MethodInfo)\n- uid: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThanOrEqual\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 273\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a \\\" less than or equal\\\" numeric comparison.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression LessThanOrEqual(Expression left, Expression right)\n    content.vb: Public Shared Function LessThanOrEqual(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.LessThanOrEqual\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The \\\"less than or equal\\\" operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.LessThanOrEqual(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  id: LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual(Expression, Expression, Boolean, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThanOrEqual\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 274\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a \\\"less than or equal\\\" numeric comparison.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression LessThanOrEqual(Expression left, Expression right, bool liftToNull, MethodInfo method)\n    content.vb: Public Shared Function LessThanOrEqual(left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: liftToNull\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to set <xref href=\\\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to <strong>true</strong>; <strong>false</strong> to set <xref href=\\\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to <strong>false</strong>.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.LessThanOrEqual\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong> and the \\\"less than or equal\\\" operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.LessThanOrEqual(Expression, Expression, Boolean, MethodInfo)\n- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  commentId: M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  id: ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ListBind(MemberInfo, IEnumerable<ElementInit>)\n  fullName: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ListBind\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 275\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MemberListBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> where the member is a field or property.</p>\\n\"\n  syntax:\n    content: public static MemberListBinding ListBind(MemberInfo member, IEnumerable<ElementInit> initializers)\n    content.vb: Public Shared Function ListBind(member As MemberInfo, initializers As IEnumerable(Of ElementInit)) As MemberListBinding\n    parameters:\n    - id: member\n      type: System.Reflection.MemberInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MemberInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a field or property to set the <xref href=\\\"System.Linq.Expressions.MemberBinding.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: initializers\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.ElementInit\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.MemberListBinding.Initializers\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MemberListBinding\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MemberListBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.MemberBinding.BindingType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.MemberBindingType.ListBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.MemberBinding.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.MemberListBinding.Initializers\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>member</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>member</em> does not represent a field or property.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Reflection.FieldInfo.FieldType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Reflection.PropertyInfo.PropertyType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the field or property that <em>member</em> represents does not implement <xref href=\\\"System.Collections.IEnumerable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ElementInit))\n  name.vb: ListBind(MemberInfo, IEnumerable(Of ElementInit))\n  nameWithType: Expression.ListBind(MemberInfo, IEnumerable<ElementInit>)\n  nameWithType.vb: Expression.ListBind(MemberInfo, IEnumerable(Of ElementInit))\n- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])\n  commentId: M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])\n  id: ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ListBind(MemberInfo, ElementInit[])\n  fullName: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo, System.Linq.Expressions.ElementInit[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ListBind\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 276\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MemberListBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> where the member is a field or property.</p>\\n\"\n  syntax:\n    content: public static MemberListBinding ListBind(MemberInfo member, params ElementInit[] initializers)\n    content.vb: Public Shared Function ListBind(member As MemberInfo, ParamArray initializers As ElementInit()) As MemberListBinding\n    parameters:\n    - id: member\n      type: System.Reflection.MemberInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MemberInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a field or property to set the <xref href=\\\"System.Linq.Expressions.MemberBinding.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: initializers\n      type: System.Linq.Expressions.ElementInit[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Linq.Expressions.ElementInit\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.MemberListBinding.Initializers\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MemberListBinding\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MemberListBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.MemberBinding.BindingType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.MemberBindingType.ListBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.MemberBinding.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.MemberListBinding.Initializers\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>member</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>member</em> does not represent a field or property.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Reflection.FieldInfo.FieldType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Reflection.PropertyInfo.PropertyType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the field or property that <em>member</em> represents does not implement <xref href=\\\"System.Collections.IEnumerable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo, System.Linq.Expressions.ElementInit())\n  name.vb: ListBind(MemberInfo, ElementInit())\n  nameWithType: Expression.ListBind(MemberInfo, ElementInit[])\n  nameWithType.vb: Expression.ListBind(MemberInfo, ElementInit())\n- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  commentId: M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  id: ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ListBind(MethodInfo, IEnumerable<ElementInit>)\n  fullName: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ListBind\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 277\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MemberListBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> based on a specified property accessor method.</p>\\n\"\n  syntax:\n    content: public static MemberListBinding ListBind(MethodInfo propertyAccessor, IEnumerable<ElementInit> initializers)\n    content.vb: Public Shared Function ListBind(propertyAccessor As MethodInfo, initializers As IEnumerable(Of ElementInit)) As MemberListBinding\n    parameters:\n    - id: propertyAccessor\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a property accessor method.</p>\\n\"\n    - id: initializers\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.ElementInit\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.MemberListBinding.Initializers\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MemberListBinding\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MemberListBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.MemberBinding.BindingType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.MemberBindingType.ListBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the <xref href=\\\"System.Linq.Expressions.MemberBinding.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the <xref href=\\\"System.Reflection.MemberInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the property accessed in <em>propertyAccessor</em>, and <xref href=\\\"System.Linq.Expressions.MemberListBinding.Initializers\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> populated with the elements of <em>initializers</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>propertyAccessor</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>propertyAccessor</em> does not represent a property accessor method.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Reflection.PropertyInfo.PropertyType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the property that the method represented by <em>propertyAccessor</em> accesses does not implement <xref href=\\\"System.Collections.IEnumerable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ElementInit))\n  name.vb: ListBind(MethodInfo, IEnumerable(Of ElementInit))\n  nameWithType: Expression.ListBind(MethodInfo, IEnumerable<ElementInit>)\n  nameWithType.vb: Expression.ListBind(MethodInfo, IEnumerable(Of ElementInit))\n- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])\n  commentId: M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])\n  id: ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ListBind(MethodInfo, ElementInit[])\n  fullName: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo, System.Linq.Expressions.ElementInit[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ListBind\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 278\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MemberListBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object based on a specified property accessor method.</p>\\n\"\n  syntax:\n    content: public static MemberListBinding ListBind(MethodInfo propertyAccessor, params ElementInit[] initializers)\n    content.vb: Public Shared Function ListBind(propertyAccessor As MethodInfo, ParamArray initializers As ElementInit()) As MemberListBinding\n    parameters:\n    - id: propertyAccessor\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a property accessor method.</p>\\n\"\n    - id: initializers\n      type: System.Linq.Expressions.ElementInit[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Linq.Expressions.ElementInit\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.MemberListBinding.Initializers\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MemberListBinding\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MemberListBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.MemberBinding.BindingType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.MemberBindingType.ListBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the <xref href=\\\"System.Linq.Expressions.MemberBinding.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the <xref href=\\\"System.Reflection.MemberInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the property accessed in <em>propertyAccessor</em>, and <xref href=\\\"System.Linq.Expressions.MemberListBinding.Initializers\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> populated with the elements of <em>initializers</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>propertyAccessor</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>propertyAccessor</em> does not represent a property accessor method.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Reflection.PropertyInfo.PropertyType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the property that the method represented by <em>propertyAccessor</em> accesses does not implement <xref href=\\\"System.Collections.IEnumerable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo, System.Linq.Expressions.ElementInit())\n  name.vb: ListBind(MethodInfo, ElementInit())\n  nameWithType: Expression.ListBind(MethodInfo, ElementInit[])\n  nameWithType.vb: Expression.ListBind(MethodInfo, ElementInit())\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  id: ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ListInit(NewExpression, IEnumerable<ElementInit>)\n  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ListInit\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 279\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.ListInitExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that uses specified <xref href=\\\"System.Linq.Expressions.ElementInit\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to initialize a collection.</p>\\n\"\n  syntax:\n    content: public static ListInitExpression ListInit(NewExpression newExpression, IEnumerable<ElementInit> initializers)\n    content.vb: Public Shared Function ListInit(newExpression As NewExpression, initializers As IEnumerable(Of ElementInit)) As ListInitExpression\n    parameters:\n    - id: newExpression\n      type: System.Linq.Expressions.NewExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.ListInitExpression.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: initializers\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.ElementInit\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.ListInitExpression.Initializers\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.ListInitExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.ListInitExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.ListInit\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.ListInitExpression.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.ListInitExpression.Initializers\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>newExpression</em> or <em>initializers</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>newExpression</em>.Type does not implement <xref href=\\\"System.Collections.IEnumerable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ElementInit))\n  name.vb: ListInit(NewExpression, IEnumerable(Of ElementInit))\n  nameWithType: Expression.ListInit(NewExpression, IEnumerable<ElementInit>)\n  nameWithType.vb: Expression.ListInit(NewExpression, IEnumerable(Of ElementInit))\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ListInit(NewExpression, IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ListInit\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 280\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.ListInitExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that uses a method named \\\"Add\\\" to add elements to a collection.</p>\\n\"\n  syntax:\n    content: public static ListInitExpression ListInit(NewExpression newExpression, IEnumerable<Expression> initializers)\n    content.vb: Public Shared Function ListInit(newExpression As NewExpression, initializers As IEnumerable(Of Expression)) As ListInitExpression\n    parameters:\n    - id: newExpression\n      type: System.Linq.Expressions.NewExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.ListInitExpression.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: initializers\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.ListInitExpression.Initializers\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.ListInitExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.ListInitExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.ListInit\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.ListInitExpression.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the specified value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>newExpression</em> or <em>initializers</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>newExpression</em>.Type does not implement <xref href=\\\"System.Collections.IEnumerable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>There is no instance method named \\\"Add\\\" (case insensitive) declared in <em>newExpression</em>.Type or its base type.</p>\\n<p>-or-</p>\\n<p>The add method on <em>newExpression</em>.Type or its base type does not take exactly one argument.</p>\\n<p>-or-</p>\\n<p>The type represented by the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the first element of <em>initializers</em> is not assignable to the argument type of the add method on <em>newExpression</em>.Type or its base type.</p>\\n<p>-or-</p>\\n<p>More than one argument-compatible method named \\\"Add\\\" (case-insensitive) exists on <em>newExpression</em>.Type and/or its base type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))\n  name.vb: ListInit(NewExpression, IEnumerable(Of Expression))\n  nameWithType: Expression.ListInit(NewExpression, IEnumerable<Expression>)\n  nameWithType.vb: Expression.ListInit(NewExpression, IEnumerable(Of Expression))\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])\n  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])\n  id: ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ListInit(NewExpression, ElementInit[])\n  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.ElementInit[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ListInit\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 281\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.ListInitExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that uses specified <xref href=\\\"System.Linq.Expressions.ElementInit\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to initialize a collection.</p>\\n\"\n  syntax:\n    content: public static ListInitExpression ListInit(NewExpression newExpression, params ElementInit[] initializers)\n    content.vb: Public Shared Function ListInit(newExpression As NewExpression, ParamArray initializers As ElementInit()) As ListInitExpression\n    parameters:\n    - id: newExpression\n      type: System.Linq.Expressions.NewExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.ListInitExpression.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: initializers\n      type: System.Linq.Expressions.ElementInit[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Linq.Expressions.ElementInit\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.ListInitExpression.Initializers\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.ListInitExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.ListInitExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.ListInit\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.ListInitExpression.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.ListInitExpression.Initializers\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>newExpression</em> or <em>initializers</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>newExpression</em>.Type does not implement <xref href=\\\"System.Collections.IEnumerable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.ElementInit())\n  name.vb: ListInit(NewExpression, ElementInit())\n  nameWithType: Expression.ListInit(NewExpression, ElementInit[])\n  nameWithType.vb: Expression.ListInit(NewExpression, ElementInit())\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])\n  id: ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ListInit(NewExpression, Expression[])\n  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.Expression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ListInit\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 282\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.ListInitExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that uses a method named \\\"Add\\\" to add elements to a collection.</p>\\n\"\n  syntax:\n    content: public static ListInitExpression ListInit(NewExpression newExpression, params Expression[] initializers)\n    content.vb: Public Shared Function ListInit(newExpression As NewExpression, ParamArray initializers As Expression()) As ListInitExpression\n    parameters:\n    - id: newExpression\n      type: System.Linq.Expressions.NewExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.ListInitExpression.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: initializers\n      type: System.Linq.Expressions.Expression[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.ListInitExpression.Initializers\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.ListInitExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.ListInitExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.ListInit\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.ListInitExpression.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the specified value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>newExpression</em> or <em>initializers</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>newExpression</em>.Type does not implement <xref href=\\\"System.Collections.IEnumerable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>There is no instance method named \\\"Add\\\" (case insensitive) declared in <em>newExpression</em>.Type or its base type.</p>\\n<p>-or-</p>\\n<p>The add method on <em>newExpression</em>.Type or its base type does not take exactly one argument.</p>\\n<p>-or-</p>\\n<p>The type represented by the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the first element of <em>initializers</em> is not assignable to the argument type of the add method on <em>newExpression</em>.Type or its base type.</p>\\n<p>-or-</p>\\n<p>More than one argument-compatible method named \\\"Add\\\" (case-insensitive) exists on <em>newExpression</em>.Type and/or its base type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.Expression())\n  name.vb: ListInit(NewExpression, Expression())\n  nameWithType: Expression.ListInit(NewExpression, Expression[])\n  nameWithType.vb: Expression.ListInit(NewExpression, Expression())\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ListInit(NewExpression, MethodInfo, IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ListInit\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 283\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.ListInitExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that uses a specified method to add elements to a collection.</p>\\n\"\n  syntax:\n    content: public static ListInitExpression ListInit(NewExpression newExpression, MethodInfo addMethod, IEnumerable<Expression> initializers)\n    content.vb: Public Shared Function ListInit(newExpression As NewExpression, addMethod As MethodInfo, initializers As IEnumerable(Of Expression)) As ListInitExpression\n    parameters:\n    - id: newExpression\n      type: System.Linq.Expressions.NewExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.ListInitExpression.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: addMethod\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an instance method named \\\"Add\\\" (case insensitive), that adds an element to a collection.</p>\\n\"\n    - id: initializers\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.ListInitExpression.Initializers\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.ListInitExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.ListInitExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.ListInit\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.ListInitExpression.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the specified value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>newExpression</em> or <em>initializers</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>newExpression</em>.Type does not implement <xref href=\\\"System.Collections.IEnumerable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<em>addMethod</em> is not <strong>null</strong> and it does not represent an instance method named \\\"Add\\\" (case insensitive) that takes exactly one argument.</p>\\n<p>-or-</p>\\n<p>\\n<em>addMethod</em> is not <strong>null</strong> and the type represented by the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of one or more elements of <em>initializers</em> is not assignable to the argument type of the method that <em>addMethod</em> represents.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>addMethod</em> is <strong>null</strong> and no instance method named \\\"Add\\\" that takes one type-compatible argument exists on <em>newExpression</em>.Type or its base type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))\n  name.vb: ListInit(NewExpression, MethodInfo, IEnumerable(Of Expression))\n  nameWithType: Expression.ListInit(NewExpression, MethodInfo, IEnumerable<Expression>)\n  nameWithType.vb: Expression.ListInit(NewExpression, MethodInfo, IEnumerable(Of Expression))\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  id: ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ListInit(NewExpression, MethodInfo, Expression[])\n  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ListInit\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 284\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.ListInitExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that uses a specified method to add elements to a collection.</p>\\n\"\n  syntax:\n    content: public static ListInitExpression ListInit(NewExpression newExpression, MethodInfo addMethod, params Expression[] initializers)\n    content.vb: Public Shared Function ListInit(newExpression As NewExpression, addMethod As MethodInfo, ParamArray initializers As Expression()) As ListInitExpression\n    parameters:\n    - id: newExpression\n      type: System.Linq.Expressions.NewExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.ListInitExpression.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: addMethod\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an instance method that takes one argument, that adds an element to a collection.</p>\\n\"\n    - id: initializers\n      type: System.Linq.Expressions.Expression[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.ListInitExpression.Initializers\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.ListInitExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.ListInitExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.ListInit\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.ListInitExpression.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the specified value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>newExpression</em> or <em>initializers</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>One or more elements of <em>initializers</em> are <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>newExpression</em>.Type does not implement <xref href=\\\"System.Collections.IEnumerable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<em>addMethod</em> is not <strong>null</strong> and it does not represent an instance method named \\\"Add\\\" (case insensitive) that takes exactly one argument.</p>\\n<p>-or-</p>\\n<p>\\n<em>addMethod</em> is not <strong>null</strong> and the type represented by the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of one or more elements of <em>initializers</em> is not assignable to the argument type of the method that <em>addMethod</em> represents.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>addMethod</em> is <strong>null</strong> and no instance method named \\\"Add\\\" that takes one type-compatible argument exists on <em>newExpression</em>.Type or its base type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression())\n  name.vb: ListInit(NewExpression, MethodInfo, Expression())\n  nameWithType: Expression.ListInit(NewExpression, MethodInfo, Expression[])\n  nameWithType.vb: Expression.ListInit(NewExpression, MethodInfo, Expression())\n- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)\n  id: Loop(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Loop(Expression)\n  fullName: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Loop\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 285\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.LoopExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the given body.</p>\\n\"\n  syntax:\n    content: public static LoopExpression Loop(Expression body)\n    content.vb: Public Shared Function Loop(body As Expression) As LoopExpression\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The body of the loop.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.LoopExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.LoopExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Loop(Expression)\n- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)\n  commentId: M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)\n  id: Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Loop(Expression, LabelTarget)\n  fullName: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression, System.Linq.Expressions.LabelTarget)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Loop\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 286\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.LoopExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the given body and break target.</p>\\n\"\n  syntax:\n    content: public static LoopExpression Loop(Expression body, LabelTarget break)\n    content.vb: Public Shared Function Loop(body As Expression, break As LabelTarget) As LoopExpression\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The body of the loop.</p>\\n\"\n    - id: break\n      type: System.Linq.Expressions.LabelTarget\n      description: \"\\n<p>The break target used by the loop body.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.LoopExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.LoopExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Loop(Expression, LabelTarget)\n- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)\n  commentId: M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)\n  id: Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Loop(Expression, LabelTarget, LabelTarget)\n  fullName: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression, System.Linq.Expressions.LabelTarget, System.Linq.Expressions.LabelTarget)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Loop\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 287\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.LoopExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the given body.</p>\\n\"\n  syntax:\n    content: public static LoopExpression Loop(Expression body, LabelTarget break, LabelTarget continue)\n    content.vb: Public Shared Function Loop(body As Expression, break As LabelTarget, continue As LabelTarget) As LoopExpression\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The body of the loop.</p>\\n\"\n    - id: break\n      type: System.Linq.Expressions.LabelTarget\n      description: \"\\n<p>The break target used by the loop body.</p>\\n\"\n    - id: continue\n      type: System.Linq.Expressions.LabelTarget\n      description: \"\\n<p>The continue target used by the loop body.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.LoopExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.LoopExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Loop(Expression, LabelTarget, LabelTarget)\n- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: MakeBinary(ExpressionType, Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MakeBinary\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 288\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, given the left and right operands, by calling an appropriate factory method.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression MakeBinary(ExpressionType binaryType, Expression left, Expression right)\n    content.vb: Public Shared Function MakeBinary(binaryType As ExpressionType, left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: binaryType\n      type: System.Linq.Expressions.ExpressionType\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.ExpressionType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the type of binary operation.</p>\\n\"\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the left operand.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the right operand.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that results from calling the appropriate factory method.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>binaryType</em> does not correspond to a binary expression node.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.MakeBinary(ExpressionType, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  id: MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MakeBinary\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 289\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, given the left operand, right operand and implementing method, by calling the appropriate factory method.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression MakeBinary(ExpressionType binaryType, Expression left, Expression right, bool liftToNull, MethodInfo method)\n    content.vb: Public Shared Function MakeBinary(binaryType As ExpressionType, left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: binaryType\n      type: System.Linq.Expressions.ExpressionType\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.ExpressionType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the type of binary operation.</p>\\n\"\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the left operand.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the right operand.</p>\\n\"\n    - id: liftToNull\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to set <xref href=\\\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to <strong>true</strong>; <strong>false</strong> to set <xref href=\\\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to <strong>false</strong>.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the implementing method.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that results from calling the appropriate factory method.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>binaryType</em> does not correspond to a binary expression node.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo)\n- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo, LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MakeBinary\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 290\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression MakeBinary(ExpressionType binaryType, Expression left, Expression right, bool liftToNull, MethodInfo method, LambdaExpression conversion)\n    content.vb: Public Shared Function MakeBinary(binaryType As ExpressionType, left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression\n    parameters:\n    - id: binaryType\n      type: System.Linq.Expressions.ExpressionType\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.ExpressionType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the type of binary operation.</p>\\n\"\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the left operand.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the right operand.</p>\\n\"\n    - id: liftToNull\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to set <xref href=\\\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to <strong>true</strong>; <strong>false</strong> to set <xref href=\\\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to <strong>false</strong>.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the implementing method.</p>\\n\"\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a type conversion function. This parameter is used only if <em>binaryType</em> is <xref href=\\\"System.Linq.Expressions.ExpressionType.Coalesce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or compound assignment..</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that results from calling the appropriate factory method.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>binaryType</em> does not correspond to a binary expression node.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: MakeCatchBlock(Type, ParameterExpression, Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.MakeCatchBlock(System.Type, System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MakeCatchBlock\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 291\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.CatchBlock\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a catch statement with the specified elements.</p>\\n\"\n  syntax:\n    content: public static CatchBlock MakeCatchBlock(Type type, ParameterExpression variable, Expression body, Expression filter)\n    content.vb: Public Shared Function MakeCatchBlock(type As Type, variable As ParameterExpression, body As Expression, filter As Expression) As CatchBlock\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> this <xref href=\\\"System.Linq.Expressions.CatchBlock\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will handle.</p>\\n\"\n    - id: variable\n      type: System.Linq.Expressions.ParameterExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a reference to the <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object caught by this handler.</p>\\n\"\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The body of the catch statement.</p>\\n\"\n    - id: filter\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The body of the <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> filter.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.CatchBlock\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.CatchBlock\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.MakeCatchBlock(Type, ParameterExpression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  id: MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type)\n  fullName: System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind, System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MakeGoto\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 292\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a jump of the specified <xref href=\\\"System.Linq.Expressions.GotoExpressionKind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The value passed to the label upon jumping can also be specified.</p>\\n\"\n  syntax:\n    content: public static GotoExpression MakeGoto(GotoExpressionKind kind, LabelTarget target, Expression value, Type type)\n    content.vb: Public Shared Function MakeGoto(kind As GotoExpressionKind, target As LabelTarget, value As Expression, type As Type) As GotoExpression\n    parameters:\n    - id: kind\n      type: System.Linq.Expressions.GotoExpressionKind\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.GotoExpressionKind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.LabelTarget\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that the <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will jump to.</p>\\n\"\n    - id: value\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The value that will be passed to the associated label upon jumping.</p>\\n\"\n    - id: type\n      type: System.Type\n      description: \"\\n<p>An <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with <xref href=\\\"System.Linq.Expressions.GotoExpression.Kind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to <em>kind</em>, the <xref href=\\\"System.Linq.Expressions.GotoExpression.Target\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to <em>target</em>, the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to <em>type</em>, and <em>value</em> to be passed to the target label upon jumping.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type)\n- uid: System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MakeIndex\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 293\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Linq.Expressions.IndexExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents accessing an indexed property in an object.</p>\\n\"\n  syntax:\n    content: public static IndexExpression MakeIndex(Expression instance, PropertyInfo indexer, IEnumerable<Expression> arguments)\n    content.vb: Public Shared Function MakeIndex(instance As Expression, indexer As PropertyInfo, arguments As IEnumerable(Of Expression)) As IndexExpression\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The object to which the property belongs. It should be null if the property is <strong>static</strong> (<strong>shared</strong> in Visual Basic).</p>\\n\"\n    - id: indexer\n      type: System.Reflection.PropertyInfo\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the property to index.</p>\\n\"\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: \"\\n<p>An <code>IEnumerable<Expression></code> (<code>IEnumerable (Of Expression)</code> in Visual Basic) that contains the arguments that will be used to index the property.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.IndexExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.IndexExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))\n  name.vb: MakeIndex(Expression, PropertyInfo, IEnumerable(Of Expression))\n  nameWithType: Expression.MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>)\n  nameWithType.vb: Expression.MakeIndex(Expression, PropertyInfo, IEnumerable(Of Expression))\n- uid: System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)\n  commentId: M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)\n  id: MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: MakeMemberAccess(Expression, MemberInfo)\n  fullName: System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression, System.Reflection.MemberInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MakeMemberAccess\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 294\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MemberExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents accessing either a field or a property.</p>\\n\"\n  syntax:\n    content: public static MemberExpression MakeMemberAccess(Expression expression, MemberInfo member)\n    content.vb: Public Shared Function MakeMemberAccess(expression As Expression, member As MemberInfo) As MemberExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the object that the member belongs to. This can be null for static members.</p>\\n\"\n    - id: member\n      type: System.Reflection.MemberInfo\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.MemberInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that describes the field or property to be accessed.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MemberExpression\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.MemberExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that results from calling the appropriate factory method.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>member</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>member</em> does not represent a field or property.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.MakeMemberAccess(Expression, MemberInfo)\n- uid: System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})\n  commentId: M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})\n  id: MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>)\n  fullName: System.Linq.Expressions.Expression.MakeTry(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MakeTry\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 295\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.TryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a try block with the specified elements.</p>\\n\"\n  syntax:\n    content: public static TryExpression MakeTry(Type type, Expression body, Expression finally, Expression fault, IEnumerable<CatchBlock> handlers)\n    content.vb: Public Shared Function MakeTry(type As Type, body As Expression, finally As Expression, fault As Expression, handlers As IEnumerable(Of CatchBlock)) As TryExpression\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The result type of the try expression. If null, bodh and all handlers must have identical type.</p>\\n\"\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The body of the try block.</p>\\n\"\n    - id: finally\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The body of the finally block. Pass null if the try block has no finally block associated with it.</p>\\n\"\n    - id: fault\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The body of the fault block. Pass null if the try block has no fault block associated with it.</p>\\n\"\n    - id: handlers\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock}\n      description: \"\\n<p>A collection of <xref href=\\\"System.Linq.Expressions.CatchBlock\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>s representing the catch statements to be associated with the try block.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.TryExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.TryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.MakeTry(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.CatchBlock))\n  name.vb: MakeTry(Type, Expression, Expression, Expression, IEnumerable(Of CatchBlock))\n  nameWithType: Expression.MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>)\n  nameWithType.vb: Expression.MakeTry(Type, Expression, Expression, Expression, IEnumerable(Of CatchBlock))\n- uid: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)\n  id: MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: MakeUnary(ExpressionType, Expression, Type)\n  fullName: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MakeUnary\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 296\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, given an operand, by calling the appropriate factory method.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression MakeUnary(ExpressionType unaryType, Expression operand, Type type)\n    content.vb: Public Shared Function MakeUnary(unaryType As ExpressionType, operand As Expression, type As Type) As UnaryExpression\n    parameters:\n    - id: unaryType\n      type: System.Linq.Expressions.ExpressionType\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.ExpressionType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the type of unary operation.</p>\\n\"\n    - id: operand\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the operand.</p>\\n\"\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the type to be converted to (pass <strong>null</strong> if not applicable).</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that results from calling the appropriate factory method.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>operand</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>unaryType</em> does not correspond to a unary expression node.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.MakeUnary(ExpressionType, Expression, Type)\n- uid: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  id: MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: MakeUnary(ExpressionType, Expression, Type, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MakeUnary\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 297\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, given an operand and implementing method, by calling the appropriate factory method.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression MakeUnary(ExpressionType unaryType, Expression operand, Type type, MethodInfo method)\n    content.vb: Public Shared Function MakeUnary(unaryType As ExpressionType, operand As Expression, type As Type, method As MethodInfo) As UnaryExpression\n    parameters:\n    - id: unaryType\n      type: System.Linq.Expressions.ExpressionType\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.ExpressionType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the type of unary operation.</p>\\n\"\n    - id: operand\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the operand.</p>\\n\"\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the type to be converted to (pass <strong>null</strong> if not applicable).</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the implementing method.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that results from calling the appropriate factory method.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>operand</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>unaryType</em> does not correspond to a unary expression node.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.MakeUnary(ExpressionType, Expression, Type, MethodInfo)\n- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  commentId: M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  id: MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: MemberBind(MemberInfo, IEnumerable<MemberBinding>)\n  fullName: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MemberBind\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 298\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MemberMemberBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the recursive initialization of members of a field or property.</p>\\n\"\n  syntax:\n    content: public static MemberMemberBinding MemberBind(MemberInfo member, IEnumerable<MemberBinding> bindings)\n    content.vb: Public Shared Function MemberBind(member As MemberInfo, bindings As IEnumerable(Of MemberBinding)) As MemberMemberBinding\n    parameters:\n    - id: member\n      type: System.Reflection.MemberInfo\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.MemberInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.MemberBinding.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: bindings\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.MemberBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.MemberMemberBinding.Bindings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MemberMemberBinding\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MemberMemberBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.MemberBinding.BindingType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.MemberBindingType.MemberBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.MemberBinding.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.MemberMemberBinding.Bindings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>member</em> or <em>bindings</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>member</em> does not represent a field or property.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Linq.Expressions.MemberBinding.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of an element of <em>bindings</em> does not represent a member of the type of the field or property that <em>member</em> represents.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.MemberBinding))\n  name.vb: MemberBind(MemberInfo, IEnumerable(Of MemberBinding))\n  nameWithType: Expression.MemberBind(MemberInfo, IEnumerable<MemberBinding>)\n  nameWithType.vb: Expression.MemberBind(MemberInfo, IEnumerable(Of MemberBinding))\n- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])\n  commentId: M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])\n  id: MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: MemberBind(MemberInfo, MemberBinding[])\n  fullName: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo, System.Linq.Expressions.MemberBinding[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MemberBind\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 299\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MemberMemberBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the recursive initialization of members of a field or property.</p>\\n\"\n  syntax:\n    content: public static MemberMemberBinding MemberBind(MemberInfo member, params MemberBinding[] bindings)\n    content.vb: Public Shared Function MemberBind(member As MemberInfo, ParamArray bindings As MemberBinding()) As MemberMemberBinding\n    parameters:\n    - id: member\n      type: System.Reflection.MemberInfo\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.MemberInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.MemberBinding.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: bindings\n      type: System.Linq.Expressions.MemberBinding[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Linq.Expressions.MemberBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.MemberMemberBinding.Bindings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MemberMemberBinding\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MemberMemberBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.MemberBinding.BindingType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.MemberBindingType.MemberBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.MemberBinding.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.MemberMemberBinding.Bindings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>member</em> or <em>bindings</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>member</em> does not represent a field or property.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Linq.Expressions.MemberBinding.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of an element of <em>bindings</em> does not represent a member of the type of the field or property that <em>member</em> represents.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo, System.Linq.Expressions.MemberBinding())\n  name.vb: MemberBind(MemberInfo, MemberBinding())\n  nameWithType: Expression.MemberBind(MemberInfo, MemberBinding[])\n  nameWithType.vb: Expression.MemberBind(MemberInfo, MemberBinding())\n- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  commentId: M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  id: MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: MemberBind(MethodInfo, IEnumerable<MemberBinding>)\n  fullName: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MemberBind\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 300\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MemberMemberBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</p>\\n\"\n  syntax:\n    content: public static MemberMemberBinding MemberBind(MethodInfo propertyAccessor, IEnumerable<MemberBinding> bindings)\n    content.vb: Public Shared Function MemberBind(propertyAccessor As MethodInfo, bindings As IEnumerable(Of MemberBinding)) As MemberMemberBinding\n    parameters:\n    - id: propertyAccessor\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a property accessor method.</p>\\n\"\n    - id: bindings\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.MemberBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.MemberMemberBinding.Bindings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MemberMemberBinding\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MemberMemberBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.MemberBinding.BindingType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.MemberBindingType.MemberBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the <xref href=\\\"System.Linq.Expressions.MemberBinding.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the <xref href=\\\"System.Reflection.PropertyInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the property accessed in <em>propertyAccessor</em>, and <xref href=\\\"System.Linq.Expressions.MemberMemberBinding.Bindings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>propertyAccessor</em> or <em>bindings</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>propertyAccessor</em> does not represent a property accessor method.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Linq.Expressions.MemberBinding.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of an element of <em>bindings</em> does not represent a member of the type of the property accessed by the method that <em>propertyAccessor</em> represents.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.MemberBinding))\n  name.vb: MemberBind(MethodInfo, IEnumerable(Of MemberBinding))\n  nameWithType: Expression.MemberBind(MethodInfo, IEnumerable<MemberBinding>)\n  nameWithType.vb: Expression.MemberBind(MethodInfo, IEnumerable(Of MemberBinding))\n- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])\n  commentId: M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])\n  id: MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: MemberBind(MethodInfo, MemberBinding[])\n  fullName: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo, System.Linq.Expressions.MemberBinding[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MemberBind\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 301\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MemberMemberBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</p>\\n\"\n  syntax:\n    content: public static MemberMemberBinding MemberBind(MethodInfo propertyAccessor, params MemberBinding[] bindings)\n    content.vb: Public Shared Function MemberBind(propertyAccessor As MethodInfo, ParamArray bindings As MemberBinding()) As MemberMemberBinding\n    parameters:\n    - id: propertyAccessor\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a property accessor method.</p>\\n\"\n    - id: bindings\n      type: System.Linq.Expressions.MemberBinding[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Linq.Expressions.MemberBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.MemberMemberBinding.Bindings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MemberMemberBinding\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MemberMemberBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.MemberBinding.BindingType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.MemberBindingType.MemberBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the <xref href=\\\"System.Linq.Expressions.MemberBinding.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the <xref href=\\\"System.Reflection.PropertyInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the property accessed in <em>propertyAccessor</em>, and <xref href=\\\"System.Linq.Expressions.MemberMemberBinding.Bindings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>propertyAccessor</em> or <em>bindings</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>propertyAccessor</em> does not represent a property accessor method.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Linq.Expressions.MemberBinding.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of an element of <em>bindings</em> does not represent a member of the type of the property accessed by the method that <em>propertyAccessor</em> represents.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo, System.Linq.Expressions.MemberBinding())\n  name.vb: MemberBind(MethodInfo, MemberBinding())\n  nameWithType: Expression.MemberBind(MethodInfo, MemberBinding[])\n  nameWithType.vb: Expression.MemberBind(MethodInfo, MemberBinding())\n- uid: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  commentId: M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  id: MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: MemberInit(NewExpression, IEnumerable<MemberBinding>)\n  fullName: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MemberInit\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 302\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Represents an expression that creates a new object and initializes a property of the object.</p>\\n\"\n  syntax:\n    content: public static MemberInitExpression MemberInit(NewExpression newExpression, IEnumerable<MemberBinding> bindings)\n    content.vb: Public Shared Function MemberInit(newExpression As NewExpression, bindings As IEnumerable(Of MemberBinding)) As MemberInitExpression\n    parameters:\n    - id: newExpression\n      type: System.Linq.Expressions.NewExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.MemberInitExpression.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: bindings\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.MemberBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.MemberInitExpression.Bindings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MemberInitExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MemberInitExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.MemberInit\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.MemberInitExpression.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.MemberInitExpression.Bindings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>newExpression</em> or <em>bindings</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.MemberBinding.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of an element of <em>bindings</em> does not represent a member of the type that <em>newExpression</em>.Type represents.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.MemberBinding))\n  name.vb: MemberInit(NewExpression, IEnumerable(Of MemberBinding))\n  nameWithType: Expression.MemberInit(NewExpression, IEnumerable<MemberBinding>)\n  nameWithType.vb: Expression.MemberInit(NewExpression, IEnumerable(Of MemberBinding))\n- uid: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])\n  commentId: M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])\n  id: MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: MemberInit(NewExpression, MemberBinding[])\n  fullName: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.MemberBinding[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MemberInit\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 303\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MemberInitExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static MemberInitExpression MemberInit(NewExpression newExpression, params MemberBinding[] bindings)\n    content.vb: Public Shared Function MemberInit(newExpression As NewExpression, ParamArray bindings As MemberBinding()) As MemberInitExpression\n    parameters:\n    - id: newExpression\n      type: System.Linq.Expressions.NewExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.MemberInitExpression.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: bindings\n      type: System.Linq.Expressions.MemberBinding[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Linq.Expressions.MemberBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.MemberInitExpression.Bindings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MemberInitExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MemberInitExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.MemberInit\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.MemberInitExpression.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.MemberInitExpression.Bindings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>newExpression</em> or <em>bindings</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.MemberBinding.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of an element of <em>bindings</em> does not represent a member of the type that <em>newExpression</em>.Type represents.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.MemberBinding())\n  name.vb: MemberInit(NewExpression, MemberBinding())\n  nameWithType: Expression.MemberInit(NewExpression, MemberBinding[])\n  nameWithType.vb: Expression.MemberInit(NewExpression, MemberBinding())\n- uid: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Modulo(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Modulo\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 304\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an arithmetic remainder operation.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression Modulo(Expression left, Expression right)\n    content.vb: Public Shared Function Modulo(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Modulo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The modulus operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Modulo(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Modulo(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Modulo\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 305\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an arithmetic remainder operation.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression Modulo(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function Modulo(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Modulo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong> and the modulus operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Modulo(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ModuloAssign(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ModuloAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 306\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a remainder assignment operation.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression ModuloAssign(Expression left, Expression right)\n    content.vb: Public Shared Function ModuloAssign(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.ModuloAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.ModuloAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ModuloAssign(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ModuloAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 307\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a remainder assignment operation.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression ModuloAssign(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function ModuloAssign(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.ModuloAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.ModuloAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ModuloAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 308\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a remainder assignment operation.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression ModuloAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)\n    content.vb: Public Shared Function ModuloAssign(left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.ModuloAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Multiply(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Multiply\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 309\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an arithmetic multiplication operation that does not have overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression Multiply(Expression left, Expression right)\n    content.vb: Public Shared Function Multiply(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Multiply\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The multiplication operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Multiply(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Multiply(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Multiply\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 310\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an arithmetic multiplication operation that does not have overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression Multiply(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function Multiply(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Multiply\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong> and the multiplication operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Multiply(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: MultiplyAssign(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MultiplyAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 311\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a multiplication assignment operation that does not have overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression MultiplyAssign(Expression left, Expression right)\n    content.vb: Public Shared Function MultiplyAssign(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.MultiplyAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.MultiplyAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: MultiplyAssign(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MultiplyAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 312\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a multiplication assignment operation that does not have overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression MultiplyAssign(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function MultiplyAssign(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.MultiplyAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.MultiplyAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MultiplyAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 313\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a multiplication assignment operation that does not have overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression MultiplyAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)\n    content.vb: Public Shared Function MultiplyAssign(left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.MultiplyAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: MultiplyAssignChecked(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MultiplyAssignChecked\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 314\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a multiplication assignment operation that has overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression MultiplyAssignChecked(Expression left, Expression right)\n    content.vb: Public Shared Function MultiplyAssignChecked(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.MultiplyAssignChecked\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.MultiplyAssignChecked(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: MultiplyAssignChecked(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MultiplyAssignChecked\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 315\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a multiplication assignment operation that has overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression MultiplyAssignChecked(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function MultiplyAssignChecked(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.MultiplyAssignChecked\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MultiplyAssignChecked\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 316\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a multiplication assignment operation that has overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression MultiplyAssignChecked(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)\n    content.vb: Public Shared Function MultiplyAssignChecked(left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.MultiplyAssignChecked\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: MultiplyChecked(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MultiplyChecked\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 317\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an arithmetic multiplication operation that has overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression MultiplyChecked(Expression left, Expression right)\n    content.vb: Public Shared Function MultiplyChecked(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.MultiplyChecked\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The multiplication operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.MultiplyChecked(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: MultiplyChecked(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MultiplyChecked\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 318\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an arithmetic multiplication operation that has overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression MultiplyChecked(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function MultiplyChecked(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.MultiplyChecked\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong> and the multiplication operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.MultiplyChecked(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)\n  id: Negate(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Negate(Expression)\n  fullName: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Negate\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 319\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an arithmetic negation operation.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression Negate(Expression expression)\n    content.vb: Public Shared Function Negate(expression As Expression) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Negate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the specified value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>expression</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The unary minus operator is not defined for <em>expression</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Negate(Expression)\n- uid: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Negate(Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Negate\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 320\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an arithmetic negation operation.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression Negate(Expression expression, MethodInfo method)\n    content.vb: Public Shared Function Negate(expression As Expression, method As MethodInfo) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Negate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.UnaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>expression</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly one argument.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong> and the unary minus operator is not defined for <em>expression</em>.Type.</p>\\n<p>-or-</p>\\n<p>\\n<em>expression</em>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <em>method</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Negate(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)\n  id: NegateChecked(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: NegateChecked(Expression)\n  fullName: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NegateChecked\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 321\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an arithmetic negation operation that has overflow checking.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression NegateChecked(Expression expression)\n    content.vb: Public Shared Function NegateChecked(expression As Expression) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.NegateChecked\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the specified value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>expression</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The unary minus operator is not defined for <em>expression</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.NegateChecked(Expression)\n- uid: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: NegateChecked(Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NegateChecked\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 322\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an arithmetic negation operation that has overflow checking. The implementing method can be specified.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression NegateChecked(Expression expression, MethodInfo method)\n    content.vb: Public Shared Function NegateChecked(expression As Expression, method As MethodInfo) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.NegateChecked\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.UnaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>expression</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly one argument.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong> and the unary minus operator is not defined for <em>expression</em>.Type.</p>\\n<p>-or-</p>\\n<p>\\n<em>expression</em>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <em>method</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.NegateChecked(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)\n  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)\n  id: New(System.Reflection.ConstructorInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: New(ConstructorInfo)\n  fullName: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: New\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 323\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents calling the specified constructor that takes no arguments.</p>\\n\"\n  syntax:\n    content: public static NewExpression New(ConstructorInfo constructor)\n    content.vb: Public Shared Function New(constructor As ConstructorInfo) As NewExpression\n    parameters:\n    - id: constructor\n      type: System.Reflection.ConstructorInfo\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.ConstructorInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.NewExpression.Constructor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.NewExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.New\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.NewExpression.Constructor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the specified value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>constructor</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The constructor that <em>constructor</em> represents has at least one parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.New(ConstructorInfo)\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: New(ConstructorInfo, IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: New\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 324\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents calling the specified constructor with the specified arguments.</p>\\n\"\n  syntax:\n    content: public static NewExpression New(ConstructorInfo constructor, IEnumerable<Expression> arguments)\n    content.vb: Public Shared Function New(constructor As ConstructorInfo, arguments As IEnumerable(Of Expression)) As NewExpression\n    parameters:\n    - id: constructor\n      type: System.Reflection.ConstructorInfo\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.ConstructorInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.NewExpression.Constructor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.NewExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.NewExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.New\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.NewExpression.Constructor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.NewExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>constructor</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>An element of <em>arguments</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>arguments</em> parameter does not contain the same number of elements as the number of parameters for the constructor that <em>constructor</em> represents.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of an element of <em>arguments</em> is not assignable to the type of the corresponding parameter of the constructor that <em>constructor</em> represents.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))\n  name.vb: New(ConstructorInfo, IEnumerable(Of Expression))\n  nameWithType: Expression.New(ConstructorInfo, IEnumerable<Expression>)\n  nameWithType.vb: Expression.New(ConstructorInfo, IEnumerable(Of Expression))\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})\n  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})\n  id: New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>)\n  fullName: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>, System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: New\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 325\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified.</p>\\n\"\n  syntax:\n    content: public static NewExpression New(ConstructorInfo constructor, IEnumerable<Expression> arguments, IEnumerable<MemberInfo> members)\n    content.vb: Public Shared Function New(constructor As ConstructorInfo, arguments As IEnumerable(Of Expression), members As IEnumerable(Of MemberInfo)) As NewExpression\n    parameters:\n    - id: constructor\n      type: System.Reflection.ConstructorInfo\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.ConstructorInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.NewExpression.Constructor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.NewExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    - id: members\n      type: System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Reflection.MemberInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.NewExpression.Members\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.NewExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.New\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.NewExpression.Constructor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.NewExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.NewExpression.Members\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>constructor</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>An element of <em>arguments</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>An element of <em>members</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>arguments</em> parameter does not contain the same number of elements as the number of parameters for the constructor that <em>constructor</em> represents.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of an element of <em>arguments</em> is not assignable to the type of the corresponding parameter of the constructor that <em>constructor</em> represents.</p>\\n<p>-or-</p>\\n<p>The <em>members</em> parameter does not have the same number of elements as <em>arguments</em>.</p>\\n<p>-or-</p>\\n<p>An element of <em>arguments</em> has a <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <em>members</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression), System.Collections.Generic.IEnumerable(Of System.Reflection.MemberInfo))\n  name.vb: New(ConstructorInfo, IEnumerable(Of Expression), IEnumerable(Of MemberInfo))\n  nameWithType: Expression.New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>)\n  nameWithType.vb: Expression.New(ConstructorInfo, IEnumerable(Of Expression), IEnumerable(Of MemberInfo))\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])\n  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])\n  id: New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: New(ConstructorInfo, IEnumerable<Expression>, MemberInfo[])\n  fullName: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>, System.Reflection.MemberInfo[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: New\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 326\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified as an array.</p>\\n\"\n  syntax:\n    content: public static NewExpression New(ConstructorInfo constructor, IEnumerable<Expression> arguments, params MemberInfo[] members)\n    content.vb: Public Shared Function New(constructor As ConstructorInfo, arguments As IEnumerable(Of Expression), ParamArray members As MemberInfo()) As NewExpression\n    parameters:\n    - id: constructor\n      type: System.Reflection.ConstructorInfo\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.ConstructorInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.NewExpression.Constructor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.NewExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    - id: members\n      type: System.Reflection.MemberInfo[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Reflection.MemberInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.NewExpression.Members\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.NewExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.New\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.NewExpression.Constructor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.NewExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.NewExpression.Members\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>constructor</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>An element of <em>arguments</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>An element of <em>members</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>arguments</em> parameter does not contain the same number of elements as the number of parameters for the constructor that <em>constructor</em> represents.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of an element of <em>arguments</em> is not assignable to the type of the corresponding parameter of the constructor that <em>constructor</em> represents.</p>\\n<p>-or-</p>\\n<p>The <em>members</em> parameter does not have the same number of elements as <em>arguments</em>.</p>\\n<p>-or-</p>\\n<p>An element of <em>arguments</em> has a <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <em>members</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression), System.Reflection.MemberInfo())\n  name.vb: New(ConstructorInfo, IEnumerable(Of Expression), MemberInfo())\n  nameWithType: Expression.New(ConstructorInfo, IEnumerable<Expression>, MemberInfo[])\n  nameWithType.vb: Expression.New(ConstructorInfo, IEnumerable(Of Expression), MemberInfo())\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])\n  id: New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: New(ConstructorInfo, Expression[])\n  fullName: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Linq.Expressions.Expression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: New\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 327\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents calling the specified constructor with the specified arguments.</p>\\n\"\n  syntax:\n    content: public static NewExpression New(ConstructorInfo constructor, params Expression[] arguments)\n    content.vb: Public Shared Function New(constructor As ConstructorInfo, ParamArray arguments As Expression()) As NewExpression\n    parameters:\n    - id: constructor\n      type: System.Reflection.ConstructorInfo\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.ConstructorInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.NewExpression.Constructor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.NewExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.NewExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.New\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.NewExpression.Constructor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.NewExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>constructor</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>An element of <em>arguments</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The length of <em>arguments</em> does match the number of parameters for the constructor that <em>constructor</em> represents.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of an element of <em>arguments</em> is not assignable to the type of the corresponding parameter of the constructor that <em>constructor</em> represents.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Linq.Expressions.Expression())\n  name.vb: New(ConstructorInfo, Expression())\n  nameWithType: Expression.New(ConstructorInfo, Expression[])\n  nameWithType.vb: Expression.New(ConstructorInfo, Expression())\n- uid: System.Linq.Expressions.Expression.New(System.Type)\n  commentId: M:System.Linq.Expressions.Expression.New(System.Type)\n  id: New(System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: New(Type)\n  fullName: System.Linq.Expressions.Expression.New(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: New\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 328\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents calling the parameterless constructor of the specified type.</p>\\n\"\n  syntax:\n    content: public static NewExpression New(Type type)\n    content.vb: Public Shared Function New(type As Type) As NewExpression\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has a constructor that takes no arguments.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.NewExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.New\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.NewExpression.Constructor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the <xref href=\\\"System.Reflection.ConstructorInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the constructor without parameters for the specified type.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>type</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The type that <em>type</em> represents does not have a constructor without parameters.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.New(Type)\n- uid: System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: NewArrayBounds(Type, IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.NewArrayBounds(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NewArrayBounds\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 329\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.NewArrayExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents creating an array that has a specified rank.</p>\\n\"\n  syntax:\n    content: public static NewArrayExpression NewArrayBounds(Type type, IEnumerable<Expression> bounds)\n    content.vb: Public Shared Function NewArrayBounds(type As Type, bounds As IEnumerable(Of Expression)) As NewArrayExpression\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the element type of the array.</p>\\n\"\n    - id: bounds\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.NewArrayExpression.Expressions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.NewArrayExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.NewArrayExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.NewArrayBounds\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.NewArrayExpression.Expressions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the specified value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>type</em> or <em>bounds</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>An element of <em>bounds</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of an element of <em>bounds</em> does not represent an integral type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.NewArrayBounds(System.Type, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))\n  name.vb: NewArrayBounds(Type, IEnumerable(Of Expression))\n  nameWithType: Expression.NewArrayBounds(Type, IEnumerable<Expression>)\n  nameWithType.vb: Expression.NewArrayBounds(Type, IEnumerable(Of Expression))\n- uid: System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])\n  id: NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: NewArrayBounds(Type, Expression[])\n  fullName: System.Linq.Expressions.Expression.NewArrayBounds(System.Type, System.Linq.Expressions.Expression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NewArrayBounds\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 330\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.NewArrayExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents creating an array that has a specified rank.</p>\\n\"\n  syntax:\n    content: public static NewArrayExpression NewArrayBounds(Type type, params Expression[] bounds)\n    content.vb: Public Shared Function NewArrayBounds(type As Type, ParamArray bounds As Expression()) As NewArrayExpression\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the element type of the array.</p>\\n\"\n    - id: bounds\n      type: System.Linq.Expressions.Expression[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.NewArrayExpression.Expressions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.NewArrayExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.NewArrayExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.NewArrayBounds\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.NewArrayExpression.Expressions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the specified value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>type</em> or <em>bounds</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>An element of <em>bounds</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of an element of <em>bounds</em> does not represent an integral type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.NewArrayBounds(System.Type, System.Linq.Expressions.Expression())\n  name.vb: NewArrayBounds(Type, Expression())\n  nameWithType: Expression.NewArrayBounds(Type, Expression[])\n  nameWithType.vb: Expression.NewArrayBounds(Type, Expression())\n- uid: System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: NewArrayInit(Type, IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.NewArrayInit(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NewArrayInit\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 331\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.NewArrayExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents creating a one-dimensional array and initializing it from a list of elements.</p>\\n\"\n  syntax:\n    content: public static NewArrayExpression NewArrayInit(Type type, IEnumerable<Expression> initializers)\n    content.vb: Public Shared Function NewArrayInit(type As Type, initializers As IEnumerable(Of Expression)) As NewArrayExpression\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the element type of the array.</p>\\n\"\n    - id: initializers\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.NewArrayExpression.Expressions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.NewArrayExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.NewArrayExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.NewArrayInit\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.NewArrayExpression.Expressions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the specified value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>type</em> or <em>initializers</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>An element of <em>initializers</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of an element of <em>initializers</em> represents a type that is not assignable to the type that <em>type</em> represents.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.NewArrayInit(System.Type, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))\n  name.vb: NewArrayInit(Type, IEnumerable(Of Expression))\n  nameWithType: Expression.NewArrayInit(Type, IEnumerable<Expression>)\n  nameWithType.vb: Expression.NewArrayInit(Type, IEnumerable(Of Expression))\n- uid: System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])\n  id: NewArrayInit(System.Type,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: NewArrayInit(Type, Expression[])\n  fullName: System.Linq.Expressions.Expression.NewArrayInit(System.Type, System.Linq.Expressions.Expression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NewArrayInit\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 332\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.NewArrayExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents creating a one-dimensional array and initializing it from a list of elements.</p>\\n\"\n  syntax:\n    content: public static NewArrayExpression NewArrayInit(Type type, params Expression[] initializers)\n    content.vb: Public Shared Function NewArrayInit(type As Type, ParamArray initializers As Expression()) As NewArrayExpression\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the element type of the array.</p>\\n\"\n    - id: initializers\n      type: System.Linq.Expressions.Expression[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.NewArrayExpression.Expressions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.NewArrayExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.NewArrayExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.NewArrayInit\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.NewArrayExpression.Expressions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the specified value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>type</em> or <em>initializers</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>An element of <em>initializers</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of an element of <em>initializers</em> represents a type that is not assignable to the type <em>type</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.NewArrayInit(System.Type, System.Linq.Expressions.Expression())\n  name.vb: NewArrayInit(Type, Expression())\n  nameWithType: Expression.NewArrayInit(Type, Expression[])\n  nameWithType.vb: Expression.NewArrayInit(Type, Expression())\n- uid: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)\n  id: Not(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Not(Expression)\n  fullName: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Not\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 333\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a bitwise complement operation.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression Not(Expression expression)\n    content.vb: Public Shared Function Not(expression As Expression) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Not\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the specified value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>expression</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The unary not operator is not defined for <em>expression</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Not(Expression)\n- uid: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Not(Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Not\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 334\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a bitwise complement operation. The implementing method can be specified.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression Not(Expression expression, MethodInfo method)\n    content.vb: Public Shared Function Not(expression As Expression, method As MethodInfo) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Not\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.UnaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>expression</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly one argument.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong> and the unary not operator is not defined for <em>expression</em>.Type.</p>\\n<p>-or-</p>\\n<p>\\n<em>expression</em>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <em>method</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Not(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: NotEqual(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NotEqual\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 335\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an inequality comparison.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression NotEqual(Expression left, Expression right)\n    content.vb: Public Shared Function NotEqual(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.NotEqual\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The inequality operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.NotEqual(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  id: NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: NotEqual(Expression, Expression, Boolean, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NotEqual\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 336\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an inequality comparison.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression NotEqual(Expression left, Expression right, bool liftToNull, MethodInfo method)\n    content.vb: Public Shared Function NotEqual(left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: liftToNull\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to set <xref href=\\\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to <strong>true</strong>; <strong>false</strong> to set <xref href=\\\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to <strong>false</strong>.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.NotEqual\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.IsLiftedToNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong> and the inequality operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.NotEqual(Expression, Expression, Boolean, MethodInfo)\n- uid: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)\n  id: OnesComplement(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: OnesComplement(Expression)\n  fullName: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OnesComplement\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 337\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Returns the expression representing the ones complement.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression OnesComplement(Expression expression)\n    content.vb: Public Shared Function OnesComplement(expression As Expression) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>An instance of <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.OnesComplement(Expression)\n- uid: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: OnesComplement(Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OnesComplement\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 338\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Returns the expression representing the ones complement.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression OnesComplement(Expression expression, MethodInfo method)\n    content.vb: Public Shared Function OnesComplement(expression As Expression, method As MethodInfo) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the implementing method.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>An instance of <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.OnesComplement(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Or(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Or\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 339\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a bitwise <strong>OR</strong> operation.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression Or(Expression left, Expression right)\n    content.vb: Public Shared Function Or(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Or\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The bitwise <strong>OR</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Or(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Or(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Or\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 340\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a bitwise <strong>OR</strong> operation.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression Or(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function Or(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Or\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong> and the bitwise <strong>OR</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Or(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: OrAssign(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OrAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 341\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a bitwise OR assignment operation.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression OrAssign(Expression left, Expression right)\n    content.vb: Public Shared Function OrAssign(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.OrAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.OrAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: OrAssign(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OrAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 342\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a bitwise OR assignment operation.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression OrAssign(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function OrAssign(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.OrAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.OrAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: OrAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OrAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 343\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a bitwise OR assignment operation.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression OrAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)\n    content.vb: Public Shared Function OrAssign(left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.OrAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.OrAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: OrElse(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OrElse\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 344\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a conditional <strong>OR</strong> operation that evaluates the second operand only if the first operand evaluates to <strong>false</strong>.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression OrElse(Expression left, Expression right)\n    content.vb: Public Shared Function OrElse(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.OrElse\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The bitwise <strong>OR</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n<p>-or-</p>\\n<p>\\n<em>left</em>.Type and <em>right</em>.Type are not the same Boolean type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.OrElse(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: OrElse(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OrElse\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 345\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a conditional <strong>OR</strong> operation that evaluates the second operand only if the first operand evaluates to <strong>false</strong>.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression OrElse(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function OrElse(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.OrElse\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong> and the bitwise <strong>OR</strong> operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n<p>-or-</p>\\n<p>\\n<em>method</em> is <strong>null</strong> and <em>left</em>.Type and <em>right</em>.Type are not the same Boolean type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.OrElse(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Parameter(System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Parameter(System.Type)\n  id: Parameter(System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Parameter(Type)\n  fullName: System.Linq.Expressions.Expression.Parameter(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Parameter\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 346\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> node that can be used to identify a parameter or a variable in an expression tree.</p>\\n\"\n  syntax:\n    content: public static ParameterExpression Parameter(Type type)\n    content.vb: Public Shared Function Parameter(type As Type) As ParameterExpression\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The type of the parameter or variable.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.ParameterExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> node with the specified name and type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Parameter(Type)\n- uid: System.Linq.Expressions.Expression.Parameter(System.Type,System.String)\n  commentId: M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)\n  id: Parameter(System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Parameter(Type, String)\n  fullName: System.Linq.Expressions.Expression.Parameter(System.Type, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Parameter\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 347\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> node that can be used to identify a parameter or a variable in an expression tree.</p>\\n\"\n  syntax:\n    content: public static ParameterExpression Parameter(Type type, string name)\n    content.vb: Public Shared Function Parameter(type As Type, name As String) As ParameterExpression\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The type of the parameter or variable.</p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the parameter or variable, used for debugging or printing purpose only.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.ParameterExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Parameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.ParameterExpression.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>type</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Parameter(Type, String)\n- uid: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)\n  id: PostDecrementAssign(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: PostDecrementAssign(Expression)\n  fullName: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PostDecrementAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 348\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression PostDecrementAssign(Expression expression)\n    content.vb: Public Shared Function PostDecrementAssign(expression As Expression) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to apply the operations on.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the resultant expression.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.PostDecrementAssign(Expression)\n- uid: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: PostDecrementAssign(Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PostDecrementAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 349\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression PostDecrementAssign(Expression expression, MethodInfo method)\n    content.vb: Public Shared Function PostDecrementAssign(expression As Expression, method As MethodInfo) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to apply the operations on.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the implementing method.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the resultant expression.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.PostDecrementAssign(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)\n  id: PostIncrementAssign(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: PostIncrementAssign(Expression)\n  fullName: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PostIncrementAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 350\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression PostIncrementAssign(Expression expression)\n    content.vb: Public Shared Function PostIncrementAssign(expression As Expression) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to apply the operations on.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the resultant expression.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.PostIncrementAssign(Expression)\n- uid: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: PostIncrementAssign(Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PostIncrementAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 351\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression PostIncrementAssign(Expression expression, MethodInfo method)\n    content.vb: Public Shared Function PostIncrementAssign(expression As Expression, method As MethodInfo) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to apply the operations on.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the implementing method.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the resultant expression.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.PostIncrementAssign(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Power(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Power\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 352\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents raising a number to a power.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression Power(Expression left, Expression right)\n    content.vb: Public Shared Function Power(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Power\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The exponentiation operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n<p>-or-</p>\\n<p>\\n<em>left</em>.Type and/or <em>right</em>.Type are not <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Power(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Power(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Power\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 353\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents raising a number to a power.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression Power(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function Power(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Power\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong> and the exponentiation operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n<p>-or-</p>\\n<p>\\n<em>method</em> is <strong>null</strong> and <em>left</em>.Type and/or <em>right</em>.Type are not <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Power(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: PowerAssign(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PowerAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 354\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents raising an expression to a power and assigning the result back to the expression.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression PowerAssign(Expression left, Expression right)\n    content.vb: Public Shared Function PowerAssign(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.PowerAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.PowerAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: PowerAssign(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PowerAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 355\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents raising an expression to a power and assigning the result back to the expression.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression PowerAssign(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function PowerAssign(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.PowerAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.PowerAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: PowerAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PowerAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 356\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents raising an expression to a power and assigning the result back to the expression.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression PowerAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)\n    content.vb: Public Shared Function PowerAssign(left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.PowerAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.PowerAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)\n  id: PreDecrementAssign(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: PreDecrementAssign(Expression)\n  fullName: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PreDecrementAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 357\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that decrements the expression by 1 and assigns the result back to the expression.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression PreDecrementAssign(Expression expression)\n    content.vb: Public Shared Function PreDecrementAssign(expression As Expression) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to apply the operations on.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the resultant expression.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.PreDecrementAssign(Expression)\n- uid: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: PreDecrementAssign(Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PreDecrementAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 358\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that decrements the expression by 1 and assigns the result back to the expression.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression PreDecrementAssign(Expression expression, MethodInfo method)\n    content.vb: Public Shared Function PreDecrementAssign(expression As Expression, method As MethodInfo) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to apply the operations on.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the implementing method.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the resultant expression.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.PreDecrementAssign(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)\n  id: PreIncrementAssign(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: PreIncrementAssign(Expression)\n  fullName: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PreIncrementAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 359\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that increments the expression by 1 and assigns the result back to the expression.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression PreIncrementAssign(Expression expression)\n    content.vb: Public Shared Function PreIncrementAssign(expression As Expression) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to apply the operations on.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the resultant expression.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.PreIncrementAssign(Expression)\n- uid: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: PreIncrementAssign(Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PreIncrementAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 360\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that increments the expression by 1 and assigns the result back to the expression.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression PreIncrementAssign(Expression expression, MethodInfo method)\n    content.vb: Public Shared Function PreIncrementAssign(expression As Expression, method As MethodInfo) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to apply the operations on.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the implementing method.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the resultant expression.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.PreIncrementAssign(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Property(Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Property\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 361\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MemberExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents accessing a property by using a property accessor method.</p>\\n\"\n  syntax:\n    content: public static MemberExpression Property(Expression expression, MethodInfo propertyAccessor)\n    content.vb: Public Shared Function Property(expression As Expression, propertyAccessor As MethodInfo) As MemberExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.MemberExpression.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to. This can be null for static properties.</p>\\n\"\n    - id: propertyAccessor\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a property accessor method.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MemberExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MemberExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.MemberAccess\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the <xref href=\\\"System.Linq.Expressions.MemberExpression.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to <em>expression</em> and the <xref href=\\\"System.Linq.Expressions.MemberExpression.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the <xref href=\\\"System.Reflection.PropertyInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the property accessed in <em>propertyAccessor</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>propertyAccessor</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The method that <em>propertyAccessor</em> represents is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic) and <em>expression</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>expression</em>.Type is not assignable to the declaring type of the method represented by <em>propertyAccessor</em>.</p>\\n<p>-or-</p>\\n<p>The method that <em>propertyAccessor</em> represents is not a property accessor method.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Property(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)\n  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)\n  id: Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Property(Expression, PropertyInfo)\n  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Property\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 362\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MemberExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents accessing a property.</p>\\n\"\n  syntax:\n    content: public static MemberExpression Property(Expression expression, PropertyInfo property)\n    content.vb: Public Shared Function Property(expression As Expression, property As PropertyInfo) As MemberExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.MemberExpression.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to. This can be null for static properties.</p>\\n\"\n    - id: property\n      type: System.Reflection.PropertyInfo\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.PropertyInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.MemberExpression.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MemberExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MemberExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.MemberAccess\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.MemberExpression.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.MemberExpression.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>property</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The property that <em>property</em> represents is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic) and <em>expression</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>expression</em>.Type is not assignable to the declaring type of the property that <em>property</em> represents.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Property(Expression, PropertyInfo)\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Property(Expression, PropertyInfo, IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Property\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 363\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Linq.Expressions.IndexExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the access to an indexed property.</p>\\n\"\n  syntax:\n    content: public static IndexExpression Property(Expression instance, PropertyInfo indexer, IEnumerable<Expression> arguments)\n    content.vb: Public Shared Function Property(instance As Expression, indexer As PropertyInfo, arguments As IEnumerable(Of Expression)) As IndexExpression\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The object to which the property belongs. If the property is static/shared, it must be null.</p>\\n\"\n    - id: indexer\n      type: System.Reflection.PropertyInfo\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.PropertyInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the property to index.</p>\\n\"\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects that are used to index the property.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.IndexExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.IndexExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))\n  name.vb: Property(Expression, PropertyInfo, IEnumerable(Of Expression))\n  nameWithType: Expression.Property(Expression, PropertyInfo, IEnumerable<Expression>)\n  nameWithType.vb: Expression.Property(Expression, PropertyInfo, IEnumerable(Of Expression))\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])\n  id: Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Property(Expression, PropertyInfo, Expression[])\n  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Linq.Expressions.Expression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Property\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 364\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Linq.Expressions.IndexExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the access to an indexed property.</p>\\n\"\n  syntax:\n    content: public static IndexExpression Property(Expression instance, PropertyInfo indexer, params Expression[] arguments)\n    content.vb: Public Shared Function Property(instance As Expression, indexer As PropertyInfo, ParamArray arguments As Expression()) As IndexExpression\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The object to which the property belongs. If the property is static/shared, it must be null.</p>\\n\"\n    - id: indexer\n      type: System.Reflection.PropertyInfo\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.PropertyInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the property to index.</p>\\n\"\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects that are used to index the property.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.IndexExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.IndexExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Linq.Expressions.Expression())\n  name.vb: Property(Expression, PropertyInfo, Expression())\n  nameWithType: Expression.Property(Expression, PropertyInfo, Expression[])\n  nameWithType.vb: Expression.Property(Expression, PropertyInfo, Expression())\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)\n  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)\n  id: Property(System.Linq.Expressions.Expression,System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Property(Expression, String)\n  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Property\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 365\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MemberExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents accessing a property.</p>\\n\"\n  syntax:\n    content: public static MemberExpression Property(Expression expression, string propertyName)\n    content.vb: Public Shared Function Property(expression As Expression, propertyName As String) As MemberExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains a property named <em>propertyName</em>. This can be <strong>null</strong> for static properties.</p>\\n\"\n    - id: propertyName\n      type: System.String\n      description: \"\\n<p>The name of a property to be accessed.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MemberExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MemberExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.MemberAccess\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the <xref href=\\\"System.Linq.Expressions.MemberExpression.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to <em>expression</em>, and the <xref href=\\\"System.Linq.Expressions.MemberExpression.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the <xref href=\\\"System.Reflection.PropertyInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the property denoted by <em>propertyName</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>expression</em> or <em>propertyName</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>No property named <em>propertyName</em> is defined in <em>expression</em>.Type or its base types.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Property(Expression, String)\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])\n  id: Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Property(Expression, String, Expression[])\n  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.String, System.Linq.Expressions.Expression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Property\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 366\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Linq.Expressions.IndexExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the access to an indexed property.</p>\\n\"\n  syntax:\n    content: public static IndexExpression Property(Expression instance, string propertyName, params Expression[] arguments)\n    content.vb: Public Shared Function Property(instance As Expression, propertyName As String, ParamArray arguments As Expression()) As IndexExpression\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The object to which the property belongs. If the property is static/shared, it must be null.</p>\\n\"\n    - id: propertyName\n      type: System.String\n      description: \"\\n<p>The name of the indexer.</p>\\n\"\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects that are used to index the property.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.IndexExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.IndexExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.String, System.Linq.Expressions.Expression())\n  name.vb: Property(Expression, String, Expression())\n  nameWithType: Expression.Property(Expression, String, Expression[])\n  nameWithType.vb: Expression.Property(Expression, String, Expression())\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)\n  commentId: M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)\n  id: Property(System.Linq.Expressions.Expression,System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Property(Expression, Type, String)\n  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Type, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Property\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 367\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MemberExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> accessing a property.</p>\\n\"\n  syntax:\n    content: public static MemberExpression Property(Expression expression, Type type, string propertyName)\n    content.vb: Public Shared Function Property(expression As Expression, type As Type, propertyName As String) As MemberExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The containing object of the property. This can be null for static properties.</p>\\n\"\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the property.</p>\\n\"\n    - id: propertyName\n      type: System.String\n      description: \"\\n<p>The property to be accessed.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MemberExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.MemberExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Property(Expression, Type, String)\n- uid: System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)\n  commentId: M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)\n  id: PropertyOrField(System.Linq.Expressions.Expression,System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: PropertyOrField(Expression, String)\n  fullName: System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PropertyOrField\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 368\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.MemberExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents accessing a property or field.</p>\\n\"\n  syntax:\n    content: public static MemberExpression PropertyOrField(Expression expression, string propertyOrFieldName)\n    content.vb: Public Shared Function PropertyOrField(expression As Expression, propertyOrFieldName As String) As MemberExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains a property or field named <em>propertyOrFieldName</em>. This can be null for static members.</p>\\n\"\n    - id: propertyOrFieldName\n      type: System.String\n      description: \"\\n<p>The name of a property or field to be accessed.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MemberExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.MemberExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.MemberAccess\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the <xref href=\\\"System.Linq.Expressions.MemberExpression.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to <em>expression</em>, and the <xref href=\\\"System.Linq.Expressions.MemberExpression.Member\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the <xref href=\\\"System.Reflection.PropertyInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Reflection.FieldInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the property or field denoted by <em>propertyOrFieldName</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>expression</em> or <em>propertyOrFieldName</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>No property or field named <em>propertyOrFieldName</em> is defined in <em>expression</em>.Type or its base types.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.PropertyOrField(Expression, String)\n- uid: System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)\n  id: Quote(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Quote(Expression)\n  fullName: System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Quote\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 369\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an expression that has a constant value of type <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression Quote(Expression expression)\n    content.vb: Public Shared Function Quote(expression As Expression) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Quote\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the specified value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>expression</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Quote(Expression)\n- uid: System.Linq.Expressions.Expression.Reduce\n  commentId: M:System.Linq.Expressions.Expression.Reduce\n  id: Reduce\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Reduce()\n  fullName: System.Linq.Expressions.Expression.Reduce()\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Reduce\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 370\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.</p>\\n\"\n  syntax:\n    content: public virtual Expression Reduce()\n    content.vb: Public Overridable Function Reduce As Expression\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The reduced expression.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Expression.Reduce()\n- uid: System.Linq.Expressions.Expression.ReduceAndCheck\n  commentId: M:System.Linq.Expressions.Expression.ReduceAndCheck\n  id: ReduceAndCheck\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ReduceAndCheck()\n  fullName: System.Linq.Expressions.Expression.ReduceAndCheck()\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReduceAndCheck\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 371\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.</p>\\n\"\n  syntax:\n    content: public Expression ReduceAndCheck()\n    content.vb: Public Function ReduceAndCheck As Expression\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The reduced expression.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Expression.ReduceAndCheck()\n- uid: System.Linq.Expressions.Expression.ReduceExtensions\n  commentId: M:System.Linq.Expressions.Expression.ReduceExtensions\n  id: ReduceExtensions\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ReduceExtensions()\n  fullName: System.Linq.Expressions.Expression.ReduceExtensions()\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReduceExtensions\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 372\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.</p>\\n\"\n  syntax:\n    content: public Expression ReduceExtensions()\n    content.vb: Public Function ReduceExtensions As Expression\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The reduced expression.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Expression.ReduceExtensions()\n- uid: System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ReferenceEqual(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReferenceEqual\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 373\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a reference equality comparison.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression ReferenceEqual(Expression left, Expression right)\n    content.vb: Public Shared Function ReferenceEqual(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Equal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.ReferenceEqual(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ReferenceNotEqual(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReferenceNotEqual\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 374\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a reference inequality comparison.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression ReferenceNotEqual(Expression left, Expression right)\n    content.vb: Public Shared Function ReferenceNotEqual(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.NotEqual\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.ReferenceNotEqual(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Rethrow\n  commentId: M:System.Linq.Expressions.Expression.Rethrow\n  id: Rethrow\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Rethrow()\n  fullName: System.Linq.Expressions.Expression.Rethrow()\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Rethrow\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 375\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a rethrowing of an exception.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression Rethrow()\n    content.vb: Public Shared Function Rethrow As UnaryExpression\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a rethrowing of an exception.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Rethrow()\n- uid: System.Linq.Expressions.Expression.Rethrow(System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Rethrow(System.Type)\n  id: Rethrow(System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Rethrow(Type)\n  fullName: System.Linq.Expressions.Expression.Rethrow(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Rethrow\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 376\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a rethrowing of an exception with a given type.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression Rethrow(Type type)\n    content.vb: Public Shared Function Rethrow(type As Type) As UnaryExpression\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The new <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the expression.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a rethrowing of an exception.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Rethrow(Type)\n- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)\n  commentId: M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)\n  id: Return(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Return(LabelTarget)\n  fullName: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Return\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 377\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a return statement.</p>\\n\"\n  syntax:\n    content: public static GotoExpression Return(LabelTarget target)\n    content.vb: Public Shared Function Return(target As LabelTarget) As GotoExpression\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.LabelTarget\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that the <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will jump to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with <xref href=\\\"System.Linq.Expressions.GotoExpression.Kind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to Return, the <xref href=\\\"System.Linq.Expressions.GotoExpression.Target\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to <em>target</em>, and a null value to be passed to the target label upon jumping.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Return(LabelTarget)\n- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  id: Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Return(LabelTarget, Expression)\n  fullName: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Return\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 378\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a return statement. The value passed to the label upon jumping can be specified.</p>\\n\"\n  syntax:\n    content: public static GotoExpression Return(LabelTarget target, Expression value)\n    content.vb: Public Shared Function Return(target As LabelTarget, value As Expression) As GotoExpression\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.LabelTarget\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that the <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will jump to.</p>\\n\"\n    - id: value\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The value that will be passed to the associated label upon jumping.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with <xref href=\\\"System.Linq.Expressions.GotoExpression.Kind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to Continue, the <xref href=\\\"System.Linq.Expressions.GotoExpression.Target\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to <em>target</em>, and <em>value</em> to be passed to the target label upon jumping.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Return(LabelTarget, Expression)\n- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  id: Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Return(LabelTarget, Expression, Type)\n  fullName: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Return\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 379\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a return statement with the specified type. The value passed to the label upon jumping can be specified.</p>\\n\"\n  syntax:\n    content: public static GotoExpression Return(LabelTarget target, Expression value, Type type)\n    content.vb: Public Shared Function Return(target As LabelTarget, value As Expression, type As Type) As GotoExpression\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.LabelTarget\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that the <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will jump to.</p>\\n\"\n    - id: value\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The value that will be passed to the associated label upon jumping.</p>\\n\"\n    - id: type\n      type: System.Type\n      description: \"\\n<p>An <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with <xref href=\\\"System.Linq.Expressions.GotoExpression.Kind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to Continue, the <xref href=\\\"System.Linq.Expressions.GotoExpression.Target\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to <em>target</em>, the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to <em>type</em>, and <em>value</em> to be passed to the target label upon jumping.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Return(LabelTarget, Expression, Type)\n- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)\n  id: Return(System.Linq.Expressions.LabelTarget,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Return(LabelTarget, Type)\n  fullName: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Return\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 380\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a return statement with the specified type.</p>\\n\"\n  syntax:\n    content: public static GotoExpression Return(LabelTarget target, Type type)\n    content.vb: Public Shared Function Return(target As LabelTarget, type As Type) As GotoExpression\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.LabelTarget\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that the <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will jump to.</p>\\n\"\n    - id: type\n      type: System.Type\n      description: \"\\n<p>An <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with <xref href=\\\"System.Linq.Expressions.GotoExpression.Kind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to Return, the <xref href=\\\"System.Linq.Expressions.GotoExpression.Target\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to <em>target</em>, the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to <em>type</em>, and a null value to be passed to the target label upon jumping.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Return(LabelTarget, Type)\n- uid: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: RightShift(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RightShift\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 381\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a bitwise right-shift operation.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression RightShift(Expression left, Expression right)\n    content.vb: Public Shared Function RightShift(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.RightShift\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The right-shift operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.RightShift(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: RightShift(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RightShift\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 382\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a bitwise right-shift operation.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression RightShift(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function RightShift(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.RightShift\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong> and the right-shift operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.RightShift(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: RightShiftAssign(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RightShiftAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 383\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a bitwise right-shift assignment operation.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression RightShiftAssign(Expression left, Expression right)\n    content.vb: Public Shared Function RightShiftAssign(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.RightShiftAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.RightShiftAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: RightShiftAssign(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RightShiftAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 384\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a bitwise right-shift assignment operation.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression RightShiftAssign(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function RightShiftAssign(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.RightShiftAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.RightShiftAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RightShiftAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 385\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a bitwise right-shift assignment operation.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression RightShiftAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)\n    content.vb: Public Shared Function RightShiftAssign(left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.RightShiftAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  commentId: M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: RuntimeVariables(IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RuntimeVariables\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 386\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates an instance of <xref href=\\\"System.Linq.Expressions.RuntimeVariablesExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static RuntimeVariablesExpression RuntimeVariables(IEnumerable<ParameterExpression> variables)\n    content.vb: Public Shared Function RuntimeVariables(variables As IEnumerable(Of ParameterExpression)) As RuntimeVariablesExpression\n    parameters:\n    - id: variables\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: \"\\n<p>A collection of <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.RuntimeVariablesExpression.Variables\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.RuntimeVariablesExpression\n      description: \"\\n<p>An instance of <xref href=\\\"System.Linq.Expressions.RuntimeVariablesExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.RuntimeVariables\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.RuntimeVariablesExpression.Variables\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the specified value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))\n  name.vb: RuntimeVariables(IEnumerable(Of ParameterExpression))\n  nameWithType: Expression.RuntimeVariables(IEnumerable<ParameterExpression>)\n  nameWithType.vb: Expression.RuntimeVariables(IEnumerable(Of ParameterExpression))\n- uid: System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])\n  commentId: M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])\n  id: RuntimeVariables(System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: RuntimeVariables(ParameterExpression[])\n  fullName: System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RuntimeVariables\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 387\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates an instance of <xref href=\\\"System.Linq.Expressions.RuntimeVariablesExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static RuntimeVariablesExpression RuntimeVariables(params ParameterExpression[] variables)\n    content.vb: Public Shared Function RuntimeVariables(ParamArray variables As ParameterExpression()) As RuntimeVariablesExpression\n    parameters:\n    - id: variables\n      type: System.Linq.Expressions.ParameterExpression[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to use to populate the <xref href=\\\"System.Linq.Expressions.RuntimeVariablesExpression.Variables\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.RuntimeVariablesExpression\n      description: \"\\n<p>An instance of <xref href=\\\"System.Linq.Expressions.RuntimeVariablesExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.RuntimeVariables\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.RuntimeVariablesExpression.Variables\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the specified value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression())\n  name.vb: RuntimeVariables(ParameterExpression())\n  nameWithType: Expression.RuntimeVariables(ParameterExpression[])\n  nameWithType.vb: Expression.RuntimeVariables(ParameterExpression())\n- uid: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Subtract(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Subtract\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 388\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an arithmetic subtraction operation that does not have overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression Subtract(Expression left, Expression right)\n    content.vb: Public Shared Function Subtract(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Subtract\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The subtraction operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Subtract(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Subtract(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Subtract\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 389\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an arithmetic subtraction operation that does not have overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression Subtract(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function Subtract(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Subtract\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong> and the subtraction operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Subtract(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: SubtractAssign(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SubtractAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 390\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a subtraction assignment operation that does not have overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression SubtractAssign(Expression left, Expression right)\n    content.vb: Public Shared Function SubtractAssign(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.SubtractAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.SubtractAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: SubtractAssign(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SubtractAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 391\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a subtraction assignment operation that does not have overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression SubtractAssign(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function SubtractAssign(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.SubtractAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.SubtractAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SubtractAssign\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 392\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a subtraction assignment operation that does not have overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression SubtractAssign(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)\n    content.vb: Public Shared Function SubtractAssign(left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.SubtractAssign\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: SubtractAssignChecked(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SubtractAssignChecked\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 393\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a subtraction assignment operation that has overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression SubtractAssignChecked(Expression left, Expression right)\n    content.vb: Public Shared Function SubtractAssignChecked(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.SubtractAssignChecked\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.SubtractAssignChecked(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: SubtractAssignChecked(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SubtractAssignChecked\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 394\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a subtraction assignment operation that has overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression SubtractAssignChecked(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function SubtractAssignChecked(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.SubtractAssignChecked\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.SubtractAssignChecked(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  commentId: M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SubtractAssignChecked\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 395\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a subtraction assignment operation that has overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression SubtractAssignChecked(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)\n    content.vb: Public Shared Function SubtractAssignChecked(left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.LambdaExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.SubtractAssignChecked\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Conversion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: SubtractChecked(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SubtractChecked\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 396\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an arithmetic subtraction operation that has overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression SubtractChecked(Expression left, Expression right)\n    content.vb: Public Shared Function SubtractChecked(left As Expression, right As Expression) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.SubtractChecked\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The subtraction operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.SubtractChecked(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: SubtractChecked(Expression, Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SubtractChecked\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 397\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an arithmetic subtraction operation that has overflow checking.</p>\\n\"\n  syntax:\n    content: public static BinaryExpression SubtractChecked(Expression left, Expression right, MethodInfo method)\n    content.vb: Public Shared Function SubtractChecked(left As Expression, right As Expression, method As MethodInfo) As BinaryExpression\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.SubtractChecked\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.BinaryExpression.Left\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.BinaryExpression.Right\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.BinaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>left</em> or <em>right</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly two arguments.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong> and the subtraction operator is not defined for <em>left</em>.Type and <em>right</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.SubtractChecked(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  commentId: M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Switch(Expression, Expression, SwitchCase[])\n  fullName: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Switch\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 398\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.SwitchExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a <strong>switch</strong> statement that has a default case.</p>\\n\"\n  syntax:\n    content: public static SwitchExpression Switch(Expression switchValue, Expression defaultBody, params SwitchCase[] cases)\n    content.vb: Public Shared Function Switch(switchValue As Expression, defaultBody As Expression, ParamArray cases As SwitchCase()) As SwitchExpression\n    parameters:\n    - id: switchValue\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The value to be tested against each case.</p>\\n\"\n    - id: defaultBody\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The result of the switch if <em>switchValue</em> does not match any of the cases.</p>\\n\"\n    - id: cases\n      type: System.Linq.Expressions.SwitchCase[]\n      description: \"\\n<p>The set of cases for this switch expression.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.SwitchExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.SwitchExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase())\n  name.vb: Switch(Expression, Expression, SwitchCase())\n  nameWithType: Expression.Switch(Expression, Expression, SwitchCase[])\n  nameWithType.vb: Expression.Switch(Expression, Expression, SwitchCase())\n- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  commentId: M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)\n  fullName: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Switch\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 399\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.SwitchExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a <strong>switch</strong> statement that has a default case.</p>\\n\"\n  syntax:\n    content: public static SwitchExpression Switch(Expression switchValue, Expression defaultBody, MethodInfo comparison, IEnumerable<SwitchCase> cases)\n    content.vb: Public Shared Function Switch(switchValue As Expression, defaultBody As Expression, comparison As MethodInfo, cases As IEnumerable(Of SwitchCase)) As SwitchExpression\n    parameters:\n    - id: switchValue\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The value to be tested against each case.</p>\\n\"\n    - id: defaultBody\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The result of the switch if <em>switchValue</em> does not match any of the cases.</p>\\n\"\n    - id: comparison\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>The equality comparison method to use.</p>\\n\"\n    - id: cases\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}\n      description: \"\\n<p>The set of cases for this switch expression.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.SwitchExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.SwitchExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.SwitchCase))\n  name.vb: Switch(Expression, Expression, MethodInfo, IEnumerable(Of SwitchCase))\n  nameWithType: Expression.Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)\n  nameWithType.vb: Expression.Switch(Expression, Expression, MethodInfo, IEnumerable(Of SwitchCase))\n- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  commentId: M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Switch(Expression, Expression, MethodInfo, SwitchCase[])\n  fullName: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Switch\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 400\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.SwitchExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a <strong>switch</strong> statement that has a default case.</p>\\n\"\n  syntax:\n    content: public static SwitchExpression Switch(Expression switchValue, Expression defaultBody, MethodInfo comparison, params SwitchCase[] cases)\n    content.vb: Public Shared Function Switch(switchValue As Expression, defaultBody As Expression, comparison As MethodInfo, ParamArray cases As SwitchCase()) As SwitchExpression\n    parameters:\n    - id: switchValue\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The value to be tested against each case.</p>\\n\"\n    - id: defaultBody\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The result of the switch if <em>switchValue</em> does not match any of the cases.</p>\\n\"\n    - id: comparison\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>The equality comparison method to use.</p>\\n\"\n    - id: cases\n      type: System.Linq.Expressions.SwitchCase[]\n      description: \"\\n<p>The set of cases for this switch expression.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.SwitchExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.SwitchExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase())\n  name.vb: Switch(Expression, Expression, MethodInfo, SwitchCase())\n  nameWithType: Expression.Switch(Expression, Expression, MethodInfo, SwitchCase[])\n  nameWithType.vb: Expression.Switch(Expression, Expression, MethodInfo, SwitchCase())\n- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  commentId: M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Switch(Expression, SwitchCase[])\n  fullName: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Switch\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 401\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.SwitchExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a <strong>switch</strong> statement without a default case.</p>\\n\"\n  syntax:\n    content: public static SwitchExpression Switch(Expression switchValue, params SwitchCase[] cases)\n    content.vb: Public Shared Function Switch(switchValue As Expression, ParamArray cases As SwitchCase()) As SwitchExpression\n    parameters:\n    - id: switchValue\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The value to be tested against each case.</p>\\n\"\n    - id: cases\n      type: System.Linq.Expressions.SwitchCase[]\n      description: \"\\n<p>The set of cases for this switch expression.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.SwitchExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.SwitchExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase())\n  name.vb: Switch(Expression, SwitchCase())\n  nameWithType: Expression.Switch(Expression, SwitchCase[])\n  nameWithType.vb: Expression.Switch(Expression, SwitchCase())\n- uid: System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  commentId: M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  id: Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)\n  fullName: System.Linq.Expressions.Expression.Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Switch\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 402\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.SwitchExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a <strong>switch</strong> statement that has a default case.</p>\\n\"\n  syntax:\n    content: public static SwitchExpression Switch(Type type, Expression switchValue, Expression defaultBody, MethodInfo comparison, IEnumerable<SwitchCase> cases)\n    content.vb: Public Shared Function Switch(type As Type, switchValue As Expression, defaultBody As Expression, comparison As MethodInfo, cases As IEnumerable(Of SwitchCase)) As SwitchExpression\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The result type of the switch.</p>\\n\"\n    - id: switchValue\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The value to be tested against each case.</p>\\n\"\n    - id: defaultBody\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The result of the switch if <em>switchValue</em> does not match any of the cases.</p>\\n\"\n    - id: comparison\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>The equality comparison method to use.</p>\\n\"\n    - id: cases\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}\n      description: \"\\n<p>The set of cases for this switch expression.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.SwitchExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.SwitchExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.SwitchCase))\n  name.vb: Switch(Type, Expression, Expression, MethodInfo, IEnumerable(Of SwitchCase))\n  nameWithType: Expression.Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)\n  nameWithType.vb: Expression.Switch(Type, Expression, Expression, MethodInfo, IEnumerable(Of SwitchCase))\n- uid: System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  commentId: M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  id: Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Switch(Type, Expression, Expression, MethodInfo, SwitchCase[])\n  fullName: System.Linq.Expressions.Expression.Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Switch\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 403\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.SwitchExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a <strong>switch</strong> statement that has a default case..</p>\\n\"\n  syntax:\n    content: public static SwitchExpression Switch(Type type, Expression switchValue, Expression defaultBody, MethodInfo comparison, params SwitchCase[] cases)\n    content.vb: Public Shared Function Switch(type As Type, switchValue As Expression, defaultBody As Expression, comparison As MethodInfo, ParamArray cases As SwitchCase()) As SwitchExpression\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The result type of the switch.</p>\\n\"\n    - id: switchValue\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The value to be tested against each case.</p>\\n\"\n    - id: defaultBody\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The result of the switch if <em>switchValue</em> does not match any of the cases.</p>\\n\"\n    - id: comparison\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>The equality comparison method to use.</p>\\n\"\n    - id: cases\n      type: System.Linq.Expressions.SwitchCase[]\n      description: \"\\n<p>The set of cases for this switch expression.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.SwitchExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.SwitchExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase())\n  name.vb: Switch(Type, Expression, Expression, MethodInfo, SwitchCase())\n  nameWithType: Expression.Switch(Type, Expression, Expression, MethodInfo, SwitchCase[])\n  nameWithType.vb: Expression.Switch(Type, Expression, Expression, MethodInfo, SwitchCase())\n- uid: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: SwitchCase(Expression, IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SwitchCase\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 404\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.SwitchCase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to be used in a <xref href=\\\"System.Linq.Expressions.SwitchExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public static SwitchCase SwitchCase(Expression body, IEnumerable<Expression> testValues)\n    content.vb: Public Shared Function SwitchCase(body As Expression, testValues As IEnumerable(Of Expression)) As SwitchCase\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The body of the case.</p>\\n\"\n    - id: testValues\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: \"\\n<p>The test values of the case.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.SwitchCase\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.SwitchCase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))\n  name.vb: SwitchCase(Expression, IEnumerable(Of Expression))\n  nameWithType: Expression.SwitchCase(Expression, IEnumerable<Expression>)\n  nameWithType.vb: Expression.SwitchCase(Expression, IEnumerable(Of Expression))\n- uid: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  id: SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: SwitchCase(Expression, Expression[])\n  fullName: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SwitchCase\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 405\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.SwitchCase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for use in a <xref href=\\\"System.Linq.Expressions.SwitchExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static SwitchCase SwitchCase(Expression body, params Expression[] testValues)\n    content.vb: Public Shared Function SwitchCase(body As Expression, ParamArray testValues As Expression()) As SwitchCase\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The body of the case.</p>\\n\"\n    - id: testValues\n      type: System.Linq.Expressions.Expression[]\n      description: \"\\n<p>The test values of the case.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.SwitchCase\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.SwitchCase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression())\n  name.vb: SwitchCase(Expression, Expression())\n  nameWithType: Expression.SwitchCase(Expression, Expression[])\n  nameWithType.vb: Expression.SwitchCase(Expression, Expression())\n- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String)\n  commentId: M:System.Linq.Expressions.Expression.SymbolDocument(System.String)\n  id: SymbolDocument(System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: SymbolDocument(String)\n  fullName: System.Linq.Expressions.Expression.SymbolDocument(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SymbolDocument\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 406\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates an instance of <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static SymbolDocumentInfo SymbolDocument(string fileName)\n    content.vb: Public Shared Function SymbolDocument(fileName As String) As SymbolDocumentInfo\n    parameters:\n    - id: fileName\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo.FileName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.SymbolDocumentInfo\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo.FileName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the specified value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.SymbolDocument(String)\n- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)\n  commentId: M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)\n  id: SymbolDocument(System.String,System.Guid)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: SymbolDocument(String, Guid)\n  fullName: System.Linq.Expressions.Expression.SymbolDocument(System.String, System.Guid)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SymbolDocument\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 407\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates an instance of <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static SymbolDocumentInfo SymbolDocument(string fileName, Guid language)\n    content.vb: Public Shared Function SymbolDocument(fileName As String, language As Guid) As SymbolDocumentInfo\n    parameters:\n    - id: fileName\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo.FileName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to.</p>\\n\"\n    - id: language\n      type: System.Guid\n      description: \"\\n<p>A <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo.Language\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.SymbolDocumentInfo\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo.FileName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo.Language\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.SymbolDocument(String, Guid)\n- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)\n  commentId: M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)\n  id: SymbolDocument(System.String,System.Guid,System.Guid)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: SymbolDocument(String, Guid, Guid)\n  fullName: System.Linq.Expressions.Expression.SymbolDocument(System.String, System.Guid, System.Guid)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SymbolDocument\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 408\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates an instance of <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static SymbolDocumentInfo SymbolDocument(string fileName, Guid language, Guid languageVendor)\n    content.vb: Public Shared Function SymbolDocument(fileName As String, language As Guid, languageVendor As Guid) As SymbolDocumentInfo\n    parameters:\n    - id: fileName\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo.FileName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to.</p>\\n\"\n    - id: language\n      type: System.Guid\n      description: \"\\n<p>A <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo.Language\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to.</p>\\n\"\n    - id: languageVendor\n      type: System.Guid\n      description: \"\\n<p>A <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.SymbolDocumentInfo\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo.FileName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo.Language\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.SymbolDocument(String, Guid, Guid)\n- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)\n  commentId: M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)\n  id: SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: SymbolDocument(String, Guid, Guid, Guid)\n  fullName: System.Linq.Expressions.Expression.SymbolDocument(System.String, System.Guid, System.Guid, System.Guid)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SymbolDocument\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 409\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates an instance of <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static SymbolDocumentInfo SymbolDocument(string fileName, Guid language, Guid languageVendor, Guid documentType)\n    content.vb: Public Shared Function SymbolDocument(fileName As String, language As Guid, languageVendor As Guid, documentType As Guid) As SymbolDocumentInfo\n    parameters:\n    - id: fileName\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo.FileName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to.</p>\\n\"\n    - id: language\n      type: System.Guid\n      description: \"\\n<p>A <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo.Language\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to.</p>\\n\"\n    - id: languageVendor\n      type: System.Guid\n      description: \"\\n<p>A <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to.</p>\\n\"\n    - id: documentType\n      type: System.Guid\n      description: \"\\n<p>A <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo.DocumentType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.SymbolDocumentInfo\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo.FileName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo.Language\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.SymbolDocumentInfo.DocumentType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.SymbolDocument(String, Guid, Guid, Guid)\n- uid: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)\n  id: Throw(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Throw(Expression)\n  fullName: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Throw\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 410\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a throwing of an exception.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression Throw(Expression value)\n    content.vb: Public Shared Function Throw(value As Expression) As UnaryExpression\n    parameters:\n    - id: value\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the exception.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Throw(Expression)\n- uid: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)\n  id: Throw(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Throw(Expression, Type)\n  fullName: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Throw\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 411\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a throwing of an exception with a given type.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression Throw(Expression value, Type type)\n    content.vb: Public Shared Function Throw(value As Expression, type As Type) As UnaryExpression\n    parameters:\n    - id: value\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The new <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the expression.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the exception.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Throw(Expression, Type)\n- uid: System.Linq.Expressions.Expression.ToString\n  commentId: M:System.Linq.Expressions.Expression.ToString\n  id: ToString\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Linq.Expressions.Expression.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 412\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Returns a textual representation of the <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A textual representation of the <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Expression.ToString()\n- uid: System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  commentId: M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  id: TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: TryCatch(Expression, CatchBlock[])\n  fullName: System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryCatch\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 413\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.TryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a try block with any number of catch statements and neither a fault nor finally block.</p>\\n\"\n  syntax:\n    content: public static TryExpression TryCatch(Expression body, params CatchBlock[] handlers)\n    content.vb: Public Shared Function TryCatch(body As Expression, ParamArray handlers As CatchBlock()) As TryExpression\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The body of the try block.</p>\\n\"\n    - id: handlers\n      type: System.Linq.Expressions.CatchBlock[]\n      description: \"\\n<p>The array of zero or more <xref href=\\\"System.Linq.Expressions.CatchBlock\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> expressions representing the catch statements to be associated with the try block.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.TryExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.TryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock())\n  name.vb: TryCatch(Expression, CatchBlock())\n  nameWithType: Expression.TryCatch(Expression, CatchBlock[])\n  nameWithType.vb: Expression.TryCatch(Expression, CatchBlock())\n- uid: System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  commentId: M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  id: TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: TryCatchFinally(Expression, Expression, CatchBlock[])\n  fullName: System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryCatchFinally\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 414\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.TryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a try block with any number of catch statements and a finally block.</p>\\n\"\n  syntax:\n    content: public static TryExpression TryCatchFinally(Expression body, Expression finally, params CatchBlock[] handlers)\n    content.vb: Public Shared Function TryCatchFinally(body As Expression, finally As Expression, ParamArray handlers As CatchBlock()) As TryExpression\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The body of the try block.</p>\\n\"\n    - id: finally\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The body of the finally block.</p>\\n\"\n    - id: handlers\n      type: System.Linq.Expressions.CatchBlock[]\n      description: \"\\n<p>The array of zero or more <xref href=\\\"System.Linq.Expressions.CatchBlock\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> expressions representing the catch statements to be associated with the try block.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.TryExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.TryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock())\n  name.vb: TryCatchFinally(Expression, Expression, CatchBlock())\n  nameWithType: Expression.TryCatchFinally(Expression, Expression, CatchBlock[])\n  nameWithType.vb: Expression.TryCatchFinally(Expression, Expression, CatchBlock())\n- uid: System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: TryFault(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryFault\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 415\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.TryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a try block with a fault block and no catch statements.</p>\\n\"\n  syntax:\n    content: public static TryExpression TryFault(Expression body, Expression fault)\n    content.vb: Public Shared Function TryFault(body As Expression, fault As Expression) As TryExpression\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The body of the try block.</p>\\n\"\n    - id: fault\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The body of the fault block.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.TryExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.TryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.TryFault(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: TryFinally(Expression, Expression)\n  fullName: System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryFinally\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 416\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.TryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing a try block with a finally block and no catch statements.</p>\\n\"\n  syntax:\n    content: public static TryExpression TryFinally(Expression body, Expression finally)\n    content.vb: Public Shared Function TryFinally(body As Expression, finally As Expression) As TryExpression\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The body of the try block.</p>\\n\"\n    - id: finally\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The body of the finally block.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.TryExpression\n      description: \"\\n<p>The created <xref href=\\\"System.Linq.Expressions.TryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.TryFinally(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)\n  commentId: M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)\n  id: TryGetActionType(System.Type[],System.Type@)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: TryGetActionType(Type[], out Type)\n  fullName: System.Linq.Expressions.Expression.TryGetActionType(System.Type[], out System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryGetActionType\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 417\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents a generic System.Action delegate type that has specific type arguments.</p>\\n\"\n  syntax:\n    content: public static bool TryGetActionType(Type[] typeArgs, out Type actionType)\n    content.vb: Public Shared Function TryGetActionType(typeArgs As Type(), ByRef actionType As Type) As Boolean\n    parameters:\n    - id: typeArgs\n      type: System.Type[]\n      description: \"\\n<p>An array of Type objects that specify the type arguments for the System.Action delegate type.</p>\\n\"\n    - id: actionType\n      type: System.Type\n      description: \"\\n<p>When this method returns, contains the generic System.Action delegate type that has specific type arguments. Contains null if there is no generic System.Action delegate that matches the <em>typeArgs</em>.This parameter is passed uninitialized.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>true if generic System.Action delegate type was created for specific <em>typeArgs</em>; false otherwise.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.TryGetActionType(System.Type(), ByRef System.Type)\n  name.vb: TryGetActionType(Type(), ByRef Type)\n  nameWithType: Expression.TryGetActionType(Type[], out Type)\n  nameWithType.vb: Expression.TryGetActionType(Type(), ByRef Type)\n- uid: System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)\n  commentId: M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)\n  id: TryGetFuncType(System.Type[],System.Type@)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: TryGetFuncType(Type[], out Type)\n  fullName: System.Linq.Expressions.Expression.TryGetFuncType(System.Type[], out System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryGetFuncType\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 418\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents a generic System.Func delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.</p>\\n\"\n  syntax:\n    content: public static bool TryGetFuncType(Type[] typeArgs, out Type funcType)\n    content.vb: Public Shared Function TryGetFuncType(typeArgs As Type(), ByRef funcType As Type) As Boolean\n    parameters:\n    - id: typeArgs\n      type: System.Type[]\n      description: \"\\n<p>An array of Type objects that specify the type arguments for the System.Func delegate type.</p>\\n\"\n    - id: funcType\n      type: System.Type\n      description: \"\\n<p>When this method returns, contains the generic System.Func delegate type that has specific type arguments. Contains null if there is no generic System.Func delegate that matches the <em>typeArgs</em>.This parameter is passed uninitialized.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>true if generic System.Func delegate type was created for specific <em>typeArgs</em>; false otherwise.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.Expression.TryGetFuncType(System.Type(), ByRef System.Type)\n  name.vb: TryGetFuncType(Type(), ByRef Type)\n  nameWithType: Expression.TryGetFuncType(Type[], out Type)\n  nameWithType.vb: Expression.TryGetFuncType(Type(), ByRef Type)\n- uid: System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)\n  id: TypeAs(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: TypeAs(Expression, Type)\n  fullName: System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TypeAs\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 419\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an explicit reference or boxing conversion where <strong>null</strong> is supplied if the conversion fails.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression TypeAs(Expression expression, Type type)\n    content.vb: Public Shared Function TypeAs(expression As Expression, type As Type) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: type\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.TypeAs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>expression</em> or <em>type</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.TypeAs(Expression, Type)\n- uid: System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)\n  id: TypeEqual(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: TypeEqual(Expression, Type)\n  fullName: System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TypeEqual\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 420\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.TypeBinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that compares run-time type identity.</p>\\n\"\n  syntax:\n    content: public static TypeBinaryExpression TypeEqual(Expression expression, Type type)\n    content.vb: Public Shared Function TypeEqual(expression As Expression, type As Type) As TypeBinaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: type\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.TypeBinaryExpression.TypeOperand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.TypeBinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.TypeBinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for which the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is equal to <xref href=\\\"System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and for which the <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.TypeBinaryExpression.TypeOperand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties are set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.TypeEqual(Expression, Type)\n- uid: System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)\n  id: TypeIs(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: TypeIs(Expression, Type)\n  fullName: System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TypeIs\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 421\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.TypeBinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static TypeBinaryExpression TypeIs(Expression expression, Type type)\n    content.vb: Public Shared Function TypeIs(expression As Expression, type As Type) As TypeBinaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.TypeBinaryExpression.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: type\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.Expression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.TypeBinaryExpression.TypeOperand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.TypeBinaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.TypeBinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for which the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.TypeIs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and for which the <xref href=\\\"System.Linq.Expressions.TypeBinaryExpression.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.TypeBinaryExpression.TypeOperand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties are set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>expression</em> or <em>type</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.TypeIs(Expression, Type)\n- uid: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)\n  id: UnaryPlus(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: UnaryPlus(Expression)\n  fullName: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UnaryPlus\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 422\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a unary plus operation.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression UnaryPlus(Expression expression)\n    content.vb: Public Shared Function UnaryPlus(expression As Expression) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.UnaryPlus\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set to the specified value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>expression</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The unary plus operator is not defined for <em>expression</em>.Type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.UnaryPlus(Expression)\n- uid: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  commentId: M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: UnaryPlus(Expression, MethodInfo)\n  fullName: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UnaryPlus\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 423\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a unary plus operation.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression UnaryPlus(Expression expression, MethodInfo method)\n    content.vb: Public Shared Function UnaryPlus(expression As Expression, method As MethodInfo) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to set the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the <xref href=\\\"System.Linq.Expressions.Expression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.UnaryPlus\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Linq.Expressions.UnaryExpression.Operand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.UnaryExpression.Method\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties set to the specified values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>expression</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>method</em> is not <strong>null</strong> and the method it represents returns <strong>void</strong>, is not <strong>static</strong> (<strong>Shared</strong> in Visual Basic), or does not take exactly one argument.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>method</em> is <strong>null</strong> and the unary plus operator is not defined for <em>expression</em>.Type.</p>\\n<p>-or-</p>\\n<p>\\n<em>expression</em>.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <em>method</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.UnaryPlus(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)\n  id: Unbox(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Unbox(Expression, Type)\n  fullName: System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Unbox\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 424\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an explicit unboxing.</p>\\n\"\n  syntax:\n    content: public static UnaryExpression Unbox(Expression expression, Type type)\n    content.vb: Public Shared Function Unbox(expression As Expression, type As Type) As UnaryExpression\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to unbox.</p>\\n\"\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The new <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the expression.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>An instance of <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Unbox(Expression, Type)\n- uid: System.Linq.Expressions.Expression.Variable(System.Type)\n  commentId: M:System.Linq.Expressions.Expression.Variable(System.Type)\n  id: Variable(System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Variable(Type)\n  fullName: System.Linq.Expressions.Expression.Variable(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Variable\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 425\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> node that can be used to identify a parameter or a variable in an expression tree.</p>\\n\"\n  syntax:\n    content: public static ParameterExpression Variable(Type type)\n    content.vb: Public Shared Function Variable(type As Type) As ParameterExpression\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The type of the parameter or variable.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.ParameterExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> node with the specified name and type</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Variable(Type)\n- uid: System.Linq.Expressions.Expression.Variable(System.Type,System.String)\n  commentId: M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)\n  id: Variable(System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: Variable(Type, String)\n  fullName: System.Linq.Expressions.Expression.Variable(System.Type, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Variable\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 426\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> node that can be used to identify a parameter or a variable in an expression tree.</p>\\n\"\n  syntax:\n    content: public static ParameterExpression Variable(Type type, string name)\n    content.vb: Public Shared Function Variable(type As Type, name As String) As ParameterExpression\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The type of the parameter or variable.</p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the parameter or variable. This name is used for debugging or printing purpose only.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.ParameterExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> node with the specified name and type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Expression.Variable(Type, String)\n- uid: System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)\n  commentId: M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)\n  id: VisitChildren(System.Linq.Expressions.ExpressionVisitor)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  - vb\n  name: VisitChildren(ExpressionVisitor)\n  fullName: System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitChildren\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 427\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible.</p>\\n\"\n  syntax:\n    content: protected virtual Expression VisitChildren(ExpressionVisitor visitor)\n    content.vb: Protected Overridable Function VisitChildren(visitor As ExpressionVisitor) As Expression\n    parameters:\n    - id: visitor\n      type: System.Linq.Expressions.ExpressionVisitor\n      description: \"\\n<p>An instance of <xref href=\\\"System.Func`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The expression being visited, or an expression which should replace it in the tree.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: Expression.VisitChildren(ExpressionVisitor)\nreferences:\n- uid: System.Linq.Expressions\n  isExternal: false\n  name: System.Linq.Expressions\n  fullName: System.Linq.Expressions\n  commentId: N:System.Linq.Expressions\n  nameWithType: System.Linq.Expressions\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Linq.Expressions.ExpressionType\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ExpressionType\n  fullName: System.Linq.Expressions.ExpressionType\n  commentId: T:System.Linq.Expressions.ExpressionType\n  nameWithType: ExpressionType\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  commentId: T:System.Type\n  nameWithType: Type\n- uid: System.Linq.Expressions.ExpressionVisitor\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ExpressionVisitor\n  fullName: System.Linq.Expressions.ExpressionVisitor\n  commentId: T:System.Linq.Expressions.ExpressionVisitor\n  nameWithType: ExpressionVisitor\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  fullName: System.Linq.Expressions.Expression\n  commentId: T:System.Linq.Expressions.Expression\n  nameWithType: Expression\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n  commentId: T:System.Linq.Expressions.BinaryExpression\n  nameWithType: BinaryExpression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  fullName: System.Reflection.MethodInfo\n  commentId: T:System.Reflection.MethodInfo\n  nameWithType: MethodInfo\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  commentId: N:System.Reflection\n  nameWithType: System.Reflection\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n  commentId: T:System.Linq.Expressions.LambdaExpression\n  nameWithType: LambdaExpression\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression)\n  name.vb: IEnumerable(Of Expression)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Linq.Expressions.Expression\n    name: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Linq.Expressions.Expression\n    name: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  nameWithType: IEnumerable<Expression>\n  nameWithType.vb: IEnumerable(Of Expression)\n- uid: System.Linq.Expressions.IndexExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: IndexExpression\n  fullName: System.Linq.Expressions.IndexExpression\n  commentId: T:System.Linq.Expressions.IndexExpression\n  nameWithType: IndexExpression\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable`1\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n  nameWithType: System.Collections.Generic\n- uid: System.Linq.Expressions.Expression[]\n  name: Expression[]\n  fullName: System.Linq.Expressions.Expression[]\n  fullname.vb: System.Linq.Expressions.Expression()\n  name.vb: Expression()\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression\n    name: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression\n    name: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: ()\n    fullName: ()\n  nameWithType: Expression[]\n  nameWithType.vb: Expression()\n- uid: System.Linq.Expressions.MethodCallExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MethodCallExpression\n  fullName: System.Linq.Expressions.MethodCallExpression\n  commentId: T:System.Linq.Expressions.MethodCallExpression\n  nameWithType: MethodCallExpression\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n  commentId: T:System.Linq.Expressions.UnaryExpression\n  nameWithType: UnaryExpression\n- uid: System.Reflection.MemberInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo\n  fullName: System.Reflection.MemberInfo\n  commentId: T:System.Reflection.MemberInfo\n  nameWithType: MemberInfo\n- uid: System.Linq.Expressions.MemberAssignment\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberAssignment\n  fullName: System.Linq.Expressions.MemberAssignment\n  commentId: T:System.Linq.Expressions.MemberAssignment\n  nameWithType: MemberAssignment\n- uid: System.Linq.Expressions.BlockExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BlockExpression\n  fullName: System.Linq.Expressions.BlockExpression\n  commentId: T:System.Linq.Expressions.BlockExpression\n  nameWithType: BlockExpression\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<ParameterExpression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression)\n  name.vb: IEnumerable(Of ParameterExpression)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Linq.Expressions.ParameterExpression\n    name: ParameterExpression\n    fullName: System.Linq.Expressions.ParameterExpression\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Linq.Expressions.ParameterExpression\n    name: ParameterExpression\n    fullName: System.Linq.Expressions.ParameterExpression\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n  nameWithType: IEnumerable<ParameterExpression>\n  nameWithType.vb: IEnumerable(Of ParameterExpression)\n- uid: System.Linq.Expressions.LabelTarget\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelTarget\n  fullName: System.Linq.Expressions.LabelTarget\n  commentId: T:System.Linq.Expressions.LabelTarget\n  nameWithType: LabelTarget\n- uid: System.Linq.Expressions.GotoExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: GotoExpression\n  fullName: System.Linq.Expressions.GotoExpression\n  commentId: T:System.Linq.Expressions.GotoExpression\n  nameWithType: GotoExpression\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Type[]\n  name: Type[]\n  fullName: System.Type[]\n  fullname.vb: System.Type()\n  name.vb: Type()\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ()\n    fullName: ()\n  nameWithType: Type[]\n  nameWithType.vb: Type()\n- uid: System.Linq.Expressions.ParameterExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ParameterExpression\n  fullName: System.Linq.Expressions.ParameterExpression\n  commentId: T:System.Linq.Expressions.ParameterExpression\n  nameWithType: ParameterExpression\n- uid: System.Linq.Expressions.CatchBlock\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: CatchBlock\n  fullName: System.Linq.Expressions.CatchBlock\n  commentId: T:System.Linq.Expressions.CatchBlock\n  nameWithType: CatchBlock\n- uid: System.Linq.Expressions.SymbolDocumentInfo\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: SymbolDocumentInfo\n  fullName: System.Linq.Expressions.SymbolDocumentInfo\n  commentId: T:System.Linq.Expressions.SymbolDocumentInfo\n  nameWithType: SymbolDocumentInfo\n- uid: System.Linq.Expressions.DebugInfoExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DebugInfoExpression\n  fullName: System.Linq.Expressions.DebugInfoExpression\n  commentId: T:System.Linq.Expressions.DebugInfoExpression\n  nameWithType: DebugInfoExpression\n- uid: System.Linq.Expressions.ConditionalExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ConditionalExpression\n  fullName: System.Linq.Expressions.ConditionalExpression\n  commentId: T:System.Linq.Expressions.ConditionalExpression\n  nameWithType: ConditionalExpression\n- uid: System.Linq.Expressions.ConstantExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ConstantExpression\n  fullName: System.Linq.Expressions.ConstantExpression\n  commentId: T:System.Linq.Expressions.ConstantExpression\n  nameWithType: ConstantExpression\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Linq.Expressions.DefaultExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DefaultExpression\n  fullName: System.Linq.Expressions.DefaultExpression\n  commentId: T:System.Linq.Expressions.DefaultExpression\n  nameWithType: DefaultExpression\n- uid: System.Linq.Expressions.ElementInit\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ElementInit\n  fullName: System.Linq.Expressions.ElementInit\n  commentId: T:System.Linq.Expressions.ElementInit\n  nameWithType: ElementInit\n- uid: System.Reflection.FieldInfo\n  parent: System.Reflection\n  isExternal: false\n  name: FieldInfo\n  fullName: System.Reflection.FieldInfo\n  commentId: T:System.Reflection.FieldInfo\n  nameWithType: FieldInfo\n- uid: System.Linq.Expressions.MemberExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberExpression\n  fullName: System.Linq.Expressions.MemberExpression\n  commentId: T:System.Linq.Expressions.MemberExpression\n  nameWithType: MemberExpression\n- uid: System.Linq.Expressions.InvocationExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: InvocationExpression\n  fullName: System.Linq.Expressions.InvocationExpression\n  commentId: T:System.Linq.Expressions.InvocationExpression\n  nameWithType: InvocationExpression\n- uid: System.Linq.Expressions.LabelExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelExpression\n  fullName: System.Linq.Expressions.LabelExpression\n  commentId: T:System.Linq.Expressions.LabelExpression\n  nameWithType: LabelExpression\n- uid: System.Linq.Expressions.ParameterExpression[]\n  name: ParameterExpression[]\n  fullName: System.Linq.Expressions.ParameterExpression[]\n  fullname.vb: System.Linq.Expressions.ParameterExpression()\n  name.vb: ParameterExpression()\n  spec.csharp:\n  - uid: System.Linq.Expressions.ParameterExpression\n    name: ParameterExpression\n    fullName: System.Linq.Expressions.ParameterExpression\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Linq.Expressions.ParameterExpression\n    name: ParameterExpression\n    fullName: System.Linq.Expressions.ParameterExpression\n  - name: ()\n    fullName: ()\n  nameWithType: ParameterExpression[]\n  nameWithType.vb: ParameterExpression()\n- uid: System.Linq.Expressions.Expression{{TDelegate}}\n  parent: System.Linq.Expressions\n  definition: System.Linq.Expressions.Expression`1\n  name: Expression<TDelegate>\n  fullName: System.Linq.Expressions.Expression<TDelegate>\n  fullname.vb: System.Linq.Expressions.Expression(Of TDelegate)\n  name.vb: Expression(Of TDelegate)\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    fullName: <\n  - name: TDelegate\n    fullName: TDelegate\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TDelegate\n    fullName: TDelegate\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.Expressions.Expression{``0}\n  nameWithType: Expression<TDelegate>\n  nameWithType.vb: Expression(Of TDelegate)\n- uid: System.Linq.Expressions.Expression`1\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<TDelegate>\n  fullName: System.Linq.Expressions.Expression<TDelegate>\n  fullname.vb: System.Linq.Expressions.Expression(Of TDelegate)\n  name.vb: Expression(Of TDelegate)\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    fullName: <\n  - name: TDelegate\n    fullName: TDelegate\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TDelegate\n    fullName: TDelegate\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.Expressions.Expression`1\n  nameWithType: Expression<TDelegate>\n  nameWithType.vb: Expression(Of TDelegate)\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<ElementInit>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ElementInit)\n  name.vb: IEnumerable(Of ElementInit)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Linq.Expressions.ElementInit\n    name: ElementInit\n    fullName: System.Linq.Expressions.ElementInit\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Linq.Expressions.ElementInit\n    name: ElementInit\n    fullName: System.Linq.Expressions.ElementInit\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}\n  nameWithType: IEnumerable<ElementInit>\n  nameWithType.vb: IEnumerable(Of ElementInit)\n- uid: System.Linq.Expressions.MemberListBinding\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberListBinding\n  fullName: System.Linq.Expressions.MemberListBinding\n  commentId: T:System.Linq.Expressions.MemberListBinding\n  nameWithType: MemberListBinding\n- uid: System.Linq.Expressions.ElementInit[]\n  name: ElementInit[]\n  fullName: System.Linq.Expressions.ElementInit[]\n  fullname.vb: System.Linq.Expressions.ElementInit()\n  name.vb: ElementInit()\n  spec.csharp:\n  - uid: System.Linq.Expressions.ElementInit\n    name: ElementInit\n    fullName: System.Linq.Expressions.ElementInit\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Linq.Expressions.ElementInit\n    name: ElementInit\n    fullName: System.Linq.Expressions.ElementInit\n  - name: ()\n    fullName: ()\n  nameWithType: ElementInit[]\n  nameWithType.vb: ElementInit()\n- uid: System.Linq.Expressions.NewExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: NewExpression\n  fullName: System.Linq.Expressions.NewExpression\n  commentId: T:System.Linq.Expressions.NewExpression\n  nameWithType: NewExpression\n- uid: System.Linq.Expressions.ListInitExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ListInitExpression\n  fullName: System.Linq.Expressions.ListInitExpression\n  commentId: T:System.Linq.Expressions.ListInitExpression\n  nameWithType: ListInitExpression\n- uid: System.Linq.Expressions.LoopExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LoopExpression\n  fullName: System.Linq.Expressions.LoopExpression\n  commentId: T:System.Linq.Expressions.LoopExpression\n  nameWithType: LoopExpression\n- uid: System.Linq.Expressions.GotoExpressionKind\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: GotoExpressionKind\n  fullName: System.Linq.Expressions.GotoExpressionKind\n  commentId: T:System.Linq.Expressions.GotoExpressionKind\n  nameWithType: GotoExpressionKind\n- uid: System.Reflection.PropertyInfo\n  parent: System.Reflection\n  isExternal: false\n  name: PropertyInfo\n  fullName: System.Reflection.PropertyInfo\n  commentId: T:System.Reflection.PropertyInfo\n  nameWithType: PropertyInfo\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<CatchBlock>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.CatchBlock)\n  name.vb: IEnumerable(Of CatchBlock)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Linq.Expressions.CatchBlock\n    name: CatchBlock\n    fullName: System.Linq.Expressions.CatchBlock\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Linq.Expressions.CatchBlock\n    name: CatchBlock\n    fullName: System.Linq.Expressions.CatchBlock\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock}\n  nameWithType: IEnumerable<CatchBlock>\n  nameWithType.vb: IEnumerable(Of CatchBlock)\n- uid: System.Linq.Expressions.TryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: TryExpression\n  fullName: System.Linq.Expressions.TryExpression\n  commentId: T:System.Linq.Expressions.TryExpression\n  nameWithType: TryExpression\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<MemberBinding>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.MemberBinding)\n  name.vb: IEnumerable(Of MemberBinding)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Linq.Expressions.MemberBinding\n    name: MemberBinding\n    fullName: System.Linq.Expressions.MemberBinding\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Linq.Expressions.MemberBinding\n    name: MemberBinding\n    fullName: System.Linq.Expressions.MemberBinding\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}\n  nameWithType: IEnumerable<MemberBinding>\n  nameWithType.vb: IEnumerable(Of MemberBinding)\n- uid: System.Linq.Expressions.MemberMemberBinding\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberMemberBinding\n  fullName: System.Linq.Expressions.MemberMemberBinding\n  commentId: T:System.Linq.Expressions.MemberMemberBinding\n  nameWithType: MemberMemberBinding\n- uid: System.Linq.Expressions.MemberBinding[]\n  name: MemberBinding[]\n  fullName: System.Linq.Expressions.MemberBinding[]\n  fullname.vb: System.Linq.Expressions.MemberBinding()\n  name.vb: MemberBinding()\n  spec.csharp:\n  - uid: System.Linq.Expressions.MemberBinding\n    name: MemberBinding\n    fullName: System.Linq.Expressions.MemberBinding\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Linq.Expressions.MemberBinding\n    name: MemberBinding\n    fullName: System.Linq.Expressions.MemberBinding\n  - name: ()\n    fullName: ()\n  nameWithType: MemberBinding[]\n  nameWithType.vb: MemberBinding()\n- uid: System.Linq.Expressions.MemberInitExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberInitExpression\n  fullName: System.Linq.Expressions.MemberInitExpression\n  commentId: T:System.Linq.Expressions.MemberInitExpression\n  nameWithType: MemberInitExpression\n- uid: System.Reflection.ConstructorInfo\n  parent: System.Reflection\n  isExternal: false\n  name: ConstructorInfo\n  fullName: System.Reflection.ConstructorInfo\n  commentId: T:System.Reflection.ConstructorInfo\n  nameWithType: ConstructorInfo\n- uid: System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<MemberInfo>\n  fullName: System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.MemberInfo)\n  name.vb: IEnumerable(Of MemberInfo)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Reflection.MemberInfo\n    name: MemberInfo\n    fullName: System.Reflection.MemberInfo\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Reflection.MemberInfo\n    name: MemberInfo\n    fullName: System.Reflection.MemberInfo\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}\n  nameWithType: IEnumerable<MemberInfo>\n  nameWithType.vb: IEnumerable(Of MemberInfo)\n- uid: System.Reflection.MemberInfo[]\n  name: MemberInfo[]\n  fullName: System.Reflection.MemberInfo[]\n  fullname.vb: System.Reflection.MemberInfo()\n  name.vb: MemberInfo()\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo\n    name: MemberInfo\n    fullName: System.Reflection.MemberInfo\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Reflection.MemberInfo\n    name: MemberInfo\n    fullName: System.Reflection.MemberInfo\n  - name: ()\n    fullName: ()\n  nameWithType: MemberInfo[]\n  nameWithType.vb: MemberInfo()\n- uid: System.Linq.Expressions.NewArrayExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: NewArrayExpression\n  fullName: System.Linq.Expressions.NewArrayExpression\n  commentId: T:System.Linq.Expressions.NewArrayExpression\n  nameWithType: NewArrayExpression\n- uid: System.Linq.Expressions.RuntimeVariablesExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: RuntimeVariablesExpression\n  fullName: System.Linq.Expressions.RuntimeVariablesExpression\n  commentId: T:System.Linq.Expressions.RuntimeVariablesExpression\n  nameWithType: RuntimeVariablesExpression\n- uid: System.Linq.Expressions.SwitchCase[]\n  name: SwitchCase[]\n  fullName: System.Linq.Expressions.SwitchCase[]\n  fullname.vb: System.Linq.Expressions.SwitchCase()\n  name.vb: SwitchCase()\n  spec.csharp:\n  - uid: System.Linq.Expressions.SwitchCase\n    name: SwitchCase\n    fullName: System.Linq.Expressions.SwitchCase\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Linq.Expressions.SwitchCase\n    name: SwitchCase\n    fullName: System.Linq.Expressions.SwitchCase\n  - name: ()\n    fullName: ()\n  nameWithType: SwitchCase[]\n  nameWithType.vb: SwitchCase()\n- uid: System.Linq.Expressions.SwitchExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: SwitchExpression\n  fullName: System.Linq.Expressions.SwitchExpression\n  commentId: T:System.Linq.Expressions.SwitchExpression\n  nameWithType: SwitchExpression\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<SwitchCase>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.SwitchCase)\n  name.vb: IEnumerable(Of SwitchCase)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Linq.Expressions.SwitchCase\n    name: SwitchCase\n    fullName: System.Linq.Expressions.SwitchCase\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Linq.Expressions.SwitchCase\n    name: SwitchCase\n    fullName: System.Linq.Expressions.SwitchCase\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}\n  nameWithType: IEnumerable<SwitchCase>\n  nameWithType.vb: IEnumerable(Of SwitchCase)\n- uid: System.Linq.Expressions.SwitchCase\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: SwitchCase\n  fullName: System.Linq.Expressions.SwitchCase\n  commentId: T:System.Linq.Expressions.SwitchCase\n  nameWithType: SwitchCase\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  fullName: System.Guid\n  commentId: T:System.Guid\n  nameWithType: Guid\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Linq.Expressions.CatchBlock[]\n  name: CatchBlock[]\n  fullName: System.Linq.Expressions.CatchBlock[]\n  fullname.vb: System.Linq.Expressions.CatchBlock()\n  name.vb: CatchBlock()\n  spec.csharp:\n  - uid: System.Linq.Expressions.CatchBlock\n    name: CatchBlock\n    fullName: System.Linq.Expressions.CatchBlock\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Linq.Expressions.CatchBlock\n    name: CatchBlock\n    fullName: System.Linq.Expressions.CatchBlock\n  - name: ()\n    fullName: ()\n  nameWithType: CatchBlock[]\n  nameWithType.vb: CatchBlock()\n- uid: System.Linq.Expressions.TypeBinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: TypeBinaryExpression\n  fullName: System.Linq.Expressions.TypeBinaryExpression\n  commentId: T:System.Linq.Expressions.TypeBinaryExpression\n  nameWithType: TypeBinaryExpression\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.Reflection.AmbiguousMatchException\n  isExternal: false\n  name: AmbiguousMatchException\n  fullName: System.Reflection.AmbiguousMatchException\n  nameWithType: AmbiguousMatchException\n  commentId: T:System.Reflection.AmbiguousMatchException\n"}