{"nodes":[{"pos":[1391,1414],"content":"ProcessThreadCollection","needQuote":true,"nodes":[{"content":"ProcessThreadCollection","pos":[0,23]}]},{"pos":[3301,3326],"content":"ProcessThreadCollection()","needQuote":true,"nodes":[{"content":"ProcessThreadCollection()","pos":[0,25]}]},{"pos":[4657,4697],"content":"ProcessThreadCollection(ProcessThread[])","needQuote":true,"nodes":[{"content":"ProcessThreadCollection(ProcessThread[])","pos":[0,40]}]},{"pos":[6702,6713],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The zero-based index value of the thread in the collection.","pos":[7503,7567],"source":"\\n<p>The zero-based index value of the thread in the collection."},{"content":"&lt;/p&gt;\\n","pos":[7568,7574],"source":" </p>\\n"},{"pos":[8406,8424],"content":"Add(ProcessThread)","needQuote":true,"nodes":[{"content":"Add(ProcessThread)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The thread to add to the collection.","pos":[9214,9255],"source":"\\n<p>The thread to add to the collection."},{"content":"&lt;/p&gt;\\n","pos":[9256,9262],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the thread in the collection.&lt;/p&gt;\\n","pos":[9321,9385],"source":"\\n<p>The zero-based index of the thread in the collection.</p>\\n"},{"pos":[9835,9858],"content":"Contains(ProcessThread)","needQuote":true,"nodes":[{"content":"Contains(ProcessThread)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the thread exists in the collection; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10930,11039],"source":"\\n<p>\\n<strong>true</strong> if the thread exists in the collection; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[11533,11563],"content":"CopyTo(ProcessThread[], Int32)","needQuote":true,"nodes":[{"content":"CopyTo(ProcessThread[], Int32)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The location at which to add the new instances.","pos":[12735,12787],"source":"\\n<p>The location at which to add the new instances."},{"content":"&lt;/p&gt;\\n","pos":[12788,12794],"source":" </p>\\n"},{"pos":[13484,13506],"content":"IndexOf(ProcessThread)","needQuote":true,"nodes":[{"content":"IndexOf(ProcessThread)","pos":[0,22]}]},{"pos":[15201,15229],"content":"Insert(Int32, ProcessThread)","needQuote":true,"nodes":[{"content":"Insert(Int32, ProcessThread)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The zero-based index indicating the location at which to insert the thread.","pos":[16064,16144],"source":"\\n<p>The zero-based index indicating the location at which to insert the thread."},{"content":"&lt;/p&gt;\\n","pos":[16145,16151],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The thread to insert into the collection.","pos":[16235,16281],"source":"\\n<p>The thread to insert into the collection."},{"content":"&lt;/p&gt;\\n","pos":[16282,16288],"source":" </p>\\n"},{"pos":[16742,16763],"content":"Remove(ProcessThread)","needQuote":true,"nodes":[{"content":"Remove(ProcessThread)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The thread to remove from the collection.","pos":[17553,17599],"source":"\\n<p>The thread to remove from the collection."},{"content":"&lt;/p&gt;\\n","pos":[17600,17606],"source":" </p>\\n"},{"pos":[17948,17953],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[19134,19160],"content":"ICollection.IsSynchronized","needQuote":true,"nodes":[{"content":"ICollection.IsSynchronized","pos":[0,26]}]},{"pos":[20635,20655],"content":"ICollection.SyncRoot","needQuote":true,"nodes":[{"content":"ICollection.SyncRoot","pos":[0,20]}]},{"pos":[22151,22183],"content":"ICollection.CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"ICollection.CopyTo(Array, Int32)","pos":[0,32]}]},{"pos":[23586,23601],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[24518,24536],"content":"System.Diagnostics","needQuote":true,"nodes":[{"content":"System.Diagnostics","pos":[0,18]}]},{"pos":[24703,24709],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24883,24894],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[25107,25118],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[25317,25327],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[25422,25430],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[25499,25500],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25527,25528],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25598,25606],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[25675,25676],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25703,25704],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25887,25901],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[26020,26026],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26093,26094],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26144,26150],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26210,26211],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26294,26300],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26367,26368],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26418,26424],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26484,26485],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26699,26721],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[26869,26875],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26942,26943],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26993,26999],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27060,27061]},{"pos":[27116,27122],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27182,27183],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27280,27286],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27353,27354],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27404,27410],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27471,27472]},{"pos":[27527,27533],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27593,27594],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27839,27870],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[28036,28051],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[28127,28128],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28178,28184],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28245,28246]},{"pos":[28301,28307],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28367,28368],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28474,28489],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[28565,28566],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28616,28622],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28683,28684]},{"pos":[28739,28745],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28805,28806],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29036,29049],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[29150,29161],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[29233,29234],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29261,29262],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29335,29346],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[29418,29419],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29446,29447],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29622,29631],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[29724,29731],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[29799,29800],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29827,29828],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29897,29904],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[29972,29973],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30000,30001],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30176,30193],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[30302,30317],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[30393,30394],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30421,30422],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30499,30514],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[30590,30591],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30618,30619],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30914,30927],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[31044,31055],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[31114,31115],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31142,31143],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31224,31235],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[31294,31295],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31322,31323],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31678,31690],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[31823,31833],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[31900,31901],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31928,31929],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32018,32028],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[32095,32096],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32123,32124],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32465,32480],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[32684,32697],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[32759,32760],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32787,32788],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32866,32882],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[32947,32948],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32975,32976],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33354,33371],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[33583,33598],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[33662,33663],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33690,33691],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33771,33789],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[33856,33857],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33884,33885],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34120,34126],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[34245,34263],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[34464,34488],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[34667,34678],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[34737,34738],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34805,34816],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[34893,34894],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35007,35018],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[35077,35078],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35145,35156],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[35233,35234],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35462,35471],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[35677,35700],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[35895,35905],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[35972,35973],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36040,36051],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[36128,36129],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36250,36260],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[36327,36328],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36395,36406],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[36483,36484],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36737,36755],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[36977,37003],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[37310,37323],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[37385,37386],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37453,37464],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[37541,37542],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37652,37668],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[37733,37734],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37801,37812],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[37889,37890],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38179,38189],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[38389,38417],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[38732,38747],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[38811,38812],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38879,38890],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[38967,38968],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39080,39098],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[39165,39166],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39233,39244],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[39321,39322],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39584,39595],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[39725,39740],"content":"ProcessThread[]","needQuote":true,"nodes":[{"content":"ProcessThread[]","pos":[0,15]}]},{"pos":[39932,39945],"content":"ProcessThread","needQuote":true,"nodes":[{"content":"ProcessThread","pos":[0,13]}]},{"content":"[]","pos":[40004,40006]},{"pos":[40090,40103],"content":"ProcessThread","needQuote":true,"nodes":[{"content":"ProcessThread","pos":[0,13]}]},{"pos":[40161,40163],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[40313,40318],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[40491,40504],"content":"ProcessThread","needQuote":true,"nodes":[{"content":"ProcessThread","pos":[0,13]}]},{"pos":[40695,40702],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[40897,40902],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[41160,41174],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[41453,41461],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[41746,41766],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"pos":[41944,41950],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[42013,42014],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42063,42068],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[42107,42108]},{"pos":[42162,42167],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[42226,42227],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42339,42345],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[42408,42409],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42458,42463],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[42502,42503]},{"pos":[42557,42562],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[42621,42622],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42833,42838],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[43035,43050],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[43189,43202],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[43272,43273],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43300,43301],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43393,43406],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[43476,43477],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43504,43505],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43721,43732],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]}],"content":"items:\n- uid: System.Diagnostics.ProcessThreadCollection\n  commentId: T:System.Diagnostics.ProcessThreadCollection\n  id: ProcessThreadCollection\n  parent: System.Diagnostics\n  children:\n  - System.Diagnostics.ProcessThreadCollection.#ctor\n  - System.Diagnostics.ProcessThreadCollection.#ctor(System.Diagnostics.ProcessThread[])\n  - System.Diagnostics.ProcessThreadCollection.Add(System.Diagnostics.ProcessThread)\n  - System.Diagnostics.ProcessThreadCollection.Contains(System.Diagnostics.ProcessThread)\n  - System.Diagnostics.ProcessThreadCollection.CopyTo(System.Diagnostics.ProcessThread[],System.Int32)\n  - System.Diagnostics.ProcessThreadCollection.Count\n  - System.Diagnostics.ProcessThreadCollection.GetEnumerator\n  - System.Diagnostics.ProcessThreadCollection.IndexOf(System.Diagnostics.ProcessThread)\n  - System.Diagnostics.ProcessThreadCollection.Insert(System.Int32,System.Diagnostics.ProcessThread)\n  - System.Diagnostics.ProcessThreadCollection.Item(System.Int32)\n  - System.Diagnostics.ProcessThreadCollection.Remove(System.Diagnostics.ProcessThread)\n  - System.Diagnostics.ProcessThreadCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Diagnostics.ProcessThreadCollection.System#Collections#ICollection#IsSynchronized\n  - System.Diagnostics.ProcessThreadCollection.System#Collections#ICollection#SyncRoot\n  langs:\n  - csharp\n  - vb\n  name: ProcessThreadCollection\n  fullName: System.Diagnostics.ProcessThreadCollection\n  type: Class\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ProcessThreadCollection\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n    startLine: 12\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Provides a strongly typed collection of <xref href=\\\"System.Diagnostics.ProcessThread\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  syntax:\n    content: 'public class ProcessThreadCollection : ICollection, IEnumerable'\n    content.vb: >-\n      Public Class ProcessThreadCollection\n          Implements ICollection, IEnumerable\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.ICollection\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: ProcessThreadCollection\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Diagnostics.ProcessThreadCollection.#ctor\n  commentId: M:System.Diagnostics.ProcessThreadCollection.#ctor\n  id: '#ctor'\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  - vb\n  name: ProcessThreadCollection()\n  fullName: System.Diagnostics.ProcessThreadCollection.ProcessThreadCollection()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n    startLine: 19\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Diagnostics.ProcessThreadCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, with no associated <xref href=\\\"System.Diagnostics.ProcessThread\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances.</p>\\n\"\n  syntax:\n    content: protected ProcessThreadCollection()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: ProcessThreadCollection.ProcessThreadCollection()\n- uid: System.Diagnostics.ProcessThreadCollection.#ctor(System.Diagnostics.ProcessThread[])\n  commentId: M:System.Diagnostics.ProcessThreadCollection.#ctor(System.Diagnostics.ProcessThread[])\n  id: '#ctor(System.Diagnostics.ProcessThread[])'\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  - vb\n  name: ProcessThreadCollection(ProcessThread[])\n  fullName: System.Diagnostics.ProcessThreadCollection.ProcessThreadCollection(System.Diagnostics.ProcessThread[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n    startLine: 26\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Diagnostics.ProcessThreadCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, using the specified array of <xref href=\\\"System.Diagnostics.ProcessThread\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances.</p>\\n\"\n  syntax:\n    content: public ProcessThreadCollection(ProcessThread[] processThreads)\n    content.vb: Public Sub New(processThreads As ProcessThread())\n    parameters:\n    - id: processThreads\n      type: System.Diagnostics.ProcessThread[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Diagnostics.ProcessThread\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances with which to initialize this <xref href=\\\"System.Diagnostics.ProcessThreadCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Diagnostics.ProcessThreadCollection.ProcessThreadCollection(System.Diagnostics.ProcessThread())\n  name.vb: ProcessThreadCollection(ProcessThread())\n  nameWithType: ProcessThreadCollection.ProcessThreadCollection(ProcessThread[])\n  nameWithType.vb: ProcessThreadCollection.ProcessThreadCollection(ProcessThread())\n- uid: System.Diagnostics.ProcessThreadCollection.Item(System.Int32)\n  commentId: P:System.Diagnostics.ProcessThreadCollection.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  - vb\n  name: Item[Int32]\n  fullName: System.Diagnostics.ProcessThreadCollection.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n    startLine: 69\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets an index for iterating over the set of process threads.</p>\\n\"\n  syntax:\n    content: public ProcessThread this[int index] { get; }\n    content.vb: Public ReadOnly Property Item(index As Integer) As ProcessThread\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index value of the thread in the collection. </p>\\n\"\n    return:\n      type: System.Diagnostics.ProcessThread\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.ProcessThread\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that indexes the threads in the collection.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Diagnostics.ProcessThreadCollection.Item(System.Int32)\n  name.vb: Item(Int32)\n  nameWithType: ProcessThreadCollection.Item[Int32]\n  nameWithType.vb: ProcessThreadCollection.Item(Int32)\n- uid: System.Diagnostics.ProcessThreadCollection.Add(System.Diagnostics.ProcessThread)\n  commentId: M:System.Diagnostics.ProcessThreadCollection.Add(System.Diagnostics.ProcessThread)\n  id: Add(System.Diagnostics.ProcessThread)\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  - vb\n  name: Add(ProcessThread)\n  fullName: System.Diagnostics.ProcessThreadCollection.Add(System.Diagnostics.ProcessThread)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n    startLine: 77\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Appends a process thread to the collection.</p>\\n\"\n  syntax:\n    content: public int Add(ProcessThread thread)\n    content.vb: Public Function Add(thread As ProcessThread) As Integer\n    parameters:\n    - id: thread\n      type: System.Diagnostics.ProcessThread\n      description: \"\\n<p>The thread to add to the collection. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the thread in the collection.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ProcessThreadCollection.Add(ProcessThread)\n- uid: System.Diagnostics.ProcessThreadCollection.Contains(System.Diagnostics.ProcessThread)\n  commentId: M:System.Diagnostics.ProcessThreadCollection.Contains(System.Diagnostics.ProcessThread)\n  id: Contains(System.Diagnostics.ProcessThread)\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  - vb\n  name: Contains(ProcessThread)\n  fullName: System.Diagnostics.ProcessThreadCollection.Contains(System.Diagnostics.ProcessThread)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Contains\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n    startLine: 101\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Determines whether the specified process thread exists in the collection.</p>\\n\"\n  syntax:\n    content: public bool Contains(ProcessThread thread)\n    content.vb: Public Function Contains(thread As ProcessThread) As Boolean\n    parameters:\n    - id: thread\n      type: System.Diagnostics.ProcessThread\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.ProcessThread\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance that indicates the thread to find in this collection. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the thread exists in the collection; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ProcessThreadCollection.Contains(ProcessThread)\n- uid: System.Diagnostics.ProcessThreadCollection.CopyTo(System.Diagnostics.ProcessThread[],System.Int32)\n  commentId: M:System.Diagnostics.ProcessThreadCollection.CopyTo(System.Diagnostics.ProcessThread[],System.Int32)\n  id: CopyTo(System.Diagnostics.ProcessThread[],System.Int32)\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(ProcessThread[], Int32)\n  fullName: System.Diagnostics.ProcessThreadCollection.CopyTo(System.Diagnostics.ProcessThread[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CopyTo\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n    startLine: 117\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Copies an array of <xref href=\\\"System.Diagnostics.ProcessThread\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances to the collection, at the specified index.</p>\\n\"\n  syntax:\n    content: public void CopyTo(ProcessThread[] array, int index)\n    content.vb: Public Sub CopyTo(array As ProcessThread(), index As Integer)\n    parameters:\n    - id: array\n      type: System.Diagnostics.ProcessThread[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Diagnostics.ProcessThread\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances to add to the collection. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The location at which to add the new instances. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Diagnostics.ProcessThreadCollection.CopyTo(System.Diagnostics.ProcessThread(), System.Int32)\n  name.vb: CopyTo(ProcessThread(), Int32)\n  nameWithType: ProcessThreadCollection.CopyTo(ProcessThread[], Int32)\n  nameWithType.vb: ProcessThreadCollection.CopyTo(ProcessThread(), Int32)\n- uid: System.Diagnostics.ProcessThreadCollection.IndexOf(System.Diagnostics.ProcessThread)\n  commentId: M:System.Diagnostics.ProcessThreadCollection.IndexOf(System.Diagnostics.ProcessThread)\n  id: IndexOf(System.Diagnostics.ProcessThread)\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(ProcessThread)\n  fullName: System.Diagnostics.ProcessThreadCollection.IndexOf(System.Diagnostics.ProcessThread)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IndexOf\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n    startLine: 93\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Provides the location of a specified thread within the collection.</p>\\n\"\n  syntax:\n    content: public int IndexOf(ProcessThread thread)\n    content.vb: Public Function IndexOf(thread As ProcessThread) As Integer\n    parameters:\n    - id: thread\n      type: System.Diagnostics.ProcessThread\n      description: \"\\n<p>The <xref href=\\\"System.Diagnostics.ProcessThread\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose index is retrieved. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index that defines the location of the thread within the <xref href=\\\"System.Diagnostics.ProcessThreadCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ProcessThreadCollection.IndexOf(ProcessThread)\n- uid: System.Diagnostics.ProcessThreadCollection.Insert(System.Int32,System.Diagnostics.ProcessThread)\n  commentId: M:System.Diagnostics.ProcessThreadCollection.Insert(System.Int32,System.Diagnostics.ProcessThread)\n  id: Insert(System.Int32,System.Diagnostics.ProcessThread)\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, ProcessThread)\n  fullName: System.Diagnostics.ProcessThreadCollection.Insert(System.Int32, System.Diagnostics.ProcessThread)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Insert\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n    startLine: 85\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Inserts a process thread at the specified location in the collection.</p>\\n\"\n  syntax:\n    content: public void Insert(int index, ProcessThread thread)\n    content.vb: Public Sub Insert(index As Integer, thread As ProcessThread)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index indicating the location at which to insert the thread. </p>\\n\"\n    - id: thread\n      type: System.Diagnostics.ProcessThread\n      description: \"\\n<p>The thread to insert into the collection. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ProcessThreadCollection.Insert(Int32, ProcessThread)\n- uid: System.Diagnostics.ProcessThreadCollection.Remove(System.Diagnostics.ProcessThread)\n  commentId: M:System.Diagnostics.ProcessThreadCollection.Remove(System.Diagnostics.ProcessThread)\n  id: Remove(System.Diagnostics.ProcessThread)\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  - vb\n  name: Remove(ProcessThread)\n  fullName: System.Diagnostics.ProcessThreadCollection.Remove(System.Diagnostics.ProcessThread)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Remove\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n    startLine: 109\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Deletes a process thread from the collection.</p>\\n\"\n  syntax:\n    content: public void Remove(ProcessThread thread)\n    content.vb: Public Sub Remove(thread As ProcessThread)\n    parameters:\n    - id: thread\n      type: System.Diagnostics.ProcessThread\n      description: \"\\n<p>The thread to remove from the collection. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ProcessThreadCollection.Remove(ProcessThread)\n- uid: System.Diagnostics.ProcessThreadCollection.Count\n  commentId: P:System.Diagnostics.ProcessThreadCollection.Count\n  id: Count\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Diagnostics.ProcessThreadCollection.Count\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n    startLine: 41\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  syntax:\n    content: public virtual int Count { get; }\n    content.vb: Public Overridable ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n  implements:\n  - System.Collections.ICollection.Count\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ProcessThreadCollection.Count\n- uid: System.Diagnostics.ProcessThreadCollection.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.Diagnostics.ProcessThreadCollection.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  - vb\n  name: ICollection.IsSynchronized\n  fullName: System.Diagnostics.ProcessThreadCollection.System.Collections.ICollection.IsSynchronized\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.IsSynchronized\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n    startLine: 46\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  syntax:\n    content: bool ICollection.IsSynchronized { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized\n    parameters: []\n    return:\n      type: System.Boolean\n  implements:\n  - System.Collections.ICollection.IsSynchronized\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.IsSynchronized\n  nameWithType: ProcessThreadCollection.ICollection.IsSynchronized\n  nameWithType.vb: ProcessThreadCollection.System.Collections.ICollection.IsSynchronized\n- uid: System.Diagnostics.ProcessThreadCollection.System#Collections#ICollection#SyncRoot\n  commentId: P:System.Diagnostics.ProcessThreadCollection.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  - vb\n  name: ICollection.SyncRoot\n  fullName: System.Diagnostics.ProcessThreadCollection.System.Collections.ICollection.SyncRoot\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.SyncRoot\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n    startLine: 51\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  syntax:\n    content: object ICollection.SyncRoot { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot\n    parameters: []\n    return:\n      type: System.Object\n  implements:\n  - System.Collections.ICollection.SyncRoot\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.SyncRoot\n  nameWithType: ProcessThreadCollection.ICollection.SyncRoot\n  nameWithType.vb: ProcessThreadCollection.System.Collections.ICollection.SyncRoot\n- uid: System.Diagnostics.ProcessThreadCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  commentId: M:System.Diagnostics.ProcessThreadCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  - vb\n  name: ICollection.CopyTo(Array, Int32)\n  fullName: System.Diagnostics.ProcessThreadCollection.System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.CopyTo\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n    startLine: 56\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  syntax:\n    content: void ICollection.CopyTo(Array array, int index)\n    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo\n    parameters:\n    - id: array\n      type: System.Array\n    - id: index\n      type: System.Int32\n  implements:\n  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)\n  nameWithType: ProcessThreadCollection.ICollection.CopyTo(Array, Int32)\n  nameWithType.vb: ProcessThreadCollection.System.Collections.ICollection.CopyTo(Array, Int32)\n- uid: System.Diagnostics.ProcessThreadCollection.GetEnumerator\n  commentId: M:System.Diagnostics.ProcessThreadCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.Diagnostics.ProcessThreadCollection\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Diagnostics.ProcessThreadCollection.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEnumerator\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThreadCollection.cs\n    startLine: 61\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  syntax:\n    content: public virtual IEnumerator GetEnumerator()\n    content.vb: Public Overridable Function GetEnumerator As IEnumerator\n    return:\n      type: System.Collections.IEnumerator\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ProcessThreadCollection.GetEnumerator()\nreferences:\n- uid: System.Diagnostics\n  isExternal: false\n  name: System.Diagnostics\n  fullName: System.Diagnostics\n  nameWithType: System.Diagnostics\n  commentId: N:System.Diagnostics\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  nameWithType: ICollection\n  commentId: T:System.Collections.ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable()\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel()\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  nameWithType: Queryable\n  commentId: T:System.Linq.Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  nameWithType: Enumerable\n  commentId: T:System.Linq.Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  nameWithType: System.Linq\n  commentId: N:System.Linq\n- uid: System.Diagnostics.ProcessThread[]\n  name: ProcessThread[]\n  fullName: System.Diagnostics.ProcessThread[]\n  fullname.vb: System.Diagnostics.ProcessThread()\n  name.vb: ProcessThread()\n  spec.csharp:\n  - uid: System.Diagnostics.ProcessThread\n    name: ProcessThread\n    fullName: System.Diagnostics.ProcessThread\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Diagnostics.ProcessThread\n    name: ProcessThread\n    fullName: System.Diagnostics.ProcessThread\n  - name: ()\n    fullName: ()\n  nameWithType: ProcessThread[]\n  nameWithType.vb: ProcessThread()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Diagnostics.ProcessThread\n  parent: System.Diagnostics\n  isExternal: false\n  name: ProcessThread\n  fullName: System.Diagnostics.ProcessThread\n  nameWithType: ProcessThread\n  commentId: T:System.Diagnostics.ProcessThread\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.ICollection.Count\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: Count\n  fullName: System.Collections.ICollection.Count\n  nameWithType: ICollection.Count\n  commentId: P:System.Collections.ICollection.Count\n- uid: System.Collections.ICollection.IsSynchronized\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Collections.ICollection.IsSynchronized\n  nameWithType: ICollection.IsSynchronized\n  commentId: P:System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.ICollection.SyncRoot\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Collections.ICollection.SyncRoot\n  nameWithType: ICollection.SyncRoot\n  commentId: P:System.Collections.ICollection.SyncRoot\n- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ICollection\n  isExternal: true\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  spec.csharp:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection.CopyTo(Array, Int32)\n  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  nameWithType: Array\n  commentId: T:System.Array\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable.GetEnumerator()\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n"}