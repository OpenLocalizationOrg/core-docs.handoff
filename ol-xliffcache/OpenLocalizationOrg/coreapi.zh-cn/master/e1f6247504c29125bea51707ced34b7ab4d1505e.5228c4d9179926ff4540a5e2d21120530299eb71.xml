{"nodes":[{"pos":[904,913],"content":"ObjectAce","needQuote":true,"nodes":[{"content":"ObjectAce","pos":[0,9]}]},{"pos":[4179,4284],"content":"ObjectAce(AceFlags, AceQualifier, Int32, SecurityIdentifier, ObjectAceFlags, Guid, Guid, Boolean, Byte[])","needQuote":true,"nodes":[{"content":"ObjectAce(AceFlags, AceQualifier, Int32, SecurityIdentifier, ObjectAceFlags, Guid, Guid, Boolean, Byte[])","pos":[0,105]}]},{"content":"\\n&lt;p&gt;The inheritance, inheritance propagation, and auditing conditions for the new Access Control Entry (ACE).&lt;/p&gt;\\n","pos":[5704,5820],"source":"\\n<p>The inheritance, inheritance propagation, and auditing conditions for the new Access Control Entry (ACE).</p>\\n"},{"content":"\\n&lt;p&gt;The use of the new ACE.&lt;/p&gt;\\n","pos":[5917,5951],"source":"\\n<p>The use of the new ACE.</p>\\n"},{"content":"\\n&lt;p&gt;The access mask for the ACE.&lt;/p&gt;\\n","pos":[6019,6058],"source":"\\n<p>The access mask for the ACE.</p>\\n"},{"content":"\\n&lt;p&gt;Whether the &lt;em&gt;type&lt;/em&gt; and &lt;em&gt;inheritedType&lt;/em&gt; parameters contain valid object GUIDs.&lt;/p&gt;\\n","pos":[6394,6496],"source":"\\n<p>Whether the <em>type</em> and <em>inheritedType</em> parameters contain valid object GUIDs.</p>\\n"},{"content":"\\n&lt;p&gt;A GUID that identifies the object type to which the new ACE applies.&lt;/p&gt;\\n","pos":[6557,6636],"source":"\\n<p>A GUID that identifies the object type to which the new ACE applies.</p>\\n"},{"content":"\\n&lt;p&gt;A GUID that identifies the object type that can inherit the new ACE.&lt;/p&gt;\\n","pos":[6706,6785],"source":"\\n<p>A GUID that identifies the object type that can inherit the new ACE.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the new ACE is a callback type ACE.&lt;/p&gt;\\n","pos":[6855,6928],"source":"\\n<p>\\n<strong>true</strong> if the new ACE is a callback type ACE.</p>\\n"},{"pos":[8713,8725],"content":"BinaryLength","needQuote":true,"nodes":[{"content":"BinaryLength","pos":[0,12]}]},{"pos":[10507,10529],"content":"InheritedObjectAceType","needQuote":true,"nodes":[{"content":"InheritedObjectAceType","pos":[0,22]}]},{"pos":[12049,12063],"content":"ObjectAceFlags","needQuote":true,"nodes":[{"content":"ObjectAceFlags","pos":[0,14]}]},{"pos":[13696,13709],"content":"ObjectAceType","needQuote":true,"nodes":[{"content":"ObjectAceType","pos":[0,13]}]},{"pos":[15169,15197],"content":"GetBinaryForm(Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBinaryForm(Byte[], Int32)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The offset at which to start marshaling.&lt;/p&gt;\\n","pos":[16419,16470],"source":"\\n<p>The offset at which to start marshaling.</p>\\n"},{"pos":[17531,17555],"content":"MaxOpaqueLength(Boolean)","needQuote":true,"nodes":[{"content":"MaxOpaqueLength(Boolean)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The maximum allowed length, in bytes, of an opaque data BLOB for callback Access Control Entries (ACEs).&lt;/p&gt;\\n","pos":[18634,18749],"source":"\\n<p>The maximum allowed length, in bytes, of an opaque data BLOB for callback Access Control Entries (ACEs).</p>\\n"},{"pos":[18959,18988],"content":"System.Security.AccessControl","needQuote":true,"nodes":[{"content":"System.Security.AccessControl","pos":[0,29]}]},{"pos":[19188,19194],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19389,19399],"content":"GenericAce","needQuote":true,"nodes":[{"content":"GenericAce","pos":[0,10]}]},{"pos":[19650,19658],"content":"KnownAce","needQuote":true,"nodes":[{"content":"KnownAce","pos":[0,8]}]},{"pos":[19907,19919],"content":"QualifiedAce","needQuote":true,"nodes":[{"content":"QualifiedAce","pos":[0,12]}]},{"pos":[20206,20218],"content":"AceQualifier","needQuote":true,"nodes":[{"content":"AceQualifier","pos":[0,12]}]},{"pos":[20542,20552],"content":"IsCallback","needQuote":true,"nodes":[{"content":"IsCallback","pos":[0,10]}]},{"pos":[20872,20884],"content":"OpaqueLength","needQuote":true,"nodes":[{"content":"OpaqueLength","pos":[0,12]}]},{"pos":[21207,21218],"content":"GetOpaque()","needQuote":true,"nodes":[{"content":"GetOpaque()","pos":[0,11]}]},{"pos":[21373,21382],"content":"GetOpaque","needQuote":true,"nodes":[{"content":"GetOpaque","pos":[0,9]}]},{"pos":[21460,21461],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21488,21489],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21589,21598],"content":"GetOpaque","needQuote":true,"nodes":[{"content":"GetOpaque","pos":[0,9]}]},{"pos":[21676,21677],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21704,21705],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21986,22003],"content":"SetOpaque(Byte[])","needQuote":true,"nodes":[{"content":"SetOpaque(Byte[])","pos":[0,17]}]},{"pos":[22298,22307],"content":"SetOpaque","needQuote":true,"nodes":[{"content":"SetOpaque","pos":[0,9]}]},{"pos":[22385,22386],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22434,22438],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[22497,22499]},{"pos":[22530,22531],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22646,22655],"content":"SetOpaque","needQuote":true,"nodes":[{"content":"SetOpaque","pos":[0,9]}]},{"pos":[22733,22734],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22782,22786],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[22844,22846],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[22874,22875],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23206,23216],"content":"AccessMask","needQuote":true,"nodes":[{"content":"AccessMask","pos":[0,10]}]},{"pos":[23522,23540],"content":"SecurityIdentifier","needQuote":true,"nodes":[{"content":"SecurityIdentifier","pos":[0,18]}]},{"pos":[23864,23872],"content":"AceFlags","needQuote":true,"nodes":[{"content":"AceFlags","pos":[0,8]}]},{"pos":[24171,24178],"content":"AceType","needQuote":true,"nodes":[{"content":"AceType","pos":[0,7]}]},{"pos":[24477,24487],"content":"AuditFlags","needQuote":true,"nodes":[{"content":"AuditFlags","pos":[0,10]}]},{"pos":[24801,24817],"content":"InheritanceFlags","needQuote":true,"nodes":[{"content":"InheritanceFlags","pos":[0,16]}]},{"pos":[25144,25155],"content":"IsInherited","needQuote":true,"nodes":[{"content":"IsInherited","pos":[0,11]}]},{"pos":[25472,25488],"content":"PropagationFlags","needQuote":true,"nodes":[{"content":"PropagationFlags","pos":[0,16]}]},{"pos":[25808,25814],"content":"Copy()","needQuote":true,"nodes":[{"content":"Copy()","pos":[0,6]}]},{"pos":[25955,25959],"content":"Copy","needQuote":true,"nodes":[{"content":"Copy","pos":[0,4]}]},{"pos":[26030,26031],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26058,26059],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26152,26156],"content":"Copy","needQuote":true,"nodes":[{"content":"Copy","pos":[0,4]}]},{"pos":[26227,26228],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26255,26256],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26543,26578],"content":"CreateFromBinaryForm(Byte[], Int32)","needQuote":true,"nodes":[{"content":"CreateFromBinaryForm(Byte[], Int32)","pos":[0,35]}]},{"pos":[26959,26979],"content":"CreateFromBinaryForm","needQuote":true,"nodes":[{"content":"CreateFromBinaryForm","pos":[0,20]}]},{"pos":[27066,27067],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27115,27119],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[27178,27180]},{"content":",","pos":[27212,27213]},{"pos":[27267,27272],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[27331,27332],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27469,27489],"content":"CreateFromBinaryForm","needQuote":true,"nodes":[{"content":"CreateFromBinaryForm","pos":[0,20]}]},{"pos":[27576,27577],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27625,27629],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[27687,27689],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[27718,27719]},{"pos":[27773,27778],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[27837,27838],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28237,28251],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[28424,28430],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28503,28504],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28554,28560],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28620,28621],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28731,28737],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28810,28811],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28861,28867],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28927,28928],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29204,29217],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[29372,29383],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[29461,29462],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29489,29490],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29590,29601],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[29679,29680],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29707,29708],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29915,29925],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[30020,30028],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[30097,30098],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30125,30126],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30196,30204],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[30273,30274],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30301,30302],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30499,30521],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[30669,30675],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[30742,30743],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30793,30799],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30860,30861]},{"pos":[30916,30922],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30982,30983],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31080,31086],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[31153,31154],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31204,31210],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[31271,31272]},{"pos":[31327,31333],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31393,31394],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31639,31670],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[31836,31851],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[31927,31928],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31978,31984],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[32045,32046]},{"pos":[32101,32107],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32167,32168],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32274,32289],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[32365,32366],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32416,32422],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[32483,32484]},{"pos":[32539,32545],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32605,32606],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32832,32841],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[32934,32941],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[33009,33010],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33037,33038],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33107,33114],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[33182,33183],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33210,33211],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33386,33403],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[33512,33527],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[33603,33604],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33631,33632],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33709,33724],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[33800,33801],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33828,33829],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33974,33980],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[34159,34167],"content":"AceFlags","needQuote":true,"nodes":[{"content":"AceFlags","pos":[0,8]}]},{"pos":[34416,34428],"content":"AceQualifier","needQuote":true,"nodes":[{"content":"AceQualifier","pos":[0,12]}]},{"pos":[34636,34641],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[34833,34851],"content":"SecurityIdentifier","needQuote":true,"nodes":[{"content":"SecurityIdentifier","pos":[0,18]}]},{"pos":[35124,35138],"content":"ObjectAceFlags","needQuote":true,"nodes":[{"content":"ObjectAceFlags","pos":[0,14]}]},{"pos":[35351,35355],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[35495,35502],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[35613,35619],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[35739,35743],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[35802,35804]},{"pos":[35867,35871],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[35929,35931],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[36059,36084],"content":"System.Security.Principal","needQuote":true,"nodes":[{"content":"System.Security.Principal","pos":[0,25]}]},{"pos":[36346,36358],"content":"BinaryLength","needQuote":true,"nodes":[{"content":"BinaryLength","pos":[0,12]}]},{"pos":[36702,36730],"content":"GetBinaryForm(Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBinaryForm(Byte[], Int32)","pos":[0,28]}]},{"pos":[37083,37096],"content":"GetBinaryForm","needQuote":true,"nodes":[{"content":"GetBinaryForm","pos":[0,13]}]},{"pos":[37176,37177],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37225,37229],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[37288,37290]},{"content":",","pos":[37322,37323]},{"pos":[37377,37382],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[37441,37442],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37572,37585],"content":"GetBinaryForm","needQuote":true,"nodes":[{"content":"GetBinaryForm","pos":[0,13]}]},{"pos":[37665,37666],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37714,37718],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[37776,37778],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[37807,37808]},{"pos":[37862,37867],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[37926,37927],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38227,38254],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Security.AccessControl.ObjectAce\n  commentId: T:System.Security.AccessControl.ObjectAce\n  id: ObjectAce\n  parent: System.Security.AccessControl\n  children:\n  - System.Security.AccessControl.ObjectAce.#ctor(System.Security.AccessControl.AceFlags,System.Security.AccessControl.AceQualifier,System.Int32,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid,System.Boolean,System.Byte[])\n  - System.Security.AccessControl.ObjectAce.BinaryLength\n  - System.Security.AccessControl.ObjectAce.GetBinaryForm(System.Byte[],System.Int32)\n  - System.Security.AccessControl.ObjectAce.InheritedObjectAceType\n  - System.Security.AccessControl.ObjectAce.MaxOpaqueLength(System.Boolean)\n  - System.Security.AccessControl.ObjectAce.ObjectAceFlags\n  - System.Security.AccessControl.ObjectAce.ObjectAceType\n  langs:\n  - csharp\n  - vb\n  name: ObjectAce\n  fullName: System.Security.AccessControl.ObjectAce\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ObjectAce\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 344\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Controls access to Directory Services objects. This class represents an Access Control Entry (ACE) associated with a directory object.</p>\\n\"\n  syntax:\n    content: 'public sealed class ObjectAce : QualifiedAce'\n    content.vb: >-\n      Public NotInheritable Class ObjectAce\n          Inherits QualifiedAce\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.GenericAce\n  - System.Security.AccessControl.KnownAce\n  - System.Security.AccessControl.QualifiedAce\n  inheritedMembers:\n  - System.Security.AccessControl.QualifiedAce.AceQualifier\n  - System.Security.AccessControl.QualifiedAce.IsCallback\n  - System.Security.AccessControl.QualifiedAce.OpaqueLength\n  - System.Security.AccessControl.QualifiedAce.GetOpaque\n  - System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])\n  - System.Security.AccessControl.KnownAce.AccessMask\n  - System.Security.AccessControl.KnownAce.SecurityIdentifier\n  - System.Security.AccessControl.GenericAce.AceFlags\n  - System.Security.AccessControl.GenericAce.AceType\n  - System.Security.AccessControl.GenericAce.AuditFlags\n  - System.Security.AccessControl.GenericAce.InheritanceFlags\n  - System.Security.AccessControl.GenericAce.IsInherited\n  - System.Security.AccessControl.GenericAce.PropagationFlags\n  - System.Security.AccessControl.GenericAce.Copy\n  - System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n  - System.Security.AccessControl.GenericAce.Equals(System.Object)\n  - System.Security.AccessControl.GenericAce.GetHashCode\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: ObjectAce\n- uid: System.Security.AccessControl.ObjectAce.#ctor(System.Security.AccessControl.AceFlags,System.Security.AccessControl.AceQualifier,System.Int32,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid,System.Boolean,System.Byte[])\n  commentId: M:System.Security.AccessControl.ObjectAce.#ctor(System.Security.AccessControl.AceFlags,System.Security.AccessControl.AceQualifier,System.Int32,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid,System.Boolean,System.Byte[])\n  id: '#ctor(System.Security.AccessControl.AceFlags,System.Security.AccessControl.AceQualifier,System.Int32,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid,System.Boolean,System.Byte[])'\n  parent: System.Security.AccessControl.ObjectAce\n  langs:\n  - csharp\n  - vb\n  name: ObjectAce(AceFlags, AceQualifier, Int32, SecurityIdentifier, ObjectAceFlags, Guid, Guid, Boolean, Byte[])\n  fullName: System.Security.AccessControl.ObjectAce.ObjectAce(System.Security.AccessControl.AceFlags, System.Security.AccessControl.AceQualifier, System.Int32, System.Security.Principal.SecurityIdentifier, System.Security.AccessControl.ObjectAceFlags, System.Guid, System.Guid, System.Boolean, System.Byte[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 346\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initiates a new instance of the <xref href=\\\"System.Security.AccessControl.ObjectAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public ObjectAce(AceFlags aceFlags, AceQualifier qualifier, int accessMask, SecurityIdentifier sid, ObjectAceFlags flags, Guid type, Guid inheritedType, bool isCallback, byte[] opaque)\n    content.vb: Public Sub New(aceFlags As AceFlags, qualifier As AceQualifier, accessMask As Integer, sid As SecurityIdentifier, flags As ObjectAceFlags, type As Guid, inheritedType As Guid, isCallback As Boolean, opaque As Byte())\n    parameters:\n    - id: aceFlags\n      type: System.Security.AccessControl.AceFlags\n      description: \"\\n<p>The inheritance, inheritance propagation, and auditing conditions for the new Access Control Entry (ACE).</p>\\n\"\n    - id: qualifier\n      type: System.Security.AccessControl.AceQualifier\n      description: \"\\n<p>The use of the new ACE.</p>\\n\"\n    - id: accessMask\n      type: System.Int32\n      description: \"\\n<p>The access mask for the ACE.</p>\\n\"\n    - id: sid\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with the new ACE.</p>\\n\"\n    - id: flags\n      type: System.Security.AccessControl.ObjectAceFlags\n      description: \"\\n<p>Whether the <em>type</em> and <em>inheritedType</em> parameters contain valid object GUIDs.</p>\\n\"\n    - id: type\n      type: System.Guid\n      description: \"\\n<p>A GUID that identifies the object type to which the new ACE applies.</p>\\n\"\n    - id: inheritedType\n      type: System.Guid\n      description: \"\\n<p>A GUID that identifies the object type that can inherit the new ACE.</p>\\n\"\n    - id: isCallback\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the new ACE is a callback type ACE.</p>\\n\"\n    - id: opaque\n      type: System.Byte[]\n      description: \"\\n<p>Opaque data associated with the new ACE. This is allowed only for callback ACE types. The length of this array must not be greater than the return value of the <xref href=\\\"System.Security.AccessControl.ObjectAce.MaxOpaqueLength(System.Boolean)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The qualifier parameter contains an invalid value or the length of the value of the opaque parameter is greater than the return value of the <xref href=\\\"System.Security.AccessControl.ObjectAce.MaxOpaqueLength(System.Boolean)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.AccessControl.ObjectAce.ObjectAce(System.Security.AccessControl.AceFlags, System.Security.AccessControl.AceQualifier, System.Int32, System.Security.Principal.SecurityIdentifier, System.Security.AccessControl.ObjectAceFlags, System.Guid, System.Guid, System.Boolean, System.Byte())\n  name.vb: ObjectAce(AceFlags, AceQualifier, Int32, SecurityIdentifier, ObjectAceFlags, Guid, Guid, Boolean, Byte())\n  nameWithType: ObjectAce.ObjectAce(AceFlags, AceQualifier, Int32, SecurityIdentifier, ObjectAceFlags, Guid, Guid, Boolean, Byte[])\n  nameWithType.vb: ObjectAce.ObjectAce(AceFlags, AceQualifier, Int32, SecurityIdentifier, ObjectAceFlags, Guid, Guid, Boolean, Byte())\n- uid: System.Security.AccessControl.ObjectAce.BinaryLength\n  commentId: P:System.Security.AccessControl.ObjectAce.BinaryLength\n  id: BinaryLength\n  parent: System.Security.AccessControl.ObjectAce\n  langs:\n  - csharp\n  - vb\n  name: BinaryLength\n  fullName: System.Security.AccessControl.ObjectAce.BinaryLength\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BinaryLength\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 347\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the length, in bytes, of the binary representation of the current <xref href=\\\"System.Security.AccessControl.ObjectAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. This length should be used before marshaling the ACL into a binary array with the <xref href=\\\"System.Security.AccessControl.ObjectAce.GetBinaryForm(System.Byte[],System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: public override int BinaryLength { get; }\n    content.vb: Public Overrides ReadOnly Property BinaryLength As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The length, in bytes, of the binary representation of the current <xref href=\\\"System.Security.AccessControl.ObjectAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Security.AccessControl.GenericAce.BinaryLength\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: ObjectAce.BinaryLength\n- uid: System.Security.AccessControl.ObjectAce.InheritedObjectAceType\n  commentId: P:System.Security.AccessControl.ObjectAce.InheritedObjectAceType\n  id: InheritedObjectAceType\n  parent: System.Security.AccessControl.ObjectAce\n  langs:\n  - csharp\n  - vb\n  name: InheritedObjectAceType\n  fullName: System.Security.AccessControl.ObjectAce.InheritedObjectAceType\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InheritedObjectAceType\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 348\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets or sets the GUID of the object type that can inherit the Access Control Entry (ACE) that this <xref href=\\\"System.Security.AccessControl.ObjectAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object represents.</p>\\n\"\n  syntax:\n    content: public Guid InheritedObjectAceType { get; set; }\n    content.vb: Public Property InheritedObjectAceType As Guid\n    parameters: []\n    return:\n      type: System.Guid\n      description: \"\\n<p>The GUID of the object type that can inherit the Access Control Entry (ACE) that this <xref href=\\\"System.Security.AccessControl.ObjectAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object represents.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: ObjectAce.InheritedObjectAceType\n- uid: System.Security.AccessControl.ObjectAce.ObjectAceFlags\n  commentId: P:System.Security.AccessControl.ObjectAce.ObjectAceFlags\n  id: ObjectAceFlags\n  parent: System.Security.AccessControl.ObjectAce\n  langs:\n  - csharp\n  - vb\n  name: ObjectAceFlags\n  fullName: System.Security.AccessControl.ObjectAce.ObjectAceFlags\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ObjectAceFlags\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 349\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets or sets flags that specify whether the <xref href=\\\"System.Security.AccessControl.ObjectAce.ObjectAceType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Security.AccessControl.ObjectAce.InheritedObjectAceType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties contain values that identify valid object types.</p>\\n\"\n  syntax:\n    content: public ObjectAceFlags ObjectAceFlags { get; set; }\n    content.vb: Public Property ObjectAceFlags As ObjectAceFlags\n    parameters: []\n    return:\n      type: System.Security.AccessControl.ObjectAceFlags\n      description: \"\\n<p>On or more members of the <xref href=\\\"System.Security.AccessControl.ObjectAceFlags\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration combined with a logical OR operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: ObjectAce.ObjectAceFlags\n- uid: System.Security.AccessControl.ObjectAce.ObjectAceType\n  commentId: P:System.Security.AccessControl.ObjectAce.ObjectAceType\n  id: ObjectAceType\n  parent: System.Security.AccessControl.ObjectAce\n  langs:\n  - csharp\n  - vb\n  name: ObjectAceType\n  fullName: System.Security.AccessControl.ObjectAce.ObjectAceType\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ObjectAceType\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 350\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets or sets the GUID of the object type associated with this <xref href=\\\"System.Security.AccessControl.ObjectAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public Guid ObjectAceType { get; set; }\n    content.vb: Public Property ObjectAceType As Guid\n    parameters: []\n    return:\n      type: System.Guid\n      description: \"\\n<p>The GUID of the object type associated with this <xref href=\\\"System.Security.AccessControl.ObjectAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: ObjectAce.ObjectAceType\n- uid: System.Security.AccessControl.ObjectAce.GetBinaryForm(System.Byte[],System.Int32)\n  commentId: M:System.Security.AccessControl.ObjectAce.GetBinaryForm(System.Byte[],System.Int32)\n  id: GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.ObjectAce\n  langs:\n  - csharp\n  - vb\n  name: GetBinaryForm(Byte[], Int32)\n  fullName: System.Security.AccessControl.ObjectAce.GetBinaryForm(System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetBinaryForm\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 351\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Marshals the contents of the <xref href=\\\"System.Security.AccessControl.ObjectAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object into the specified byte array beginning at the specified offset.</p>\\n\"\n  syntax:\n    content: public override void GetBinaryForm(byte[] binaryForm, int offset)\n    content.vb: Public Overrides Sub GetBinaryForm(binaryForm As Byte(), offset As Integer)\n    parameters:\n    - id: binaryForm\n      type: System.Byte[]\n      description: \"\\n<p>The byte array into which the contents of the <xref href=\\\"System.Security.AccessControl.ObjectAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is marshaled.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset at which to start marshaling.</p>\\n\"\n  overridden: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is negative or too high to allow the entire <xref href=\\\"System.Security.AccessControl.ObjectAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be copied into <em>array</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Security.AccessControl.ObjectAce.GetBinaryForm(System.Byte(), System.Int32)\n  name.vb: GetBinaryForm(Byte(), Int32)\n  nameWithType: ObjectAce.GetBinaryForm(Byte[], Int32)\n  nameWithType.vb: ObjectAce.GetBinaryForm(Byte(), Int32)\n- uid: System.Security.AccessControl.ObjectAce.MaxOpaqueLength(System.Boolean)\n  commentId: M:System.Security.AccessControl.ObjectAce.MaxOpaqueLength(System.Boolean)\n  id: MaxOpaqueLength(System.Boolean)\n  parent: System.Security.AccessControl.ObjectAce\n  langs:\n  - csharp\n  - vb\n  name: MaxOpaqueLength(Boolean)\n  fullName: System.Security.AccessControl.ObjectAce.MaxOpaqueLength(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MaxOpaqueLength\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 352\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Returns the maximum allowed length, in bytes, of an opaque data BLOB for callback Access Control Entries (ACEs).</p>\\n\"\n  syntax:\n    content: public static int MaxOpaqueLength(bool isCallback)\n    content.vb: Public Shared Function MaxOpaqueLength(isCallback As Boolean) As Integer\n    parameters:\n    - id: isCallback\n      type: System.Boolean\n      description: \"\\n<p>True if the <xref href=\\\"System.Security.AccessControl.ObjectAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is a callback ACE type.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The maximum allowed length, in bytes, of an opaque data BLOB for callback Access Control Entries (ACEs).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ObjectAce.MaxOpaqueLength(Boolean)\nreferences:\n- uid: System.Security.AccessControl\n  isExternal: false\n  name: System.Security.AccessControl\n  fullName: System.Security.AccessControl\n  commentId: N:System.Security.AccessControl\n  nameWithType: System.Security.AccessControl\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.AccessControl.GenericAce\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: GenericAce\n  fullName: System.Security.AccessControl.GenericAce\n  commentId: T:System.Security.AccessControl.GenericAce\n  nameWithType: GenericAce\n- uid: System.Security.AccessControl.KnownAce\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: KnownAce\n  fullName: System.Security.AccessControl.KnownAce\n  commentId: T:System.Security.AccessControl.KnownAce\n  nameWithType: KnownAce\n- uid: System.Security.AccessControl.QualifiedAce\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: QualifiedAce\n  fullName: System.Security.AccessControl.QualifiedAce\n  commentId: T:System.Security.AccessControl.QualifiedAce\n  nameWithType: QualifiedAce\n- uid: System.Security.AccessControl.QualifiedAce.AceQualifier\n  parent: System.Security.AccessControl.QualifiedAce\n  isExternal: false\n  name: AceQualifier\n  fullName: System.Security.AccessControl.QualifiedAce.AceQualifier\n  commentId: P:System.Security.AccessControl.QualifiedAce.AceQualifier\n  nameWithType: QualifiedAce.AceQualifier\n- uid: System.Security.AccessControl.QualifiedAce.IsCallback\n  parent: System.Security.AccessControl.QualifiedAce\n  isExternal: false\n  name: IsCallback\n  fullName: System.Security.AccessControl.QualifiedAce.IsCallback\n  commentId: P:System.Security.AccessControl.QualifiedAce.IsCallback\n  nameWithType: QualifiedAce.IsCallback\n- uid: System.Security.AccessControl.QualifiedAce.OpaqueLength\n  parent: System.Security.AccessControl.QualifiedAce\n  isExternal: false\n  name: OpaqueLength\n  fullName: System.Security.AccessControl.QualifiedAce.OpaqueLength\n  commentId: P:System.Security.AccessControl.QualifiedAce.OpaqueLength\n  nameWithType: QualifiedAce.OpaqueLength\n- uid: System.Security.AccessControl.QualifiedAce.GetOpaque\n  parent: System.Security.AccessControl.QualifiedAce\n  isExternal: false\n  name: GetOpaque()\n  fullName: System.Security.AccessControl.QualifiedAce.GetOpaque()\n  spec.csharp:\n  - uid: System.Security.AccessControl.QualifiedAce.GetOpaque\n    name: GetOpaque\n    fullName: System.Security.AccessControl.QualifiedAce.GetOpaque\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.QualifiedAce.GetOpaque\n    name: GetOpaque\n    fullName: System.Security.AccessControl.QualifiedAce.GetOpaque\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.QualifiedAce.GetOpaque\n  nameWithType: QualifiedAce.GetOpaque()\n- uid: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])\n  parent: System.Security.AccessControl.QualifiedAce\n  isExternal: true\n  name: SetOpaque(Byte[])\n  fullName: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])\n  fullname.vb: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte())\n  name.vb: SetOpaque(Byte())\n  spec.csharp:\n  - uid: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])\n    name: SetOpaque\n    fullName: System.Security.AccessControl.QualifiedAce.SetOpaque\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])\n    name: SetOpaque\n    fullName: System.Security.AccessControl.QualifiedAce.SetOpaque\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])\n  nameWithType: QualifiedAce.SetOpaque(Byte[])\n  nameWithType.vb: QualifiedAce.SetOpaque(Byte())\n- uid: System.Security.AccessControl.KnownAce.AccessMask\n  parent: System.Security.AccessControl.KnownAce\n  isExternal: false\n  name: AccessMask\n  fullName: System.Security.AccessControl.KnownAce.AccessMask\n  commentId: P:System.Security.AccessControl.KnownAce.AccessMask\n  nameWithType: KnownAce.AccessMask\n- uid: System.Security.AccessControl.KnownAce.SecurityIdentifier\n  parent: System.Security.AccessControl.KnownAce\n  isExternal: false\n  name: SecurityIdentifier\n  fullName: System.Security.AccessControl.KnownAce.SecurityIdentifier\n  commentId: P:System.Security.AccessControl.KnownAce.SecurityIdentifier\n  nameWithType: KnownAce.SecurityIdentifier\n- uid: System.Security.AccessControl.GenericAce.AceFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: AceFlags\n  fullName: System.Security.AccessControl.GenericAce.AceFlags\n  commentId: P:System.Security.AccessControl.GenericAce.AceFlags\n  nameWithType: GenericAce.AceFlags\n- uid: System.Security.AccessControl.GenericAce.AceType\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: AceType\n  fullName: System.Security.AccessControl.GenericAce.AceType\n  commentId: P:System.Security.AccessControl.GenericAce.AceType\n  nameWithType: GenericAce.AceType\n- uid: System.Security.AccessControl.GenericAce.AuditFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: AuditFlags\n  fullName: System.Security.AccessControl.GenericAce.AuditFlags\n  commentId: P:System.Security.AccessControl.GenericAce.AuditFlags\n  nameWithType: GenericAce.AuditFlags\n- uid: System.Security.AccessControl.GenericAce.InheritanceFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: InheritanceFlags\n  fullName: System.Security.AccessControl.GenericAce.InheritanceFlags\n  commentId: P:System.Security.AccessControl.GenericAce.InheritanceFlags\n  nameWithType: GenericAce.InheritanceFlags\n- uid: System.Security.AccessControl.GenericAce.IsInherited\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: IsInherited\n  fullName: System.Security.AccessControl.GenericAce.IsInherited\n  commentId: P:System.Security.AccessControl.GenericAce.IsInherited\n  nameWithType: GenericAce.IsInherited\n- uid: System.Security.AccessControl.GenericAce.PropagationFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: PropagationFlags\n  fullName: System.Security.AccessControl.GenericAce.PropagationFlags\n  commentId: P:System.Security.AccessControl.GenericAce.PropagationFlags\n  nameWithType: GenericAce.PropagationFlags\n- uid: System.Security.AccessControl.GenericAce.Copy\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: Copy()\n  fullName: System.Security.AccessControl.GenericAce.Copy()\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAce.Copy\n    name: Copy\n    fullName: System.Security.AccessControl.GenericAce.Copy\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAce.Copy\n    name: Copy\n    fullName: System.Security.AccessControl.GenericAce.Copy\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAce.Copy\n  nameWithType: GenericAce.Copy()\n- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: true\n  name: CreateFromBinaryForm(Byte[], Int32)\n  fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[], System.Int32)\n  fullname.vb: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte(), System.Int32)\n  name.vb: CreateFromBinaryForm(Byte(), Int32)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n    name: CreateFromBinaryForm\n    fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n    name: CreateFromBinaryForm\n    fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n  nameWithType: GenericAce.CreateFromBinaryForm(Byte[], Int32)\n  nameWithType.vb: GenericAce.CreateFromBinaryForm(Byte(), Int32)\n- uid: System.Security.AccessControl.GenericAce.Equals(System.Object)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Security.AccessControl.GenericAce.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAce.Equals(System.Object)\n    name: Equals\n    fullName: System.Security.AccessControl.GenericAce.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAce.Equals(System.Object)\n    name: Equals\n    fullName: System.Security.AccessControl.GenericAce.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAce.Equals(System.Object)\n  nameWithType: GenericAce.Equals(Object)\n- uid: System.Security.AccessControl.GenericAce.GetHashCode\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.Security.AccessControl.GenericAce.GetHashCode()\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAce.GetHashCode\n    name: GetHashCode\n    fullName: System.Security.AccessControl.GenericAce.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAce.GetHashCode\n    name: GetHashCode\n    fullName: System.Security.AccessControl.GenericAce.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAce.GetHashCode\n  nameWithType: GenericAce.GetHashCode()\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.AccessControl.AceFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AceFlags\n  fullName: System.Security.AccessControl.AceFlags\n  commentId: T:System.Security.AccessControl.AceFlags\n  nameWithType: AceFlags\n- uid: System.Security.AccessControl.AceQualifier\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AceQualifier\n  fullName: System.Security.AccessControl.AceQualifier\n  commentId: T:System.Security.AccessControl.AceQualifier\n  nameWithType: AceQualifier\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Security.Principal.SecurityIdentifier\n  parent: System.Security.Principal\n  isExternal: false\n  name: SecurityIdentifier\n  fullName: System.Security.Principal.SecurityIdentifier\n  commentId: T:System.Security.Principal.SecurityIdentifier\n  nameWithType: SecurityIdentifier\n- uid: System.Security.AccessControl.ObjectAceFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: ObjectAceFlags\n  fullName: System.Security.AccessControl.ObjectAceFlags\n  commentId: T:System.Security.AccessControl.ObjectAceFlags\n  nameWithType: ObjectAceFlags\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  fullName: System.Guid\n  commentId: T:System.Guid\n  nameWithType: Guid\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Security.Principal\n  isExternal: false\n  name: System.Security.Principal\n  fullName: System.Security.Principal\n  commentId: N:System.Security.Principal\n  nameWithType: System.Security.Principal\n- uid: System.Security.AccessControl.GenericAce.BinaryLength\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: BinaryLength\n  fullName: System.Security.AccessControl.GenericAce.BinaryLength\n  commentId: P:System.Security.AccessControl.GenericAce.BinaryLength\n  nameWithType: GenericAce.BinaryLength\n- uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: true\n  name: GetBinaryForm(Byte[], Int32)\n  fullName: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[], System.Int32)\n  fullname.vb: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte(), System.Int32)\n  name.vb: GetBinaryForm(Byte(), Int32)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n    name: GetBinaryForm\n    fullName: System.Security.AccessControl.GenericAce.GetBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n    name: GetBinaryForm\n    fullName: System.Security.AccessControl.GenericAce.GetBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n  nameWithType: GenericAce.GetBinaryForm(Byte[], Int32)\n  nameWithType.vb: GenericAce.GetBinaryForm(Byte(), Int32)\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}