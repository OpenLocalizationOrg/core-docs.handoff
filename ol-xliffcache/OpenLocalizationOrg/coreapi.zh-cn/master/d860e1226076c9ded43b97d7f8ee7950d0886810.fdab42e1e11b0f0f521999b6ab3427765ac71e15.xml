{"nodes":[{"pos":[1462,1474],"content":"TimeZoneInfo","needQuote":true,"nodes":[{"content":"TimeZoneInfo","pos":[0,12]}]},{"pos":[3154,3167],"content":"BaseUtcOffset","needQuote":true,"nodes":[{"content":"BaseUtcOffset","pos":[0,13]}]},{"content":"\\n&lt;p&gt;An object that indicates the time difference between the current time zone's standard time and Coordinated Universal Time (UTC).&lt;/p&gt;\\n","pos":[3861,4000],"source":"\\n<p>An object that indicates the time difference between the current time zone's standard time and Coordinated Universal Time (UTC).</p>\\n"},{"pos":[4434,4446],"content":"DaylightName","needQuote":true,"nodes":[{"content":"DaylightName","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The display name for the time zone's daylight saving time.&lt;/p&gt;\\n","pos":[5093,5162],"source":"\\n<p>The display name for the time zone's daylight saving time.</p>\\n"},{"pos":[5454,5465],"content":"DisplayName","needQuote":true,"nodes":[{"content":"DisplayName","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The time zone's general display name.&lt;/p&gt;\\n","pos":[6097,6145],"source":"\\n<p>The time zone's general display name.</p>\\n"},{"pos":[6409,6411],"content":"Id","needQuote":true,"nodes":[{"content":"Id","pos":[0,2]}]},{"content":"\\n&lt;p&gt;The time zone identifier.&lt;/p&gt;\\n","pos":[6977,7013],"source":"\\n<p>The time zone identifier.</p>\\n"},{"pos":[7277,7282],"content":"Local","needQuote":true,"nodes":[{"content":"Local","pos":[0,5]}]},{"content":"\\n&lt;p&gt;An object that represents the local time zone.&lt;/p&gt;\\n","pos":[7993,8050],"source":"\\n<p>An object that represents the local time zone.</p>\\n"},{"pos":[8360,8372],"content":"StandardName","needQuote":true,"nodes":[{"content":"StandardName","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The display name of the time zone's standard time.&lt;/p&gt;\\n","pos":[9004,9065],"source":"\\n<p>The display name of the time zone's standard time.</p>\\n"},{"pos":[9402,9428],"content":"SupportsDaylightSavingTime","needQuote":true,"nodes":[{"content":"SupportsDaylightSavingTime","pos":[0,26]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the time zone supports daylight saving time; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10141,10258],"source":"\\n<p>\\n<strong>true</strong> if the time zone supports daylight saving time; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[10540,10543],"content":"Utc","needQuote":true,"nodes":[{"content":"Utc","pos":[0,3]}]},{"content":"\\n&lt;p&gt;An object that represents the Coordinated Universal Time (UTC) zone.&lt;/p&gt;\\n","pos":[11268,11347],"source":"\\n<p>An object that represents the Coordinated Universal Time (UTC) zone.</p>\\n"},{"pos":[11763,11798],"content":"ConvertTime(DateTime, TimeZoneInfo)","needQuote":true,"nodes":[{"content":"ConvertTime(DateTime, TimeZoneInfo)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The date and time to convert.","pos":[12570,12604],"source":"\\n<p>The date and time to convert."},{"content":"&lt;/p&gt;\\n","pos":[12607,12613],"source":"   </p>\\n"},{"content":"\\n&lt;p&gt;The time zone to convert &lt;em&gt;dateTime&lt;/em&gt; to.&lt;/p&gt;\\n","pos":[12697,12754],"source":"\\n<p>The time zone to convert <em>dateTime</em> to.</p>\\n"},{"content":"\\n&lt;p&gt;The date and time in the destination time zone.&lt;/p&gt;\\n","pos":[12816,12874],"source":"\\n<p>The date and time in the destination time zone.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the &lt;em&gt;dateTime&lt;/em&gt; parameter represents an invalid time.&lt;/p&gt;\\n","pos":[12985,13068],"source":"\\n<p>The value of the <em>dateTime</em> parameter represents an invalid time.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the &lt;em&gt;destinationTimeZone&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[13173,13265],"source":"\\n<p>The value of the <em>destinationTimeZone</em> parameter is <strong>null</strong>.</p>\\n"},{"pos":[13752,13801],"content":"ConvertTime(DateTime, TimeZoneInfo, TimeZoneInfo)","needQuote":true,"nodes":[{"content":"ConvertTime(DateTime, TimeZoneInfo, TimeZoneInfo)","pos":[0,49]}]},{"content":"\\n&lt;p&gt;The date and time to convert.&lt;/p&gt;\\n","pos":[14647,14687],"source":"\\n<p>The date and time to convert.</p>\\n"},{"content":"\\n&lt;p&gt;The time zone of &lt;em&gt;dateTime&lt;/em&gt;.&lt;/p&gt;\\n","pos":[14766,14812],"source":"\\n<p>The time zone of <em>dateTime</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The time zone to convert &lt;em&gt;dateTime&lt;/em&gt; to.&lt;/p&gt;\\n","pos":[14896,14953],"source":"\\n<p>The time zone to convert <em>dateTime</em> to.</p>\\n"},{"content":"\\n&lt;p&gt;The date and time in the destination time zone that corresponds to the &lt;em&gt;dateTime&lt;/em&gt; parameter in the source time zone.&lt;/p&gt;\\n","pos":[15015,15149],"source":"\\n<p>The date and time in the destination time zone that corresponds to the <em>dateTime</em> parameter in the source time zone.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;sourceTimeZone&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;destinationTimeZone&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16333,16497],"source":"\\n<p>The <em>sourceTimeZone</em> parameter is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>destinationTimeZone</em> parameter is <strong>null</strong>.</p>\\n"},{"pos":[17101,17142],"content":"ConvertTime(DateTimeOffset, TimeZoneInfo)","needQuote":true,"nodes":[{"content":"ConvertTime(DateTimeOffset, TimeZoneInfo)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;The date and time to convert.","pos":[17976,18010],"source":"\\n<p>The date and time to convert."},{"content":"&lt;/p&gt;\\n","pos":[18013,18019],"source":"   </p>\\n"},{"content":"\\n&lt;p&gt;The time zone to convert &lt;em&gt;dateTime&lt;/em&gt; to.&lt;/p&gt;\\n","pos":[18103,18160],"source":"\\n<p>The time zone to convert <em>dateTime</em> to.</p>\\n"},{"content":"\\n&lt;p&gt;The date and time in the destination time zone.&lt;/p&gt;\\n","pos":[18228,18286],"source":"\\n<p>The date and time in the destination time zone.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the &lt;em&gt;destinationTimeZone&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18405,18497],"source":"\\n<p>The value of the <em>destinationTimeZone</em> parameter is <strong>null</strong>.</p>\\n"},{"pos":[18867,18887],"content":"Equals(TimeZoneInfo)","needQuote":true,"nodes":[{"content":"Equals(TimeZoneInfo)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;A second object to compare with the current object.","pos":[19716,19772],"source":"\\n<p>A second object to compare with the current object."},{"content":"&lt;/p&gt;\\n","pos":[19774,19780],"source":"  </p>\\n"},{"pos":[20462,20492],"content":"FindSystemTimeZoneById(String)","needQuote":true,"nodes":[{"content":"FindSystemTimeZoneById(String)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;An object whose identifier is the value of the &lt;em&gt;id&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[21520,21600],"source":"\\n<p>An object whose identifier is the value of the <em>id</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;The system does not have enough memory to hold information about the time zone.&lt;/p&gt;\\n","pos":[21717,21807],"source":"\\n<p>The system does not have enough memory to hold information about the time zone.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;id&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[21912,21974],"source":"\\n<p>The <em>id</em> parameter is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The time zone identifier specified by &lt;em&gt;id&lt;/em&gt; was not found.","pos":[22087,22156],"source":"\\n<p>The time zone identifier specified by <em>id</em> was not found."},{"content":"This means that a registry key whose name matches &lt;em&gt;id&lt;/em&gt; does not exist, or that the key exists but does not contain any time zone data.&lt;/p&gt;\\n","pos":[22157,22304],"source":" This means that a registry key whose name matches <em>id</em> does not exist, or that the key exists but does not contain any time zone data.</p>\\n"},{"content":"\\n&lt;p&gt;The process does not have the permissions required to read from the registry key that contains the time zone information.&lt;/p&gt;\\n","pos":[22419,22551],"source":"\\n<p>The process does not have the permissions required to read from the registry key that contains the time zone information.</p>\\n"},{"content":"\\n&lt;p&gt;The time zone identifier was found, but the registry data is corrupted.&lt;/p&gt;\\n","pos":[22662,22744],"source":"\\n<p>The time zone identifier was found, but the registry data is corrupted.</p>\\n"},{"pos":[23226,23259],"content":"GetAmbiguousTimeOffsets(DateTime)","needQuote":true,"nodes":[{"content":"GetAmbiguousTimeOffsets(DateTime)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;A date and time.&lt;/p&gt;\\n","pos":[24031,24058],"source":"\\n<p>A date and time.</p>\\n"},{"content":"\\n&lt;p&gt;An array of objects that represents possible Coordinated Universal Time (UTC) offsets that a particular date and time can be mapped to.&lt;/p&gt;\\n","pos":[24122,24268],"source":"\\n<p>An array of objects that represents possible Coordinated Universal Time (UTC) offsets that a particular date and time can be mapped to.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;dateTime&lt;/em&gt; is not an ambiguous time.&lt;/p&gt;\\n","pos":[24379,24435],"source":"\\n<p>\\n<em>dateTime</em> is not an ambiguous time.</p>\\n"},{"pos":[24976,25015],"content":"GetAmbiguousTimeOffsets(DateTimeOffset)","needQuote":true,"nodes":[{"content":"GetAmbiguousTimeOffsets(DateTimeOffset)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;A date and time.&lt;/p&gt;\\n","pos":[25833,25860],"source":"\\n<p>A date and time.</p>\\n"},{"content":"\\n&lt;p&gt;An array of objects that represents possible Coordinated Universal Time (UTC) offsets that a particular date and time can be mapped to.&lt;/p&gt;\\n","pos":[25924,26070],"source":"\\n<p>An array of objects that represents possible Coordinated Universal Time (UTC) offsets that a particular date and time can be mapped to.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;dateTimeOffset&lt;/em&gt; is not an ambiguous time.&lt;/p&gt;\\n","pos":[26181,26243],"source":"\\n<p>\\n<em>dateTimeOffset</em> is not an ambiguous time.</p>\\n"},{"pos":[26685,26698],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[27860,27880],"content":"GetSystemTimeZones()","needQuote":true,"nodes":[{"content":"GetSystemTimeZones()","pos":[0,20]}]},{"content":"\\n&lt;p&gt;There is insufficient memory to store all time zone information.&lt;/p&gt;\\n","pos":[28998,29073],"source":"\\n<p>There is insufficient memory to store all time zone information.</p>\\n"},{"content":"\\n&lt;p&gt;The user does not have permission to read from the registry keys that contain time zone information.&lt;/p&gt;\\n","pos":[29188,29299],"source":"\\n<p>The user does not have permission to read from the registry keys that contain time zone information.</p>\\n"},{"pos":[29654,29676],"content":"GetUtcOffset(DateTime)","needQuote":true,"nodes":[{"content":"GetUtcOffset(DateTime)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The date and time to determine the offset for.","pos":[30435,30486],"source":"\\n<p>The date and time to determine the offset for."},{"content":"&lt;/p&gt;\\n","pos":[30489,30495],"source":"   </p>\\n"},{"content":"\\n&lt;p&gt;An object that indicates the time difference between the two time zones.&lt;/p&gt;\\n","pos":[30557,30640],"source":"\\n<p>An object that indicates the time difference between the two time zones.</p>\\n"},{"pos":[31099,31127],"content":"GetUtcOffset(DateTimeOffset)","needQuote":true,"nodes":[{"content":"GetUtcOffset(DateTimeOffset)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The date and time to determine the offset for.&lt;/p&gt;\\n","pos":[31932,31989],"source":"\\n<p>The date and time to determine the offset for.</p>\\n"},{"content":"\\n&lt;p&gt;An object that indicates the time difference between Coordinated Universal Time (UTC) and the current time zone.&lt;/p&gt;\\n","pos":[32051,32174],"source":"\\n<p>An object that indicates the time difference between Coordinated Universal Time (UTC) and the current time zone.</p>\\n"},{"pos":[32524,32549],"content":"IsAmbiguousTime(DateTime)","needQuote":true,"nodes":[{"content":"IsAmbiguousTime(DateTime)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;A date and time value.","pos":[33333,33360],"source":"\\n<p>A date and time value."},{"content":"&lt;/p&gt;\\n","pos":[33363,33369],"source":"   </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;dateTime&lt;/em&gt; parameter is ambiguous; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[33430,33548],"source":"\\n<p>\\n<strong>true</strong> if the <em>dateTime</em> parameter is ambiguous; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[34430,34461],"content":"IsAmbiguousTime(DateTimeOffset)","needQuote":true,"nodes":[{"content":"IsAmbiguousTime(DateTimeOffset)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;A date and time.&lt;/p&gt;\\n","pos":[35291,35318],"source":"\\n<p>A date and time.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;dateTimeOffset&lt;/em&gt; parameter is ambiguous in the current time zone; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[35379,35528],"source":"\\n<p>\\n<strong>true</strong> if the <em>dateTimeOffset</em> parameter is ambiguous in the current time zone; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[35896,35926],"content":"IsDaylightSavingTime(DateTime)","needQuote":true,"nodes":[{"content":"IsDaylightSavingTime(DateTime)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;A date and time value.","pos":[36780,36807],"source":"\\n<p>A date and time value."},{"content":"&lt;/p&gt;\\n","pos":[36810,36816],"source":"   </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;dateTime&lt;/em&gt; parameter is a daylight saving time; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[36877,37008],"source":"\\n<p>\\n<strong>true</strong> if the <em>dateTime</em> parameter is a daylight saving time; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[37902,37938],"content":"IsDaylightSavingTime(DateTimeOffset)","needQuote":true,"nodes":[{"content":"IsDaylightSavingTime(DateTimeOffset)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;A date and time value.&lt;/p&gt;\\n","pos":[38838,38871],"source":"\\n<p>A date and time value.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;dateTimeOffset&lt;/em&gt; parameter is a daylight saving time; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[38932,39069],"source":"\\n<p>\\n<strong>true</strong> if the <em>dateTimeOffset</em> parameter is a daylight saving time; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[39553,39576],"content":"IsInvalidTime(DateTime)","needQuote":true,"nodes":[{"content":"IsInvalidTime(DateTime)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;A date and time value.","pos":[40251,40278],"source":"\\n<p>A date and time value."},{"content":"&lt;/p&gt;\\n","pos":[40281,40287],"source":"   </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;dateTime&lt;/em&gt; is invalid; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[40348,40450],"source":"\\n<p>\\n<strong>true</strong> if <em>dateTime</em> is invalid; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[40867,40877],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[41993,41999],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[42130,42136],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[42320,42344],"content":"IEquatable<TimeZoneInfo>","needQuote":true,"nodes":[{"content":"IEquatable&lt;TimeZoneInfo&gt;","pos":[0,24],"source":"IEquatable<TimeZoneInfo>"}]},{"pos":[42546,42556],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[42599,42600],"content":"<","needQuote":true,"nodes":[]},{"pos":[42656,42668],"content":"TimeZoneInfo","needQuote":true,"nodes":[{"content":"TimeZoneInfo","pos":[0,12]}]},{"pos":[42785,42795],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[42839,42842]},{"pos":[42905,42917],"content":"TimeZoneInfo","needQuote":true,"nodes":[{"content":"TimeZoneInfo","pos":[0,12]}]},{"pos":[42962,42963],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43216,43230],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[43349,43355],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[43422,43423],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43473,43479],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[43539,43540],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43623,43629],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[43696,43697],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43747,43753],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[43813,43814],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44028,44050],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[44198,44204],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[44271,44272],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44322,44328],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[44389,44390]},{"pos":[44445,44451],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[44511,44512],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44609,44615],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[44682,44683],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44733,44739],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[44800,44801]},{"pos":[44856,44862],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[44922,44923],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45168,45199],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[45365,45380],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[45456,45457],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45507,45513],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[45574,45575]},{"pos":[45630,45636],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[45696,45697],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45803,45818],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[45894,45895],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45945,45951],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[46012,46013]},{"pos":[46068,46074],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[46134,46135],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46361,46370],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[46463,46470],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[46538,46539],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46566,46567],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46636,46643],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[46711,46712],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46739,46740],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46915,46932],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[47041,47056],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[47132,47133],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47160,47161],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47238,47253],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[47329,47330],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47357,47358],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47516,47529],"content":"IEquatable<T>","needQuote":true,"nodes":[{"content":"IEquatable&lt;T&gt;","pos":[0,13],"source":"IEquatable<T>"}]},{"pos":[47684,47694],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[47737,47738],"content":"<","needQuote":true,"nodes":[]},{"pos":[47765,47766],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[47865,47875],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[47919,47922]},{"pos":[47956,47957],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[47984,47985],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48171,48179],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[48330,48336],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[48487,48499],"content":"TimeZoneInfo","needQuote":true,"nodes":[{"content":"TimeZoneInfo","pos":[0,12]}]},{"pos":[48663,48670],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[48820,48828],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[48987,49001],"content":"DateTimeOffset","needQuote":true,"nodes":[{"content":"DateTimeOffset","pos":[0,14]}]},{"pos":[49280,49300],"content":"Equals(TimeZoneInfo)","needQuote":true,"nodes":[{"content":"Equals(TimeZoneInfo)","pos":[0,20]}]},{"pos":[49530,49536],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[49607,49608],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49664,49676],"content":"TimeZoneInfo","needQuote":true,"nodes":[{"content":"TimeZoneInfo","pos":[0,12]}]},{"pos":[49721,49722],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49800,49806],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[49880,49881],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49937,49949],"content":"TimeZoneInfo","needQuote":true,"nodes":[{"content":"TimeZoneInfo","pos":[0,12]}]},{"pos":[49994,49995],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50290,50299],"content":"Equals(T)","needQuote":true,"nodes":[{"content":"Equals(T)","pos":[0,9]}]},{"pos":[50457,50463],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[50516,50517],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50544,50545],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[50572,50573],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50651,50657],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[50713,50714],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50741,50742],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[50769,50770],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50952,50962],"content":"TimeSpan[]","needQuote":true,"nodes":[{"content":"TimeSpan[]","pos":[0,10]}]},{"pos":[51098,51106],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"content":"[]","pos":[51148,51150]},{"pos":[51217,51225],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[51266,51268],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[51427,51440],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[51541,51552],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[51624,51625],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51652,51653],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51726,51737],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[51809,51810],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51837,51838],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51998,52003],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[52272,52304],"content":"ReadOnlyCollection<TimeZoneInfo>","needQuote":true,"nodes":[{"content":"ReadOnlyCollection&lt;TimeZoneInfo&gt;","pos":[0,32],"source":"ReadOnlyCollection<TimeZoneInfo>"}]},{"pos":[52610,52628],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"pos":[52703,52704],"content":"<","needQuote":true,"nodes":[]},{"pos":[52760,52772],"content":"TimeZoneInfo","needQuote":true,"nodes":[{"content":"TimeZoneInfo","pos":[0,12]}]},{"pos":[52921,52939],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"content":"(Of","pos":[53015,53018]},{"pos":[53081,53093],"content":"TimeZoneInfo","needQuote":true,"nodes":[{"content":"TimeZoneInfo","pos":[0,12]}]},{"pos":[53138,53139],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53433,53454],"content":"ReadOnlyCollection<T>","needQuote":true,"nodes":[{"content":"ReadOnlyCollection&lt;T&gt;","pos":[0,21],"source":"ReadOnlyCollection<T>"}]},{"pos":[53713,53731],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"pos":[53806,53807],"content":"<","needQuote":true,"nodes":[]},{"pos":[53834,53835],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[53966,53984],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"content":"(Of","pos":[54060,54063]},{"pos":[54097,54098],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[54125,54126],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54358,54388],"content":"System.Collections.ObjectModel","needQuote":true,"nodes":[{"content":"System.Collections.ObjectModel","pos":[0,30]}]},{"pos":[54606,54616],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[54711,54719],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[54788,54789],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54816,54817],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54887,54895],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[54964,54965],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54992,54993],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55159,55176],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[55352,55373],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[55560,55580],"content":"OutOfMemoryException","needQuote":true,"nodes":[{"content":"OutOfMemoryException","pos":[0,20]}]},{"pos":[55810,55827],"content":"SecurityException","needQuote":true,"nodes":[{"content":"SecurityException","pos":[0,17]}]},{"pos":[56024,56048],"content":"InvalidTimeZoneException","needQuote":true,"nodes":[{"content":"InvalidTimeZoneException","pos":[0,24]}]}],"content":"items:\n- uid: System.TimeZoneInfo\n  commentId: T:System.TimeZoneInfo\n  id: TimeZoneInfo\n  parent: System\n  children:\n  - System.TimeZoneInfo.BaseUtcOffset\n  - System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)\n  - System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)\n  - System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)\n  - System.TimeZoneInfo.DaylightName\n  - System.TimeZoneInfo.DisplayName\n  - System.TimeZoneInfo.Equals(System.TimeZoneInfo)\n  - System.TimeZoneInfo.FindSystemTimeZoneById(System.String)\n  - System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)\n  - System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)\n  - System.TimeZoneInfo.GetHashCode\n  - System.TimeZoneInfo.GetSystemTimeZones\n  - System.TimeZoneInfo.GetUtcOffset(System.DateTime)\n  - System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)\n  - System.TimeZoneInfo.Id\n  - System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)\n  - System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)\n  - System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)\n  - System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)\n  - System.TimeZoneInfo.IsInvalidTime(System.DateTime)\n  - System.TimeZoneInfo.Local\n  - System.TimeZoneInfo.StandardName\n  - System.TimeZoneInfo.SupportsDaylightSavingTime\n  - System.TimeZoneInfo.ToString\n  - System.TimeZoneInfo.Utc\n  langs:\n  - csharp\n  - vb\n  name: TimeZoneInfo\n  fullName: System.TimeZoneInfo\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/TimeZoneInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TimeZoneInfo\n    path: src/mscorlib/src/System/TimeZoneInfo.cs\n    startLine: 52\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents any time zone in the world.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [HostProtection(MayLeakOnAbort = true)]\n\n      [TypeForwardedFrom(\"System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089\")]\n\n      public sealed class TimeZoneInfo : IEquatable<TimeZoneInfo>, ISerializable, IDeserializationCallback\n    content.vb: >-\n      <Serializable>\n\n      <HostProtection(MayLeakOnAbort:=True)>\n\n      <TypeForwardedFrom(\"System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089\")>\n\n      Public NotInheritable Class TimeZoneInfo\n          Implements IEquatable(Of TimeZoneInfo), ISerializable, IDeserializationCallback\n  inheritance:\n  - System.Object\n  implements:\n  - System.IEquatable{System.TimeZoneInfo}\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: TimeZoneInfo\n- uid: System.TimeZoneInfo.BaseUtcOffset\n  commentId: P:System.TimeZoneInfo.BaseUtcOffset\n  id: BaseUtcOffset\n  parent: System.TimeZoneInfo\n  langs:\n  - csharp\n  - vb\n  name: BaseUtcOffset\n  fullName: System.TimeZoneInfo.BaseUtcOffset\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/TimeZoneInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BaseUtcOffset\n    path: src/mscorlib/src/System/TimeZoneInfo.cs\n    startLine: 307\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the time difference between the current time zone's standard time and Coordinated Universal Time (UTC).</p>\\n\"\n  syntax:\n    content: public TimeSpan BaseUtcOffset { get; }\n    content.vb: Public ReadOnly Property BaseUtcOffset As TimeSpan\n    parameters: []\n    return:\n      type: System.TimeSpan\n      description: \"\\n<p>An object that indicates the time difference between the current time zone's standard time and Coordinated Universal Time (UTC).</p>\\n\"\n  seealso:\n  - type: System.TimeZoneInfo.GetUtcOffset(System.DateTime)\n    commentId: M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TimeZoneInfo.BaseUtcOffset\n- uid: System.TimeZoneInfo.DaylightName\n  commentId: P:System.TimeZoneInfo.DaylightName\n  id: DaylightName\n  parent: System.TimeZoneInfo\n  langs:\n  - csharp\n  - vb\n  name: DaylightName\n  fullName: System.TimeZoneInfo.DaylightName\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/TimeZoneInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DaylightName\n    path: src/mscorlib/src/System/TimeZoneInfo.cs\n    startLine: 301\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the display name for the current time zone's daylight saving time.</p>\\n\"\n  syntax:\n    content: public string DaylightName { get; }\n    content.vb: Public ReadOnly Property DaylightName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The display name for the time zone's daylight saving time.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TimeZoneInfo.DaylightName\n- uid: System.TimeZoneInfo.DisplayName\n  commentId: P:System.TimeZoneInfo.DisplayName\n  id: DisplayName\n  parent: System.TimeZoneInfo\n  langs:\n  - csharp\n  - vb\n  name: DisplayName\n  fullName: System.TimeZoneInfo.DisplayName\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/TimeZoneInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DisplayName\n    path: src/mscorlib/src/System/TimeZoneInfo.cs\n    startLine: 289\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the general display name that represents the time zone.</p>\\n\"\n  syntax:\n    content: public string DisplayName { get; }\n    content.vb: Public ReadOnly Property DisplayName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The time zone's general display name.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TimeZoneInfo.DisplayName\n- uid: System.TimeZoneInfo.Id\n  commentId: P:System.TimeZoneInfo.Id\n  id: Id\n  parent: System.TimeZoneInfo\n  langs:\n  - csharp\n  - vb\n  name: Id\n  fullName: System.TimeZoneInfo.Id\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/TimeZoneInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Id\n    path: src/mscorlib/src/System/TimeZoneInfo.cs\n    startLine: 283\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the time zone identifier.</p>\\n\"\n  syntax:\n    content: public string Id { get; }\n    content.vb: Public ReadOnly Property Id As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The time zone identifier.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TimeZoneInfo.Id\n- uid: System.TimeZoneInfo.Local\n  commentId: P:System.TimeZoneInfo.Local\n  id: Local\n  parent: System.TimeZoneInfo\n  langs:\n  - csharp\n  - vb\n  name: Local\n  fullName: System.TimeZoneInfo.Local\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/TimeZoneInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Local\n    path: src/mscorlib/src/System/TimeZoneInfo.cs\n    startLine: 1072\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets a <xref href=\\\"System.TimeZoneInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents the local time zone.</p>\\n\"\n  syntax:\n    content: public static TimeZoneInfo Local { get; }\n    content.vb: Public Shared ReadOnly Property Local As TimeZoneInfo\n    parameters: []\n    return:\n      type: System.TimeZoneInfo\n      description: \"\\n<p>An object that represents the local time zone.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: TimeZoneInfo.Local\n- uid: System.TimeZoneInfo.StandardName\n  commentId: P:System.TimeZoneInfo.StandardName\n  id: StandardName\n  parent: System.TimeZoneInfo\n  langs:\n  - csharp\n  - vb\n  name: StandardName\n  fullName: System.TimeZoneInfo.StandardName\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/TimeZoneInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StandardName\n    path: src/mscorlib/src/System/TimeZoneInfo.cs\n    startLine: 295\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the display name for the time zone's standard time.</p>\\n\"\n  syntax:\n    content: public string StandardName { get; }\n    content.vb: Public ReadOnly Property StandardName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The display name of the time zone's standard time.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TimeZoneInfo.StandardName\n- uid: System.TimeZoneInfo.SupportsDaylightSavingTime\n  commentId: P:System.TimeZoneInfo.SupportsDaylightSavingTime\n  id: SupportsDaylightSavingTime\n  parent: System.TimeZoneInfo\n  langs:\n  - csharp\n  - vb\n  name: SupportsDaylightSavingTime\n  fullName: System.TimeZoneInfo.SupportsDaylightSavingTime\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/TimeZoneInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SupportsDaylightSavingTime\n    path: src/mscorlib/src/System/TimeZoneInfo.cs\n    startLine: 313\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets a value indicating whether the time zone has any daylight saving time rules.</p>\\n\"\n  syntax:\n    content: public bool SupportsDaylightSavingTime { get; }\n    content.vb: Public ReadOnly Property SupportsDaylightSavingTime As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the time zone supports daylight saving time; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TimeZoneInfo.SupportsDaylightSavingTime\n- uid: System.TimeZoneInfo.Utc\n  commentId: P:System.TimeZoneInfo.Utc\n  id: Utc\n  parent: System.TimeZoneInfo\n  langs:\n  - csharp\n  - vb\n  name: Utc\n  fullName: System.TimeZoneInfo.Utc\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/TimeZoneInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Utc\n    path: src/mscorlib/src/System/TimeZoneInfo.cs\n    startLine: 1115\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets a <xref href=\\\"System.TimeZoneInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents the Coordinated Universal Time (UTC) zone.</p>\\n\"\n  syntax:\n    content: public static TimeZoneInfo Utc { get; }\n    content.vb: Public Shared ReadOnly Property Utc As TimeZoneInfo\n    parameters: []\n    return:\n      type: System.TimeZoneInfo\n      description: \"\\n<p>An object that represents the Coordinated Universal Time (UTC) zone.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: TimeZoneInfo.Utc\n- uid: System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)\n  commentId: M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)\n  id: ConvertTime(System.DateTime,System.TimeZoneInfo)\n  parent: System.TimeZoneInfo\n  langs:\n  - csharp\n  - vb\n  name: ConvertTime(DateTime, TimeZoneInfo)\n  fullName: System.TimeZoneInfo.ConvertTime(System.DateTime, System.TimeZoneInfo)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/TimeZoneInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ConvertTime\n    path: src/mscorlib/src/System/TimeZoneInfo.cs\n    startLine: 760\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts a time to the time in a particular time zone.</p>\\n\"\n  syntax:\n    content: public static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo destinationTimeZone)\n    content.vb: Public Shared Function ConvertTime(dateTime As Date, destinationTimeZone As TimeZoneInfo) As Date\n    parameters:\n    - id: dateTime\n      type: System.DateTime\n      description: \"\\n<p>The date and time to convert.   </p>\\n\"\n    - id: destinationTimeZone\n      type: System.TimeZoneInfo\n      description: \"\\n<p>The time zone to convert <em>dateTime</em> to.</p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The date and time in the destination time zone.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The value of the <em>dateTime</em> parameter represents an invalid time.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The value of the <em>destinationTimeZone</em> parameter is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: TimeZoneInfo.ConvertTime(DateTime, TimeZoneInfo)\n- uid: System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)\n  commentId: M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)\n  id: ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)\n  parent: System.TimeZoneInfo\n  langs:\n  - csharp\n  - vb\n  name: ConvertTime(DateTime, TimeZoneInfo, TimeZoneInfo)\n  fullName: System.TimeZoneInfo.ConvertTime(System.DateTime, System.TimeZoneInfo, System.TimeZoneInfo)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/TimeZoneInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ConvertTime\n    path: src/mscorlib/src/System/TimeZoneInfo.cs\n    startLine: 779\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts a time from one time zone to another.</p>\\n\"\n  syntax:\n    content: public static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone)\n    content.vb: Public Shared Function ConvertTime(dateTime As Date, sourceTimeZone As TimeZoneInfo, destinationTimeZone As TimeZoneInfo) As Date\n    parameters:\n    - id: dateTime\n      type: System.DateTime\n      description: \"\\n<p>The date and time to convert.</p>\\n\"\n    - id: sourceTimeZone\n      type: System.TimeZoneInfo\n      description: \"\\n<p>The time zone of <em>dateTime</em>.</p>\\n\"\n    - id: destinationTimeZone\n      type: System.TimeZoneInfo\n      description: \"\\n<p>The time zone to convert <em>dateTime</em> to.</p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The date and time in the destination time zone that corresponds to the <em>dateTime</em> parameter in the source time zone.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <xref href=\\\"System.DateTime.Kind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the <em>dateTime</em> parameter is <xref href=\\\"System.DateTimeKind.Local\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, but the <em>sourceTimeZone</em> parameter does not equal <xref href=\\\"System.DateTimeKind.Local\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. For more information, see the Remarks section. </p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.DateTime.Kind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the <em>dateTime</em> parameter is <xref href=\\\"System.DateTimeKind.Utc\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, but the <em>sourceTimeZone</em> parameter does not equal <xref href=\\\"System.TimeZoneInfo.Utc\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>The <em>dateTime</em> parameter is an invalid time (that is, it represents a time that does not exist because of a time zone's adjustment rules).</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>sourceTimeZone</em> parameter is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>destinationTimeZone</em> parameter is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId\n    commentId: Overload:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: TimeZoneInfo.ConvertTime(DateTime, TimeZoneInfo, TimeZoneInfo)\n- uid: System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)\n  commentId: M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)\n  id: ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)\n  parent: System.TimeZoneInfo\n  langs:\n  - csharp\n  - vb\n  name: ConvertTime(DateTimeOffset, TimeZoneInfo)\n  fullName: System.TimeZoneInfo.ConvertTime(System.DateTimeOffset, System.TimeZoneInfo)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/TimeZoneInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ConvertTime\n    path: src/mscorlib/src/System/TimeZoneInfo.cs\n    startLine: 736\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts a time to the time in a particular time zone.</p>\\n\"\n  syntax:\n    content: public static DateTimeOffset ConvertTime(DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone)\n    content.vb: Public Shared Function ConvertTime(dateTimeOffset As DateTimeOffset, destinationTimeZone As TimeZoneInfo) As DateTimeOffset\n    parameters:\n    - id: dateTimeOffset\n      type: System.DateTimeOffset\n      description: \"\\n<p>The date and time to convert.   </p>\\n\"\n    - id: destinationTimeZone\n      type: System.TimeZoneInfo\n      description: \"\\n<p>The time zone to convert <em>dateTime</em> to.</p>\\n\"\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>The date and time in the destination time zone.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The value of the <em>destinationTimeZone</em> parameter is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: TimeZoneInfo.ConvertTime(DateTimeOffset, TimeZoneInfo)\n- uid: System.TimeZoneInfo.Equals(System.TimeZoneInfo)\n  commentId: M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)\n  id: Equals(System.TimeZoneInfo)\n  parent: System.TimeZoneInfo\n  langs:\n  - csharp\n  - vb\n  name: Equals(TimeZoneInfo)\n  fullName: System.TimeZoneInfo.Equals(System.TimeZoneInfo)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/TimeZoneInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/TimeZoneInfo.cs\n    startLine: 904\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether the current <xref href=\\\"System.TimeZoneInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and another <xref href=\\\"System.TimeZoneInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object are equal.</p>\\n\"\n  syntax:\n    content: public bool Equals(TimeZoneInfo other)\n    content.vb: Public Function Equals(other As TimeZoneInfo) As Boolean\n    parameters:\n    - id: other\n      type: System.TimeZoneInfo\n      description: \"\\n<p>A second object to compare with the current object.  </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two <xref href=\\\"System.TimeZoneInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects are equal; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.IEquatable{System.TimeZoneInfo}.Equals(System.TimeZoneInfo)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TimeZoneInfo.Equals(TimeZoneInfo)\n- uid: System.TimeZoneInfo.FindSystemTimeZoneById(System.String)\n  commentId: M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)\n  id: FindSystemTimeZoneById(System.String)\n  parent: System.TimeZoneInfo\n  langs:\n  - csharp\n  - vb\n  name: FindSystemTimeZoneById(String)\n  fullName: System.TimeZoneInfo.FindSystemTimeZoneById(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/TimeZoneInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FindSystemTimeZoneById\n    path: src/mscorlib/src/System/TimeZoneInfo.cs\n    startLine: 2574\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Retrieves a <xref href=\\\"System.TimeZoneInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object from the registry based on its identifier.</p>\\n\"\n  syntax:\n    content: public static TimeZoneInfo FindSystemTimeZoneById(string id)\n    content.vb: Public Shared Function FindSystemTimeZoneById(id As String) As TimeZoneInfo\n    parameters:\n    - id: id\n      type: System.String\n      description: \"\\n<p>The time zone identifier, which corresponds to the <xref href=\\\"System.TimeZoneInfo.Id\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property.      </p>\\n\"\n    return:\n      type: System.TimeZoneInfo\n      description: \"\\n<p>An object whose identifier is the value of the <em>id</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>The system does not have enough memory to hold information about the time zone.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>id</em> parameter is <strong>null</strong>.</p>\\n\"\n  - type: System.TimeZoneNotFoundException\n    commentId: T:System.TimeZoneNotFoundException\n    description: \"\\n<p>The time zone identifier specified by <em>id</em> was not found. This means that a registry key whose name matches <em>id</em> does not exist, or that the key exists but does not contain any time zone data.</p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The process does not have the permissions required to read from the registry key that contains the time zone information.</p>\\n\"\n  - type: System.InvalidTimeZoneException\n    commentId: T:System.InvalidTimeZoneException\n    description: \"\\n<p>The time zone identifier was found, but the registry data is corrupted.</p>\\n\"\n  seealso:\n  - type: System.TimeZoneInfo.Id\n    commentId: P:System.TimeZoneInfo.Id\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: TimeZoneInfo.FindSystemTimeZoneById(String)\n- uid: System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)\n  commentId: M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)\n  id: GetAmbiguousTimeOffsets(System.DateTime)\n  parent: System.TimeZoneInfo\n  langs:\n  - csharp\n  - vb\n  name: GetAmbiguousTimeOffsets(DateTime)\n  fullName: System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/TimeZoneInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetAmbiguousTimeOffsets\n    path: src/mscorlib/src/System/TimeZoneInfo.cs\n    startLine: 380\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns information about the possible dates and times that an ambiguous date and time can be mapped to.</p>\\n\"\n  syntax:\n    content: public TimeSpan[] GetAmbiguousTimeOffsets(DateTime dateTime)\n    content.vb: Public Function GetAmbiguousTimeOffsets(dateTime As Date) As TimeSpan()\n    parameters:\n    - id: dateTime\n      type: System.DateTime\n      description: \"\\n<p>A date and time.</p>\\n\"\n    return:\n      type: System.TimeSpan[]\n      description: \"\\n<p>An array of objects that represents possible Coordinated Universal Time (UTC) offsets that a particular date and time can be mapped to.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>dateTime</em> is not an ambiguous time.</p>\\n\"\n  seealso:\n  - type: System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)\n    commentId: M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TimeZoneInfo.GetAmbiguousTimeOffsets(DateTime)\n- uid: System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)\n  commentId: M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)\n  id: GetAmbiguousTimeOffsets(System.DateTimeOffset)\n  parent: System.TimeZoneInfo\n  langs:\n  - csharp\n  - vb\n  name: GetAmbiguousTimeOffsets(DateTimeOffset)\n  fullName: System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/TimeZoneInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetAmbiguousTimeOffsets\n    path: src/mscorlib/src/System/TimeZoneInfo.cs\n    startLine: 343\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns information about the possible dates and times that an ambiguous date and time can be mapped to.</p>\\n\"\n  syntax:\n    content: public TimeSpan[] GetAmbiguousTimeOffsets(DateTimeOffset dateTimeOffset)\n    content.vb: Public Function GetAmbiguousTimeOffsets(dateTimeOffset As DateTimeOffset) As TimeSpan()\n    parameters:\n    - id: dateTimeOffset\n      type: System.DateTimeOffset\n      description: \"\\n<p>A date and time.</p>\\n\"\n    return:\n      type: System.TimeSpan[]\n      description: \"\\n<p>An array of objects that represents possible Coordinated Universal Time (UTC) offsets that a particular date and time can be mapped to.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>dateTimeOffset</em> is not an ambiguous time.</p>\\n\"\n  seealso:\n  - type: System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)\n    commentId: M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TimeZoneInfo.GetAmbiguousTimeOffsets(DateTimeOffset)\n- uid: System.TimeZoneInfo.GetHashCode\n  commentId: M:System.TimeZoneInfo.GetHashCode\n  id: GetHashCode\n  parent: System.TimeZoneInfo\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.TimeZoneInfo.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/TimeZoneInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/TimeZoneInfo.cs\n    startLine: 935\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Serves as a hash function for hashing algorithms and data structures such as hash tables.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer that serves as the hash code for this <xref href=\\\"System.TimeZoneInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TimeZoneInfo.GetHashCode()\n- uid: System.TimeZoneInfo.GetSystemTimeZones\n  commentId: M:System.TimeZoneInfo.GetSystemTimeZones\n  id: GetSystemTimeZones\n  parent: System.TimeZoneInfo\n  langs:\n  - csharp\n  - vb\n  name: GetSystemTimeZones()\n  fullName: System.TimeZoneInfo.GetSystemTimeZones()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/TimeZoneInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetSystemTimeZones\n    path: src/mscorlib/src/System/TimeZoneInfo.cs\n    startLine: 952\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a sorted collection of all the time zones about which information is available on the local system.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static ReadOnlyCollection<TimeZoneInfo> GetSystemTimeZones()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function GetSystemTimeZones As ReadOnlyCollection(Of TimeZoneInfo)\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.TimeZoneInfo}\n      description: \"\\n<p>A read-only collection of <xref href=\\\"System.TimeZoneInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>There is insufficient memory to store all time zone information.</p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The user does not have permission to read from the registry keys that contain time zone information.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: TimeZoneInfo.GetSystemTimeZones()\n- uid: System.TimeZoneInfo.GetUtcOffset(System.DateTime)\n  commentId: M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)\n  id: GetUtcOffset(System.DateTime)\n  parent: System.TimeZoneInfo\n  langs:\n  - csharp\n  - vb\n  name: GetUtcOffset(DateTime)\n  fullName: System.TimeZoneInfo.GetUtcOffset(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/TimeZoneInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetUtcOffset\n    path: src/mscorlib/src/System/TimeZoneInfo.cs\n    startLine: 471\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Calculates the offset or difference between the time in this time zone and Coordinated Universal Time (UTC) for a particular date and time.</p>\\n\"\n  syntax:\n    content: public TimeSpan GetUtcOffset(DateTime dateTime)\n    content.vb: Public Function GetUtcOffset(dateTime As Date) As TimeSpan\n    parameters:\n    - id: dateTime\n      type: System.DateTime\n      description: \"\\n<p>The date and time to determine the offset for.   </p>\\n\"\n    return:\n      type: System.TimeSpan\n      description: \"\\n<p>An object that indicates the time difference between the two time zones.</p>\\n\"\n  seealso:\n  - type: System.TimeZoneInfo.BaseUtcOffset\n    commentId: P:System.TimeZoneInfo.BaseUtcOffset\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TimeZoneInfo.GetUtcOffset(DateTime)\n- uid: System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)\n  commentId: M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)\n  id: GetUtcOffset(System.DateTimeOffset)\n  parent: System.TimeZoneInfo\n  langs:\n  - csharp\n  - vb\n  name: GetUtcOffset(DateTimeOffset)\n  fullName: System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/TimeZoneInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetUtcOffset\n    path: src/mscorlib/src/System/TimeZoneInfo.cs\n    startLine: 466\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Calculates the offset or difference between the time in this time zone and Coordinated Universal Time (UTC) for a particular date and time.</p>\\n\"\n  syntax:\n    content: public TimeSpan GetUtcOffset(DateTimeOffset dateTimeOffset)\n    content.vb: Public Function GetUtcOffset(dateTimeOffset As DateTimeOffset) As TimeSpan\n    parameters:\n    - id: dateTimeOffset\n      type: System.DateTimeOffset\n      description: \"\\n<p>The date and time to determine the offset for.</p>\\n\"\n    return:\n      type: System.TimeSpan\n      description: \"\\n<p>An object that indicates the time difference between Coordinated Universal Time (UTC) and the current time zone.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TimeZoneInfo.GetUtcOffset(DateTimeOffset)\n- uid: System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)\n  commentId: M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)\n  id: IsAmbiguousTime(System.DateTime)\n  parent: System.TimeZoneInfo\n  langs:\n  - csharp\n  - vb\n  name: IsAmbiguousTime(DateTime)\n  fullName: System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/TimeZoneInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsAmbiguousTime\n    path: src/mscorlib/src/System/TimeZoneInfo.cs\n    startLine: 542\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether a particular date and time in a particular time zone is ambiguous and can be mapped to two or more Coordinated Universal Time (UTC) times.</p>\\n\"\n  syntax:\n    content: public bool IsAmbiguousTime(DateTime dateTime)\n    content.vb: Public Function IsAmbiguousTime(dateTime As Date) As Boolean\n    parameters:\n    - id: dateTime\n      type: System.DateTime\n      description: \"\\n<p>A date and time value.   </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>dateTime</em> parameter is ambiguous; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <xref href=\\\"System.DateTime.Kind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the <em>dateTime</em> value is <xref href=\\\"System.DateTimeKind.Local\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <em>dateTime</em> is an invalid time.</p>\\n\"\n  seealso:\n  - type: System.TimeZoneInfo.IsInvalidTime(System.DateTime)\n    commentId: M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TimeZoneInfo.IsAmbiguousTime(DateTime)\n- uid: System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)\n  commentId: M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)\n  id: IsAmbiguousTime(System.DateTimeOffset)\n  parent: System.TimeZoneInfo\n  langs:\n  - csharp\n  - vb\n  name: IsAmbiguousTime(DateTimeOffset)\n  fullName: System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/TimeZoneInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsAmbiguousTime\n    path: src/mscorlib/src/System/TimeZoneInfo.cs\n    startLine: 532\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether a particular date and time in a particular time zone is ambiguous and can be mapped to two or more Coordinated Universal Time (UTC) times.</p>\\n\"\n  syntax:\n    content: public bool IsAmbiguousTime(DateTimeOffset dateTimeOffset)\n    content.vb: Public Function IsAmbiguousTime(dateTimeOffset As DateTimeOffset) As Boolean\n    parameters:\n    - id: dateTimeOffset\n      type: System.DateTimeOffset\n      description: \"\\n<p>A date and time.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>dateTimeOffset</em> parameter is ambiguous in the current time zone; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TimeZoneInfo.IsAmbiguousTime(DateTimeOffset)\n- uid: System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)\n  commentId: M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)\n  id: IsDaylightSavingTime(System.DateTime)\n  parent: System.TimeZoneInfo\n  langs:\n  - csharp\n  - vb\n  name: IsDaylightSavingTime(DateTime)\n  fullName: System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/TimeZoneInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsDaylightSavingTime\n    path: src/mscorlib/src/System/TimeZoneInfo.cs\n    startLine: 587\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether a specified date and time falls in the range of daylight saving time for the time zone of the current <xref href=\\\"System.TimeZoneInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public bool IsDaylightSavingTime(DateTime dateTime)\n    content.vb: Public Function IsDaylightSavingTime(dateTime As Date) As Boolean\n    parameters:\n    - id: dateTime\n      type: System.DateTime\n      description: \"\\n<p>A date and time value.   </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>dateTime</em> parameter is a daylight saving time; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <xref href=\\\"System.DateTime.Kind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the <em>dateTime</em> value is <xref href=\\\"System.DateTimeKind.Local\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <em>dateTime</em> is an invalid time.</p>\\n\"\n  seealso:\n  - type: System.TimeZoneInfo.SupportsDaylightSavingTime\n    commentId: P:System.TimeZoneInfo.SupportsDaylightSavingTime\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TimeZoneInfo.IsDaylightSavingTime(DateTime)\n- uid: System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)\n  commentId: M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)\n  id: IsDaylightSavingTime(System.DateTimeOffset)\n  parent: System.TimeZoneInfo\n  langs:\n  - csharp\n  - vb\n  name: IsDaylightSavingTime(DateTimeOffset)\n  fullName: System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/TimeZoneInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsDaylightSavingTime\n    path: src/mscorlib/src/System/TimeZoneInfo.cs\n    startLine: 580\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether a specified date and time falls in the range of daylight saving time for the time zone of the current <xref href=\\\"System.TimeZoneInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public bool IsDaylightSavingTime(DateTimeOffset dateTimeOffset)\n    content.vb: Public Function IsDaylightSavingTime(dateTimeOffset As DateTimeOffset) As Boolean\n    parameters:\n    - id: dateTimeOffset\n      type: System.DateTimeOffset\n      description: \"\\n<p>A date and time value.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>dateTimeOffset</em> parameter is a daylight saving time; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.TimeZoneInfo.SupportsDaylightSavingTime\n    commentId: P:System.TimeZoneInfo.SupportsDaylightSavingTime\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TimeZoneInfo.IsDaylightSavingTime(DateTimeOffset)\n- uid: System.TimeZoneInfo.IsInvalidTime(System.DateTime)\n  commentId: M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)\n  id: IsInvalidTime(System.DateTime)\n  parent: System.TimeZoneInfo\n  langs:\n  - csharp\n  - vb\n  name: IsInvalidTime(DateTime)\n  fullName: System.TimeZoneInfo.IsInvalidTime(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/TimeZoneInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsInvalidTime\n    path: src/mscorlib/src/System/TimeZoneInfo.cs\n    startLine: 658\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether a particular date and time is invalid.</p>\\n\"\n  syntax:\n    content: public bool IsInvalidTime(DateTime dateTime)\n    content.vb: Public Function IsInvalidTime(dateTime As Date) As Boolean\n    parameters:\n    - id: dateTime\n      type: System.DateTime\n      description: \"\\n<p>A date and time value.   </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>dateTime</em> is invalid; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)\n    commentId: M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TimeZoneInfo.IsInvalidTime(DateTime)\n- uid: System.TimeZoneInfo.ToString\n  commentId: M:System.TimeZoneInfo.ToString\n  id: ToString\n  parent: System.TimeZoneInfo\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.TimeZoneInfo.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/TimeZoneInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/TimeZoneInfo.cs\n    startLine: 1105\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the current <xref href=\\\"System.TimeZoneInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object's display name.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The value of the <xref href=\\\"System.TimeZoneInfo.DisplayName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the current <xref href=\\\"System.TimeZoneInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TimeZoneInfo.ToString()\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IEquatable{System.TimeZoneInfo}\n  parent: System\n  definition: System.IEquatable`1\n  name: IEquatable<TimeZoneInfo>\n  fullName: System.IEquatable<System.TimeZoneInfo>\n  fullname.vb: System.IEquatable(Of System.TimeZoneInfo)\n  name.vb: IEquatable(Of TimeZoneInfo)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - uid: System.TimeZoneInfo\n    name: TimeZoneInfo\n    fullName: System.TimeZoneInfo\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.TimeZoneInfo\n    name: TimeZoneInfo\n    fullName: System.TimeZoneInfo\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<TimeZoneInfo>\n  nameWithType.vb: IEquatable(Of TimeZoneInfo)\n  commentId: T:System.IEquatable{System.TimeZoneInfo}\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.IEquatable`1\n  isExternal: false\n  name: IEquatable<T>\n  fullName: System.IEquatable<T>\n  fullname.vb: System.IEquatable(Of T)\n  name.vb: IEquatable(Of T)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<T>\n  nameWithType.vb: IEquatable(Of T)\n  commentId: T:System.IEquatable`1\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  fullName: System.TimeSpan\n  nameWithType: TimeSpan\n  commentId: T:System.TimeSpan\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.TimeZoneInfo\n  parent: System\n  isExternal: false\n  name: TimeZoneInfo\n  fullName: System.TimeZoneInfo\n  nameWithType: TimeZoneInfo\n  commentId: T:System.TimeZoneInfo\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  fullName: System.DateTime\n  nameWithType: DateTime\n  commentId: T:System.DateTime\n- uid: System.DateTimeOffset\n  parent: System\n  isExternal: false\n  name: DateTimeOffset\n  fullName: System.DateTimeOffset\n  nameWithType: DateTimeOffset\n  commentId: T:System.DateTimeOffset\n- uid: System.IEquatable{System.TimeZoneInfo}.Equals(System.TimeZoneInfo)\n  parent: System.IEquatable{System.TimeZoneInfo}\n  definition: System.IEquatable`1.Equals(`0)\n  name: Equals(TimeZoneInfo)\n  fullName: System.IEquatable<System.TimeZoneInfo>.Equals(System.TimeZoneInfo)\n  fullname.vb: System.IEquatable(Of System.TimeZoneInfo).Equals(System.TimeZoneInfo)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<System.TimeZoneInfo>.Equals\n  - name: (\n    fullName: (\n  - uid: System.TimeZoneInfo\n    name: TimeZoneInfo\n    fullName: System.TimeZoneInfo\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of System.TimeZoneInfo).Equals\n  - name: (\n    fullName: (\n  - uid: System.TimeZoneInfo\n    name: TimeZoneInfo\n    fullName: System.TimeZoneInfo\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<TimeZoneInfo>.Equals(TimeZoneInfo)\n  nameWithType.vb: IEquatable(Of TimeZoneInfo).Equals(TimeZoneInfo)\n  commentId: M:System.IEquatable{System.TimeZoneInfo}.Equals(System.TimeZoneInfo)\n- uid: System.IEquatable`1.Equals(`0)\n  isExternal: false\n  name: Equals(T)\n  fullName: System.IEquatable<T>.Equals(T)\n  fullname.vb: System.IEquatable(Of T).Equals(T)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<T>.Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of T).Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<T>.Equals(T)\n  nameWithType.vb: IEquatable(Of T).Equals(T)\n  commentId: M:System.IEquatable`1.Equals(`0)\n- uid: System.TimeSpan[]\n  name: TimeSpan[]\n  fullName: System.TimeSpan[]\n  fullname.vb: System.TimeSpan()\n  name.vb: TimeSpan()\n  spec.csharp:\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n  - name: ()\n    fullName: ()\n  nameWithType: TimeSpan[]\n  nameWithType.vb: TimeSpan()\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.TimeZoneInfo}\n  parent: System.Collections.ObjectModel\n  definition: System.Collections.ObjectModel.ReadOnlyCollection`1\n  name: ReadOnlyCollection<TimeZoneInfo>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.TimeZoneInfo>\n  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.TimeZoneInfo)\n  name.vb: ReadOnlyCollection(Of TimeZoneInfo)\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n  - name: <\n    fullName: <\n  - uid: System.TimeZoneInfo\n    name: TimeZoneInfo\n    fullName: System.TimeZoneInfo\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.TimeZoneInfo\n    name: TimeZoneInfo\n    fullName: System.TimeZoneInfo\n  - name: )\n    fullName: )\n  nameWithType: ReadOnlyCollection<TimeZoneInfo>\n  nameWithType.vb: ReadOnlyCollection(Of TimeZoneInfo)\n  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{System.TimeZoneInfo}\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n  isExternal: false\n  name: ReadOnlyCollection<T>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>\n  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)\n  name.vb: ReadOnlyCollection(Of T)\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ReadOnlyCollection<T>\n  nameWithType.vb: ReadOnlyCollection(Of T)\n  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1\n- uid: System.Collections.ObjectModel\n  isExternal: false\n  name: System.Collections.ObjectModel\n  fullName: System.Collections.ObjectModel\n  nameWithType: System.Collections.ObjectModel\n  commentId: N:System.Collections.ObjectModel\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.OutOfMemoryException\n  isExternal: false\n  name: OutOfMemoryException\n  fullName: System.OutOfMemoryException\n  nameWithType: OutOfMemoryException\n  commentId: T:System.OutOfMemoryException\n- uid: System.TimeZoneNotFoundException\n- uid: System.Security.SecurityException\n  isExternal: false\n  name: SecurityException\n  fullName: System.Security.SecurityException\n  nameWithType: SecurityException\n  commentId: T:System.Security.SecurityException\n- uid: System.InvalidTimeZoneException\n  isExternal: false\n  name: InvalidTimeZoneException\n  fullName: System.InvalidTimeZoneException\n  nameWithType: InvalidTimeZoneException\n  commentId: T:System.InvalidTimeZoneException\n"}