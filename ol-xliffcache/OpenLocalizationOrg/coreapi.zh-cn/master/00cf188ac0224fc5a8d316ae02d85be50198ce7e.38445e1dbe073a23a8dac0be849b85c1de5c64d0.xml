{"nodes":[{"pos":[372,388],"content":"WeakReference<T>","needQuote":true,"nodes":[{"content":"WeakReference&lt;T&gt;","pos":[0,16],"source":"WeakReference<T>"}]},{"content":"\\n&lt;p&gt;The type of the object referenced.&lt;/p&gt;\\n","pos":[1207,1252],"source":"\\n<p>The type of the object referenced.</p>\\n"},{"pos":[2008,2024],"content":"WeakReference(T)","needQuote":true,"nodes":[{"content":"WeakReference(T)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The object to reference, or &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[2740,2801],"source":"\\n<p>The object to reference, or <strong>null</strong>.</p>\\n"},{"pos":[3245,3270],"content":"WeakReference(T, Boolean)","needQuote":true,"nodes":[{"content":"WeakReference(T, Boolean)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The object to reference, or &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[4101,4162],"source":"\\n<p>The object to reference, or <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to track the object after finalization; &lt;strong&gt;false&lt;/strong&gt; to track the object only until finalization.&lt;/p&gt;\\n","pos":[4239,4381],"source":"\\n<p>\\n<strong>true</strong> to track the object after finalization; <strong>false</strong> to track the object only until finalization.</p>\\n"},{"pos":[4809,4819],"content":"Finalize()","needQuote":true,"nodes":[{"content":"Finalize()","pos":[0,10]}]},{"pos":[5851,5863],"content":"SetTarget(T)","needQuote":true,"nodes":[{"content":"SetTarget(T)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The new target object.&lt;/p&gt;\\n","pos":[6561,6594],"source":"\\n<p>The new target object.</p>\\n"},{"pos":[7003,7022],"content":"TryGetTarget(out T)","needQuote":true,"nodes":[{"content":"TryGetTarget(out T)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;When this method returns, contains the target object, if it is available.","pos":[7916,7994],"source":"\\n<p>When this method returns, contains the target object, if it is available."},{"content":"This parameter is treated as uninitialized.&lt;/p&gt;\\n","pos":[7995,8044],"source":" This parameter is treated as uninitialized.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the target was retrieved; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8105,8203],"source":"\\n<p>\\n<strong>true</strong> if the target was retrieved; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[8528,8534],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[8665,8671],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8831,8841],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[8936,8944],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[9013,9014],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9041,9042],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9112,9120],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[9189,9190],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9217,9218],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9401,9415],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[9534,9540],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9607,9608],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9658,9664],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9724,9725],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9808,9814],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9881,9882],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9932,9938],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9998,9999],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10213,10235],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[10383,10389],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10456,10457],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10507,10513],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10574,10575]},{"pos":[10630,10636],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10696,10697],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10794,10800],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10867,10868],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10918,10924],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10985,10986]},{"pos":[11041,11047],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11107,11108],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11353,11384],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[11550,11565],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[11641,11642],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11692,11698],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11759,11760]},{"pos":[11815,11821],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11881,11882],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11988,12003],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[12079,12080],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12130,12136],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12197,12198]},{"pos":[12253,12259],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12319,12320],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12550,12563],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[12664,12675],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[12747,12748],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12775,12776],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12849,12860],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[12932,12933],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12960,12961],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13136,13145],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[13238,13245],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[13313,13314],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13341,13342],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13411,13418],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[13486,13487],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13514,13515],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13690,13707],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[13816,13831],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[13907,13908],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13935,13936],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14013,14028],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[14104,14105],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14132,14133],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14273,14274],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[14363,14364],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[14464,14471],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]}],"content":"items:\n- uid: System.WeakReference`1\n  commentId: T:System.WeakReference`1\n  id: WeakReference`1\n  parent: System\n  children:\n  - System.WeakReference`1.#ctor(`0)\n  - System.WeakReference`1.#ctor(`0,System.Boolean)\n  - System.WeakReference`1.Finalize\n  - System.WeakReference`1.SetTarget(`0)\n  - System.WeakReference`1.TryGetTarget(`0@)\n  langs:\n  - csharp\n  - vb\n  name: WeakReference<T>\n  fullName: System.WeakReference<T>\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/WeakReferenceOfT.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WeakReference\n    path: src/mscorlib/src/System/WeakReferenceOfT.cs\n    startLine: 20\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents a typed weak reference, which references an object while still allowing that object to be reclaimed by garbage collection.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      public sealed class WeakReference<T> : ISerializable where T : class\n    content.vb: >-\n      <Serializable>\n\n      Public NotInheritable Class WeakReference(Of T As Class)\n          Implements ISerializable\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the object referenced.</p>\\n\"\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  fullName.vb: System.WeakReference(Of T)\n  name.vb: WeakReference(Of T)\n  nameWithType: WeakReference<T>\n  nameWithType.vb: WeakReference(Of T)\n- uid: System.WeakReference`1.#ctor(`0)\n  commentId: M:System.WeakReference`1.#ctor(`0)\n  id: '#ctor(`0)'\n  parent: System.WeakReference`1\n  langs:\n  - csharp\n  - vb\n  name: WeakReference(T)\n  fullName: System.WeakReference<T>.WeakReference(T)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/WeakReferenceOfT.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/WeakReferenceOfT.cs\n    startLine: 32\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.WeakReference`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that references the specified object.</p>\\n\"\n  syntax:\n    content: public WeakReference(T target)\n    content.vb: Public Sub New(target As T)\n    parameters:\n    - id: target\n      type: '{T}'\n      description: \"\\n<p>The object to reference, or <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.WeakReference(Of T).WeakReference(T)\n  nameWithType: WeakReference<T>.WeakReference(T)\n  nameWithType.vb: WeakReference(Of T).WeakReference(T)\n- uid: System.WeakReference`1.#ctor(`0,System.Boolean)\n  commentId: M:System.WeakReference`1.#ctor(`0,System.Boolean)\n  id: '#ctor(`0,System.Boolean)'\n  parent: System.WeakReference`1\n  langs:\n  - csharp\n  - vb\n  name: WeakReference(T, Boolean)\n  fullName: System.WeakReference<T>.WeakReference(T, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/WeakReferenceOfT.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/WeakReferenceOfT.cs\n    startLine: 39\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.WeakReference`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that references the specified object and uses the specified resurrection tracking.</p>\\n\"\n  syntax:\n    content: public WeakReference(T target, bool trackResurrection)\n    content.vb: Public Sub New(target As T, trackResurrection As Boolean)\n    parameters:\n    - id: target\n      type: '{T}'\n      description: \"\\n<p>The object to reference, or <strong>null</strong>.</p>\\n\"\n    - id: trackResurrection\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to track the object after finalization; <strong>false</strong> to track the object only until finalization.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.WeakReference(Of T).WeakReference(T, System.Boolean)\n  nameWithType: WeakReference<T>.WeakReference(T, Boolean)\n  nameWithType.vb: WeakReference(Of T).WeakReference(T, Boolean)\n- uid: System.WeakReference`1.Finalize\n  commentId: M:System.WeakReference`1.Finalize\n  id: Finalize\n  parent: System.WeakReference`1\n  langs:\n  - csharp\n  - vb\n  name: Finalize()\n  fullName: System.WeakReference<T>.Finalize()\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Discards the reference to the target that is represented by the current <xref href=\\\"System.WeakReference`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      [SecuritySafeCritical]\n\n      protected void Finalize()\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      <SecuritySafeCritical>\n\n      Protected Sub Finalize\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  fullName.vb: System.WeakReference(Of T).Finalize()\n  nameWithType: WeakReference<T>.Finalize()\n  nameWithType.vb: WeakReference(Of T).Finalize()\n- uid: System.WeakReference`1.SetTarget(`0)\n  commentId: M:System.WeakReference`1.SetTarget(`0)\n  id: SetTarget(`0)\n  parent: System.WeakReference`1\n  langs:\n  - csharp\n  - vb\n  name: SetTarget(T)\n  fullName: System.WeakReference<T>.SetTarget(T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/WeakReferenceOfT.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetTarget\n    path: src/mscorlib/src/System/WeakReferenceOfT.cs\n    startLine: 73\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Sets the target object that is referenced by this <xref href=\\\"System.WeakReference`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public void SetTarget(T target)\n    content.vb: Public Sub SetTarget(target As T)\n    parameters:\n    - id: target\n      type: '{T}'\n      description: \"\\n<p>The new target object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.WeakReference(Of T).SetTarget(T)\n  nameWithType: WeakReference<T>.SetTarget(T)\n  nameWithType.vb: WeakReference(Of T).SetTarget(T)\n- uid: System.WeakReference`1.TryGetTarget(`0@)\n  commentId: M:System.WeakReference`1.TryGetTarget(`0@)\n  id: TryGetTarget(`0@)\n  parent: System.WeakReference`1\n  langs:\n  - csharp\n  - vb\n  name: TryGetTarget(out T)\n  fullName: System.WeakReference<T>.TryGetTarget(out T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/WeakReferenceOfT.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryGetTarget\n    path: src/mscorlib/src/System/WeakReferenceOfT.cs\n    startLine: 64\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Tries to retrieve the target object that is referenced by the current <xref href=\\\"System.WeakReference`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.AggressiveInlining)]\n\n      public bool TryGetTarget(out T target)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.AggressiveInlining)>\n\n      Public Function TryGetTarget(ByRef target As T) As Boolean\n    parameters:\n    - id: target\n      type: '{T}'\n      description: \"\\n<p>When this method returns, contains the target object, if it is available. This parameter is treated as uninitialized.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the target was retrieved; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.WeakReference(Of T).TryGetTarget(ByRef T)\n  name.vb: TryGetTarget(ByRef T)\n  nameWithType: WeakReference<T>.TryGetTarget(out T)\n  nameWithType.vb: WeakReference(Of T).TryGetTarget(ByRef T)\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: '{T}'\n  definition: T\n  name: T\n  fullName: T\n  nameWithType: T\n  commentId: '!:T'\n- uid: T\n  isExternal: false\n  name: T\n  fullName: T\n  nameWithType: T\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n"}