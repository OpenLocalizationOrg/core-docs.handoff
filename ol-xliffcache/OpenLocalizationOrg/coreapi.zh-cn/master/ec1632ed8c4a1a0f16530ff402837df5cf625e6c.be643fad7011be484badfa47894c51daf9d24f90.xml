{"nodes":[{"pos":[445,453],"content":"KeySizes","needQuote":true,"nodes":[{"content":"KeySizes","pos":[0,8]}]},{"pos":[1948,1977],"content":"KeySizes(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"KeySizes(Int32, Int32, Int32)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The minimum valid key size.","pos":[2971,3003],"source":"\\n<p>The minimum valid key size."},{"content":"&lt;/p&gt;\\n","pos":[3004,3010],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum valid key size.","pos":[3075,3107],"source":"\\n<p>The maximum valid key size."},{"content":"&lt;/p&gt;\\n","pos":[3108,3114],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The interval between valid key sizes.","pos":[3180,3222],"source":"\\n<p>The interval between valid key sizes."},{"content":"&lt;/p&gt;\\n","pos":[3223,3229],"source":" </p>\\n"},{"pos":[3555,3562],"content":"MaxSize","needQuote":true,"nodes":[{"content":"MaxSize","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The maximum key size in bits.&lt;/p&gt;\\n","pos":[4320,4360],"source":"\\n<p>The maximum key size in bits.</p>\\n"},{"pos":[4685,4692],"content":"MinSize","needQuote":true,"nodes":[{"content":"MinSize","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The minimum key size in bits.&lt;/p&gt;\\n","pos":[5450,5490],"source":"\\n<p>The minimum key size in bits.</p>\\n"},{"pos":[5818,5826],"content":"SkipSize","needQuote":true,"nodes":[{"content":"SkipSize","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The interval between valid key sizes in bits.&lt;/p&gt;\\n","pos":[6604,6660],"source":"\\n<p>The interval between valid key sizes in bits.</p>\\n"},{"pos":[6851,6879],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[7076,7082],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7242,7252],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[7347,7355],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7424,7425],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7452,7453],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7523,7531],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7600,7601],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7628,7629],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7812,7826],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[7945,7951],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8018,8019],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8069,8075],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8135,8136],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8219,8225],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8292,8293],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8343,8349],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8409,8410],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8624,8646],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[8794,8800],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8867,8868],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8918,8924],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8985,8986]},{"pos":[9041,9047],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9107,9108],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9205,9211],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9278,9279],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9329,9335],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9396,9397]},{"pos":[9452,9458],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9518,9519],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9764,9795],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[9961,9976],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10052,10053],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10103,10109],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10170,10171]},{"pos":[10226,10232],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10292,10293],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10399,10414],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10490,10491],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10541,10547],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10608,10609]},{"pos":[10664,10670],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10730,10731],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10961,10974],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[11075,11086],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[11158,11159],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11186,11187],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11260,11271],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[11343,11344],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11371,11372],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11547,11556],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[11649,11656],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11724,11725],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11752,11753],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11822,11829],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11897,11898],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11925,11926],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12101,12118],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[12227,12242],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12318,12319],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12346,12347],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12424,12439],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12515,12516],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12543,12544],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12689,12695],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[12825,12830],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]}],"content":"items:\n- uid: System.Security.Cryptography.KeySizes\n  commentId: T:System.Security.Cryptography.KeySizes\n  id: KeySizes\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.KeySizes.#ctor(System.Int32,System.Int32,System.Int32)\n  - System.Security.Cryptography.KeySizes.MaxSize\n  - System.Security.Cryptography.KeySizes.MinSize\n  - System.Security.Cryptography.KeySizes.SkipSize\n  langs:\n  - csharp\n  - vb\n  name: KeySizes\n  fullName: System.Security.Cryptography.KeySizes\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: KeySizes\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 114\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Determines the set of valid key sizes for the symmetric cryptographic algorithms.</p>\\n\"\n  syntax:\n    content: public sealed class KeySizes\n    content.vb: Public NotInheritable Class KeySizes\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: KeySizes\n- uid: System.Security.Cryptography.KeySizes.#ctor(System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Security.Cryptography.KeySizes.#ctor(System.Int32,System.Int32,System.Int32)\n  id: '#ctor(System.Int32,System.Int32,System.Int32)'\n  parent: System.Security.Cryptography.KeySizes\n  langs:\n  - csharp\n  - vb\n  name: KeySizes(Int32, Int32, Int32)\n  fullName: System.Security.Cryptography.KeySizes.KeySizes(System.Int32, System.Int32, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 116\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.KeySizes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified key values.</p>\\n\"\n  syntax:\n    content: public KeySizes(int minSize, int maxSize, int skipSize)\n    content.vb: Public Sub New(minSize As Integer, maxSize As Integer, skipSize As Integer)\n    parameters:\n    - id: minSize\n      type: System.Int32\n      description: \"\\n<p>The minimum valid key size. </p>\\n\"\n    - id: maxSize\n      type: System.Int32\n      description: \"\\n<p>The maximum valid key size. </p>\\n\"\n    - id: skipSize\n      type: System.Int32\n      description: \"\\n<p>The interval between valid key sizes. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: KeySizes.KeySizes(Int32, Int32, Int32)\n- uid: System.Security.Cryptography.KeySizes.MaxSize\n  commentId: P:System.Security.Cryptography.KeySizes.MaxSize\n  id: MaxSize\n  parent: System.Security.Cryptography.KeySizes\n  langs:\n  - csharp\n  - vb\n  name: MaxSize\n  fullName: System.Security.Cryptography.KeySizes.MaxSize\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MaxSize\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 117\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Specifies the maximum key size in bits.</p>\\n\"\n  syntax:\n    content: public int MaxSize { get; }\n    content.vb: Public ReadOnly Property MaxSize As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The maximum key size in bits.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: KeySizes.MaxSize\n- uid: System.Security.Cryptography.KeySizes.MinSize\n  commentId: P:System.Security.Cryptography.KeySizes.MinSize\n  id: MinSize\n  parent: System.Security.Cryptography.KeySizes\n  langs:\n  - csharp\n  - vb\n  name: MinSize\n  fullName: System.Security.Cryptography.KeySizes.MinSize\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MinSize\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 118\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Specifies the minimum key size in bits.</p>\\n\"\n  syntax:\n    content: public int MinSize { get; }\n    content.vb: Public ReadOnly Property MinSize As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The minimum key size in bits.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: KeySizes.MinSize\n- uid: System.Security.Cryptography.KeySizes.SkipSize\n  commentId: P:System.Security.Cryptography.KeySizes.SkipSize\n  id: SkipSize\n  parent: System.Security.Cryptography.KeySizes\n  langs:\n  - csharp\n  - vb\n  name: SkipSize\n  fullName: System.Security.Cryptography.KeySizes.SkipSize\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SkipSize\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 119\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Specifies the interval between valid key sizes in bits.</p>\\n\"\n  syntax:\n    content: public int SkipSize { get; }\n    content.vb: Public ReadOnly Property SkipSize As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The interval between valid key sizes in bits.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: KeySizes.SkipSize\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n"}