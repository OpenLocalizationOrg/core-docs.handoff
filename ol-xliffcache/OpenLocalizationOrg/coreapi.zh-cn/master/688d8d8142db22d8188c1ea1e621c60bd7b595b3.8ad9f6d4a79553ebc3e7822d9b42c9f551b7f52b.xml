{"nodes":[{"pos":[991,1032],"content":"SortedDictionary<TKey, TValue>.Enumerator","needQuote":true,"nodes":[{"content":"SortedDictionary&lt;TKey, TValue&gt;.Enumerator","pos":[0,41],"source":"SortedDictionary<TKey, TValue>.Enumerator"}]},{"pos":[4225,4232],"content":"Current","needQuote":true,"nodes":[{"content":"Current","pos":[0,7]}]},{"pos":[6257,6284],"content":"IDictionaryEnumerator.Entry","needQuote":true,"nodes":[{"content":"IDictionaryEnumerator.Entry","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The enumerator is positioned before the first element of the collection or after the last element.","pos":[7681,7784],"source":"\\n<p>The enumerator is positioned before the first element of the collection or after the last element."},{"content":"&lt;/p&gt;\\n","pos":[7785,7791],"source":" </p>\\n"},{"pos":[9222,9247],"content":"IDictionaryEnumerator.Key","needQuote":true,"nodes":[{"content":"IDictionaryEnumerator.Key","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The key of the element in the collection at the current position of the enumerator.&lt;/p&gt;\\n","pos":[10175,10269],"source":"\\n<p>The key of the element in the collection at the current position of the enumerator.</p>\\n"},{"content":"\\n&lt;p&gt;The enumerator is positioned before the first element of the collection or after the last element.","pos":[10396,10499],"source":"\\n<p>The enumerator is positioned before the first element of the collection or after the last element."},{"content":"&lt;/p&gt;\\n","pos":[10500,10506],"source":" </p>\\n"},{"pos":[11933,11960],"content":"IDictionaryEnumerator.Value","needQuote":true,"nodes":[{"content":"IDictionaryEnumerator.Value","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The value of the element in the collection at the current position of the enumerator.&lt;/p&gt;\\n","pos":[12900,12996],"source":"\\n<p>The value of the element in the collection at the current position of the enumerator.</p>\\n"},{"content":"\\n&lt;p&gt;The enumerator is positioned before the first element of the collection or after the last element.","pos":[13123,13226],"source":"\\n<p>The enumerator is positioned before the first element of the collection or after the last element."},{"content":"&lt;/p&gt;\\n","pos":[13227,13233],"source":" </p>\\n"},{"pos":[14646,14665],"content":"IEnumerator.Current","needQuote":true,"nodes":[{"content":"IEnumerator.Current","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The element in the collection at the current position of the enumerator.&lt;/p&gt;\\n","pos":[15552,15635],"source":"\\n<p>The element in the collection at the current position of the enumerator.</p>\\n"},{"content":"\\n&lt;p&gt;The enumerator is positioned before the first element of the collection or after the last element.","pos":[15762,15865],"source":"\\n<p>The enumerator is positioned before the first element of the collection or after the last element."},{"content":"&lt;/p&gt;\\n","pos":[15866,15872],"source":" </p>\\n"},{"pos":[17026,17035],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[18386,18396],"content":"MoveNext()","needQuote":true,"nodes":[{"content":"MoveNext()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the enumerator was successfully advanced to the next element; &lt;strong&gt;false&lt;/strong&gt; if the enumerator has passed the end of the collection.&lt;/p&gt;\\n","pos":[19218,19396],"source":"\\n<p>\\n<strong>true</strong> if the enumerator was successfully advanced to the next element; <strong>false</strong> if the enumerator has passed the end of the collection.</p>\\n"},{"content":"\\n&lt;p&gt;The collection was modified after the enumerator was created.","pos":[19523,19589],"source":"\\n<p>The collection was modified after the enumerator was created."},{"content":"&lt;/p&gt;\\n","pos":[19590,19596],"source":" </p>\\n"},{"pos":[20493,20512],"content":"IEnumerator.Reset()","needQuote":true,"nodes":[{"content":"IEnumerator.Reset()","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The collection was modified after the enumerator was created.","pos":[21432,21498],"source":"\\n<p>The collection was modified after the enumerator was created."},{"content":"&lt;/p&gt;\\n","pos":[21499,21505],"source":" </p>\\n"},{"pos":[22458,22484],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[22813,22852],"content":"IEnumerator<KeyValuePair<TKey, TValue>>","needQuote":true,"nodes":[{"content":"IEnumerator&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;","pos":[0,39],"source":"IEnumerator<KeyValuePair<TKey, TValue>>"}]},{"pos":[23206,23217],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[23302,23303],"content":"<","needQuote":true,"nodes":[]},{"pos":[23381,23393],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"pos":[23479,23480],"content":"<","needQuote":true,"nodes":[]},{"pos":[23507,23511],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[23542,23543]},{"pos":[23575,23581],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[23738,23749],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"content":"(Of","pos":[23835,23838]},{"pos":[23923,23935],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"content":"(Of","pos":[24022,24025]},{"pos":[24059,24063],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[24094,24095]},{"pos":[24127,24133],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[24165,24166],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24193,24194],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24539,24560],"content":"IDictionaryEnumerator","needQuote":true,"nodes":[{"content":"IDictionaryEnumerator","pos":[0,21]}]},{"pos":[24803,24814],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[25003,25014],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[25208,25222],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[25347,25353],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25402,25403],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25453,25459],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25519,25520],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25606,25612],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25661,25662],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25712,25718],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25778,25779],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25982,25995],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[26102,26113],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[26167,26168],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26195,26196],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26272,26283],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[26337,26338],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26365,26366],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26555,26565],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[26666,26674],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[26725,26726],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26753,26754],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26827,26835],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[26886,26887],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26914,26915],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27118,27140],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[27288,27294],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27361,27362],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27412,27418],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27479,27480]},{"pos":[27535,27541],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27601,27602],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27699,27705],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27772,27773],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27823,27829],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27890,27891]},{"pos":[27946,27952],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28012,28013],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28258,28289],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[28455,28470],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[28546,28547],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28597,28603],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28664,28665]},{"pos":[28720,28726],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28786,28787],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28893,28908],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[28984,28985],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29035,29041],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29102,29103]},{"pos":[29158,29164],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29224,29225],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29451,29460],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[29553,29560],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[29628,29629],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29656,29657],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29726,29733],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[29801,29802],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29829,29830],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29993,30007],"content":"IEnumerator<T>","needQuote":true,"nodes":[{"content":"IEnumerator&lt;T&gt;","pos":[0,14],"source":"IEnumerator<T>"}]},{"pos":[30226,30237],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[30301,30302],"content":"<","needQuote":true,"nodes":[]},{"pos":[30329,30330],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[30450,30461],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"content":"(Of","pos":[30526,30529]},{"pos":[30563,30564],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[30591,30592],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30787,30805],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[30948,30954],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[31088,31097],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[31251,31257],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31626,31633],"content":"Current","needQuote":true,"nodes":[{"content":"Current","pos":[0,7]}]},{"pos":[32283,32309],"content":"KeyValuePair<TKey, TValue>","needQuote":true,"nodes":[{"content":"KeyValuePair&lt;TKey, TValue&gt;","pos":[0,26],"source":"KeyValuePair<TKey, TValue>"}]},{"pos":[32565,32577],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"pos":[32663,32664],"content":"<","needQuote":true,"nodes":[]},{"pos":[32691,32695],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[32726,32727]},{"pos":[32759,32765],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[32891,32903],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"content":"(Of","pos":[32990,32993]},{"pos":[33027,33031],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[33062,33063]},{"pos":[33095,33101],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[33133,33134],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33388,33395],"content":"Current","needQuote":true,"nodes":[{"content":"Current","pos":[0,7]}]},{"pos":[33751,33777],"content":"KeyValuePair<TKey, TValue>","needQuote":true,"nodes":[{"content":"KeyValuePair&lt;TKey, TValue&gt;","pos":[0,26],"source":"KeyValuePair<TKey, TValue>"}]},{"pos":[34033,34045],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"pos":[34110,34111],"content":"<","needQuote":true,"nodes":[]},{"pos":[34138,34142],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[34173,34174]},{"pos":[34206,34212],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[34338,34350],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"content":"(Of","pos":[34416,34419]},{"pos":[34453,34457],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[34488,34489]},{"pos":[34521,34527],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[34559,34560],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34858,34863],"content":"Entry","needQuote":true,"nodes":[{"content":"Entry","pos":[0,5]}]},{"pos":[35128,35143],"content":"DictionaryEntry","needQuote":true,"nodes":[{"content":"DictionaryEntry","pos":[0,15]}]},{"pos":[35403,35406],"content":"Key","needQuote":true,"nodes":[{"content":"Key","pos":[0,3]}]},{"pos":[35698,35703],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[35984,35991],"content":"Current","needQuote":true,"nodes":[{"content":"Current","pos":[0,7]}]},{"pos":[36224,36233],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[36336,36343],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[36395,36396],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36423,36424],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36498,36505],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[36557,36558],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36585,36586],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36799,36809],"content":"MoveNext()","needQuote":true,"nodes":[{"content":"MoveNext()","pos":[0,10]}]},{"pos":[36938,36946],"content":"MoveNext","needQuote":true,"nodes":[{"content":"MoveNext","pos":[0,8]}]},{"pos":[37011,37012],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37039,37040],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37127,37135],"content":"MoveNext","needQuote":true,"nodes":[{"content":"MoveNext","pos":[0,8]}]},{"pos":[37200,37201],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37228,37229],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37407,37414],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[37609,37616],"content":"Reset()","needQuote":true,"nodes":[{"content":"Reset()","pos":[0,7]}]},{"pos":[37739,37744],"content":"Reset","needQuote":true,"nodes":[{"content":"Reset","pos":[0,5]}]},{"pos":[37806,37807],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37834,37835],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37919,37924],"content":"Reset","needQuote":true,"nodes":[{"content":"Reset","pos":[0,5]}]},{"pos":[37986,37987],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38014,38015],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38205,38230],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]}],"content":"items:\n- uid: System.Collections.Generic.SortedDictionary`2.Enumerator\n  commentId: T:System.Collections.Generic.SortedDictionary`2.Enumerator\n  id: SortedDictionary`2.Enumerator\n  parent: System.Collections.Generic\n  children:\n  - System.Collections.Generic.SortedDictionary`2.Enumerator.Current\n  - System.Collections.Generic.SortedDictionary`2.Enumerator.Dispose\n  - System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext\n  - System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry\n  - System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key\n  - System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value\n  - System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current\n  - System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Reset\n  langs:\n  - csharp\n  - vb\n  name: SortedDictionary<TKey, TValue>.Enumerator\n  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.Enumerator\n  type: Struct\n  source:\n    remote:\n      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Enumerator\n    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs\n    startLine: 440\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Enumerates the elements of a <xref href=\\\"System.Collections.Generic.SortedDictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Performance\", \"CA1815:OverrideEqualsAndOperatorEqualsOnValueTypes\", Justification = \"not an expected scenario\")]\n\n      public struct Enumerator : IEnumerator<KeyValuePair<TKey, TValue>>, IDisposable, IDictionaryEnumerator, IEnumerator\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Performance\", \"CA1815:OverrideEqualsAndOperatorEqualsOnValueTypes\", Justification:=\"not an expected scenario\")>\n\n      Public Structure Enumerator\n          Implements IEnumerator(Of KeyValuePair(Of TKey, TValue)), IDisposable, IDictionaryEnumerator, IEnumerator\n  seealso:\n  - type: System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator\n    commentId: T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator\n  - type: System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator\n    commentId: T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator\n  - type: System.Collections.Generic.IEnumerable`1\n    commentId: T:System.Collections.Generic.IEnumerable`1\n  - type: System.Collections.Generic.IEnumerator`1\n    commentId: T:System.Collections.Generic.IEnumerator`1\n  implements:\n  - System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}\n  - System.Collections.IDictionaryEnumerator\n  - System.Collections.IEnumerator\n  - System.IDisposable\n  inheritedMembers:\n  - System.ValueType.Equals(System.Object)\n  - System.ValueType.GetHashCode\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).Enumerator\n  name.vb: SortedDictionary(Of TKey, TValue).Enumerator\n  nameWithType: SortedDictionary<TKey, TValue>.Enumerator\n  nameWithType.vb: SortedDictionary(Of TKey, TValue).Enumerator\n- uid: System.Collections.Generic.SortedDictionary`2.Enumerator.Current\n  commentId: P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current\n  id: Current\n  parent: System.Collections.Generic.SortedDictionary`2.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: Current\n  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.Enumerator.Current\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Current\n    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs\n    startLine: 465\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Gets the element at the current position of the enumerator.</p>\\n\"\n  syntax:\n    content: public KeyValuePair<TKey, TValue> Current { get; }\n    content.vb: Public ReadOnly Property Current As KeyValuePair(Of TKey, TValue)\n    parameters: []\n    return:\n      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}\n      description: \"\\n<p>The element in the <xref href=\\\"System.Collections.Generic.SortedDictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the current position of the enumerator.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext\n    commentId: M:System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext\n  implements:\n  - System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Current\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).Enumerator.Current\n  nameWithType: SortedDictionary<TKey, TValue>.Enumerator.Current\n  nameWithType.vb: SortedDictionary(Of TKey, TValue).Enumerator.Current\n- uid: System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry\n  commentId: P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry\n  id: System#Collections#IDictionaryEnumerator#Entry\n  isEii: true\n  parent: System.Collections.Generic.SortedDictionary`2.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: IDictionaryEnumerator.Entry\n  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.Enumerator.System.Collections.IDictionaryEnumerator.Entry\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IDictionaryEnumerator.Entry\n    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs\n    startLine: 538\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Gets the element at the current position of the enumerator as a <xref href=\\\"System.Collections.DictionaryEntry\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: DictionaryEntry IDictionaryEnumerator.Entry { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionaryEnumerator.Entry As DictionaryEntry Implements IDictionaryEnumerator.Entry\n    parameters: []\n    return:\n      type: System.Collections.DictionaryEntry\n      description: \"\\n<p>The element in the collection at the current position of the dictionary, as a <xref href=\\\"System.Collections.DictionaryEntry\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The enumerator is positioned before the first element of the collection or after the last element. </p>\\n\"\n  seealso:\n  - type: System.Collections.IDictionaryEnumerator\n    commentId: T:System.Collections.IDictionaryEnumerator\n  - type: System.Collections.Generic.SortedDictionary`2.Enumerator.Current\n    commentId: P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current\n  - type: System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext\n    commentId: M:System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IDictionaryEnumerator.Entry\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).Enumerator.System.Collections.IDictionaryEnumerator.Entry\n  name.vb: System.Collections.IDictionaryEnumerator.Entry\n  nameWithType: SortedDictionary<TKey, TValue>.Enumerator.IDictionaryEnumerator.Entry\n  nameWithType.vb: SortedDictionary(Of TKey, TValue).Enumerator.System.Collections.IDictionaryEnumerator.Entry\n- uid: System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key\n  commentId: P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key\n  id: System#Collections#IDictionaryEnumerator#Key\n  isEii: true\n  parent: System.Collections.Generic.SortedDictionary`2.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: IDictionaryEnumerator.Key\n  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.Enumerator.System.Collections.IDictionaryEnumerator.Key\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IDictionaryEnumerator.Key\n    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs\n    startLine: 512\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Gets the key of the element at the current position of the enumerator.</p>\\n\"\n  syntax:\n    content: object IDictionaryEnumerator.Key { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionaryEnumerator.Key As Object Implements IDictionaryEnumerator.Key\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>The key of the element in the collection at the current position of the enumerator.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The enumerator is positioned before the first element of the collection or after the last element. </p>\\n\"\n  seealso:\n  - type: System.Collections.IDictionaryEnumerator\n    commentId: T:System.Collections.IDictionaryEnumerator\n  - type: System.Collections.Generic.SortedDictionary`2.Enumerator.Current\n    commentId: P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current\n  - type: System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext\n    commentId: M:System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IDictionaryEnumerator.Key\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).Enumerator.System.Collections.IDictionaryEnumerator.Key\n  name.vb: System.Collections.IDictionaryEnumerator.Key\n  nameWithType: SortedDictionary<TKey, TValue>.Enumerator.IDictionaryEnumerator.Key\n  nameWithType.vb: SortedDictionary(Of TKey, TValue).Enumerator.System.Collections.IDictionaryEnumerator.Key\n- uid: System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value\n  commentId: P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value\n  id: System#Collections#IDictionaryEnumerator#Value\n  isEii: true\n  parent: System.Collections.Generic.SortedDictionary`2.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: IDictionaryEnumerator.Value\n  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.Enumerator.System.Collections.IDictionaryEnumerator.Value\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IDictionaryEnumerator.Value\n    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs\n    startLine: 525\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Gets the value of the element at the current position of the enumerator.</p>\\n\"\n  syntax:\n    content: object IDictionaryEnumerator.Value { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionaryEnumerator.Value As Object Implements IDictionaryEnumerator.Value\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>The value of the element in the collection at the current position of the enumerator.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The enumerator is positioned before the first element of the collection or after the last element. </p>\\n\"\n  seealso:\n  - type: System.Collections.IDictionaryEnumerator\n    commentId: T:System.Collections.IDictionaryEnumerator\n  - type: System.Collections.Generic.SortedDictionary`2.Enumerator.Current\n    commentId: P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current\n  - type: System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext\n    commentId: M:System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IDictionaryEnumerator.Value\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).Enumerator.System.Collections.IDictionaryEnumerator.Value\n  name.vb: System.Collections.IDictionaryEnumerator.Value\n  nameWithType: SortedDictionary<TKey, TValue>.Enumerator.IDictionaryEnumerator.Value\n  nameWithType.vb: SortedDictionary(Of TKey, TValue).Enumerator.System.Collections.IDictionaryEnumerator.Value\n- uid: System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current\n  commentId: P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current\n  id: System#Collections#IEnumerator#Current\n  isEii: true\n  parent: System.Collections.Generic.SortedDictionary`2.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: IEnumerator.Current\n  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.Enumerator.System.Collections.IEnumerator.Current\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IEnumerator.Current\n    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs\n    startLine: 492\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Gets the element at the current position of the enumerator.</p>\\n\"\n  syntax:\n    content: object IEnumerator.Current { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IEnumerator.Current As Object Implements IEnumerator.Current\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>The element in the collection at the current position of the enumerator.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The enumerator is positioned before the first element of the collection or after the last element. </p>\\n\"\n  seealso:\n  - type: System.Collections.IEnumerator.Current\n    commentId: P:System.Collections.IEnumerator.Current\n  - type: System.Collections.IEnumerator.MoveNext\n    commentId: M:System.Collections.IEnumerator.MoveNext\n  - type: System.Collections.IEnumerator.Reset\n    commentId: M:System.Collections.IEnumerator.Reset\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IEnumerator.Current\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).Enumerator.System.Collections.IEnumerator.Current\n  name.vb: System.Collections.IEnumerator.Current\n  nameWithType: SortedDictionary<TKey, TValue>.Enumerator.IEnumerator.Current\n  nameWithType.vb: SortedDictionary(Of TKey, TValue).Enumerator.System.Collections.IEnumerator.Current\n- uid: System.Collections.Generic.SortedDictionary`2.Enumerator.Dispose\n  commentId: M:System.Collections.Generic.SortedDictionary`2.Enumerator.Dispose\n  id: Dispose\n  parent: System.Collections.Generic.SortedDictionary`2.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.Enumerator.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs\n    startLine: 460\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Releases all resources used by the <xref href=\\\"System.Collections.Generic.SortedDictionary`2.Enumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).Enumerator.Dispose()\n  nameWithType: SortedDictionary<TKey, TValue>.Enumerator.Dispose()\n  nameWithType.vb: SortedDictionary(Of TKey, TValue).Enumerator.Dispose()\n- uid: System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext\n  commentId: M:System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext\n  id: MoveNext\n  parent: System.Collections.Generic.SortedDictionary`2.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: MoveNext()\n  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.Enumerator.MoveNext()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MoveNext\n    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs\n    startLine: 455\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Advances the enumerator to the next element of the <xref href=\\\"System.Collections.Generic.SortedDictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool MoveNext()\n    content.vb: Public Function MoveNext As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the enumerator was successfully advanced to the next element; <strong>false</strong> if the enumerator has passed the end of the collection.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The collection was modified after the enumerator was created. </p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.SortedDictionary`2.Enumerator.Current\n    commentId: P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current\n  implements:\n  - System.Collections.IEnumerator.MoveNext\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).Enumerator.MoveNext()\n  nameWithType: SortedDictionary<TKey, TValue>.Enumerator.MoveNext()\n  nameWithType.vb: SortedDictionary(Of TKey, TValue).Enumerator.MoveNext()\n- uid: System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Reset\n  commentId: M:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Reset\n  id: System#Collections#IEnumerator#Reset\n  isEii: true\n  parent: System.Collections.Generic.SortedDictionary`2.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: IEnumerator.Reset()\n  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.Enumerator.System.Collections.IEnumerator.Reset()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IEnumerator.Reset\n    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs\n    startLine: 487\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Sets the enumerator to its initial position, which is before the first element in the collection.</p>\\n\"\n  syntax:\n    content: void IEnumerator.Reset()\n    content.vb: Sub System.Collections.IEnumerator.Reset Implements IEnumerator.Reset\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The collection was modified after the enumerator was created. </p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.SortedDictionary`2.Enumerator.Current\n    commentId: P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current\n  - type: System.Collections.IEnumerator.MoveNext\n    commentId: M:System.Collections.IEnumerator.MoveNext\n  - type: System.Collections.IEnumerator.Reset\n    commentId: M:System.Collections.IEnumerator.Reset\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IEnumerator.Reset\n  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).Enumerator.System.Collections.IEnumerator.Reset()\n  name.vb: System.Collections.IEnumerator.Reset()\n  nameWithType: SortedDictionary<TKey, TValue>.Enumerator.IEnumerator.Reset()\n  nameWithType.vb: SortedDictionary(Of TKey, TValue).Enumerator.System.Collections.IEnumerator.Reset()\nreferences:\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerator`1\n  name: IEnumerator<KeyValuePair<TKey, TValue>>\n  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>\n  fullname.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))\n  name.vb: IEnumerator(Of KeyValuePair(Of TKey, TValue))\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  nameWithType: IEnumerator<KeyValuePair<TKey, TValue>>\n  nameWithType.vb: IEnumerator(Of KeyValuePair(Of TKey, TValue))\n  commentId: T:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}}\n- uid: System.Collections.IDictionaryEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IDictionaryEnumerator\n  fullName: System.Collections.IDictionaryEnumerator\n  nameWithType: IDictionaryEnumerator\n  commentId: T:System.Collections.IDictionaryEnumerator\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Collections.Generic.IEnumerator`1\n  isExternal: false\n  name: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n  fullname.vb: System.Collections.Generic.IEnumerator(Of T)\n  name.vb: IEnumerator(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerator<T>\n  nameWithType.vb: IEnumerator(Of T)\n  commentId: T:System.Collections.Generic.IEnumerator`1\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Current\n  parent: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}\n  definition: System.Collections.Generic.IEnumerator`1.Current\n  name: Current\n  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Current\n  fullname.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Current\n  nameWithType: IEnumerator<KeyValuePair<TKey, TValue>>.Current\n  nameWithType.vb: IEnumerator(Of KeyValuePair(Of TKey, TValue)).Current\n  commentId: P:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}}.Current\n- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.KeyValuePair`2\n  name: KeyValuePair<TKey, TValue>\n  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>\n  fullname.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)\n  name.vb: KeyValuePair(Of TKey, TValue)\n  spec.csharp:\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: )\n    fullName: )\n  nameWithType: KeyValuePair<TKey, TValue>\n  nameWithType.vb: KeyValuePair(Of TKey, TValue)\n  commentId: T:System.Collections.Generic.KeyValuePair{`0,`1}\n- uid: System.Collections.Generic.IEnumerator`1.Current\n  isExternal: true\n  name: Current\n  fullName: System.Collections.Generic.IEnumerator<T>.Current\n  fullname.vb: System.Collections.Generic.IEnumerator(Of T).Current\n  nameWithType: IEnumerator<T>.Current\n  nameWithType.vb: IEnumerator(Of T).Current\n  commentId: P:System.Collections.Generic.IEnumerator`1.Current\n- uid: System.Collections.Generic.KeyValuePair`2\n  isExternal: false\n  name: KeyValuePair<TKey, TValue>\n  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>\n  fullname.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)\n  name.vb: KeyValuePair(Of TKey, TValue)\n  spec.csharp:\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: )\n    fullName: )\n  nameWithType: KeyValuePair<TKey, TValue>\n  nameWithType.vb: KeyValuePair(Of TKey, TValue)\n  commentId: T:System.Collections.Generic.KeyValuePair`2\n- uid: System.Collections.IDictionaryEnumerator.Entry\n  parent: System.Collections.IDictionaryEnumerator\n  isExternal: true\n  name: Entry\n  fullName: System.Collections.IDictionaryEnumerator.Entry\n  nameWithType: IDictionaryEnumerator.Entry\n  commentId: P:System.Collections.IDictionaryEnumerator.Entry\n- uid: System.Collections.DictionaryEntry\n  parent: System.Collections\n  isExternal: false\n  name: DictionaryEntry\n  fullName: System.Collections.DictionaryEntry\n  nameWithType: DictionaryEntry\n  commentId: T:System.Collections.DictionaryEntry\n- uid: System.Collections.IDictionaryEnumerator.Key\n  parent: System.Collections.IDictionaryEnumerator\n  isExternal: true\n  name: Key\n  fullName: System.Collections.IDictionaryEnumerator.Key\n  nameWithType: IDictionaryEnumerator.Key\n  commentId: P:System.Collections.IDictionaryEnumerator.Key\n- uid: System.Collections.IDictionaryEnumerator.Value\n  parent: System.Collections.IDictionaryEnumerator\n  isExternal: true\n  name: Value\n  fullName: System.Collections.IDictionaryEnumerator.Value\n  nameWithType: IDictionaryEnumerator.Value\n  commentId: P:System.Collections.IDictionaryEnumerator.Value\n- uid: System.Collections.IEnumerator.Current\n  parent: System.Collections.IEnumerator\n  isExternal: false\n  name: Current\n  fullName: System.Collections.IEnumerator.Current\n  nameWithType: IEnumerator.Current\n  commentId: P:System.Collections.IEnumerator.Current\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDisposable.Dispose()\n  commentId: M:System.IDisposable.Dispose\n- uid: System.Collections.IEnumerator.MoveNext\n  parent: System.Collections.IEnumerator\n  isExternal: false\n  name: MoveNext()\n  fullName: System.Collections.IEnumerator.MoveNext()\n  spec.csharp:\n  - uid: System.Collections.IEnumerator.MoveNext\n    name: MoveNext\n    fullName: System.Collections.IEnumerator.MoveNext\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerator.MoveNext\n    name: MoveNext\n    fullName: System.Collections.IEnumerator.MoveNext\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerator.MoveNext()\n  commentId: M:System.Collections.IEnumerator.MoveNext\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.IEnumerator.Reset\n  parent: System.Collections.IEnumerator\n  isExternal: false\n  name: Reset()\n  fullName: System.Collections.IEnumerator.Reset()\n  spec.csharp:\n  - uid: System.Collections.IEnumerator.Reset\n    name: Reset\n    fullName: System.Collections.IEnumerator.Reset\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerator.Reset\n    name: Reset\n    fullName: System.Collections.IEnumerator.Reset\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerator.Reset()\n  commentId: M:System.Collections.IEnumerator.Reset\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n"}