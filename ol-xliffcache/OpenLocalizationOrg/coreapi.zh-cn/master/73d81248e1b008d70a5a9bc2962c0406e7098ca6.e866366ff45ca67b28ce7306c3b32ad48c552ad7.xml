{"nodes":[{"pos":[778,790],"content":"SecureString","needQuote":true,"nodes":[{"content":"SecureString","pos":[0,12]}]},{"pos":[3211,3225],"content":"SecureString()","needQuote":true,"nodes":[{"content":"SecureString()","pos":[0,14]}]},{"content":"\\n&lt;p&gt;An error occurred while protecting or unprotecting the value of this instance.&lt;/p&gt;\\n","pos":[4055,4144],"source":"\\n<p>An error occurred while protecting or unprotecting the value of this instance.</p>\\n"},{"content":"\\n&lt;p&gt;This operation is not supported on this platform.&lt;/p&gt;\\n","pos":[4249,4309],"source":"\\n<p>This operation is not supported on this platform.</p>\\n"},{"pos":[4674,4700],"content":"SecureString(Char*, Int32)","needQuote":true,"nodes":[{"content":"SecureString(Char*, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The number of elements of &lt;em&gt;value&lt;/em&gt; to include in the new instance.&lt;/p&gt;\\n","pos":[6061,6144],"source":"\\n<p>The number of elements of <em>value</em> to include in the new instance.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[6263,6316],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; is less than zero or greater than 65,536.&lt;/p&gt;\\n","pos":[6433,6503],"source":"\\n<p>\\n<em>length</em> is less than zero or greater than 65,536.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred while protecting or unprotecting the value of this secure string.","pos":[6654,6742],"source":"\\n<p>An error occurred while protecting or unprotecting the value of this secure string."},{"content":"&lt;/p&gt;\\n","pos":[6743,6749],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;This operation is not supported on this platform.&lt;/p&gt;\\n","pos":[6854,6914],"source":"\\n<p>This operation is not supported on this platform.</p>\\n"},{"pos":[7504,7510],"content":"Length","needQuote":true,"nodes":[{"content":"Length","pos":[0,6]}]},{"content":"\\n&lt;p&gt;This secure string has already been disposed.&lt;/p&gt;\\n","pos":[8456,8512],"source":"\\n<p>This secure string has already been disposed.</p>\\n"},{"pos":[8861,8877],"content":"AppendChar(Char)","needQuote":true,"nodes":[{"content":"AppendChar(Char)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A character to append to this secure string.&lt;/p&gt;\\n","pos":[9583,9638],"source":"\\n<p>A character to append to this secure string.</p>\\n"},{"content":"\\n&lt;p&gt;This secure string has already been disposed.&lt;/p&gt;\\n","pos":[9761,9817],"source":"\\n<p>This secure string has already been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;This secure string is read-only.&lt;/p&gt;\\n","pos":[9930,9973],"source":"\\n<p>This secure string is read-only.</p>\\n"},{"content":"\\n&lt;p&gt;Performing this operation would make the length of this secure string greater than 65,536 characters.&lt;/p&gt;\\n","pos":[10090,10202],"source":"\\n<p>Performing this operation would make the length of this secure string greater than 65,536 characters.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred while protecting or unprotecting the value of this secure string.&lt;/p&gt;\\n","pos":[10353,10447],"source":"\\n<p>An error occurred while protecting or unprotecting the value of this secure string.</p>\\n"},{"pos":[10731,10738],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"content":"\\n&lt;p&gt;This secure string has already been disposed.&lt;/p&gt;\\n","pos":[11432,11488],"source":"\\n<p>This secure string has already been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;This secure string is read-only.&lt;/p&gt;\\n","pos":[11601,11644],"source":"\\n<p>This secure string is read-only.</p>\\n"},{"pos":[12026,12032],"content":"Copy()","needQuote":true,"nodes":[{"content":"Copy()","pos":[0,6]}]},{"content":"\\n&lt;p&gt;A duplicate of this secure string.&lt;/p&gt;\\n","pos":[12700,12745],"source":"\\n<p>A duplicate of this secure string.</p>\\n"},{"content":"\\n&lt;p&gt;This secure string has already been disposed.&lt;/p&gt;\\n","pos":[12868,12924],"source":"\\n<p>This secure string has already been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred while protecting or unprotecting the value of this secure string.&lt;/p&gt;\\n","pos":[13075,13169],"source":"\\n<p>An error occurred while protecting or unprotecting the value of this secure string.</p>\\n"},{"pos":[13678,13687],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[14767,14788],"content":"InsertAt(Int32, Char)","needQuote":true,"nodes":[{"content":"InsertAt(Int32, Char)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The index position where parameter &lt;em&gt;c&lt;/em&gt; is inserted.&lt;/p&gt;\\n","pos":[15549,15618],"source":"\\n<p>The index position where parameter <em>c</em> is inserted.</p>\\n"},{"content":"\\n&lt;p&gt;The character to insert.&lt;/p&gt;\\n","pos":[15676,15711],"source":"\\n<p>The character to insert.</p>\\n"},{"content":"\\n&lt;p&gt;This secure string has already been disposed.&lt;/p&gt;\\n","pos":[15834,15890],"source":"\\n<p>This secure string has already been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;This secure string is read-only.&lt;/p&gt;\\n","pos":[16003,16046],"source":"\\n<p>This secure string is read-only.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero, or greater than the length of this secure string.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;Performing this operation would make the length of this secure string greater than 65,536 characters.&lt;/p&gt;\\n","pos":[16163,16382],"source":"\\n<p>\\n<em>index</em> is less than zero, or greater than the length of this secure string.</p>\\n<p>-or-</p>\\n<p>Performing this operation would make the length of this secure string greater than 65,536 characters.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred while protecting or unprotecting the value of this secure string.&lt;/p&gt;\\n","pos":[16533,16627],"source":"\\n<p>An error occurred while protecting or unprotecting the value of this secure string.</p>\\n"},{"pos":[16931,16943],"content":"IsReadOnly()","needQuote":true,"nodes":[{"content":"IsReadOnly()","pos":[0,12]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this secure string is marked read-only; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17621,17733],"source":"\\n<p>\\n<strong>true</strong> if this secure string is marked read-only; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;This secure string has already been disposed.&lt;/p&gt;\\n","pos":[17856,17912],"source":"\\n<p>This secure string has already been disposed.</p>\\n"},{"pos":[18335,18349],"content":"MakeReadOnly()","needQuote":true,"nodes":[{"content":"MakeReadOnly()","pos":[0,14]}]},{"content":"\\n&lt;p&gt;This secure string has already been disposed.&lt;/p&gt;\\n","pos":[19080,19136],"source":"\\n<p>This secure string has already been disposed.</p>\\n"},{"pos":[19587,19602],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The index position of a character in this secure string.&lt;/p&gt;\\n","pos":[20334,20401],"source":"\\n<p>The index position of a character in this secure string.</p>\\n"},{"content":"\\n&lt;p&gt;This secure string has already been disposed.&lt;/p&gt;\\n","pos":[20524,20580],"source":"\\n<p>This secure string has already been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;This secure string is read-only.&lt;/p&gt;\\n","pos":[20693,20736],"source":"\\n<p>This secure string is read-only.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero, or greater than or equal to the length of this secure string.&lt;/p&gt;\\n","pos":[20853,20961],"source":"\\n<p>\\n<em>index</em> is less than zero, or greater than or equal to the length of this secure string.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred while protecting or unprotecting the value of this secure string.&lt;/p&gt;\\n","pos":[21112,21206],"source":"\\n<p>An error occurred while protecting or unprotecting the value of this secure string.</p>\\n"},{"pos":[21567,21585],"content":"SetAt(Int32, Char)","needQuote":true,"nodes":[{"content":"SetAt(Int32, Char)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The index position of an existing character in this secure string&lt;/p&gt;\\n","pos":[22346,22422],"source":"\\n<p>The index position of an existing character in this secure string</p>\\n"},{"content":"\\n&lt;p&gt;A character that replaces the existing character.&lt;/p&gt;\\n","pos":[22480,22540],"source":"\\n<p>A character that replaces the existing character.</p>\\n"},{"content":"\\n&lt;p&gt;This secure string has already been disposed.&lt;/p&gt;\\n","pos":[22663,22719],"source":"\\n<p>This secure string has already been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;This secure string is read-only.&lt;/p&gt;\\n","pos":[22832,22875],"source":"\\n<p>This secure string is read-only.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero, or greater than or equal to the length of this secure string.&lt;/p&gt;\\n","pos":[22992,23100],"source":"\\n<p>\\n<em>index</em> is less than zero, or greater than or equal to the length of this secure string.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred while protecting or unprotecting the value of this secure string.&lt;/p&gt;\\n","pos":[23251,23345],"source":"\\n<p>An error occurred while protecting or unprotecting the value of this secure string.</p>\\n"},{"pos":[23516,23531],"content":"System.Security","needQuote":true,"nodes":[{"content":"System.Security","pos":[0,15]}]},{"pos":[23689,23695],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23845,23856],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[24031,24041],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[24136,24144],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[24213,24214],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24241,24242],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24312,24320],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[24389,24390],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24417,24418],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24601,24615],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[24734,24740],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24807,24808],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24858,24864],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24924,24925],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25008,25014],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25081,25082],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25132,25138],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25198,25199],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25413,25435],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[25583,25589],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25656,25657],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25707,25713],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25774,25775]},{"pos":[25830,25836],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25896,25897],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25994,26000],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26067,26068],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26118,26124],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26185,26186]},{"pos":[26241,26247],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26307,26308],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26553,26584],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[26750,26765],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[26841,26842],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26892,26898],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26959,26960]},{"pos":[27015,27021],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27081,27082],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27188,27203],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[27279,27280],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27330,27336],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27397,27398]},{"pos":[27453,27459],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27519,27520],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27750,27763],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[27864,27875],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[27947,27948],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27975,27976],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28049,28060],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[28132,28133],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28160,28161],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28336,28345],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[28438,28445],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[28513,28514],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28541,28542],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28611,28618],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[28686,28687],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28714,28715],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28890,28907],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[29016,29031],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[29107,29108],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29135,29136],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29213,29228],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[29304,29305],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29332,29333],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29478,29484],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[29577,29582],"content":"Char*","needQuote":true,"nodes":[{"content":"Char*","pos":[0,5]}]},{"pos":[29654,29658],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[29780,29784],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[29951,29956],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[30096,30100],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[30263,30275],"content":"SecureString","needQuote":true,"nodes":[{"content":"SecureString","pos":[0,12]}]},{"pos":[30481,30490],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[30593,30600],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[30652,30653],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30680,30681],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30755,30762],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[30814,30815],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30842,30843],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31007,31014],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[31183,31205],"content":"CryptographicException","needQuote":true,"nodes":[{"content":"CryptographicException","pos":[0,22]}]},{"pos":[31457,31478],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[31666,31687],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[31881,31908],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[32116,32139],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]},{"pos":[32354,32379],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]}],"content":"items:\n- uid: System.Security.SecureString\n  commentId: T:System.Security.SecureString\n  id: SecureString\n  parent: System.Security\n  children:\n  - System.Security.SecureString.#ctor\n  - System.Security.SecureString.#ctor(System.Char*,System.Int32)\n  - System.Security.SecureString.AppendChar(System.Char)\n  - System.Security.SecureString.Clear\n  - System.Security.SecureString.Copy\n  - System.Security.SecureString.Dispose\n  - System.Security.SecureString.InsertAt(System.Int32,System.Char)\n  - System.Security.SecureString.IsReadOnly\n  - System.Security.SecureString.Length\n  - System.Security.SecureString.MakeReadOnly\n  - System.Security.SecureString.RemoveAt(System.Int32)\n  - System.Security.SecureString.SetAt(System.Int32,System.Char)\n  langs:\n  - csharp\n  - vb\n  name: SecureString\n  fullName: System.Security.SecureString\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.SecureString/ref/System.Security.SecureString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SecureString\n    path: src/System.Security.SecureString/ref/System.Security.SecureString.cs\n    startLine: 9\n  assemblies:\n  - System.Security.SecureString\n  namespace: System.Security\n  summary: \"\\n<p>Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed. This class cannot be inherited.</p>\\n\"\n  syntax:\n    content: 'public sealed class SecureString : IDisposable'\n    content.vb: >-\n      Public NotInheritable Class SecureString\n          Implements IDisposable\n  seealso:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n    commentId: T:System.Runtime.InteropServices.ComVisibleAttribute\n  - type: System.Runtime.InteropServices.Marshal\n    commentId: T:System.Runtime.InteropServices.Marshal\n  - type: System.Runtime.ConstrainedExecution.CriticalFinalizerObject\n    commentId: T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject\n  - type: System.IDisposable\n    commentId: T:System.IDisposable\n  see:\n  - type: System.Security.SecureString\n    commentId: T:System.Security.SecureString\n  - type: System.Security.SecureString\n    commentId: T:System.Security.SecureString\n  - type: System.Security.SecureString\n    commentId: T:System.Security.SecureString\n  - type: System.Security.SecureString\n    commentId: T:System.Security.SecureString\n  - type: System.Security.SecureString\n    commentId: T:System.Security.SecureString\n  - type: System.Security.SecureString\n    commentId: T:System.Security.SecureString\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: SecureString\n- uid: System.Security.SecureString.#ctor\n  commentId: M:System.Security.SecureString.#ctor\n  id: '#ctor'\n  parent: System.Security.SecureString\n  langs:\n  - csharp\n  - vb\n  name: SecureString()\n  fullName: System.Security.SecureString.SecureString()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.SecureString/ref/System.Security.SecureString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.SecureString/ref/System.Security.SecureString.cs\n    startLine: 11\n  assemblies:\n  - System.Security.SecureString\n  namespace: System.Security\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.SecureString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public SecureString()\n    content.vb: Public Sub New\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>An error occurred while protecting or unprotecting the value of this instance.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>This operation is not supported on this platform.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SecureString.SecureString()\n- uid: System.Security.SecureString.#ctor(System.Char*,System.Int32)\n  commentId: M:System.Security.SecureString.#ctor(System.Char*,System.Int32)\n  id: '#ctor(System.Char*,System.Int32)'\n  parent: System.Security.SecureString\n  langs:\n  - csharp\n  - vb\n  name: SecureString(Char*, Int32)\n  fullName: System.Security.SecureString.SecureString(System.Char*, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.SecureString/ref/System.Security.SecureString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.SecureString/ref/System.Security.SecureString.cs\n    startLine: 12\n  assemblies:\n  - System.Security.SecureString\n  namespace: System.Security\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.SecureString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class from a subarray of <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects. </p>\\n<p>This constructor is not CLS-compliant. The CLS-compliant alternative is <xref href=\\\"System.Security.SecureString.#ctor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public SecureString(char *value, int length)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Sub New(value As Char *, length As Integer)\n    parameters:\n    - id: value\n      type: System.Char*\n      description: \"\\n<p>A pointer to an array of <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of elements of <em>value</em> to include in the new instance.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>length</em> is less than zero or greater than 65,536.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>An error occurred while protecting or unprotecting the value of this secure string. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>This operation is not supported on this platform.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SecureString.SecureString(Char*, Int32)\n- uid: System.Security.SecureString.Length\n  commentId: P:System.Security.SecureString.Length\n  id: Length\n  parent: System.Security.SecureString\n  langs:\n  - csharp\n  - vb\n  name: Length\n  fullName: System.Security.SecureString.Length\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.SecureString/ref/System.Security.SecureString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Length\n    path: src/System.Security.SecureString/ref/System.Security.SecureString.cs\n    startLine: 14\n  assemblies:\n  - System.Security.SecureString\n  namespace: System.Security\n  summary: \"\\n<p>Gets the number of characters in the current secure string.</p>\\n\"\n  syntax:\n    content: public int Length { get; }\n    content.vb: Public ReadOnly Property Length As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects in this secure string.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>This secure string has already been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SecureString.Length\n- uid: System.Security.SecureString.AppendChar(System.Char)\n  commentId: M:System.Security.SecureString.AppendChar(System.Char)\n  id: AppendChar(System.Char)\n  parent: System.Security.SecureString\n  langs:\n  - csharp\n  - vb\n  name: AppendChar(Char)\n  fullName: System.Security.SecureString.AppendChar(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.SecureString/ref/System.Security.SecureString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AppendChar\n    path: src/System.Security.SecureString/ref/System.Security.SecureString.cs\n    startLine: 15\n  assemblies:\n  - System.Security.SecureString\n  namespace: System.Security\n  summary: \"\\n<p>Appends a character to the end of the current secure string.</p>\\n\"\n  syntax:\n    content: public void AppendChar(char c)\n    content.vb: Public Sub AppendChar(c As Char)\n    parameters:\n    - id: c\n      type: System.Char\n      description: \"\\n<p>A character to append to this secure string.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>This secure string has already been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>This secure string is read-only.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>Performing this operation would make the length of this secure string greater than 65,536 characters.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>An error occurred while protecting or unprotecting the value of this secure string.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SecureString.AppendChar(Char)\n- uid: System.Security.SecureString.Clear\n  commentId: M:System.Security.SecureString.Clear\n  id: Clear\n  parent: System.Security.SecureString\n  langs:\n  - csharp\n  - vb\n  name: Clear()\n  fullName: System.Security.SecureString.Clear()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.SecureString/ref/System.Security.SecureString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Clear\n    path: src/System.Security.SecureString/ref/System.Security.SecureString.cs\n    startLine: 16\n  assemblies:\n  - System.Security.SecureString\n  namespace: System.Security\n  summary: \"\\n<p>Deletes the value of the current secure string.</p>\\n\"\n  syntax:\n    content: public void Clear()\n    content.vb: Public Sub Clear\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>This secure string has already been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>This secure string is read-only.</p>\\n\"\n  seealso:\n  - type: System.Security.SecureString.Length\n    commentId: P:System.Security.SecureString.Length\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SecureString.Clear()\n- uid: System.Security.SecureString.Copy\n  commentId: M:System.Security.SecureString.Copy\n  id: Copy\n  parent: System.Security.SecureString\n  langs:\n  - csharp\n  - vb\n  name: Copy()\n  fullName: System.Security.SecureString.Copy()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.SecureString/ref/System.Security.SecureString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Copy\n    path: src/System.Security.SecureString/ref/System.Security.SecureString.cs\n    startLine: 17\n  assemblies:\n  - System.Security.SecureString\n  namespace: System.Security\n  summary: \"\\n<p>Creates a copy of the current secure string.</p>\\n\"\n  syntax:\n    content: public SecureString Copy()\n    content.vb: Public Function Copy As SecureString\n    return:\n      type: System.Security.SecureString\n      description: \"\\n<p>A duplicate of this secure string.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>This secure string has already been disposed.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>An error occurred while protecting or unprotecting the value of this secure string.</p>\\n\"\n  seealso:\n  - type: System.Security.SecureString.MakeReadOnly\n    commentId: M:System.Security.SecureString.MakeReadOnly\n  - type: System.Security.SecureString.IsReadOnly\n    commentId: M:System.Security.SecureString.IsReadOnly\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SecureString.Copy()\n- uid: System.Security.SecureString.Dispose\n  commentId: M:System.Security.SecureString.Dispose\n  id: Dispose\n  parent: System.Security.SecureString\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Security.SecureString.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.SecureString/ref/System.Security.SecureString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Security.SecureString/ref/System.Security.SecureString.cs\n    startLine: 18\n  assemblies:\n  - System.Security.SecureString\n  namespace: System.Security\n  summary: \"\\n<p>Releases all resources used by the current <xref href=\\\"System.Security.SecureString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SecureString.Dispose()\n- uid: System.Security.SecureString.InsertAt(System.Int32,System.Char)\n  commentId: M:System.Security.SecureString.InsertAt(System.Int32,System.Char)\n  id: InsertAt(System.Int32,System.Char)\n  parent: System.Security.SecureString\n  langs:\n  - csharp\n  - vb\n  name: InsertAt(Int32, Char)\n  fullName: System.Security.SecureString.InsertAt(System.Int32, System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.SecureString/ref/System.Security.SecureString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InsertAt\n    path: src/System.Security.SecureString/ref/System.Security.SecureString.cs\n    startLine: 19\n  assemblies:\n  - System.Security.SecureString\n  namespace: System.Security\n  summary: \"\\n<p>Inserts a character in this secure string at the specified index position. </p>\\n\"\n  syntax:\n    content: public void InsertAt(int index, char c)\n    content.vb: Public Sub InsertAt(index As Integer, c As Char)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index position where parameter <em>c</em> is inserted.</p>\\n\"\n    - id: c\n      type: System.Char\n      description: \"\\n<p>The character to insert.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>This secure string has already been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>This secure string is read-only.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero, or greater than the length of this secure string.</p>\\n<p>-or-</p>\\n<p>Performing this operation would make the length of this secure string greater than 65,536 characters.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>An error occurred while protecting or unprotecting the value of this secure string.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SecureString.InsertAt(Int32, Char)\n- uid: System.Security.SecureString.IsReadOnly\n  commentId: M:System.Security.SecureString.IsReadOnly\n  id: IsReadOnly\n  parent: System.Security.SecureString\n  langs:\n  - csharp\n  - vb\n  name: IsReadOnly()\n  fullName: System.Security.SecureString.IsReadOnly()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.SecureString/ref/System.Security.SecureString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsReadOnly\n    path: src/System.Security.SecureString/ref/System.Security.SecureString.cs\n    startLine: 20\n  assemblies:\n  - System.Security.SecureString\n  namespace: System.Security\n  summary: \"\\n<p>Indicates whether this secure string is marked read-only.</p>\\n\"\n  syntax:\n    content: public bool IsReadOnly()\n    content.vb: Public Function IsReadOnly As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this secure string is marked read-only; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>This secure string has already been disposed.</p>\\n\"\n  seealso:\n  - type: System.Security.SecureString.MakeReadOnly\n    commentId: M:System.Security.SecureString.MakeReadOnly\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SecureString.IsReadOnly()\n- uid: System.Security.SecureString.MakeReadOnly\n  commentId: M:System.Security.SecureString.MakeReadOnly\n  id: MakeReadOnly\n  parent: System.Security.SecureString\n  langs:\n  - csharp\n  - vb\n  name: MakeReadOnly()\n  fullName: System.Security.SecureString.MakeReadOnly()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.SecureString/ref/System.Security.SecureString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MakeReadOnly\n    path: src/System.Security.SecureString/ref/System.Security.SecureString.cs\n    startLine: 21\n  assemblies:\n  - System.Security.SecureString\n  namespace: System.Security\n  summary: \"\\n<p>Makes the text value of this secure string read-only.   </p>\\n\"\n  syntax:\n    content: public void MakeReadOnly()\n    content.vb: Public Sub MakeReadOnly\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>This secure string has already been disposed.</p>\\n\"\n  seealso:\n  - type: System.Security.SecureString.IsReadOnly\n    commentId: M:System.Security.SecureString.IsReadOnly\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SecureString.MakeReadOnly()\n- uid: System.Security.SecureString.RemoveAt(System.Int32)\n  commentId: M:System.Security.SecureString.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Security.SecureString\n  langs:\n  - csharp\n  - vb\n  name: RemoveAt(Int32)\n  fullName: System.Security.SecureString.RemoveAt(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.SecureString/ref/System.Security.SecureString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveAt\n    path: src/System.Security.SecureString/ref/System.Security.SecureString.cs\n    startLine: 22\n  assemblies:\n  - System.Security.SecureString\n  namespace: System.Security\n  summary: \"\\n<p>Removes the character at the specified index position from this secure string.</p>\\n\"\n  syntax:\n    content: public void RemoveAt(int index)\n    content.vb: Public Sub RemoveAt(index As Integer)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index position of a character in this secure string.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>This secure string has already been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>This secure string is read-only.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero, or greater than or equal to the length of this secure string.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>An error occurred while protecting or unprotecting the value of this secure string.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SecureString.RemoveAt(Int32)\n- uid: System.Security.SecureString.SetAt(System.Int32,System.Char)\n  commentId: M:System.Security.SecureString.SetAt(System.Int32,System.Char)\n  id: SetAt(System.Int32,System.Char)\n  parent: System.Security.SecureString\n  langs:\n  - csharp\n  - vb\n  name: SetAt(Int32, Char)\n  fullName: System.Security.SecureString.SetAt(System.Int32, System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.SecureString/ref/System.Security.SecureString.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetAt\n    path: src/System.Security.SecureString/ref/System.Security.SecureString.cs\n    startLine: 23\n  assemblies:\n  - System.Security.SecureString\n  namespace: System.Security\n  summary: \"\\n<p>Replaces the existing character at the specified index position with another character.</p>\\n\"\n  syntax:\n    content: public void SetAt(int index, char c)\n    content.vb: Public Sub SetAt(index As Integer, c As Char)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index position of an existing character in this secure string</p>\\n\"\n    - id: c\n      type: System.Char\n      description: \"\\n<p>A character that replaces the existing character.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>This secure string has already been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>This secure string is read-only.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero, or greater than or equal to the length of this secure string.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>An error occurred while protecting or unprotecting the value of this secure string.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SecureString.SetAt(Int32, Char)\nreferences:\n- uid: System.Security\n  isExternal: false\n  name: System.Security\n  fullName: System.Security\n  commentId: N:System.Security\n  nameWithType: System.Security\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Char*\n  name: Char*\n  fullName: System.Char*\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  nameWithType: Char*\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  commentId: T:System.Char\n  nameWithType: Char\n- uid: System.Security.SecureString\n  parent: System.Security\n  isExternal: false\n  name: SecureString\n  fullName: System.Security.SecureString\n  commentId: T:System.Security.SecureString\n  nameWithType: SecureString\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.IDisposable.Dispose\n  nameWithType: IDisposable.Dispose()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Security.Cryptography.CryptographicException\n  isExternal: false\n  name: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n  commentId: T:System.Security.Cryptography.CryptographicException\n  nameWithType: CryptographicException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n"}