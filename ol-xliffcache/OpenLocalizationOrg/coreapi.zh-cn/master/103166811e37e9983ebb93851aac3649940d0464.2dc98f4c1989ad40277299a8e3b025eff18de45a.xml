{"nodes":[{"pos":[1255,1267],"content":"TripleDESCng","needQuote":true,"nodes":[{"content":"TripleDESCng","pos":[0,12]}]},{"pos":[4246,4260],"content":"TripleDESCng()","needQuote":true,"nodes":[{"content":"TripleDESCng()","pos":[0,14]}]},{"pos":[5375,5395],"content":"TripleDESCng(String)","needQuote":true,"nodes":[{"content":"TripleDESCng(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The name of the key.&lt;/p&gt;\\n","pos":[6325,6356],"source":"\\n<p>The name of the key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keyName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[6475,6524],"source":"\\n<p>\\n<em>keyName</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[6525,6531],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n      Cryptography Next Generation (CNG) is not supported on this system.\\n&lt;/p&gt;\\n","pos":[6652,6740],"source":"\\n<p>\\n      Cryptography Next Generation (CNG) is not supported on this system.\\n</p>\\n"},{"content":"\\n&lt;p&gt;All other errors.\\n&lt;/p&gt;\\n","pos":[6891,6921],"source":"\\n<p>All other errors.\\n</p>\\n"},{"pos":[7568,7601],"content":"TripleDESCng(String, CngProvider)","needQuote":true,"nodes":[{"content":"TripleDESCng(String, CngProvider)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The name of the key.&lt;/p&gt;\\n","pos":[8666,8697],"source":"\\n<p>The name of the key.</p>\\n"},{"content":"\\n&lt;p&gt;The KSP that contains the key.&lt;/p&gt;\\n","pos":[8791,8832],"source":"\\n<p>The KSP that contains the key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keyName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[8951,9000],"source":"\\n<p>\\n<em>keyName</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[9001,9068],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>provider</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[9069,9075],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n      Cryptography Next Generation (CNG) is not supported on this system.\\n&lt;/p&gt;\\n","pos":[9196,9284],"source":"\\n<p>\\n      Cryptography Next Generation (CNG) is not supported on this system.\\n</p>\\n"},{"content":"\\n&lt;p&gt;All other errors.\\n&lt;/p&gt;\\n","pos":[9435,9465],"source":"\\n<p>All other errors.\\n</p>\\n"},{"pos":[10348,10400],"content":"TripleDESCng(String, CngProvider, CngKeyOpenOptions)","needQuote":true,"nodes":[{"content":"TripleDESCng(String, CngProvider, CngKeyOpenOptions)","pos":[0,52]}]},{"content":"\\n&lt;p&gt;The name of the key.&lt;/p&gt;\\n","pos":[11596,11627],"source":"\\n<p>The name of the key.</p>\\n"},{"content":"\\n&lt;p&gt;The KSP that contains the key.&lt;/p&gt;\\n","pos":[11721,11762],"source":"\\n<p>The KSP that contains the key.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that specify options for opening the key, such as where the key is opened from (machine or user storage) and whether to suppress UI prompting.&lt;/p&gt;\\n","pos":[11865,12066],"source":"\\n<p>A bitwise combination of the enumeration values that specify options for opening the key, such as where the key is opened from (machine or user storage) and whether to suppress UI prompting.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keyName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[12185,12234],"source":"\\n<p>\\n<em>keyName</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[12235,12302],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>provider</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[12303,12309],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n      Cryptography Next Generation (CNG) is not supported on this system.\\n&lt;/p&gt;\\n","pos":[12430,12518],"source":"\\n<p>\\n      Cryptography Next Generation (CNG) is not supported on this system.\\n</p>\\n"},{"content":"\\n&lt;p&gt;All other errors.\\n&lt;/p&gt;\\n","pos":[12669,12699],"source":"\\n<p>All other errors.\\n</p>\\n"},{"pos":[13378,13381],"content":"Key","needQuote":true,"nodes":[{"content":"Key","pos":[0,3]}]},{"pos":[14767,14774],"content":"KeySize","needQuote":true,"nodes":[{"content":"KeySize","pos":[0,7]}]},{"pos":[16274,16287],"content":"LegalKeySizes","needQuote":true,"nodes":[{"content":"LegalKeySizes","pos":[0,13]}]},{"pos":[17482,17499],"content":"CreateDecryptor()","needQuote":true,"nodes":[{"content":"CreateDecryptor()","pos":[0,17]}]},{"content":"\\n&lt;p&gt;A symmetric 3DES decryptor object.&lt;/p&gt;\\n","pos":[18460,18505],"source":"\\n<p>A symmetric 3DES decryptor object.</p>\\n"},{"pos":[19051,19082],"content":"CreateDecryptor(Byte[], Byte[])","needQuote":true,"nodes":[{"content":"CreateDecryptor(Byte[], Byte[])","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The secret key to use for the 3DES algorithm.","pos":[20016,20066],"source":"\\n<p>The secret key to use for the 3DES algorithm."},{"content":"The key size must be 192 bits.&lt;/p&gt;\\n","pos":[20067,20103],"source":" The key size must be 192 bits.</p>\\n"},{"content":"\\n&lt;p&gt;The initialization vector to use for the 3DES algorithm.&lt;/p&gt;\\n","pos":[20167,20234],"source":"\\n<p>The initialization vector to use for the 3DES algorithm.</p>\\n"},{"content":"\\n&lt;p&gt;A symmetric 3DES decryptor object.&lt;/p&gt;\\n","pos":[20326,20371],"source":"\\n<p>A symmetric 3DES decryptor object.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;rgbKey&lt;/em&gt;  is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[20597,20652],"source":"\\n<p>\\n<em>rgbKey</em>  is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;rgbKey&lt;/em&gt;  is not a valid size for this algorithm.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;rgbIV&lt;/em&gt; size does not match the block size for this algorithm.&lt;/p&gt;\\n","pos":[20749,20911],"source":"\\n<p>\\n<em>rgbKey</em>  is not a valid size for this algorithm.</p>\\n<p>-or-</p>\\n<p>\\n<em>rgbIV</em> size does not match the block size for this algorithm.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;rgbKey&lt;/em&gt; is a known weak key for this algorithm and cannot be used.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;rgbIV&lt;/em&gt;  is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[21062,21214],"source":"\\n<p>\\n<em>rgbKey</em> is a known weak key for this algorithm and cannot be used.</p>\\n<p>-or-</p>\\n<p>\\n<em>rgbIV</em>  is <strong>null</strong>.</p>\\n"},{"pos":[21819,21836],"content":"CreateEncryptor()","needQuote":true,"nodes":[{"content":"CreateEncryptor()","pos":[0,17]}]},{"content":"\\n&lt;p&gt;A symmetric 3DES encryptor object.&lt;/p&gt;\\n","pos":[22798,22843],"source":"\\n<p>A symmetric 3DES encryptor object.</p>\\n"},{"pos":[23389,23420],"content":"CreateEncryptor(Byte[], Byte[])","needQuote":true,"nodes":[{"content":"CreateEncryptor(Byte[], Byte[])","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The secret key to use for the 3DES algorithm.","pos":[24354,24404],"source":"\\n<p>The secret key to use for the 3DES algorithm."},{"content":"The key size must be 192 bits.&lt;/p&gt;\\n","pos":[24405,24441],"source":" The key size must be 192 bits.</p>\\n"},{"content":"\\n&lt;p&gt;The initialization vector to use for the 3DES algorithm.&lt;/p&gt;\\n","pos":[24505,24572],"source":"\\n<p>The initialization vector to use for the 3DES algorithm.</p>\\n"},{"content":"\\n&lt;p&gt;A symmetric 3DES encryptor object.&lt;/p&gt;\\n","pos":[24664,24709],"source":"\\n<p>A symmetric 3DES encryptor object.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;rgbKey&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[24935,24989],"source":"\\n<p>\\n<em>rgbKey</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;rgbKey&lt;/em&gt; is not a valid size for this algorithm.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;rgbIV&lt;/em&gt; size does not match the block size for this algorithm.&lt;/p&gt;\\n","pos":[25086,25247],"source":"\\n<p>\\n<em>rgbKey</em> is not a valid size for this algorithm.</p>\\n<p>-or-</p>\\n<p>\\n<em>rgbIV</em> size does not match the block size for this algorithm.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;rgbKey&lt;/em&gt; is a known weak key for this algorithm and cannot be used.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;rgbIV&lt;/em&gt;  is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[25398,25550],"source":"\\n<p>\\n<em>rgbKey</em> is a known weak key for this algorithm and cannot be used.</p>\\n<p>-or-</p>\\n<p>\\n<em>rgbIV</em>  is <strong>null</strong>.</p>\\n"},{"pos":[26179,26195],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[27344,27356],"content":"GenerateIV()","needQuote":true,"nodes":[{"content":"GenerateIV()","pos":[0,12]}]},{"pos":[28479,28492],"content":"GenerateKey()","needQuote":true,"nodes":[{"content":"GenerateKey()","pos":[0,13]}]},{"pos":[29569,29597],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[29794,29800],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30001,30019],"content":"SymmetricAlgorithm","needQuote":true,"nodes":[{"content":"SymmetricAlgorithm","pos":[0,18]}]},{"pos":[30291,30300],"content":"TripleDES","needQuote":true,"nodes":[{"content":"TripleDES","pos":[0,9]}]},{"pos":[30503,30514],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[30737,30745],"content":"Create()","needQuote":true,"nodes":[{"content":"Create()","pos":[0,8]}]},{"pos":[30886,30892],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[30984,30985],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31012,31013],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31106,31112],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[31204,31205],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31232,31233],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31490,31504],"content":"Create(String)","needQuote":true,"nodes":[{"content":"Create(String)","pos":[0,14]}]},{"pos":[31673,31679],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[31771,31772],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31822,31828],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[31888,31889],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31997,32003],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[32095,32096],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32146,32152],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[32212,32213],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32494,32511],"content":"IsWeakKey(Byte[])","needQuote":true,"nodes":[{"content":"IsWeakKey(Byte[])","pos":[0,17]}]},{"pos":[32794,32803],"content":"IsWeakKey","needQuote":true,"nodes":[{"content":"IsWeakKey","pos":[0,9]}]},{"pos":[32898,32899],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32947,32951],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[33010,33012]},{"pos":[33043,33044],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33155,33164],"content":"IsWeakKey","needQuote":true,"nodes":[{"content":"IsWeakKey","pos":[0,9]}]},{"pos":[33259,33260],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33308,33312],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[33370,33372],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[33400,33401],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33743,33757],"content":"BlockSizeValue","needQuote":true,"nodes":[{"content":"BlockSizeValue","pos":[0,14]}]},{"pos":[34119,34136],"content":"FeedbackSizeValue","needQuote":true,"nodes":[{"content":"FeedbackSizeValue","pos":[0,17]}]},{"pos":[34497,34504],"content":"IVValue","needQuote":true,"nodes":[{"content":"IVValue","pos":[0,7]}]},{"pos":[34836,34844],"content":"KeyValue","needQuote":true,"nodes":[{"content":"KeyValue","pos":[0,8]}]},{"pos":[35191,35211],"content":"LegalBlockSizesValue","needQuote":true,"nodes":[{"content":"LegalBlockSizesValue","pos":[0,20]}]},{"pos":[35592,35610],"content":"LegalKeySizesValue","needQuote":true,"nodes":[{"content":"LegalKeySizesValue","pos":[0,18]}]},{"pos":[35979,35991],"content":"KeySizeValue","needQuote":true,"nodes":[{"content":"KeySizeValue","pos":[0,12]}]},{"pos":[36339,36348],"content":"ModeValue","needQuote":true,"nodes":[{"content":"ModeValue","pos":[0,9]}]},{"pos":[36690,36702],"content":"PaddingValue","needQuote":true,"nodes":[{"content":"PaddingValue","pos":[0,12]}]},{"pos":[37048,37057],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[37218,37225],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[37327,37328],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37355,37356],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37459,37466],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[37568,37569],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37596,37597],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37876,37883],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[38040,38045],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[38145,38146],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38173,38174],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38275,38280],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[38380,38381],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38408,38409],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38705,38724],"content":"ValidKeySize(Int32)","needQuote":true,"nodes":[{"content":"ValidKeySize(Int32)","pos":[0,19]}]},{"pos":[38921,38933],"content":"ValidKeySize","needQuote":true,"nodes":[{"content":"ValidKeySize","pos":[0,12]}]},{"pos":[39040,39041],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39090,39095],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[39154,39155],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39277,39289],"content":"ValidKeySize","needQuote":true,"nodes":[{"content":"ValidKeySize","pos":[0,12]}]},{"pos":[39396,39397],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39446,39451],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[39510,39511],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39823,39832],"content":"BlockSize","needQuote":true,"nodes":[{"content":"BlockSize","pos":[0,9]}]},{"pos":[40174,40186],"content":"FeedbackSize","needQuote":true,"nodes":[{"content":"FeedbackSize","pos":[0,12]}]},{"pos":[40527,40529],"content":"IV","needQuote":true,"nodes":[{"content":"IV","pos":[0,2]}]},{"pos":[40853,40868],"content":"LegalBlockSizes","needQuote":true,"nodes":[{"content":"LegalBlockSizes","pos":[0,15]}]},{"pos":[41220,41224],"content":"Mode","needQuote":true,"nodes":[{"content":"Mode","pos":[0,4]}]},{"pos":[41546,41553],"content":"Padding","needQuote":true,"nodes":[{"content":"Padding","pos":[0,7]}]},{"pos":[41817,41827],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[41922,41930],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[41999,42000],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42027,42028],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42098,42106],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[42175,42176],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42203,42204],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42387,42401],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[42520,42526],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[42593,42594],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42644,42650],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[42710,42711],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42794,42800],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[42867,42868],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42918,42924],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[42984,42985],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43199,43221],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[43369,43375],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[43442,43443],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43493,43499],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[43560,43561]},{"pos":[43616,43622],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[43682,43683],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43780,43786],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[43853,43854],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43904,43910],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[43971,43972]},{"pos":[44027,44033],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[44093,44094],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44339,44370],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[44536,44551],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[44627,44628],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44678,44684],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[44745,44746]},{"pos":[44801,44807],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[44867,44868],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44974,44989],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[45065,45066],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45116,45122],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[45183,45184]},{"pos":[45239,45245],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[45305,45306],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45536,45549],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[45650,45661],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[45733,45734],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45761,45762],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45835,45846],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[45918,45919],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45946,45947],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46122,46131],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[46224,46231],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[46299,46300],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46327,46328],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46397,46404],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[46472,46473],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46500,46501],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46676,46693],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[46802,46817],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[46893,46894],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46921,46922],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46999,47014],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[47090,47091],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47118,47119],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47264,47270],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[47401,47407],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[47601,47612],"content":"CngProvider","needQuote":true,"nodes":[{"content":"CngProvider","pos":[0,11]}]},{"pos":[47871,47888],"content":"CngKeyOpenOptions","needQuote":true,"nodes":[{"content":"CngKeyOpenOptions","pos":[0,17]}]},{"pos":[48170,48173],"content":"Key","needQuote":true,"nodes":[{"content":"Key","pos":[0,3]}]},{"pos":[48346,48352],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[48472,48476],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[48535,48537]},{"pos":[48600,48604],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[48662,48664],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[48879,48886],"content":"KeySize","needQuote":true,"nodes":[{"content":"KeySize","pos":[0,7]}]},{"pos":[49134,49139],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[49369,49382],"content":"LegalKeySizes","needQuote":true,"nodes":[{"content":"LegalKeySizes","pos":[0,13]}]},{"pos":[49638,49648],"content":"KeySizes[]","needQuote":true,"nodes":[{"content":"KeySizes[]","pos":[0,10]}]},{"pos":[49850,49858],"content":"KeySizes","needQuote":true,"nodes":[{"content":"KeySizes","pos":[0,8]}]},{"content":"[]","pos":[49922,49924]},{"pos":[50013,50021],"content":"KeySizes","needQuote":true,"nodes":[{"content":"KeySizes","pos":[0,8]}]},{"pos":[50084,50086],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[50317,50334],"content":"CreateDecryptor()","needQuote":true,"nodes":[{"content":"CreateDecryptor()","pos":[0,17]}]},{"pos":[50511,50526],"content":"CreateDecryptor","needQuote":true,"nodes":[{"content":"CreateDecryptor","pos":[0,15]}]},{"pos":[50636,50637],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50664,50665],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50776,50791],"content":"CreateDecryptor","needQuote":true,"nodes":[{"content":"CreateDecryptor","pos":[0,15]}]},{"pos":[50901,50902],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50929,50930],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51199,51215],"content":"ICryptoTransform","needQuote":true,"nodes":[{"content":"ICryptoTransform","pos":[0,16]}]},{"pos":[51553,51584],"content":"CreateDecryptor(Byte[], Byte[])","needQuote":true,"nodes":[{"content":"CreateDecryptor(Byte[], Byte[])","pos":[0,31]}]},{"pos":[51970,51985],"content":"CreateDecryptor","needQuote":true,"nodes":[{"content":"CreateDecryptor","pos":[0,15]}]},{"pos":[52095,52096],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52144,52148],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[52207,52209]},{"content":",","pos":[52241,52242]},{"pos":[52295,52299],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[52358,52360]},{"pos":[52391,52392],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52532,52547],"content":"CreateDecryptor","needQuote":true,"nodes":[{"content":"CreateDecryptor","pos":[0,15]}]},{"pos":[52657,52658],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52706,52710],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[52768,52770],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[52799,52800]},{"pos":[52853,52857],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[52915,52917],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[52945,52946],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53364,53381],"content":"CreateEncryptor()","needQuote":true,"nodes":[{"content":"CreateEncryptor()","pos":[0,17]}]},{"pos":[53558,53573],"content":"CreateEncryptor","needQuote":true,"nodes":[{"content":"CreateEncryptor","pos":[0,15]}]},{"pos":[53683,53684],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53711,53712],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53823,53838],"content":"CreateEncryptor","needQuote":true,"nodes":[{"content":"CreateEncryptor","pos":[0,15]}]},{"pos":[53948,53949],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53976,53977],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54311,54342],"content":"CreateEncryptor(Byte[], Byte[])","needQuote":true,"nodes":[{"content":"CreateEncryptor(Byte[], Byte[])","pos":[0,31]}]},{"pos":[54728,54743],"content":"CreateEncryptor","needQuote":true,"nodes":[{"content":"CreateEncryptor","pos":[0,15]}]},{"pos":[54853,54854],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54902,54906],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[54965,54967]},{"content":",","pos":[54999,55000]},{"pos":[55053,55057],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[55116,55118]},{"pos":[55149,55150],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55290,55305],"content":"CreateEncryptor","needQuote":true,"nodes":[{"content":"CreateEncryptor","pos":[0,15]}]},{"pos":[55415,55416],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55464,55468],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[55526,55528],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[55557,55558]},{"pos":[55611,55615],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[55673,55675],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[55703,55704],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56130,56146],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[56337,56344],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[56446,56447],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56498,56505],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[56566,56567],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56686,56693],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[56795,56796],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56847,56854],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[56915,56916],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57139,57146],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[57379,57391],"content":"GenerateIV()","needQuote":true,"nodes":[{"content":"GenerateIV()","pos":[0,12]}]},{"pos":[57558,57568],"content":"GenerateIV","needQuote":true,"nodes":[{"content":"GenerateIV","pos":[0,10]}]},{"pos":[57673,57674],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57701,57702],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57808,57818],"content":"GenerateIV","needQuote":true,"nodes":[{"content":"GenerateIV","pos":[0,10]}]},{"pos":[57923,57924],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57951,57952],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58243,58256],"content":"GenerateKey()","needQuote":true,"nodes":[{"content":"GenerateKey()","pos":[0,13]}]},{"pos":[58425,58436],"content":"GenerateKey","needQuote":true,"nodes":[{"content":"GenerateKey","pos":[0,11]}]},{"pos":[58542,58543],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58570,58571],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58678,58689],"content":"GenerateKey","needQuote":true,"nodes":[{"content":"GenerateKey","pos":[0,11]}]},{"pos":[58795,58796],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58823,58824],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59029,59050],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[59246,59275],"content":"PlatformNotSupportedException","needQuote":true,"nodes":[{"content":"PlatformNotSupportedException","pos":[0,29]}]},{"pos":[59510,59532],"content":"CryptographicException","needQuote":true,"nodes":[{"content":"CryptographicException","pos":[0,22]}]},{"pos":[59780,59797],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Security.Cryptography.TripleDESCng\n  commentId: T:System.Security.Cryptography.TripleDESCng\n  id: TripleDESCng\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.TripleDESCng.#ctor\n  - System.Security.Cryptography.TripleDESCng.#ctor(System.String)\n  - System.Security.Cryptography.TripleDESCng.#ctor(System.String,System.Security.Cryptography.CngProvider)\n  - System.Security.Cryptography.TripleDESCng.#ctor(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  - System.Security.Cryptography.TripleDESCng.CreateDecryptor\n  - System.Security.Cryptography.TripleDESCng.CreateDecryptor(System.Byte[],System.Byte[])\n  - System.Security.Cryptography.TripleDESCng.CreateEncryptor\n  - System.Security.Cryptography.TripleDESCng.CreateEncryptor(System.Byte[],System.Byte[])\n  - System.Security.Cryptography.TripleDESCng.Dispose(System.Boolean)\n  - System.Security.Cryptography.TripleDESCng.GenerateIV\n  - System.Security.Cryptography.TripleDESCng.GenerateKey\n  - System.Security.Cryptography.TripleDESCng.Key\n  - System.Security.Cryptography.TripleDESCng.KeySize\n  - System.Security.Cryptography.TripleDESCng.LegalKeySizes\n  langs:\n  - csharp\n  - vb\n  name: TripleDESCng\n  fullName: System.Security.Cryptography.TripleDESCng\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TripleDESCng\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 290\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Provides a Cryptography Next Generation (CNG) implementation of the Triple Data Encryption Standard (3DES) algorithm.</p>\\n\"\n  syntax:\n    content: 'public sealed class TripleDESCng : TripleDES, IDisposable'\n    content.vb: >-\n      Public NotInheritable Class TripleDESCng\n          Inherits TripleDES\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.SymmetricAlgorithm\n  - System.Security.Cryptography.TripleDES\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Security.Cryptography.TripleDES.Create\n  - System.Security.Cryptography.TripleDES.Create(System.String)\n  - System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])\n  - System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  - System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  - System.Security.Cryptography.SymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.SymmetricAlgorithm.Clear\n  - System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n  - System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  - System.Security.Cryptography.SymmetricAlgorithm.IV\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  - System.Security.Cryptography.SymmetricAlgorithm.Mode\n  - System.Security.Cryptography.SymmetricAlgorithm.Padding\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: TripleDESCng\n- uid: System.Security.Cryptography.TripleDESCng.#ctor\n  commentId: M:System.Security.Cryptography.TripleDESCng.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.TripleDESCng\n  langs:\n  - csharp\n  - vb\n  name: TripleDESCng()\n  fullName: System.Security.Cryptography.TripleDESCng.TripleDESCng()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 292\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.TripleDESCng\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with an ephemeral key.</p>\\n\"\n  syntax:\n    content: public TripleDESCng()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TripleDESCng.TripleDESCng()\n- uid: System.Security.Cryptography.TripleDESCng.#ctor(System.String)\n  commentId: M:System.Security.Cryptography.TripleDESCng.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Security.Cryptography.TripleDESCng\n  langs:\n  - csharp\n  - vb\n  name: TripleDESCng(String)\n  fullName: System.Security.Cryptography.TripleDESCng.TripleDESCng(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 293\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.TripleDESCng\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified key name, which represents an existing persisted 3DES key.</p>\\n\"\n  syntax:\n    content: public TripleDESCng(string keyName)\n    content.vb: Public Sub New(keyName As String)\n    parameters:\n    - id: keyName\n      type: System.String\n      description: \"\\n<p>The name of the key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keyName</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>\\n      Cryptography Next Generation (CNG) is not supported on this system.\\n</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>All other errors.\\n</p>\\n\"\n  seealso:\n  - type: System.Security.Cryptography.CngKey.Open(System.String)\n    commentId: M:System.Security.Cryptography.CngKey.Open(System.String)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TripleDESCng.TripleDESCng(String)\n- uid: System.Security.Cryptography.TripleDESCng.#ctor(System.String,System.Security.Cryptography.CngProvider)\n  commentId: M:System.Security.Cryptography.TripleDESCng.#ctor(System.String,System.Security.Cryptography.CngProvider)\n  id: '#ctor(System.String,System.Security.Cryptography.CngProvider)'\n  parent: System.Security.Cryptography.TripleDESCng\n  langs:\n  - csharp\n  - vb\n  name: TripleDESCng(String, CngProvider)\n  fullName: System.Security.Cryptography.TripleDESCng.TripleDESCng(System.String, System.Security.Cryptography.CngProvider)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 294\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.TripleDESCng\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified key name, which represents an existing persisted 3DES key, and the specified key storage provider (KSP).</p>\\n\"\n  syntax:\n    content: public TripleDESCng(string keyName, CngProvider provider)\n    content.vb: Public Sub New(keyName As String, provider As CngProvider)\n    parameters:\n    - id: keyName\n      type: System.String\n      description: \"\\n<p>The name of the key.</p>\\n\"\n    - id: provider\n      type: System.Security.Cryptography.CngProvider\n      description: \"\\n<p>The KSP that contains the key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keyName</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>provider</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>\\n      Cryptography Next Generation (CNG) is not supported on this system.\\n</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>All other errors.\\n</p>\\n\"\n  seealso:\n  - type: System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)\n    commentId: M:System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TripleDESCng.TripleDESCng(String, CngProvider)\n- uid: System.Security.Cryptography.TripleDESCng.#ctor(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  commentId: M:System.Security.Cryptography.TripleDESCng.#ctor(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  id: '#ctor(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)'\n  parent: System.Security.Cryptography.TripleDESCng\n  langs:\n  - csharp\n  - vb\n  name: TripleDESCng(String, CngProvider, CngKeyOpenOptions)\n  fullName: System.Security.Cryptography.TripleDESCng.TripleDESCng(System.String, System.Security.Cryptography.CngProvider, System.Security.Cryptography.CngKeyOpenOptions)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 295\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.TripleDESCng\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified key name, which represents an existing persisted 3DES key,  the specified key storage provider (KSP) and key open options.</p>\\n\"\n  syntax:\n    content: public TripleDESCng(string keyName, CngProvider provider, CngKeyOpenOptions openOptions)\n    content.vb: Public Sub New(keyName As String, provider As CngProvider, openOptions As CngKeyOpenOptions)\n    parameters:\n    - id: keyName\n      type: System.String\n      description: \"\\n<p>The name of the key.</p>\\n\"\n    - id: provider\n      type: System.Security.Cryptography.CngProvider\n      description: \"\\n<p>The KSP that contains the key.</p>\\n\"\n    - id: openOptions\n      type: System.Security.Cryptography.CngKeyOpenOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that specify options for opening the key, such as where the key is opened from (machine or user storage) and whether to suppress UI prompting.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keyName</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>provider</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>\\n      Cryptography Next Generation (CNG) is not supported on this system.\\n</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>All other errors.\\n</p>\\n\"\n  seealso:\n  - type: System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n    commentId: M:System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TripleDESCng.TripleDESCng(String, CngProvider, CngKeyOpenOptions)\n- uid: System.Security.Cryptography.TripleDESCng.Key\n  commentId: P:System.Security.Cryptography.TripleDESCng.Key\n  id: Key\n  parent: System.Security.Cryptography.TripleDESCng\n  langs:\n  - csharp\n  - vb\n  name: Key\n  fullName: System.Security.Cryptography.TripleDESCng.Key\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Key\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 296\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets or sets the key for the <xref href=\\\"System.Security.Cryptography.TripleDESCng\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm.</p>\\n\"\n  syntax:\n    content: public override byte[] Key { get; set; }\n    content.vb: Public Overrides Property Key As Byte()\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The key for the <xref href=\\\"System.Security.Cryptography.TripleDESCng\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm.</p>\\n\"\n  overridden: System.Security.Cryptography.TripleDES.Key\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TripleDESCng.Key\n- uid: System.Security.Cryptography.TripleDESCng.KeySize\n  commentId: P:System.Security.Cryptography.TripleDESCng.KeySize\n  id: KeySize\n  parent: System.Security.Cryptography.TripleDESCng\n  langs:\n  - csharp\n  - vb\n  name: KeySize\n  fullName: System.Security.Cryptography.TripleDESCng.KeySize\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: KeySize\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 297\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets or sets the size, in bits, of the secret key used by the <xref href=\\\"System.Security.Cryptography.TripleDESCng\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm.</p>\\n\"\n  syntax:\n    content: public override int KeySize { get; set; }\n    content.vb: Public Overrides Property KeySize As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The size, in bits, of the secret key used by the <xref href=\\\"System.Security.Cryptography.TripleDESCng\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm.</p>\\n\"\n  overridden: System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TripleDESCng.KeySize\n- uid: System.Security.Cryptography.TripleDESCng.LegalKeySizes\n  commentId: P:System.Security.Cryptography.TripleDESCng.LegalKeySizes\n  id: LegalKeySizes\n  parent: System.Security.Cryptography.TripleDESCng\n  langs:\n  - csharp\n  - vb\n  name: LegalKeySizes\n  fullName: System.Security.Cryptography.TripleDESCng.LegalKeySizes\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LegalKeySizes\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 298\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override KeySizes[] LegalKeySizes { get; }\n    content.vb: Public Overrides ReadOnly Property LegalKeySizes As KeySizes()\n    parameters: []\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n  overridden: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: TripleDESCng.LegalKeySizes\n- uid: System.Security.Cryptography.TripleDESCng.CreateDecryptor\n  commentId: M:System.Security.Cryptography.TripleDESCng.CreateDecryptor\n  id: CreateDecryptor\n  parent: System.Security.Cryptography.TripleDESCng\n  langs:\n  - csharp\n  - vb\n  name: CreateDecryptor()\n  fullName: System.Security.Cryptography.TripleDESCng.CreateDecryptor()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateDecryptor\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 299\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Creates a symmetric 3DES decryptor object with the current key and initialization vector (<xref href=\\\"System.Security.Cryptography.SymmetricAlgorithm.IV\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  syntax:\n    content: public override ICryptoTransform CreateDecryptor()\n    content.vb: Public Overrides Function CreateDecryptor As ICryptoTransform\n    return:\n      type: System.Security.Cryptography.ICryptoTransform\n      description: \"\\n<p>A symmetric 3DES decryptor object.</p>\\n\"\n  overridden: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TripleDESCng.CreateDecryptor()\n- uid: System.Security.Cryptography.TripleDESCng.CreateDecryptor(System.Byte[],System.Byte[])\n  commentId: M:System.Security.Cryptography.TripleDESCng.CreateDecryptor(System.Byte[],System.Byte[])\n  id: CreateDecryptor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.TripleDESCng\n  langs:\n  - csharp\n  - vb\n  name: CreateDecryptor(Byte[], Byte[])\n  fullName: System.Security.Cryptography.TripleDESCng.CreateDecryptor(System.Byte[], System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateDecryptor\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 300\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Creates a symmetric 3DES decryptor object with the specified key and initialization vector (IV).</p>\\n\"\n  syntax:\n    content: public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV)\n    content.vb: Public Overrides Function CreateDecryptor(rgbKey As Byte(), rgbIV As Byte()) As ICryptoTransform\n    parameters:\n    - id: rgbKey\n      type: System.Byte[]\n      description: \"\\n<p>The secret key to use for the 3DES algorithm. The key size must be 192 bits.</p>\\n\"\n    - id: rgbIV\n      type: System.Byte[]\n      description: \"\\n<p>The initialization vector to use for the 3DES algorithm.</p>\\n\"\n    return:\n      type: System.Security.Cryptography.ICryptoTransform\n      description: \"\\n<p>A symmetric 3DES decryptor object.</p>\\n\"\n  overridden: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>rgbKey</em>  is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>rgbKey</em>  is not a valid size for this algorithm.</p>\\n<p>-or-</p>\\n<p>\\n<em>rgbIV</em> size does not match the block size for this algorithm.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>\\n<em>rgbKey</em> is a known weak key for this algorithm and cannot be used.</p>\\n<p>-or-</p>\\n<p>\\n<em>rgbIV</em>  is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Security.Cryptography.TripleDESCng.CreateDecryptor(System.Byte(), System.Byte())\n  name.vb: CreateDecryptor(Byte(), Byte())\n  nameWithType: TripleDESCng.CreateDecryptor(Byte[], Byte[])\n  nameWithType.vb: TripleDESCng.CreateDecryptor(Byte(), Byte())\n- uid: System.Security.Cryptography.TripleDESCng.CreateEncryptor\n  commentId: M:System.Security.Cryptography.TripleDESCng.CreateEncryptor\n  id: CreateEncryptor\n  parent: System.Security.Cryptography.TripleDESCng\n  langs:\n  - csharp\n  - vb\n  name: CreateEncryptor()\n  fullName: System.Security.Cryptography.TripleDESCng.CreateEncryptor()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateEncryptor\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 301\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Creates a symmetric 3DES encryptor object using the current key and initialization vector (<xref href=\\\"System.Security.Cryptography.SymmetricAlgorithm.IV\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  syntax:\n    content: public override ICryptoTransform CreateEncryptor()\n    content.vb: Public Overrides Function CreateEncryptor As ICryptoTransform\n    return:\n      type: System.Security.Cryptography.ICryptoTransform\n      description: \"\\n<p>A symmetric 3DES encryptor object.</p>\\n\"\n  overridden: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TripleDESCng.CreateEncryptor()\n- uid: System.Security.Cryptography.TripleDESCng.CreateEncryptor(System.Byte[],System.Byte[])\n  commentId: M:System.Security.Cryptography.TripleDESCng.CreateEncryptor(System.Byte[],System.Byte[])\n  id: CreateEncryptor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.TripleDESCng\n  langs:\n  - csharp\n  - vb\n  name: CreateEncryptor(Byte[], Byte[])\n  fullName: System.Security.Cryptography.TripleDESCng.CreateEncryptor(System.Byte[], System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateEncryptor\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 302\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Creates a symmetric 3DES encryptor object with the specified key and initialization vector (IV).</p>\\n\"\n  syntax:\n    content: public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV)\n    content.vb: Public Overrides Function CreateEncryptor(rgbKey As Byte(), rgbIV As Byte()) As ICryptoTransform\n    parameters:\n    - id: rgbKey\n      type: System.Byte[]\n      description: \"\\n<p>The secret key to use for the 3DES algorithm. The key size must be 192 bits.</p>\\n\"\n    - id: rgbIV\n      type: System.Byte[]\n      description: \"\\n<p>The initialization vector to use for the 3DES algorithm.</p>\\n\"\n    return:\n      type: System.Security.Cryptography.ICryptoTransform\n      description: \"\\n<p>A symmetric 3DES encryptor object.</p>\\n\"\n  overridden: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>rgbKey</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>rgbKey</em> is not a valid size for this algorithm.</p>\\n<p>-or-</p>\\n<p>\\n<em>rgbIV</em> size does not match the block size for this algorithm.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>\\n<em>rgbKey</em> is a known weak key for this algorithm and cannot be used.</p>\\n<p>-or-</p>\\n<p>\\n<em>rgbIV</em>  is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Security.Cryptography.TripleDESCng.CreateEncryptor(System.Byte(), System.Byte())\n  name.vb: CreateEncryptor(Byte(), Byte())\n  nameWithType: TripleDESCng.CreateEncryptor(Byte[], Byte[])\n  nameWithType.vb: TripleDESCng.CreateEncryptor(Byte(), Byte())\n- uid: System.Security.Cryptography.TripleDESCng.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.TripleDESCng.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.TripleDESCng\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Security.Cryptography.TripleDESCng.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 303\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void Dispose(bool disposing)\n    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n  overridden: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  nameWithType: TripleDESCng.Dispose(Boolean)\n- uid: System.Security.Cryptography.TripleDESCng.GenerateIV\n  commentId: M:System.Security.Cryptography.TripleDESCng.GenerateIV\n  id: GenerateIV\n  parent: System.Security.Cryptography.TripleDESCng\n  langs:\n  - csharp\n  - vb\n  name: GenerateIV()\n  fullName: System.Security.Cryptography.TripleDESCng.GenerateIV()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GenerateIV\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 304\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Generates a random initialization vector (IV) to use for the 3DES algorithm.</p>\\n\"\n  syntax:\n    content: public override void GenerateIV()\n    content.vb: Public Overrides Sub GenerateIV\n  overridden: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TripleDESCng.GenerateIV()\n- uid: System.Security.Cryptography.TripleDESCng.GenerateKey\n  commentId: M:System.Security.Cryptography.TripleDESCng.GenerateKey\n  id: GenerateKey\n  parent: System.Security.Cryptography.TripleDESCng\n  langs:\n  - csharp\n  - vb\n  name: GenerateKey()\n  fullName: System.Security.Cryptography.TripleDESCng.GenerateKey()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GenerateKey\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 305\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Generates a random key to use for the 3DES algorithm.</p>\\n\"\n  syntax:\n    content: public override void GenerateKey()\n    content.vb: Public Overrides Sub GenerateKey\n  overridden: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n  seealso:\n  - type: System.Security.Cryptography.TripleDESCng.Key\n    commentId: P:System.Security.Cryptography.TripleDESCng.Key\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TripleDESCng.GenerateKey()\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.Cryptography.SymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: SymmetricAlgorithm\n  fullName: System.Security.Cryptography.SymmetricAlgorithm\n  commentId: T:System.Security.Cryptography.SymmetricAlgorithm\n  nameWithType: SymmetricAlgorithm\n- uid: System.Security.Cryptography.TripleDES\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: TripleDES\n  fullName: System.Security.Cryptography.TripleDES\n  commentId: T:System.Security.Cryptography.TripleDES\n  nameWithType: TripleDES\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Security.Cryptography.TripleDES.Create\n  parent: System.Security.Cryptography.TripleDES\n  isExternal: true\n  name: Create()\n  fullName: System.Security.Cryptography.TripleDES.Create()\n  spec.csharp:\n  - uid: System.Security.Cryptography.TripleDES.Create\n    name: Create\n    fullName: System.Security.Cryptography.TripleDES.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.TripleDES.Create\n    name: Create\n    fullName: System.Security.Cryptography.TripleDES.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.TripleDES.Create\n  nameWithType: TripleDES.Create()\n- uid: System.Security.Cryptography.TripleDES.Create(System.String)\n  parent: System.Security.Cryptography.TripleDES\n  isExternal: true\n  name: Create(String)\n  fullName: System.Security.Cryptography.TripleDES.Create(System.String)\n  spec.csharp:\n  - uid: System.Security.Cryptography.TripleDES.Create(System.String)\n    name: Create\n    fullName: System.Security.Cryptography.TripleDES.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.TripleDES.Create(System.String)\n    name: Create\n    fullName: System.Security.Cryptography.TripleDES.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.TripleDES.Create(System.String)\n  nameWithType: TripleDES.Create(String)\n- uid: System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])\n  parent: System.Security.Cryptography.TripleDES\n  isExternal: true\n  name: IsWeakKey(Byte[])\n  fullName: System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])\n  fullname.vb: System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte())\n  name.vb: IsWeakKey(Byte())\n  spec.csharp:\n  - uid: System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])\n    name: IsWeakKey\n    fullName: System.Security.Cryptography.TripleDES.IsWeakKey\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])\n    name: IsWeakKey\n    fullName: System.Security.Cryptography.TripleDES.IsWeakKey\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])\n  nameWithType: TripleDES.IsWeakKey(Byte[])\n  nameWithType.vb: TripleDES.IsWeakKey(Byte())\n- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: BlockSizeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  nameWithType: SymmetricAlgorithm.BlockSizeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: FeedbackSizeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  nameWithType: SymmetricAlgorithm.FeedbackSizeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: IVValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  nameWithType: SymmetricAlgorithm.IVValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: KeyValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  nameWithType: SymmetricAlgorithm.KeyValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: LegalBlockSizesValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  nameWithType: SymmetricAlgorithm.LegalBlockSizesValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: LegalKeySizesValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  nameWithType: SymmetricAlgorithm.LegalKeySizesValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: KeySizeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  nameWithType: SymmetricAlgorithm.KeySizeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: ModeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  nameWithType: SymmetricAlgorithm.ModeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: PaddingValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  nameWithType: SymmetricAlgorithm.PaddingValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: Dispose()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose()\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.Dispose\n  nameWithType: SymmetricAlgorithm.Dispose()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Clear\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: Clear()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Clear()\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.Clear\n    name: Clear\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.Clear\n    name: Clear\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.Clear\n  nameWithType: SymmetricAlgorithm.Clear()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: ValidKeySize(Int32)\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n    name: ValidKeySize\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n    name: ValidKeySize\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n  nameWithType: SymmetricAlgorithm.ValidKeySize(Int32)\n- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: BlockSize\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  nameWithType: SymmetricAlgorithm.BlockSize\n- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: FeedbackSize\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  nameWithType: SymmetricAlgorithm.FeedbackSize\n- uid: System.Security.Cryptography.SymmetricAlgorithm.IV\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: IV\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.IV\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.IV\n  nameWithType: SymmetricAlgorithm.IV\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: LegalBlockSizes\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  nameWithType: SymmetricAlgorithm.LegalBlockSizes\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: Mode\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Mode\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.Mode\n  nameWithType: SymmetricAlgorithm.Mode\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: Padding\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Padding\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.Padding\n  nameWithType: SymmetricAlgorithm.Padding\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Security.Cryptography.CngProvider\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngProvider\n  fullName: System.Security.Cryptography.CngProvider\n  commentId: T:System.Security.Cryptography.CngProvider\n  nameWithType: CngProvider\n- uid: System.Security.Cryptography.CngKeyOpenOptions\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKeyOpenOptions\n  fullName: System.Security.Cryptography.CngKeyOpenOptions\n  commentId: T:System.Security.Cryptography.CngKeyOpenOptions\n  nameWithType: CngKeyOpenOptions\n- uid: System.Security.Cryptography.TripleDES.Key\n  parent: System.Security.Cryptography.TripleDES\n  isExternal: true\n  name: Key\n  fullName: System.Security.Cryptography.TripleDES.Key\n  commentId: P:System.Security.Cryptography.TripleDES.Key\n  nameWithType: TripleDES.Key\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: KeySize\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  nameWithType: SymmetricAlgorithm.KeySize\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: LegalKeySizes\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  nameWithType: SymmetricAlgorithm.LegalKeySizes\n- uid: System.Security.Cryptography.KeySizes[]\n  name: KeySizes[]\n  fullName: System.Security.Cryptography.KeySizes[]\n  fullname.vb: System.Security.Cryptography.KeySizes()\n  name.vb: KeySizes()\n  spec.csharp:\n  - uid: System.Security.Cryptography.KeySizes\n    name: KeySizes\n    fullName: System.Security.Cryptography.KeySizes\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Security.Cryptography.KeySizes\n    name: KeySizes\n    fullName: System.Security.Cryptography.KeySizes\n  - name: ()\n    fullName: ()\n  nameWithType: KeySizes[]\n  nameWithType.vb: KeySizes()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: CreateDecryptor()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor()\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n    name: CreateDecryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n    name: CreateDecryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n  nameWithType: SymmetricAlgorithm.CreateDecryptor()\n- uid: System.Security.Cryptography.ICryptoTransform\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ICryptoTransform\n  fullName: System.Security.Cryptography.ICryptoTransform\n  commentId: T:System.Security.Cryptography.ICryptoTransform\n  nameWithType: ICryptoTransform\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: CreateDecryptor(Byte[], Byte[])\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[], System.Byte[])\n  fullname.vb: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte(), System.Byte())\n  name.vb: CreateDecryptor(Byte(), Byte())\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n    name: CreateDecryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n    name: CreateDecryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n  nameWithType: SymmetricAlgorithm.CreateDecryptor(Byte[], Byte[])\n  nameWithType.vb: SymmetricAlgorithm.CreateDecryptor(Byte(), Byte())\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: CreateEncryptor()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor()\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n    name: CreateEncryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n    name: CreateEncryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n  nameWithType: SymmetricAlgorithm.CreateEncryptor()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: CreateEncryptor(Byte[], Byte[])\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[], System.Byte[])\n  fullname.vb: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte(), System.Byte())\n  name.vb: CreateEncryptor(Byte(), Byte())\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n    name: CreateEncryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n    name: CreateEncryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n  nameWithType: SymmetricAlgorithm.CreateEncryptor(Byte[], Byte[])\n  nameWithType.vb: SymmetricAlgorithm.CreateEncryptor(Byte(), Byte())\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: Dispose(Boolean)\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  nameWithType: SymmetricAlgorithm.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: GenerateIV()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV()\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n    name: GenerateIV\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n    name: GenerateIV\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n  nameWithType: SymmetricAlgorithm.GenerateIV()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: GenerateKey()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey()\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n    name: GenerateKey\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n    name: GenerateKey\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n  nameWithType: SymmetricAlgorithm.GenerateKey()\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.PlatformNotSupportedException\n  isExternal: false\n  name: PlatformNotSupportedException\n  fullName: System.PlatformNotSupportedException\n  nameWithType: PlatformNotSupportedException\n  commentId: T:System.PlatformNotSupportedException\n- uid: System.Security.Cryptography.CryptographicException\n  isExternal: false\n  name: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n  commentId: T:System.Security.Cryptography.CryptographicException\n  nameWithType: CryptographicException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}