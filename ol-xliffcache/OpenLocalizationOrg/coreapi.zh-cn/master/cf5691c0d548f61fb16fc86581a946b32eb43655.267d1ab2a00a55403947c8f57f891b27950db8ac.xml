{"nodes":[{"pos":[646,667],"content":"XNodeEqualityComparer","needQuote":true,"nodes":[{"content":"XNodeEqualityComparer","pos":[0,21]}]},{"pos":[2241,2264],"content":"XNodeEqualityComparer()","needQuote":true,"nodes":[{"content":"XNodeEqualityComparer()","pos":[0,23]}]},{"pos":[3392,3412],"content":"Equals(XNode, XNode)","needQuote":true,"nodes":[{"content":"Equals(XNode, XNode)","pos":[0,20]}]},{"pos":[5156,5174],"content":"GetHashCode(XNode)","needQuote":true,"nodes":[{"content":"GetHashCode(XNode)","pos":[0,18]}]},{"pos":[6910,6950],"content":"IEqualityComparer.Equals(Object, Object)","needQuote":true,"nodes":[{"content":"IEqualityComparer.Equals(Object, Object)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the nodes are equal; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8146,8238],"source":"\\n<p>\\n<strong>true</strong> if the nodes are equal; otherwise <strong>false</strong>.</p>\\n"},{"pos":[8975,9012],"content":"IEqualityComparer.GetHashCode(Object)","needQuote":true,"nodes":[{"content":"IEqualityComparer.GetHashCode(Object)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The node to hash.&lt;/p&gt;\\n","pos":[9866,9894],"source":"\\n<p>The node to hash.</p>\\n"},{"pos":[10479,10494],"content":"System.Xml.Linq","needQuote":true,"nodes":[{"content":"System.Xml.Linq","pos":[0,15]}]},{"pos":[10652,10658],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10918,10942],"content":"IEqualityComparer<XNode>","needQuote":true,"nodes":[{"content":"IEqualityComparer&lt;XNode&gt;","pos":[0,24],"source":"IEqualityComparer<XNode>"}]},{"pos":[11229,11246],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[11337,11338],"content":"<","needQuote":true,"nodes":[]},{"pos":[11396,11401],"content":"XNode","needQuote":true,"nodes":[{"content":"XNode","pos":[0,5]}]},{"pos":[11547,11564],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"content":"(Of","pos":[11656,11659]},{"pos":[11724,11729],"content":"XNode","needQuote":true,"nodes":[{"content":"XNode","pos":[0,5]}]},{"pos":[11776,11777],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12066,12083],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[12300,12310],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[12405,12413],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[12482,12483],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12510,12511],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12581,12589],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[12658,12659],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12686,12687],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12870,12884],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[13003,13009],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13076,13077],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13127,13133],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13193,13194],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13277,13283],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13350,13351],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13401,13407],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13467,13468],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13682,13704],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[13852,13858],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13925,13926],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13976,13982],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14043,14044]},{"pos":[14099,14105],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14165,14166],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14263,14269],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14336,14337],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14387,14393],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14454,14455]},{"pos":[14510,14516],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14576,14577],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14822,14853],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[15019,15034],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[15110,15111],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15161,15167],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15228,15229]},{"pos":[15284,15290],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15350,15351],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15457,15472],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[15548,15549],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15599,15605],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15666,15667]},{"pos":[15722,15728],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15788,15789],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16019,16032],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[16133,16144],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[16216,16217],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16244,16245],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16318,16329],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[16401,16402],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16429,16430],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16605,16614],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[16707,16714],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[16782,16783],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16810,16811],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16880,16887],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[16955,16956],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16983,16984],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17159,17176],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[17285,17300],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[17376,17377],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17404,17405],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17482,17497],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[17573,17574],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17601,17602],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17747,17753],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[17900,17920],"content":"IEqualityComparer<T>","needQuote":true,"nodes":[{"content":"IEqualityComparer&lt;T&gt;","pos":[0,20],"source":"IEqualityComparer<T>"}]},{"pos":[18163,18180],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[18250,18251],"content":"<","needQuote":true,"nodes":[]},{"pos":[18278,18279],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[18405,18422],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"content":"(Of","pos":[18493,18496]},{"pos":[18530,18531],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[18558,18559],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18780,18806],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[18985,19003],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[19392,19412],"content":"Equals(XNode, XNode)","needQuote":true,"nodes":[{"content":"Equals(XNode, XNode)","pos":[0,20]}]},{"pos":[19780,19786],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19907,19908],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19966,19971],"content":"XNode","needQuote":true,"nodes":[{"content":"XNode","pos":[0,5]}]},{"content":",","pos":[20019,20020]},{"pos":[20083,20088],"content":"XNode","needQuote":true,"nodes":[{"content":"XNode","pos":[0,5]}]},{"pos":[20135,20136],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20244,20250],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20374,20375],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20433,20438],"content":"XNode","needQuote":true,"nodes":[{"content":"XNode","pos":[0,5]}]},{"content":",","pos":[20486,20487]},{"pos":[20550,20555],"content":"XNode","needQuote":true,"nodes":[{"content":"XNode","pos":[0,5]}]},{"pos":[20602,20603],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20968,20973],"content":"XNode","needQuote":true,"nodes":[{"content":"XNode","pos":[0,5]}]},{"pos":[21134,21141],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[21318,21330],"content":"Equals(T, T)","needQuote":true,"nodes":[{"content":"Equals(T, T)","pos":[0,12]}]},{"pos":[21578,21584],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21685,21686],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21713,21714],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[21742,21743]},{"pos":[21775,21776],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[21803,21804],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21912,21918],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22022,22023],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22050,22051],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[22079,22080]},{"pos":[22112,22113],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[22140,22141],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22613,22631],"content":"GetHashCode(XNode)","needQuote":true,"nodes":[{"content":"GetHashCode(XNode)","pos":[0,18]}]},{"pos":[22965,22976],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[23102,23103],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23161,23166],"content":"XNode","needQuote":true,"nodes":[{"content":"XNode","pos":[0,5]}]},{"pos":[23213,23214],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23324,23335],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[23464,23465],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23523,23528],"content":"XNode","needQuote":true,"nodes":[{"content":"XNode","pos":[0,5]}]},{"pos":[23575,23576],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23902,23907],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[24080,24094],"content":"GetHashCode(T)","needQuote":true,"nodes":[{"content":"GetHashCode(T)","pos":[0,14]}]},{"pos":[24348,24359],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[24465,24466],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24493,24494],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[24521,24522],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24632,24643],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[24752,24753],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24780,24781],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[24808,24809],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25168,25190],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[25384,25390],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25480,25481],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25531,25537],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25598,25599]},{"pos":[25654,25660],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25720,25721],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25841,25847],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25937,25938],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25988,25994],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26055,26056]},{"pos":[26111,26117],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26177,26178],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26485,26504],"content":"GetHashCode(Object)","needQuote":true,"nodes":[{"content":"GetHashCode(Object)","pos":[0,19]}]},{"pos":[26679,26690],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[26785,26786],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26836,26842],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26902,26903],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27014,27025],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[27120,27121],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27171,27177],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27237,27238],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]}],"content":"items:\n- uid: System.Xml.Linq.XNodeEqualityComparer\n  commentId: T:System.Xml.Linq.XNodeEqualityComparer\n  id: XNodeEqualityComparer\n  parent: System.Xml.Linq\n  children:\n  - System.Xml.Linq.XNodeEqualityComparer.#ctor\n  - System.Xml.Linq.XNodeEqualityComparer.Equals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  - System.Xml.Linq.XNodeEqualityComparer.GetHashCode(System.Xml.Linq.XNode)\n  - System.Xml.Linq.XNodeEqualityComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)\n  - System.Xml.Linq.XNodeEqualityComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)\n  langs:\n  - csharp\n  - vb\n  name: XNodeEqualityComparer\n  fullName: System.Xml.Linq.XNodeEqualityComparer\n  type: Class\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XNodeEqualityComparer\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 380\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Compares nodes to determine whether they are equal. This class cannot be inherited. </p>\\n\"\n  syntax:\n    content: 'public sealed class XNodeEqualityComparer : IEqualityComparer<XNode>, IEqualityComparer'\n    content.vb: >-\n      Public NotInheritable Class XNodeEqualityComparer\n          Implements IEqualityComparer(Of XNode), IEqualityComparer\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.IEqualityComparer{System.Xml.Linq.XNode}\n  - System.Collections.IEqualityComparer\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: XNodeEqualityComparer\n- uid: System.Xml.Linq.XNodeEqualityComparer.#ctor\n  commentId: M:System.Xml.Linq.XNodeEqualityComparer.#ctor\n  id: '#ctor'\n  parent: System.Xml.Linq.XNodeEqualityComparer\n  langs:\n  - csharp\n  - vb\n  name: XNodeEqualityComparer()\n  fullName: System.Xml.Linq.XNodeEqualityComparer.XNodeEqualityComparer()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 382\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Xml.Linq.XNodeEqualityComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. </p>\\n\"\n  syntax:\n    content: public XNodeEqualityComparer()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XNodeEqualityComparer.XNodeEqualityComparer()\n- uid: System.Xml.Linq.XNodeEqualityComparer.Equals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  commentId: M:System.Xml.Linq.XNodeEqualityComparer.Equals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  id: Equals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  parent: System.Xml.Linq.XNodeEqualityComparer\n  langs:\n  - csharp\n  - vb\n  name: Equals(XNode, XNode)\n  fullName: System.Xml.Linq.XNodeEqualityComparer.Equals(System.Xml.Linq.XNode, System.Xml.Linq.XNode)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 383\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Compares the values of two nodes.</p>\\n\"\n  syntax:\n    content: public bool Equals(XNode x, XNode y)\n    content.vb: Public Function Equals(x As XNode, y As XNode) As Boolean\n    parameters:\n    - id: x\n      type: System.Xml.Linq.XNode\n      description: \"\\n<p>The first <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare.</p>\\n\"\n    - id: y\n      type: System.Xml.Linq.XNode\n      description: \"\\n<p>The second <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>A <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> indicating if the nodes are equal.</p>\\n\"\n  implements:\n  - System.Collections.Generic.IEqualityComparer{System.Xml.Linq.XNode}.Equals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XNodeEqualityComparer.Equals(XNode, XNode)\n- uid: System.Xml.Linq.XNodeEqualityComparer.GetHashCode(System.Xml.Linq.XNode)\n  commentId: M:System.Xml.Linq.XNodeEqualityComparer.GetHashCode(System.Xml.Linq.XNode)\n  id: GetHashCode(System.Xml.Linq.XNode)\n  parent: System.Xml.Linq.XNodeEqualityComparer\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode(XNode)\n  fullName: System.Xml.Linq.XNodeEqualityComparer.GetHashCode(System.Xml.Linq.XNode)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 384\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a hash code based on an <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public int GetHashCode(XNode obj)\n    content.vb: Public Function GetHashCode(obj As XNode) As Integer\n    parameters:\n    - id: obj\n      type: System.Xml.Linq.XNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to hash.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains a value-based hash code for the node.</p>\\n\"\n  implements:\n  - System.Collections.Generic.IEqualityComparer{System.Xml.Linq.XNode}.GetHashCode(System.Xml.Linq.XNode)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XNodeEqualityComparer.GetHashCode(XNode)\n- uid: System.Xml.Linq.XNodeEqualityComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)\n  commentId: M:System.Xml.Linq.XNodeEqualityComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)\n  id: System#Collections#IEqualityComparer#Equals(System.Object,System.Object)\n  isEii: true\n  parent: System.Xml.Linq.XNodeEqualityComparer\n  langs:\n  - csharp\n  - vb\n  name: IEqualityComparer.Equals(Object, Object)\n  fullName: System.Xml.Linq.XNodeEqualityComparer.System.Collections.IEqualityComparer.Equals(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IEqualityComparer.Equals\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 385\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Compares the values of two nodes.</p>\\n\"\n  syntax:\n    content: bool IEqualityComparer.Equals(object x, object y)\n    content.vb: Function System.Collections.IEqualityComparer.Equals(x As Object, y As Object) As Boolean Implements IEqualityComparer.Equals\n    parameters:\n    - id: x\n      type: System.Object\n      description: \"\\n<p>The first <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare.</p>\\n\"\n    - id: y\n      type: System.Object\n      description: \"\\n<p>The second <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the nodes are equal; otherwise <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IEqualityComparer.Equals(System.Object,System.Object)\n  name.vb: System.Collections.IEqualityComparer.Equals(Object, Object)\n  nameWithType: XNodeEqualityComparer.IEqualityComparer.Equals(Object, Object)\n  nameWithType.vb: XNodeEqualityComparer.System.Collections.IEqualityComparer.Equals(Object, Object)\n- uid: System.Xml.Linq.XNodeEqualityComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)\n  commentId: M:System.Xml.Linq.XNodeEqualityComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)\n  id: System#Collections#IEqualityComparer#GetHashCode(System.Object)\n  isEii: true\n  parent: System.Xml.Linq.XNodeEqualityComparer\n  langs:\n  - csharp\n  - vb\n  name: IEqualityComparer.GetHashCode(Object)\n  fullName: System.Xml.Linq.XNodeEqualityComparer.System.Collections.IEqualityComparer.GetHashCode(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IEqualityComparer.GetHashCode\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 386\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a hash code based on the value of a node.</p>\\n\"\n  syntax:\n    content: int IEqualityComparer.GetHashCode(object obj)\n    content.vb: Function System.Collections.IEqualityComparer.GetHashCode(obj As Object) As Integer Implements IEqualityComparer.GetHashCode\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The node to hash.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains a value-based hash code for the node.</p>\\n\"\n  implements:\n  - System.Collections.IEqualityComparer.GetHashCode(System.Object)\n  name.vb: System.Collections.IEqualityComparer.GetHashCode(Object)\n  nameWithType: XNodeEqualityComparer.IEqualityComparer.GetHashCode(Object)\n  nameWithType.vb: XNodeEqualityComparer.System.Collections.IEqualityComparer.GetHashCode(Object)\nreferences:\n- uid: System.Xml.Linq\n  isExternal: false\n  name: System.Xml.Linq\n  fullName: System.Xml.Linq\n  commentId: N:System.Xml.Linq\n  nameWithType: System.Xml.Linq\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Collections.Generic.IEqualityComparer{System.Xml.Linq.XNode}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEqualityComparer`1\n  name: IEqualityComparer<XNode>\n  fullName: System.Collections.Generic.IEqualityComparer<System.Xml.Linq.XNode>\n  fullname.vb: System.Collections.Generic.IEqualityComparer(Of System.Xml.Linq.XNode)\n  name.vb: IEqualityComparer(Of XNode)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Xml.Linq.XNode\n    name: XNode\n    fullName: System.Xml.Linq.XNode\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Xml.Linq.XNode\n    name: XNode\n    fullName: System.Xml.Linq.XNode\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEqualityComparer{System.Xml.Linq.XNode}\n  nameWithType: IEqualityComparer<XNode>\n  nameWithType.vb: IEqualityComparer(Of XNode)\n- uid: System.Collections.IEqualityComparer\n  parent: System.Collections\n  isExternal: false\n  name: IEqualityComparer\n  fullName: System.Collections.IEqualityComparer\n  commentId: T:System.Collections.IEqualityComparer\n  nameWithType: IEqualityComparer\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Collections.Generic.IEqualityComparer`1\n  isExternal: false\n  name: IEqualityComparer<T>\n  fullName: System.Collections.Generic.IEqualityComparer<T>\n  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T)\n  name.vb: IEqualityComparer(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEqualityComparer`1\n  nameWithType: IEqualityComparer<T>\n  nameWithType.vb: IEqualityComparer(Of T)\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n  nameWithType: System.Collections.Generic\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  commentId: N:System.Collections\n  nameWithType: System.Collections\n- uid: System.Collections.Generic.IEqualityComparer{System.Xml.Linq.XNode}.Equals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  parent: System.Collections.Generic.IEqualityComparer{System.Xml.Linq.XNode}\n  definition: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)\n  name: Equals(XNode, XNode)\n  fullName: System.Collections.Generic.IEqualityComparer<System.Xml.Linq.XNode>.Equals(System.Xml.Linq.XNode, System.Xml.Linq.XNode)\n  fullname.vb: System.Collections.Generic.IEqualityComparer(Of System.Xml.Linq.XNode).Equals(System.Xml.Linq.XNode, System.Xml.Linq.XNode)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)\n    name: Equals\n    fullName: System.Collections.Generic.IEqualityComparer<System.Xml.Linq.XNode>.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Xml.Linq.XNode\n    name: XNode\n    fullName: System.Xml.Linq.XNode\n  - name: ', '\n    fullName: ', '\n  - uid: System.Xml.Linq.XNode\n    name: XNode\n    fullName: System.Xml.Linq.XNode\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)\n    name: Equals\n    fullName: System.Collections.Generic.IEqualityComparer(Of System.Xml.Linq.XNode).Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Xml.Linq.XNode\n    name: XNode\n    fullName: System.Xml.Linq.XNode\n  - name: ', '\n    fullName: ', '\n  - uid: System.Xml.Linq.XNode\n    name: XNode\n    fullName: System.Xml.Linq.XNode\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.Generic.IEqualityComparer{System.Xml.Linq.XNode}.Equals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  nameWithType: IEqualityComparer<XNode>.Equals(XNode, XNode)\n  nameWithType.vb: IEqualityComparer(Of XNode).Equals(XNode, XNode)\n- uid: System.Xml.Linq.XNode\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XNode\n  fullName: System.Xml.Linq.XNode\n  commentId: T:System.Xml.Linq.XNode\n  nameWithType: XNode\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)\n  isExternal: true\n  name: Equals(T, T)\n  fullName: System.Collections.Generic.IEqualityComparer<T>.Equals(T, T)\n  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T).Equals(T, T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)\n    name: Equals\n    fullName: System.Collections.Generic.IEqualityComparer<T>.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)\n    name: Equals\n    fullName: System.Collections.Generic.IEqualityComparer(Of T).Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)\n  nameWithType: IEqualityComparer<T>.Equals(T, T)\n  nameWithType.vb: IEqualityComparer(Of T).Equals(T, T)\n- uid: System.Collections.Generic.IEqualityComparer{System.Xml.Linq.XNode}.GetHashCode(System.Xml.Linq.XNode)\n  parent: System.Collections.Generic.IEqualityComparer{System.Xml.Linq.XNode}\n  definition: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)\n  name: GetHashCode(XNode)\n  fullName: System.Collections.Generic.IEqualityComparer<System.Xml.Linq.XNode>.GetHashCode(System.Xml.Linq.XNode)\n  fullname.vb: System.Collections.Generic.IEqualityComparer(Of System.Xml.Linq.XNode).GetHashCode(System.Xml.Linq.XNode)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)\n    name: GetHashCode\n    fullName: System.Collections.Generic.IEqualityComparer<System.Xml.Linq.XNode>.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Xml.Linq.XNode\n    name: XNode\n    fullName: System.Xml.Linq.XNode\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)\n    name: GetHashCode\n    fullName: System.Collections.Generic.IEqualityComparer(Of System.Xml.Linq.XNode).GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Xml.Linq.XNode\n    name: XNode\n    fullName: System.Xml.Linq.XNode\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.Generic.IEqualityComparer{System.Xml.Linq.XNode}.GetHashCode(System.Xml.Linq.XNode)\n  nameWithType: IEqualityComparer<XNode>.GetHashCode(XNode)\n  nameWithType.vb: IEqualityComparer(Of XNode).GetHashCode(XNode)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)\n  isExternal: true\n  name: GetHashCode(T)\n  fullName: System.Collections.Generic.IEqualityComparer<T>.GetHashCode(T)\n  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T).GetHashCode(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)\n    name: GetHashCode\n    fullName: System.Collections.Generic.IEqualityComparer<T>.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)\n    name: GetHashCode\n    fullName: System.Collections.Generic.IEqualityComparer(Of T).GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)\n  nameWithType: IEqualityComparer<T>.GetHashCode(T)\n  nameWithType.vb: IEqualityComparer(Of T).GetHashCode(T)\n- uid: System.Collections.IEqualityComparer.Equals(System.Object,System.Object)\n  parent: System.Collections.IEqualityComparer\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Collections.IEqualityComparer.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Collections.IEqualityComparer.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Collections.IEqualityComparer.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEqualityComparer.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Collections.IEqualityComparer.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)\n  nameWithType: IEqualityComparer.Equals(Object, Object)\n- uid: System.Collections.IEqualityComparer.GetHashCode(System.Object)\n  parent: System.Collections.IEqualityComparer\n  isExternal: true\n  name: GetHashCode(Object)\n  fullName: System.Collections.IEqualityComparer.GetHashCode(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IEqualityComparer.GetHashCode(System.Object)\n    name: GetHashCode\n    fullName: System.Collections.IEqualityComparer.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEqualityComparer.GetHashCode(System.Object)\n    name: GetHashCode\n    fullName: System.Collections.IEqualityComparer.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.IEqualityComparer.GetHashCode(System.Object)\n  nameWithType: IEqualityComparer.GetHashCode(Object)\n"}