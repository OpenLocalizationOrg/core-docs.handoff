{"nodes":[{"pos":[5437,5448],"content":"EventSource","needQuote":true,"nodes":[{"content":"EventSource","pos":[0,11]}]},{"pos":[6821,6834],"content":"EventSource()","needQuote":true,"nodes":[{"content":"EventSource()","pos":[0,13]}]},{"pos":[7878,7898],"content":"EventSource(Boolean)","needQuote":true,"nodes":[{"content":"EventSource(Boolean)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to throw an exception when an error occurs in the underlying Windows code; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8849,8993],"source":"\\n<p>\\n<strong>true</strong> to throw an exception when an error occurs in the underlying Windows code; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[9462,9494],"content":"EventSource(EventSourceSettings)","needQuote":true,"nodes":[{"content":"EventSource(EventSourceSettings)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.&lt;/p&gt;\\n","pos":[10437,10565],"source":"\\n<p>A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.</p>\\n"},{"pos":[11094,11136],"content":"EventSource(EventSourceSettings, String[])","needQuote":true,"nodes":[{"content":"EventSource(EventSourceSettings, String[])","pos":[0,42]}]},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.&lt;/p&gt;\\n","pos":[12191,12319],"source":"\\n<p>A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.</p>\\n"},{"content":"\\n&lt;p&gt;The key-value pairs that specify traits for the event source.&lt;/p&gt;\\n","pos":[12386,12458],"source":"\\n<p>The key-value pairs that specify traits for the event source.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;traits&lt;/em&gt; is not specified in key-value pairs.&lt;/p&gt;\\n","pos":[12569,12634],"source":"\\n<p>\\n<em>traits</em> is not specified in key-value pairs.</p>\\n"},{"pos":[13449,13468],"content":"EventSource(String)","needQuote":true,"nodes":[{"content":"EventSource(String)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The name to apply to the event source.","pos":[14365,14408],"source":"\\n<p>The name to apply to the event source."},{"content":"Must not be &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[14409,14449],"source":" Must not be <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;eventSourceName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[14568,14631],"source":"\\n<p>\\n<em>eventSourceName</em> is <strong>null</strong>.</p>\\n"},{"pos":[15135,15175],"content":"EventSource(String, EventSourceSettings)","needQuote":true,"nodes":[{"content":"EventSource(String, EventSourceSettings)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The name to apply to the event source.","pos":[16192,16235],"source":"\\n<p>The name to apply to the event source."},{"content":"Must not be &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16236,16276],"source":" Must not be <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.&lt;/p&gt;\\n","pos":[16374,16502],"source":"\\n<p>A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;eventSourceName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16621,16684],"source":"\\n<p>\\n<em>eventSourceName</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;eventSourceName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16789,16852],"source":"\\n<p>\\n<em>eventSourceName</em> is <strong>null</strong>.</p>\\n"},{"pos":[17425,17475],"content":"EventSource(String, EventSourceSettings, String[])","needQuote":true,"nodes":[{"content":"EventSource(String, EventSourceSettings, String[])","pos":[0,50]}]},{"content":"\\n&lt;p&gt;The name to apply to the event source.","pos":[18569,18612],"source":"\\n<p>The name to apply to the event source."},{"content":"Must not be &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18613,18653],"source":" Must not be <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.&lt;/p&gt;\\n","pos":[18751,18879],"source":"\\n<p>A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.</p>\\n"},{"content":"\\n&lt;p&gt;The key-value pairs that specify traits for the event source.&lt;/p&gt;\\n","pos":[18946,19018],"source":"\\n<p>The key-value pairs that specify traits for the event source.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;eventSourceName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[19137,19200],"source":"\\n<p>\\n<em>eventSourceName</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;traits&lt;/em&gt; is not specified in key-value pairs.&lt;/p&gt;\\n","pos":[19297,19362],"source":"\\n<p>\\n<em>traits</em> is not specified in key-value pairs.</p>\\n"},{"pos":[20211,20232],"content":"ConstructionException","needQuote":true,"nodes":[{"content":"ConstructionException","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The exception that was thrown during the construction of the event source, or &lt;strong&gt;null&lt;/strong&gt; if no exception was thrown.","pos":[21091,21223],"source":"\\n<p>The exception that was thrown during the construction of the event source, or <strong>null</strong> if no exception was thrown."},{"content":"&lt;/p&gt;\\n","pos":[21224,21230],"source":" </p>\\n"},{"pos":[21623,21646],"content":"CurrentThreadActivityId","needQuote":true,"nodes":[{"content":"CurrentThreadActivityId","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The activity ID of the current thread.","pos":[22558,22601],"source":"\\n<p>The activity ID of the current thread."},{"content":"&lt;/p&gt;\\n","pos":[22602,22608],"source":" </p>\\n"},{"pos":[23164,23168],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"content":"\\n&lt;p&gt;A unique identifier for the event source.&lt;/p&gt;\\n","pos":[23840,23892],"source":"\\n<p>A unique identifier for the event source.</p>\\n"},{"pos":[24211,24215],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"content":"\\n&lt;p&gt;The friendly name of the derived class.","pos":[24919,24963],"source":"\\n<p>The friendly name of the derived class."},{"content":"The default is the simple name of the class.&lt;/p&gt;\\n","pos":[24965,25015],"source":"  The default is the simple name of the class.</p>\\n"},{"pos":[25346,25354],"content":"Settings","needQuote":true,"nodes":[{"content":"Settings","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The settings applied to this event source.&lt;/p&gt;\\n","pos":[26111,26164],"source":"\\n<p>The settings applied to this event source.</p>\\n"},{"pos":[26535,26555],"content":"EventCommandExecuted","needQuote":true,"nodes":[{"content":"EventCommandExecuted","pos":[0,20]}]},{"pos":[27686,27695],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[28800,28816],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to release both managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to release only unmanaged resources.","pos":[29709,29846],"source":"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources."},{"content":"&lt;/p&gt;\\n","pos":[29847,29853],"source":" </p>\\n"},{"pos":[30209,30219],"content":"Finalize()","needQuote":true,"nodes":[{"content":"Finalize()","pos":[0,10]}]},{"pos":[31429,31459],"content":"GenerateManifest(Type, String)","needQuote":true,"nodes":[{"content":"GenerateManifest(Type, String)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The type of the event source.&lt;/p&gt;\\n","pos":[32389,32429],"source":"\\n<p>The type of the event source.</p>\\n"},{"content":"\\n&lt;p&gt;The XML data string.&lt;/p&gt;\\n","pos":[32772,32803],"source":"\\n<p>The XML data string.</p>\\n"},{"pos":[33410,33462],"content":"GenerateManifest(Type, String, EventManifestOptions)","needQuote":true,"nodes":[{"content":"GenerateManifest(Type, String, EventManifestOptions)","pos":[0,52]}]},{"content":"\\n&lt;p&gt;The type of the event source.&lt;/p&gt;\\n","pos":[34500,34540],"source":"\\n<p>The type of the event source.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that specify how the manifest is generated.&lt;/p&gt;\\n","pos":[34926,35028],"source":"\\n<p>A bitwise combination of the enumeration values that specify how the manifest is generated.</p>\\n"},{"content":"\\n&lt;p&gt;The XML data string or &lt;strong&gt;null&lt;/strong&gt; (see remarks).&lt;/p&gt;\\n","pos":[35088,35158],"source":"\\n<p>The XML data string or <strong>null</strong> (see remarks).</p>\\n"},{"pos":[35574,35587],"content":"GetGuid(Type)","needQuote":true,"nodes":[{"content":"GetGuid(Type)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The type of the event source.&lt;/p&gt;\\n","pos":[36364,36404],"source":"\\n<p>The type of the event source.</p>\\n"},{"content":"\\n&lt;p&gt;A unique identifier for this event source type.&lt;/p&gt;\\n","pos":[36462,36520],"source":"\\n<p>A unique identifier for this event source type.</p>\\n"},{"pos":[36897,36910],"content":"GetName(Type)","needQuote":true,"nodes":[{"content":"GetName(Type)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The type of the event source.&lt;/p&gt;\\n","pos":[37663,37703],"source":"\\n<p>The type of the event source.</p>\\n"},{"content":"\\n&lt;p&gt;The friendly name of the event source.","pos":[37763,37806],"source":"\\n<p>The friendly name of the event source."},{"content":"The default is the simple name of the class.&lt;/p&gt;\\n","pos":[37807,37857],"source":" The default is the simple name of the class.</p>\\n"},{"pos":[38204,38216],"content":"GetSources()","needQuote":true,"nodes":[{"content":"GetSources()","pos":[0,12]}]},{"content":"\\n&lt;p&gt;An enumeration of all the event sources in the application domain.&lt;/p&gt;\\n","pos":[39026,39103],"source":"\\n<p>An enumeration of all the event sources in the application domain.</p>\\n"},{"pos":[39488,39504],"content":"GetTrait(String)","needQuote":true,"nodes":[{"content":"GetTrait(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The key of the trait to get.&lt;/p&gt;\\n","pos":[40231,40270],"source":"\\n<p>The key of the trait to get.</p>\\n"},{"content":"\\n&lt;p&gt;The trait value associated with the specified key.","pos":[40330,40385],"source":"\\n<p>The trait value associated with the specified key."},{"content":"If the key is not found, returns &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[40386,40447],"source":" If the key is not found, returns <strong>null</strong>.</p>\\n"},{"pos":[40772,40783],"content":"IsEnabled()","needQuote":true,"nodes":[{"content":"IsEnabled()","pos":[0,11]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current event source is enabled; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[41761,41870],"source":"\\n<p>\\n<strong>true</strong> if the current event source is enabled; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[42430,42466],"content":"IsEnabled(EventLevel, EventKeywords)","needQuote":true,"nodes":[{"content":"IsEnabled(EventLevel, EventKeywords)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The level of the event source.&lt;/p&gt;\\n","pos":[43695,43736],"source":"\\n<p>The level of the event source.</p>\\n"},{"content":"\\n&lt;p&gt;The keyword of the event source.&lt;/p&gt;\\n","pos":[43830,43873],"source":"\\n<p>The keyword of the event source.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the event source is enabled; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[43934,44035],"source":"\\n<p>\\n<strong>true</strong> if the event source is enabled; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[44740,44790],"content":"IsEnabled(EventLevel, EventKeywords, EventChannel)","needQuote":true,"nodes":[{"content":"IsEnabled(EventLevel, EventKeywords, EventChannel)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;The event level to check.","pos":[46124,46154],"source":"\\n<p>The event level to check."},{"content":"An event source will be considered enabled when its level is greater than or equal to &lt;em&gt;level&lt;/em&gt;.&lt;/p&gt;\\n","pos":[46155,46262],"source":" An event source will be considered enabled when its level is greater than or equal to <em>level</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The event keywords to check.&lt;/p&gt;\\n","pos":[46356,46395],"source":"\\n<p>The event keywords to check.</p>\\n"},{"content":"\\n&lt;p&gt;The event channel to check.&lt;/p&gt;\\n","pos":[46487,46525],"source":"\\n<p>The event channel to check.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the event source is enabled for the specified event level, keywords and channel; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;The result of this method is only an approximation of whether a particular event is active.","pos":[46586,46833],"source":"\\n<p>\\n<strong>true</strong> if the event source is enabled for the specified event level, keywords and channel; otherwise, <strong>false</strong>.</p>\\n<p>The result of this method is only an approximation of whether a particular event is active."},{"content":"Use it to avoid expensive computation for logging when logging is disabled.","pos":[46835,46910]},{"content":"Event sources may have additional filtering that determines their activity..&lt;/p&gt;\\n","pos":[46913,46995],"source":"   Event sources may have additional filtering that determines their activity..</p>\\n"},{"pos":[47519,47556],"content":"OnEventCommand(EventCommandEventArgs)","needQuote":true,"nodes":[{"content":"OnEventCommand(EventCommandEventArgs)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The arguments for the event.&lt;/p&gt;\\n","pos":[48439,48478],"source":"\\n<p>The arguments for the event.</p>\\n"},{"pos":[49308,49375],"content":"SendCommand(EventSource, EventCommand, IDictionary<String, String>)","needQuote":true,"nodes":[{"content":"SendCommand(EventSource, EventCommand, IDictionary&lt;String, String&gt;)","pos":[0,67],"source":"SendCommand(EventSource, EventCommand, IDictionary<String, String>)"}]},{"content":"\\n&lt;p&gt;The event source to send the command to.&lt;/p&gt;\\n","pos":[50440,50491],"source":"\\n<p>The event source to send the command to.</p>\\n"},{"content":"\\n&lt;p&gt;The event command to send.&lt;/p&gt;\\n","pos":[50583,50620],"source":"\\n<p>The event command to send.</p>\\n"},{"content":"\\n&lt;p&gt;The arguments for the event command.&lt;/p&gt;\\n","pos":[50749,50796],"source":"\\n<p>The arguments for the event command.</p>\\n"},{"pos":[51688,51720],"content":"SetCurrentThreadActivityId(Guid)","needQuote":true,"nodes":[{"content":"SetCurrentThreadActivityId(Guid)","pos":[0,32]}]},{"pos":[53381,53423],"content":"SetCurrentThreadActivityId(Guid, out Guid)","needQuote":true,"nodes":[{"content":"SetCurrentThreadActivityId(Guid, out Guid)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;When this method returns, contains the previous activity ID on the current thread.","pos":[54811,54898],"source":"\\n<p>When this method returns, contains the previous activity ID on the current thread."},{"content":"&lt;/p&gt;\\n","pos":[54899,54905],"source":" </p>\\n"},{"pos":[55520,55530],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The name and unique identifier that identify the current event source.&lt;/p&gt;\\n","pos":[56234,56315],"source":"\\n<p>The name and unique identifier that identify the current event source.</p>\\n"},{"pos":[56731,56744],"content":"Write(String)","needQuote":true,"nodes":[{"content":"Write(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The name of the event to write.&lt;/p&gt;\\n","pos":[57613,57655],"source":"\\n<p>The name of the event to write.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;eventName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[57774,57831],"source":"\\n<p>\\n<em>eventName</em> is <strong>null</strong>.</p>\\n"},{"pos":[58324,58357],"content":"Write(String, EventSourceOptions)","needQuote":true,"nodes":[{"content":"Write(String, EventSourceOptions)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The name of the event to write.&lt;/p&gt;\\n","pos":[59324,59366],"source":"\\n<p>The name of the event to write.</p>\\n"},{"content":"\\n&lt;p&gt;The options such as level, keywords and operation code for the event.&lt;/p&gt;\\n","pos":[59464,59544],"source":"\\n<p>The options such as level, keywords and operation code for the event.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;eventName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[59663,59720],"source":"\\n<p>\\n<em>eventName</em> is <strong>null</strong>.</p>\\n"},{"pos":[60116,60135],"content":"Write<T>(String, T)","needQuote":true,"nodes":[{"content":"Write&lt;T&gt;(String, T)","pos":[0,19],"source":"Write<T>(String, T)"}]},{"content":"\\n&lt;p&gt;The name of the event.&lt;/p&gt;\\n","pos":[61007,61040],"source":"\\n<p>The name of the event.</p>\\n"},{"pos":[62280,62319],"content":"Write<T>(String, EventSourceOptions, T)","needQuote":true,"nodes":[{"content":"Write&lt;T&gt;(String, EventSourceOptions, T)","pos":[0,39],"source":"Write<T>(String, EventSourceOptions, T)"}]},{"content":"\\n&lt;p&gt;The name of the event.&lt;/p&gt;\\n","pos":[63312,63345],"source":"\\n<p>The name of the event.</p>\\n"},{"content":"\\n&lt;p&gt;The event options.&lt;/p&gt;\\n","pos":[63443,63472],"source":"\\n<p>The event options.</p>\\n"},{"pos":[64825,64872],"content":"Write<T>(String, ref EventSourceOptions, ref T)","needQuote":true,"nodes":[{"content":"Write&lt;T&gt;(String, ref EventSourceOptions, ref T)","pos":[0,47],"source":"Write<T>(String, ref EventSourceOptions, ref T)"}]},{"content":"\\n&lt;p&gt;The name of the event.&lt;/p&gt;\\n","pos":[65893,65926],"source":"\\n<p>The name of the event.</p>\\n"},{"content":"\\n&lt;p&gt;The event options.&lt;/p&gt;\\n","pos":[66024,66053],"source":"\\n<p>The event options.</p>\\n"},{"pos":[67528,67595],"content":"Write<T>(String, ref EventSourceOptions, ref Guid, ref Guid, ref T)","needQuote":true,"nodes":[{"content":"Write&lt;T&gt;(String, ref EventSourceOptions, ref Guid, ref Guid, ref T)","pos":[0,67],"source":"Write<T>(String, ref EventSourceOptions, ref Guid, ref Guid, ref T)"}]},{"content":"\\n&lt;p&gt;The name of the event.&lt;/p&gt;\\n","pos":[68776,68809],"source":"\\n<p>The name of the event.</p>\\n"},{"content":"\\n&lt;p&gt;The event options.&lt;/p&gt;\\n","pos":[68907,68936],"source":"\\n<p>The event options.</p>\\n"},{"content":"\\n&lt;p&gt;The ID of the activity associated with the event.&lt;/p&gt;\\n","pos":[69003,69063],"source":"\\n<p>The ID of the activity associated with the event.</p>\\n"},{"pos":[70648,70665],"content":"WriteEvent(Int32)","needQuote":true,"nodes":[{"content":"WriteEvent(Int32)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The event identifier.","pos":[71760,71786],"source":"\\n<p>The event identifier."},{"content":"This value should be between 0 and 65535.&lt;/p&gt;\\n","pos":[71787,71834],"source":" This value should be between 0 and 65535.</p>\\n"},{"pos":[72253,72278],"content":"WriteEvent(Int32, Byte[])","needQuote":true,"nodes":[{"content":"WriteEvent(Int32, Byte[])","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The event identifier.","pos":[73441,73467],"source":"\\n<p>The event identifier."},{"content":"This value should be between 0 and 65535.&lt;/p&gt;\\n","pos":[73469,73516],"source":"  This value should be between 0 and 65535.</p>\\n"},{"content":"\\n&lt;p&gt;A byte array argument.&lt;/p&gt;\\n","pos":[73579,73612],"source":"\\n<p>A byte array argument.</p>\\n"},{"pos":[74224,74248],"content":"WriteEvent(Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteEvent(Int32, Int32)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The event identifier.","pos":[75412,75438],"source":"\\n<p>The event identifier."},{"content":"This value should be between 0 and 65535.&lt;/p&gt;\\n","pos":[75440,75487],"source":"  This value should be between 0 and 65535.</p>\\n"},{"content":"\\n&lt;p&gt;An integer argument.&lt;/p&gt;\\n","pos":[75549,75580],"source":"\\n<p>An integer argument.</p>\\n"},{"pos":[76042,76073],"content":"WriteEvent(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteEvent(Int32, Int32, Int32)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The event identifier.","pos":[77279,77305],"source":"\\n<p>The event identifier."},{"content":"This value should be between 0 and 65535.&lt;/p&gt;\\n","pos":[77307,77354],"source":"  This value should be between 0 and 65535.</p>\\n"},{"content":"\\n&lt;p&gt;An integer argument.&lt;/p&gt;\\n","pos":[77416,77447],"source":"\\n<p>An integer argument.</p>\\n"},{"content":"\\n&lt;p&gt;An integer argument.&lt;/p&gt;\\n","pos":[77509,77540],"source":"\\n<p>An integer argument.</p>\\n"},{"pos":[78048,78086],"content":"WriteEvent(Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteEvent(Int32, Int32, Int32, Int32)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The event identifier.","pos":[79333,79359],"source":"\\n<p>The event identifier."},{"content":"This value should be between 0 and 65535.&lt;/p&gt;\\n","pos":[79361,79408],"source":"  This value should be between 0 and 65535.</p>\\n"},{"content":"\\n&lt;p&gt;An integer argument.&lt;/p&gt;\\n","pos":[79470,79501],"source":"\\n<p>An integer argument.</p>\\n"},{"content":"\\n&lt;p&gt;An integer argument.&lt;/p&gt;\\n","pos":[79563,79594],"source":"\\n<p>An integer argument.</p>\\n"},{"content":"\\n&lt;p&gt;An integer argument.&lt;/p&gt;\\n","pos":[79656,79687],"source":"\\n<p>An integer argument.</p>\\n"},{"pos":[80166,80198],"content":"WriteEvent(Int32, Int32, String)","needQuote":true,"nodes":[{"content":"WriteEvent(Int32, Int32, String)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The event identifier.","pos":[81418,81444],"source":"\\n<p>The event identifier."},{"content":"This value should be between 0 and 65535.&lt;/p&gt;\\n","pos":[81445,81492],"source":" This value should be between 0 and 65535.</p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit integer argument.&lt;/p&gt;\\n","pos":[81554,81591],"source":"\\n<p>A 32-bit integer argument.</p>\\n"},{"content":"\\n&lt;p&gt;A string argument.&lt;/p&gt;\\n","pos":[81654,81683],"source":"\\n<p>A string argument.</p>\\n"},{"pos":[82114,82138],"content":"WriteEvent(Int32, Int64)","needQuote":true,"nodes":[{"content":"WriteEvent(Int32, Int64)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The event identifier.","pos":[83300,83326],"source":"\\n<p>The event identifier."},{"content":"This value should be between 0 and 65535.&lt;/p&gt;\\n","pos":[83328,83375],"source":"  This value should be between 0 and 65535.</p>\\n"},{"content":"\\n&lt;p&gt;A 64 bit integer argument.&lt;/p&gt;\\n","pos":[83437,83474],"source":"\\n<p>A 64 bit integer argument.</p>\\n"},{"pos":[83939,83971],"content":"WriteEvent(Int32, Int64, Byte[])","needQuote":true,"nodes":[{"content":"WriteEvent(Int32, Int64, Byte[])","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The event identifier.","pos":[85193,85219],"source":"\\n<p>The event identifier."},{"content":"This value should be between 0 and 65535.&lt;/p&gt;\\n","pos":[85221,85268],"source":"  This value should be between 0 and 65535.</p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit integer argument.&lt;/p&gt;\\n","pos":[85330,85367],"source":"\\n<p>A 64-bit integer argument.</p>\\n"},{"content":"\\n&lt;p&gt;A byte array argument.&lt;/p&gt;\\n","pos":[85430,85463],"source":"\\n<p>A byte array argument.</p>\\n"},{"pos":[86149,86180],"content":"WriteEvent(Int32, Int64, Int64)","needQuote":true,"nodes":[{"content":"WriteEvent(Int32, Int64, Int64)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The event identifier.","pos":[87374,87400],"source":"\\n<p>The event identifier."},{"content":"This value should be between 0 and 65535.&lt;/p&gt;\\n","pos":[87402,87449],"source":"  This value should be between 0 and 65535.</p>\\n"},{"content":"\\n&lt;p&gt;A 64 bit integer argument.&lt;/p&gt;\\n","pos":[87511,87548],"source":"\\n<p>A 64 bit integer argument.</p>\\n"},{"content":"\\n&lt;p&gt;A 64 bit integer argument.&lt;/p&gt;\\n","pos":[87610,87647],"source":"\\n<p>A 64 bit integer argument.</p>\\n"},{"pos":[88155,88193],"content":"WriteEvent(Int32, Int64, Int64, Int64)","needQuote":true,"nodes":[{"content":"WriteEvent(Int32, Int64, Int64, Int64)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The event identifier.","pos":[89426,89452],"source":"\\n<p>The event identifier."},{"content":"This value should be between 0 and 65535.&lt;/p&gt;\\n","pos":[89454,89501],"source":"  This value should be between 0 and 65535.</p>\\n"},{"content":"\\n&lt;p&gt;A 64 bit integer argument.&lt;/p&gt;\\n","pos":[89563,89600],"source":"\\n<p>A 64 bit integer argument.</p>\\n"},{"content":"\\n&lt;p&gt;A 64 bit integer argument.&lt;/p&gt;\\n","pos":[89662,89699],"source":"\\n<p>A 64 bit integer argument.</p>\\n"},{"content":"\\n&lt;p&gt;A 64 bit integer argument.&lt;/p&gt;\\n","pos":[89761,89798],"source":"\\n<p>A 64 bit integer argument.</p>\\n"},{"pos":[90277,90309],"content":"WriteEvent(Int32, Int64, String)","needQuote":true,"nodes":[{"content":"WriteEvent(Int32, Int64, String)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The event identifier.","pos":[91528,91554],"source":"\\n<p>The event identifier."},{"content":"This value should be between 0 and 65535.&lt;/p&gt;\\n","pos":[91556,91603],"source":"  This value should be between 0 and 65535.</p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit integer argument.&lt;/p&gt;\\n","pos":[91665,91702],"source":"\\n<p>A 64-bit integer argument.</p>\\n"},{"content":"\\n&lt;p&gt;A string argument.&lt;/p&gt;\\n","pos":[91765,91794],"source":"\\n<p>A string argument.</p>\\n"},{"pos":[92234,92261],"content":"WriteEvent(Int32, Object[])","needQuote":true,"nodes":[{"content":"WriteEvent(Int32, Object[])","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The event identifier.","pos":[93448,93474],"source":"\\n<p>The event identifier."},{"content":"This value should be between 0 and 65535.&lt;/p&gt;\\n","pos":[93476,93523],"source":"  This value should be between 0 and 65535.</p>\\n"},{"content":"\\n&lt;p&gt;An array of objects.&lt;/p&gt;\\n","pos":[93588,93619],"source":"\\n<p>An array of objects.</p>\\n"},{"pos":[94242,94267],"content":"WriteEvent(Int32, String)","needQuote":true,"nodes":[{"content":"WriteEvent(Int32, String)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The event identifier.","pos":[95426,95452],"source":"\\n<p>The event identifier."},{"content":"This value should be between 0 and 65535.&lt;/p&gt;\\n","pos":[95454,95501],"source":"  This value should be between 0 and 65535.</p>\\n"},{"content":"\\n&lt;p&gt;A string argument.&lt;/p&gt;\\n","pos":[95564,95593],"source":"\\n<p>A string argument.</p>\\n"},{"pos":[96059,96091],"content":"WriteEvent(Int32, String, Int32)","needQuote":true,"nodes":[{"content":"WriteEvent(Int32, String, Int32)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The event identifier.","pos":[97285,97311],"source":"\\n<p>The event identifier."},{"content":"This value should be between 0 and 65535.&lt;/p&gt;\\n","pos":[97313,97360],"source":"  This value should be between 0 and 65535.</p>\\n"},{"content":"\\n&lt;p&gt;A string argument.&lt;/p&gt;\\n","pos":[97423,97452],"source":"\\n<p>A string argument.</p>\\n"},{"content":"\\n&lt;p&gt;A 32 bit integer argument.&lt;/p&gt;\\n","pos":[97514,97551],"source":"\\n<p>A 32 bit integer argument.</p>\\n"},{"pos":[98063,98102],"content":"WriteEvent(Int32, String, Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteEvent(Int32, String, Int32, Int32)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The event identifier.","pos":[99337,99363],"source":"\\n<p>The event identifier."},{"content":"This value should be between 0 and 65535.&lt;/p&gt;\\n","pos":[99365,99412],"source":"  This value should be between 0 and 65535.</p>\\n"},{"content":"\\n&lt;p&gt;A string argument.&lt;/p&gt;\\n","pos":[99475,99504],"source":"\\n<p>A string argument.</p>\\n"},{"content":"\\n&lt;p&gt;A 32 bit integer argument.&lt;/p&gt;\\n","pos":[99566,99603],"source":"\\n<p>A 32 bit integer argument.</p>\\n"},{"content":"\\n&lt;p&gt;A 32 bit integer argument.&lt;/p&gt;\\n","pos":[99665,99702],"source":"\\n<p>A 32 bit integer argument.</p>\\n"},{"pos":[100182,100214],"content":"WriteEvent(Int32, String, Int64)","needQuote":true,"nodes":[{"content":"WriteEvent(Int32, String, Int64)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The event identifier.","pos":[101406,101432],"source":"\\n<p>The event identifier."},{"content":"This value should be between 0 and 65535.&lt;/p&gt;\\n","pos":[101434,101481],"source":"  This value should be between 0 and 65535.</p>\\n"},{"content":"\\n&lt;p&gt;A string argument.&lt;/p&gt;\\n","pos":[101544,101573],"source":"\\n<p>A string argument.</p>\\n"},{"content":"\\n&lt;p&gt;A 64 bit integer argument.&lt;/p&gt;\\n","pos":[101635,101672],"source":"\\n<p>A 64 bit integer argument.</p>\\n"},{"pos":[102148,102181],"content":"WriteEvent(Int32, String, String)","needQuote":true,"nodes":[{"content":"WriteEvent(Int32, String, String)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The event identifier.","pos":[103385,103411],"source":"\\n<p>The event identifier."},{"content":"This value should be between 0 and 65535.&lt;/p&gt;\\n","pos":[103413,103460],"source":"  This value should be between 0 and 65535.</p>\\n"},{"content":"\\n&lt;p&gt;A string argument.&lt;/p&gt;\\n","pos":[103523,103552],"source":"\\n<p>A string argument.</p>\\n"},{"content":"\\n&lt;p&gt;A string argument.&lt;/p&gt;\\n","pos":[103615,103644],"source":"\\n<p>A string argument.</p>\\n"},{"pos":[104163,104204],"content":"WriteEvent(Int32, String, String, String)","needQuote":true,"nodes":[{"content":"WriteEvent(Int32, String, String, String)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;The event identifier.","pos":[105452,105478],"source":"\\n<p>The event identifier."},{"content":"This value should be between 0 and 65535.&lt;/p&gt;\\n","pos":[105480,105527],"source":"  This value should be between 0 and 65535.</p>\\n"},{"content":"\\n&lt;p&gt;A string argument.&lt;/p&gt;\\n","pos":[105590,105619],"source":"\\n<p>A string argument.</p>\\n"},{"content":"\\n&lt;p&gt;A string argument.&lt;/p&gt;\\n","pos":[105682,105711],"source":"\\n<p>A string argument.</p>\\n"},{"content":"\\n&lt;p&gt;A string argument.&lt;/p&gt;\\n","pos":[105774,105803],"source":"\\n<p>A string argument.</p>\\n"},{"pos":[106405,106457],"content":"WriteEventCore(Int32, Int32, EventSource.EventData*)","needQuote":true,"nodes":[{"content":"WriteEventCore(Int32, Int32, EventSource.EventData*)","pos":[0,52]}]},{"content":"\\n&lt;p&gt;The event identifier.&lt;/p&gt;\\n","pos":[107662,107694],"source":"\\n<p>The event identifier.</p>\\n"},{"content":"\\n&lt;p&gt;The number of event data items.&lt;/p&gt;\\n","pos":[107766,107808],"source":"\\n<p>The number of event data items.</p>\\n"},{"content":"\\n&lt;p&gt;The structure that contains the event data.&lt;/p&gt;\\n","pos":[107907,107961],"source":"\\n<p>The structure that contains the event data.</p>\\n"},{"pos":[108941,108995],"content":"WriteEventWithRelatedActivityId(Int32, Guid, Object[])","needQuote":true,"nodes":[{"content":"WriteEventWithRelatedActivityId(Int32, Guid, Object[])","pos":[0,54]}]},{"content":"\\n&lt;p&gt;The related activity identifier.","pos":[110370,110407],"source":"\\n<p>The related activity identifier."},{"content":"&lt;/p&gt;\\n","pos":[110408,110414],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of objects that contain data about the event.","pos":[110479,110538],"source":"\\n<p>An array of objects that contain data about the event."},{"content":"&lt;/p&gt;\\n","pos":[110539,110545],"source":" </p>\\n"},{"pos":[111544,111624],"content":"WriteEventWithRelatedActivityIdCore(Int32, Guid*, Int32, EventSource.EventData*)","needQuote":true,"nodes":[{"content":"WriteEventWithRelatedActivityIdCore(Int32, Guid*, Int32, EventSource.EventData*)","pos":[0,80]}]},{"content":"\\n&lt;p&gt;A pointer to the GUID of the related activity ID.","pos":[113172,113226],"source":"\\n<p>A pointer to the GUID of the related activity ID."},{"content":"&lt;/p&gt;\\n","pos":[113227,113233],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of items in the &lt;em&gt;data&lt;/em&gt; field.","pos":[113305,113357],"source":"\\n<p>The number of items in the <em>data</em> field."},{"content":"&lt;/p&gt;\\n","pos":[113358,113364],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A pointer to the first item in the event data field.","pos":[113463,113520],"source":"\\n<p>A pointer to the first item in the event data field."},{"content":"&lt;/p&gt;\\n","pos":[113521,113527],"source":" </p>\\n"},{"pos":[114079,114105],"content":"System.Diagnostics.Tracing","needQuote":true,"nodes":[{"content":"System.Diagnostics.Tracing","pos":[0,26]}]},{"pos":[114296,114302],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[114452,114463],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[114651,114665],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[114784,114790],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[114857,114858],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114908,114914],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[114974,114975],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115058,115064],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[115131,115132],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115182,115188],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[115248,115249],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115463,115485],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[115633,115639],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[115706,115707],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115757,115763],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[115824,115825]},{"pos":[115880,115886],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[115946,115947],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[116044,116050],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[116117,116118],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116168,116174],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[116235,116236]},{"pos":[116291,116297],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[116357,116358],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[116603,116634],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[116800,116815],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[116891,116892],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116942,116948],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[117009,117010]},{"pos":[117065,117071],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[117131,117132],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117238,117253],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[117329,117330],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[117380,117386],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[117447,117448]},{"pos":[117503,117509],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[117569,117570],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117800,117813],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[117914,117925],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[117997,117998],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118025,118026],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118099,118110],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[118182,118183],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118210,118211],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118386,118395],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[118488,118495],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[118563,118564],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118591,118592],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118661,118668],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[118736,118737],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118764,118765],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118940,118957],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[119066,119081],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[119157,119158],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119185,119186],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119263,119278],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[119354,119355],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119382,119383],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119528,119534],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[119666,119673],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[119874,119893],"content":"EventSourceSettings","needQuote":true,"nodes":[{"content":"EventSourceSettings","pos":[0,19]}]},{"pos":[120082,120090],"content":"String[]","needQuote":true,"nodes":[{"content":"String[]","pos":[0,8]}]},{"pos":[120218,120224],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"[]","pos":[120285,120287]},{"pos":[120352,120358],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[120418,120420],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[120557,120563],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[120711,120720],"content":"Exception","needQuote":true,"nodes":[{"content":"Exception","pos":[0,9]}]},{"pos":[120872,120876],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[121087,121122],"content":"EventHandler<EventCommandEventArgs>","needQuote":true,"nodes":[{"content":"EventHandler&lt;EventCommandEventArgs&gt;","pos":[0,35],"source":"EventHandler<EventCommandEventArgs>"}]},{"pos":[121399,121411],"content":"EventHandler","needQuote":true,"nodes":[{"content":"EventHandler","pos":[0,12]}]},{"pos":[121477,121478],"content":"<","needQuote":true,"nodes":[]},{"pos":[121563,121584],"content":"EventCommandEventArgs","needQuote":true,"nodes":[{"content":"EventCommandEventArgs","pos":[0,21]}]},{"pos":[121732,121744],"content":"EventHandler","needQuote":true,"nodes":[{"content":"EventHandler","pos":[0,12]}]},{"content":"(Of","pos":[121811,121814]},{"pos":[121906,121927],"content":"EventCommandEventArgs","needQuote":true,"nodes":[{"content":"EventCommandEventArgs","pos":[0,21]}]},{"pos":[122001,122002],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122271,122295],"content":"EventHandler<TEventArgs>","needQuote":true,"nodes":[{"content":"EventHandler&lt;TEventArgs&gt;","pos":[0,24],"source":"EventHandler<TEventArgs>"}]},{"pos":[122485,122497],"content":"EventHandler","needQuote":true,"nodes":[{"content":"EventHandler","pos":[0,12]}]},{"pos":[122542,122543],"content":"<","needQuote":true,"nodes":[]},{"pos":[122570,122580],"content":"TEventArgs","needQuote":true,"nodes":[{"content":"TEventArgs","pos":[0,10]}]},{"pos":[122690,122702],"content":"EventHandler","needQuote":true,"nodes":[{"content":"EventHandler","pos":[0,12]}]},{"content":"(Of","pos":[122748,122751]},{"pos":[122785,122795],"content":"TEventArgs","needQuote":true,"nodes":[{"content":"TEventArgs","pos":[0,10]}]},{"pos":[122831,122832],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123065,123074],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[123177,123184],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[123236,123237],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123264,123265],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123339,123346],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[123398,123399],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123426,123427],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123588,123592],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[123785,123805],"content":"EventManifestOptions","needQuote":true,"nodes":[{"content":"EventManifestOptions","pos":[0,20]}]},{"pos":[124152,124176],"content":"IEnumerable<EventSource>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;EventSource&gt;","pos":[0,24],"source":"IEnumerable<EventSource>"}]},{"pos":[124479,124490],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[124575,124576],"content":"<","needQuote":true,"nodes":[]},{"pos":[124651,124662],"content":"EventSource","needQuote":true,"nodes":[{"content":"EventSource","pos":[0,11]}]},{"pos":[124819,124830],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[124916,124919]},{"pos":[125001,125012],"content":"EventSource","needQuote":true,"nodes":[{"content":"EventSource","pos":[0,11]}]},{"pos":[125076,125077],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[125352,125366],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[125585,125596],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[125660,125661],"content":"<","needQuote":true,"nodes":[]},{"pos":[125688,125689],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[125809,125820],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[125885,125888]},{"pos":[125922,125923],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[125950,125951],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126154,126180],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[126415,126425],"content":"EventLevel","needQuote":true,"nodes":[{"content":"EventLevel","pos":[0,10]}]},{"pos":[126669,126682],"content":"EventKeywords","needQuote":true,"nodes":[{"content":"EventKeywords","pos":[0,13]}]},{"pos":[126934,126946],"content":"EventChannel","needQuote":true,"nodes":[{"content":"EventChannel","pos":[0,12]}]},{"pos":[127204,127225],"content":"EventCommandEventArgs","needQuote":true,"nodes":[{"content":"EventCommandEventArgs","pos":[0,21]}]},{"pos":[127500,127511],"content":"EventSource","needQuote":true,"nodes":[{"content":"EventSource","pos":[0,11]}]},{"pos":[127757,127769],"content":"EventCommand","needQuote":true,"nodes":[{"content":"EventCommand","pos":[0,12]}]},{"pos":[128081,128108],"content":"IDictionary<String, String>","needQuote":true,"nodes":[{"content":"IDictionary&lt;String, String&gt;","pos":[0,27],"source":"IDictionary<String, String>"}]},{"pos":[128394,128405],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[128490,128491],"content":"<","needQuote":true,"nodes":[]},{"pos":[128541,128547],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[128608,128609]},{"pos":[128664,128670],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[128823,128834],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"content":"(Of","pos":[128920,128923]},{"pos":[128980,128986],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[129047,129048]},{"pos":[129103,129109],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[129169,129170],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[129440,129465],"content":"IDictionary<TKey, TValue>","needQuote":true,"nodes":[{"content":"IDictionary&lt;TKey, TValue&gt;","pos":[0,25],"source":"IDictionary<TKey, TValue>"}]},{"pos":[129717,129728],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[129792,129793],"content":"<","needQuote":true,"nodes":[]},{"pos":[129820,129824],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[129855,129856]},{"pos":[129888,129894],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[130019,130030],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"content":"(Of","pos":[130095,130098]},{"pos":[130132,130136],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[130167,130168]},{"pos":[130200,130206],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[130238,130239],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[130483,130493],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[130588,130596],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[130665,130666],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[130693,130694],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[130764,130772],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[130841,130842],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[130869,130870],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[131077,131095],"content":"EventSourceOptions","needQuote":true,"nodes":[{"content":"EventSourceOptions","pos":[0,18]}]},{"pos":[131287,131288],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[131377,131378],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[131476,131481],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[131586,131592],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[131712,131716],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[131775,131777]},{"pos":[131840,131844],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[131902,131904],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[132036,132041],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[132148,132156],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[132284,132290],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[132351,132353]},{"pos":[132418,132424],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[132484,132486],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[132622,132644],"content":"EventSource.EventData*","needQuote":true,"nodes":[{"content":"EventSource.EventData*","pos":[0,22]}]},{"pos":[132790,132811],"content":"EventSource.EventData","needQuote":true,"nodes":[{"content":"EventSource.EventData","pos":[0,21]}]},{"pos":[132986,133007],"content":"EventSource.EventData","needQuote":true,"nodes":[{"content":"EventSource.EventData","pos":[0,21]}]},{"pos":[133170,133175],"content":"Guid*","needQuote":true,"nodes":[{"content":"Guid*","pos":[0,5]}]},{"pos":[133247,133251],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[133373,133377],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[133556,133573],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[133749,133770],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Diagnostics.Tracing.EventSource\n  commentId: T:System.Diagnostics.Tracing.EventSource\n  id: EventSource\n  parent: System.Diagnostics.Tracing\n  children:\n  - System.Diagnostics.Tracing.EventSource.#ctor\n  - System.Diagnostics.Tracing.EventSource.#ctor(System.Boolean)\n  - System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings)\n  - System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings,System.String[])\n  - System.Diagnostics.Tracing.EventSource.#ctor(System.String)\n  - System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings)\n  - System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings,System.String[])\n  - System.Diagnostics.Tracing.EventSource.ConstructionException\n  - System.Diagnostics.Tracing.EventSource.CurrentThreadActivityId\n  - System.Diagnostics.Tracing.EventSource.Dispose\n  - System.Diagnostics.Tracing.EventSource.Dispose(System.Boolean)\n  - System.Diagnostics.Tracing.EventSource.EventCommandExecuted\n  - System.Diagnostics.Tracing.EventSource.Finalize\n  - System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String)\n  - System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String,System.Diagnostics.Tracing.EventManifestOptions)\n  - System.Diagnostics.Tracing.EventSource.GetGuid(System.Type)\n  - System.Diagnostics.Tracing.EventSource.GetName(System.Type)\n  - System.Diagnostics.Tracing.EventSource.GetSources\n  - System.Diagnostics.Tracing.EventSource.GetTrait(System.String)\n  - System.Diagnostics.Tracing.EventSource.Guid\n  - System.Diagnostics.Tracing.EventSource.IsEnabled\n  - System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)\n  - System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Diagnostics.Tracing.EventChannel)\n  - System.Diagnostics.Tracing.EventSource.Name\n  - System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)\n  - System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventCommand,System.Collections.Generic.IDictionary{System.String,System.String})\n  - System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)\n  - System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid,System.Guid@)\n  - System.Diagnostics.Tracing.EventSource.Settings\n  - System.Diagnostics.Tracing.EventSource.ToString\n  - System.Diagnostics.Tracing.EventSource.Write(System.String)\n  - System.Diagnostics.Tracing.EventSource.Write(System.String,System.Diagnostics.Tracing.EventSourceOptions)\n  - System.Diagnostics.Tracing.EventSource.Write``1(System.String,``0)\n  - System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions,``0)\n  - System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,``0@)\n  - System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,System.Guid@,System.Guid@,``0@)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Byte[])\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.String)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Byte[])\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64,System.Int64)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.String)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Object[])\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32,System.Int32)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int64)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String,System.String)\n  - System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)\n  - System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])\n  - System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)\n  langs:\n  - csharp\n  - vb\n  name: EventSource\n  fullName: System.Diagnostics.Tracing.EventSource\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EventSource\n    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs\n    startLine: 46\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Provides the ability to create events for event tracing for Windows (ETW).</p>\\n\"\n  syntax:\n    content: 'public class EventSource : IDisposable'\n    content.vb: >-\n      Public Class EventSource\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: EventSource\n- uid: System.Diagnostics.Tracing.EventSource.#ctor\n  commentId: M:System.Diagnostics.Tracing.EventSource.#ctor\n  id: '#ctor'\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: EventSource()\n  fullName: System.Diagnostics.Tracing.EventSource.EventSource()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 635\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Creates a new instance of the <xref href=\\\"System.Diagnostics.Tracing.EventSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected EventSource()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: EventSource.EventSource()\n- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.Boolean)\n  commentId: M:System.Diagnostics.Tracing.EventSource.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: EventSource(Boolean)\n  fullName: System.Diagnostics.Tracing.EventSource.EventSource(System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 651\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Creates a new instance of the <xref href=\\\"System.Diagnostics.Tracing.EventSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class and specifies whether to throw an exception when an error occurs in the underlying Windows code.</p>\\n\"\n  syntax:\n    content: protected EventSource(bool throwOnEventWriteErrors)\n    content.vb: Protected Sub New(throwOnEventWriteErrors As Boolean)\n    parameters:\n    - id: throwOnEventWriteErrors\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to throw an exception when an error occurs in the underlying Windows code; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: EventSource.EventSource(Boolean)\n- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings)\n  commentId: M:System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings)\n  id: '#ctor(System.Diagnostics.Tracing.EventSourceSettings)'\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: EventSource(EventSourceSettings)\n  fullName: System.Diagnostics.Tracing.EventSource.EventSource(System.Diagnostics.Tracing.EventSourceSettings)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 658\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Creates a new instance of the <xref href=\\\"System.Diagnostics.Tracing.EventSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified configuration settings.</p>\\n\"\n  syntax:\n    content: protected EventSource(EventSourceSettings settings)\n    content.vb: Protected Sub New(settings As EventSourceSettings)\n    parameters:\n    - id: settings\n      type: System.Diagnostics.Tracing.EventSourceSettings\n      description: \"\\n<p>A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: EventSource.EventSource(EventSourceSettings)\n- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings,System.String[])\n  commentId: M:System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings,System.String[])\n  id: '#ctor(System.Diagnostics.Tracing.EventSourceSettings,System.String[])'\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: EventSource(EventSourceSettings, String[])\n  fullName: System.Diagnostics.Tracing.EventSource.EventSource(System.Diagnostics.Tracing.EventSourceSettings, System.String[])\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 669\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Diagnostics.Tracing.EventSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be used with non-contract events that contains the specified settings and traits.</p>\\n\"\n  syntax:\n    content: protected EventSource(EventSourceSettings settings, params string[] traits)\n    content.vb: Protected Sub New(settings As EventSourceSettings, ParamArray traits As String())\n    parameters:\n    - id: settings\n      type: System.Diagnostics.Tracing.EventSourceSettings\n      description: \"\\n<p>A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.</p>\\n\"\n    - id: traits\n      type: System.String[]\n      description: \"\\n<p>The key-value pairs that specify traits for the event source.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>traits</em> is not specified in key-value pairs.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Tracing.EventSource.GetTrait(System.String)\n    commentId: M:System.Diagnostics.Tracing.EventSource.GetTrait(System.String)\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  fullName.vb: System.Diagnostics.Tracing.EventSource.EventSource(System.Diagnostics.Tracing.EventSourceSettings, System.String())\n  name.vb: EventSource(EventSourceSettings, String())\n  nameWithType: EventSource.EventSource(EventSourceSettings, String[])\n  nameWithType.vb: EventSource.EventSource(EventSourceSettings, String())\n- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.String)\n  commentId: M:System.Diagnostics.Tracing.EventSource.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: EventSource(String)\n  fullName: System.Diagnostics.Tracing.EventSource.EventSource(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs\n    startLine: 58\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Creates a new instance of the <xref href=\\\"System.Diagnostics.Tracing.EventSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified name.</p>\\n\"\n  syntax:\n    content: public EventSource(string eventSourceName)\n    content.vb: Public Sub New(eventSourceName As String)\n    parameters:\n    - id: eventSourceName\n      type: System.String\n      description: \"\\n<p>The name to apply to the event source. Must not be <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>eventSourceName</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EventSource.EventSource(String)\n- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings)\n  commentId: M:System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings)\n  id: '#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings)'\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: EventSource(String, EventSourceSettings)\n  fullName: System.Diagnostics.Tracing.EventSource.EventSource(System.String, System.Diagnostics.Tracing.EventSourceSettings)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs\n    startLine: 72\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Creates a new instance of the <xref href=\\\"System.Diagnostics.Tracing.EventSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified name and settings.</p>\\n\"\n  syntax:\n    content: public EventSource(string eventSourceName, EventSourceSettings config)\n    content.vb: Public Sub New(eventSourceName As String, config As EventSourceSettings)\n    parameters:\n    - id: eventSourceName\n      type: System.String\n      description: \"\\n<p>The name to apply to the event source. Must not be <strong>null</strong>.</p>\\n\"\n    - id: config\n      type: System.Diagnostics.Tracing.EventSourceSettings\n      description: \"\\n<p>A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>eventSourceName</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>eventSourceName</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EventSource.EventSource(String, EventSourceSettings)\n- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings,System.String[])\n  commentId: M:System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings,System.String[])\n  id: '#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings,System.String[])'\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: EventSource(String, EventSourceSettings, String[])\n  fullName: System.Diagnostics.Tracing.EventSource.EventSource(System.String, System.Diagnostics.Tracing.EventSourceSettings, System.String[])\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs\n    startLine: 91\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Creates a new instance of the <xref href=\\\"System.Diagnostics.Tracing.EventSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified configuration settings.</p>\\n\"\n  syntax:\n    content: public EventSource(string eventSourceName, EventSourceSettings config, params string[] traits)\n    content.vb: Public Sub New(eventSourceName As String, config As EventSourceSettings, ParamArray traits As String())\n    parameters:\n    - id: eventSourceName\n      type: System.String\n      description: \"\\n<p>The name to apply to the event source. Must not be <strong>null</strong>.</p>\\n\"\n    - id: config\n      type: System.Diagnostics.Tracing.EventSourceSettings\n      description: \"\\n<p>A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.</p>\\n\"\n    - id: traits\n      type: System.String[]\n      description: \"\\n<p>The key-value pairs that specify traits for the event source.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>eventSourceName</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>traits</em> is not specified in key-value pairs.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Tracing.EventSource.GetTrait(System.String)\n    commentId: M:System.Diagnostics.Tracing.EventSource.GetTrait(System.String)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Diagnostics.Tracing.EventSource.EventSource(System.String, System.Diagnostics.Tracing.EventSourceSettings, System.String())\n  name.vb: EventSource(String, EventSourceSettings, String())\n  nameWithType: EventSource.EventSource(String, EventSourceSettings, String[])\n  nameWithType.vb: EventSource.EventSource(String, EventSourceSettings, String())\n- uid: System.Diagnostics.Tracing.EventSource.ConstructionException\n  commentId: P:System.Diagnostics.Tracing.EventSource.ConstructionException\n  id: ConstructionException\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: ConstructionException\n  fullName: System.Diagnostics.Tracing.EventSource.ConstructionException\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ConstructionException\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 571\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\\n<p>Gets any exception that was thrown during the construction of the event source.</p>\\n\"\n  syntax:\n    content: public Exception ConstructionException { get; }\n    content.vb: Public ReadOnly Property ConstructionException As Exception\n    parameters: []\n    return:\n      type: System.Exception\n      description: \"\\n<p>The exception that was thrown during the construction of the event source, or <strong>null</strong> if no exception was thrown. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: EventSource.ConstructionException\n- uid: System.Diagnostics.Tracing.EventSource.CurrentThreadActivityId\n  commentId: P:System.Diagnostics.Tracing.EventSource.CurrentThreadActivityId\n  id: CurrentThreadActivityId\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: CurrentThreadActivityId\n  fullName: System.Diagnostics.Tracing.EventSource.CurrentThreadActivityId\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource_CoreCLR.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CurrentThreadActivityId\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource_CoreCLR.cs\n    startLine: 104\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\\n<p>Gets the activity ID of the current thread. </p>\\n\"\n  syntax:\n    content: >-\n      public static Guid CurrentThreadActivityId\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public Shared ReadOnly Property CurrentThreadActivityId As Guid\n    parameters: []\n    return:\n      type: System.Guid\n      description: \"\\n<p>The activity ID of the current thread. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)\n    commentId: M:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: EventSource.CurrentThreadActivityId\n- uid: System.Diagnostics.Tracing.EventSource.Guid\n  commentId: P:System.Diagnostics.Tracing.EventSource.Guid\n  id: Guid\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: Guid\n  fullName: System.Diagnostics.Tracing.EventSource.Guid\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Guid\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 264\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>The unique identifier for the event source.</p>\\n\"\n  syntax:\n    content: public Guid Guid { get; }\n    content.vb: Public ReadOnly Property Guid As Guid\n    parameters: []\n    return:\n      type: System.Guid\n      description: \"\\n<p>A unique identifier for the event source.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: EventSource.Guid\n- uid: System.Diagnostics.Tracing.EventSource.Name\n  commentId: P:System.Diagnostics.Tracing.EventSource.Name\n  id: Name\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: Name\n  fullName: System.Diagnostics.Tracing.EventSource.Name\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Name\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 260\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>The friendly name of the class that is derived from the event source.</p>\\n\"\n  syntax:\n    content: public string Name { get; }\n    content.vb: Public ReadOnly Property Name As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The friendly name of the derived class.  The default is the simple name of the class.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: EventSource.Name\n- uid: System.Diagnostics.Tracing.EventSource.Settings\n  commentId: P:System.Diagnostics.Tracing.EventSource.Settings\n  id: Settings\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: Settings\n  fullName: System.Diagnostics.Tracing.EventSource.Settings\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Settings\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 392\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Gets the settings applied to this event source.</p>\\n\"\n  syntax:\n    content: public EventSourceSettings Settings { get; }\n    content.vb: Public ReadOnly Property Settings As EventSourceSettings\n    parameters: []\n    return:\n      type: System.Diagnostics.Tracing.EventSourceSettings\n      description: \"\\n<p>The settings applied to this event source.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: EventSource.Settings\n- uid: System.Diagnostics.Tracing.EventSource.EventCommandExecuted\n  commentId: E:System.Diagnostics.Tracing.EventSource.EventCommandExecuted\n  id: EventCommandExecuted\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: EventCommandExecuted\n  fullName: System.Diagnostics.Tracing.EventSource.EventCommandExecuted\n  type: Event\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EventCommandExecuted\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 605\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Occurs when a command comes from an event listener.</p>\\n\"\n  syntax:\n    content: public event EventHandler<EventCommandEventArgs> EventCommandExecuted\n    content.vb: Public Event EventCommandExecuted As EventHandler(Of EventCommandEventArgs)\n    return:\n      type: System.EventHandler{System.Diagnostics.Tracing.EventCommandEventArgs}\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EventSource.EventCommandExecuted\n- uid: System.Diagnostics.Tracing.EventSource.Dispose\n  commentId: M:System.Diagnostics.Tracing.EventSource.Dispose\n  id: Dispose\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Diagnostics.Tracing.EventSource.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 1327\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Releases all resources used by the current instance of the <xref href=\\\"System.Diagnostics.Tracing.EventSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EventSource.Dispose()\n- uid: System.Diagnostics.Tracing.EventSource.Dispose(System.Boolean)\n  commentId: M:System.Diagnostics.Tracing.EventSource.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Diagnostics.Tracing.EventSource.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 1342\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.Diagnostics.Tracing.EventSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class and optionally releases the managed resources.</p>\\n\"\n  syntax:\n    content: protected virtual void Dispose(bool disposing)\n    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: EventSource.Dispose(Boolean)\n- uid: System.Diagnostics.Tracing.EventSource.Finalize\n  commentId: M:System.Diagnostics.Tracing.EventSource.Finalize\n  id: Finalize\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: Finalize()\n  fullName: System.Diagnostics.Tracing.EventSource.Finalize()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Finalize\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 1372\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Allows the <xref href=\\\"System.Diagnostics.Tracing.EventSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to attempt to free resources and perform other cleanup operations before the  object is reclaimed by garbage collection.</p>\\n\"\n  syntax:\n    content: protected void Finalize()\n    content.vb: Protected Sub Finalize\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: EventSource.Finalize()\n- uid: System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String)\n  commentId: M:System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String)\n  id: GenerateManifest(System.Type,System.String)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: GenerateManifest(Type, String)\n  fullName: System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GenerateManifest\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 455\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Returns a string of the XML manifest that is associated with the current event source.</p>\\n\"\n  syntax:\n    content: public static string GenerateManifest(Type eventSourceType, string assemblyPathToIncludeInManifest)\n    content.vb: Public Shared Function GenerateManifest(eventSourceType As Type, assemblyPathToIncludeInManifest As String) As String\n    parameters:\n    - id: eventSourceType\n      type: System.Type\n      description: \"\\n<p>The type of the event source.</p>\\n\"\n    - id: assemblyPathToIncludeInManifest\n      type: System.String\n      description: \"\\n<p>The path to the assembly file (.dll) to include in the <see href=\\\"http://msdn.microsoft.com/library/windows/desktop/aa384022(v=vs.85).aspx\\\">provider</see> element of the manifest. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The XML data string.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: EventSource.GenerateManifest(Type, String)\n- uid: System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String,System.Diagnostics.Tracing.EventManifestOptions)\n  commentId: M:System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String,System.Diagnostics.Tracing.EventManifestOptions)\n  id: GenerateManifest(System.Type,System.String,System.Diagnostics.Tracing.EventManifestOptions)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: GenerateManifest(Type, String, EventManifestOptions)\n  fullName: System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type, System.String, System.Diagnostics.Tracing.EventManifestOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GenerateManifest\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 471\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Returns a string of the XML manifest that is associated with the current event source.</p>\\n\"\n  syntax:\n    content: public static string GenerateManifest(Type eventSourceType, string assemblyPathToIncludeInManifest, EventManifestOptions flags)\n    content.vb: Public Shared Function GenerateManifest(eventSourceType As Type, assemblyPathToIncludeInManifest As String, flags As EventManifestOptions) As String\n    parameters:\n    - id: eventSourceType\n      type: System.Type\n      description: \"\\n<p>The type of the event source.</p>\\n\"\n    - id: assemblyPathToIncludeInManifest\n      type: System.String\n      description: \"\\n<p>The path to the assembly file (.dll) file to include in the <see href=\\\"http://msdn.microsoft.com/library/windows/desktop/aa384022(v=vs.85).aspx\\\">provider</see> element of the manifest. </p>\\n\"\n    - id: flags\n      type: System.Diagnostics.Tracing.EventManifestOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that specify how the manifest is generated.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The XML data string or <strong>null</strong> (see remarks).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: EventSource.GenerateManifest(Type, String, EventManifestOptions)\n- uid: System.Diagnostics.Tracing.EventSource.GetGuid(System.Type)\n  commentId: M:System.Diagnostics.Tracing.EventSource.GetGuid(System.Type)\n  id: GetGuid(System.Type)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: GetGuid(Type)\n  fullName: System.Diagnostics.Tracing.EventSource.GetGuid(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetGuid\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 403\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Gets the unique identifier for this implementation of the event source.</p>\\n\"\n  syntax:\n    content: public static Guid GetGuid(Type eventSourceType)\n    content.vb: Public Shared Function GetGuid(eventSourceType As Type) As Guid\n    parameters:\n    - id: eventSourceType\n      type: System.Type\n      description: \"\\n<p>The type of the event source.</p>\\n\"\n    return:\n      type: System.Guid\n      description: \"\\n<p>A unique identifier for this event source type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: EventSource.GetGuid(Type)\n- uid: System.Diagnostics.Tracing.EventSource.GetName(System.Type)\n  commentId: M:System.Diagnostics.Tracing.EventSource.GetName(System.Type)\n  id: GetName(System.Type)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: GetName(Type)\n  fullName: System.Diagnostics.Tracing.EventSource.GetName(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetName\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 440\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Gets the friendly name of the event source.</p>\\n\"\n  syntax:\n    content: public static string GetName(Type eventSourceType)\n    content.vb: Public Shared Function GetName(eventSourceType As Type) As String\n    parameters:\n    - id: eventSourceType\n      type: System.Type\n      description: \"\\n<p>The type of the event source.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The friendly name of the event source. The default is the simple name of the class.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: EventSource.GetName(Type)\n- uid: System.Diagnostics.Tracing.EventSource.GetSources\n  commentId: M:System.Diagnostics.Tracing.EventSource.GetSources\n  id: GetSources\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: GetSources()\n  fullName: System.Diagnostics.Tracing.EventSource.GetSources()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetSources\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 486\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Gets a snapshot of all the event sources for the application domain.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<EventSource> GetSources()\n    content.vb: Public Shared Function GetSources As IEnumerable(Of EventSource)\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Diagnostics.Tracing.EventSource}\n      description: \"\\n<p>An enumeration of all the event sources in the application domain.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: EventSource.GetSources()\n- uid: System.Diagnostics.Tracing.EventSource.GetTrait(System.String)\n  commentId: M:System.Diagnostics.Tracing.EventSource.GetTrait(System.String)\n  id: GetTrait(System.String)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: GetTrait(String)\n  fullName: System.Diagnostics.Tracing.EventSource.GetTrait(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetTrait\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 581\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Gets the trait value associated with the specified key.</p>\\n\"\n  syntax:\n    content: public string GetTrait(string key)\n    content.vb: Public Function GetTrait(key As String) As String\n    parameters:\n    - id: key\n      type: System.String\n      description: \"\\n<p>The key of the trait to get.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The trait value associated with the specified key. If the key is not found, returns <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EventSource.GetTrait(String)\n- uid: System.Diagnostics.Tracing.EventSource.IsEnabled\n  commentId: M:System.Diagnostics.Tracing.EventSource.IsEnabled\n  id: IsEnabled\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: IsEnabled()\n  fullName: System.Diagnostics.Tracing.EventSource.IsEnabled()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsEnabled\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 270\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Determines whether the current event source is enabled.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification = \"This does not need to be correct when racing with other threads\")]\n\n      public bool IsEnabled()\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification:=\"This does not need to be correct when racing with other threads\")>\n\n      Public Function IsEnabled As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current event source is enabled; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EventSource.IsEnabled()\n- uid: System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)\n  commentId: M:System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)\n  id: IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: IsEnabled(EventLevel, EventKeywords)\n  fullName: System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel, System.Diagnostics.Tracing.EventKeywords)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsEnabled\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 285\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Determines whether the current event source that has the specified level and keyword is enabled.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification = \"This does not need to be correct when racing with other threads\")]\n\n      public bool IsEnabled(EventLevel level, EventKeywords keywords)\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification:=\"This does not need to be correct when racing with other threads\")>\n\n      Public Function IsEnabled(level As EventLevel, keywords As EventKeywords) As Boolean\n    parameters:\n    - id: level\n      type: System.Diagnostics.Tracing.EventLevel\n      description: \"\\n<p>The level of the event source.</p>\\n\"\n    - id: keywords\n      type: System.Diagnostics.Tracing.EventKeywords\n      description: \"\\n<p>The keyword of the event source.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the event source is enabled; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EventSource.IsEnabled(EventLevel, EventKeywords)\n- uid: System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Diagnostics.Tracing.EventChannel)\n  commentId: M:System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Diagnostics.Tracing.EventChannel)\n  id: IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Diagnostics.Tracing.EventChannel)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: IsEnabled(EventLevel, EventKeywords, EventChannel)\n  fullName: System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel, System.Diagnostics.Tracing.EventKeywords, System.Diagnostics.Tracing.EventChannel)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsEnabled\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 301\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Determines whether the current event source is enabled for events with the specified level, keywords and channel.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification = \"This does not need to be correct when racing with other threads\")]\n\n      public bool IsEnabled(EventLevel level, EventKeywords keywords, EventChannel channel)\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification:=\"This does not need to be correct when racing with other threads\")>\n\n      Public Function IsEnabled(level As EventLevel, keywords As EventKeywords, channel As EventChannel) As Boolean\n    parameters:\n    - id: level\n      type: System.Diagnostics.Tracing.EventLevel\n      description: \"\\n<p>The event level to check. An event source will be considered enabled when its level is greater than or equal to <em>level</em>.</p>\\n\"\n    - id: keywords\n      type: System.Diagnostics.Tracing.EventKeywords\n      description: \"\\n<p>The event keywords to check.</p>\\n\"\n    - id: channel\n      type: System.Diagnostics.Tracing.EventChannel\n      description: \"\\n<p>The event channel to check.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the event source is enabled for the specified event level, keywords and channel; otherwise, <strong>false</strong>.</p>\\n<p>The result of this method is only an approximation of whether a particular event is active.  Use it to avoid expensive computation for logging when logging is disabled.   Event sources may have additional filtering that determines their activity..</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EventSource.IsEnabled(EventLevel, EventKeywords, EventChannel)\n- uid: System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)\n  commentId: M:System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)\n  id: OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: OnEventCommand(EventCommandEventArgs)\n  fullName: System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OnEventCommand\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 712\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Called when the current event source is updated by the controller.</p>\\n\"\n  syntax:\n    content: protected virtual void OnEventCommand(EventCommandEventArgs command)\n    content.vb: Protected Overridable Sub OnEventCommand(command As EventCommandEventArgs)\n    parameters:\n    - id: command\n      type: System.Diagnostics.Tracing.EventCommandEventArgs\n      description: \"\\n<p>The arguments for the event.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: EventSource.OnEventCommand(EventCommandEventArgs)\n- uid: System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventCommand,System.Collections.Generic.IDictionary{System.String,System.String})\n  commentId: M:System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventCommand,System.Collections.Generic.IDictionary{System.String,System.String})\n  id: SendCommand(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventCommand,System.Collections.Generic.IDictionary{System.String,System.String})\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: SendCommand(EventSource, EventCommand, IDictionary<String, String>)\n  fullName: System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventCommand, System.Collections.Generic.IDictionary<System.String, System.String>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SendCommand\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 510\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Sends a command to a specified event source.</p>\\n\"\n  syntax:\n    content: public static void SendCommand(EventSource eventSource, EventCommand command, IDictionary<string, string> commandArguments)\n    content.vb: Public Shared Sub SendCommand(eventSource As EventSource, command As EventCommand, commandArguments As IDictionary(Of String, String))\n    parameters:\n    - id: eventSource\n      type: System.Diagnostics.Tracing.EventSource\n      description: \"\\n<p>The event source to send the command to.</p>\\n\"\n    - id: command\n      type: System.Diagnostics.Tracing.EventCommand\n      description: \"\\n<p>The event command to send.</p>\\n\"\n    - id: commandArguments\n      type: System.Collections.Generic.IDictionary{System.String,System.String}\n      description: \"\\n<p>The arguments for the event command.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventCommand, System.Collections.Generic.IDictionary(Of System.String, System.String))\n  name.vb: SendCommand(EventSource, EventCommand, IDictionary(Of String, String))\n  nameWithType: EventSource.SendCommand(EventSource, EventCommand, IDictionary<String, String>)\n  nameWithType.vb: EventSource.SendCommand(EventSource, EventCommand, IDictionary(Of String, String))\n- uid: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)\n  commentId: M:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)\n  id: SetCurrentThreadActivityId(System.Guid)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: SetCurrentThreadActivityId(Guid)\n  fullName: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource_CoreCLR.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetCurrentThreadActivityId\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource_CoreCLR.cs\n    startLine: 31\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\\n<p>Sets the activity ID on the current thread.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static void SetCurrentThreadActivityId(Guid activityId)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Sub SetCurrentThreadActivityId(activityId As Guid)\n    parameters:\n    - id: activityId\n      type: System.Guid\n      description: \"\\n<p>The current thread's new activity ID, or <xref href=\\\"System.Guid.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to indicate that work on the current thread is not associated with any activity. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: EventSource.SetCurrentThreadActivityId(Guid)\n- uid: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid,System.Guid@)\n  commentId: M:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid,System.Guid@)\n  id: SetCurrentThreadActivityId(System.Guid,System.Guid@)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: SetCurrentThreadActivityId(Guid, out Guid)\n  fullName: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid, out System.Guid)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource_CoreCLR.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetCurrentThreadActivityId\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource_CoreCLR.cs\n    startLine: 82\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\\n<p>Sets the activity ID on the current thread, and returns the previous activity ID.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static void SetCurrentThreadActivityId(Guid activityId, out Guid oldActivityThatWillContinue)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Sub SetCurrentThreadActivityId(activityId As Guid, ByRef oldActivityThatWillContinue As Guid)\n    parameters:\n    - id: activityId\n      type: System.Guid\n      description: \"\\n<p>The current thread's new activity ID, or <xref href=\\\"System.Guid.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to indicate that work on the current thread is not associated with any activity.</p>\\n\"\n    - id: oldActivityThatWillContinue\n      type: System.Guid\n      description: \"\\n<p>When this method returns, contains the previous activity ID on the current thread. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid, ByRef System.Guid)\n  name.vb: SetCurrentThreadActivityId(Guid, ByRef Guid)\n  nameWithType: EventSource.SetCurrentThreadActivityId(Guid, out Guid)\n  nameWithType.vb: EventSource.SetCurrentThreadActivityId(Guid, ByRef Guid)\n- uid: System.Diagnostics.Tracing.EventSource.ToString\n  commentId: M:System.Diagnostics.Tracing.EventSource.ToString\n  id: ToString\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Diagnostics.Tracing.EventSource.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 597\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Obtains a string representation of the current event source instance.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The name and unique identifier that identify the current event source.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: EventSource.ToString()\n- uid: System.Diagnostics.Tracing.EventSource.Write(System.String)\n  commentId: M:System.Diagnostics.Tracing.EventSource.Write(System.String)\n  id: Write(System.String)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: Write(String)\n  fullName: System.Diagnostics.Tracing.EventSource.Write(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs\n    startLine: 112\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Writes an event without fields, but with the specified name and default options.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public void Write(string eventName)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Sub Write(eventName As String)\n    parameters:\n    - id: eventName\n      type: System.String\n      description: \"\\n<p>The name of the event to write.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>eventName</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EventSource.Write(String)\n- uid: System.Diagnostics.Tracing.EventSource.Write(System.String,System.Diagnostics.Tracing.EventSourceOptions)\n  commentId: M:System.Diagnostics.Tracing.EventSource.Write(System.String,System.Diagnostics.Tracing.EventSourceOptions)\n  id: Write(System.String,System.Diagnostics.Tracing.EventSourceOptions)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: Write(String, EventSourceOptions)\n  fullName: System.Diagnostics.Tracing.EventSource.Write(System.String, System.Diagnostics.Tracing.EventSourceOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs\n    startLine: 140\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Writes an event without fields, but with the specified name and options.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public void Write(string eventName, EventSourceOptions options)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Sub Write(eventName As String, options As EventSourceOptions)\n    parameters:\n    - id: eventName\n      type: System.String\n      description: \"\\n<p>The name of the event to write.</p>\\n\"\n    - id: options\n      type: System.Diagnostics.Tracing.EventSourceOptions\n      description: \"\\n<p>The options such as level, keywords and operation code for the event.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>eventName</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EventSource.Write(String, EventSourceOptions)\n- uid: System.Diagnostics.Tracing.EventSource.Write``1(System.String,``0)\n  commentId: M:System.Diagnostics.Tracing.EventSource.Write``1(System.String,``0)\n  id: Write``1(System.String,``0)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: Write<T>(String, T)\n  fullName: System.Diagnostics.Tracing.EventSource.Write<T>(System.String, T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs\n    startLine: 177\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Writes an event with the specified name and data.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public void Write<T>(string eventName, T data)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Sub Write(Of T)(eventName As String, data As T)\n    parameters:\n    - id: eventName\n      type: System.String\n      description: \"\\n<p>The name of the event.</p>\\n\"\n    - id: data\n      type: '{T}'\n      description: \"\\n<p>The event data. This type must be an anonymous type or marked with the <xref href=\\\"System.Diagnostics.Tracing.EventDataAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> attribute.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type that defines the event and its associated data. This type must be an anonymous type or marked with the <xref href=\\\"System.Diagnostics.Tracing.EventSourceAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> attribute.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Diagnostics.Tracing.EventSource.Write(Of T)(System.String, T)\n  name.vb: Write(Of T)(String, T)\n  nameWithType: EventSource.Write<T>(String, T)\n  nameWithType.vb: EventSource.Write(Of T)(String, T)\n- uid: System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions,``0)\n  commentId: M:System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions,``0)\n  id: Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions,``0)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: Write<T>(String, EventSourceOptions, T)\n  fullName: System.Diagnostics.Tracing.EventSource.Write<T>(System.String, System.Diagnostics.Tracing.EventSourceOptions, T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs\n    startLine: 214\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Writes an event with the specified name, event data and options.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public void Write<T>(string eventName, EventSourceOptions options, T data)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Sub Write(Of T)(eventName As String, options As EventSourceOptions, data As T)\n    parameters:\n    - id: eventName\n      type: System.String\n      description: \"\\n<p>The name of the event.</p>\\n\"\n    - id: options\n      type: System.Diagnostics.Tracing.EventSourceOptions\n      description: \"\\n<p>The event options.</p>\\n\"\n    - id: data\n      type: '{T}'\n      description: \"\\n<p>The event data. This type must be an anonymous type or marked with the <xref href=\\\"System.Diagnostics.Tracing.EventDataAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> attribute.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type that defines the event and its associated data. This type must be an anonymous type or marked with the <xref href=\\\"System.Diagnostics.Tracing.EventSourceAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> attribute.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Diagnostics.Tracing.EventSource.Write(Of T)(System.String, System.Diagnostics.Tracing.EventSourceOptions, T)\n  name.vb: Write(Of T)(String, EventSourceOptions, T)\n  nameWithType: EventSource.Write<T>(String, EventSourceOptions, T)\n  nameWithType.vb: EventSource.Write(Of T)(String, EventSourceOptions, T)\n- uid: System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,``0@)\n  commentId: M:System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,``0@)\n  id: Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,``0@)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: Write<T>(String, ref EventSourceOptions, ref T)\n  fullName: System.Diagnostics.Tracing.EventSource.Write<T>(System.String, ref System.Diagnostics.Tracing.EventSourceOptions, ref T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs\n    startLine: 253\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Writes an event with the specified name, options and event data.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public void Write<T>(string eventName, ref EventSourceOptions options, ref T data)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Sub Write(Of T)(eventName As String, ByRef options As EventSourceOptions, ByRef data As T)\n    parameters:\n    - id: eventName\n      type: System.String\n      description: \"\\n<p>The name of the event.</p>\\n\"\n    - id: options\n      type: System.Diagnostics.Tracing.EventSourceOptions\n      description: \"\\n<p>The event options.</p>\\n\"\n    - id: data\n      type: '{T}'\n      description: \"\\n<p>The event data. This type must be an anonymous type or marked with the <xref href=\\\"System.Diagnostics.Tracing.EventDataAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> attribute.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type that defines the event and its associated data. This type must be an anonymous type or marked with the <xref href=\\\"System.Diagnostics.Tracing.EventSourceAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> attribute.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Diagnostics.Tracing.EventSource.Write(Of T)(System.String, ByRef System.Diagnostics.Tracing.EventSourceOptions, ByRef T)\n  name.vb: Write(Of T)(String, ByRef EventSourceOptions, ByRef T)\n  nameWithType: EventSource.Write<T>(String, ref EventSourceOptions, ref T)\n  nameWithType.vb: EventSource.Write(Of T)(String, ByRef EventSourceOptions, ByRef T)\n- uid: System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,System.Guid@,System.Guid@,``0@)\n  commentId: M:System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,System.Guid@,System.Guid@,``0@)\n  id: Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,System.Guid@,System.Guid@,``0@)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: Write<T>(String, ref EventSourceOptions, ref Guid, ref Guid, ref T)\n  fullName: System.Diagnostics.Tracing.EventSource.Write<T>(System.String, ref System.Diagnostics.Tracing.EventSourceOptions, ref System.Guid, ref System.Guid, ref T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs\n    startLine: 299\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Writes an event with the specified name, options, related activity and event data.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public void Write<T>(string eventName, ref EventSourceOptions options, ref Guid activityId, ref Guid relatedActivityId, ref T data)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Sub Write(Of T)(eventName As String, ByRef options As EventSourceOptions, ByRef activityId As Guid, ByRef relatedActivityId As Guid, ByRef data As T)\n    parameters:\n    - id: eventName\n      type: System.String\n      description: \"\\n<p>The name of the event.</p>\\n\"\n    - id: options\n      type: System.Diagnostics.Tracing.EventSourceOptions\n      description: \"\\n<p>The event options.</p>\\n\"\n    - id: activityId\n      type: System.Guid\n      description: \"\\n<p>The ID of the activity associated with the event.</p>\\n\"\n    - id: relatedActivityId\n      type: System.Guid\n      description: \"\\n<p>The ID of an associated activity, or <xref href=\\\"System.Guid.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if there is no associated activity.</p>\\n\"\n    - id: data\n      type: '{T}'\n      description: \"\\n<p>The event data. This type must be an anonymous type or marked with the <xref href=\\\"System.Diagnostics.Tracing.EventDataAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> attribute.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type that defines the event and its associated data. This type must be an anonymous type or marked with the <xref href=\\\"System.Diagnostics.Tracing.EventSourceAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> attribute.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Diagnostics.Tracing.EventSource.Write(Of T)(System.String, ByRef System.Diagnostics.Tracing.EventSourceOptions, ByRef System.Guid, ByRef System.Guid, ByRef T)\n  name.vb: Write(Of T)(String, ByRef EventSourceOptions, ByRef Guid, ByRef Guid, ByRef T)\n  nameWithType: EventSource.Write<T>(String, ref EventSourceOptions, ref Guid, ref Guid, ref T)\n  nameWithType.vb: EventSource.Write(Of T)(String, ByRef EventSourceOptions, ByRef Guid, ByRef Guid, ByRef T)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32)\n  id: WriteEvent(System.Int32)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: WriteEvent(Int32)\n  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteEvent\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 716\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Writes an event by using the provided event identifier.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification = \"This does not need to be correct when racing with other threads\")]\n\n      protected void WriteEvent(int eventId)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification:=\"This does not need to be correct when racing with other threads\")>\n\n      Protected Sub WriteEvent(eventId As Integer)\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: \"\\n<p>The event identifier. This value should be between 0 and 65535.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: EventSource.WriteEvent(Int32)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Byte[])\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Byte[])\n  id: WriteEvent(System.Int32,System.Byte[])\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: WriteEvent(Int32, Byte[])\n  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteEvent\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 980\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Writes an event by using the provided event identifier and byte array argument.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification = \"This does not need to be correct when racing with other threads\")]\n\n      protected void WriteEvent(int eventId, byte[] arg1)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification:=\"This does not need to be correct when racing with other threads\")>\n\n      Protected Sub WriteEvent(eventId As Integer, arg1 As Byte())\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: \"\\n<p>The event identifier.  This value should be between 0 and 65535.</p>\\n\"\n    - id: arg1\n      type: System.Byte[]\n      description: \"\\n<p>A byte array argument.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  fullName.vb: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Byte())\n  name.vb: WriteEvent(Int32, Byte())\n  nameWithType: EventSource.WriteEvent(Int32, Byte[])\n  nameWithType.vb: EventSource.WriteEvent(Int32, Byte())\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32)\n  id: WriteEvent(System.Int32,System.Int32)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: WriteEvent(Int32, Int32)\n  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteEvent\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 724\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Writes an event by using the provided event identifier and 32-bit integer argument.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification = \"This does not need to be correct when racing with other threads\")]\n\n      protected void WriteEvent(int eventId, int arg1)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification:=\"This does not need to be correct when racing with other threads\")>\n\n      Protected Sub WriteEvent(eventId As Integer, arg1 As Integer)\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: \"\\n<p>The event identifier.  This value should be between 0 and 65535.</p>\\n\"\n    - id: arg1\n      type: System.Int32\n      description: \"\\n<p>An integer argument.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: EventSource.WriteEvent(Int32, Int32)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32)\n  id: WriteEvent(System.Int32,System.Int32,System.Int32)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: WriteEvent(Int32, Int32, Int32)\n  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteEvent\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 737\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Writes an event by using the provided event identifier and 32-bit integer arguments.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification = \"This does not need to be correct when racing with other threads\")]\n\n      protected void WriteEvent(int eventId, int arg1, int arg2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification:=\"This does not need to be correct when racing with other threads\")>\n\n      Protected Sub WriteEvent(eventId As Integer, arg1 As Integer, arg2 As Integer)\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: \"\\n<p>The event identifier.  This value should be between 0 and 65535.</p>\\n\"\n    - id: arg1\n      type: System.Int32\n      description: \"\\n<p>An integer argument.</p>\\n\"\n    - id: arg2\n      type: System.Int32\n      description: \"\\n<p>An integer argument.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: EventSource.WriteEvent(Int32, Int32, Int32)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32,System.Int32)\n  id: WriteEvent(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: WriteEvent(Int32, Int32, Int32, Int32)\n  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteEvent\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 752\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Writes an event by using the provided event identifier and 32-bit integer arguments.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification = \"This does not need to be correct when racing with other threads\")]\n\n      protected void WriteEvent(int eventId, int arg1, int arg2, int arg3)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification:=\"This does not need to be correct when racing with other threads\")>\n\n      Protected Sub WriteEvent(eventId As Integer, arg1 As Integer, arg2 As Integer, arg3 As Integer)\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: \"\\n<p>The event identifier.  This value should be between 0 and 65535.</p>\\n\"\n    - id: arg1\n      type: System.Int32\n      description: \"\\n<p>An integer argument.</p>\\n\"\n    - id: arg2\n      type: System.Int32\n      description: \"\\n<p>An integer argument.</p>\\n\"\n    - id: arg3\n      type: System.Int32\n      description: \"\\n<p>An integer argument.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: EventSource.WriteEvent(Int32, Int32, Int32, Int32)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.String)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.String)\n  id: WriteEvent(System.Int32,System.Int32,System.String)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: WriteEvent(Int32, Int32, String)\n  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int32, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteEvent\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 961\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Writes an event by using the provided event identifier and 32-bit integer and string arguments.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification = \"This does not need to be correct when racing with other threads\")]\n\n      protected void WriteEvent(int eventId, int arg1, string arg2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification:=\"This does not need to be correct when racing with other threads\")>\n\n      Protected Sub WriteEvent(eventId As Integer, arg1 As Integer, arg2 As String)\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: \"\\n<p>The event identifier. This value should be between 0 and 65535.</p>\\n\"\n    - id: arg1\n      type: System.Int32\n      description: \"\\n<p>A 32-bit integer argument.</p>\\n\"\n    - id: arg2\n      type: System.String\n      description: \"\\n<p>A string argument.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: EventSource.WriteEvent(Int32, Int32, String)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64)\n  id: WriteEvent(System.Int32,System.Int64)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: WriteEvent(Int32, Int64)\n  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteEvent\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 770\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Writes an event by using the provided event identifier and 64-bit integer argument.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification = \"This does not need to be correct when racing with other threads\")]\n\n      protected void WriteEvent(int eventId, long arg1)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification:=\"This does not need to be correct when racing with other threads\")>\n\n      Protected Sub WriteEvent(eventId As Integer, arg1 As Long)\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: \"\\n<p>The event identifier.  This value should be between 0 and 65535.</p>\\n\"\n    - id: arg1\n      type: System.Int64\n      description: \"\\n<p>A 64 bit integer argument.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: EventSource.WriteEvent(Int32, Int64)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Byte[])\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Byte[])\n  id: WriteEvent(System.Int32,System.Int64,System.Byte[])\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: WriteEvent(Int32, Int64, Byte[])\n  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int64, System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteEvent\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 1011\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Writes the event data using the specified indentifier and 64-bit integer and byte array arguments.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification = \"This does not need to be correct when racing with other threads\")]\n\n      protected void WriteEvent(int eventId, long arg1, byte[] arg2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification:=\"This does not need to be correct when racing with other threads\")>\n\n      Protected Sub WriteEvent(eventId As Integer, arg1 As Long, arg2 As Byte())\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: \"\\n<p>The event identifier.  This value should be between 0 and 65535.</p>\\n\"\n    - id: arg1\n      type: System.Int64\n      description: \"\\n<p>A 64-bit integer argument.</p>\\n\"\n    - id: arg2\n      type: System.Byte[]\n      description: \"\\n<p>A byte array argument.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  fullName.vb: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int64, System.Byte())\n  name.vb: WriteEvent(Int32, Int64, Byte())\n  nameWithType: EventSource.WriteEvent(Int32, Int64, Byte[])\n  nameWithType.vb: EventSource.WriteEvent(Int32, Int64, Byte())\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64)\n  id: WriteEvent(System.Int32,System.Int64,System.Int64)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: WriteEvent(Int32, Int64, Int64)\n  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int64, System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteEvent\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 783\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Writes an event by using the provided event identifier and 64-bit arguments.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification = \"This does not need to be correct when racing with other threads\")]\n\n      protected void WriteEvent(int eventId, long arg1, long arg2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification:=\"This does not need to be correct when racing with other threads\")>\n\n      Protected Sub WriteEvent(eventId As Integer, arg1 As Long, arg2 As Long)\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: \"\\n<p>The event identifier.  This value should be between 0 and 65535.</p>\\n\"\n    - id: arg1\n      type: System.Int64\n      description: \"\\n<p>A 64 bit integer argument.</p>\\n\"\n    - id: arg2\n      type: System.Int64\n      description: \"\\n<p>A 64 bit integer argument.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: EventSource.WriteEvent(Int32, Int64, Int64)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64,System.Int64)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64,System.Int64)\n  id: WriteEvent(System.Int32,System.Int64,System.Int64,System.Int64)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: WriteEvent(Int32, Int64, Int64, Int64)\n  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int64, System.Int64, System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteEvent\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 798\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Writes an event by using the provided event identifier and 64-bit arguments.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification = \"This does not need to be correct when racing with other threads\")]\n\n      protected void WriteEvent(int eventId, long arg1, long arg2, long arg3)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification:=\"This does not need to be correct when racing with other threads\")>\n\n      Protected Sub WriteEvent(eventId As Integer, arg1 As Long, arg2 As Long, arg3 As Long)\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: \"\\n<p>The event identifier.  This value should be between 0 and 65535.</p>\\n\"\n    - id: arg1\n      type: System.Int64\n      description: \"\\n<p>A 64 bit integer argument.</p>\\n\"\n    - id: arg2\n      type: System.Int64\n      description: \"\\n<p>A 64 bit integer argument.</p>\\n\"\n    - id: arg3\n      type: System.Int64\n      description: \"\\n<p>A 64 bit integer argument.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: EventSource.WriteEvent(Int32, Int64, Int64, Int64)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.String)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.String)\n  id: WriteEvent(System.Int32,System.Int64,System.String)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: WriteEvent(Int32, Int64, String)\n  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int64, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteEvent\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 941\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Writes an event by using the provided event identifier and 64-bit integer, and string arguments.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification = \"This does not need to be correct when racing with other threads\")]\n\n      protected void WriteEvent(int eventId, long arg1, string arg2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification:=\"This does not need to be correct when racing with other threads\")>\n\n      Protected Sub WriteEvent(eventId As Integer, arg1 As Long, arg2 As String)\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: \"\\n<p>The event identifier.  This value should be between 0 and 65535.</p>\\n\"\n    - id: arg1\n      type: System.Int64\n      description: \"\\n<p>A 64-bit integer argument.</p>\\n\"\n    - id: arg2\n      type: System.String\n      description: \"\\n<p>A string argument.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: EventSource.WriteEvent(Int32, Int64, String)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Object[])\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Object[])\n  id: WriteEvent(System.Int32,System.Object[])\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: WriteEvent(Int32, Object[])\n  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteEvent\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 1300\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Writes an event by using the provided event identifier and array of arguments.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification = \"This does not need to be correct when racing with other threads\")]\n\n      protected void WriteEvent(int eventId, params object[] args)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification:=\"This does not need to be correct when racing with other threads\")>\n\n      Protected Sub WriteEvent(eventId As Integer, ParamArray args As Object())\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: \"\\n<p>The event identifier.  This value should be between 0 and 65535.</p>\\n\"\n    - id: args\n      type: System.Object[]\n      description: \"\\n<p>An array of objects.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  fullName.vb: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Object())\n  name.vb: WriteEvent(Int32, Object())\n  nameWithType: EventSource.WriteEvent(Int32, Object[])\n  nameWithType.vb: EventSource.WriteEvent(Int32, Object())\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String)\n  id: WriteEvent(System.Int32,System.String)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: WriteEvent(Int32, String)\n  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteEvent\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 816\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Writes an event by using the provided event identifier and string argument.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification = \"This does not need to be correct when racing with other threads\")]\n\n      protected void WriteEvent(int eventId, string arg1)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification:=\"This does not need to be correct when racing with other threads\")>\n\n      Protected Sub WriteEvent(eventId As Integer, arg1 As String)\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: \"\\n<p>The event identifier.  This value should be between 0 and 65535.</p>\\n\"\n    - id: arg1\n      type: System.String\n      description: \"\\n<p>A string argument.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: EventSource.WriteEvent(Int32, String)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32)\n  id: WriteEvent(System.Int32,System.String,System.Int32)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: WriteEvent(Int32, String, Int32)\n  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteEvent\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 880\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Writes an event by using the provided event identifier and arguments.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification = \"This does not need to be correct when racing with other threads\")]\n\n      protected void WriteEvent(int eventId, string arg1, int arg2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification:=\"This does not need to be correct when racing with other threads\")>\n\n      Protected Sub WriteEvent(eventId As Integer, arg1 As String, arg2 As Integer)\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: \"\\n<p>The event identifier.  This value should be between 0 and 65535.</p>\\n\"\n    - id: arg1\n      type: System.String\n      description: \"\\n<p>A string argument.</p>\\n\"\n    - id: arg2\n      type: System.Int32\n      description: \"\\n<p>A 32 bit integer argument.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: EventSource.WriteEvent(Int32, String, Int32)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32,System.Int32)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32,System.Int32)\n  id: WriteEvent(System.Int32,System.String,System.Int32,System.Int32)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: WriteEvent(Int32, String, Int32, Int32)\n  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.String, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteEvent\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 899\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Writes an event by using the provided event identifier and arguments.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification = \"This does not need to be correct when racing with other threads\")]\n\n      protected void WriteEvent(int eventId, string arg1, int arg2, int arg3)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification:=\"This does not need to be correct when racing with other threads\")>\n\n      Protected Sub WriteEvent(eventId As Integer, arg1 As String, arg2 As Integer, arg3 As Integer)\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: \"\\n<p>The event identifier.  This value should be between 0 and 65535.</p>\\n\"\n    - id: arg1\n      type: System.String\n      description: \"\\n<p>A string argument.</p>\\n\"\n    - id: arg2\n      type: System.Int32\n      description: \"\\n<p>A 32 bit integer argument.</p>\\n\"\n    - id: arg3\n      type: System.Int32\n      description: \"\\n<p>A 32 bit integer argument.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: EventSource.WriteEvent(Int32, String, Int32, Int32)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int64)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int64)\n  id: WriteEvent(System.Int32,System.String,System.Int64)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: WriteEvent(Int32, String, Int64)\n  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.String, System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteEvent\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 921\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Writes an event by using the provided event identifier and arguments.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification = \"This does not need to be correct when racing with other threads\")]\n\n      protected void WriteEvent(int eventId, string arg1, long arg2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification:=\"This does not need to be correct when racing with other threads\")>\n\n      Protected Sub WriteEvent(eventId As Integer, arg1 As String, arg2 As Long)\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: \"\\n<p>The event identifier.  This value should be between 0 and 65535.</p>\\n\"\n    - id: arg1\n      type: System.String\n      description: \"\\n<p>A string argument.</p>\\n\"\n    - id: arg2\n      type: System.Int64\n      description: \"\\n<p>A 64 bit integer argument.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: EventSource.WriteEvent(Int32, String, Int64)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String)\n  id: WriteEvent(System.Int32,System.String,System.String)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: WriteEvent(Int32, String, String)\n  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteEvent\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 833\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Writes an event by using the provided event identifier and string arguments.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification = \"This does not need to be correct when racing with other threads\")]\n\n      protected void WriteEvent(int eventId, string arg1, string arg2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification:=\"This does not need to be correct when racing with other threads\")>\n\n      Protected Sub WriteEvent(eventId As Integer, arg1 As String, arg2 As String)\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: \"\\n<p>The event identifier.  This value should be between 0 and 65535.</p>\\n\"\n    - id: arg1\n      type: System.String\n      description: \"\\n<p>A string argument.</p>\\n\"\n    - id: arg2\n      type: System.String\n      description: \"\\n<p>A string argument.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: EventSource.WriteEvent(Int32, String, String)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String,System.String)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String,System.String)\n  id: WriteEvent(System.Int32,System.String,System.String,System.String)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: WriteEvent(Int32, String, String, String)\n  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.String, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteEvent\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 854\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Writes an event by using the provided event identifier and string arguments.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification = \"This does not need to be correct when racing with other threads\")]\n\n      protected void WriteEvent(int eventId, string arg1, string arg2, string arg3)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <SuppressMessage(\"Microsoft.Concurrency\", \"CA8001\", Justification:=\"This does not need to be correct when racing with other threads\")>\n\n      Protected Sub WriteEvent(eventId As Integer, arg1 As String, arg2 As String, arg3 As String)\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: \"\\n<p>The event identifier.  This value should be between 0 and 65535.</p>\\n\"\n    - id: arg1\n      type: System.String\n      description: \"\\n<p>A string argument.</p>\\n\"\n    - id: arg2\n      type: System.String\n      description: \"\\n<p>A string argument.</p>\\n\"\n    - id: arg3\n      type: System.String\n      description: \"\\n<p>A string argument.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: EventSource.WriteEvent(Int32, String, String, String)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)\n  id: WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: WriteEventCore(Int32, Int32, EventSource.EventData*)\n  fullName: System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32, System.Int32, System.Diagnostics.Tracing.EventSource.EventData*)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteEventCore\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 1111\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p></p>\\n<p>Creates a new <xref href=\\\"System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> overload by using the provided event identifier and event data.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      protected void WriteEventCore(int eventId, int eventDataCount, EventSource.EventData*data)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      Protected Sub WriteEventCore(eventId As Integer, eventDataCount As Integer, data As EventSource.EventData *)\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: \"\\n<p>The event identifier.</p>\\n\"\n    - id: eventDataCount\n      type: System.Int32\n      description: \"\\n<p>The number of event data items.</p>\\n\"\n    - id: data\n      type: System.Diagnostics.Tracing.EventSource.EventData*\n      description: \"\\n<p>The structure that contains the event data.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: EventSource.WriteEventCore(Int32, Int32, EventSource.EventData*)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])\n  id: WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: WriteEventWithRelatedActivityId(Int32, Guid, Object[])\n  fullName: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32, System.Guid, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteEventWithRelatedActivityId\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 1315\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\\n<p>Writes an event that indicates that the current activity is related to another activity. </p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      protected void WriteEventWithRelatedActivityId(int eventId, Guid relatedActivityId, params object[] args)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Protected Sub WriteEventWithRelatedActivityId(eventId As Integer, relatedActivityId As Guid, ParamArray args As Object())\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: \"\\n<p>An identifier that uniquely identifies this event within the <xref href=\\\"System.Diagnostics.Tracing.EventSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: relatedActivityId\n      type: System.Guid\n      description: \"\\n<p>The related activity identifier. </p>\\n\"\n    - id: args\n      type: System.Object[]\n      description: \"\\n<p>An array of objects that contain data about the event. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  fullName.vb: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32, System.Guid, System.Object())\n  name.vb: WriteEventWithRelatedActivityId(Int32, Guid, Object())\n  nameWithType: EventSource.WriteEventWithRelatedActivityId(Int32, Guid, Object[])\n  nameWithType.vb: EventSource.WriteEventWithRelatedActivityId(Int32, Guid, Object())\n- uid: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)\n  id: WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  - vb\n  name: WriteEventWithRelatedActivityIdCore(Int32, Guid*, Int32, EventSource.EventData*)\n  fullName: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32, System.Guid*, System.Int32, System.Diagnostics.Tracing.EventSource.EventData*)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteEventWithRelatedActivityIdCore\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 1143\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\\n<p>Writes an event that indicates that the current activity is related to another activity.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      protected void WriteEventWithRelatedActivityIdCore(int eventId, Guid*relatedActivityId, int eventDataCount, EventSource.EventData*data)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      Protected Sub WriteEventWithRelatedActivityIdCore(eventId As Integer, relatedActivityId As Guid *, eventDataCount As Integer, data As EventSource.EventData *)\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: \"\\n<p>An identifier that uniquely identifies this event within the <xref href=\\\"System.Diagnostics.Tracing.EventSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: relatedActivityId\n      type: System.Guid*\n      description: \"\\n<p>A pointer to the GUID of the related activity ID. </p>\\n\"\n    - id: eventDataCount\n      type: System.Int32\n      description: \"\\n<p>The number of items in the <em>data</em> field. </p>\\n\"\n    - id: data\n      type: System.Diagnostics.Tracing.EventSource.EventData*\n      description: \"\\n<p>A pointer to the first item in the event data field. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: EventSource.WriteEventWithRelatedActivityIdCore(Int32, Guid*, Int32, EventSource.EventData*)\nreferences:\n- uid: System.Diagnostics.Tracing\n  isExternal: false\n  name: System.Diagnostics.Tracing\n  fullName: System.Diagnostics.Tracing\n  nameWithType: System.Diagnostics.Tracing\n  commentId: N:System.Diagnostics.Tracing\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Diagnostics.Tracing.EventSourceSettings\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventSourceSettings\n  fullName: System.Diagnostics.Tracing.EventSourceSettings\n  nameWithType: EventSourceSettings\n  commentId: T:System.Diagnostics.Tracing.EventSourceSettings\n- uid: System.String[]\n  name: String[]\n  fullName: System.String[]\n  fullname.vb: System.String()\n  name.vb: String()\n  spec.csharp:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: String[]\n  nameWithType.vb: String()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  fullName: System.Exception\n  nameWithType: Exception\n  commentId: T:System.Exception\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  fullName: System.Guid\n  nameWithType: Guid\n  commentId: T:System.Guid\n- uid: System.EventHandler{System.Diagnostics.Tracing.EventCommandEventArgs}\n  parent: System\n  definition: System.EventHandler`1\n  name: EventHandler<EventCommandEventArgs>\n  fullName: System.EventHandler<System.Diagnostics.Tracing.EventCommandEventArgs>\n  fullname.vb: System.EventHandler(Of System.Diagnostics.Tracing.EventCommandEventArgs)\n  name.vb: EventHandler(Of EventCommandEventArgs)\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    fullName: System.EventHandler\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Diagnostics.Tracing.EventCommandEventArgs\n    name: EventCommandEventArgs\n    fullName: System.Diagnostics.Tracing.EventCommandEventArgs\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    fullName: System.EventHandler\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Diagnostics.Tracing.EventCommandEventArgs\n    name: EventCommandEventArgs\n    fullName: System.Diagnostics.Tracing.EventCommandEventArgs\n  - name: )\n    fullName: )\n  nameWithType: EventHandler<EventCommandEventArgs>\n  nameWithType.vb: EventHandler(Of EventCommandEventArgs)\n  commentId: T:System.EventHandler{System.Diagnostics.Tracing.EventCommandEventArgs}\n- uid: System.EventHandler`1\n  isExternal: false\n  name: EventHandler<TEventArgs>\n  fullName: System.EventHandler<TEventArgs>\n  fullname.vb: System.EventHandler(Of TEventArgs)\n  name.vb: EventHandler(Of TEventArgs)\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    fullName: System.EventHandler\n  - name: <\n    fullName: <\n  - name: TEventArgs\n    fullName: TEventArgs\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    fullName: System.EventHandler\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TEventArgs\n    fullName: TEventArgs\n  - name: )\n    fullName: )\n  nameWithType: EventHandler<TEventArgs>\n  nameWithType.vb: EventHandler(Of TEventArgs)\n  commentId: T:System.EventHandler`1\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDisposable.Dispose()\n  commentId: M:System.IDisposable.Dispose\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Diagnostics.Tracing.EventManifestOptions\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventManifestOptions\n  fullName: System.Diagnostics.Tracing.EventManifestOptions\n  nameWithType: EventManifestOptions\n  commentId: T:System.Diagnostics.Tracing.EventManifestOptions\n- uid: System.Collections.Generic.IEnumerable{System.Diagnostics.Tracing.EventSource}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<EventSource>\n  fullName: System.Collections.Generic.IEnumerable<System.Diagnostics.Tracing.EventSource>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Diagnostics.Tracing.EventSource)\n  name.vb: IEnumerable(Of EventSource)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Diagnostics.Tracing.EventSource\n    name: EventSource\n    fullName: System.Diagnostics.Tracing.EventSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Diagnostics.Tracing.EventSource\n    name: EventSource\n    fullName: System.Diagnostics.Tracing.EventSource\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<EventSource>\n  nameWithType.vb: IEnumerable(Of EventSource)\n  commentId: T:System.Collections.Generic.IEnumerable{System.Diagnostics.Tracing.EventSource}\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable`1\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Diagnostics.Tracing.EventLevel\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventLevel\n  fullName: System.Diagnostics.Tracing.EventLevel\n  nameWithType: EventLevel\n  commentId: T:System.Diagnostics.Tracing.EventLevel\n- uid: System.Diagnostics.Tracing.EventKeywords\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventKeywords\n  fullName: System.Diagnostics.Tracing.EventKeywords\n  nameWithType: EventKeywords\n  commentId: T:System.Diagnostics.Tracing.EventKeywords\n- uid: System.Diagnostics.Tracing.EventChannel\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventChannel\n  fullName: System.Diagnostics.Tracing.EventChannel\n  nameWithType: EventChannel\n  commentId: T:System.Diagnostics.Tracing.EventChannel\n- uid: System.Diagnostics.Tracing.EventCommandEventArgs\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventCommandEventArgs\n  fullName: System.Diagnostics.Tracing.EventCommandEventArgs\n  nameWithType: EventCommandEventArgs\n  commentId: T:System.Diagnostics.Tracing.EventCommandEventArgs\n- uid: System.Diagnostics.Tracing.EventSource\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventSource\n  fullName: System.Diagnostics.Tracing.EventSource\n  nameWithType: EventSource\n  commentId: T:System.Diagnostics.Tracing.EventSource\n- uid: System.Diagnostics.Tracing.EventCommand\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventCommand\n  fullName: System.Diagnostics.Tracing.EventCommand\n  nameWithType: EventCommand\n  commentId: T:System.Diagnostics.Tracing.EventCommand\n- uid: System.Collections.Generic.IDictionary{System.String,System.String}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IDictionary`2\n  name: IDictionary<String, String>\n  fullName: System.Collections.Generic.IDictionary<System.String, System.String>\n  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)\n  name.vb: IDictionary(Of String, String)\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDictionary<String, String>\n  nameWithType.vb: IDictionary(Of String, String)\n  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}\n- uid: System.Collections.Generic.IDictionary`2\n  isExternal: false\n  name: IDictionary<TKey, TValue>\n  fullName: System.Collections.Generic.IDictionary<TKey, TValue>\n  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)\n  name.vb: IDictionary(Of TKey, TValue)\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: )\n    fullName: )\n  nameWithType: IDictionary<TKey, TValue>\n  nameWithType.vb: IDictionary(Of TKey, TValue)\n  commentId: T:System.Collections.Generic.IDictionary`2\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Diagnostics.Tracing.EventSourceOptions\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventSourceOptions\n  fullName: System.Diagnostics.Tracing.EventSourceOptions\n  nameWithType: EventSourceOptions\n  commentId: T:System.Diagnostics.Tracing.EventSourceOptions\n- uid: '{T}'\n  definition: T\n  name: T\n  fullName: T\n  nameWithType: T\n  commentId: '!:T'\n- uid: T\n  isExternal: false\n  name: T\n  fullName: T\n  nameWithType: T\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: System.Diagnostics.Tracing.EventSource.EventData*\n  name: EventSource.EventData*\n  fullName: System.Diagnostics.Tracing.EventSource.EventData*\n  spec.csharp:\n  - uid: System.Diagnostics.Tracing.EventSource.EventData\n    name: EventSource.EventData\n    fullName: System.Diagnostics.Tracing.EventSource.EventData\n  - name: '*'\n    fullName: '*'\n  spec.vb:\n  - uid: System.Diagnostics.Tracing.EventSource.EventData\n    name: EventSource.EventData\n    fullName: System.Diagnostics.Tracing.EventSource.EventData\n  - name: '*'\n    fullName: '*'\n  nameWithType: EventSource.EventData*\n- uid: System.Guid*\n  name: Guid*\n  fullName: System.Guid*\n  spec.csharp:\n  - uid: System.Guid\n    name: Guid\n    fullName: System.Guid\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  spec.vb:\n  - uid: System.Guid\n    name: Guid\n    fullName: System.Guid\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  nameWithType: Guid*\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}