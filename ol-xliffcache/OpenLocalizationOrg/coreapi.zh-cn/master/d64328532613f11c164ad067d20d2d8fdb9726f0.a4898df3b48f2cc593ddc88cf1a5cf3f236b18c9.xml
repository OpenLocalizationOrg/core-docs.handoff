{"nodes":[{"pos":[639,656],"content":"FormattableString","needQuote":true,"nodes":[{"content":"FormattableString","pos":[0,17]}]},{"pos":[1944,1963],"content":"FormattableString()","needQuote":true,"nodes":[{"content":"FormattableString()","pos":[0,19]}]},{"pos":[2870,2883],"content":"ArgumentCount","needQuote":true,"nodes":[{"content":"ArgumentCount","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The number of arguments to be formatted.","pos":[3542,3587],"source":"\\n<p>The number of arguments to be formatted."},{"content":"&lt;/p&gt;\\n","pos":[3588,3594],"source":" </p>\\n"},{"pos":[3922,3928],"content":"Format","needQuote":true,"nodes":[{"content":"Format","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The composite format string.","pos":[4553,4586],"source":"\\n<p>The composite format string."},{"content":"&lt;/p&gt;\\n","pos":[4587,4593],"source":" </p>\\n"},{"pos":[4971,4989],"content":"GetArgument(Int32)","needQuote":true,"nodes":[{"content":"GetArgument(Int32)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The argument.","pos":[5932,5950],"source":"\\n<p>The argument."},{"content":"&lt;/p&gt;\\n","pos":[5951,5957],"source":" </p>\\n"},{"pos":[6287,6301],"content":"GetArguments()","needQuote":true,"nodes":[{"content":"GetArguments()","pos":[0,14]}]},{"content":"\\n&lt;p&gt;An object array that contains one or more objects to format.","pos":[6953,7018],"source":"\\n<p>An object array that contains one or more objects to format."},{"content":"&lt;/p&gt;\\n","pos":[7019,7025],"source":" </p>\\n"},{"pos":[7420,7448],"content":"Invariant(FormattableString)","needQuote":true,"nodes":[{"content":"Invariant(FormattableString)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The object to convert to a result string.","pos":[8237,8283],"source":"\\n<p>The object to convert to a result string."},{"content":"&lt;/p&gt;\\n","pos":[8284,8290],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string that results from formatting the current instance by using the conventions of the invariant culture.","pos":[8350,8466],"source":"\\n<p>The string that results from formatting the current instance by using the conventions of the invariant culture."},{"content":"&lt;/p&gt;\\n","pos":[8467,8473],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;formattable&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[8592,8645],"source":"\\n<p>\\n<em>formattable</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[8646,8652],"source":" </p>\\n"},{"pos":[9160,9206],"content":"IFormattable.ToString(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"IFormattable.ToString(String, IFormatProvider)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;A string.","pos":[10147,10161],"source":"\\n<p>A string."},{"content":"This argument is ignored.","pos":[10162,10187]},{"content":"&lt;/p&gt;\\n","pos":[10188,10194],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that provides culture-specific formatting information.","pos":[10276,10345],"source":"\\n<p>An object that provides culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[10346,10352],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string formatted using the conventions of the &lt;em&gt;formatProvider&lt;/em&gt; parameter.","pos":[10412,10499],"source":"\\n<p>A string formatted using the conventions of the <em>formatProvider</em> parameter."},{"content":"&lt;/p&gt;\\n","pos":[10500,10506],"source":" </p>\\n"},{"pos":[11005,11015],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;A result string formatted by using the conventions of the current culture.","pos":[11734,11813],"source":"\\n<p>A result string formatted by using the conventions of the current culture."},{"content":"&lt;/p&gt;\\n","pos":[11814,11820],"source":" </p>\\n"},{"pos":[12236,12261],"content":"ToString(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(IFormatProvider)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;An object that provides culture-specific formatting information.","pos":[13108,13177],"source":"\\n<p>An object that provides culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[13178,13184],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A result string formatted by using the conventions of &lt;em&gt;formatProvider&lt;/em&gt;.","pos":[13244,13327],"source":"\\n<p>A result string formatted by using the conventions of <em>formatProvider</em>."},{"content":"&lt;/p&gt;\\n","pos":[13328,13334],"source":" </p>\\n"},{"pos":[13538,13544],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[13675,13681],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13832,13844],"content":"IFormattable","needQuote":true,"nodes":[{"content":"IFormattable","pos":[0,12]}]},{"pos":[14035,14049],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[14168,14174],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14241,14242],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14292,14298],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14358,14359],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14442,14448],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14515,14516],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14566,14572],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14632,14633],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14847,14869],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[15017,15023],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15090,15091],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15141,15147],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15208,15209]},{"pos":[15264,15270],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15330,15331],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15428,15434],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15501,15502],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15552,15558],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15619,15620]},{"pos":[15675,15681],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15741,15742],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15987,16018],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[16184,16199],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[16275,16276],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16326,16332],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16393,16394]},{"pos":[16449,16455],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16515,16516],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16622,16637],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[16713,16714],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16764,16770],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16831,16832]},{"pos":[16887,16893],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16953,16954],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17184,17197],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[17298,17309],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[17381,17382],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17409,17410],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17483,17494],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[17566,17567],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17594,17595],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17770,17779],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[17872,17879],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[17947,17948],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17975,17976],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18045,18052],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[18120,18121],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18148,18149],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18324,18341],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[18450,18465],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[18541,18542],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18569,18570],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18647,18662],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[18738,18739],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18766,18767],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18935,18940],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[19082,19088],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[19198,19206],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[19334,19340],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[19401,19403]},{"pos":[19468,19474],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19534,19536],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[19684,19701],"content":"FormattableString","needQuote":true,"nodes":[{"content":"FormattableString","pos":[0,17]}]},{"pos":[19944,19977],"content":"ToString(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(String, IFormatProvider)","pos":[0,33]}]},{"pos":[20159,20167],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[20221,20222],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20272,20278],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[20339,20340]},{"pos":[20404,20419],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[20467,20468],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20582,20590],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[20644,20645],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20695,20701],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[20762,20763]},{"pos":[20827,20842],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[20890,20891],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21128,21143],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[21330,21340],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[21435,21443],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[21512,21513],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21540,21541],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21611,21619],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[21688,21689],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21716,21717],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21870,21891],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.FormattableString\n  commentId: T:System.FormattableString\n  id: FormattableString\n  parent: System\n  children:\n  - System.FormattableString.#ctor\n  - System.FormattableString.ArgumentCount\n  - System.FormattableString.Format\n  - System.FormattableString.GetArgument(System.Int32)\n  - System.FormattableString.GetArguments\n  - System.FormattableString.Invariant(System.FormattableString)\n  - System.FormattableString.System#IFormattable#ToString(System.String,System.IFormatProvider)\n  - System.FormattableString.ToString\n  - System.FormattableString.ToString(System.IFormatProvider)\n  langs:\n  - csharp\n  - vb\n  name: FormattableString\n  fullName: System.FormattableString\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/FormattableString.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FormattableString\n    path: src/mscorlib/src/System/FormattableString.cs\n    startLine: 19\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents a composite format string, along with the arguments to be formatted. </p>\\n\"\n  syntax:\n    content: 'public abstract class FormattableString : IFormattable'\n    content.vb: >-\n      Public MustInherit Class FormattableString\n          Implements IFormattable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IFormattable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: FormattableString\n- uid: System.FormattableString.#ctor\n  commentId: M:System.FormattableString.#ctor\n  id: '#ctor'\n  parent: System.FormattableString\n  langs:\n  - csharp\n  - vb\n  name: FormattableString()\n  fullName: System.FormattableString.FormattableString()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 870\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Instantiates a new instance of the <xref href=\\\"System.FormattableString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. </p>\\n\"\n  syntax:\n    content: protected FormattableString()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: FormattableString.FormattableString()\n- uid: System.FormattableString.ArgumentCount\n  commentId: P:System.FormattableString.ArgumentCount\n  id: ArgumentCount\n  parent: System.FormattableString\n  langs:\n  - csharp\n  - vb\n  name: ArgumentCount\n  fullName: System.FormattableString.ArgumentCount\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/FormattableString.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ArgumentCount\n    path: src/mscorlib/src/System/FormattableString.cs\n    startLine: 35\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the number of arguments to be formatted. </p>\\n\"\n  syntax:\n    content: public abstract int ArgumentCount { get; }\n    content.vb: Public MustOverride ReadOnly Property ArgumentCount As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of arguments to be formatted. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: FormattableString.ArgumentCount\n- uid: System.FormattableString.Format\n  commentId: P:System.FormattableString.Format\n  id: Format\n  parent: System.FormattableString\n  langs:\n  - csharp\n  - vb\n  name: Format\n  fullName: System.FormattableString.Format\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/FormattableString.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Format\n    path: src/mscorlib/src/System/FormattableString.cs\n    startLine: 24\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the composite format string. </p>\\n\"\n  syntax:\n    content: public abstract string Format { get; }\n    content.vb: Public MustOverride ReadOnly Property Format As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The composite format string. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: FormattableString.Format\n- uid: System.FormattableString.GetArgument(System.Int32)\n  commentId: M:System.FormattableString.GetArgument(System.Int32)\n  id: GetArgument(System.Int32)\n  parent: System.FormattableString\n  langs:\n  - csharp\n  - vb\n  name: GetArgument(Int32)\n  fullName: System.FormattableString.GetArgument(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/FormattableString.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetArgument\n    path: src/mscorlib/src/System/FormattableString.cs\n    startLine: 40\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the argument at the specified index position. </p>\\n\"\n  syntax:\n    content: public abstract object GetArgument(int index)\n    content.vb: Public MustOverride Function GetArgument(index As Integer) As Object\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the argument. Its value can range from zero to one less than the value of <xref href=\\\"System.FormattableString.ArgumentCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The argument. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: FormattableString.GetArgument(Int32)\n- uid: System.FormattableString.GetArguments\n  commentId: M:System.FormattableString.GetArguments\n  id: GetArguments\n  parent: System.FormattableString\n  langs:\n  - csharp\n  - vb\n  name: GetArguments()\n  fullName: System.FormattableString.GetArguments()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/FormattableString.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetArguments\n    path: src/mscorlib/src/System/FormattableString.cs\n    startLine: 30\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns an object array that contains one or more objects to format. </p>\\n\"\n  syntax:\n    content: public abstract object[] GetArguments()\n    content.vb: Public MustOverride Function GetArguments As Object()\n    return:\n      type: System.Object[]\n      description: \"\\n<p>An object array that contains one or more objects to format. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: FormattableString.GetArguments()\n- uid: System.FormattableString.Invariant(System.FormattableString)\n  commentId: M:System.FormattableString.Invariant(System.FormattableString)\n  id: Invariant(System.FormattableString)\n  parent: System.FormattableString\n  langs:\n  - csharp\n  - vb\n  name: Invariant(FormattableString)\n  fullName: System.FormattableString.Invariant(System.FormattableString)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/FormattableString.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Invariant\n    path: src/mscorlib/src/System/FormattableString.cs\n    startLine: 65\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a result string in which arguments are formatted by using the conventions of the invariant culture. </p>\\n\"\n  syntax:\n    content: public static string Invariant(FormattableString formattable)\n    content.vb: Public Shared Function Invariant(formattable As FormattableString) As String\n    parameters:\n    - id: formattable\n      type: System.FormattableString\n      description: \"\\n<p>The object to convert to a result string. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string that results from formatting the current instance by using the conventions of the invariant culture. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>formattable</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: FormattableString.Invariant(FormattableString)\n- uid: System.FormattableString.System#IFormattable#ToString(System.String,System.IFormatProvider)\n  commentId: M:System.FormattableString.System#IFormattable#ToString(System.String,System.IFormatProvider)\n  id: System#IFormattable#ToString(System.String,System.IFormatProvider)\n  isEii: true\n  parent: System.FormattableString\n  langs:\n  - csharp\n  - vb\n  name: IFormattable.ToString(String, IFormatProvider)\n  fullName: System.FormattableString.System.IFormattable.ToString(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/FormattableString.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IFormattable.ToString\n    path: src/mscorlib/src/System/FormattableString.cs\n    startLine: 47\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the string that results from formatting the format string along with its arguments by using the formatting conventions of a specified culture. </p>\\n\"\n  syntax:\n    content: string IFormattable.ToString(string ignored, IFormatProvider formatProvider)\n    content.vb: Function System.IFormattable.ToString(ignored As String, formatProvider As IFormatProvider) As String Implements IFormattable.ToString\n    parameters:\n    - id: ignored\n      type: System.String\n      description: \"\\n<p>A string. This argument is ignored. </p>\\n\"\n    - id: formatProvider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that provides culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string formatted using the conventions of the <em>formatProvider</em> parameter. </p>\\n\"\n  implements:\n  - System.IFormattable.ToString(System.String,System.IFormatProvider)\n  name.vb: System.IFormattable.ToString(String, IFormatProvider)\n  nameWithType: FormattableString.IFormattable.ToString(String, IFormatProvider)\n  nameWithType.vb: FormattableString.System.IFormattable.ToString(String, IFormatProvider)\n- uid: System.FormattableString.ToString\n  commentId: M:System.FormattableString.ToString\n  id: ToString\n  parent: System.FormattableString\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.FormattableString.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/FormattableString.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/FormattableString.cs\n    startLine: 75\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the string that results from formatting the composite format string along with its arguments by using the formatting conventions of the current culture. </p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A result string formatted by using the conventions of the current culture. </p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: FormattableString.ToString()\n- uid: System.FormattableString.ToString(System.IFormatProvider)\n  commentId: M:System.FormattableString.ToString(System.IFormatProvider)\n  id: ToString(System.IFormatProvider)\n  parent: System.FormattableString\n  langs:\n  - csharp\n  - vb\n  name: ToString(IFormatProvider)\n  fullName: System.FormattableString.ToString(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/FormattableString.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/FormattableString.cs\n    startLine: 45\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the string that results from formatting the composite format string along with its arguments by using the formatting conventions of a specified culture. </p>\\n\"\n  syntax:\n    content: public abstract string ToString(IFormatProvider formatProvider)\n    content.vb: Public MustOverride Function ToString(formatProvider As IFormatProvider) As String\n    parameters:\n    - id: formatProvider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that provides culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A result string formatted by using the conventions of <em>formatProvider</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: FormattableString.ToString(IFormatProvider)\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IFormattable\n  parent: System\n  isExternal: false\n  name: IFormattable\n  fullName: System.IFormattable\n  nameWithType: IFormattable\n  commentId: T:System.IFormattable\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: System.FormattableString\n  parent: System\n  isExternal: false\n  name: FormattableString\n  fullName: System.FormattableString\n  nameWithType: FormattableString\n  commentId: T:System.FormattableString\n- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n  parent: System.IFormattable\n  isExternal: true\n  name: ToString(String, IFormatProvider)\n  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n    name: ToString\n    fullName: System.IFormattable.ToString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n    name: ToString\n    fullName: System.IFormattable.ToString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IFormattable.ToString(String, IFormatProvider)\n  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: false\n  name: IFormatProvider\n  fullName: System.IFormatProvider\n  nameWithType: IFormatProvider\n  commentId: T:System.IFormatProvider\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}