{"nodes":[{"pos":[1624,1644],"content":"SocketAsyncEventArgs","needQuote":true,"nodes":[{"content":"SocketAsyncEventArgs","pos":[0,20]}]},{"pos":[4928,4950],"content":"SocketAsyncEventArgs()","needQuote":true,"nodes":[{"content":"SocketAsyncEventArgs()","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The platform is not supported.","pos":[5712,5747],"source":"\\n<p>The platform is not supported."},{"content":"&lt;/p&gt;\\n","pos":[5748,5754],"source":" </p>\\n"},{"pos":[6106,6118],"content":"AcceptSocket","needQuote":true,"nodes":[{"content":"AcceptSocket","pos":[0,12]}]},{"pos":[7598,7604],"content":"Buffer","needQuote":true,"nodes":[{"content":"Buffer","pos":[0,6]}]},{"pos":[10337,10347],"content":"BufferList","needQuote":true,"nodes":[{"content":"BufferList","pos":[0,10]}]},{"pos":[12724,12740],"content":"BytesTransferred","needQuote":true,"nodes":[{"content":"BytesTransferred","pos":[0,16]}]},{"pos":[15520,15538],"content":"ConnectByNameError","needQuote":true,"nodes":[{"content":"ConnectByNameError","pos":[0,18]}]},{"pos":[17300,17313],"content":"ConnectSocket","needQuote":true,"nodes":[{"content":"ConnectSocket","pos":[0,13]}]},{"pos":[18918,18923],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[21873,21886],"content":"LastOperation","needQuote":true,"nodes":[{"content":"LastOperation","pos":[0,13]}]},{"pos":[25052,25058],"content":"Offset","needQuote":true,"nodes":[{"content":"Offset","pos":[0,6]}]},{"pos":[27986,28014],"content":"ReceiveMessageFromPacketInfo","needQuote":true,"nodes":[{"content":"ReceiveMessageFromPacketInfo","pos":[0,28]}]},{"pos":[30022,30036],"content":"RemoteEndPoint","needQuote":true,"nodes":[{"content":"RemoteEndPoint","pos":[0,14]}]},{"pos":[32143,32162],"content":"SendPacketsElements","needQuote":true,"nodes":[{"content":"SendPacketsElements","pos":[0,19]}]},{"pos":[33976,33995],"content":"SendPacketsSendSize","needQuote":true,"nodes":[{"content":"SendPacketsSendSize","pos":[0,19]}]},{"pos":[35584,35595],"content":"SocketError","needQuote":true,"nodes":[{"content":"SocketError","pos":[0,11]}]},{"pos":[38643,38654],"content":"SocketFlags","needQuote":true,"nodes":[{"content":"SocketFlags","pos":[0,11]}]},{"pos":[40769,40778],"content":"UserToken","needQuote":true,"nodes":[{"content":"UserToken","pos":[0,9]}]},{"content":"\\n&lt;p&gt;An object that represents the user or application object associated with this asynchronous socket operation.&lt;/p&gt;\\n","pos":[41484,41603],"source":"\\n<p>An object that represents the user or application object associated with this asynchronous socket operation.</p>\\n"},{"pos":[43677,43686],"content":"Completed","needQuote":true,"nodes":[{"content":"Completed","pos":[0,9]}]},{"pos":[44727,44736],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[45892,45902],"content":"Finalize()","needQuote":true,"nodes":[{"content":"Finalize()","pos":[0,10]}]},{"pos":[47009,47042],"content":"OnCompleted(SocketAsyncEventArgs)","needQuote":true,"nodes":[{"content":"OnCompleted(SocketAsyncEventArgs)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The event that is signaled.&lt;/p&gt;\\n","pos":[47847,47885],"source":"\\n<p>The event that is signaled.</p>\\n"},{"pos":[50124,50155],"content":"SetBuffer(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"SetBuffer(Byte[], Int32, Int32)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The data buffer to use with an asynchronous socket method.&lt;/p&gt;\\n","pos":[50936,51005],"source":"\\n<p>The data buffer to use with an asynchronous socket method.</p>\\n"},{"content":"\\n&lt;p&gt;The offset, in bytes, in the data buffer where the operation starts.&lt;/p&gt;\\n","pos":[51069,51148],"source":"\\n<p>The offset, in bytes, in the data buffer where the operation starts.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum amount of data, in bytes, to send or receive in the buffer.&lt;/p&gt;\\n","pos":[51211,51293],"source":"\\n<p>The maximum amount of data, in bytes, to send or receive in the buffer.</p>\\n"},{"pos":[53460,53483],"content":"SetBuffer(Int32, Int32)","needQuote":true,"nodes":[{"content":"SetBuffer(Int32, Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The offset, in bytes, in the data buffer where the operation starts.&lt;/p&gt;\\n","pos":[54215,54294],"source":"\\n<p>The offset, in bytes, in the data buffer where the operation starts.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum amount of data, in bytes, to send or receive in the buffer.&lt;/p&gt;\\n","pos":[54357,54439],"source":"\\n<p>The maximum amount of data, in bytes, to send or receive in the buffer.</p>\\n"},{"pos":[55683,55701],"content":"System.Net.Sockets","needQuote":true,"nodes":[{"content":"System.Net.Sockets","pos":[0,18]}]},{"pos":[55868,55874],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[56022,56031],"content":"EventArgs","needQuote":true,"nodes":[{"content":"EventArgs","pos":[0,9]}]},{"pos":[56190,56201],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[56379,56384],"content":"Empty","needQuote":true,"nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[56571,56581],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[56676,56684],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[56753,56754],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56781,56782],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56852,56860],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[56929,56930],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56957,56958],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57141,57155],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[57274,57280],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[57347,57348],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57398,57404],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[57464,57465],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57548,57554],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[57621,57622],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57672,57678],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[57738,57739],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57953,57975],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[58123,58129],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[58196,58197],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58247,58253],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[58314,58315]},{"pos":[58370,58376],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[58436,58437],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58534,58540],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[58607,58608],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58658,58664],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[58725,58726]},{"pos":[58781,58787],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[58847,58848],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59093,59124],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[59290,59305],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[59381,59382],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59432,59438],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[59499,59500]},{"pos":[59555,59561],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[59621,59622],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59728,59743],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[59819,59820],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59870,59876],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[59937,59938]},{"pos":[59993,59999],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[60059,60060],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60290,60303],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[60404,60415],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[60487,60488],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60515,60516],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60589,60600],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[60672,60673],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60700,60701],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60876,60885],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[60978,60985],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[61053,61054],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61081,61082],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61151,61158],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[61226,61227],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61254,61255],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61430,61447],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[61556,61571],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[61647,61648],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61675,61676],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61753,61768],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[61844,61845],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61872,61873],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62018,62024],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[62179,62185],"content":"Socket","needQuote":true,"nodes":[{"content":"Socket","pos":[0,6]}]},{"pos":[62317,62323],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[62443,62447],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[62506,62508]},{"pos":[62571,62575],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[62633,62635],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[62870,62895],"content":"IList<ArraySegment<Byte>>","needQuote":true,"nodes":[{"content":"IList&lt;ArraySegment&lt;Byte&gt;&gt;","pos":[0,25],"source":"IList<ArraySegment<Byte>>"}]},{"pos":[63175,63180],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[63259,63260],"content":"<","needQuote":true,"nodes":[]},{"pos":[63318,63330],"content":"ArraySegment","needQuote":true,"nodes":[{"content":"ArraySegment","pos":[0,12]}]},{"pos":[63396,63397],"content":"<","needQuote":true,"nodes":[]},{"pos":[63445,63449],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[63626,63631],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"content":"(Of","pos":[63711,63714]},{"pos":[63779,63791],"content":"ArraySegment","needQuote":true,"nodes":[{"content":"ArraySegment","pos":[0,12]}]},{"content":"(Of","pos":[63858,63861]},{"pos":[63916,63920],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[63978,63979],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64006,64007],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64269,64277],"content":"IList<T>","needQuote":true,"nodes":[{"content":"IList&lt;T&gt;","pos":[0,8],"source":"IList<T>"}]},{"pos":[64472,64477],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[64535,64536],"content":"<","needQuote":true,"nodes":[]},{"pos":[64563,64564],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[64678,64683],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"content":"(Of","pos":[64742,64745]},{"pos":[64779,64780],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[64807,64808],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64993,65019],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[65209,65214],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[65359,65368],"content":"Exception","needQuote":true,"nodes":[{"content":"Exception","pos":[0,9]}]},{"pos":[65560,65580],"content":"SocketAsyncOperation","needQuote":true,"nodes":[{"content":"SocketAsyncOperation","pos":[0,20]}]},{"pos":[65828,65847],"content":"IPPacketInformation","needQuote":true,"nodes":[{"content":"IPPacketInformation","pos":[0,19]}]},{"pos":[66065,66073],"content":"EndPoint","needQuote":true,"nodes":[{"content":"EndPoint","pos":[0,8]}]},{"pos":[66212,66222],"content":"System.Net","needQuote":true,"nodes":[{"content":"System.Net","pos":[0,10]}]},{"pos":[66354,66374],"content":"SendPacketsElement[]","needQuote":true,"nodes":[{"content":"SendPacketsElement[]","pos":[0,20]}]},{"pos":[66586,66604],"content":"SendPacketsElement","needQuote":true,"nodes":[{"content":"SendPacketsElement","pos":[0,18]}]},{"content":"[]","pos":[66668,66670]},{"pos":[66759,66777],"content":"SendPacketsElement","needQuote":true,"nodes":[{"content":"SendPacketsElement","pos":[0,18]}]},{"pos":[66840,66842],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[67032,67043],"content":"SocketError","needQuote":true,"nodes":[{"content":"SocketError","pos":[0,11]}]},{"pos":[67256,67267],"content":"SocketFlags","needQuote":true,"nodes":[{"content":"SocketFlags","pos":[0,11]}]},{"pos":[67514,67548],"content":"EventHandler<SocketAsyncEventArgs>","needQuote":true,"nodes":[{"content":"EventHandler&lt;SocketAsyncEventArgs&gt;","pos":[0,34],"source":"EventHandler<SocketAsyncEventArgs>"}]},{"pos":[67806,67818],"content":"EventHandler","needQuote":true,"nodes":[{"content":"EventHandler","pos":[0,12]}]},{"pos":[67884,67885],"content":"<","needQuote":true,"nodes":[]},{"pos":[67961,67981],"content":"SocketAsyncEventArgs","needQuote":true,"nodes":[{"content":"SocketAsyncEventArgs","pos":[0,20]}]},{"pos":[68120,68132],"content":"EventHandler","needQuote":true,"nodes":[{"content":"EventHandler","pos":[0,12]}]},{"content":"(Of","pos":[68199,68202]},{"pos":[68285,68305],"content":"SocketAsyncEventArgs","needQuote":true,"nodes":[{"content":"SocketAsyncEventArgs","pos":[0,20]}]},{"pos":[68370,68371],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68629,68653],"content":"EventHandler<TEventArgs>","needQuote":true,"nodes":[{"content":"EventHandler&lt;TEventArgs&gt;","pos":[0,24],"source":"EventHandler<TEventArgs>"}]},{"pos":[68843,68855],"content":"EventHandler","needQuote":true,"nodes":[{"content":"EventHandler","pos":[0,12]}]},{"pos":[68900,68901],"content":"<","needQuote":true,"nodes":[]},{"pos":[68928,68938],"content":"TEventArgs","needQuote":true,"nodes":[{"content":"TEventArgs","pos":[0,10]}]},{"pos":[69048,69060],"content":"EventHandler","needQuote":true,"nodes":[{"content":"EventHandler","pos":[0,12]}]},{"content":"(Of","pos":[69106,69109]},{"pos":[69143,69153],"content":"TEventArgs","needQuote":true,"nodes":[{"content":"TEventArgs","pos":[0,10]}]},{"pos":[69189,69190],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69423,69432],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[69535,69542],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[69594,69595],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69622,69623],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69697,69704],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[69756,69757],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69784,69785],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69986,70006],"content":"SocketAsyncEventArgs","needQuote":true,"nodes":[{"content":"SocketAsyncEventArgs","pos":[0,20]}]},{"pos":[70232,70253],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[70454,70471],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[70653,70680],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Net.Sockets.SocketAsyncEventArgs\n  commentId: T:System.Net.Sockets.SocketAsyncEventArgs\n  id: SocketAsyncEventArgs\n  parent: System.Net.Sockets\n  children:\n  - System.Net.Sockets.SocketAsyncEventArgs.#ctor\n  - System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket\n  - System.Net.Sockets.SocketAsyncEventArgs.Buffer\n  - System.Net.Sockets.SocketAsyncEventArgs.BufferList\n  - System.Net.Sockets.SocketAsyncEventArgs.BytesTransferred\n  - System.Net.Sockets.SocketAsyncEventArgs.Completed\n  - System.Net.Sockets.SocketAsyncEventArgs.ConnectByNameError\n  - System.Net.Sockets.SocketAsyncEventArgs.ConnectSocket\n  - System.Net.Sockets.SocketAsyncEventArgs.Count\n  - System.Net.Sockets.SocketAsyncEventArgs.Dispose\n  - System.Net.Sockets.SocketAsyncEventArgs.Finalize\n  - System.Net.Sockets.SocketAsyncEventArgs.LastOperation\n  - System.Net.Sockets.SocketAsyncEventArgs.Offset\n  - System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)\n  - System.Net.Sockets.SocketAsyncEventArgs.ReceiveMessageFromPacketInfo\n  - System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint\n  - System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements\n  - System.Net.Sockets.SocketAsyncEventArgs.SendPacketsSendSize\n  - System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte[],System.Int32,System.Int32)\n  - System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Int32,System.Int32)\n  - System.Net.Sockets.SocketAsyncEventArgs.SocketError\n  - System.Net.Sockets.SocketAsyncEventArgs.SocketFlags\n  - System.Net.Sockets.SocketAsyncEventArgs.UserToken\n  langs:\n  - csharp\n  - vb\n  name: SocketAsyncEventArgs\n  fullName: System.Net.Sockets.SocketAsyncEventArgs\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SocketAsyncEventArgs\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 243\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Represents an asynchronous socket operation.</p>\\n\"\n  syntax:\n    content: 'public class SocketAsyncEventArgs : EventArgs, IDisposable'\n    content.vb: >-\n      Public Class SocketAsyncEventArgs\n          Inherits EventArgs\n          Implements IDisposable\n  seealso:\n  - type: System.IAsyncResult\n    commentId: T:System.IAsyncResult\n  - type: System.Net.Sockets.Socket\n    commentId: T:System.Net.Sockets.Socket\n  - type: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  inheritance:\n  - System.Object\n  - System.EventArgs\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.EventArgs.Empty\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: SocketAsyncEventArgs\n- uid: System.Net.Sockets.SocketAsyncEventArgs.#ctor\n  commentId: M:System.Net.Sockets.SocketAsyncEventArgs.#ctor\n  id: '#ctor'\n  parent: System.Net.Sockets.SocketAsyncEventArgs\n  langs:\n  - csharp\n  - vb\n  name: SocketAsyncEventArgs()\n  fullName: System.Net.Sockets.SocketAsyncEventArgs.SocketAsyncEventArgs()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 245\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Creates an empty <xref href=\\\"System.Net.Sockets.SocketAsyncEventArgs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public SocketAsyncEventArgs()\n    content.vb: Public Sub New\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The platform is not supported. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SocketAsyncEventArgs.SocketAsyncEventArgs()\n- uid: System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket\n  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket\n  id: AcceptSocket\n  parent: System.Net.Sockets.SocketAsyncEventArgs\n  langs:\n  - csharp\n  - vb\n  name: AcceptSocket\n  fullName: System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AcceptSocket\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 246\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets the socket to use or the socket created for accepting a connection with an asynchronous socket method.</p>\\n\"\n  syntax:\n    content: public Socket AcceptSocket { get; set; }\n    content.vb: Public Property AcceptSocket As Socket\n    parameters: []\n    return:\n      type: System.Net.Sockets.Socket\n      description: \"\\n<p>The <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use or the socket created for accepting a connection with an asynchronous socket method.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SocketAsyncEventArgs.AcceptSocket\n- uid: System.Net.Sockets.SocketAsyncEventArgs.Buffer\n  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Buffer\n  id: Buffer\n  parent: System.Net.Sockets.SocketAsyncEventArgs\n  langs:\n  - csharp\n  - vb\n  name: Buffer\n  fullName: System.Net.Sockets.SocketAsyncEventArgs.Buffer\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Buffer\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 247\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets the data buffer to use with an asynchronous socket method.</p>\\n\"\n  syntax:\n    content: public byte[] Buffer { get; }\n    content.vb: Public ReadOnly Property Buffer As Byte()\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array that represents the data buffer to use with an asynchronous socket method.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte[],System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SocketAsyncEventArgs.Buffer\n- uid: System.Net.Sockets.SocketAsyncEventArgs.BufferList\n  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.BufferList\n  id: BufferList\n  parent: System.Net.Sockets.SocketAsyncEventArgs\n  langs:\n  - csharp\n  - vb\n  name: BufferList\n  fullName: System.Net.Sockets.SocketAsyncEventArgs.BufferList\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BufferList\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 248\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets an array of data buffers to use with an asynchronous socket method.</p>\\n\"\n  syntax:\n    content: public IList<ArraySegment<byte>> BufferList { get; set; }\n    content.vb: Public Property BufferList As IList(Of ArraySegment(Of Byte))\n    parameters: []\n    return:\n      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents an array of data buffers to use with an asynchronous socket method.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>There are ambiguous buffers specified on a set operation. This exception occurs if the <xref href=\\\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property has been set to a non-null value and an attempt was made to set the <xref href=\\\"System.Net.Sockets.SocketAsyncEventArgs.BufferList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property to a non-null value.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.SocketAsyncEventArgs.Buffer\n    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Buffer\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SocketAsyncEventArgs.BufferList\n- uid: System.Net.Sockets.SocketAsyncEventArgs.BytesTransferred\n  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.BytesTransferred\n  id: BytesTransferred\n  parent: System.Net.Sockets.SocketAsyncEventArgs\n  langs:\n  - csharp\n  - vb\n  name: BytesTransferred\n  fullName: System.Net.Sockets.SocketAsyncEventArgs.BytesTransferred\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BytesTransferred\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 249\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets the number of bytes transferred in the socket operation.</p>\\n\"\n  syntax:\n    content: public int BytesTransferred { get; }\n    content.vb: Public ReadOnly Property BytesTransferred As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>An <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the number of bytes transferred in the socket operation.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SocketAsyncEventArgs.BytesTransferred\n- uid: System.Net.Sockets.SocketAsyncEventArgs.ConnectByNameError\n  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.ConnectByNameError\n  id: ConnectByNameError\n  parent: System.Net.Sockets.SocketAsyncEventArgs\n  langs:\n  - csharp\n  - vb\n  name: ConnectByNameError\n  fullName: System.Net.Sockets.SocketAsyncEventArgs.ConnectByNameError\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConnectByNameError\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 250\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets the exception in the case of a connection failure when a <xref href=\\\"System.Net.DnsEndPoint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> was used.</p>\\n\"\n  syntax:\n    content: public Exception ConnectByNameError { get; }\n    content.vb: Public ReadOnly Property ConnectByNameError As Exception\n    parameters: []\n    return:\n      type: System.Exception\n      description: \"\\n<p>An <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that indicates the cause of the connection error when a <xref href=\\\"System.Net.DnsEndPoint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> was specified for the <xref href=\\\"System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SocketAsyncEventArgs.ConnectByNameError\n- uid: System.Net.Sockets.SocketAsyncEventArgs.ConnectSocket\n  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.ConnectSocket\n  id: ConnectSocket\n  parent: System.Net.Sockets.SocketAsyncEventArgs\n  langs:\n  - csharp\n  - vb\n  name: ConnectSocket\n  fullName: System.Net.Sockets.SocketAsyncEventArgs.ConnectSocket\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConnectSocket\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 251\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>The created and connected <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object after successful completion of the <xref href=\\\"System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: public Socket ConnectSocket { get; }\n    content.vb: Public ReadOnly Property ConnectSocket As Socket\n    parameters: []\n    return:\n      type: System.Net.Sockets.Socket\n      description: \"\\n<p>The connected <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SocketAsyncEventArgs.ConnectSocket\n- uid: System.Net.Sockets.SocketAsyncEventArgs.Count\n  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Count\n  id: Count\n  parent: System.Net.Sockets.SocketAsyncEventArgs\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Net.Sockets.SocketAsyncEventArgs.Count\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 252\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets the maximum amount of data, in bytes, to send or receive in an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public int Count { get; }\n    content.vb: Public ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>An <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the maximum amount of data, in bytes, to send or receive.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte[],System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SocketAsyncEventArgs.Count\n- uid: System.Net.Sockets.SocketAsyncEventArgs.LastOperation\n  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.LastOperation\n  id: LastOperation\n  parent: System.Net.Sockets.SocketAsyncEventArgs\n  langs:\n  - csharp\n  - vb\n  name: LastOperation\n  fullName: System.Net.Sockets.SocketAsyncEventArgs.LastOperation\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LastOperation\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 253\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets the type of socket operation most recently performed with this context object.</p>\\n\"\n  syntax:\n    content: public SocketAsyncOperation LastOperation { get; }\n    content.vb: Public ReadOnly Property LastOperation As SocketAsyncOperation\n    parameters: []\n    return:\n      type: System.Net.Sockets.SocketAsyncOperation\n      description: \"\\n<p>A <xref href=\\\"System.Net.Sockets.SocketAsyncOperation\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance that indicates the type of socket operation most recently performed with this context object.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.SocketAsyncOperation\n    commentId: T:System.Net.Sockets.SocketAsyncOperation\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SocketAsyncEventArgs.LastOperation\n- uid: System.Net.Sockets.SocketAsyncEventArgs.Offset\n  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Offset\n  id: Offset\n  parent: System.Net.Sockets.SocketAsyncEventArgs\n  langs:\n  - csharp\n  - vb\n  name: Offset\n  fullName: System.Net.Sockets.SocketAsyncEventArgs.Offset\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Offset\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 254\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets the offset, in bytes, into the data buffer referenced by the <xref href=\\\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property.</p>\\n\"\n  syntax:\n    content: public int Offset { get; }\n    content.vb: Public ReadOnly Property Offset As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>An <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the offset, in bytes, into the data buffer referenced by the <xref href=\\\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.SocketAsyncEventArgs.Buffer\n    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Buffer\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SocketAsyncEventArgs.Offset\n- uid: System.Net.Sockets.SocketAsyncEventArgs.ReceiveMessageFromPacketInfo\n  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.ReceiveMessageFromPacketInfo\n  id: ReceiveMessageFromPacketInfo\n  parent: System.Net.Sockets.SocketAsyncEventArgs\n  langs:\n  - csharp\n  - vb\n  name: ReceiveMessageFromPacketInfo\n  fullName: System.Net.Sockets.SocketAsyncEventArgs.ReceiveMessageFromPacketInfo\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReceiveMessageFromPacketInfo\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 255\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets the IP address and interface of a received packet.</p>\\n\"\n  syntax:\n    content: public IPPacketInformation ReceiveMessageFromPacketInfo { get; }\n    content.vb: Public ReadOnly Property ReceiveMessageFromPacketInfo As IPPacketInformation\n    parameters: []\n    return:\n      type: System.Net.Sockets.IPPacketInformation\n      description: \"\\n<p>An <xref href=\\\"System.Net.Sockets.IPPacketInformation\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance that contains the destination IP address and interface of a received packet.</p>\\n\"\n  seealso:\n  - type: System.Net.IPAddress\n    commentId: T:System.Net.IPAddress\n  - type: System.Net.Sockets.IPPacketInformation\n    commentId: T:System.Net.Sockets.IPPacketInformation\n  - type: System.Net.Sockets.IPPacketInformation.Address\n    commentId: P:System.Net.Sockets.IPPacketInformation.Address\n  - type: System.Net.Sockets.IPPacketInformation.Interface\n    commentId: P:System.Net.Sockets.IPPacketInformation.Interface\n  - type: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SocketAsyncEventArgs.ReceiveMessageFromPacketInfo\n- uid: System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint\n  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint\n  id: RemoteEndPoint\n  parent: System.Net.Sockets.SocketAsyncEventArgs\n  langs:\n  - csharp\n  - vb\n  name: RemoteEndPoint\n  fullName: System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoteEndPoint\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 256\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets the remote IP endpoint for an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public EndPoint RemoteEndPoint { get; set; }\n    content.vb: Public Property RemoteEndPoint As EndPoint\n    parameters: []\n    return:\n      type: System.Net.EndPoint\n      description: \"\\n<p>An <xref href=\\\"System.Net.EndPoint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the remote IP endpoint for an asynchronous operation.</p>\\n\"\n  seealso:\n  - type: System.Net.EndPoint\n    commentId: T:System.Net.EndPoint\n  - type: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SocketAsyncEventArgs.RemoteEndPoint\n- uid: System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements\n  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements\n  id: SendPacketsElements\n  parent: System.Net.Sockets.SocketAsyncEventArgs\n  langs:\n  - csharp\n  - vb\n  name: SendPacketsElements\n  fullName: System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SendPacketsElements\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 257\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets an array of buffers to be sent for an asynchronous operation used by the <xref href=\\\"System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: public SendPacketsElement[] SendPacketsElements { get; set; }\n    content.vb: Public Property SendPacketsElements As SendPacketsElement()\n    parameters: []\n    return:\n      type: System.Net.Sockets.SendPacketsElement[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Net.Sockets.SendPacketsElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects that represent an array of buffers to be sent.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.SendPacketsElement\n    commentId: T:System.Net.Sockets.SendPacketsElement\n  - type: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SocketAsyncEventArgs.SendPacketsElements\n- uid: System.Net.Sockets.SocketAsyncEventArgs.SendPacketsSendSize\n  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsSendSize\n  id: SendPacketsSendSize\n  parent: System.Net.Sockets.SocketAsyncEventArgs\n  langs:\n  - csharp\n  - vb\n  name: SendPacketsSendSize\n  fullName: System.Net.Sockets.SocketAsyncEventArgs.SendPacketsSendSize\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SendPacketsSendSize\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 258\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets the size, in bytes, of the data block used in the send operation.</p>\\n\"\n  syntax:\n    content: public int SendPacketsSendSize { get; set; }\n    content.vb: Public Property SendPacketsSendSize As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>An <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the size, in bytes, of the data block used in the send operation.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.SendPacketsElement.EndOfPacket\n    commentId: P:System.Net.Sockets.SendPacketsElement.EndOfPacket\n  - type: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SocketAsyncEventArgs.SendPacketsSendSize\n- uid: System.Net.Sockets.SocketAsyncEventArgs.SocketError\n  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.SocketError\n  id: SocketError\n  parent: System.Net.Sockets.SocketAsyncEventArgs\n  langs:\n  - csharp\n  - vb\n  name: SocketError\n  fullName: System.Net.Sockets.SocketAsyncEventArgs.SocketError\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SocketError\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 259\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets the result of the asynchronous socket operation.</p>\\n\"\n  syntax:\n    content: public SocketError SocketError { get; set; }\n    content.vb: Public Property SocketError As SocketError\n    parameters: []\n    return:\n      type: System.Net.Sockets.SocketError\n      description: \"\\n<p>A <xref href=\\\"System.Net.Sockets.SocketError\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the result of the asynchronous socket operation.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.SocketError\n    commentId: T:System.Net.Sockets.SocketError\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SocketAsyncEventArgs.SocketError\n- uid: System.Net.Sockets.SocketAsyncEventArgs.SocketFlags\n  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags\n  id: SocketFlags\n  parent: System.Net.Sockets.SocketAsyncEventArgs\n  langs:\n  - csharp\n  - vb\n  name: SocketFlags\n  fullName: System.Net.Sockets.SocketAsyncEventArgs.SocketFlags\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SocketFlags\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 260\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets the results of an asynchronous socket operation or sets the behavior of an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public SocketFlags SocketFlags { get; set; }\n    content.vb: Public Property SocketFlags As SocketFlags\n    parameters: []\n    return:\n      type: System.Net.Sockets.SocketFlags\n      description: \"\\n<p>A <xref href=\\\"System.Net.Sockets.SocketFlags\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the results of an asynchronous socket operation.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.SocketFlags\n    commentId: T:System.Net.Sockets.SocketFlags\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SocketAsyncEventArgs.SocketFlags\n- uid: System.Net.Sockets.SocketAsyncEventArgs.UserToken\n  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.UserToken\n  id: UserToken\n  parent: System.Net.Sockets.SocketAsyncEventArgs\n  langs:\n  - csharp\n  - vb\n  name: UserToken\n  fullName: System.Net.Sockets.SocketAsyncEventArgs.UserToken\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UserToken\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 261\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets a user or application object associated with this asynchronous socket operation.</p>\\n\"\n  syntax:\n    content: public object UserToken { get; set; }\n    content.vb: Public Property UserToken As Object\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>An object that represents the user or application object associated with this asynchronous socket operation.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SocketAsyncEventArgs.UserToken\n- uid: System.Net.Sockets.SocketAsyncEventArgs.Completed\n  commentId: E:System.Net.Sockets.SocketAsyncEventArgs.Completed\n  id: Completed\n  parent: System.Net.Sockets.SocketAsyncEventArgs\n  langs:\n  - csharp\n  - vb\n  name: Completed\n  fullName: System.Net.Sockets.SocketAsyncEventArgs.Completed\n  type: Event\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Completed\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 262\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>The event used to complete an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public event EventHandler<SocketAsyncEventArgs> Completed\n    content.vb: Public Event Completed As EventHandler(Of SocketAsyncEventArgs)\n    return:\n      type: System.EventHandler{System.Net.Sockets.SocketAsyncEventArgs}\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SocketAsyncEventArgs.Completed\n- uid: System.Net.Sockets.SocketAsyncEventArgs.Dispose\n  commentId: M:System.Net.Sockets.SocketAsyncEventArgs.Dispose\n  id: Dispose\n  parent: System.Net.Sockets.SocketAsyncEventArgs\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Net.Sockets.SocketAsyncEventArgs.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 263\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.Net.Sockets.SocketAsyncEventArgs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance and optionally disposes of the managed resources.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  seealso:\n  - type: System.Object.Finalize\n    commentId: M:System.Object.Finalize\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SocketAsyncEventArgs.Dispose()\n- uid: System.Net.Sockets.SocketAsyncEventArgs.Finalize\n  commentId: M:System.Net.Sockets.SocketAsyncEventArgs.Finalize\n  id: Finalize\n  parent: System.Net.Sockets.SocketAsyncEventArgs\n  langs:\n  - csharp\n  - vb\n  name: Finalize()\n  fullName: System.Net.Sockets.SocketAsyncEventArgs.Finalize()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Finalize\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 264\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Frees resources used by the <xref href=\\\"System.Net.Sockets.SocketAsyncEventArgs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected void Finalize()\n    content.vb: Protected Sub Finalize\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: SocketAsyncEventArgs.Finalize()\n- uid: System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)\n  commentId: M:System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)\n  id: OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)\n  parent: System.Net.Sockets.SocketAsyncEventArgs\n  langs:\n  - csharp\n  - vb\n  name: OnCompleted(SocketAsyncEventArgs)\n  fullName: System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OnCompleted\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 265\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Represents a method that is called when an asynchronous operation completes.</p>\\n\"\n  syntax:\n    content: protected virtual void OnCompleted(SocketAsyncEventArgs e)\n    content.vb: Protected Overridable Sub OnCompleted(e As SocketAsyncEventArgs)\n    parameters:\n    - id: e\n      type: System.Net.Sockets.SocketAsyncEventArgs\n      description: \"\\n<p>The event that is signaled.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  - type: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)\n    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: SocketAsyncEventArgs.OnCompleted(SocketAsyncEventArgs)\n- uid: System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte[],System.Int32,System.Int32)\n  id: SetBuffer(System.Byte[],System.Int32,System.Int32)\n  parent: System.Net.Sockets.SocketAsyncEventArgs\n  langs:\n  - csharp\n  - vb\n  name: SetBuffer(Byte[], Int32, Int32)\n  fullName: System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetBuffer\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 266\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Sets the data buffer to use with an asynchronous socket method.</p>\\n\"\n  syntax:\n    content: public void SetBuffer(byte[] buffer, int offset, int count)\n    content.vb: Public Sub SetBuffer(buffer As Byte(), offset As Integer, count As Integer)\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>The data buffer to use with an asynchronous socket method.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset, in bytes, in the data buffer where the operation starts.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum amount of data, in bytes, to send or receive in the buffer.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>There are ambiguous buffers specified. This exception occurs if the <xref href=\\\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is also not null and the <xref href=\\\"System.Net.Sockets.SocketAsyncEventArgs.BufferList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is also not null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>An argument was out of range. This exception occurs if the <em>offset</em> parameter is less than zero or greater than the length of the array in the <xref href=\\\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property. This exception also occurs if the <em>count</em> parameter is less than zero or greater than the length of the array in the <xref href=\\\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property minus the <em>offset</em> parameter.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.SocketAsyncEventArgs.Buffer\n    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Buffer\n  - type: System.Net.Sockets.SocketAsyncEventArgs.Count\n    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Count\n  - type: System.Net.Sockets.SocketAsyncEventArgs.Offset\n    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Offset\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte(), System.Int32, System.Int32)\n  name.vb: SetBuffer(Byte(), Int32, Int32)\n  nameWithType: SocketAsyncEventArgs.SetBuffer(Byte[], Int32, Int32)\n  nameWithType.vb: SocketAsyncEventArgs.SetBuffer(Byte(), Int32, Int32)\n- uid: System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Int32,System.Int32)\n  commentId: M:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Int32,System.Int32)\n  id: SetBuffer(System.Int32,System.Int32)\n  parent: System.Net.Sockets.SocketAsyncEventArgs\n  langs:\n  - csharp\n  - vb\n  name: SetBuffer(Int32, Int32)\n  fullName: System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetBuffer\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 267\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Sets the data buffer to use with an asynchronous socket method.</p>\\n\"\n  syntax:\n    content: public void SetBuffer(int offset, int count)\n    content.vb: Public Sub SetBuffer(offset As Integer, count As Integer)\n    parameters:\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset, in bytes, in the data buffer where the operation starts.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum amount of data, in bytes, to send or receive in the buffer.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>An argument was out of range. This exception occurs if the <em>offset</em> parameter is less than zero or greater than the length of the array in the <xref href=\\\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property. This exception also occurs if the <em>count</em> parameter is less than zero or greater than the length of the array in the <xref href=\\\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property minus the <em>offset</em> parameter.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.SocketAsyncEventArgs.Buffer\n    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Buffer\n  - type: System.Net.Sockets.SocketAsyncEventArgs.Count\n    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Count\n  - type: System.Net.Sockets.SocketAsyncEventArgs.Offset\n    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Offset\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SocketAsyncEventArgs.SetBuffer(Int32, Int32)\nreferences:\n- uid: System.Net.Sockets\n  isExternal: false\n  name: System.Net.Sockets\n  fullName: System.Net.Sockets\n  commentId: N:System.Net.Sockets\n  nameWithType: System.Net.Sockets\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.EventArgs\n  parent: System\n  isExternal: false\n  name: EventArgs\n  fullName: System.EventArgs\n  commentId: T:System.EventArgs\n  nameWithType: EventArgs\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.EventArgs.Empty\n  parent: System.EventArgs\n  isExternal: true\n  name: Empty\n  fullName: System.EventArgs.Empty\n  commentId: F:System.EventArgs.Empty\n  nameWithType: EventArgs.Empty\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Net.Sockets.Socket\n  parent: System.Net.Sockets\n  isExternal: false\n  name: Socket\n  fullName: System.Net.Sockets.Socket\n  commentId: T:System.Net.Sockets.Socket\n  nameWithType: Socket\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IList`1\n  name: IList<ArraySegment<Byte>>\n  fullName: System.Collections.Generic.IList<System.ArraySegment<System.Byte>>\n  fullname.vb: System.Collections.Generic.IList(Of System.ArraySegment(Of System.Byte))\n  name.vb: IList(Of ArraySegment(Of Byte))\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    fullName: System.Collections.Generic.IList\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.ArraySegment`1\n    name: ArraySegment\n    fullName: System.ArraySegment\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    fullName: System.Collections.Generic.IList\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.ArraySegment`1\n    name: ArraySegment\n    fullName: System.ArraySegment\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n  nameWithType: IList<ArraySegment<Byte>>\n  nameWithType.vb: IList(Of ArraySegment(Of Byte))\n- uid: System.Collections.Generic.IList`1\n  isExternal: false\n  name: IList<T>\n  fullName: System.Collections.Generic.IList<T>\n  fullname.vb: System.Collections.Generic.IList(Of T)\n  name.vb: IList(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    fullName: System.Collections.Generic.IList\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    fullName: System.Collections.Generic.IList\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IList`1\n  nameWithType: IList<T>\n  nameWithType.vb: IList(Of T)\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n  nameWithType: System.Collections.Generic\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  fullName: System.Exception\n  commentId: T:System.Exception\n  nameWithType: Exception\n- uid: System.Net.Sockets.SocketAsyncOperation\n  parent: System.Net.Sockets\n  isExternal: false\n  name: SocketAsyncOperation\n  fullName: System.Net.Sockets.SocketAsyncOperation\n  commentId: T:System.Net.Sockets.SocketAsyncOperation\n  nameWithType: SocketAsyncOperation\n- uid: System.Net.Sockets.IPPacketInformation\n  parent: System.Net.Sockets\n  isExternal: false\n  name: IPPacketInformation\n  fullName: System.Net.Sockets.IPPacketInformation\n  commentId: T:System.Net.Sockets.IPPacketInformation\n  nameWithType: IPPacketInformation\n- uid: System.Net.EndPoint\n  parent: System.Net\n  isExternal: false\n  name: EndPoint\n  fullName: System.Net.EndPoint\n  commentId: T:System.Net.EndPoint\n  nameWithType: EndPoint\n- uid: System.Net\n  isExternal: false\n  name: System.Net\n  fullName: System.Net\n  commentId: N:System.Net\n  nameWithType: System.Net\n- uid: System.Net.Sockets.SendPacketsElement[]\n  name: SendPacketsElement[]\n  fullName: System.Net.Sockets.SendPacketsElement[]\n  fullname.vb: System.Net.Sockets.SendPacketsElement()\n  name.vb: SendPacketsElement()\n  spec.csharp:\n  - uid: System.Net.Sockets.SendPacketsElement\n    name: SendPacketsElement\n    fullName: System.Net.Sockets.SendPacketsElement\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Net.Sockets.SendPacketsElement\n    name: SendPacketsElement\n    fullName: System.Net.Sockets.SendPacketsElement\n  - name: ()\n    fullName: ()\n  nameWithType: SendPacketsElement[]\n  nameWithType.vb: SendPacketsElement()\n- uid: System.Net.Sockets.SocketError\n  parent: System.Net.Sockets\n  isExternal: false\n  name: SocketError\n  fullName: System.Net.Sockets.SocketError\n  commentId: T:System.Net.Sockets.SocketError\n  nameWithType: SocketError\n- uid: System.Net.Sockets.SocketFlags\n  parent: System.Net.Sockets\n  isExternal: false\n  name: SocketFlags\n  fullName: System.Net.Sockets.SocketFlags\n  commentId: T:System.Net.Sockets.SocketFlags\n  nameWithType: SocketFlags\n- uid: System.EventHandler{System.Net.Sockets.SocketAsyncEventArgs}\n  parent: System\n  definition: System.EventHandler`1\n  name: EventHandler<SocketAsyncEventArgs>\n  fullName: System.EventHandler<System.Net.Sockets.SocketAsyncEventArgs>\n  fullname.vb: System.EventHandler(Of System.Net.Sockets.SocketAsyncEventArgs)\n  name.vb: EventHandler(Of SocketAsyncEventArgs)\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    fullName: System.EventHandler\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Net.Sockets.SocketAsyncEventArgs\n    name: SocketAsyncEventArgs\n    fullName: System.Net.Sockets.SocketAsyncEventArgs\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    fullName: System.EventHandler\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Net.Sockets.SocketAsyncEventArgs\n    name: SocketAsyncEventArgs\n    fullName: System.Net.Sockets.SocketAsyncEventArgs\n  - name: )\n    fullName: )\n  commentId: T:System.EventHandler{System.Net.Sockets.SocketAsyncEventArgs}\n  nameWithType: EventHandler<SocketAsyncEventArgs>\n  nameWithType.vb: EventHandler(Of SocketAsyncEventArgs)\n- uid: System.EventHandler`1\n  isExternal: false\n  name: EventHandler<TEventArgs>\n  fullName: System.EventHandler<TEventArgs>\n  fullname.vb: System.EventHandler(Of TEventArgs)\n  name.vb: EventHandler(Of TEventArgs)\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    fullName: System.EventHandler\n  - name: <\n    fullName: <\n  - name: TEventArgs\n    fullName: TEventArgs\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    fullName: System.EventHandler\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TEventArgs\n    fullName: TEventArgs\n  - name: )\n    fullName: )\n  commentId: T:System.EventHandler`1\n  nameWithType: EventHandler<TEventArgs>\n  nameWithType.vb: EventHandler(Of TEventArgs)\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.IDisposable.Dispose\n  nameWithType: IDisposable.Dispose()\n- uid: System.Net.Sockets.SocketAsyncEventArgs\n  parent: System.Net.Sockets\n  isExternal: false\n  name: SocketAsyncEventArgs\n  fullName: System.Net.Sockets.SocketAsyncEventArgs\n  commentId: T:System.Net.Sockets.SocketAsyncEventArgs\n  nameWithType: SocketAsyncEventArgs\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}