{"nodes":[{"pos":[693,701],"content":"Delegate","needQuote":true,"nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[2202,2208],"content":"Target","needQuote":true,"nodes":[{"content":"Target","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The object on which the current delegate invokes the instance method, if the delegate represents an instance method; &lt;strong&gt;null&lt;/strong&gt; if the delegate represents a static method.&lt;/p&gt;\\n","pos":[2830,3023],"source":"\\n<p>The object on which the current delegate invokes the instance method, if the delegate represents an instance method; <strong>null</strong> if the delegate represents a static method.</p>\\n"},{"pos":[3512,3539],"content":"Combine(Delegate, Delegate)","needQuote":true,"nodes":[{"content":"Combine(Delegate, Delegate)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The delegate whose invocation list comes first.","pos":[4215,4267],"source":"\\n<p>The delegate whose invocation list comes first."},{"content":"&lt;/p&gt;\\n","pos":[4268,4274],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The delegate whose invocation list comes last.","pos":[4336,4387],"source":"\\n<p>The delegate whose invocation list comes last."},{"content":"&lt;/p&gt;\\n","pos":[4388,4394],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A new delegate with an invocation list that concatenates the invocation lists of &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; in that order.","pos":[4456,4582],"source":"\\n<p>A new delegate with an invocation list that concatenates the invocation lists of <em>a</em> and <em>b</em> in that order."},{"content":"Returns &lt;em&gt;a&lt;/em&gt; if &lt;em&gt;b&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;, returns &lt;em&gt;b&lt;/em&gt; if &lt;em&gt;a&lt;/em&gt; is a null reference, and returns a null reference if both &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; are null references.&lt;/p&gt;\\n","pos":[4583,4785],"source":" Returns <em>a</em> if <em>b</em> is <strong>null</strong>, returns <em>b</em> if <em>a</em> is a null reference, and returns a null reference if both <em>a</em> and <em>b</em> are null references.</p>\\n"},{"content":"\\n&lt;p&gt;Both &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; are not &lt;strong&gt;null&lt;/strong&gt;, and &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; are not instances of the same delegate type.","pos":[4896,5037],"source":"\\n<p>Both <em>a</em> and <em>b</em> are not <strong>null</strong>, and <em>a</em> and <em>b</em> are not instances of the same delegate type."},{"content":"&lt;/p&gt;\\n","pos":[5038,5044],"source":" </p>\\n"},{"pos":[5718,5737],"content":"Combine(Delegate[])","needQuote":true,"nodes":[{"content":"Combine(Delegate[])","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The array of delegates to combine.","pos":[6482,6521],"source":"\\n<p>The array of delegates to combine."},{"content":"&lt;/p&gt;\\n","pos":[6522,6528],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A new delegate with an invocation list that concatenates the invocation lists of the delegates in the &lt;em&gt;delegates&lt;/em&gt; array.","pos":[6590,6722],"source":"\\n<p>A new delegate with an invocation list that concatenates the invocation lists of the delegates in the <em>delegates</em> array."},{"content":"Returns &lt;strong&gt;null&lt;/strong&gt; if &lt;em&gt;delegates&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;, if &lt;em&gt;delegates&lt;/em&gt; contains zero elements, or if every entry in &lt;em&gt;delegates&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[6723,6918],"source":" Returns <strong>null</strong> if <em>delegates</em> is <strong>null</strong>, if <em>delegates</em> contains zero elements, or if every entry in <em>delegates</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;Not all the non-null entries in &lt;em&gt;delegates&lt;/em&gt; are instances of the same delegate type.","pos":[7029,7125],"source":"\\n<p>Not all the non-null entries in <em>delegates</em> are instances of the same delegate type."},{"content":"&lt;/p&gt;\\n","pos":[7126,7132],"source":" </p>\\n"},{"pos":[7947,7970],"content":"DynamicInvoke(Object[])","needQuote":true,"nodes":[{"content":"DynamicInvoke(Object[])","pos":[0,23]}]},{"content":"\\n&lt;p&gt;An array of objects that are the arguments to pass to the method represented by the current delegate.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;strong&gt;null&lt;/strong&gt;, if the method represented by the current delegate does not require arguments.","pos":[8668,8899],"source":"\\n<p>An array of objects that are the arguments to pass to the method represented by the current delegate.</p>\\n<p>-or- </p>\\n<p>\\n<strong>null</strong>, if the method represented by the current delegate does not require arguments."},{"content":"&lt;/p&gt;\\n","pos":[8900,8906],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The object returned by the method represented by the delegate.&lt;/p&gt;\\n","pos":[8966,9039],"source":"\\n<p>The object returned by the method represented by the delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have access to the method represented by the delegate (for example, if the method is private).&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The number, order, or type of parameters listed in &lt;em&gt;args&lt;/em&gt; is invalid.","pos":[9158,9376],"source":"\\n<p>The caller does not have access to the method represented by the delegate (for example, if the method is private).</p>\\n<p>-or- </p>\\n<p>The number, order, or type of parameters listed in <em>args</em> is invalid."},{"content":"&lt;/p&gt;\\n","pos":[9377,9383],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The method represented by the delegate is invoked on an object or a class that does not support it.","pos":[9480,9584],"source":"\\n<p>The method represented by the delegate is invoked on an object or a class that does not support it."},{"content":"&lt;/p&gt;\\n","pos":[9585,9591],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The method represented by the delegate is an instance method and the target object is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;One of the encapsulated methods throws an exception.","pos":[9726,9914],"source":"\\n<p>The method represented by the delegate is an instance method and the target object is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>One of the encapsulated methods throws an exception."},{"content":"&lt;/p&gt;\\n","pos":[9915,9921],"source":" </p>\\n"},{"pos":[10693,10707],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare with the current delegate.","pos":[11507,11560],"source":"\\n<p>The object to compare with the current delegate."},{"content":"&lt;/p&gt;\\n","pos":[11561,11567],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;obj&lt;/em&gt; and the current delegate have the same targets, methods, and invocation list; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[11628,11791],"source":"\\n<p>\\n<strong>true</strong> if <em>obj</em> and the current delegate have the same targets, methods, and invocation list; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have access to the method represented by the delegate (for example, if the method is private).","pos":[11960,12079],"source":"\\n<p>The caller does not have access to the method represented by the delegate (for example, if the method is private)."},{"content":"&lt;/p&gt;\\n","pos":[12080,12086],"source":" </p>\\n"},{"pos":[12568,12581],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A hash code for the delegate.&lt;/p&gt;\\n","pos":[13159,13199],"source":"\\n<p>A hash code for the delegate.</p>\\n"},{"pos":[13762,13781],"content":"GetInvocationList()","needQuote":true,"nodes":[{"content":"GetInvocationList()","pos":[0,19]}]},{"content":"\\n&lt;p&gt;An array of delegates representing the invocation list of the current delegate.&lt;/p&gt;\\n","pos":[14398,14488],"source":"\\n<p>An array of delegates representing the invocation list of the current delegate.</p>\\n"},{"pos":[15009,15037],"content":"Equality(Delegate, Delegate)","needQuote":true,"nodes":[{"content":"Equality(Delegate, Delegate)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The first delegate to compare.","pos":[15726,15761],"source":"\\n<p>The first delegate to compare."},{"content":"&lt;/p&gt;\\n","pos":[15762,15768],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second delegate to compare.","pos":[15831,15867],"source":"\\n<p>The second delegate to compare."},{"content":"&lt;/p&gt;\\n","pos":[15868,15874],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;d1&lt;/em&gt; is equal to &lt;em&gt;d2&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[15935,16044],"source":"\\n<p>\\n<strong>true</strong> if <em>d1</em> is equal to <em>d2</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[16688,16718],"content":"Inequality(Delegate, Delegate)","needQuote":true,"nodes":[{"content":"Inequality(Delegate, Delegate)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The first delegate to compare.","pos":[17416,17451],"source":"\\n<p>The first delegate to compare."},{"content":"&lt;/p&gt;\\n","pos":[17452,17458],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second delegate to compare.","pos":[17521,17557],"source":"\\n<p>The second delegate to compare."},{"content":"&lt;/p&gt;\\n","pos":[17558,17564],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;d1&lt;/em&gt; is not equal to &lt;em&gt;d2&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17625,17738],"source":"\\n<p>\\n<strong>true</strong> if <em>d1</em> is not equal to <em>d2</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[18363,18389],"content":"Remove(Delegate, Delegate)","needQuote":true,"nodes":[{"content":"Remove(Delegate, Delegate)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The delegate from which to remove the invocation list of &lt;em&gt;value&lt;/em&gt;.","pos":[19206,19283],"source":"\\n<p>The delegate from which to remove the invocation list of <em>value</em>."},{"content":"&lt;/p&gt;\\n","pos":[19284,19290],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The delegate that supplies the invocation list to remove from the invocation list of &lt;em&gt;source&lt;/em&gt;.","pos":[19356,19462],"source":"\\n<p>The delegate that supplies the invocation list to remove from the invocation list of <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[19463,19469],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A new delegate with an invocation list formed by taking the invocation list of &lt;em&gt;source&lt;/em&gt; and removing the last occurrence of the invocation list of &lt;em&gt;value&lt;/em&gt;, if the invocation list of &lt;em&gt;value&lt;/em&gt; is found within the invocation list of &lt;em&gt;source&lt;/em&gt;.","pos":[19531,19802],"source":"\\n<p>A new delegate with an invocation list formed by taking the invocation list of <em>source</em> and removing the last occurrence of the invocation list of <em>value</em>, if the invocation list of <em>value</em> is found within the invocation list of <em>source</em>."},{"content":"Returns &lt;em&gt;source&lt;/em&gt; if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; or if the invocation list of &lt;em&gt;value&lt;/em&gt; is not found within the invocation list of &lt;em&gt;source&lt;/em&gt;.","pos":[19803,19973],"source":" Returns <em>source</em> if <em>value</em> is <strong>null</strong> or if the invocation list of <em>value</em> is not found within the invocation list of <em>source</em>."},{"content":"Returns a null reference if the invocation list of &lt;em&gt;value&lt;/em&gt; is equal to the invocation list of &lt;em&gt;source&lt;/em&gt; or if &lt;em&gt;source&lt;/em&gt; is a null reference.&lt;/p&gt;\\n","pos":[19974,20139],"source":" Returns a null reference if the invocation list of <em>value</em> is equal to the invocation list of <em>source</em> or if <em>source</em> is a null reference.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have access to the method represented by the delegate (for example, if the method is private).","pos":[20258,20377],"source":"\\n<p>The caller does not have access to the method represented by the delegate (for example, if the method is private)."},{"content":"&lt;/p&gt;\\n","pos":[20378,20384],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The delegate types do not match.&lt;/p&gt;\\n","pos":[20481,20524],"source":"\\n<p>The delegate types do not match.</p>\\n"},{"pos":[21414,21443],"content":"RemoveAll(Delegate, Delegate)","needQuote":true,"nodes":[{"content":"RemoveAll(Delegate, Delegate)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The delegate from which to remove the invocation list of &lt;em&gt;value&lt;/em&gt;.","pos":[22205,22282],"source":"\\n<p>The delegate from which to remove the invocation list of <em>value</em>."},{"content":"&lt;/p&gt;\\n","pos":[22283,22289],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The delegate that supplies the invocation list to remove from the invocation list of &lt;em&gt;source&lt;/em&gt;.","pos":[22355,22461],"source":"\\n<p>The delegate that supplies the invocation list to remove from the invocation list of <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[22462,22468],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A new delegate with an invocation list formed by taking the invocation list of &lt;em&gt;source&lt;/em&gt; and removing all occurrences of the invocation list of &lt;em&gt;value&lt;/em&gt;, if the invocation list of &lt;em&gt;value&lt;/em&gt; is found within the invocation list of &lt;em&gt;source&lt;/em&gt;.","pos":[22530,22797],"source":"\\n<p>A new delegate with an invocation list formed by taking the invocation list of <em>source</em> and removing all occurrences of the invocation list of <em>value</em>, if the invocation list of <em>value</em> is found within the invocation list of <em>source</em>."},{"content":"Returns &lt;em&gt;source&lt;/em&gt; if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; or if the invocation list of &lt;em&gt;value&lt;/em&gt; is not found within the invocation list of &lt;em&gt;source&lt;/em&gt;.","pos":[22798,22968],"source":" Returns <em>source</em> if <em>value</em> is <strong>null</strong> or if the invocation list of <em>value</em> is not found within the invocation list of <em>source</em>."},{"content":"Returns a null reference if the invocation list of &lt;em&gt;value&lt;/em&gt; is equal to the invocation list of &lt;em&gt;source&lt;/em&gt;, if &lt;em&gt;source&lt;/em&gt; contains only a series of invocation lists that are equal to the invocation list of &lt;em&gt;value&lt;/em&gt;, or if &lt;em&gt;source&lt;/em&gt; is a null reference.&lt;/p&gt;\\n","pos":[22969,23254],"source":" Returns a null reference if the invocation list of <em>value</em> is equal to the invocation list of <em>source</em>, if <em>source</em> contains only a series of invocation lists that are equal to the invocation list of <em>value</em>, or if <em>source</em> is a null reference.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have access to the method represented by the delegate (for example, if the method is private).","pos":[23373,23492],"source":"\\n<p>The caller does not have access to the method represented by the delegate (for example, if the method is private)."},{"content":"&lt;/p&gt;\\n","pos":[23493,23499],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The delegate types do not match.&lt;/p&gt;\\n","pos":[23596,23639],"source":"\\n<p>The delegate types do not match.</p>\\n"},{"pos":[24330,24336],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[24467,24473],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24633,24643],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[24738,24746],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[24815,24816],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24843,24844],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24914,24922],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[24991,24992],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25019,25020],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25217,25239],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[25387,25393],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25460,25461],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25511,25517],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25578,25579]},{"pos":[25634,25640],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25700,25701],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25798,25804],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25871,25872],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25922,25928],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25989,25990]},{"pos":[26045,26051],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26111,26112],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26357,26388],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[26554,26569],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[26645,26646],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26696,26702],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26763,26764]},{"pos":[26819,26825],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26885,26886],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26992,27007],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[27083,27084],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27134,27140],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27201,27202]},{"pos":[27257,27263],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27323,27324],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27550,27559],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[27652,27659],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[27727,27728],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27755,27756],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27825,27832],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[27900,27901],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27928,27929],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28104,28121],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[28230,28245],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[28321,28322],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28349,28350],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28427,28442],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[28518,28519],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28546,28547],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28718,28726],"content":"Delegate","needQuote":true,"nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[28844,28854],"content":"Delegate[]","needQuote":true,"nodes":[{"content":"Delegate[]","pos":[0,10]}]},{"pos":[28990,28998],"content":"Delegate","needQuote":true,"nodes":[{"content":"Delegate","pos":[0,8]}]},{"content":"[]","pos":[29040,29042]},{"pos":[29109,29117],"content":"Delegate","needQuote":true,"nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[29158,29160],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[29266,29274],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[29402,29408],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[29469,29471]},{"pos":[29536,29542],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29602,29604],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[29769,29783],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[29902,29908],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29975,29976],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30026,30032],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30092,30093],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30176,30182],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[30249,30250],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30300,30306],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30366,30367],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30540,30547],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[30713,30726],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[30827,30838],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[30910,30911],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30938,30939],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31012,31023],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[31095,31096],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31123,31124],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31284,31289],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[31442,31459],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[31652,31673],"content":"MemberAccessException","needQuote":true,"nodes":[{"content":"MemberAccessException","pos":[0,21]}]},{"pos":[31876,31901],"content":"TargetInvocationException","needQuote":true,"nodes":[{"content":"TargetInvocationException","pos":[0,25]}]}],"content":"items:\n- uid: System.Delegate\n  commentId: T:System.Delegate\n  id: Delegate\n  parent: System\n  children:\n  - System.Delegate.Combine(System.Delegate,System.Delegate)\n  - System.Delegate.Combine(System.Delegate[])\n  - System.Delegate.DynamicInvoke(System.Object[])\n  - System.Delegate.Equals(System.Object)\n  - System.Delegate.GetHashCode\n  - System.Delegate.GetInvocationList\n  - System.Delegate.op_Equality(System.Delegate,System.Delegate)\n  - System.Delegate.op_Inequality(System.Delegate,System.Delegate)\n  - System.Delegate.Remove(System.Delegate,System.Delegate)\n  - System.Delegate.RemoveAll(System.Delegate,System.Delegate)\n  - System.Delegate.Target\n  langs:\n  - csharp\n  - vb\n  name: Delegate\n  fullName: System.Delegate\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Delegate.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Delegate\n    path: src/mscorlib/src/System/Delegate.cs\n    startLine: 16\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ClassInterface(ClassInterfaceType.AutoDual)]\n\n      [ComVisible(true)]\n\n      public abstract class Delegate : ICloneable, ISerializable\n    content.vb: >-\n      <Serializable>\n\n      <ClassInterface(ClassInterfaceType.AutoDual)>\n\n      <ComVisible(True)>\n\n      Public MustInherit Class Delegate\n          Implements ICloneable, ISerializable\n  seealso:\n  - type: System.MulticastDelegate\n    commentId: T:System.MulticastDelegate\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: Delegate\n- uid: System.Delegate.Target\n  commentId: P:System.Delegate.Target\n  id: Target\n  parent: System.Delegate\n  langs:\n  - csharp\n  - vb\n  name: Target\n  fullName: System.Delegate.Target\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Delegate.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Target\n    path: src/mscorlib/src/System/Delegate.cs\n    startLine: 285\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the class instance on which the current delegate invokes the instance method.</p>\\n\"\n  syntax:\n    content: public object Target { get; }\n    content.vb: Public ReadOnly Property Target As Object\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>The object on which the current delegate invokes the instance method, if the delegate represents an instance method; <strong>null</strong> if the delegate represents a static method.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Delegate.Target\n- uid: System.Delegate.Combine(System.Delegate,System.Delegate)\n  commentId: M:System.Delegate.Combine(System.Delegate,System.Delegate)\n  id: Combine(System.Delegate,System.Delegate)\n  parent: System.Delegate\n  langs:\n  - csharp\n  - vb\n  name: Combine(Delegate, Delegate)\n  fullName: System.Delegate.Combine(System.Delegate, System.Delegate)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Delegate.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Combine\n    path: src/mscorlib/src/System/Delegate.cs\n    startLine: 192\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Concatenates the invocation lists of two delegates.</p>\\n\"\n  syntax:\n    content: public static Delegate Combine(Delegate a, Delegate b)\n    content.vb: 'Public Shared Function Combine(a As  Delegate, b As  Delegate) As '\n    parameters:\n    - id: a\n      type: System.Delegate\n      description: \"\\n<p>The delegate whose invocation list comes first. </p>\\n\"\n    - id: b\n      type: System.Delegate\n      description: \"\\n<p>The delegate whose invocation list comes last. </p>\\n\"\n    return:\n      type: System.Delegate\n      description: \"\\n<p>A new delegate with an invocation list that concatenates the invocation lists of <em>a</em> and <em>b</em> in that order. Returns <em>a</em> if <em>b</em> is <strong>null</strong>, returns <em>b</em> if <em>a</em> is a null reference, and returns a null reference if both <em>a</em> and <em>b</em> are null references.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Both <em>a</em> and <em>b</em> are not <strong>null</strong>, and <em>a</em> and <em>b</em> are not instances of the same delegate type. </p>\\n\"\n  seealso:\n  - type: System.MulticastDelegate\n    commentId: T:System.MulticastDelegate\n  - type: System.Delegate.CombineImpl(System.Delegate)\n    commentId: M:System.Delegate.CombineImpl(System.Delegate)\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Delegate.Combine(Delegate, Delegate)\n- uid: System.Delegate.Combine(System.Delegate[])\n  commentId: M:System.Delegate.Combine(System.Delegate[])\n  id: Combine(System.Delegate[])\n  parent: System.Delegate\n  langs:\n  - csharp\n  - vb\n  name: Combine(Delegate[])\n  fullName: System.Delegate.Combine(System.Delegate[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Delegate.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Combine\n    path: src/mscorlib/src/System/Delegate.cs\n    startLine: 200\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Concatenates the invocation lists of an array of delegates.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public static Delegate Combine(params Delegate[] delegates)\n    content.vb: \"<ComVisible(True)>\\nPublic Shared Function Combine(ParamArray delegates As  Delegate ()) As \"\n    parameters:\n    - id: delegates\n      type: System.Delegate[]\n      description: \"\\n<p>The array of delegates to combine. </p>\\n\"\n    return:\n      type: System.Delegate\n      description: \"\\n<p>A new delegate with an invocation list that concatenates the invocation lists of the delegates in the <em>delegates</em> array. Returns <strong>null</strong> if <em>delegates</em> is <strong>null</strong>, if <em>delegates</em> contains zero elements, or if every entry in <em>delegates</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Not all the non-null entries in <em>delegates</em> are instances of the same delegate type. </p>\\n\"\n  seealso:\n  - type: System.MulticastDelegate\n    commentId: T:System.MulticastDelegate\n  - type: System.Delegate.CombineImpl(System.Delegate)\n    commentId: M:System.Delegate.CombineImpl(System.Delegate)\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Delegate.Combine(System.Delegate())\n  name.vb: Combine(Delegate())\n  nameWithType: Delegate.Combine(Delegate[])\n  nameWithType.vb: Delegate.Combine(Delegate())\n- uid: System.Delegate.DynamicInvoke(System.Object[])\n  commentId: M:System.Delegate.DynamicInvoke(System.Object[])\n  id: DynamicInvoke(System.Object[])\n  parent: System.Delegate\n  langs:\n  - csharp\n  - vb\n  name: DynamicInvoke(Object[])\n  fullName: System.Delegate.DynamicInvoke(System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Delegate.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DynamicInvoke\n    path: src/mscorlib/src/System/Delegate.cs\n    startLine: 104\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Dynamically invokes (late-bound) the method represented by the current delegate.</p>\\n\"\n  syntax:\n    content: public object DynamicInvoke(params object[] args)\n    content.vb: Public Function DynamicInvoke(ParamArray args As Object()) As Object\n    parameters:\n    - id: args\n      type: System.Object[]\n      description: \"\\n<p>An array of objects that are the arguments to pass to the method represented by the current delegate.</p>\\n<p>-or- </p>\\n<p>\\n<strong>null</strong>, if the method represented by the current delegate does not require arguments. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The object returned by the method represented by the delegate.</p>\\n\"\n  exceptions:\n  - type: System.MemberAccessException\n    commentId: T:System.MemberAccessException\n    description: \"\\n<p>The caller does not have access to the method represented by the delegate (for example, if the method is private).</p>\\n<p>-or- </p>\\n<p>The number, order, or type of parameters listed in <em>args</em> is invalid. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The method represented by the delegate is invoked on an object or a class that does not support it. </p>\\n\"\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: \"\\n<p>The method represented by the delegate is an instance method and the target object is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>One of the encapsulated methods throws an exception. </p>\\n\"\n  seealso:\n  - type: System.Delegate.DynamicInvokeImpl(System.Object[])\n    commentId: M:System.Delegate.DynamicInvokeImpl(System.Object[])\n  - type: System.Object\n    commentId: T:System.Object\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Delegate.DynamicInvoke(System.Object())\n  name.vb: DynamicInvoke(Object())\n  nameWithType: Delegate.DynamicInvoke(Object[])\n  nameWithType.vb: Delegate.DynamicInvoke(Object())\n- uid: System.Delegate.Equals(System.Object)\n  commentId: M:System.Delegate.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Delegate\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Delegate.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Delegate.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Delegate.cs\n    startLine: 125\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override bool Equals(object obj)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare with the current delegate. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>obj</em> and the current delegate have the same targets, methods, and invocation list; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  exceptions:\n  - type: System.MemberAccessException\n    commentId: T:System.MemberAccessException\n    description: \"\\n<p>The caller does not have access to the method represented by the delegate (for example, if the method is private). </p>\\n\"\n  seealso:\n  - type: System.Object\n    commentId: T:System.Object\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Delegate.Equals(Object)\n- uid: System.Delegate.GetHashCode\n  commentId: M:System.Delegate.GetHashCode\n  id: GetHashCode\n  parent: System.Delegate\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Delegate.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Delegate.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Delegate.cs\n    startLine: 177\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a hash code for the delegate.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A hash code for the delegate.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  seealso:\n  - type: System.Object.GetHashCode\n    commentId: M:System.Object.GetHashCode\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Delegate.GetHashCode()\n- uid: System.Delegate.GetInvocationList\n  commentId: M:System.Delegate.GetInvocationList\n  id: GetInvocationList\n  parent: System.Delegate\n  langs:\n  - csharp\n  - vb\n  name: GetInvocationList()\n  fullName: System.Delegate.GetInvocationList()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Delegate.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetInvocationList\n    path: src/mscorlib/src/System/Delegate.cs\n    startLine: 213\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the invocation list of the delegate.</p>\\n\"\n  syntax:\n    content: public virtual Delegate[] GetInvocationList()\n    content.vb: 'Public Overridable Function GetInvocationList As '\n    return:\n      type: System.Delegate[]\n      description: \"\\n<p>An array of delegates representing the invocation list of the current delegate.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Delegate.GetInvocationList()\n- uid: System.Delegate.op_Equality(System.Delegate,System.Delegate)\n  commentId: M:System.Delegate.op_Equality(System.Delegate,System.Delegate)\n  id: op_Equality(System.Delegate,System.Delegate)\n  parent: System.Delegate\n  langs:\n  - csharp\n  - vb\n  name: Equality(Delegate, Delegate)\n  fullName: System.Delegate.Equality(System.Delegate, System.Delegate)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Delegate.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Equality\n    path: src/mscorlib/src/System/Delegate.cs\n    startLine: 537\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether the specified delegates are equal.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(Delegate d1, Delegate d2)\n    content.vb: Public Shared Operator =(d1 As  Delegate, d2 As  Delegate) As Boolean\n    parameters:\n    - id: d1\n      type: System.Delegate\n      description: \"\\n<p>The first delegate to compare. </p>\\n\"\n    - id: d2\n      type: System.Delegate\n      description: \"\\n<p>The second delegate to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>d1</em> is equal to <em>d2</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Delegate.Equals(System.Object)\n    commentId: M:System.Delegate.Equals(System.Object)\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Delegate.Equality(Delegate, Delegate)\n- uid: System.Delegate.op_Inequality(System.Delegate,System.Delegate)\n  commentId: M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)\n  id: op_Inequality(System.Delegate,System.Delegate)\n  parent: System.Delegate\n  langs:\n  - csharp\n  - vb\n  name: Inequality(Delegate, Delegate)\n  fullName: System.Delegate.Inequality(System.Delegate, System.Delegate)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Delegate.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Inequality\n    path: src/mscorlib/src/System/Delegate.cs\n    startLine: 545\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether the specified delegates are not equal.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(Delegate d1, Delegate d2)\n    content.vb: Public Shared Operator <>(d1 As  Delegate, d2 As  Delegate) As Boolean\n    parameters:\n    - id: d1\n      type: System.Delegate\n      description: \"\\n<p>The first delegate to compare. </p>\\n\"\n    - id: d2\n      type: System.Delegate\n      description: \"\\n<p>The second delegate to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>d1</em> is not equal to <em>d2</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Delegate.Equals(System.Object)\n    commentId: M:System.Delegate.Equals(System.Object)\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Delegate.Inequality(Delegate, Delegate)\n- uid: System.Delegate.Remove(System.Delegate,System.Delegate)\n  commentId: M:System.Delegate.Remove(System.Delegate,System.Delegate)\n  id: Remove(System.Delegate,System.Delegate)\n  parent: System.Delegate\n  langs:\n  - csharp\n  - vb\n  name: Remove(Delegate, Delegate)\n  fullName: System.Delegate.Remove(System.Delegate, System.Delegate)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Delegate.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Remove\n    path: src/mscorlib/src/System/Delegate.cs\n    startLine: 294\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static Delegate Remove(Delegate source, Delegate value)\n    content.vb: \"<SecuritySafeCritical>\\nPublic Shared Function Remove(source As  Delegate, value As  Delegate) As \"\n    parameters:\n    - id: source\n      type: System.Delegate\n      description: \"\\n<p>The delegate from which to remove the invocation list of <em>value</em>. </p>\\n\"\n    - id: value\n      type: System.Delegate\n      description: \"\\n<p>The delegate that supplies the invocation list to remove from the invocation list of <em>source</em>. </p>\\n\"\n    return:\n      type: System.Delegate\n      description: \"\\n<p>A new delegate with an invocation list formed by taking the invocation list of <em>source</em> and removing the last occurrence of the invocation list of <em>value</em>, if the invocation list of <em>value</em> is found within the invocation list of <em>source</em>. Returns <em>source</em> if <em>value</em> is <strong>null</strong> or if the invocation list of <em>value</em> is not found within the invocation list of <em>source</em>. Returns a null reference if the invocation list of <em>value</em> is equal to the invocation list of <em>source</em> or if <em>source</em> is a null reference.</p>\\n\"\n  exceptions:\n  - type: System.MemberAccessException\n    commentId: T:System.MemberAccessException\n    description: \"\\n<p>The caller does not have access to the method represented by the delegate (for example, if the method is private). </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The delegate types do not match.</p>\\n\"\n  seealso:\n  - type: System.Delegate.RemoveAll(System.Delegate,System.Delegate)\n    commentId: M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)\n  - type: System.Delegate.RemoveImpl(System.Delegate)\n    commentId: M:System.Delegate.RemoveImpl(System.Delegate)\n  - type: System.Delegate.Equals(System.Object)\n    commentId: M:System.Delegate.Equals(System.Object)\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Delegate.Remove(Delegate, Delegate)\n- uid: System.Delegate.RemoveAll(System.Delegate,System.Delegate)\n  commentId: M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)\n  id: RemoveAll(System.Delegate,System.Delegate)\n  parent: System.Delegate\n  langs:\n  - csharp\n  - vb\n  name: RemoveAll(Delegate, Delegate)\n  fullName: System.Delegate.RemoveAll(System.Delegate, System.Delegate)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Delegate.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RemoveAll\n    path: src/mscorlib/src/System/Delegate.cs\n    startLine: 309\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Removes all occurrences of the invocation list of a delegate from the invocation list of another delegate.</p>\\n\"\n  syntax:\n    content: public static Delegate RemoveAll(Delegate source, Delegate value)\n    content.vb: 'Public Shared Function RemoveAll(source As  Delegate, value As  Delegate) As '\n    parameters:\n    - id: source\n      type: System.Delegate\n      description: \"\\n<p>The delegate from which to remove the invocation list of <em>value</em>. </p>\\n\"\n    - id: value\n      type: System.Delegate\n      description: \"\\n<p>The delegate that supplies the invocation list to remove from the invocation list of <em>source</em>. </p>\\n\"\n    return:\n      type: System.Delegate\n      description: \"\\n<p>A new delegate with an invocation list formed by taking the invocation list of <em>source</em> and removing all occurrences of the invocation list of <em>value</em>, if the invocation list of <em>value</em> is found within the invocation list of <em>source</em>. Returns <em>source</em> if <em>value</em> is <strong>null</strong> or if the invocation list of <em>value</em> is not found within the invocation list of <em>source</em>. Returns a null reference if the invocation list of <em>value</em> is equal to the invocation list of <em>source</em>, if <em>source</em> contains only a series of invocation lists that are equal to the invocation list of <em>value</em>, or if <em>source</em> is a null reference.</p>\\n\"\n  exceptions:\n  - type: System.MemberAccessException\n    commentId: T:System.MemberAccessException\n    description: \"\\n<p>The caller does not have access to the method represented by the delegate (for example, if the method is private). </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The delegate types do not match.</p>\\n\"\n  seealso:\n  - type: System.Delegate.Remove(System.Delegate,System.Delegate)\n    commentId: M:System.Delegate.Remove(System.Delegate,System.Delegate)\n  - type: System.Delegate.RemoveImpl(System.Delegate)\n    commentId: M:System.Delegate.RemoveImpl(System.Delegate)\n  - type: System.Delegate.Equals(System.Object)\n    commentId: M:System.Delegate.Equals(System.Object)\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Delegate.RemoveAll(Delegate, Delegate)\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  fullName: System.Delegate\n  nameWithType: Delegate\n  commentId: T:System.Delegate\n- uid: System.Delegate[]\n  name: Delegate[]\n  fullName: System.Delegate[]\n  fullname.vb: System.Delegate()\n  name.vb: Delegate()\n  spec.csharp:\n  - uid: System.Delegate\n    name: Delegate\n    fullName: System.Delegate\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Delegate\n    name: Delegate\n    fullName: System.Delegate\n  - name: ()\n    fullName: ()\n  nameWithType: Delegate[]\n  nameWithType.vb: Delegate()\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.MemberAccessException\n  parent: System\n  isExternal: false\n  name: MemberAccessException\n  fullName: System.MemberAccessException\n  nameWithType: MemberAccessException\n  commentId: T:System.MemberAccessException\n- uid: System.Reflection.TargetInvocationException\n  isExternal: false\n  name: TargetInvocationException\n  fullName: System.Reflection.TargetInvocationException\n  nameWithType: TargetInvocationException\n  commentId: T:System.Reflection.TargetInvocationException\n"}