{"nodes":[{"pos":[483,501],"content":"Lazy<T, TMetadata>","needQuote":true,"nodes":[{"content":"Lazy&lt;T, TMetadata&gt;","pos":[0,18],"source":"Lazy<T, TMetadata>"}]},{"content":"\\n&lt;p&gt;The type of the object referenced.&lt;/p&gt;\\n","pos":[1193,1238],"source":"\\n<p>The type of the object referenced.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the metadata.&lt;/p&gt;\\n","pos":[1280,1316],"source":"\\n<p>The type of the metadata.</p>\\n"},{"pos":[2110,2125],"content":"Lazy(TMetadata)","needQuote":true,"nodes":[{"content":"Lazy(TMetadata)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The metadata associated with the referenced object.&lt;/p&gt;\\n","pos":[2840,2902],"source":"\\n<p>The metadata associated with the referenced object.</p>\\n"},{"pos":[3322,3346],"content":"Lazy(TMetadata, Boolean)","needQuote":true,"nodes":[{"content":"Lazy(TMetadata, Boolean)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The metadata associated with the referenced object.&lt;/p&gt;\\n","pos":[4145,4207],"source":"\\n<p>The metadata associated with the referenced object.</p>\\n"},{"pos":[4952,4989],"content":"Lazy(TMetadata, LazyThreadSafetyMode)","needQuote":true,"nodes":[{"content":"Lazy(TMetadata, LazyThreadSafetyMode)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The metadata associated with the referenced object.&lt;/p&gt;\\n","pos":[5832,5894],"source":"\\n<p>The metadata associated with the referenced object.</p>\\n"},{"content":"\\n&lt;p&gt;The thread synchronization mode.&lt;/p&gt;\\n","pos":[5981,6024],"source":"\\n<p>The thread synchronization mode.</p>\\n"},{"pos":[6530,6554],"content":"Lazy(Func<T>, TMetadata)","needQuote":true,"nodes":[{"content":"Lazy(Func&lt;T&gt;, TMetadata)","pos":[0,24],"source":"Lazy(Func<T>, TMetadata)"}]},{"content":"\\n&lt;p&gt;A function that returns the referenced object.&lt;/p&gt;\\n","pos":[7404,7461],"source":"\\n<p>A function that returns the referenced object.</p>\\n"},{"content":"\\n&lt;p&gt;The metadata associated with the referenced object.&lt;/p&gt;\\n","pos":[7528,7590],"source":"\\n<p>The metadata associated with the referenced object.</p>\\n"},{"pos":[8137,8170],"content":"Lazy(Func<T>, TMetadata, Boolean)","needQuote":true,"nodes":[{"content":"Lazy(Func&lt;T&gt;, TMetadata, Boolean)","pos":[0,33],"source":"Lazy(Func<T>, TMetadata, Boolean)"}]},{"content":"\\n&lt;p&gt;A function that returns the referenced object.&lt;/p&gt;\\n","pos":[9104,9161],"source":"\\n<p>A function that returns the referenced object.</p>\\n"},{"content":"\\n&lt;p&gt;The metadata associated with the referenced object.&lt;/p&gt;\\n","pos":[9228,9290],"source":"\\n<p>The metadata associated with the referenced object.</p>\\n"},{"pos":[10171,10217],"content":"Lazy(Func<T>, TMetadata, LazyThreadSafetyMode)","needQuote":true,"nodes":[{"content":"Lazy(Func&lt;T&gt;, TMetadata, LazyThreadSafetyMode)","pos":[0,46],"source":"Lazy(Func<T>, TMetadata, LazyThreadSafetyMode)"}]},{"content":"\\n&lt;p&gt;A function that returns the referenced object&lt;/p&gt;\\n","pos":[11195,11251],"source":"\\n<p>A function that returns the referenced object</p>\\n"},{"content":"\\n&lt;p&gt;The metadata associated with the referenced object.&lt;/p&gt;\\n","pos":[11318,11380],"source":"\\n<p>The metadata associated with the referenced object.</p>\\n"},{"content":"\\n&lt;p&gt;The thread synchronization mode&lt;/p&gt;\\n","pos":[11467,11509],"source":"\\n<p>The thread synchronization mode</p>\\n"},{"pos":[12063,12071],"content":"Metadata","needQuote":true,"nodes":[{"content":"Metadata","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The metadata associated with the referenced object.&lt;/p&gt;\\n","pos":[12701,12763],"source":"\\n<p>The metadata associated with the referenced object.</p>\\n"},{"pos":[13045,13051],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[13182,13188],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13344,13351],"content":"Lazy<T>","needQuote":true,"nodes":[{"content":"Lazy&lt;T&gt;","pos":[0,7],"source":"Lazy<T>"}]},{"pos":[13482,13486],"content":"Lazy","needQuote":true,"nodes":[{"content":"Lazy","pos":[0,4]}]},{"pos":[13523,13524],"content":"<","needQuote":true,"nodes":[]},{"pos":[13551,13552],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[13645,13649],"content":"Lazy","needQuote":true,"nodes":[{"content":"Lazy","pos":[0,4]}]},{"content":"(Of","pos":[13687,13690]},{"pos":[13724,13725],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[13752,13753],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13972,13986],"content":"IsValueCreated","needQuote":true,"nodes":[{"content":"IsValueCreated","pos":[0,14]}]},{"pos":[14306,14311],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[14592,14602],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[14742,14750],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[14799,14800],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14827,14828],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14898,14906],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[14958,14959],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14986,14987],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15214,15228],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[15347,15353],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15420,15421],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15471,15477],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15537,15538],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15621,15627],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15694,15695],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15745,15751],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15811,15812],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16026,16048],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[16196,16202],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16269,16270],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16320,16326],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16387,16388]},{"pos":[16443,16449],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16509,16510],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16607,16613],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16680,16681],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16731,16737],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16798,16799]},{"pos":[16854,16860],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16920,16921],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17166,17197],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[17363,17378],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[17454,17455],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17505,17511],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17572,17573]},{"pos":[17628,17634],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17694,17695],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17801,17816],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[17892,17893],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17943,17949],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18010,18011]},{"pos":[18066,18072],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18132,18133],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18363,18376],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[18477,18488],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[18560,18561],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18588,18589],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18662,18673],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[18745,18746],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18773,18774],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18949,18958],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[19051,19058],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[19126,19127],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19154,19155],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19224,19231],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[19299,19300],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19327,19328],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19503,19520],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[19629,19644],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[19720,19721],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19748,19749],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19826,19841],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[19917,19918],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19945,19946],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20098,20105],"content":"Lazy<T>","needQuote":true,"nodes":[{"content":"Lazy&lt;T&gt;","pos":[0,7],"source":"Lazy<T>"}]},{"pos":[20236,20240],"content":"Lazy","needQuote":true,"nodes":[{"content":"Lazy","pos":[0,4]}]},{"pos":[20277,20278],"content":"<","needQuote":true,"nodes":[]},{"pos":[20305,20306],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[20399,20403],"content":"Lazy","needQuote":true,"nodes":[{"content":"Lazy","pos":[0,4]}]},{"content":"(Of","pos":[20441,20444]},{"pos":[20478,20479],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[20506,20507],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20671,20685],"content":"IsValueCreated","needQuote":true,"nodes":[{"content":"IsValueCreated","pos":[0,14]}]},{"pos":[20959,20964],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[21196,21206],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[21346,21354],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[21403,21404],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21431,21432],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21502,21510],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[21562,21563],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21590,21591],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21775,21784],"content":"TMetadata","needQuote":true,"nodes":[{"content":"TMetadata","pos":[0,9]}]},{"pos":[21905,21914],"content":"TMetadata","needQuote":true,"nodes":[{"content":"TMetadata","pos":[0,9]}]},{"pos":[22030,22037],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[22219,22239],"content":"LazyThreadSafetyMode","needQuote":true,"nodes":[{"content":"LazyThreadSafetyMode","pos":[0,20]}]},{"pos":[22432,22448],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[22620,22627],"content":"Func<T>","needQuote":true,"nodes":[{"content":"Func&lt;T&gt;","pos":[0,7],"source":"Func<T>"}]},{"pos":[22758,22762],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[22799,22800],"content":"<","needQuote":true,"nodes":[]},{"pos":[22827,22828],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[22921,22925],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[22963,22966]},{"pos":[23000,23001],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[23028,23029],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23181,23194],"content":"Func<TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TResult&gt;","pos":[0,13],"source":"Func<TResult>"}]},{"pos":[23343,23347],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[23384,23385],"content":"<","needQuote":true,"nodes":[]},{"pos":[23412,23419],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[23518,23522],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[23560,23563]},{"pos":[23597,23604],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[23637,23638],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]}],"content":"items:\n- uid: System.Lazy`2\n  commentId: T:System.Lazy`2\n  id: Lazy`2\n  parent: System\n  children:\n  - System.Lazy`2.#ctor(`1)\n  - System.Lazy`2.#ctor(`1,System.Boolean)\n  - System.Lazy`2.#ctor(`1,System.Threading.LazyThreadSafetyMode)\n  - System.Lazy`2.#ctor(System.Func{`0},`1)\n  - System.Lazy`2.#ctor(System.Func{`0},`1,System.Boolean)\n  - System.Lazy`2.#ctor(System.Func{`0},`1,System.Threading.LazyThreadSafetyMode)\n  - System.Lazy`2.Metadata\n  langs:\n  - csharp\n  - vb\n  name: Lazy<T, TMetadata>\n  fullName: System.Lazy<T, TMetadata>\n  type: Class\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Lazy\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 1213\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Provides a lazy indirect reference to an object and its associated metadata for use by the Managed Extensibility Framework.</p>\\n\"\n  syntax:\n    content: 'public class Lazy<T, TMetadata> : Lazy<T>'\n    content.vb: >-\n      Public Class Lazy(Of T, TMetadata)\n          Inherits Lazy(Of T)\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the object referenced.</p>\\n\"\n    - id: TMetadata\n      description: \"\\n<p>The type of the metadata.</p>\\n\"\n  inheritance:\n  - System.Object\n  - System.Lazy{{T}}\n  inheritedMembers:\n  - System.Lazy{{T}}.IsValueCreated\n  - System.Lazy{{T}}.Value\n  - System.Lazy{{T}}.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  fullName.vb: System.Lazy(Of T, TMetadata)\n  name.vb: Lazy(Of T, TMetadata)\n  nameWithType: Lazy<T, TMetadata>\n  nameWithType.vb: Lazy(Of T, TMetadata)\n- uid: System.Lazy`2.#ctor(`1)\n  commentId: M:System.Lazy`2.#ctor(`1)\n  id: '#ctor(`1)'\n  parent: System.Lazy`2\n  langs:\n  - csharp\n  - vb\n  name: Lazy(TMetadata)\n  fullName: System.Lazy<T, TMetadata>.Lazy(TMetadata)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 1215\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Lazy`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified metadata.</p>\\n\"\n  syntax:\n    content: public Lazy(TMetadata metadata)\n    content.vb: Public Sub New(metadata As TMetadata)\n    parameters:\n    - id: metadata\n      type: '{TMetadata}'\n      description: \"\\n<p>The metadata associated with the referenced object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Lazy(Of T, TMetadata).Lazy(TMetadata)\n  nameWithType: Lazy<T, TMetadata>.Lazy(TMetadata)\n  nameWithType.vb: Lazy(Of T, TMetadata).Lazy(TMetadata)\n- uid: System.Lazy`2.#ctor(`1,System.Boolean)\n  commentId: M:System.Lazy`2.#ctor(`1,System.Boolean)\n  id: '#ctor(`1,System.Boolean)'\n  parent: System.Lazy`2\n  langs:\n  - csharp\n  - vb\n  name: Lazy(TMetadata, Boolean)\n  fullName: System.Lazy<T, TMetadata>.Lazy(TMetadata, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 1216\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Lazy`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified metadata and thread safety value.</p>\\n\"\n  syntax:\n    content: public Lazy(TMetadata metadata, bool isThreadSafe)\n    content.vb: Public Sub New(metadata As TMetadata, isThreadSafe As Boolean)\n    parameters:\n    - id: metadata\n      type: '{TMetadata}'\n      description: \"\\n<p>The metadata associated with the referenced object.</p>\\n\"\n    - id: isThreadSafe\n      type: System.Boolean\n      description: \"\\n<p>Indicates whether the <xref href=\\\"System.Lazy`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that is created will be thread-safe.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Lazy(Of T, TMetadata).Lazy(TMetadata, System.Boolean)\n  nameWithType: Lazy<T, TMetadata>.Lazy(TMetadata, Boolean)\n  nameWithType.vb: Lazy(Of T, TMetadata).Lazy(TMetadata, Boolean)\n- uid: System.Lazy`2.#ctor(`1,System.Threading.LazyThreadSafetyMode)\n  commentId: M:System.Lazy`2.#ctor(`1,System.Threading.LazyThreadSafetyMode)\n  id: '#ctor(`1,System.Threading.LazyThreadSafetyMode)'\n  parent: System.Lazy`2\n  langs:\n  - csharp\n  - vb\n  name: Lazy(TMetadata, LazyThreadSafetyMode)\n  fullName: System.Lazy<T, TMetadata>.Lazy(TMetadata, System.Threading.LazyThreadSafetyMode)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 1217\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Lazy`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified metadata and thread synchronization mode.</p>\\n\"\n  syntax:\n    content: public Lazy(TMetadata metadata, LazyThreadSafetyMode mode)\n    content.vb: Public Sub New(metadata As TMetadata, mode As LazyThreadSafetyMode)\n    parameters:\n    - id: metadata\n      type: '{TMetadata}'\n      description: \"\\n<p>The metadata associated with the referenced object.</p>\\n\"\n    - id: mode\n      type: System.Threading.LazyThreadSafetyMode\n      description: \"\\n<p>The thread synchronization mode.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Lazy(Of T, TMetadata).Lazy(TMetadata, System.Threading.LazyThreadSafetyMode)\n  nameWithType: Lazy<T, TMetadata>.Lazy(TMetadata, LazyThreadSafetyMode)\n  nameWithType.vb: Lazy(Of T, TMetadata).Lazy(TMetadata, LazyThreadSafetyMode)\n- uid: System.Lazy`2.#ctor(System.Func{`0},`1)\n  commentId: M:System.Lazy`2.#ctor(System.Func{`0},`1)\n  id: '#ctor(System.Func{`0},`1)'\n  parent: System.Lazy`2\n  langs:\n  - csharp\n  - vb\n  name: Lazy(Func<T>, TMetadata)\n  fullName: System.Lazy<T, TMetadata>.Lazy(System.Func<T>, TMetadata)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 1218\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Lazy`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified metadata that uses the specified function to get the referenced object.</p>\\n\"\n  syntax:\n    content: public Lazy(Func<T> valueFactory, TMetadata metadata)\n    content.vb: Public Sub New(valueFactory As Func(Of T), metadata As TMetadata)\n    parameters:\n    - id: valueFactory\n      type: System.Func{{T}}\n      description: \"\\n<p>A function that returns the referenced object.</p>\\n\"\n    - id: metadata\n      type: '{TMetadata}'\n      description: \"\\n<p>The metadata associated with the referenced object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Lazy(Of T, TMetadata).Lazy(System.Func(Of T), TMetadata)\n  name.vb: Lazy(Func(Of T), TMetadata)\n  nameWithType: Lazy<T, TMetadata>.Lazy(Func<T>, TMetadata)\n  nameWithType.vb: Lazy(Of T, TMetadata).Lazy(Func(Of T), TMetadata)\n- uid: System.Lazy`2.#ctor(System.Func{`0},`1,System.Boolean)\n  commentId: M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Boolean)\n  id: '#ctor(System.Func{`0},`1,System.Boolean)'\n  parent: System.Lazy`2\n  langs:\n  - csharp\n  - vb\n  name: Lazy(Func<T>, TMetadata, Boolean)\n  fullName: System.Lazy<T, TMetadata>.Lazy(System.Func<T>, TMetadata, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 1219\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Lazy`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified metadata and thread safety value that uses the specified function to get the referenced object.</p>\\n\"\n  syntax:\n    content: public Lazy(Func<T> valueFactory, TMetadata metadata, bool isThreadSafe)\n    content.vb: Public Sub New(valueFactory As Func(Of T), metadata As TMetadata, isThreadSafe As Boolean)\n    parameters:\n    - id: valueFactory\n      type: System.Func{{T}}\n      description: \"\\n<p>A function that returns the referenced object.</p>\\n\"\n    - id: metadata\n      type: '{TMetadata}'\n      description: \"\\n<p>The metadata associated with the referenced object.</p>\\n\"\n    - id: isThreadSafe\n      type: System.Boolean\n      description: \"\\n<p>Indicates whether the <xref href=\\\"System.Lazy`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that is created will be thread-safe.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Lazy(Of T, TMetadata).Lazy(System.Func(Of T), TMetadata, System.Boolean)\n  name.vb: Lazy(Func(Of T), TMetadata, Boolean)\n  nameWithType: Lazy<T, TMetadata>.Lazy(Func<T>, TMetadata, Boolean)\n  nameWithType.vb: Lazy(Of T, TMetadata).Lazy(Func(Of T), TMetadata, Boolean)\n- uid: System.Lazy`2.#ctor(System.Func{`0},`1,System.Threading.LazyThreadSafetyMode)\n  commentId: M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Threading.LazyThreadSafetyMode)\n  id: '#ctor(System.Func{`0},`1,System.Threading.LazyThreadSafetyMode)'\n  parent: System.Lazy`2\n  langs:\n  - csharp\n  - vb\n  name: Lazy(Func<T>, TMetadata, LazyThreadSafetyMode)\n  fullName: System.Lazy<T, TMetadata>.Lazy(System.Func<T>, TMetadata, System.Threading.LazyThreadSafetyMode)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 1220\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Lazy`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified metadata and thread synchronization mode that uses the specified function to get the referenced object.</p>\\n\"\n  syntax:\n    content: public Lazy(Func<T> valueFactory, TMetadata metadata, LazyThreadSafetyMode mode)\n    content.vb: Public Sub New(valueFactory As Func(Of T), metadata As TMetadata, mode As LazyThreadSafetyMode)\n    parameters:\n    - id: valueFactory\n      type: System.Func{{T}}\n      description: \"\\n<p>A function that returns the referenced object</p>\\n\"\n    - id: metadata\n      type: '{TMetadata}'\n      description: \"\\n<p>The metadata associated with the referenced object.</p>\\n\"\n    - id: mode\n      type: System.Threading.LazyThreadSafetyMode\n      description: \"\\n<p>The thread synchronization mode</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Lazy(Of T, TMetadata).Lazy(System.Func(Of T), TMetadata, System.Threading.LazyThreadSafetyMode)\n  name.vb: Lazy(Func(Of T), TMetadata, LazyThreadSafetyMode)\n  nameWithType: Lazy<T, TMetadata>.Lazy(Func<T>, TMetadata, LazyThreadSafetyMode)\n  nameWithType.vb: Lazy(Of T, TMetadata).Lazy(Func(Of T), TMetadata, LazyThreadSafetyMode)\n- uid: System.Lazy`2.Metadata\n  commentId: P:System.Lazy`2.Metadata\n  id: Metadata\n  parent: System.Lazy`2\n  langs:\n  - csharp\n  - vb\n  name: Metadata\n  fullName: System.Lazy<T, TMetadata>.Metadata\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Metadata\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 1221\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the metadata associated with the referenced object.</p>\\n\"\n  syntax:\n    content: public TMetadata Metadata { get; }\n    content.vb: Public ReadOnly Property Metadata As TMetadata\n    parameters: []\n    return:\n      type: '{TMetadata}'\n      description: \"\\n<p>The metadata associated with the referenced object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Lazy(Of T, TMetadata).Metadata\n  nameWithType: Lazy<T, TMetadata>.Metadata\n  nameWithType.vb: Lazy(Of T, TMetadata).Metadata\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Lazy{{T}}\n  parent: System\n  definition: System.Lazy`1\n  name: Lazy<T>\n  fullName: System.Lazy<T>\n  fullname.vb: System.Lazy(Of T)\n  name.vb: Lazy(Of T)\n  spec.csharp:\n  - uid: System.Lazy`1\n    name: Lazy\n    fullName: System.Lazy\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Lazy`1\n    name: Lazy\n    fullName: System.Lazy\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Lazy{`0}\n  nameWithType: Lazy<T>\n  nameWithType.vb: Lazy(Of T)\n- uid: System.Lazy{{T}}.IsValueCreated\n  parent: System.Lazy{{T}}\n  definition: System.Lazy`1.IsValueCreated\n  name: IsValueCreated\n  fullName: System.Lazy<T>.IsValueCreated\n  fullname.vb: System.Lazy(Of T).IsValueCreated\n  commentId: P:System.Lazy{`0}.IsValueCreated\n  nameWithType: Lazy<T>.IsValueCreated\n  nameWithType.vb: Lazy(Of T).IsValueCreated\n- uid: System.Lazy{{T}}.Value\n  parent: System.Lazy{{T}}\n  definition: System.Lazy`1.Value\n  name: Value\n  fullName: System.Lazy<T>.Value\n  fullname.vb: System.Lazy(Of T).Value\n  commentId: P:System.Lazy{`0}.Value\n  nameWithType: Lazy<T>.Value\n  nameWithType.vb: Lazy(Of T).Value\n- uid: System.Lazy{{T}}.ToString\n  parent: System.Lazy{{T}}\n  definition: System.Lazy`1.ToString\n  name: ToString()\n  fullName: System.Lazy<T>.ToString()\n  fullname.vb: System.Lazy(Of T).ToString()\n  spec.csharp:\n  - uid: System.Lazy`1.ToString\n    name: ToString\n    fullName: System.Lazy<T>.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Lazy`1.ToString\n    name: ToString\n    fullName: System.Lazy(Of T).ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Lazy{`0}.ToString\n  nameWithType: Lazy<T>.ToString()\n  nameWithType.vb: Lazy(Of T).ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System.Lazy`1\n  isExternal: false\n  name: Lazy<T>\n  fullName: System.Lazy<T>\n  fullname.vb: System.Lazy(Of T)\n  name.vb: Lazy(Of T)\n  spec.csharp:\n  - uid: System.Lazy`1\n    name: Lazy\n    fullName: System.Lazy\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Lazy`1\n    name: Lazy\n    fullName: System.Lazy\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Lazy`1\n  nameWithType: Lazy<T>\n  nameWithType.vb: Lazy(Of T)\n- uid: System.Lazy`1.IsValueCreated\n  isExternal: false\n  name: IsValueCreated\n  fullName: System.Lazy<T>.IsValueCreated\n  fullname.vb: System.Lazy(Of T).IsValueCreated\n  commentId: P:System.Lazy`1.IsValueCreated\n  nameWithType: Lazy<T>.IsValueCreated\n  nameWithType.vb: Lazy(Of T).IsValueCreated\n- uid: System.Lazy`1.Value\n  isExternal: false\n  name: Value\n  fullName: System.Lazy<T>.Value\n  fullname.vb: System.Lazy(Of T).Value\n  commentId: P:System.Lazy`1.Value\n  nameWithType: Lazy<T>.Value\n  nameWithType.vb: Lazy(Of T).Value\n- uid: System.Lazy`1.ToString\n  isExternal: false\n  name: ToString()\n  fullName: System.Lazy<T>.ToString()\n  fullname.vb: System.Lazy(Of T).ToString()\n  spec.csharp:\n  - uid: System.Lazy`1.ToString\n    name: ToString\n    fullName: System.Lazy<T>.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Lazy`1.ToString\n    name: ToString\n    fullName: System.Lazy(Of T).ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Lazy`1.ToString\n  nameWithType: Lazy<T>.ToString()\n  nameWithType.vb: Lazy(Of T).ToString()\n- uid: '{TMetadata}'\n  definition: TMetadata\n  name: TMetadata\n  fullName: TMetadata\n  commentId: '!:TMetadata'\n  nameWithType: TMetadata\n- uid: TMetadata\n  isExternal: false\n  name: TMetadata\n  fullName: TMetadata\n  nameWithType: TMetadata\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Threading.LazyThreadSafetyMode\n  parent: System.Threading\n  isExternal: false\n  name: LazyThreadSafetyMode\n  fullName: System.Threading.LazyThreadSafetyMode\n  commentId: T:System.Threading.LazyThreadSafetyMode\n  nameWithType: LazyThreadSafetyMode\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  commentId: N:System.Threading\n  nameWithType: System.Threading\n- uid: System.Func{{T}}\n  parent: System\n  definition: System.Func`1\n  name: Func<T>\n  fullName: System.Func<T>\n  fullname.vb: System.Func(Of T)\n  name.vb: Func(Of T)\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0}\n  nameWithType: Func<T>\n  nameWithType.vb: Func(Of T)\n- uid: System.Func`1\n  isExternal: false\n  name: Func<TResult>\n  fullName: System.Func<TResult>\n  fullname.vb: System.Func(Of TResult)\n  name.vb: Func(Of TResult)\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func`1\n  nameWithType: Func<TResult>\n  nameWithType.vb: Func(Of TResult)\n"}