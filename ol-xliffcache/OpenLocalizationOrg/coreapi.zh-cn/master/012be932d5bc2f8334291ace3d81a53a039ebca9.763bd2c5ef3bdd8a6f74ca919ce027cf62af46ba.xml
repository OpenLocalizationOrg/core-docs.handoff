{"nodes":[{"pos":[725,741],"content":"ObjectAccessRule","needQuote":true,"nodes":[{"content":"ObjectAccessRule","pos":[0,16]}]},{"pos":[3755,3873],"content":"ObjectAccessRule(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, Guid, Guid, AccessControlType)","needQuote":true,"nodes":[{"content":"ObjectAccessRule(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, Guid, Guid, AccessControlType)","pos":[0,118]}]},{"content":"\\n&lt;p&gt;The access mask of this rule.","pos":[5693,5727],"source":"\\n<p>The access mask of this rule."},{"content":"The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.&lt;/p&gt;\\n","pos":[5728,5854],"source":" The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this rule is inherited from a parent container.&lt;/p&gt;\\n","pos":[5925,6010],"source":"\\n<p>\\n<strong>true</strong> if this rule is inherited from a parent container.</p>\\n"},{"content":"\\n&lt;p&gt;Specifies the inheritance properties of the access rule.&lt;/p&gt;\\n","pos":[6118,6185],"source":"\\n<p>Specifies the inheritance properties of the access rule.</p>\\n"},{"content":"\\n&lt;p&gt;The type of object to which the rule applies.&lt;/p&gt;\\n","pos":[6627,6683],"source":"\\n<p>The type of object to which the rule applies.</p>\\n"},{"content":"\\n&lt;p&gt;The type of child object that can inherit the rule.&lt;/p&gt;\\n","pos":[6759,6821],"source":"\\n<p>The type of child object that can inherit the rule.</p>\\n"},{"content":"\\n&lt;p&gt;Specifies whether this rule allows or denies access.&lt;/p&gt;\\n","pos":[6918,6981],"source":"\\n<p>Specifies whether this rule allows or denies access.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the &lt;em&gt;accessMask&lt;/em&gt; parameter is 0, or the &lt;em&gt;inheritanceFlags&lt;/em&gt; or &lt;em&gt;propagationFlags&lt;/em&gt; parameters contain unrecognized flag values.&lt;/p&gt;\\n","pos":[7448,7618],"source":"\\n<p>The value of the <em>accessMask</em> parameter is 0, or the <em>inheritanceFlags</em> or <em>propagationFlags</em> parameters contain unrecognized flag values.</p>\\n"},{"pos":[8110,8129],"content":"InheritedObjectType","needQuote":true,"nodes":[{"content":"InheritedObjectType","pos":[0,19]}]},{"pos":[9573,9584],"content":"ObjectFlags","needQuote":true,"nodes":[{"content":"ObjectFlags","pos":[0,11]}]},{"pos":[11805,11815],"content":"ObjectType","needQuote":true,"nodes":[{"content":"ObjectType","pos":[0,10]}]},{"pos":[13015,13044],"content":"System.Security.AccessControl","needQuote":true,"nodes":[{"content":"System.Security.AccessControl","pos":[0,29]}]},{"pos":[13244,13250],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13452,13469],"content":"AuthorizationRule","needQuote":true,"nodes":[{"content":"AuthorizationRule","pos":[0,17]}]},{"pos":[13743,13753],"content":"AccessRule","needQuote":true,"nodes":[{"content":"AccessRule","pos":[0,10]}]},{"pos":[14035,14052],"content":"AccessControlType","needQuote":true,"nodes":[{"content":"AccessControlType","pos":[0,17]}]},{"pos":[14395,14405],"content":"AccessMask","needQuote":true,"nodes":[{"content":"AccessMask","pos":[0,10]}]},{"pos":[14755,14772],"content":"IdentityReference","needQuote":true,"nodes":[{"content":"IdentityReference","pos":[0,17]}]},{"pos":[15142,15158],"content":"InheritanceFlags","needQuote":true,"nodes":[{"content":"InheritanceFlags","pos":[0,16]}]},{"pos":[15520,15531],"content":"IsInherited","needQuote":true,"nodes":[{"content":"IsInherited","pos":[0,11]}]},{"pos":[15883,15899],"content":"PropagationFlags","needQuote":true,"nodes":[{"content":"PropagationFlags","pos":[0,16]}]},{"pos":[16189,16199],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[16294,16302],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[16371,16372],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16399,16400],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16470,16478],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[16547,16548],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16575,16576],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16759,16773],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[16892,16898],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16965,16966],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17016,17022],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17082,17083],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17166,17172],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17239,17240],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17290,17296],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17356,17357],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17571,17593],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[17741,17747],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17814,17815],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17865,17871],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17932,17933]},{"pos":[17988,17994],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18054,18055],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18152,18158],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[18225,18226],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18276,18282],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18343,18344]},{"pos":[18399,18405],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18465,18466],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18711,18742],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[18908,18923],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[18999,19000],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19050,19056],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19117,19118]},{"pos":[19173,19179],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19239,19240],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19346,19361],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[19437,19438],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19488,19494],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19555,19556]},{"pos":[19611,19617],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19677,19678],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19908,19921],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[20022,20033],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[20105,20106],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20133,20134],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20207,20218],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[20290,20291],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20318,20319],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20494,20503],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[20596,20603],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[20671,20672],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20699,20700],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20769,20776],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[20844,20845],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20872,20873],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21048,21065],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[21174,21189],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[21265,21266],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21293,21294],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21371,21386],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[21462,21463],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21490,21491],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21636,21642],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[21822,21839],"content":"IdentityReference","needQuote":true,"nodes":[{"content":"IdentityReference","pos":[0,17]}]},{"pos":[22054,22059],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[22202,22209],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[22413,22429],"content":"InheritanceFlags","needQuote":true,"nodes":[{"content":"InheritanceFlags","pos":[0,16]}]},{"pos":[22706,22722],"content":"PropagationFlags","needQuote":true,"nodes":[{"content":"PropagationFlags","pos":[0,16]}]},{"pos":[22941,22945],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[23141,23158],"content":"AccessControlType","needQuote":true,"nodes":[{"content":"AccessControlType","pos":[0,17]}]},{"pos":[23377,23402],"content":"System.Security.Principal","needQuote":true,"nodes":[{"content":"System.Security.Principal","pos":[0,25]}]},{"pos":[23644,23658],"content":"ObjectAceFlags","needQuote":true,"nodes":[{"content":"ObjectAceFlags","pos":[0,14]}]},{"pos":[23884,23901],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[24083,24110],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Security.AccessControl.ObjectAccessRule\n  commentId: T:System.Security.AccessControl.ObjectAccessRule\n  id: ObjectAccessRule\n  parent: System.Security.AccessControl\n  children:\n  - System.Security.AccessControl.ObjectAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Guid,System.Guid,System.Security.AccessControl.AccessControlType)\n  - System.Security.AccessControl.ObjectAccessRule.InheritedObjectType\n  - System.Security.AccessControl.ObjectAccessRule.ObjectFlags\n  - System.Security.AccessControl.ObjectAccessRule.ObjectType\n  langs:\n  - csharp\n  - vb\n  name: ObjectAccessRule\n  fullName: System.Security.AccessControl.ObjectAccessRule\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ObjectAccessRule\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 337\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Represents a combination of a user's identity, an access mask, and an access control type (allow or deny). An <xref href=\\\"System.Security.AccessControl.ObjectAccessRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object also contains information about the type of object to which the rule applies, the type of child object that can inherit the rule, how the rule is inherited by child objects, and how that inheritance is propagated.</p>\\n\"\n  syntax:\n    content: 'public abstract class ObjectAccessRule : AccessRule'\n    content.vb: >-\n      Public MustInherit Class ObjectAccessRule\n          Inherits AccessRule\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.AuthorizationRule\n  - System.Security.AccessControl.AccessRule\n  inheritedMembers:\n  - System.Security.AccessControl.AccessRule.AccessControlType\n  - System.Security.AccessControl.AuthorizationRule.AccessMask\n  - System.Security.AccessControl.AuthorizationRule.IdentityReference\n  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  - System.Security.AccessControl.AuthorizationRule.IsInherited\n  - System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: ObjectAccessRule\n- uid: System.Security.AccessControl.ObjectAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Guid,System.Guid,System.Security.AccessControl.AccessControlType)\n  commentId: M:System.Security.AccessControl.ObjectAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Guid,System.Guid,System.Security.AccessControl.AccessControlType)\n  id: '#ctor(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Guid,System.Guid,System.Security.AccessControl.AccessControlType)'\n  parent: System.Security.AccessControl.ObjectAccessRule\n  langs:\n  - csharp\n  - vb\n  name: ObjectAccessRule(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, Guid, Guid, AccessControlType)\n  fullName: System.Security.AccessControl.ObjectAccessRule.ObjectAccessRule(System.Security.Principal.IdentityReference, System.Int32, System.Boolean, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Guid, System.Guid, System.Security.AccessControl.AccessControlType)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 339\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.ObjectAccessRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified values.</p>\\n\"\n  syntax:\n    content: protected ObjectAccessRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, Guid objectType, Guid inheritedObjectType, AccessControlType type)\n    content.vb: Protected Sub New(identity As IdentityReference, accessMask As Integer, isInherited As Boolean, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, objectType As Guid, inheritedObjectType As Guid, type As AccessControlType)\n    parameters:\n    - id: identity\n      type: System.Security.Principal.IdentityReference\n      description: \"\\n<p>The identity to which the access rule applies.  It must be an object that can be cast as a <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: accessMask\n      type: System.Int32\n      description: \"\\n<p>The access mask of this rule. The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.</p>\\n\"\n    - id: isInherited\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this rule is inherited from a parent container.</p>\\n\"\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: \"\\n<p>Specifies the inheritance properties of the access rule.</p>\\n\"\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: \"\\n<p>Specifies whether inherited access rules are automatically propagated. The propagation flags are ignored if <em>inheritanceFlags</em> is set to <xref href=\\\"System.Security.AccessControl.InheritanceFlags.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: objectType\n      type: System.Guid\n      description: \"\\n<p>The type of object to which the rule applies.</p>\\n\"\n    - id: inheritedObjectType\n      type: System.Guid\n      description: \"\\n<p>The type of child object that can inherit the rule.</p>\\n\"\n    - id: type\n      type: System.Security.AccessControl.AccessControlType\n      description: \"\\n<p>Specifies whether this rule allows or denies access.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The value of the <em>identity</em> parameter cannot be cast as a <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or the <em>type</em> parameter contains an invalid value.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The value of the <em>accessMask</em> parameter is 0, or the <em>inheritanceFlags</em> or <em>propagationFlags</em> parameters contain unrecognized flag values.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: ObjectAccessRule.ObjectAccessRule(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, Guid, Guid, AccessControlType)\n- uid: System.Security.AccessControl.ObjectAccessRule.InheritedObjectType\n  commentId: P:System.Security.AccessControl.ObjectAccessRule.InheritedObjectType\n  id: InheritedObjectType\n  parent: System.Security.AccessControl.ObjectAccessRule\n  langs:\n  - csharp\n  - vb\n  name: InheritedObjectType\n  fullName: System.Security.AccessControl.ObjectAccessRule.InheritedObjectType\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InheritedObjectType\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 340\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the type of child object that can inherit the <xref href=\\\"System.Security.AccessControl.ObjectAccessRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public Guid InheritedObjectType { get; }\n    content.vb: Public ReadOnly Property InheritedObjectType As Guid\n    parameters: []\n    return:\n      type: System.Guid\n      description: \"\\n<p>The type of child object that can inherit the <xref href=\\\"System.Security.AccessControl.ObjectAccessRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ObjectAccessRule.InheritedObjectType\n- uid: System.Security.AccessControl.ObjectAccessRule.ObjectFlags\n  commentId: P:System.Security.AccessControl.ObjectAccessRule.ObjectFlags\n  id: ObjectFlags\n  parent: System.Security.AccessControl.ObjectAccessRule\n  langs:\n  - csharp\n  - vb\n  name: ObjectFlags\n  fullName: System.Security.AccessControl.ObjectAccessRule.ObjectFlags\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ObjectFlags\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 341\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets flags that specify if the <xref href=\\\"System.Security.AccessControl.ObjectAccessRule.ObjectType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Security.AccessControl.ObjectAccessRule.InheritedObjectType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties of the <xref href=\\\"System.Security.AccessControl.ObjectAccessRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object contain valid values.</p>\\n\"\n  syntax:\n    content: public ObjectAceFlags ObjectFlags { get; }\n    content.vb: Public ReadOnly Property ObjectFlags As ObjectAceFlags\n    parameters: []\n    return:\n      type: System.Security.AccessControl.ObjectAceFlags\n      description: \"\\n<p>\\n<xref href=\\\"System.Security.AccessControl.ObjectAceFlags.ObjectAceTypePresent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> specifies that the <xref href=\\\"System.Security.AccessControl.ObjectAccessRule.ObjectType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property contains a valid value. <xref href=\\\"System.Security.AccessControl.ObjectAceFlags.InheritedObjectAceTypePresent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> specifies that the <xref href=\\\"System.Security.AccessControl.ObjectAccessRule.InheritedObjectType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property contains a valid value. These values can be combined with a logical OR.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ObjectAccessRule.ObjectFlags\n- uid: System.Security.AccessControl.ObjectAccessRule.ObjectType\n  commentId: P:System.Security.AccessControl.ObjectAccessRule.ObjectType\n  id: ObjectType\n  parent: System.Security.AccessControl.ObjectAccessRule\n  langs:\n  - csharp\n  - vb\n  name: ObjectType\n  fullName: System.Security.AccessControl.ObjectAccessRule.ObjectType\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ObjectType\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 342\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the type of object to which the <xref href=\\\"System.Security.AccessControl.ObjectAccessRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> applies.</p>\\n\"\n  syntax:\n    content: public Guid ObjectType { get; }\n    content.vb: Public ReadOnly Property ObjectType As Guid\n    parameters: []\n    return:\n      type: System.Guid\n      description: \"\\n<p>The type of object to which the <xref href=\\\"System.Security.AccessControl.ObjectAccessRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> applies.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ObjectAccessRule.ObjectType\nreferences:\n- uid: System.Security.AccessControl\n  isExternal: false\n  name: System.Security.AccessControl\n  fullName: System.Security.AccessControl\n  commentId: N:System.Security.AccessControl\n  nameWithType: System.Security.AccessControl\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.AccessControl.AuthorizationRule\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AuthorizationRule\n  fullName: System.Security.AccessControl.AuthorizationRule\n  commentId: T:System.Security.AccessControl.AuthorizationRule\n  nameWithType: AuthorizationRule\n- uid: System.Security.AccessControl.AccessRule\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessRule\n  fullName: System.Security.AccessControl.AccessRule\n  commentId: T:System.Security.AccessControl.AccessRule\n  nameWithType: AccessRule\n- uid: System.Security.AccessControl.AccessRule.AccessControlType\n  parent: System.Security.AccessControl.AccessRule\n  isExternal: false\n  name: AccessControlType\n  fullName: System.Security.AccessControl.AccessRule.AccessControlType\n  commentId: P:System.Security.AccessControl.AccessRule.AccessControlType\n  nameWithType: AccessRule.AccessControlType\n- uid: System.Security.AccessControl.AuthorizationRule.AccessMask\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: AccessMask\n  fullName: System.Security.AccessControl.AuthorizationRule.AccessMask\n  commentId: P:System.Security.AccessControl.AuthorizationRule.AccessMask\n  nameWithType: AuthorizationRule.AccessMask\n- uid: System.Security.AccessControl.AuthorizationRule.IdentityReference\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: IdentityReference\n  fullName: System.Security.AccessControl.AuthorizationRule.IdentityReference\n  commentId: P:System.Security.AccessControl.AuthorizationRule.IdentityReference\n  nameWithType: AuthorizationRule.IdentityReference\n- uid: System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: InheritanceFlags\n  fullName: System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  commentId: P:System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  nameWithType: AuthorizationRule.InheritanceFlags\n- uid: System.Security.AccessControl.AuthorizationRule.IsInherited\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: IsInherited\n  fullName: System.Security.AccessControl.AuthorizationRule.IsInherited\n  commentId: P:System.Security.AccessControl.AuthorizationRule.IsInherited\n  nameWithType: AuthorizationRule.IsInherited\n- uid: System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: PropagationFlags\n  fullName: System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  commentId: P:System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  nameWithType: AuthorizationRule.PropagationFlags\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.Principal.IdentityReference\n  parent: System.Security.Principal\n  isExternal: false\n  name: IdentityReference\n  fullName: System.Security.Principal.IdentityReference\n  commentId: T:System.Security.Principal.IdentityReference\n  nameWithType: IdentityReference\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Security.AccessControl.InheritanceFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: InheritanceFlags\n  fullName: System.Security.AccessControl.InheritanceFlags\n  commentId: T:System.Security.AccessControl.InheritanceFlags\n  nameWithType: InheritanceFlags\n- uid: System.Security.AccessControl.PropagationFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: PropagationFlags\n  fullName: System.Security.AccessControl.PropagationFlags\n  commentId: T:System.Security.AccessControl.PropagationFlags\n  nameWithType: PropagationFlags\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  fullName: System.Guid\n  commentId: T:System.Guid\n  nameWithType: Guid\n- uid: System.Security.AccessControl.AccessControlType\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessControlType\n  fullName: System.Security.AccessControl.AccessControlType\n  commentId: T:System.Security.AccessControl.AccessControlType\n  nameWithType: AccessControlType\n- uid: System.Security.Principal\n  isExternal: false\n  name: System.Security.Principal\n  fullName: System.Security.Principal\n  commentId: N:System.Security.Principal\n  nameWithType: System.Security.Principal\n- uid: System.Security.AccessControl.ObjectAceFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: ObjectAceFlags\n  fullName: System.Security.AccessControl.ObjectAceFlags\n  commentId: T:System.Security.AccessControl.ObjectAceFlags\n  nameWithType: ObjectAceFlags\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}