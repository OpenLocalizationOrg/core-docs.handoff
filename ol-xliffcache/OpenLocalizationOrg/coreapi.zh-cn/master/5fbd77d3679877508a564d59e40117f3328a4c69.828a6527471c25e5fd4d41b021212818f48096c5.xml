{"nodes":[{"pos":[727,749],"content":"ReadOnlyCollectionBase","needQuote":true,"nodes":[{"content":"ReadOnlyCollectionBase","pos":[0,22]}]},{"pos":[2920,2944],"content":"ReadOnlyCollectionBase()","needQuote":true,"nodes":[{"content":"ReadOnlyCollectionBase()","pos":[0,24]}]},{"pos":[4017,4022],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[5544,5553],"content":"InnerList","needQuote":true,"nodes":[{"content":"InnerList","pos":[0,9]}]},{"pos":[7156,7182],"content":"ICollection.IsSynchronized","needQuote":true,"nodes":[{"content":"ICollection.IsSynchronized","pos":[0,26]}]},{"pos":[9271,9291],"content":"ICollection.SyncRoot","needQuote":true,"nodes":[{"content":"ICollection.SyncRoot","pos":[0,20]}]},{"pos":[11142,11157],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[12979,13011],"content":"ICollection.CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"ICollection.CopyTo(Array, Int32)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The zero-based index in &lt;em&gt;array&lt;/em&gt; at which copying begins.","pos":[14574,14642],"source":"\\n<p>The zero-based index in <em>array</em> at which copying begins."},{"content":"&lt;/p&gt;\\n","pos":[14643,14649],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[14768,14815],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[14816,14822],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero.","pos":[14939,14979],"source":"\\n<p>\\n<em>index</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[14980,14986],"source":" </p>\\n"},{"pos":[16090,16108],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[16275,16281],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16455,16466],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[16679,16690],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[16889,16899],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[16994,17002],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[17071,17072],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17099,17100],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17170,17178],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[17247,17248],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17275,17276],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17459,17473],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[17592,17598],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17665,17666],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17716,17722],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17782,17783],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17866,17872],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17939,17940],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17990,17996],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18056,18057],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18271,18293],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[18441,18447],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[18514,18515],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18565,18571],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18632,18633]},{"pos":[18688,18694],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18754,18755],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18852,18858],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[18925,18926],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18976,18982],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19043,19044]},{"pos":[19099,19105],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19165,19166],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19411,19442],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[19608,19623],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[19699,19700],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19750,19756],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19817,19818]},{"pos":[19873,19879],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19939,19940],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20046,20061],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[20137,20138],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20188,20194],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20255,20256]},{"pos":[20311,20317],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20377,20378],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20608,20621],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[20722,20733],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[20805,20806],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20833,20834],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20907,20918],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[20990,20991],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21018,21019],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21194,21203],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[21296,21303],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[21371,21372],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21399,21400],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21469,21476],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[21544,21545],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21572,21573],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21748,21765],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[21874,21889],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[21965,21966],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21993,21994],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22071,22086],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[22162,22163],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22190,22191],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22486,22499],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[22616,22627],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[22686,22687],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22714,22715],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22796,22807],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[22866,22867],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22894,22895],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23250,23262],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[23395,23405],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[23472,23473],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23500,23501],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23590,23600],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[23667,23668],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23695,23696],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24037,24052],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[24256,24269],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[24331,24332],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24359,24360],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24438,24454],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[24519,24520],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24547,24548],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24926,24943],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[25155,25170],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[25234,25235],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25262,25263],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25343,25361],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[25428,25429],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25456,25457],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25692,25698],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[25863,25887],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[26066,26077],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[26136,26137],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26204,26215],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[26292,26293],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26406,26417],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[26476,26477],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26544,26555],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[26632,26633],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26861,26870],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[27076,27099],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[27294,27304],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[27371,27372],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27439,27450],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[27527,27528],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27649,27659],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[27726,27727],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27794,27805],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[27882,27883],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28136,28154],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[28376,28402],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[28709,28722],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[28784,28785],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28852,28863],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[28940,28941],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29051,29067],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[29132,29133],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29200,29211],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[29288,29289],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29578,29588],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[29788,29816],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[30131,30146],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[30210,30211],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30278,30289],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[30366,30367],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30479,30497],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[30564,30565],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30632,30643],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[30720,30721],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30983,30994],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[31187,31192],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[31393,31398],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[31567,31576],"content":"ArrayList","needQuote":true,"nodes":[{"content":"ArrayList","pos":[0,9]}]},{"pos":[31810,31824],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[32054,32061],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[32259,32267],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[32533,32548],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[32687,32700],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[32770,32771],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32798,32799],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32891,32904],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[32974,32975],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33002,33003],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33219,33230],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[33488,33508],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"pos":[33686,33692],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[33755,33756],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33805,33810],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[33849,33850]},{"pos":[33904,33909],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[33968,33969],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34081,34087],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[34150,34151],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34200,34205],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[34244,34245]},{"pos":[34299,34304],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[34363,34364],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34575,34580],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[34720,34741],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[34935,34962],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[35181,35198],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[35373,35393],"content":"InvalidCastException","needQuote":true,"nodes":[{"content":"InvalidCastException","pos":[0,20]}]}],"content":"items:\n- uid: System.Collections.ReadOnlyCollectionBase\n  commentId: T:System.Collections.ReadOnlyCollectionBase\n  id: ReadOnlyCollectionBase\n  parent: System.Collections\n  children:\n  - System.Collections.ReadOnlyCollectionBase.#ctor\n  - System.Collections.ReadOnlyCollectionBase.Count\n  - System.Collections.ReadOnlyCollectionBase.GetEnumerator\n  - System.Collections.ReadOnlyCollectionBase.InnerList\n  - System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized\n  - System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot\n  langs:\n  - csharp\n  - vb\n  name: ReadOnlyCollectionBase\n  fullName: System.Collections.ReadOnlyCollectionBase\n  type: Class\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadOnlyCollectionBase\n    path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs\n    startLine: 17\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Provides the <strong>abstract</strong> base class for a strongly typed non-generic read-only collection.</p>\\n\"\n  syntax:\n    content: 'public abstract class ReadOnlyCollectionBase : ICollection, IEnumerable'\n    content.vb: >-\n      Public MustInherit Class ReadOnlyCollectionBase\n          Implements ICollection, IEnumerable\n  seealso:\n  - type: System.Collections.ArrayList\n    commentId: T:System.Collections.ArrayList\n  - type: System.Collections.CollectionBase\n    commentId: T:System.Collections.CollectionBase\n  - type: System.Collections.Generic\n    commentId: N:System.Collections.Generic\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.ICollection\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: ReadOnlyCollectionBase\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Collections.ReadOnlyCollectionBase.#ctor\n  commentId: M:System.Collections.ReadOnlyCollectionBase.#ctor\n  id: '#ctor'\n  parent: System.Collections.ReadOnlyCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: ReadOnlyCollectionBase()\n  fullName: System.Collections.ReadOnlyCollectionBase.ReadOnlyCollectionBase()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs\n    startLine: 201\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.ReadOnlyCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected ReadOnlyCollectionBase()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: ReadOnlyCollectionBase.ReadOnlyCollectionBase()\n- uid: System.Collections.ReadOnlyCollectionBase.Count\n  commentId: P:System.Collections.ReadOnlyCollectionBase.Count\n  id: Count\n  parent: System.Collections.ReadOnlyCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Collections.ReadOnlyCollectionBase.Count\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs\n    startLine: 31\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets the number of elements contained in the <xref href=\\\"System.Collections.ReadOnlyCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public virtual int Count { get; }\n    content.vb: Public Overridable ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of elements contained in the <xref href=\\\"System.Collections.ReadOnlyCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n<p>Retrieving the value of this property is an O(1) operation.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.Count\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: ReadOnlyCollectionBase.Count\n- uid: System.Collections.ReadOnlyCollectionBase.InnerList\n  commentId: P:System.Collections.ReadOnlyCollectionBase.InnerList\n  id: InnerList\n  parent: System.Collections.ReadOnlyCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: InnerList\n  fullName: System.Collections.ReadOnlyCollectionBase.InnerList\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InnerList\n    path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs\n    startLine: 21\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets the list of elements contained in the <xref href=\\\"System.Collections.ReadOnlyCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected ArrayList InnerList { get; }\n    content.vb: Protected ReadOnly Property InnerList As ArrayList\n    parameters: []\n    return:\n      type: System.Collections.ArrayList\n      description: \"\\n<p>An <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the <xref href=\\\"System.Collections.ReadOnlyCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance itself.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - get\n  modifiers.vb:\n  - Protected\n  - ReadOnly\n  nameWithType: ReadOnlyCollectionBase.InnerList\n- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Collections.ReadOnlyCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: ICollection.IsSynchronized\n  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.IsSynchronized\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.IsSynchronized\n    path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs\n    startLine: 36\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets a value indicating whether access to a <xref href=\\\"System.Collections.ReadOnlyCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is synchronized (thread safe).</p>\\n\"\n  syntax:\n    content: bool ICollection.IsSynchronized { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if access to the <xref href=\\\"System.Collections.ReadOnlyCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is synchronized (thread safe); otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.ICollection.SyncRoot\n    commentId: P:System.Collections.ICollection.SyncRoot\n  implements:\n  - System.Collections.ICollection.IsSynchronized\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.IsSynchronized\n  nameWithType: ReadOnlyCollectionBase.ICollection.IsSynchronized\n  nameWithType.vb: ReadOnlyCollectionBase.System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot\n  commentId: P:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Collections.ReadOnlyCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: ICollection.SyncRoot\n  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.SyncRoot\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.SyncRoot\n    path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs\n    startLine: 41\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets an object that can be used to synchronize access to a <xref href=\\\"System.Collections.ReadOnlyCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: object ICollection.SyncRoot { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>An object that can be used to synchronize access to the <xref href=\\\"System.Collections.ReadOnlyCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.Collections.ICollection.IsSynchronized\n    commentId: P:System.Collections.ICollection.IsSynchronized\n  implements:\n  - System.Collections.ICollection.SyncRoot\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.SyncRoot\n  nameWithType: ReadOnlyCollectionBase.ICollection.SyncRoot\n  nameWithType.vb: ReadOnlyCollectionBase.System.Collections.ICollection.SyncRoot\n- uid: System.Collections.ReadOnlyCollectionBase.GetEnumerator\n  commentId: M:System.Collections.ReadOnlyCollectionBase.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.ReadOnlyCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Collections.ReadOnlyCollectionBase.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEnumerator\n    path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs\n    startLine: 51\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns an enumerator that iterates through the <xref href=\\\"System.Collections.ReadOnlyCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerator GetEnumerator()\n    content.vb: Public Overridable Function GetEnumerator As IEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the <xref href=\\\"System.Collections.ReadOnlyCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  seealso:\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ReadOnlyCollectionBase.GetEnumerator()\n- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  commentId: M:System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Collections.ReadOnlyCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: ICollection.CopyTo(Array, Int32)\n  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.CopyTo\n    path: src/System.Collections.NonGeneric/src/System/Collections/ReadOnlyCollectionBase.cs\n    startLine: 46\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Copies the entire <xref href=\\\"System.Collections.ReadOnlyCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a compatible one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, starting at the specified index of the target array.</p>\\n\"\n  syntax:\n    content: void ICollection.CopyTo(Array array, int index)\n    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the destination of the elements copied from <xref href=\\\"System.Collections.ReadOnlyCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> must have zero-based indexing. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in <em>array</em> at which copying begins. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n<p>-or- </p>\\n<p>The number of elements in the source <xref href=\\\"System.Collections.ReadOnlyCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>array</em>. </p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The type of the source <xref href=\\\"System.Collections.ReadOnlyCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> cannot be cast automatically to the type of the destination <em>array</em>. </p>\\n\"\n  implements:\n  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)\n  nameWithType: ReadOnlyCollectionBase.ICollection.CopyTo(Array, Int32)\n  nameWithType.vb: ReadOnlyCollectionBase.System.Collections.ICollection.CopyTo(Array, Int32)\nreferences:\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  nameWithType: ICollection\n  commentId: T:System.Collections.ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable()\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel()\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  nameWithType: Queryable\n  commentId: T:System.Linq.Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  nameWithType: Enumerable\n  commentId: T:System.Linq.Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  nameWithType: System.Linq\n  commentId: N:System.Linq\n- uid: System.Collections.ICollection.Count\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: Count\n  fullName: System.Collections.ICollection.Count\n  nameWithType: ICollection.Count\n  commentId: P:System.Collections.ICollection.Count\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Collections.ArrayList\n  parent: System.Collections\n  isExternal: false\n  name: ArrayList\n  fullName: System.Collections.ArrayList\n  nameWithType: ArrayList\n  commentId: T:System.Collections.ArrayList\n- uid: System.Collections.ICollection.IsSynchronized\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Collections.ICollection.IsSynchronized\n  nameWithType: ICollection.IsSynchronized\n  commentId: P:System.Collections.ICollection.IsSynchronized\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.ICollection.SyncRoot\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Collections.ICollection.SyncRoot\n  nameWithType: ICollection.SyncRoot\n  commentId: P:System.Collections.ICollection.SyncRoot\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable.GetEnumerator()\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ICollection\n  isExternal: true\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  spec.csharp:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection.CopyTo(Array, Int32)\n  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  nameWithType: Array\n  commentId: T:System.Array\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.InvalidCastException\n  isExternal: false\n  name: InvalidCastException\n  fullName: System.InvalidCastException\n  nameWithType: InvalidCastException\n  commentId: T:System.InvalidCastException\n"}