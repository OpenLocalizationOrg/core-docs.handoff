{"nodes":[{"pos":[723,736],"content":"Tuple<T1, T2>","needQuote":true,"nodes":[{"content":"Tuple&lt;T1, T2&gt;","pos":[0,13],"source":"Tuple<T1, T2>"}]},{"content":"\\n&lt;p&gt;The type of the tuple's first component.&lt;/p&gt;\\n","pos":[1471,1522],"source":"\\n<p>The type of the tuple's first component.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the tuple's second component.&lt;/p&gt;\\n","pos":[1557,1609],"source":"\\n<p>The type of the tuple's second component.</p>\\n"},{"pos":[2800,2813],"content":"Tuple(T1, T2)","needQuote":true,"nodes":[{"content":"Tuple(T1, T2)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The value of the tuple's first component.&lt;/p&gt;\\n","pos":[3472,3524],"source":"\\n<p>The value of the tuple's first component.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the tuple's second component.&lt;/p&gt;\\n","pos":[3581,3634],"source":"\\n<p>The value of the tuple's second component.</p>\\n"},{"pos":[3977,3982],"content":"Item1","needQuote":true,"nodes":[{"content":"Item1","pos":[0,5]}]},{"pos":[5108,5113],"content":"Item2","needQuote":true,"nodes":[{"content":"Item2","pos":[0,5]}]},{"pos":[6289,6303],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare with this instance.&lt;/p&gt;\\n","pos":[7045,7097],"source":"\\n<p>The object to compare with this instance.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current instance is equal to the specified object; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[7158,7285],"source":"\\n<p>\\n<strong>true</strong> if the current instance is equal to the specified object; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[7733,7746],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[8406,8451],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[9142,9192],"content":"IStructuralComparable.CompareTo(Object, IComparer)","needQuote":true,"nodes":[{"content":"IStructuralComparable.CompareTo(Object, IComparer)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;An object to compare with the current instance.&lt;/p&gt;\\n","pos":[10320,10378],"source":"\\n<p>An object to compare with the current instance.</p>\\n"},{"content":"\\n&lt;p&gt;An object that provides custom rules for comparison.&lt;/p&gt;\\n","pos":[10460,10523],"source":"\\n<p>An object that provides custom rules for comparison.</p>\\n"},{"content":"\\n&lt;p&gt;A signed integer that indicates the relative position of this instance and &lt;em&gt;other&lt;/em&gt; in the sort order, as shown in the following table.&lt;/p&gt;\\n&lt;p&gt;Value&lt;/p&gt;\\n&lt;p&gt;Description&lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;A negative integer&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance precedes &lt;em&gt;other&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance and &lt;em&gt;other&lt;/em&gt; have the same position in the sort order.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;A positive integer&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance follows &lt;em&gt;other&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[10582,11136],"source":"\\n<p>A signed integer that indicates the relative position of this instance and <em>other</em> in the sort order, as shown in the following table.</p>\\n<p>Value</p>\\n<p>Description</p>\\n<table><tbody><tr><td>\\n<p>A negative integer</p>\\n</td><td>\\n<p>This instance precedes <em>other</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>This instance and <em>other</em> have the same position in the sort order.</p>\\n</td></tr><tr><td>\\n<p>A positive integer</p>\\n</td><td>\\n<p>This instance follows <em>other</em>.</p>\\n</td></tr></tbody></table>\\n"},{"pos":[12579,12633],"content":"IStructuralEquatable.Equals(Object, IEqualityComparer)","needQuote":true,"nodes":[{"content":"IStructuralEquatable.Equals(Object, IEqualityComparer)","pos":[0,54]}]},{"content":"\\n&lt;p&gt;The object to compare with this instance.&lt;/p&gt;\\n","pos":[13664,13716],"source":"\\n<p>The object to compare with this instance.</p>\\n"},{"content":"\\n&lt;p&gt;An object that defines the method to use to evaluate whether the two objects are equal.&lt;/p&gt;\\n","pos":[13806,13904],"source":"\\n<p>An object that defines the method to use to evaluate whether the two objects are equal.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current instance is equal to the specified object; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[13965,14092],"source":"\\n<p>\\n<strong>true</strong> if the current instance is equal to the specified object; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[15144,15195],"content":"IStructuralEquatable.GetHashCode(IEqualityComparer)","needQuote":true,"nodes":[{"content":"IStructuralEquatable.GetHashCode(IEqualityComparer)","pos":[0,51]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[16530,16575],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[17349,17378],"content":"IComparable.CompareTo(Object)","needQuote":true,"nodes":[{"content":"IComparable.CompareTo(Object)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;An object to compare with the current instance.&lt;/p&gt;\\n","pos":[18310,18368],"source":"\\n<p>An object to compare with the current instance.</p>\\n"},{"content":"\\n&lt;p&gt;A signed integer that indicates the relative position of this instance and &lt;em&gt;obj&lt;/em&gt; in the sort order, as shown in the following table.&lt;/p&gt;\\n&lt;p&gt;Value&lt;/p&gt;\\n&lt;p&gt;Description&lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;A negative integer&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance precedes &lt;em&gt;obj&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance and &lt;em&gt;obj&lt;/em&gt; have the same position in the sort order.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;A positive integer&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance follows &lt;em&gt;obj&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[18427,18973],"source":"\\n<p>A signed integer that indicates the relative position of this instance and <em>obj</em> in the sort order, as shown in the following table.</p>\\n<p>Value</p>\\n<p>Description</p>\\n<table><tbody><tr><td>\\n<p>A negative integer</p>\\n</td><td>\\n<p>This instance precedes <em>obj</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>This instance and <em>obj</em> have the same position in the sort order.</p>\\n</td></tr><tr><td>\\n<p>A positive integer</p>\\n</td><td>\\n<p>This instance follows <em>obj</em>.</p>\\n</td></tr></tbody></table>\\n"},{"pos":[19786,19796],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[20905,20911],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[21042,21048],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21232,21253],"content":"IStructuralComparable","needQuote":true,"nodes":[{"content":"IStructuralComparable","pos":[0,21]}]},{"pos":[21505,21525],"content":"IStructuralEquatable","needQuote":true,"nodes":[{"content":"IStructuralEquatable","pos":[0,20]}]},{"pos":[21741,21752],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[21954,21976],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[22124,22130],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22197,22198],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22248,22254],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22315,22316]},{"pos":[22371,22377],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22437,22438],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22535,22541],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22608,22609],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22659,22665],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22726,22727]},{"pos":[22782,22788],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22848,22849],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23094,23125],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[23291,23306],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[23382,23383],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23433,23439],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23500,23501]},{"pos":[23556,23562],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23622,23623],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23729,23744],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[23820,23821],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23871,23877],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23938,23939]},{"pos":[23994,24000],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24060,24061],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24287,24296],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[24389,24396],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[24464,24465],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24492,24493],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24562,24569],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[24637,24638],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24665,24666],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24841,24858],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[24967,24982],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[25058,25059],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25086,25087],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25164,25179],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[25255,25256],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25283,25284],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25441,25459],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[25599,25601],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"pos":[25695,25697],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"pos":[25790,25792],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"pos":[25865,25867],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"pos":[25996,26010],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[26129,26135],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26202,26203],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26253,26259],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26319,26320],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26403,26409],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26476,26477],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26527,26533],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26593,26594],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26767,26774],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[26940,26953],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[27054,27065],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[27137,27138],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27165,27166],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27239,27250],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[27322,27323],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27350,27351],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27511,27516],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[27772,27800],"content":"CompareTo(Object, IComparer)","needQuote":true,"nodes":[{"content":"CompareTo(Object, IComparer)","pos":[0,28]}]},{"pos":[28038,28047],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[28123,28124],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28174,28180],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28241,28242]},{"pos":[28312,28321],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[28375,28376],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28518,28527],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[28603,28604],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28654,28660],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28721,28722]},{"pos":[28792,28801],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[28855,28856],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29143,29152],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[29447,29480],"content":"Equals(Object, IEqualityComparer)","needQuote":true,"nodes":[{"content":"Equals(Object, IEqualityComparer)","pos":[0,33]}]},{"pos":[29726,29732],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29804,29805],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29855,29861],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29922,29923]},{"pos":[30001,30018],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[30080,30081],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30227,30233],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[30305,30306],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30356,30362],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30423,30424]},{"pos":[30502,30519],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[30581,30582],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30885,30902],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[31213,31243],"content":"GetHashCode(IEqualityComparer)","needQuote":true,"nodes":[{"content":"GetHashCode(IEqualityComparer)","pos":[0,30]}]},{"pos":[31470,31481],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[31558,31559],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31632,31649],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[31711,31712],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31849,31860],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[31937,31938],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32011,32028],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[32090,32091],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32388,32405],"content":"CompareTo(Object)","needQuote":true,"nodes":[{"content":"CompareTo(Object)","pos":[0,17]}]},{"pos":[32540,32549],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[32603,32604],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32654,32660],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32720,32721],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32812,32821],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[32875,32876],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32926,32932],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32992,32993],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33196,33206],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[33301,33309],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[33378,33379],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33406,33407],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33477,33485],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[33554,33555],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33582,33583],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33738,33744],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[33900,33917],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Tuple`2\n  commentId: T:System.Tuple`2\n  id: Tuple`2\n  parent: System\n  children:\n  - System.Tuple`2.#ctor(`0,`1)\n  - System.Tuple`2.Equals(System.Object)\n  - System.Tuple`2.GetHashCode\n  - System.Tuple`2.Item1\n  - System.Tuple`2.Item2\n  - System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)\n  - System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)\n  - System.Tuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)\n  - System.Tuple`2.System#IComparable#CompareTo(System.Object)\n  - System.Tuple`2.ToString\n  langs:\n  - csharp\n  - vb\n  name: Tuple<T1, T2>\n  fullName: System.Tuple<T1, T2>\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Tuple\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 157\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents a 2-tuple, or pair. </p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      public class Tuple<T1, T2> : IStructuralEquatable, IStructuralComparable, IComparable, ITuple\n    content.vb: >-\n      <Serializable>\n\n      Public Class Tuple(Of T1, T2)\n          Implements IStructuralEquatable, IStructuralComparable, IComparable, ITuple\n    typeParameters:\n    - id: T1\n      description: \"\\n<p>The type of the tuple's first component.</p>\\n\"\n    - id: T2\n      description: \"\\n<p>The type of the tuple's second component.</p>\\n\"\n  seealso:\n  - type: System.Tuple\n    commentId: T:System.Tuple\n  - type: System.Tuple`1\n    commentId: T:System.Tuple`1\n  - type: System.Tuple`3\n    commentId: T:System.Tuple`3\n  - type: System.Tuple`4\n    commentId: T:System.Tuple`4\n  - type: System.Tuple`5\n    commentId: T:System.Tuple`5\n  - type: System.Tuple`6\n    commentId: T:System.Tuple`6\n  - type: System.Tuple`7\n    commentId: T:System.Tuple`7\n  - type: System.Tuple`8\n    commentId: T:System.Tuple`8\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IStructuralComparable\n  - System.Collections.IStructuralEquatable\n  - System.IComparable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  fullName.vb: System.Tuple(Of T1, T2)\n  name.vb: Tuple(Of T1, T2)\n  nameWithType: Tuple<T1, T2>\n  nameWithType.vb: Tuple(Of T1, T2)\n- uid: System.Tuple`2.#ctor(`0,`1)\n  commentId: M:System.Tuple`2.#ctor(`0,`1)\n  id: '#ctor(`0,`1)'\n  parent: System.Tuple`2\n  langs:\n  - csharp\n  - vb\n  name: Tuple(T1, T2)\n  fullName: System.Tuple<T1, T2>.Tuple(T1, T2)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 166\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Tuple`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public Tuple(T1 item1, T2 item2)\n    content.vb: Public Sub New(item1 As T1, item2 As T2)\n    parameters:\n    - id: item1\n      type: '{T1}'\n      description: \"\\n<p>The value of the tuple's first component.</p>\\n\"\n    - id: item2\n      type: '{T2}'\n      description: \"\\n<p>The value of the tuple's second component.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Tuple(Of T1, T2).Tuple(T1, T2)\n  nameWithType: Tuple<T1, T2>.Tuple(T1, T2)\n  nameWithType.vb: Tuple(Of T1, T2).Tuple(T1, T2)\n- uid: System.Tuple`2.Item1\n  commentId: P:System.Tuple`2.Item1\n  id: Item1\n  parent: System.Tuple`2\n  langs:\n  - csharp\n  - vb\n  name: Item1\n  fullName: System.Tuple<T1, T2>.Item1\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Item1\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 163\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the value of the current <xref href=\\\"System.Tuple`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object's first component.</p>\\n\"\n  syntax:\n    content: public T1 Item1 { get; }\n    content.vb: Public ReadOnly Property Item1 As T1\n    parameters: []\n    return:\n      type: '{T1}'\n      description: \"\\n<p>The value of the current <xref href=\\\"System.Tuple`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object's first component.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Tuple(Of T1, T2).Item1\n  nameWithType: Tuple<T1, T2>.Item1\n  nameWithType.vb: Tuple(Of T1, T2).Item1\n- uid: System.Tuple`2.Item2\n  commentId: P:System.Tuple`2.Item2\n  id: Item2\n  parent: System.Tuple`2\n  langs:\n  - csharp\n  - vb\n  name: Item2\n  fullName: System.Tuple<T1, T2>.Item2\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Item2\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 164\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the value of the current <xref href=\\\"System.Tuple`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object's second component.</p>\\n\"\n  syntax:\n    content: public T2 Item2 { get; }\n    content.vb: Public ReadOnly Property Item2 As T2\n    parameters: []\n    return:\n      type: '{T2}'\n      description: \"\\n<p>The value of the current <xref href=\\\"System.Tuple`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object's second component.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Tuple(Of T1, T2).Item2\n  nameWithType: Tuple<T1, T2>.Item2\n  nameWithType.vb: Tuple(Of T1, T2).Item2\n- uid: System.Tuple`2.Equals(System.Object)\n  commentId: M:System.Tuple`2.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Tuple`2\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Tuple<T1, T2>.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 171\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value that indicates whether the current <xref href=\\\"System.Tuple`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is equal to a specified object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare with this instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current instance is equal to the specified object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Tuple(Of T1, T2).Equals(System.Object)\n  nameWithType: Tuple<T1, T2>.Equals(Object)\n  nameWithType.vb: Tuple(Of T1, T2).Equals(Object)\n- uid: System.Tuple`2.GetHashCode\n  commentId: M:System.Tuple`2.GetHashCode\n  id: GetHashCode\n  parent: System.Tuple`2\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Tuple<T1, T2>.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 209\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the hash code for the current <xref href=\\\"System.Tuple`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Tuple(Of T1, T2).GetHashCode()\n  nameWithType: Tuple<T1, T2>.GetHashCode()\n  nameWithType.vb: Tuple(Of T1, T2).GetHashCode()\n- uid: System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)\n  commentId: M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)\n  id: System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)\n  isEii: true\n  parent: System.Tuple`2\n  langs:\n  - csharp\n  - vb\n  name: IStructuralComparable.CompareTo(Object, IComparer)\n  fullName: System.Tuple<T1, T2>.System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IStructuralComparable.CompareTo\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 191\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Compares the current <xref href=\\\"System.Tuple`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\\n\"\n  syntax:\n    content: int IStructuralComparable.CompareTo(object other, IComparer comparer)\n    content.vb: Function System.Collections.IStructuralComparable.CompareTo(other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo\n    parameters:\n    - id: other\n      type: System.Object\n      description: \"\\n<p>An object to compare with the current instance.</p>\\n\"\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"\\n<p>An object that provides custom rules for comparison.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed integer that indicates the relative position of this instance and <em>other</em> in the sort order, as shown in the following table.</p>\\n<p>Value</p>\\n<p>Description</p>\\n<table><tbody><tr><td>\\n<p>A negative integer</p>\\n</td><td>\\n<p>This instance precedes <em>other</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>This instance and <em>other</em> have the same position in the sort order.</p>\\n</td></tr><tr><td>\\n<p>A positive integer</p>\\n</td><td>\\n<p>This instance follows <em>other</em>.</p>\\n</td></tr></tbody></table>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>other</em> is not a <xref href=\\\"System.Tuple`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)\n    commentId: M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)\n  implements:\n  - System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\n  fullName.vb: System.Tuple(Of T1, T2).System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)\n  name.vb: System.Collections.IStructuralComparable.CompareTo(Object, IComparer)\n  nameWithType: Tuple<T1, T2>.IStructuralComparable.CompareTo(Object, IComparer)\n  nameWithType.vb: Tuple(Of T1, T2).System.Collections.IStructuralComparable.CompareTo(Object, IComparer)\n- uid: System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)\n  commentId: M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)\n  id: System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)\n  isEii: true\n  parent: System.Tuple`2\n  langs:\n  - csharp\n  - vb\n  name: IStructuralEquatable.Equals(Object, IEqualityComparer)\n  fullName: System.Tuple<T1, T2>.System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IStructuralEquatable.Equals\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 175\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value that indicates whether the current <xref href=\\\"System.Tuple`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is equal to a specified object based on a specified comparison method.</p>\\n\"\n  syntax:\n    content: bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer)\n    content.vb: Function System.Collections.IStructuralEquatable.Equals(other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals\n    parameters:\n    - id: other\n      type: System.Object\n      description: \"\\n<p>The object to compare with this instance.</p>\\n\"\n    - id: comparer\n      type: System.Collections.IEqualityComparer\n      description: \"\\n<p>An object that defines the method to use to evaluate whether the two objects are equal.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current instance is equal to the specified object; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.IEqualityComparer\n    commentId: T:System.Collections.IEqualityComparer\n  implements:\n  - System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\n  fullName.vb: System.Tuple(Of T1, T2).System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)\n  name.vb: System.Collections.IStructuralEquatable.Equals(Object, IEqualityComparer)\n  nameWithType: Tuple<T1, T2>.IStructuralEquatable.Equals(Object, IEqualityComparer)\n  nameWithType.vb: Tuple(Of T1, T2).System.Collections.IStructuralEquatable.Equals(Object, IEqualityComparer)\n- uid: System.Tuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)\n  commentId: M:System.Tuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)\n  id: System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)\n  isEii: true\n  parent: System.Tuple`2\n  langs:\n  - csharp\n  - vb\n  name: IStructuralEquatable.GetHashCode(IEqualityComparer)\n  fullName: System.Tuple<T1, T2>.System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IStructuralEquatable.GetHashCode\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 213\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Calculates the hash code for the current <xref href=\\\"System.Tuple`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object by using a specified computation method.</p>\\n\"\n  syntax:\n    content: int IStructuralEquatable.GetHashCode(IEqualityComparer comparer)\n    content.vb: Function System.Collections.IStructuralEquatable.GetHashCode(comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode\n    parameters:\n    - id: comparer\n      type: System.Collections.IEqualityComparer\n      description: \"\\n<p>An object whose <xref href=\\\"System.Collections.IEqualityComparer.GetHashCode(System.Object)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  method calculates the hash code of the current <xref href=\\\"System.Tuple`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  implements:\n  - System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n  fullName.vb: System.Tuple(Of T1, T2).System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n  name.vb: System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer)\n  nameWithType: Tuple<T1, T2>.IStructuralEquatable.GetHashCode(IEqualityComparer)\n  nameWithType.vb: Tuple(Of T1, T2).System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer)\n- uid: System.Tuple`2.System#IComparable#CompareTo(System.Object)\n  commentId: M:System.Tuple`2.System#IComparable#CompareTo(System.Object)\n  id: System#IComparable#CompareTo(System.Object)\n  isEii: true\n  parent: System.Tuple`2\n  langs:\n  - csharp\n  - vb\n  name: IComparable.CompareTo(Object)\n  fullName: System.Tuple<T1, T2>.System.IComparable.CompareTo(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IComparable.CompareTo\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 187\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Compares the current <xref href=\\\"System.Tuple`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\\n\"\n  syntax:\n    content: int IComparable.CompareTo(object obj)\n    content.vb: Function System.IComparable.CompareTo(obj As Object) As Integer Implements IComparable.CompareTo\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>An object to compare with the current instance.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed integer that indicates the relative position of this instance and <em>obj</em> in the sort order, as shown in the following table.</p>\\n<p>Value</p>\\n<p>Description</p>\\n<table><tbody><tr><td>\\n<p>A negative integer</p>\\n</td><td>\\n<p>This instance precedes <em>obj</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>This instance and <em>obj</em> have the same position in the sort order.</p>\\n</td></tr><tr><td>\\n<p>A positive integer</p>\\n</td><td>\\n<p>This instance follows <em>obj</em>.</p>\\n</td></tr></tbody></table>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>obj</em> is not a <xref href=\\\"System.Tuple`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.Tuple`2.Equals(System.Object)\n    commentId: M:System.Tuple`2.Equals(System.Object)\n  implements:\n  - System.IComparable.CompareTo(System.Object)\n  fullName.vb: System.Tuple(Of T1, T2).System.IComparable.CompareTo(System.Object)\n  name.vb: System.IComparable.CompareTo(Object)\n  nameWithType: Tuple<T1, T2>.IComparable.CompareTo(Object)\n  nameWithType.vb: Tuple(Of T1, T2).System.IComparable.CompareTo(Object)\n- uid: System.Tuple`2.ToString\n  commentId: M:System.Tuple`2.ToString\n  id: ToString\n  parent: System.Tuple`2\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Tuple<T1, T2>.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 220\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a string that represents the value of this <xref href=\\\"System.Tuple`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of this <xref href=\\\"System.Tuple`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Tuple(Of T1, T2).ToString()\n  nameWithType: Tuple<T1, T2>.ToString()\n  nameWithType.vb: Tuple(Of T1, T2).ToString()\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.IStructuralComparable\n  parent: System.Collections\n  isExternal: false\n  name: IStructuralComparable\n  fullName: System.Collections.IStructuralComparable\n  nameWithType: IStructuralComparable\n  commentId: T:System.Collections.IStructuralComparable\n- uid: System.Collections.IStructuralEquatable\n  parent: System.Collections\n  isExternal: false\n  name: IStructuralEquatable\n  fullName: System.Collections.IStructuralEquatable\n  nameWithType: IStructuralEquatable\n  commentId: T:System.Collections.IStructuralEquatable\n- uid: System.IComparable\n  parent: System\n  isExternal: false\n  name: IComparable\n  fullName: System.IComparable\n  nameWithType: IComparable\n  commentId: T:System.IComparable\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: '{T1}'\n  definition: T1\n  name: T1\n  fullName: T1\n  nameWithType: T1\n  commentId: '!:T1'\n- uid: '{T2}'\n  definition: T2\n  name: T2\n  fullName: T2\n  nameWithType: T2\n  commentId: '!:T2'\n- uid: T1\n  isExternal: false\n  name: T1\n  fullName: T1\n  nameWithType: T1\n- uid: T2\n  isExternal: false\n  name: T2\n  fullName: T2\n  nameWithType: T2\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\n  parent: System.Collections.IStructuralComparable\n  isExternal: true\n  name: CompareTo(Object, IComparer)\n  fullName: System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)\n  spec.csharp:\n  - uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\n    name: CompareTo\n    fullName: System.Collections.IStructuralComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.IComparer\n    name: IComparer\n    fullName: System.Collections.IComparer\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\n    name: CompareTo\n    fullName: System.Collections.IStructuralComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.IComparer\n    name: IComparer\n    fullName: System.Collections.IComparer\n  - name: )\n    fullName: )\n  nameWithType: IStructuralComparable.CompareTo(Object, IComparer)\n  commentId: M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\n- uid: System.Collections.IComparer\n  parent: System.Collections\n  isExternal: false\n  name: IComparer\n  fullName: System.Collections.IComparer\n  nameWithType: IComparer\n  commentId: T:System.Collections.IComparer\n- uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\n  parent: System.Collections.IStructuralEquatable\n  isExternal: true\n  name: Equals(Object, IEqualityComparer)\n  fullName: System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)\n  spec.csharp:\n  - uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\n    name: Equals\n    fullName: System.Collections.IStructuralEquatable.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.IEqualityComparer\n    name: IEqualityComparer\n    fullName: System.Collections.IEqualityComparer\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\n    name: Equals\n    fullName: System.Collections.IStructuralEquatable.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.IEqualityComparer\n    name: IEqualityComparer\n    fullName: System.Collections.IEqualityComparer\n  - name: )\n    fullName: )\n  nameWithType: IStructuralEquatable.Equals(Object, IEqualityComparer)\n  commentId: M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\n- uid: System.Collections.IEqualityComparer\n  parent: System.Collections\n  isExternal: false\n  name: IEqualityComparer\n  fullName: System.Collections.IEqualityComparer\n  nameWithType: IEqualityComparer\n  commentId: T:System.Collections.IEqualityComparer\n- uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n  parent: System.Collections.IStructuralEquatable\n  isExternal: false\n  name: GetHashCode(IEqualityComparer)\n  fullName: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n  spec.csharp:\n  - uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n    name: GetHashCode\n    fullName: System.Collections.IStructuralEquatable.GetHashCode\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEqualityComparer\n    name: IEqualityComparer\n    fullName: System.Collections.IEqualityComparer\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n    name: GetHashCode\n    fullName: System.Collections.IStructuralEquatable.GetHashCode\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEqualityComparer\n    name: IEqualityComparer\n    fullName: System.Collections.IEqualityComparer\n  - name: )\n    fullName: )\n  nameWithType: IStructuralEquatable.GetHashCode(IEqualityComparer)\n  commentId: M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n- uid: System.IComparable.CompareTo(System.Object)\n  parent: System.IComparable\n  isExternal: true\n  name: CompareTo(Object)\n  fullName: System.IComparable.CompareTo(System.Object)\n  spec.csharp:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable.CompareTo(Object)\n  commentId: M:System.IComparable.CompareTo(System.Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}