{"nodes":[{"pos":[1361,1375],"content":"CountdownEvent","needQuote":true,"nodes":[{"content":"CountdownEvent","pos":[0,14]}]},{"pos":[3106,3127],"content":"CountdownEvent(Int32)","needQuote":true,"nodes":[{"content":"CountdownEvent(Int32)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;initialCount&lt;/em&gt; is less than 0.&lt;/p&gt;\\n","pos":[4204,4254],"source":"\\n<p>\\n<em>initialCount</em> is less than 0.</p>\\n"},{"pos":[4575,4587],"content":"CurrentCount","needQuote":true,"nodes":[{"content":"CurrentCount","pos":[0,12]}]},{"content":"\\n&lt;p&gt; The number of remaining signals required to set the event.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[5270,5349],"source":"\\n<p> The number of remaining signals required to set the event.</p>\\n<p></p>\\n"},{"pos":[5682,5694],"content":"InitialCount","needQuote":true,"nodes":[{"content":"InitialCount","pos":[0,12]}]},{"content":"\\n&lt;p&gt; The number of signals initially required to set the event.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[6378,6457],"source":"\\n<p> The number of signals initially required to set the event.</p>\\n<p></p>\\n"},{"pos":[6769,6774],"content":"IsSet","needQuote":true,"nodes":[{"content":"IsSet","pos":[0,5]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current count is zero; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[7525,7624],"source":"\\n<p>\\n<strong>true</strong> if the current count is zero; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[7944,7954],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The current instance has already been disposed.&lt;/p&gt;\\n","pos":[9001,9059],"source":"\\n<p>The current instance has already been disposed.</p>\\n"},{"pos":[9378,9388],"content":"AddCount()","needQuote":true,"nodes":[{"content":"AddCount()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The current instance has already been disposed.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[10137,10204],"source":"\\n<p>The current instance has already been disposed.</p>\\n<p></p>\\n"},{"pos":[10943,10958],"content":"AddCount(Int32)","needQuote":true,"nodes":[{"content":"AddCount(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The current instance has already been disposed.&lt;/p&gt;\\n","pos":[12004,12062],"source":"\\n<p>The current instance has already been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;signalCount&lt;/em&gt; is less than or equal to 0.&lt;/p&gt;\\n","pos":[12179,12240],"source":"\\n<p>\\n<em>signalCount</em> is less than or equal to 0.</p>\\n"},{"pos":[12990,12999],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[14035,14051],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;true to release both managed and unmanaged resources; false to release only unmanaged resources.&lt;/p&gt;\\n","pos":[14888,14995],"source":"\\n<p>true to release both managed and unmanaged resources; false to release only unmanaged resources.</p>\\n"},{"pos":[15324,15331],"content":"Reset()","needQuote":true,"nodes":[{"content":"Reset()","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The current instance has already been disposed..&lt;/p&gt;\\n","pos":[16175,16234],"source":"\\n<p>The current instance has already been disposed..</p>\\n"},{"pos":[16562,16574],"content":"Reset(Int32)","needQuote":true,"nodes":[{"content":"Reset(Int32)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The current instance has alread been disposed.&lt;/p&gt;\\n","pos":[17590,17647],"source":"\\n<p>The current instance has alread been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than 0.&lt;/p&gt;\\n","pos":[17764,17807],"source":"\\n<p>\\n<em>count</em> is less than 0.</p>\\n"},{"pos":[18101,18109],"content":"Signal()","needQuote":true,"nodes":[{"content":"Signal()","pos":[0,8]}]},{"content":"\\n&lt;p&gt;true if the signal caused the count to reach zero and the event was set; otherwise, false.&lt;/p&gt;\\n","pos":[18926,19027],"source":"\\n<p>true if the signal caused the count to reach zero and the event was set; otherwise, false.</p>\\n"},{"content":"\\n&lt;p&gt;The current instance has already been disposed.&lt;/p&gt;\\n","pos":[19150,19208],"source":"\\n<p>The current instance has already been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The current instance is already set.&lt;/p&gt;\\n","pos":[19321,19368],"source":"\\n<p>The current instance is already set.</p>\\n"},{"pos":[19700,19713],"content":"Signal(Int32)","needQuote":true,"nodes":[{"content":"Signal(Int32)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The number of signals to register.&lt;/p&gt;\\n","pos":[20637,20682],"source":"\\n<p>The number of signals to register.</p>\\n"},{"content":"\\n&lt;p&gt;true if the signals caused the count to reach zero and the event was set; otherwise, false.&lt;/p&gt;\\n","pos":[20743,20845],"source":"\\n<p>true if the signals caused the count to reach zero and the event was set; otherwise, false.</p>\\n"},{"content":"\\n&lt;p&gt;The current instance has already been disposed.&lt;/p&gt;\\n","pos":[20968,21026],"source":"\\n<p>The current instance has already been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;signalCount&lt;/em&gt; is less than 1.&lt;/p&gt;\\n","pos":[21143,21192],"source":"\\n<p>\\n<em>signalCount</em> is less than 1.</p>\\n"},{"pos":[21813,21826],"content":"TryAddCount()","needQuote":true,"nodes":[{"content":"TryAddCount()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The current instance has already been disposed.&lt;/p&gt;\\n","pos":[22888,22946],"source":"\\n<p>The current instance has already been disposed.</p>\\n"},{"pos":[23623,23641],"content":"TryAddCount(Int32)","needQuote":true,"nodes":[{"content":"TryAddCount(Int32)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The current instance has already been disposed.&lt;/p&gt;\\n","pos":[24992,25050],"source":"\\n<p>The current instance has already been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;signalCount&lt;/em&gt; is less than or equal to 0.&lt;/p&gt;\\n","pos":[25167,25228],"source":"\\n<p>\\n<em>signalCount</em> is less than or equal to 0.</p>\\n"},{"pos":[25944,25950],"content":"Wait()","needQuote":true,"nodes":[{"content":"Wait()","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The current instance has already been disposed.&lt;/p&gt;\\n","pos":[26688,26746],"source":"\\n<p>The current instance has already been disposed.</p>\\n"},{"pos":[27070,27081],"content":"Wait(Int32)","needQuote":true,"nodes":[{"content":"Wait(Int32)","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The current instance has already been disposed.&lt;/p&gt;\\n","pos":[28420,28478],"source":"\\n<p>The current instance has already been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;millisecondsTimeout&lt;/em&gt; is a negative number other than -1, which represents an infinite time-out.&lt;/p&gt;\\n","pos":[28595,28711],"source":"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n"},{"pos":[29145,29175],"content":"Wait(Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"Wait(Int32, CancellationToken)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;cancellationToken&lt;/em&gt; has been canceled.&lt;/p&gt;\\n","pos":[30965,31023],"source":"\\n<p>\\n<em>cancellationToken</em> has been canceled.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;millisecondsTimeout&lt;/em&gt; is a negative number other than -1, which represents an infinite time-out.&lt;/p&gt;\\n","pos":[31484,31600],"source":"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n"},{"pos":[32014,32037],"content":"Wait(CancellationToken)","needQuote":true,"nodes":[{"content":"Wait(CancellationToken)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;cancellationToken&lt;/em&gt; has been canceled.&lt;/p&gt;\\n","pos":[33238,33296],"source":"\\n<p>\\n<em>cancellationToken</em> has been canceled.</p>\\n"},{"pos":[33990,34004],"content":"Wait(TimeSpan)","needQuote":true,"nodes":[{"content":"Wait(TimeSpan)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The current instance has already been disposed.&lt;/p&gt;\\n","pos":[35479,35537],"source":"\\n<p>The current instance has already been disposed.</p>\\n"},{"pos":[36328,36361],"content":"Wait(TimeSpan, CancellationToken)","needQuote":true,"nodes":[{"content":"Wait(TimeSpan, CancellationToken)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;cancellationToken&lt;/em&gt; has been canceled.&lt;/p&gt;\\n","pos":[38287,38345],"source":"\\n<p>\\n<em>cancellationToken</em> has been canceled.</p>\\n"},{"pos":[39223,39239],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[39400,39406],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[39556,39567],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[39742,39752],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[39847,39855],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[39924,39925],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39952,39953],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40023,40031],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[40100,40101],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40128,40129],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40312,40326],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[40445,40451],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[40518,40519],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40569,40575],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[40635,40636],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40719,40725],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[40792,40793],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40843,40849],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[40909,40910],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41124,41146],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[41294,41300],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[41367,41368],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41418,41424],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[41485,41486]},{"pos":[41541,41547],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[41607,41608],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41705,41711],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[41778,41779],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41829,41835],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[41896,41897]},{"pos":[41952,41958],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[42018,42019],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42264,42295],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[42461,42476],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[42552,42553],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42603,42609],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[42670,42671]},{"pos":[42726,42732],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[42792,42793],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42899,42914],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[42990,42991],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43041,43047],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[43108,43109]},{"pos":[43164,43170],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[43230,43231],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43461,43474],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[43575,43586],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[43658,43659],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43686,43687],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43760,43771],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[43843,43844],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43871,43872],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44047,44056],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[44149,44156],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[44224,44225],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44252,44253],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44322,44329],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[44397,44398],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44425,44426],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44601,44618],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[44727,44742],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[44818,44819],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44846,44847],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44924,44939],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[45015,45016],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45043,45044],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45189,45195],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[45325,45330],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[45473,45480],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[45652,45662],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[45864,45873],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[45976,45983],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[46035,46036],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46063,46064],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46138,46145],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[46197,46198],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46225,46226],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46420,46437],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[46637,46645],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[46800,46827],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[47035,47058],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]},{"pos":[47273,47298],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[47520,47546],"content":"OperationCanceledException","needQuote":true,"nodes":[{"content":"OperationCanceledException","pos":[0,26]}]}],"content":"items:\n- uid: System.Threading.CountdownEvent\n  commentId: T:System.Threading.CountdownEvent\n  id: CountdownEvent\n  parent: System.Threading\n  children:\n  - System.Threading.CountdownEvent.#ctor(System.Int32)\n  - System.Threading.CountdownEvent.AddCount\n  - System.Threading.CountdownEvent.AddCount(System.Int32)\n  - System.Threading.CountdownEvent.CurrentCount\n  - System.Threading.CountdownEvent.Dispose\n  - System.Threading.CountdownEvent.Dispose(System.Boolean)\n  - System.Threading.CountdownEvent.InitialCount\n  - System.Threading.CountdownEvent.IsSet\n  - System.Threading.CountdownEvent.Reset\n  - System.Threading.CountdownEvent.Reset(System.Int32)\n  - System.Threading.CountdownEvent.Signal\n  - System.Threading.CountdownEvent.Signal(System.Int32)\n  - System.Threading.CountdownEvent.TryAddCount\n  - System.Threading.CountdownEvent.TryAddCount(System.Int32)\n  - System.Threading.CountdownEvent.Wait\n  - System.Threading.CountdownEvent.Wait(System.Int32)\n  - System.Threading.CountdownEvent.Wait(System.Int32,System.Threading.CancellationToken)\n  - System.Threading.CountdownEvent.Wait(System.Threading.CancellationToken)\n  - System.Threading.CountdownEvent.Wait(System.TimeSpan)\n  - System.Threading.CountdownEvent.Wait(System.TimeSpan,System.Threading.CancellationToken)\n  - System.Threading.CountdownEvent.WaitHandle\n  langs:\n  - csharp\n  - vb\n  name: CountdownEvent\n  fullName: System.Threading.CountdownEvent\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CountdownEvent\n    path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n    startLine: 32\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Represents a synchronization primitive that is signaled when its count reaches zero.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      [DebuggerDisplay(\"Initial Count={InitialCount}, Current Count={CurrentCount}\")]\n\n      [HostProtection(Synchronization = true, ExternalThreading = true)]\n\n      public class CountdownEvent : IDisposable\n    content.vb: >-\n      <ComVisible(False)>\n\n      <DebuggerDisplay(\"Initial Count={InitialCount}, Current Count={CurrentCount}\")>\n\n      <HostProtection(Synchronization:=True, ExternalThreading:=True)>\n\n      Public Class CountdownEvent\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: CountdownEvent\n- uid: System.Threading.CountdownEvent.#ctor(System.Int32)\n  commentId: M:System.Threading.CountdownEvent.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  - vb\n  name: CountdownEvent(Int32)\n  fullName: System.Threading.CountdownEvent.CountdownEvent(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n    startLine: 57\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Initializes a new instance of <xref href=\\\"System.Threading.CountdownEvent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified count.</p>\\n\"\n  syntax:\n    content: public CountdownEvent(int initialCount)\n    content.vb: Public Sub New(initialCount As Integer)\n    parameters:\n    - id: initialCount\n      type: System.Int32\n      description: \"\\n<p>The number of signals initially required to set the <xref href=\\\"System.Threading.CountdownEvent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>initialCount</em> is less than 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CountdownEvent.CountdownEvent(Int32)\n- uid: System.Threading.CountdownEvent.CurrentCount\n  commentId: P:System.Threading.CountdownEvent.CurrentCount\n  id: CurrentCount\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  - vb\n  name: CurrentCount\n  fullName: System.Threading.CountdownEvent.CurrentCount\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CurrentCount\n    path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n    startLine: 83\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Gets the number of remaining signals required to set the event.</p>\\n\"\n  syntax:\n    content: public int CurrentCount { get; }\n    content.vb: Public ReadOnly Property CurrentCount As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p> The number of remaining signals required to set the event.</p>\\n<p></p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CountdownEvent.CurrentCount\n- uid: System.Threading.CountdownEvent.InitialCount\n  commentId: P:System.Threading.CountdownEvent.InitialCount\n  id: InitialCount\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  - vb\n  name: InitialCount\n  fullName: System.Threading.CountdownEvent.InitialCount\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: InitialCount\n    path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n    startLine: 98\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Gets the numbers of signals initially required to set the event.</p>\\n\"\n  syntax:\n    content: public int InitialCount { get; }\n    content.vb: Public ReadOnly Property InitialCount As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p> The number of signals initially required to set the event.</p>\\n<p></p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CountdownEvent.InitialCount\n- uid: System.Threading.CountdownEvent.IsSet\n  commentId: P:System.Threading.CountdownEvent.IsSet\n  id: IsSet\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  - vb\n  name: IsSet\n  fullName: System.Threading.CountdownEvent.IsSet\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsSet\n    path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n    startLine: 107\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Indicates whether the <xref href=\\\"System.Threading.CountdownEvent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object's current count has reached zero..</p>\\n\"\n  syntax:\n    content: public bool IsSet { get; }\n    content.vb: Public ReadOnly Property IsSet As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current count is zero; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CountdownEvent.IsSet\n- uid: System.Threading.CountdownEvent.WaitHandle\n  commentId: P:System.Threading.CountdownEvent.WaitHandle\n  id: WaitHandle\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  - vb\n  name: WaitHandle\n  fullName: System.Threading.CountdownEvent.WaitHandle\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitHandle\n    path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n    startLine: 129\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Threading.WaitHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is used to wait for the event to be set.</p>\\n\"\n  syntax:\n    content: public WaitHandle WaitHandle { get; }\n    content.vb: Public ReadOnly Property WaitHandle As WaitHandle\n    parameters: []\n    return:\n      type: System.Threading.WaitHandle\n      description: \"\\n<p>A <xref href=\\\"System.Threading.WaitHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is used to wait for the event to be set.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CountdownEvent.WaitHandle\n- uid: System.Threading.CountdownEvent.AddCount\n  commentId: M:System.Threading.CountdownEvent.AddCount\n  id: AddCount\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  - vb\n  name: AddCount()\n  fullName: System.Threading.CountdownEvent.AddCount()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddCount\n    path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n    startLine: 283\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Increments the <xref href=\\\"System.Threading.CountdownEvent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>'s current count by one.</p>\\n\"\n  syntax:\n    content: public void AddCount()\n    content.vb: Public Sub AddCount\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed.</p>\\n<p></p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The current instance is already set.</p>\\n<p>-or-</p>\\n<p>\\n<xref href=\\\"System.Threading.CountdownEvent.CurrentCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to or greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CountdownEvent.AddCount()\n- uid: System.Threading.CountdownEvent.AddCount(System.Int32)\n  commentId: M:System.Threading.CountdownEvent.AddCount(System.Int32)\n  id: AddCount(System.Int32)\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  - vb\n  name: AddCount(Int32)\n  fullName: System.Threading.CountdownEvent.AddCount(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddCount\n    path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n    startLine: 315\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Increments the <xref href=\\\"System.Threading.CountdownEvent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>'s current count by a specified value.</p>\\n\"\n  syntax:\n    content: public void AddCount(int signalCount)\n    content.vb: Public Sub AddCount(signalCount As Integer)\n    parameters:\n    - id: signalCount\n      type: System.Int32\n      description: \"\\n<p>The value by which to increase <xref href=\\\"System.Threading.CountdownEvent.CurrentCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>signalCount</em> is less than or equal to 0.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The current instance is already set.</p>\\n<p>-or-</p>\\n<p>\\n<xref href=\\\"System.Threading.CountdownEvent.CurrentCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to or greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> after count is incremented by <em>signalCount.</em></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CountdownEvent.AddCount(Int32)\n- uid: System.Threading.CountdownEvent.Dispose\n  commentId: M:System.Threading.CountdownEvent.Dispose\n  id: Dispose\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Threading.CountdownEvent.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n    startLine: 145\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Releases all resources used by the current instance of the <xref href=\\\"System.Threading.CountdownEvent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CountdownEvent.Dispose()\n- uid: System.Threading.CountdownEvent.Dispose(System.Boolean)\n  commentId: M:System.Threading.CountdownEvent.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Threading.CountdownEvent.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n    startLine: 166\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.Threading.CountdownEvent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and optionally releases the managed resources.</p>\\n\"\n  syntax:\n    content: protected virtual void Dispose(bool disposing)\n    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>true to release both managed and unmanaged resources; false to release only unmanaged resources.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: CountdownEvent.Dispose(Boolean)\n- uid: System.Threading.CountdownEvent.Reset\n  commentId: M:System.Threading.CountdownEvent.Reset\n  id: Reset\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  - vb\n  name: Reset()\n  fullName: System.Threading.CountdownEvent.Reset()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Reset\n    path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n    startLine: 388\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Resets the <xref href=\\\"System.Threading.CountdownEvent.CurrentCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the value of <xref href=\\\"System.Threading.CountdownEvent.InitialCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public void Reset()\n    content.vb: Public Sub Reset\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed..</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CountdownEvent.Reset()\n- uid: System.Threading.CountdownEvent.Reset(System.Int32)\n  commentId: M:System.Threading.CountdownEvent.Reset(System.Int32)\n  id: Reset(System.Int32)\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  - vb\n  name: Reset(Int32)\n  fullName: System.Threading.CountdownEvent.Reset(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Reset\n    path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n    startLine: 405\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Resets the <xref href=\\\"System.Threading.CountdownEvent.InitialCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property to a specified value.</p>\\n\"\n  syntax:\n    content: public void Reset(int count)\n    content.vb: Public Sub Reset(count As Integer)\n    parameters:\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of signals required to set the <xref href=\\\"System.Threading.CountdownEvent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has alread been disposed.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is less than 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CountdownEvent.Reset(Int32)\n- uid: System.Threading.CountdownEvent.Signal\n  commentId: M:System.Threading.CountdownEvent.Signal\n  id: Signal\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  - vb\n  name: Signal()\n  fullName: System.Threading.CountdownEvent.Signal()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Signal\n    path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n    startLine: 185\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Registers a signal with the <xref href=\\\"System.Threading.CountdownEvent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, decrementing the value of <xref href=\\\"System.Threading.CountdownEvent.CurrentCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool Signal()\n    content.vb: Public Function Signal As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>true if the signal caused the count to reach zero and the event was set; otherwise, false.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The current instance is already set.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CountdownEvent.Signal()\n- uid: System.Threading.CountdownEvent.Signal(System.Int32)\n  commentId: M:System.Threading.CountdownEvent.Signal(System.Int32)\n  id: Signal(System.Int32)\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  - vb\n  name: Signal(Int32)\n  fullName: System.Threading.CountdownEvent.Signal(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Signal\n    path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n    startLine: 227\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Registers multiple signals with the <xref href=\\\"System.Threading.CountdownEvent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, decrementing the value of <xref href=\\\"System.Threading.CountdownEvent.CurrentCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> by the specified amount.</p>\\n\"\n  syntax:\n    content: public bool Signal(int signalCount)\n    content.vb: Public Function Signal(signalCount As Integer) As Boolean\n    parameters:\n    - id: signalCount\n      type: System.Int32\n      description: \"\\n<p>The number of signals to register.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>true if the signals caused the count to reach zero and the event was set; otherwise, false.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>signalCount</em> is less than 1.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The current instance is already set. -or- Or <em>signalCount</em> is greater than <xref href=\\\"System.Threading.CountdownEvent.CurrentCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CountdownEvent.Signal(Int32)\n- uid: System.Threading.CountdownEvent.TryAddCount\n  commentId: M:System.Threading.CountdownEvent.TryAddCount\n  id: TryAddCount\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  - vb\n  name: TryAddCount()\n  fullName: System.Threading.CountdownEvent.TryAddCount()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryAddCount\n    path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n    startLine: 297\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Attempts to increment <xref href=\\\"System.Threading.CountdownEvent.CurrentCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> by one.</p>\\n\"\n  syntax:\n    content: public bool TryAddCount()\n    content.vb: Public Function TryAddCount As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>true if the increment succeeded; otherwise, false. If <xref href=\\\"System.Threading.CountdownEvent.CurrentCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is already at zero, this method will return false.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<xref href=\\\"System.Threading.CountdownEvent.CurrentCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CountdownEvent.TryAddCount()\n- uid: System.Threading.CountdownEvent.TryAddCount(System.Int32)\n  commentId: M:System.Threading.CountdownEvent.TryAddCount(System.Int32)\n  id: TryAddCount(System.Int32)\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  - vb\n  name: TryAddCount(Int32)\n  fullName: System.Threading.CountdownEvent.TryAddCount(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryAddCount\n    path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n    startLine: 338\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Attempts to increment <xref href=\\\"System.Threading.CountdownEvent.CurrentCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> by a specified value.</p>\\n\"\n  syntax:\n    content: public bool TryAddCount(int signalCount)\n    content.vb: Public Function TryAddCount(signalCount As Integer) As Boolean\n    parameters:\n    - id: signalCount\n      type: System.Int32\n      description: \"\\n<p>The value by which to increase <xref href=\\\"System.Threading.CountdownEvent.CurrentCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>true if the increment succeeded; otherwise, false. If <xref href=\\\"System.Threading.CountdownEvent.CurrentCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is already at zero this will return false.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>signalCount</em> is less than or equal to 0.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The current instance is already set.</p>\\n<p>-or-</p>\\n<p>\\n<xref href=\\\"System.Threading.CountdownEvent.CurrentCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> + <em>signalCount</em> is equal to or greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CountdownEvent.TryAddCount(Int32)\n- uid: System.Threading.CountdownEvent.Wait\n  commentId: M:System.Threading.CountdownEvent.Wait\n  id: Wait\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  - vb\n  name: Wait()\n  fullName: System.Threading.CountdownEvent.Wait()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Wait\n    path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n    startLine: 436\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Blocks the current thread until the <xref href=\\\"System.Threading.CountdownEvent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set.</p>\\n\"\n  syntax:\n    content: public void Wait()\n    content.vb: Public Sub Wait\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CountdownEvent.Wait()\n- uid: System.Threading.CountdownEvent.Wait(System.Int32)\n  commentId: M:System.Threading.CountdownEvent.Wait(System.Int32)\n  id: Wait(System.Int32)\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  - vb\n  name: Wait(Int32)\n  fullName: System.Threading.CountdownEvent.Wait(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Wait\n    path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n    startLine: 531\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Blocks the current thread until the <xref href=\\\"System.Threading.CountdownEvent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set, using a 32-bit signed integer to measure the timeout.</p>\\n\"\n  syntax:\n    content: public bool Wait(int millisecondsTimeout)\n    content.vb: Public Function Wait(millisecondsTimeout As Integer) As Boolean\n    parameters:\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: \"\\n<p>The number of milliseconds to wait, or <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>(-1) to wait indefinitely.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>true if the <xref href=\\\"System.Threading.CountdownEvent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> was set; otherwise, false.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CountdownEvent.Wait(Int32)\n- uid: System.Threading.CountdownEvent.Wait(System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.Threading.CountdownEvent.Wait(System.Int32,System.Threading.CancellationToken)\n  id: Wait(System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  - vb\n  name: Wait(Int32, CancellationToken)\n  fullName: System.Threading.CountdownEvent.Wait(System.Int32, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Wait\n    path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n    startLine: 553\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Blocks the current thread until the <xref href=\\\"System.Threading.CountdownEvent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set, using a 32-bit signed integer to measure the timeout, while observing a <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken)\n    content.vb: Public Function Wait(millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Boolean\n    parameters:\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: \"\\n<p>The number of milliseconds to wait, or <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>(-1) to wait indefinitely.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to observe.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>true if the <xref href=\\\"System.Threading.CountdownEvent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> was set; otherwise, false.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>\\n<em>cancellationToken</em> has been canceled.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed. -or- The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created <em>cancellationToken</em> has already been disposed.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CountdownEvent.Wait(Int32, CancellationToken)\n- uid: System.Threading.CountdownEvent.Wait(System.Threading.CancellationToken)\n  commentId: M:System.Threading.CountdownEvent.Wait(System.Threading.CancellationToken)\n  id: Wait(System.Threading.CancellationToken)\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  - vb\n  name: Wait(CancellationToken)\n  fullName: System.Threading.CountdownEvent.Wait(System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Wait\n    path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n    startLine: 459\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Blocks the current thread until the <xref href=\\\"System.Threading.CountdownEvent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set, while observing a <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public void Wait(CancellationToken cancellationToken)\n    content.vb: Public Sub Wait(cancellationToken As CancellationToken)\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to observe.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>\\n<em>cancellationToken</em> has been canceled.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed. -or- The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created <em>cancellationToken</em> has already been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CountdownEvent.Wait(CancellationToken)\n- uid: System.Threading.CountdownEvent.Wait(System.TimeSpan)\n  commentId: M:System.Threading.CountdownEvent.Wait(System.TimeSpan)\n  id: Wait(System.TimeSpan)\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  - vb\n  name: Wait(TimeSpan)\n  fullName: System.Threading.CountdownEvent.Wait(System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Wait\n    path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n    startLine: 478\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Blocks the current thread until the <xref href=\\\"System.Threading.CountdownEvent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set, using a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to measure the timeout.</p>\\n\"\n  syntax:\n    content: public bool Wait(TimeSpan timeout)\n    content.vb: Public Function Wait(timeout As TimeSpan) As Boolean\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: \"\\n<p>A <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the number of milliseconds to wait, or a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents -1 milliseconds to wait indefinitely.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>true if the <xref href=\\\"System.Threading.CountdownEvent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> was set; otherwise, false.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CountdownEvent.Wait(TimeSpan)\n- uid: System.Threading.CountdownEvent.Wait(System.TimeSpan,System.Threading.CancellationToken)\n  commentId: M:System.Threading.CountdownEvent.Wait(System.TimeSpan,System.Threading.CancellationToken)\n  id: Wait(System.TimeSpan,System.Threading.CancellationToken)\n  parent: System.Threading.CountdownEvent\n  langs:\n  - csharp\n  - vb\n  name: Wait(TimeSpan, CancellationToken)\n  fullName: System.Threading.CountdownEvent.Wait(System.TimeSpan, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Wait\n    path: src/mscorlib/src/System/Threading/CountdownEvent.cs\n    startLine: 508\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Blocks the current thread until the <xref href=\\\"System.Threading.CountdownEvent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set, using a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to measure the timeout, while observing a <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool Wait(TimeSpan timeout, CancellationToken cancellationToken)\n    content.vb: Public Function Wait(timeout As TimeSpan, cancellationToken As CancellationToken) As Boolean\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: \"\\n<p>A <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the number of milliseconds to wait, or a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents -1 milliseconds to wait indefinitely.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to observe.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>true if the <xref href=\\\"System.Threading.CountdownEvent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> was set; otherwise, false.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>\\n<em>cancellationToken</em> has been canceled.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has already been disposed. -or- The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created <em>cancellationToken</em> has already been disposed.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CountdownEvent.Wait(TimeSpan, CancellationToken)\nreferences:\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Threading.WaitHandle\n  parent: System.Threading\n  isExternal: false\n  name: WaitHandle\n  fullName: System.Threading.WaitHandle\n  nameWithType: WaitHandle\n  commentId: T:System.Threading.WaitHandle\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDisposable.Dispose()\n  commentId: M:System.IDisposable.Dispose\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  fullName: System.Threading.CancellationToken\n  nameWithType: CancellationToken\n  commentId: T:System.Threading.CancellationToken\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  fullName: System.TimeSpan\n  nameWithType: TimeSpan\n  commentId: T:System.TimeSpan\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.OperationCanceledException\n  parent: System\n  isExternal: false\n  name: OperationCanceledException\n  fullName: System.OperationCanceledException\n  nameWithType: OperationCanceledException\n  commentId: T:System.OperationCanceledException\n"}