{"nodes":[{"pos":[1696,1708],"content":"CngAlgorithm","needQuote":true,"nodes":[{"content":"CngAlgorithm","pos":[0,12]}]},{"pos":[3162,3182],"content":"CngAlgorithm(String)","needQuote":true,"nodes":[{"content":"CngAlgorithm(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The name of the algorithm to initialize.&lt;/p&gt;\\n","pos":[4040,4091],"source":"\\n<p>The name of the algorithm to initialize.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;algorithm&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[4210,4279],"source":"\\n<p>The <em>algorithm</em> parameter is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;algorithm&lt;/em&gt; parameter length is 0 (zero).&lt;/p&gt;\\n","pos":[4376,4439],"source":"\\n<p>The <em>algorithm</em> parameter length is 0 (zero).</p>\\n"},{"pos":[4778,4787],"content":"Algorithm","needQuote":true,"nodes":[{"content":"Algorithm","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The embedded algorithm name.&lt;/p&gt;\\n","pos":[5645,5684],"source":"\\n<p>The embedded algorithm name.</p>\\n"},{"pos":[6051,6066],"content":"ECDiffieHellman","needQuote":true,"nodes":[{"content":"ECDiffieHellman","pos":[0,15]}]},{"pos":[7202,7221],"content":"ECDiffieHellmanP256","needQuote":true,"nodes":[{"content":"ECDiffieHellmanP256","pos":[0,19]}]},{"content":"\\n&lt;p&gt;An object that specifies an ECDH algorithm that uses the P-256 curve.&lt;/p&gt;\\n","pos":[8233,8313],"source":"\\n<p>An object that specifies an ECDH algorithm that uses the P-256 curve.</p>\\n"},{"pos":[8724,8743],"content":"ECDiffieHellmanP384","needQuote":true,"nodes":[{"content":"ECDiffieHellmanP384","pos":[0,19]}]},{"content":"\\n&lt;p&gt;An object that specifies an ECDH algorithm that uses the P-384 curve.&lt;/p&gt;\\n","pos":[9755,9835],"source":"\\n<p>An object that specifies an ECDH algorithm that uses the P-384 curve.</p>\\n"},{"pos":[10246,10265],"content":"ECDiffieHellmanP521","needQuote":true,"nodes":[{"content":"ECDiffieHellmanP521","pos":[0,19]}]},{"content":"\\n&lt;p&gt;An object that specifies an ECDH algorithm that uses the P-521 curve.&lt;/p&gt;\\n","pos":[11277,11357],"source":"\\n<p>An object that specifies an ECDH algorithm that uses the P-521 curve.</p>\\n"},{"pos":[11726,11731],"content":"ECDsa","needQuote":true,"nodes":[{"content":"ECDsa","pos":[0,5]}]},{"pos":[12787,12796],"content":"ECDsaP256","needQuote":true,"nodes":[{"content":"ECDsaP256","pos":[0,9]}]},{"content":"\\n&lt;p&gt;An object that specifies an ECDSA algorithm that uses the P-256 curve.&lt;/p&gt;\\n","pos":[13759,13840],"source":"\\n<p>An object that specifies an ECDSA algorithm that uses the P-256 curve.</p>\\n"},{"pos":[14211,14220],"content":"ECDsaP384","needQuote":true,"nodes":[{"content":"ECDsaP384","pos":[0,9]}]},{"content":"\\n&lt;p&gt;An object that specifies an ECDSA algorithm that uses the P-384 curve.&lt;/p&gt;\\n","pos":[15183,15264],"source":"\\n<p>An object that specifies an ECDSA algorithm that uses the P-384 curve.</p>\\n"},{"pos":[15635,15644],"content":"ECDsaP521","needQuote":true,"nodes":[{"content":"ECDsaP521","pos":[0,9]}]},{"content":"\\n&lt;p&gt;An object that specifies an ECDSA algorithm that uses the P-521 curve.&lt;/p&gt;\\n","pos":[16611,16692],"source":"\\n<p>An object that specifies an ECDSA algorithm that uses the P-521 curve.</p>\\n"},{"pos":[17045,17048],"content":"MD5","needQuote":true,"nodes":[{"content":"MD5","pos":[0,3]}]},{"content":"\\n&lt;p&gt;An object that specifies the MD5 algorithm.&lt;/p&gt;\\n","pos":[17953,18007],"source":"\\n<p>An object that specifies the MD5 algorithm.</p>\\n"},{"pos":[18354,18357],"content":"Rsa","needQuote":true,"nodes":[{"content":"Rsa","pos":[0,3]}]},{"content":"\\n&lt;p&gt;An object that specifies the RSA algorithm.&lt;/p&gt;\\n","pos":[19243,19297],"source":"\\n<p>An object that specifies the RSA algorithm.</p>\\n"},{"pos":[19647,19651],"content":"Sha1","needQuote":true,"nodes":[{"content":"Sha1","pos":[0,4]}]},{"content":"\\n&lt;p&gt;An object that specifies the SHA-1 algorithm.&lt;/p&gt;\\n","pos":[20564,20620],"source":"\\n<p>An object that specifies the SHA-1 algorithm.</p>\\n"},{"pos":[20977,20983],"content":"Sha256","needQuote":true,"nodes":[{"content":"Sha256","pos":[0,6]}]},{"content":"\\n&lt;p&gt;An object that specifies the SHA-256 algorithm.&lt;/p&gt;\\n","pos":[21908,21966],"source":"\\n<p>An object that specifies the SHA-256 algorithm.</p>\\n"},{"pos":[22325,22331],"content":"Sha384","needQuote":true,"nodes":[{"content":"Sha384","pos":[0,6]}]},{"content":"\\n&lt;p&gt;An object that specifies the SHA-384 algorithm.&lt;/p&gt;\\n","pos":[23256,23314],"source":"\\n<p>An object that specifies the SHA-384 algorithm.</p>\\n"},{"pos":[23673,23679],"content":"Sha512","needQuote":true,"nodes":[{"content":"Sha512","pos":[0,6]}]},{"content":"\\n&lt;p&gt;An object that specifies the SHA-512 algorithm.&lt;/p&gt;\\n","pos":[24604,24662],"source":"\\n<p>An object that specifies the SHA-512 algorithm.</p>\\n"},{"pos":[25066,25080],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[26973,26993],"content":"Equals(CngAlgorithm)","needQuote":true,"nodes":[{"content":"Equals(CngAlgorithm)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;other&lt;/em&gt; parameter specifies the same algorithm as the current object; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[28251,28404],"source":"\\n<p>\\n<strong>true</strong> if the <em>other</em> parameter specifies the same algorithm as the current object; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[28878,28891],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The hash value of the embedded algorithm name.&lt;/p&gt;\\n","pos":[29765,29822],"source":"\\n<p>The hash value of the embedded algorithm name.</p>\\n"},{"pos":[30482,30518],"content":"Equality(CngAlgorithm, CngAlgorithm)","needQuote":true,"nodes":[{"content":"Equality(CngAlgorithm, CngAlgorithm)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;An object that specifies an algorithm name.&lt;/p&gt;\\n","pos":[31569,31623],"source":"\\n<p>An object that specifies an algorithm name.</p>\\n"},{"content":"\\n&lt;p&gt;A second object, to be compared to the object that is identified by the &lt;em&gt;left&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[31715,31822],"source":"\\n<p>A second object, to be compared to the object that is identified by the <em>left</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two objects specify the same algorithm name; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[31883,32004],"source":"\\n<p>\\n<strong>true</strong> if the two objects specify the same algorithm name; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[32648,32686],"content":"Inequality(CngAlgorithm, CngAlgorithm)","needQuote":true,"nodes":[{"content":"Inequality(CngAlgorithm, CngAlgorithm)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;An object that specifies an algorithm name.&lt;/p&gt;\\n","pos":[33744,33798],"source":"\\n<p>An object that specifies an algorithm name.</p>\\n"},{"content":"\\n&lt;p&gt;A second object, to be compared to the object that is identified by the &lt;em&gt;left&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[33890,33997],"source":"\\n<p>A second object, to be compared to the object that is identified by the <em>left</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two objects do not specify the same algorithm name; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[34058,34186],"source":"\\n<p>\\n<strong>true</strong> if the two objects do not specify the same algorithm name; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[34562,34572],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The embedded algorithm name.&lt;/p&gt;\\n","pos":[35417,35456],"source":"\\n<p>The embedded algorithm name.</p>\\n"},{"pos":[35696,35724],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[35921,35927],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[36133,36157],"content":"IEquatable<CngAlgorithm>","needQuote":true,"nodes":[{"content":"IEquatable&lt;CngAlgorithm&gt;","pos":[0,24],"source":"IEquatable<CngAlgorithm>"}]},{"pos":[36403,36413],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[36477,36478],"content":"<","needQuote":true,"nodes":[]},{"pos":[36556,36568],"content":"CngAlgorithm","needQuote":true,"nodes":[{"content":"CngAlgorithm","pos":[0,12]}]},{"pos":[36707,36717],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[36782,36785]},{"pos":[36870,36882],"content":"CngAlgorithm","needQuote":true,"nodes":[{"content":"CngAlgorithm","pos":[0,12]}]},{"pos":[36949,36950],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37239,37261],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[37409,37415],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[37482,37483],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37533,37539],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[37600,37601]},{"pos":[37656,37662],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[37722,37723],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37820,37826],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[37893,37894],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37944,37950],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[38011,38012]},{"pos":[38067,38073],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[38133,38134],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38379,38410],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[38576,38591],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[38667,38668],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38718,38724],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[38785,38786]},{"pos":[38841,38847],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[38907,38908],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39014,39029],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[39105,39106],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39156,39162],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[39223,39224]},{"pos":[39279,39285],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[39345,39346],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39572,39581],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[39674,39681],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[39749,39750],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39777,39778],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39847,39854],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[39922,39923],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39950,39951],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40126,40143],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[40252,40267],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[40343,40344],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40371,40372],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40449,40464],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[40540,40541],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40568,40569],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40714,40720],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[40840,40853],"content":"IEquatable<T>","needQuote":true,"nodes":[{"content":"IEquatable&lt;T&gt;","pos":[0,13],"source":"IEquatable<T>"}]},{"pos":[41008,41018],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[41061,41062],"content":"<","needQuote":true,"nodes":[]},{"pos":[41089,41090],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[41189,41199],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[41243,41246]},{"pos":[41280,41281],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[41308,41309],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41493,41499],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[41694,41706],"content":"CngAlgorithm","needQuote":true,"nodes":[{"content":"CngAlgorithm","pos":[0,12]}]},{"pos":[41941,41955],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[42074,42080],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[42147,42148],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42198,42204],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[42264,42265],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42348,42354],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[42421,42422],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42472,42478],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[42538,42539],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42712,42719],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[43043,43063],"content":"Equals(CngAlgorithm)","needQuote":true,"nodes":[{"content":"Equals(CngAlgorithm)","pos":[0,20]}]},{"pos":[43381,43387],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[43501,43502],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43580,43592],"content":"CngAlgorithm","needQuote":true,"nodes":[{"content":"CngAlgorithm","pos":[0,12]}]},{"pos":[43659,43660],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43738,43744],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[43861,43862],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43940,43952],"content":"CngAlgorithm","needQuote":true,"nodes":[{"content":"CngAlgorithm","pos":[0,12]}]},{"pos":[44019,44020],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44359,44368],"content":"Equals(T)","needQuote":true,"nodes":[{"content":"Equals(T)","pos":[0,9]}]},{"pos":[44526,44532],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[44585,44586],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44613,44614],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[44641,44642],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44720,44726],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[44782,44783],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44810,44811],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[44838,44839],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45072,45085],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[45186,45197],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[45269,45270],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45297,45298],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45371,45382],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[45454,45455],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45482,45483],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45643,45648],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[45805,45815],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[45910,45918],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[45987,45988],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46015,46016],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46086,46094],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[46163,46164],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46191,46192],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46345,46366],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[46567,46584],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Security.Cryptography.CngAlgorithm\n  commentId: T:System.Security.Cryptography.CngAlgorithm\n  id: CngAlgorithm\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.CngAlgorithm.#ctor(System.String)\n  - System.Security.Cryptography.CngAlgorithm.Algorithm\n  - System.Security.Cryptography.CngAlgorithm.ECDiffieHellman\n  - System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP256\n  - System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP384\n  - System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP521\n  - System.Security.Cryptography.CngAlgorithm.ECDsa\n  - System.Security.Cryptography.CngAlgorithm.ECDsaP256\n  - System.Security.Cryptography.CngAlgorithm.ECDsaP384\n  - System.Security.Cryptography.CngAlgorithm.ECDsaP521\n  - System.Security.Cryptography.CngAlgorithm.Equals(System.Object)\n  - System.Security.Cryptography.CngAlgorithm.Equals(System.Security.Cryptography.CngAlgorithm)\n  - System.Security.Cryptography.CngAlgorithm.GetHashCode\n  - System.Security.Cryptography.CngAlgorithm.MD5\n  - System.Security.Cryptography.CngAlgorithm.op_Equality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)\n  - System.Security.Cryptography.CngAlgorithm.op_Inequality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)\n  - System.Security.Cryptography.CngAlgorithm.Rsa\n  - System.Security.Cryptography.CngAlgorithm.Sha1\n  - System.Security.Cryptography.CngAlgorithm.Sha256\n  - System.Security.Cryptography.CngAlgorithm.Sha384\n  - System.Security.Cryptography.CngAlgorithm.Sha512\n  - System.Security.Cryptography.CngAlgorithm.ToString\n  langs:\n  - csharp\n  - vb\n  name: CngAlgorithm\n  fullName: System.Security.Cryptography.CngAlgorithm\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CngAlgorithm\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 51\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Encapsulates the name of an encryption algorithm. </p>\\n\"\n  syntax:\n    content: 'public sealed class CngAlgorithm : IEquatable<CngAlgorithm>'\n    content.vb: >-\n      Public NotInheritable Class CngAlgorithm\n          Implements IEquatable(Of CngAlgorithm)\n  inheritance:\n  - System.Object\n  implements:\n  - System.IEquatable{System.Security.Cryptography.CngAlgorithm}\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: CngAlgorithm\n- uid: System.Security.Cryptography.CngAlgorithm.#ctor(System.String)\n  commentId: M:System.Security.Cryptography.CngAlgorithm.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Security.Cryptography.CngAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: CngAlgorithm(String)\n  fullName: System.Security.Cryptography.CngAlgorithm.CngAlgorithm(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 53\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.CngAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public CngAlgorithm(string algorithm)\n    content.vb: Public Sub New(algorithm As String)\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: \"\\n<p>The name of the algorithm to initialize.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>algorithm</em> parameter is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>algorithm</em> parameter length is 0 (zero).</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CngAlgorithm.CngAlgorithm(String)\n- uid: System.Security.Cryptography.CngAlgorithm.Algorithm\n  commentId: P:System.Security.Cryptography.CngAlgorithm.Algorithm\n  id: Algorithm\n  parent: System.Security.Cryptography.CngAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: Algorithm\n  fullName: System.Security.Cryptography.CngAlgorithm.Algorithm\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Algorithm\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 54\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the algorithm name that the current <xref href=\\\"System.Security.Cryptography.CngAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object specifies.</p>\\n\"\n  syntax:\n    content: public string Algorithm { get; }\n    content.vb: Public ReadOnly Property Algorithm As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The embedded algorithm name.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CngAlgorithm.Algorithm\n- uid: System.Security.Cryptography.CngAlgorithm.ECDiffieHellman\n  commentId: P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellman\n  id: ECDiffieHellman\n  parent: System.Security.Cryptography.CngAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: ECDiffieHellman\n  fullName: System.Security.Cryptography.CngAlgorithm.ECDiffieHellman\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ECDiffieHellman\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 55\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static CngAlgorithm ECDiffieHellman { get; }\n    content.vb: Public Shared ReadOnly Property ECDiffieHellman As CngAlgorithm\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngAlgorithm\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngAlgorithm.ECDiffieHellman\n- uid: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP256\n  commentId: P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP256\n  id: ECDiffieHellmanP256\n  parent: System.Security.Cryptography.CngAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: ECDiffieHellmanP256\n  fullName: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP256\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ECDiffieHellmanP256\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 56\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Security.Cryptography.CngAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies an Elliptic Curve Diffie-Hellman (ECDH) key exchange algorithm that uses the P-256 curve.</p>\\n\"\n  syntax:\n    content: public static CngAlgorithm ECDiffieHellmanP256 { get; }\n    content.vb: Public Shared ReadOnly Property ECDiffieHellmanP256 As CngAlgorithm\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngAlgorithm\n      description: \"\\n<p>An object that specifies an ECDH algorithm that uses the P-256 curve.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngAlgorithm.ECDiffieHellmanP256\n- uid: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP384\n  commentId: P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP384\n  id: ECDiffieHellmanP384\n  parent: System.Security.Cryptography.CngAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: ECDiffieHellmanP384\n  fullName: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP384\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ECDiffieHellmanP384\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 57\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Security.Cryptography.CngAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies an Elliptic Curve Diffie-Hellman (ECDH) key exchange algorithm that uses the P-384 curve.</p>\\n\"\n  syntax:\n    content: public static CngAlgorithm ECDiffieHellmanP384 { get; }\n    content.vb: Public Shared ReadOnly Property ECDiffieHellmanP384 As CngAlgorithm\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngAlgorithm\n      description: \"\\n<p>An object that specifies an ECDH algorithm that uses the P-384 curve.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngAlgorithm.ECDiffieHellmanP384\n- uid: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP521\n  commentId: P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP521\n  id: ECDiffieHellmanP521\n  parent: System.Security.Cryptography.CngAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: ECDiffieHellmanP521\n  fullName: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP521\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ECDiffieHellmanP521\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 58\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Security.Cryptography.CngAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies an Elliptic Curve Diffie-Hellman (ECDH) key exchange algorithm that uses the P-521 curve.</p>\\n\"\n  syntax:\n    content: public static CngAlgorithm ECDiffieHellmanP521 { get; }\n    content.vb: Public Shared ReadOnly Property ECDiffieHellmanP521 As CngAlgorithm\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngAlgorithm\n      description: \"\\n<p>An object that specifies an ECDH algorithm that uses the P-521 curve.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngAlgorithm.ECDiffieHellmanP521\n- uid: System.Security.Cryptography.CngAlgorithm.ECDsa\n  commentId: P:System.Security.Cryptography.CngAlgorithm.ECDsa\n  id: ECDsa\n  parent: System.Security.Cryptography.CngAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: ECDsa\n  fullName: System.Security.Cryptography.CngAlgorithm.ECDsa\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ECDsa\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 59\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static CngAlgorithm ECDsa { get; }\n    content.vb: Public Shared ReadOnly Property ECDsa As CngAlgorithm\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngAlgorithm\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngAlgorithm.ECDsa\n- uid: System.Security.Cryptography.CngAlgorithm.ECDsaP256\n  commentId: P:System.Security.Cryptography.CngAlgorithm.ECDsaP256\n  id: ECDsaP256\n  parent: System.Security.Cryptography.CngAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: ECDsaP256\n  fullName: System.Security.Cryptography.CngAlgorithm.ECDsaP256\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ECDsaP256\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 60\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Security.Cryptography.CngAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies an Elliptic Curve Digital Signature Algorithm (ECDSA) that uses the P-256 curve.</p>\\n\"\n  syntax:\n    content: public static CngAlgorithm ECDsaP256 { get; }\n    content.vb: Public Shared ReadOnly Property ECDsaP256 As CngAlgorithm\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngAlgorithm\n      description: \"\\n<p>An object that specifies an ECDSA algorithm that uses the P-256 curve.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngAlgorithm.ECDsaP256\n- uid: System.Security.Cryptography.CngAlgorithm.ECDsaP384\n  commentId: P:System.Security.Cryptography.CngAlgorithm.ECDsaP384\n  id: ECDsaP384\n  parent: System.Security.Cryptography.CngAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: ECDsaP384\n  fullName: System.Security.Cryptography.CngAlgorithm.ECDsaP384\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ECDsaP384\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 61\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Security.Cryptography.CngAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies an Elliptic Curve Digital Signature Algorithm (ECDSA) that uses the P-384 curve.</p>\\n\"\n  syntax:\n    content: public static CngAlgorithm ECDsaP384 { get; }\n    content.vb: Public Shared ReadOnly Property ECDsaP384 As CngAlgorithm\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngAlgorithm\n      description: \"\\n<p>An object that specifies an ECDSA algorithm that uses the P-384 curve.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngAlgorithm.ECDsaP384\n- uid: System.Security.Cryptography.CngAlgorithm.ECDsaP521\n  commentId: P:System.Security.Cryptography.CngAlgorithm.ECDsaP521\n  id: ECDsaP521\n  parent: System.Security.Cryptography.CngAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: ECDsaP521\n  fullName: System.Security.Cryptography.CngAlgorithm.ECDsaP521\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ECDsaP521\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 62\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a new <xref href=\\\"System.Security.Cryptography.CngAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies an Elliptic Curve Digital Signature Algorithm (ECDSA) that uses the P-521 curve.</p>\\n\"\n  syntax:\n    content: public static CngAlgorithm ECDsaP521 { get; }\n    content.vb: Public Shared ReadOnly Property ECDsaP521 As CngAlgorithm\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngAlgorithm\n      description: \"\\n<p>An object that specifies an ECDSA algorithm that uses the P-521 curve.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngAlgorithm.ECDsaP521\n- uid: System.Security.Cryptography.CngAlgorithm.MD5\n  commentId: P:System.Security.Cryptography.CngAlgorithm.MD5\n  id: MD5\n  parent: System.Security.Cryptography.CngAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: MD5\n  fullName: System.Security.Cryptography.CngAlgorithm.MD5\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MD5\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 63\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a new <xref href=\\\"System.Security.Cryptography.CngAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies the Message Digest 5 (MD5) hash algorithm.</p>\\n\"\n  syntax:\n    content: public static CngAlgorithm MD5 { get; }\n    content.vb: Public Shared ReadOnly Property MD5 As CngAlgorithm\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngAlgorithm\n      description: \"\\n<p>An object that specifies the MD5 algorithm.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngAlgorithm.MD5\n- uid: System.Security.Cryptography.CngAlgorithm.Rsa\n  commentId: P:System.Security.Cryptography.CngAlgorithm.Rsa\n  id: Rsa\n  parent: System.Security.Cryptography.CngAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: Rsa\n  fullName: System.Security.Cryptography.CngAlgorithm.Rsa\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Rsa\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 64\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a new <xref href=\\\"System.Security.Cryptography.CngAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies the RSA hash algorithm.</p>\\n\"\n  syntax:\n    content: public static CngAlgorithm Rsa { get; }\n    content.vb: Public Shared ReadOnly Property Rsa As CngAlgorithm\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngAlgorithm\n      description: \"\\n<p>An object that specifies the RSA algorithm.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngAlgorithm.Rsa\n- uid: System.Security.Cryptography.CngAlgorithm.Sha1\n  commentId: P:System.Security.Cryptography.CngAlgorithm.Sha1\n  id: Sha1\n  parent: System.Security.Cryptography.CngAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: Sha1\n  fullName: System.Security.Cryptography.CngAlgorithm.Sha1\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sha1\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 65\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a new <xref href=\\\"System.Security.Cryptography.CngAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies the Secure Hash Algorithm 1 (SHA-1) algorithm.</p>\\n\"\n  syntax:\n    content: public static CngAlgorithm Sha1 { get; }\n    content.vb: Public Shared ReadOnly Property Sha1 As CngAlgorithm\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngAlgorithm\n      description: \"\\n<p>An object that specifies the SHA-1 algorithm.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngAlgorithm.Sha1\n- uid: System.Security.Cryptography.CngAlgorithm.Sha256\n  commentId: P:System.Security.Cryptography.CngAlgorithm.Sha256\n  id: Sha256\n  parent: System.Security.Cryptography.CngAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: Sha256\n  fullName: System.Security.Cryptography.CngAlgorithm.Sha256\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sha256\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 66\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a new <xref href=\\\"System.Security.Cryptography.CngAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies the Secure Hash Algorithm 256 (SHA-256) algorithm.</p>\\n\"\n  syntax:\n    content: public static CngAlgorithm Sha256 { get; }\n    content.vb: Public Shared ReadOnly Property Sha256 As CngAlgorithm\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngAlgorithm\n      description: \"\\n<p>An object that specifies the SHA-256 algorithm.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngAlgorithm.Sha256\n- uid: System.Security.Cryptography.CngAlgorithm.Sha384\n  commentId: P:System.Security.Cryptography.CngAlgorithm.Sha384\n  id: Sha384\n  parent: System.Security.Cryptography.CngAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: Sha384\n  fullName: System.Security.Cryptography.CngAlgorithm.Sha384\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sha384\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 67\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a new <xref href=\\\"System.Security.Cryptography.CngAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies the Secure Hash Algorithm 384 (SHA-384) algorithm.</p>\\n\"\n  syntax:\n    content: public static CngAlgorithm Sha384 { get; }\n    content.vb: Public Shared ReadOnly Property Sha384 As CngAlgorithm\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngAlgorithm\n      description: \"\\n<p>An object that specifies the SHA-384 algorithm.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngAlgorithm.Sha384\n- uid: System.Security.Cryptography.CngAlgorithm.Sha512\n  commentId: P:System.Security.Cryptography.CngAlgorithm.Sha512\n  id: Sha512\n  parent: System.Security.Cryptography.CngAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: Sha512\n  fullName: System.Security.Cryptography.CngAlgorithm.Sha512\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sha512\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 68\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a new <xref href=\\\"System.Security.Cryptography.CngAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies the Secure Hash Algorithm 512 (SHA-512) algorithm.</p>\\n\"\n  syntax:\n    content: public static CngAlgorithm Sha512 { get; }\n    content.vb: Public Shared ReadOnly Property Sha512 As CngAlgorithm\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngAlgorithm\n      description: \"\\n<p>An object that specifies the SHA-512 algorithm.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngAlgorithm.Sha512\n- uid: System.Security.Cryptography.CngAlgorithm.Equals(System.Object)\n  commentId: M:System.Security.Cryptography.CngAlgorithm.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Security.Cryptography.CngAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Security.Cryptography.CngAlgorithm.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 69\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Compares the specified object to the current <xref href=\\\"System.Security.Cryptography.CngAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>An object to be compared to the current <xref href=\\\"System.Security.Cryptography.CngAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>obj</em> parameter is a <xref href=\\\"System.Security.Cryptography.CngAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the same algorithm as the current object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CngAlgorithm.Equals(Object)\n- uid: System.Security.Cryptography.CngAlgorithm.Equals(System.Security.Cryptography.CngAlgorithm)\n  commentId: M:System.Security.Cryptography.CngAlgorithm.Equals(System.Security.Cryptography.CngAlgorithm)\n  id: Equals(System.Security.Cryptography.CngAlgorithm)\n  parent: System.Security.Cryptography.CngAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: Equals(CngAlgorithm)\n  fullName: System.Security.Cryptography.CngAlgorithm.Equals(System.Security.Cryptography.CngAlgorithm)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 70\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Compares the specified <xref href=\\\"System.Security.Cryptography.CngAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to the current <xref href=\\\"System.Security.Cryptography.CngAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n  syntax:\n    content: public bool Equals(CngAlgorithm other)\n    content.vb: Public Function Equals(other As CngAlgorithm) As Boolean\n    parameters:\n    - id: other\n      type: System.Security.Cryptography.CngAlgorithm\n      description: \"\\n<p>An object to be compared to the current <xref href=\\\"System.Security.Cryptography.CngAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>other</em> parameter specifies the same algorithm as the current object; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.IEquatable{System.Security.Cryptography.CngAlgorithm}.Equals(System.Security.Cryptography.CngAlgorithm)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CngAlgorithm.Equals(CngAlgorithm)\n- uid: System.Security.Cryptography.CngAlgorithm.GetHashCode\n  commentId: M:System.Security.Cryptography.CngAlgorithm.GetHashCode\n  id: GetHashCode\n  parent: System.Security.Cryptography.CngAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Security.Cryptography.CngAlgorithm.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 71\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Generates a hash value for the algorithm name that is embedded in the current <xref href=\\\"System.Security.Cryptography.CngAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The hash value of the embedded algorithm name.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CngAlgorithm.GetHashCode()\n- uid: System.Security.Cryptography.CngAlgorithm.op_Equality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)\n  commentId: M:System.Security.Cryptography.CngAlgorithm.op_Equality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)\n  id: op_Equality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)\n  parent: System.Security.Cryptography.CngAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: Equality(CngAlgorithm, CngAlgorithm)\n  fullName: System.Security.Cryptography.CngAlgorithm.Equality(System.Security.Cryptography.CngAlgorithm, System.Security.Cryptography.CngAlgorithm)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 72\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Determines whether two <xref href=\\\"System.Security.Cryptography.CngAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects specify the same algorithm name.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(CngAlgorithm left, CngAlgorithm right)\n    content.vb: Public Shared Operator =(left As CngAlgorithm, right As CngAlgorithm) As Boolean\n    parameters:\n    - id: left\n      type: System.Security.Cryptography.CngAlgorithm\n      description: \"\\n<p>An object that specifies an algorithm name.</p>\\n\"\n    - id: right\n      type: System.Security.Cryptography.CngAlgorithm\n      description: \"\\n<p>A second object, to be compared to the object that is identified by the <em>left</em> parameter.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two objects specify the same algorithm name; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CngAlgorithm.Equality(CngAlgorithm, CngAlgorithm)\n- uid: System.Security.Cryptography.CngAlgorithm.op_Inequality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)\n  commentId: M:System.Security.Cryptography.CngAlgorithm.op_Inequality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)\n  id: op_Inequality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)\n  parent: System.Security.Cryptography.CngAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: Inequality(CngAlgorithm, CngAlgorithm)\n  fullName: System.Security.Cryptography.CngAlgorithm.Inequality(System.Security.Cryptography.CngAlgorithm, System.Security.Cryptography.CngAlgorithm)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 73\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Determines whether two <xref href=\\\"System.Security.Cryptography.CngAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects do not specify the same algorithm.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(CngAlgorithm left, CngAlgorithm right)\n    content.vb: Public Shared Operator <>(left As CngAlgorithm, right As CngAlgorithm) As Boolean\n    parameters:\n    - id: left\n      type: System.Security.Cryptography.CngAlgorithm\n      description: \"\\n<p>An object that specifies an algorithm name.</p>\\n\"\n    - id: right\n      type: System.Security.Cryptography.CngAlgorithm\n      description: \"\\n<p>A second object, to be compared to the object that is identified by the <em>left</em> parameter.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two objects do not specify the same algorithm name; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CngAlgorithm.Inequality(CngAlgorithm, CngAlgorithm)\n- uid: System.Security.Cryptography.CngAlgorithm.ToString\n  commentId: M:System.Security.Cryptography.CngAlgorithm.ToString\n  id: ToString\n  parent: System.Security.Cryptography.CngAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Security.Cryptography.CngAlgorithm.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 74\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the name of the algorithm that the current <xref href=\\\"System.Security.Cryptography.CngAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object specifies.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The embedded algorithm name.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CngAlgorithm.ToString()\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.IEquatable{System.Security.Cryptography.CngAlgorithm}\n  parent: System\n  definition: System.IEquatable`1\n  name: IEquatable<CngAlgorithm>\n  fullName: System.IEquatable<System.Security.Cryptography.CngAlgorithm>\n  fullname.vb: System.IEquatable(Of System.Security.Cryptography.CngAlgorithm)\n  name.vb: IEquatable(Of CngAlgorithm)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Security.Cryptography.CngAlgorithm\n    name: CngAlgorithm\n    fullName: System.Security.Cryptography.CngAlgorithm\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Security.Cryptography.CngAlgorithm\n    name: CngAlgorithm\n    fullName: System.Security.Cryptography.CngAlgorithm\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable{System.Security.Cryptography.CngAlgorithm}\n  nameWithType: IEquatable<CngAlgorithm>\n  nameWithType.vb: IEquatable(Of CngAlgorithm)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.IEquatable`1\n  isExternal: false\n  name: IEquatable<T>\n  fullName: System.IEquatable<T>\n  fullname.vb: System.IEquatable(Of T)\n  name.vb: IEquatable(Of T)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable`1\n  nameWithType: IEquatable<T>\n  nameWithType.vb: IEquatable(Of T)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Security.Cryptography.CngAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngAlgorithm\n  fullName: System.Security.Cryptography.CngAlgorithm\n  commentId: T:System.Security.Cryptography.CngAlgorithm\n  nameWithType: CngAlgorithm\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.IEquatable{System.Security.Cryptography.CngAlgorithm}.Equals(System.Security.Cryptography.CngAlgorithm)\n  parent: System.IEquatable{System.Security.Cryptography.CngAlgorithm}\n  definition: System.IEquatable`1.Equals(`0)\n  name: Equals(CngAlgorithm)\n  fullName: System.IEquatable<System.Security.Cryptography.CngAlgorithm>.Equals(System.Security.Cryptography.CngAlgorithm)\n  fullname.vb: System.IEquatable(Of System.Security.Cryptography.CngAlgorithm).Equals(System.Security.Cryptography.CngAlgorithm)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<System.Security.Cryptography.CngAlgorithm>.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.CngAlgorithm\n    name: CngAlgorithm\n    fullName: System.Security.Cryptography.CngAlgorithm\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of System.Security.Cryptography.CngAlgorithm).Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.CngAlgorithm\n    name: CngAlgorithm\n    fullName: System.Security.Cryptography.CngAlgorithm\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable{System.Security.Cryptography.CngAlgorithm}.Equals(System.Security.Cryptography.CngAlgorithm)\n  nameWithType: IEquatable<CngAlgorithm>.Equals(CngAlgorithm)\n  nameWithType.vb: IEquatable(Of CngAlgorithm).Equals(CngAlgorithm)\n- uid: System.IEquatable`1.Equals(`0)\n  isExternal: false\n  name: Equals(T)\n  fullName: System.IEquatable<T>.Equals(T)\n  fullname.vb: System.IEquatable(Of T).Equals(T)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<T>.Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of T).Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable`1.Equals(`0)\n  nameWithType: IEquatable<T>.Equals(T)\n  nameWithType.vb: IEquatable(Of T).Equals(T)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}