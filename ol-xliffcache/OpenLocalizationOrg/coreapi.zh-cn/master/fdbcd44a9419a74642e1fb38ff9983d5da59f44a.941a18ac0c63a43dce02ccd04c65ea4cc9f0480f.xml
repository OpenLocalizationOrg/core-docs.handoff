{"nodes":[{"pos":[545,556],"content":"DnsEndPoint","needQuote":true,"nodes":[{"content":"DnsEndPoint","pos":[0,11]}]},{"pos":[1900,1926],"content":"DnsEndPoint(String, Int32)","needQuote":true,"nodes":[{"content":"DnsEndPoint(String, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The host name or a string representation of the IP address.&lt;/p&gt;\\n","pos":[2776,2846],"source":"\\n<p>The host name or a string representation of the IP address.</p>\\n"},{"content":"\\n&lt;p&gt;The port number associated with the address, or 0 to specify any available port.","pos":[2908,2993],"source":"\\n<p>The port number associated with the address, or 0 to specify any available port."},{"content":"&lt;em&gt;port&lt;/em&gt; is in host order.&lt;/p&gt;\\n","pos":[2994,3031],"source":" <em>port</em> is in host order.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;host&lt;/em&gt; parameter contains an empty string.&lt;/p&gt;\\n","pos":[3142,3206],"source":"\\n<p>The <em>host</em> parameter contains an empty string.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;host&lt;/em&gt; parameter is a &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[3311,3377],"source":"\\n<p>The <em>host</em> parameter is a <strong>null</strong>.</p>\\n"},{"pos":[4230,4271],"content":"DnsEndPoint(String, Int32, AddressFamily)","needQuote":true,"nodes":[{"content":"DnsEndPoint(String, Int32, AddressFamily)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;The host name or a string representation of the IP address.&lt;/p&gt;\\n","pos":[5237,5307],"source":"\\n<p>The host name or a string representation of the IP address.</p>\\n"},{"content":"\\n&lt;p&gt;The port number associated with the address, or 0 to specify any available port.","pos":[5369,5454],"source":"\\n<p>The port number associated with the address, or 0 to specify any available port."},{"content":"&lt;em&gt;port&lt;/em&gt; is in host order.&lt;/p&gt;\\n","pos":[5455,5492],"source":" <em>port</em> is in host order.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;host&lt;/em&gt; parameter is a &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[6137,6203],"source":"\\n<p>The <em>host</em> parameter is a <strong>null</strong>.</p>\\n"},{"pos":[6909,6922],"content":"AddressFamily","needQuote":true,"nodes":[{"content":"AddressFamily","pos":[0,13]}]},{"pos":[8121,8125],"content":"Host","needQuote":true,"nodes":[{"content":"Host","pos":[0,4]}]},{"content":"\\n&lt;p&gt;A host name or string representation of an IP address.&lt;/p&gt;\\n","pos":[8806,8871],"source":"\\n<p>A host name or string representation of an IP address.</p>\\n"},{"pos":[9142,9146],"content":"Port","needQuote":true,"nodes":[{"content":"Port","pos":[0,4]}]},{"pos":[10333,10347],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[11846,11859],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[13027,13037],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[14219,14229],"content":"System.Net","needQuote":true,"nodes":[{"content":"System.Net","pos":[0,10]}]},{"pos":[14372,14378],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14533,14541],"content":"EndPoint","needQuote":true,"nodes":[{"content":"EndPoint","pos":[0,8]}]},{"pos":[14752,14773],"content":"Create(SocketAddress)","needQuote":true,"nodes":[{"content":"Create(SocketAddress)","pos":[0,21]}]},{"pos":[14926,14932],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[14984,14985],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15046,15059],"content":"SocketAddress","needQuote":true,"nodes":[{"content":"SocketAddress","pos":[0,13]}]},{"pos":[15109,15110],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15210,15216],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[15268,15269],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15330,15343],"content":"SocketAddress","needQuote":true,"nodes":[{"content":"SocketAddress","pos":[0,13]}]},{"pos":[15393,15394],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15621,15632],"content":"Serialize()","needQuote":true,"nodes":[{"content":"Serialize()","pos":[0,11]}]},{"pos":[15741,15750],"content":"Serialize","needQuote":true,"nodes":[{"content":"Serialize","pos":[0,9]}]},{"pos":[15805,15806],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15833,15834],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15911,15920],"content":"Serialize","needQuote":true,"nodes":[{"content":"Serialize","pos":[0,9]}]},{"pos":[15975,15976],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16003,16004],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16211,16233],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[16381,16387],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16454,16455],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16505,16511],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16572,16573]},{"pos":[16628,16634],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16694,16695],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16792,16798],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16865,16866],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16916,16922],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16983,16984]},{"pos":[17039,17045],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17105,17106],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17351,17382],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[17548,17563],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[17639,17640],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17690,17696],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17757,17758]},{"pos":[17813,17819],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17879,17880],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17986,18001],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[18077,18078],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18128,18134],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18195,18196]},{"pos":[18251,18257],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18317,18318],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18544,18553],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[18646,18653],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[18721,18722],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18749,18750],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18819,18826],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[18894,18895],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18922,18923],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19098,19115],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[19224,19239],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[19315,19316],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19343,19344],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19421,19436],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[19512,19513],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19540,19541],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19686,19692],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[19823,19829],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[19973,19978],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[20151,20164],"content":"AddressFamily","needQuote":true,"nodes":[{"content":"AddressFamily","pos":[0,13]}]},{"pos":[20342,20360],"content":"System.Net.Sockets","needQuote":true,"nodes":[{"content":"System.Net.Sockets","pos":[0,18]}]},{"pos":[20560,20573],"content":"AddressFamily","needQuote":true,"nodes":[{"content":"AddressFamily","pos":[0,13]}]},{"pos":[20802,20816],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[20935,20941],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21008,21009],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21059,21065],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21125,21126],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21209,21215],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21282,21283],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21333,21339],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21399,21400],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21573,21580],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[21746,21759],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[21860,21871],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[21943,21944],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21971,21972],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22045,22056],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[22128,22129],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22156,22157],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22333,22343],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[22438,22446],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[22515,22516],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22543,22544],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22614,22622],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[22691,22692],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22719,22720],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22886,22903],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[23079,23100],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[23294,23321],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Net.DnsEndPoint\n  commentId: T:System.Net.DnsEndPoint\n  id: DnsEndPoint\n  parent: System.Net\n  children:\n  - System.Net.DnsEndPoint.#ctor(System.String,System.Int32)\n  - System.Net.DnsEndPoint.#ctor(System.String,System.Int32,System.Net.Sockets.AddressFamily)\n  - System.Net.DnsEndPoint.AddressFamily\n  - System.Net.DnsEndPoint.Equals(System.Object)\n  - System.Net.DnsEndPoint.GetHashCode\n  - System.Net.DnsEndPoint.Host\n  - System.Net.DnsEndPoint.Port\n  - System.Net.DnsEndPoint.ToString\n  langs:\n  - csharp\n  - vb\n  name: DnsEndPoint\n  fullName: System.Net.DnsEndPoint\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DnsEndPoint\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 97\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Represents a network endpoint as a host name or a string representation of an IP address and a port number.</p>\\n\"\n  syntax:\n    content: 'public class DnsEndPoint : EndPoint'\n    content.vb: >-\n      Public Class DnsEndPoint\n          Inherits EndPoint\n  inheritance:\n  - System.Object\n  - System.Net.EndPoint\n  inheritedMembers:\n  - System.Net.EndPoint.Create(System.Net.SocketAddress)\n  - System.Net.EndPoint.Serialize\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: DnsEndPoint\n- uid: System.Net.DnsEndPoint.#ctor(System.String,System.Int32)\n  commentId: M:System.Net.DnsEndPoint.#ctor(System.String,System.Int32)\n  id: '#ctor(System.String,System.Int32)'\n  parent: System.Net.DnsEndPoint\n  langs:\n  - csharp\n  - vb\n  name: DnsEndPoint(String, Int32)\n  fullName: System.Net.DnsEndPoint.DnsEndPoint(System.String, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 99\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.DnsEndPoint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the host name or string representation of an IP address and a port number.</p>\\n\"\n  syntax:\n    content: public DnsEndPoint(string host, int port)\n    content.vb: Public Sub New(host As String, port As Integer)\n    parameters:\n    - id: host\n      type: System.String\n      description: \"\\n<p>The host name or a string representation of the IP address.</p>\\n\"\n    - id: port\n      type: System.Int32\n      description: \"\\n<p>The port number associated with the address, or 0 to specify any available port. <em>port</em> is in host order.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>host</em> parameter contains an empty string.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>host</em> parameter is a <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>port</em> is less than <xref href=\\\"System.Net.IPEndPoint.MinPort\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<em>port</em> is greater than <xref href=\\\"System.Net.IPEndPoint.MaxPort\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DnsEndPoint.DnsEndPoint(String, Int32)\n- uid: System.Net.DnsEndPoint.#ctor(System.String,System.Int32,System.Net.Sockets.AddressFamily)\n  commentId: M:System.Net.DnsEndPoint.#ctor(System.String,System.Int32,System.Net.Sockets.AddressFamily)\n  id: '#ctor(System.String,System.Int32,System.Net.Sockets.AddressFamily)'\n  parent: System.Net.DnsEndPoint\n  langs:\n  - csharp\n  - vb\n  name: DnsEndPoint(String, Int32, AddressFamily)\n  fullName: System.Net.DnsEndPoint.DnsEndPoint(System.String, System.Int32, System.Net.Sockets.AddressFamily)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 100\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.DnsEndPoint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the host name or string representation of an IP address, a port number, and an address family.</p>\\n\"\n  syntax:\n    content: public DnsEndPoint(string host, int port, AddressFamily addressFamily)\n    content.vb: Public Sub New(host As String, port As Integer, addressFamily As AddressFamily)\n    parameters:\n    - id: host\n      type: System.String\n      description: \"\\n<p>The host name or a string representation of the IP address.</p>\\n\"\n    - id: port\n      type: System.Int32\n      description: \"\\n<p>The port number associated with the address, or 0 to specify any available port. <em>port</em> is in host order.</p>\\n\"\n    - id: addressFamily\n      type: System.Net.Sockets.AddressFamily\n      description: \"\\n<p>One of the <xref href=\\\"System.Net.Sockets.AddressFamily\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>host</em> parameter contains an empty string.</p>\\n<p>-or- </p>\\n<p>\\n<em>addressFamily</em> is <xref href=\\\"System.Net.Sockets.AddressFamily.Unknown\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>host</em> parameter is a <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>port</em> is less than <xref href=\\\"System.Net.IPEndPoint.MinPort\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<em>port</em> is greater than <xref href=\\\"System.Net.IPEndPoint.MaxPort\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DnsEndPoint.DnsEndPoint(String, Int32, AddressFamily)\n- uid: System.Net.DnsEndPoint.AddressFamily\n  commentId: P:System.Net.DnsEndPoint.AddressFamily\n  id: AddressFamily\n  parent: System.Net.DnsEndPoint\n  langs:\n  - csharp\n  - vb\n  name: AddressFamily\n  fullName: System.Net.DnsEndPoint.AddressFamily\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddressFamily\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 101\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Gets the Internet Protocol (IP) address family.</p>\\n\"\n  syntax:\n    content: public override AddressFamily AddressFamily { get; }\n    content.vb: Public Overrides ReadOnly Property AddressFamily As AddressFamily\n    parameters: []\n    return:\n      type: System.Net.Sockets.AddressFamily\n      description: \"\\n<p>One of the <xref href=\\\"System.Net.Sockets.AddressFamily\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  overridden: System.Net.EndPoint.AddressFamily\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: DnsEndPoint.AddressFamily\n- uid: System.Net.DnsEndPoint.Host\n  commentId: P:System.Net.DnsEndPoint.Host\n  id: Host\n  parent: System.Net.DnsEndPoint\n  langs:\n  - csharp\n  - vb\n  name: Host\n  fullName: System.Net.DnsEndPoint.Host\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Host\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 102\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Gets the host name or string representation of the Internet Protocol (IP) address of the host.</p>\\n\"\n  syntax:\n    content: public string Host { get; }\n    content.vb: Public ReadOnly Property Host As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>A host name or string representation of an IP address.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DnsEndPoint.Host\n- uid: System.Net.DnsEndPoint.Port\n  commentId: P:System.Net.DnsEndPoint.Port\n  id: Port\n  parent: System.Net.DnsEndPoint\n  langs:\n  - csharp\n  - vb\n  name: Port\n  fullName: System.Net.DnsEndPoint.Port\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Port\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 103\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Gets the port number of the <xref href=\\\"System.Net.DnsEndPoint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public int Port { get; }\n    content.vb: Public ReadOnly Property Port As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer value in the range 0 to 0xffff indicating the port number of the <xref href=\\\"System.Net.DnsEndPoint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DnsEndPoint.Port\n- uid: System.Net.DnsEndPoint.Equals(System.Object)\n  commentId: M:System.Net.DnsEndPoint.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Net.DnsEndPoint\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Net.DnsEndPoint.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 104\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Net.DnsEndPoint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object comparand)\n    content.vb: Public Overrides Function Equals(comparand As Object) As Boolean\n    parameters:\n    - id: comparand\n      type: System.Object\n      description: \"\\n<p>A <xref href=\\\"System.Net.DnsEndPoint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance to compare to the current instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two <xref href=\\\"System.Net.DnsEndPoint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances are equal; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: DnsEndPoint.Equals(Object)\n- uid: System.Net.DnsEndPoint.GetHashCode\n  commentId: M:System.Net.DnsEndPoint.GetHashCode\n  id: GetHashCode\n  parent: System.Net.DnsEndPoint\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Net.DnsEndPoint.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 105\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Returns a hash value for a <xref href=\\\"System.Net.DnsEndPoint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer hash value for the <xref href=\\\"System.Net.DnsEndPoint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: DnsEndPoint.GetHashCode()\n- uid: System.Net.DnsEndPoint.ToString\n  commentId: M:System.Net.DnsEndPoint.ToString\n  id: ToString\n  parent: System.Net.DnsEndPoint\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Net.DnsEndPoint.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 106\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Returns the host name or string representation of the IP address and port number of the <xref href=\\\"System.Net.DnsEndPoint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string containing the address family, host name or IP address string, and the port number of the specified <xref href=\\\"System.Net.DnsEndPoint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: DnsEndPoint.ToString()\nreferences:\n- uid: System.Net\n  isExternal: false\n  name: System.Net\n  fullName: System.Net\n  commentId: N:System.Net\n  nameWithType: System.Net\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Net.EndPoint\n  parent: System.Net\n  isExternal: false\n  name: EndPoint\n  fullName: System.Net.EndPoint\n  commentId: T:System.Net.EndPoint\n  nameWithType: EndPoint\n- uid: System.Net.EndPoint.Create(System.Net.SocketAddress)\n  parent: System.Net.EndPoint\n  isExternal: false\n  name: Create(SocketAddress)\n  fullName: System.Net.EndPoint.Create(System.Net.SocketAddress)\n  spec.csharp:\n  - uid: System.Net.EndPoint.Create(System.Net.SocketAddress)\n    name: Create\n    fullName: System.Net.EndPoint.Create\n  - name: (\n    fullName: (\n  - uid: System.Net.SocketAddress\n    name: SocketAddress\n    fullName: System.Net.SocketAddress\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Net.EndPoint.Create(System.Net.SocketAddress)\n    name: Create\n    fullName: System.Net.EndPoint.Create\n  - name: (\n    fullName: (\n  - uid: System.Net.SocketAddress\n    name: SocketAddress\n    fullName: System.Net.SocketAddress\n  - name: )\n    fullName: )\n  commentId: M:System.Net.EndPoint.Create(System.Net.SocketAddress)\n  nameWithType: EndPoint.Create(SocketAddress)\n- uid: System.Net.EndPoint.Serialize\n  parent: System.Net.EndPoint\n  isExternal: false\n  name: Serialize()\n  fullName: System.Net.EndPoint.Serialize()\n  spec.csharp:\n  - uid: System.Net.EndPoint.Serialize\n    name: Serialize\n    fullName: System.Net.EndPoint.Serialize\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Net.EndPoint.Serialize\n    name: Serialize\n    fullName: System.Net.EndPoint.Serialize\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Net.EndPoint.Serialize\n  nameWithType: EndPoint.Serialize()\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Net.Sockets.AddressFamily\n  parent: System.Net.Sockets\n  isExternal: false\n  name: AddressFamily\n  fullName: System.Net.Sockets.AddressFamily\n  commentId: T:System.Net.Sockets.AddressFamily\n  nameWithType: AddressFamily\n- uid: System.Net.Sockets\n  isExternal: false\n  name: System.Net.Sockets\n  fullName: System.Net.Sockets\n  commentId: N:System.Net.Sockets\n  nameWithType: System.Net.Sockets\n- uid: System.Net.EndPoint.AddressFamily\n  parent: System.Net.EndPoint\n  isExternal: false\n  name: AddressFamily\n  fullName: System.Net.EndPoint.AddressFamily\n  commentId: P:System.Net.EndPoint.AddressFamily\n  nameWithType: EndPoint.AddressFamily\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}