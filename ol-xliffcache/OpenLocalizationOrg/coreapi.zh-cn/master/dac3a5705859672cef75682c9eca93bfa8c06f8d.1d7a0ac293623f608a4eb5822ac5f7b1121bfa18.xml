{"nodes":[{"pos":[382,385],"content":"Aes","needQuote":true,"nodes":[{"content":"Aes","pos":[0,3]}]},{"pos":[3776,3781],"content":"Aes()","needQuote":true,"nodes":[{"content":"Aes()","pos":[0,5]}]},{"pos":[4823,4838],"content":"LegalBlockSizes","needQuote":true,"nodes":[{"content":"LegalBlockSizes","pos":[0,15]}]},{"pos":[6028,6041],"content":"LegalKeySizes","needQuote":true,"nodes":[{"content":"LegalKeySizes","pos":[0,13]}]},{"pos":[7198,7206],"content":"Create()","needQuote":true,"nodes":[{"content":"Create()","pos":[0,8]}]},{"content":"\\n&lt;p&gt;A cryptographic object that is used to perform the symmetric algorithm.&lt;/p&gt;\\n","pos":[7989,8071],"source":"\\n<p>A cryptographic object that is used to perform the symmetric algorithm.</p>\\n"},{"pos":[8258,8286],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[8483,8489],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8690,8708],"content":"SymmetricAlgorithm","needQuote":true,"nodes":[{"content":"SymmetricAlgorithm","pos":[0,18]}]},{"pos":[8938,8949],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[9198,9212],"content":"BlockSizeValue","needQuote":true,"nodes":[{"content":"BlockSizeValue","pos":[0,14]}]},{"pos":[9574,9591],"content":"FeedbackSizeValue","needQuote":true,"nodes":[{"content":"FeedbackSizeValue","pos":[0,17]}]},{"pos":[9952,9959],"content":"IVValue","needQuote":true,"nodes":[{"content":"IVValue","pos":[0,7]}]},{"pos":[10291,10299],"content":"KeyValue","needQuote":true,"nodes":[{"content":"KeyValue","pos":[0,8]}]},{"pos":[10646,10666],"content":"LegalBlockSizesValue","needQuote":true,"nodes":[{"content":"LegalBlockSizesValue","pos":[0,20]}]},{"pos":[11047,11065],"content":"LegalKeySizesValue","needQuote":true,"nodes":[{"content":"LegalKeySizesValue","pos":[0,18]}]},{"pos":[11434,11446],"content":"KeySizeValue","needQuote":true,"nodes":[{"content":"KeySizeValue","pos":[0,12]}]},{"pos":[11794,11803],"content":"ModeValue","needQuote":true,"nodes":[{"content":"ModeValue","pos":[0,9]}]},{"pos":[12145,12157],"content":"PaddingValue","needQuote":true,"nodes":[{"content":"PaddingValue","pos":[0,12]}]},{"pos":[12503,12512],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[12673,12680],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[12782,12783],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12810,12811],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12914,12921],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[13023,13024],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13051,13052],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13331,13338],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[13495,13500],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[13600,13601],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13628,13629],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13730,13735],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[13835,13836],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13863,13864],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14157,14173],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[14364,14371],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[14473,14474],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14525,14532],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[14593,14594],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14713,14720],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[14822,14823],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14874,14881],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[14942,14943],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15266,15285],"content":"ValidKeySize(Int32)","needQuote":true,"nodes":[{"content":"ValidKeySize(Int32)","pos":[0,19]}]},{"pos":[15482,15494],"content":"ValidKeySize","needQuote":true,"nodes":[{"content":"ValidKeySize","pos":[0,12]}]},{"pos":[15601,15602],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15651,15656],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[15715,15716],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15838,15850],"content":"ValidKeySize","needQuote":true,"nodes":[{"content":"ValidKeySize","pos":[0,12]}]},{"pos":[15957,15958],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16007,16012],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[16071,16072],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16396,16410],"content":"Create(String)","needQuote":true,"nodes":[{"content":"Create(String)","pos":[0,14]}]},{"pos":[16597,16603],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[16704,16705],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16755,16761],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[16821,16822],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16939,16945],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[17046,17047],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17097,17103],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[17163,17164],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17472,17489],"content":"CreateEncryptor()","needQuote":true,"nodes":[{"content":"CreateEncryptor()","pos":[0,17]}]},{"pos":[17666,17681],"content":"CreateEncryptor","needQuote":true,"nodes":[{"content":"CreateEncryptor","pos":[0,15]}]},{"pos":[17791,17792],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17819,17820],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17931,17946],"content":"CreateEncryptor","needQuote":true,"nodes":[{"content":"CreateEncryptor","pos":[0,15]}]},{"pos":[18056,18057],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18084,18085],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18419,18450],"content":"CreateEncryptor(Byte[], Byte[])","needQuote":true,"nodes":[{"content":"CreateEncryptor(Byte[], Byte[])","pos":[0,31]}]},{"pos":[18836,18851],"content":"CreateEncryptor","needQuote":true,"nodes":[{"content":"CreateEncryptor","pos":[0,15]}]},{"pos":[18961,18962],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19010,19014],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[19073,19075]},{"content":",","pos":[19107,19108]},{"pos":[19161,19165],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[19224,19226]},{"pos":[19257,19258],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19398,19413],"content":"CreateEncryptor","needQuote":true,"nodes":[{"content":"CreateEncryptor","pos":[0,15]}]},{"pos":[19523,19524],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19572,19576],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[19634,19636],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[19665,19666]},{"pos":[19719,19723],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[19781,19783],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[19811,19812],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20230,20247],"content":"CreateDecryptor()","needQuote":true,"nodes":[{"content":"CreateDecryptor()","pos":[0,17]}]},{"pos":[20424,20439],"content":"CreateDecryptor","needQuote":true,"nodes":[{"content":"CreateDecryptor","pos":[0,15]}]},{"pos":[20549,20550],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20577,20578],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20689,20704],"content":"CreateDecryptor","needQuote":true,"nodes":[{"content":"CreateDecryptor","pos":[0,15]}]},{"pos":[20814,20815],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20842,20843],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21177,21208],"content":"CreateDecryptor(Byte[], Byte[])","needQuote":true,"nodes":[{"content":"CreateDecryptor(Byte[], Byte[])","pos":[0,31]}]},{"pos":[21594,21609],"content":"CreateDecryptor","needQuote":true,"nodes":[{"content":"CreateDecryptor","pos":[0,15]}]},{"pos":[21719,21720],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21768,21772],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[21831,21833]},{"content":",","pos":[21865,21866]},{"pos":[21919,21923],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[21982,21984]},{"pos":[22015,22016],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22156,22171],"content":"CreateDecryptor","needQuote":true,"nodes":[{"content":"CreateDecryptor","pos":[0,15]}]},{"pos":[22281,22282],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22330,22334],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[22392,22394],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[22423,22424]},{"pos":[22477,22481],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[22539,22541],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[22569,22570],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22984,22997],"content":"GenerateKey()","needQuote":true,"nodes":[{"content":"GenerateKey()","pos":[0,13]}]},{"pos":[23166,23177],"content":"GenerateKey","needQuote":true,"nodes":[{"content":"GenerateKey","pos":[0,11]}]},{"pos":[23283,23284],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23311,23312],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23419,23430],"content":"GenerateKey","needQuote":true,"nodes":[{"content":"GenerateKey","pos":[0,11]}]},{"pos":[23536,23537],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23564,23565],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23857,23869],"content":"GenerateIV()","needQuote":true,"nodes":[{"content":"GenerateIV()","pos":[0,12]}]},{"pos":[24036,24046],"content":"GenerateIV","needQuote":true,"nodes":[{"content":"GenerateIV","pos":[0,10]}]},{"pos":[24151,24152],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24179,24180],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24286,24296],"content":"GenerateIV","needQuote":true,"nodes":[{"content":"GenerateIV","pos":[0,10]}]},{"pos":[24401,24402],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24429,24430],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24719,24728],"content":"BlockSize","needQuote":true,"nodes":[{"content":"BlockSize","pos":[0,9]}]},{"pos":[25070,25082],"content":"FeedbackSize","needQuote":true,"nodes":[{"content":"FeedbackSize","pos":[0,12]}]},{"pos":[25423,25425],"content":"IV","needQuote":true,"nodes":[{"content":"IV","pos":[0,2]}]},{"pos":[25737,25740],"content":"Key","needQuote":true,"nodes":[{"content":"Key","pos":[0,3]}]},{"pos":[26059,26066],"content":"KeySize","needQuote":true,"nodes":[{"content":"KeySize","pos":[0,7]}]},{"pos":[26394,26398],"content":"Mode","needQuote":true,"nodes":[{"content":"Mode","pos":[0,4]}]},{"pos":[26720,26727],"content":"Padding","needQuote":true,"nodes":[{"content":"Padding","pos":[0,7]}]},{"pos":[26991,27001],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[27096,27104],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[27173,27174],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27201,27202],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27272,27280],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[27349,27350],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27377,27378],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27561,27575],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[27694,27700],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27767,27768],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27818,27824],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27884,27885],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27968,27974],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28041,28042],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28092,28098],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28158,28159],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28373,28395],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[28543,28549],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28616,28617],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28667,28673],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28734,28735]},{"pos":[28790,28796],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28856,28857],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28954,28960],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29027,29028],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29078,29084],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29145,29146]},{"pos":[29201,29207],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29267,29268],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29513,29544],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[29710,29725],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[29801,29802],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29852,29858],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29919,29920]},{"pos":[29975,29981],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30041,30042],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30148,30163],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[30239,30240],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30290,30296],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30357,30358]},{"pos":[30413,30419],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30479,30480],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30710,30723],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[30824,30835],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[30907,30908],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30935,30936],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31009,31020],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[31092,31093],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31120,31121],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31296,31305],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[31398,31405],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[31473,31474],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31501,31502],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31571,31578],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[31646,31647],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31674,31675],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31850,31867],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[31976,31991],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[32067,32068],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32095,32096],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32173,32188],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[32264,32265],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32292,32293],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32438,32444],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[32665,32680],"content":"LegalBlockSizes","needQuote":true,"nodes":[{"content":"LegalBlockSizes","pos":[0,15]}]},{"pos":[32942,32952],"content":"KeySizes[]","needQuote":true,"nodes":[{"content":"KeySizes[]","pos":[0,10]}]},{"pos":[33154,33162],"content":"KeySizes","needQuote":true,"nodes":[{"content":"KeySizes","pos":[0,8]}]},{"content":"[]","pos":[33226,33228]},{"pos":[33317,33325],"content":"KeySizes","needQuote":true,"nodes":[{"content":"KeySizes","pos":[0,8]}]},{"pos":[33388,33390],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[33619,33632],"content":"LegalKeySizes","needQuote":true,"nodes":[{"content":"LegalKeySizes","pos":[0,13]}]},{"pos":[33940,33943],"content":"Aes","needQuote":true,"nodes":[{"content":"Aes","pos":[0,3]}]}],"content":"items:\n- uid: System.Security.Cryptography.Aes\n  commentId: T:System.Security.Cryptography.Aes\n  id: Aes\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.Aes.#ctor\n  - System.Security.Cryptography.Aes.Create\n  - System.Security.Cryptography.Aes.LegalBlockSizes\n  - System.Security.Cryptography.Aes.LegalKeySizes\n  langs:\n  - csharp\n  - vb\n  name: Aes\n  fullName: System.Security.Cryptography.Aes\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Aes\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 10\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Represents the abstract base class from which all implementations of the Advanced Encryption Standard (AES) must inherit. </p>\\n\"\n  syntax:\n    content: 'public abstract class Aes : SymmetricAlgorithm, IDisposable'\n    content.vb: >-\n      Public MustInherit Class Aes\n          Inherits SymmetricAlgorithm\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.SymmetricAlgorithm\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  - System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  - System.Security.Cryptography.SymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.SymmetricAlgorithm.Clear\n  - System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  - System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n  - System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n  - System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n  - System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n  - System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  - System.Security.Cryptography.SymmetricAlgorithm.IV\n  - System.Security.Cryptography.SymmetricAlgorithm.Key\n  - System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  - System.Security.Cryptography.SymmetricAlgorithm.Mode\n  - System.Security.Cryptography.SymmetricAlgorithm.Padding\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: Aes\n- uid: System.Security.Cryptography.Aes.#ctor\n  commentId: M:System.Security.Cryptography.Aes.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.Aes\n  langs:\n  - csharp\n  - vb\n  name: Aes()\n  fullName: System.Security.Cryptography.Aes.Aes()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 12\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.Aes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. </p>\\n\"\n  syntax:\n    content: protected Aes()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: Aes.Aes()\n- uid: System.Security.Cryptography.Aes.LegalBlockSizes\n  commentId: P:System.Security.Cryptography.Aes.LegalBlockSizes\n  id: LegalBlockSizes\n  parent: System.Security.Cryptography.Aes\n  langs:\n  - csharp\n  - vb\n  name: LegalBlockSizes\n  fullName: System.Security.Cryptography.Aes.LegalBlockSizes\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LegalBlockSizes\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 13\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override KeySizes[] LegalBlockSizes { get; }\n    content.vb: Public Overrides ReadOnly Property LegalBlockSizes As KeySizes()\n    parameters: []\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n  overridden: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: Aes.LegalBlockSizes\n- uid: System.Security.Cryptography.Aes.LegalKeySizes\n  commentId: P:System.Security.Cryptography.Aes.LegalKeySizes\n  id: LegalKeySizes\n  parent: System.Security.Cryptography.Aes\n  langs:\n  - csharp\n  - vb\n  name: LegalKeySizes\n  fullName: System.Security.Cryptography.Aes.LegalKeySizes\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LegalKeySizes\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 14\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override KeySizes[] LegalKeySizes { get; }\n    content.vb: Public Overrides ReadOnly Property LegalKeySizes As KeySizes()\n    parameters: []\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n  overridden: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: Aes.LegalKeySizes\n- uid: System.Security.Cryptography.Aes.Create\n  commentId: M:System.Security.Cryptography.Aes.Create\n  id: Create\n  parent: System.Security.Cryptography.Aes\n  langs:\n  - csharp\n  - vb\n  name: Create()\n  fullName: System.Security.Cryptography.Aes.Create()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Create\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 15\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Creates a cryptographic object that is used to perform the symmetric algorithm.</p>\\n\"\n  syntax:\n    content: public static Aes Create()\n    content.vb: Public Shared Function Create As Aes\n    return:\n      type: System.Security.Cryptography.Aes\n      description: \"\\n<p>A cryptographic object that is used to perform the symmetric algorithm.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Aes.Create()\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.Cryptography.SymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: SymmetricAlgorithm\n  fullName: System.Security.Cryptography.SymmetricAlgorithm\n  commentId: T:System.Security.Cryptography.SymmetricAlgorithm\n  nameWithType: SymmetricAlgorithm\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: BlockSizeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  nameWithType: SymmetricAlgorithm.BlockSizeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: FeedbackSizeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  nameWithType: SymmetricAlgorithm.FeedbackSizeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: IVValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  nameWithType: SymmetricAlgorithm.IVValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: KeyValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  nameWithType: SymmetricAlgorithm.KeyValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: LegalBlockSizesValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  nameWithType: SymmetricAlgorithm.LegalBlockSizesValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: LegalKeySizesValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  nameWithType: SymmetricAlgorithm.LegalKeySizesValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: KeySizeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  nameWithType: SymmetricAlgorithm.KeySizeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: ModeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  nameWithType: SymmetricAlgorithm.ModeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: PaddingValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  nameWithType: SymmetricAlgorithm.PaddingValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: Dispose()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose()\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.Dispose\n  nameWithType: SymmetricAlgorithm.Dispose()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Clear\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: Clear()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Clear()\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.Clear\n    name: Clear\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.Clear\n    name: Clear\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.Clear\n  nameWithType: SymmetricAlgorithm.Clear()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: Dispose(Boolean)\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  nameWithType: SymmetricAlgorithm.Dispose(Boolean)\n- uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: ValidKeySize(Int32)\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n    name: ValidKeySize\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n    name: ValidKeySize\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n  nameWithType: SymmetricAlgorithm.ValidKeySize(Int32)\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: Create(String)\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)\n    name: Create\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)\n    name: Create\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)\n  nameWithType: SymmetricAlgorithm.Create(String)\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: CreateEncryptor()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor()\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n    name: CreateEncryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n    name: CreateEncryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n  nameWithType: SymmetricAlgorithm.CreateEncryptor()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: CreateEncryptor(Byte[], Byte[])\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[], System.Byte[])\n  fullname.vb: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte(), System.Byte())\n  name.vb: CreateEncryptor(Byte(), Byte())\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n    name: CreateEncryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n    name: CreateEncryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n  nameWithType: SymmetricAlgorithm.CreateEncryptor(Byte[], Byte[])\n  nameWithType.vb: SymmetricAlgorithm.CreateEncryptor(Byte(), Byte())\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: CreateDecryptor()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor()\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n    name: CreateDecryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n    name: CreateDecryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n  nameWithType: SymmetricAlgorithm.CreateDecryptor()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: CreateDecryptor(Byte[], Byte[])\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[], System.Byte[])\n  fullname.vb: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte(), System.Byte())\n  name.vb: CreateDecryptor(Byte(), Byte())\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n    name: CreateDecryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n    name: CreateDecryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n  nameWithType: SymmetricAlgorithm.CreateDecryptor(Byte[], Byte[])\n  nameWithType.vb: SymmetricAlgorithm.CreateDecryptor(Byte(), Byte())\n- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: GenerateKey()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey()\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n    name: GenerateKey\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n    name: GenerateKey\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n  nameWithType: SymmetricAlgorithm.GenerateKey()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: GenerateIV()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV()\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n    name: GenerateIV\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n    name: GenerateIV\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n  nameWithType: SymmetricAlgorithm.GenerateIV()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: BlockSize\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  nameWithType: SymmetricAlgorithm.BlockSize\n- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: FeedbackSize\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  nameWithType: SymmetricAlgorithm.FeedbackSize\n- uid: System.Security.Cryptography.SymmetricAlgorithm.IV\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: IV\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.IV\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.IV\n  nameWithType: SymmetricAlgorithm.IV\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Key\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: Key\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Key\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.Key\n  nameWithType: SymmetricAlgorithm.Key\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: KeySize\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  nameWithType: SymmetricAlgorithm.KeySize\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: Mode\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Mode\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.Mode\n  nameWithType: SymmetricAlgorithm.Mode\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: Padding\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Padding\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.Padding\n  nameWithType: SymmetricAlgorithm.Padding\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: LegalBlockSizes\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  nameWithType: SymmetricAlgorithm.LegalBlockSizes\n- uid: System.Security.Cryptography.KeySizes[]\n  name: KeySizes[]\n  fullName: System.Security.Cryptography.KeySizes[]\n  fullname.vb: System.Security.Cryptography.KeySizes()\n  name.vb: KeySizes()\n  spec.csharp:\n  - uid: System.Security.Cryptography.KeySizes\n    name: KeySizes\n    fullName: System.Security.Cryptography.KeySizes\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Security.Cryptography.KeySizes\n    name: KeySizes\n    fullName: System.Security.Cryptography.KeySizes\n  - name: ()\n    fullName: ()\n  nameWithType: KeySizes[]\n  nameWithType.vb: KeySizes()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: LegalKeySizes\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  nameWithType: SymmetricAlgorithm.LegalKeySizes\n- uid: System.Security.Cryptography.Aes\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: Aes\n  fullName: System.Security.Cryptography.Aes\n  commentId: T:System.Security.Cryptography.Aes\n  nameWithType: Aes\n"}