{"nodes":[{"pos":[644,667],"content":"XmlNodeChangedEventArgs","needQuote":true,"nodes":[{"content":"XmlNodeChangedEventArgs","pos":[0,23]}]},{"pos":[3034,3122],"content":"XmlNodeChangedEventArgs(XmlNode, XmlNode, XmlNode, String, String, XmlNodeChangedAction)","needQuote":true,"nodes":[{"content":"XmlNodeChangedEventArgs(XmlNode, XmlNode, XmlNode, String, String, XmlNodeChangedAction)","pos":[0,88]}]},{"pos":[5919,5925],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"\\n&lt;p&gt;An &lt;strong&gt;XmlNodeChangedAction&lt;/strong&gt; value describing the node change event.&lt;/p&gt;\\n&lt;p&gt;XmlNodeChangedAction Value &lt;/p&gt;\\n&lt;p&gt;Description &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Insert &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;A node has been or will be inserted.","pos":[6651,6889],"source":"\\n<p>An <strong>XmlNodeChangedAction</strong> value describing the node change event.</p>\\n<p>XmlNodeChangedAction Value </p>\\n<p>Description </p>\\n<table><tbody><tr><td>\\n<p>Insert </p>\\n</td><td>\\n<p>A node has been or will be inserted."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Remove &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;A node has been or will be removed.","pos":[6890,6981],"source":" </p>\\n</td></tr><tr><td>\\n<p>Remove </p>\\n</td><td>\\n<p>A node has been or will be removed."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Change &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;A node has been or will be changed.","pos":[6982,7073],"source":" </p>\\n</td></tr><tr><td>\\n<p>Change </p>\\n</td><td>\\n<p>A node has been or will be changed."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n&lt;p&gt;The &lt;strong&gt;Action&lt;/strong&gt; value does not differentiate between when the event occurred (before or after).","pos":[7074,7218],"source":" </p>\\n</td></tr></tbody></table>\\n<p>The <strong>Action</strong> value does not differentiate between when the event occurred (before or after)."},{"content":"You can create separate event handlers to handle both instances.&lt;/p&gt;\\n","pos":[7219,7289],"source":" You can create separate event handlers to handle both instances.</p>\\n"},{"pos":[7625,7634],"content":"NewParent","needQuote":true,"nodes":[{"content":"NewParent","pos":[0,9]}]},{"pos":[9055,9063],"content":"NewValue","needQuote":true,"nodes":[{"content":"NewValue","pos":[0,8]}]},{"pos":[10597,10601],"content":"Node","needQuote":true,"nodes":[{"content":"Node","pos":[0,4]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlNode&lt;/strong&gt; that is being added, removed or changed; this property never returns &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[11340,11471],"source":"\\n<p>The <strong>XmlNode</strong> that is being added, removed or changed; this property never returns <strong>null</strong>.</p>\\n"},{"pos":[11805,11814],"content":"OldParent","needQuote":true,"nodes":[{"content":"OldParent","pos":[0,9]}]},{"pos":[13234,13242],"content":"OldValue","needQuote":true,"nodes":[{"content":"OldValue","pos":[0,8]}]},{"pos":[14690,14700],"content":"System.Xml","needQuote":true,"nodes":[{"content":"System.Xml","pos":[0,10]}]},{"pos":[14843,14849],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14997,15006],"content":"EventArgs","needQuote":true,"nodes":[{"content":"EventArgs","pos":[0,9]}]},{"pos":[15178,15183],"content":"Empty","needQuote":true,"nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[15370,15380],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[15475,15483],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[15552,15553],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15580,15581],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15651,15659],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[15728,15729],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15756,15757],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15940,15954],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[16073,16079],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16146,16147],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16197,16203],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16263,16264],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16347,16353],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16420,16421],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16471,16477],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16537,16538],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16752,16774],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[16922,16928],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16995,16996],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17046,17052],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17113,17114]},{"pos":[17169,17175],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17235,17236],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17333,17339],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17406,17407],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17457,17463],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17524,17525]},{"pos":[17580,17586],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17646,17647],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17892,17923],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[18089,18104],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[18180,18181],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18231,18237],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18298,18299]},{"pos":[18354,18360],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18420,18421],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18527,18542],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[18618,18619],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18669,18675],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18736,18737]},{"pos":[18792,18798],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18858,18859],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19089,19102],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[19203,19214],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[19286,19287],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19314,19315],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19388,19399],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[19471,19472],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19499,19500],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19675,19684],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[19777,19784],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[19852,19853],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19880,19881],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19950,19957],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[20025,20026],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20053,20054],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20229,20246],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[20355,20370],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[20446,20447],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20474,20475],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20552,20567],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[20643,20644],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20671,20672],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20817,20823],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[20963,20970],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[21126,21132],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[21299,21319],"content":"XmlNodeChangedAction","needQuote":true,"nodes":[{"content":"XmlNodeChangedAction","pos":[0,20]}]}],"content":"items:\n- uid: System.Xml.XmlNodeChangedEventArgs\n  commentId: T:System.Xml.XmlNodeChangedEventArgs\n  id: XmlNodeChangedEventArgs\n  parent: System.Xml\n  children:\n  - System.Xml.XmlNodeChangedEventArgs.#ctor(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode,System.String,System.String,System.Xml.XmlNodeChangedAction)\n  - System.Xml.XmlNodeChangedEventArgs.Action\n  - System.Xml.XmlNodeChangedEventArgs.NewParent\n  - System.Xml.XmlNodeChangedEventArgs.NewValue\n  - System.Xml.XmlNodeChangedEventArgs.Node\n  - System.Xml.XmlNodeChangedEventArgs.OldParent\n  - System.Xml.XmlNodeChangedEventArgs.OldValue\n  langs:\n  - csharp\n  - vb\n  name: XmlNodeChangedEventArgs\n  fullName: System.Xml.XmlNodeChangedEventArgs\n  type: Class\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XmlNodeChangedEventArgs\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 290\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Provides data for the <xref href=\\\"System.Xml.XmlDocument.NodeChanged\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Xml.XmlDocument.NodeChanging\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Xml.XmlDocument.NodeInserted\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Xml.XmlDocument.NodeInserting\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Xml.XmlDocument.NodeRemoved\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Xml.XmlDocument.NodeRemoving\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> events.</p>\\n\"\n  syntax:\n    content: 'public class XmlNodeChangedEventArgs : EventArgs'\n    content.vb: >-\n      Public Class XmlNodeChangedEventArgs\n          Inherits EventArgs\n  seealso:\n  - type: System.Xml.XmlNodeChangedEventHandler\n    commentId: T:System.Xml.XmlNodeChangedEventHandler\n  inheritance:\n  - System.Object\n  - System.EventArgs\n  inheritedMembers:\n  - System.EventArgs.Empty\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: XmlNodeChangedEventArgs\n- uid: System.Xml.XmlNodeChangedEventArgs.#ctor(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode,System.String,System.String,System.Xml.XmlNodeChangedAction)\n  commentId: M:System.Xml.XmlNodeChangedEventArgs.#ctor(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode,System.String,System.String,System.Xml.XmlNodeChangedAction)\n  id: '#ctor(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode,System.String,System.String,System.Xml.XmlNodeChangedAction)'\n  parent: System.Xml.XmlNodeChangedEventArgs\n  langs:\n  - csharp\n  - vb\n  name: XmlNodeChangedEventArgs(XmlNode, XmlNode, XmlNode, String, String, XmlNodeChangedAction)\n  fullName: System.Xml.XmlNodeChangedEventArgs.XmlNodeChangedEventArgs(System.Xml.XmlNode, System.Xml.XmlNode, System.Xml.XmlNode, System.String, System.String, System.Xml.XmlNodeChangedAction)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 292\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Xml.XmlNodeChangedEventArgs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public XmlNodeChangedEventArgs(XmlNode node, XmlNode oldParent, XmlNode newParent, string oldValue, string newValue, XmlNodeChangedAction action)\n    content.vb: Public Sub New(node As XmlNode, oldParent As XmlNode, newParent As XmlNode, oldValue As String, newValue As String, action As XmlNodeChangedAction)\n    parameters:\n    - id: node\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that generated the event.</p>\\n\"\n    - id: oldParent\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The old parent <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that generated the event.</p>\\n\"\n    - id: newParent\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The new parent <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that generated the event.</p>\\n\"\n    - id: oldValue\n      type: System.String\n      description: \"\\n<p>The old value of the <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that generated the event.</p>\\n\"\n    - id: newValue\n      type: System.String\n      description: \"\\n<p>The new value of the <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that generated the event.</p>\\n\"\n    - id: action\n      type: System.Xml.XmlNodeChangedAction\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlNodeChangedAction\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlNodeChangedEventArgs.XmlNodeChangedEventArgs(XmlNode, XmlNode, XmlNode, String, String, XmlNodeChangedAction)\n- uid: System.Xml.XmlNodeChangedEventArgs.Action\n  commentId: P:System.Xml.XmlNodeChangedEventArgs.Action\n  id: Action\n  parent: System.Xml.XmlNodeChangedEventArgs\n  langs:\n  - csharp\n  - vb\n  name: Action\n  fullName: System.Xml.XmlNodeChangedEventArgs.Action\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Action\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 293\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets a value indicating what type of node change event is occurring.</p>\\n\"\n  syntax:\n    content: public XmlNodeChangedAction Action { get; }\n    content.vb: Public ReadOnly Property Action As XmlNodeChangedAction\n    parameters: []\n    return:\n      type: System.Xml.XmlNodeChangedAction\n      description: \"\\n<p>An <strong>XmlNodeChangedAction</strong> value describing the node change event.</p>\\n<p>XmlNodeChangedAction Value </p>\\n<p>Description </p>\\n<table><tbody><tr><td>\\n<p>Insert </p>\\n</td><td>\\n<p>A node has been or will be inserted. </p>\\n</td></tr><tr><td>\\n<p>Remove </p>\\n</td><td>\\n<p>A node has been or will be removed. </p>\\n</td></tr><tr><td>\\n<p>Change </p>\\n</td><td>\\n<p>A node has been or will be changed. </p>\\n</td></tr></tbody></table>\\n<p>The <strong>Action</strong> value does not differentiate between when the event occurred (before or after). You can create separate event handlers to handle both instances.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: XmlNodeChangedEventArgs.Action\n- uid: System.Xml.XmlNodeChangedEventArgs.NewParent\n  commentId: P:System.Xml.XmlNodeChangedEventArgs.NewParent\n  id: NewParent\n  parent: System.Xml.XmlNodeChangedEventArgs\n  langs:\n  - csharp\n  - vb\n  name: NewParent\n  fullName: System.Xml.XmlNodeChangedEventArgs.NewParent\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NewParent\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 294\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the value of the <xref href=\\\"System.Xml.XmlNode.ParentNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> after the operation completes.</p>\\n\"\n  syntax:\n    content: public XmlNode NewParent { get; }\n    content.vb: Public ReadOnly Property NewParent As XmlNode\n    parameters: []\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The value of the <strong>ParentNode</strong> after the operation completes. This property returns <strong>null</strong> if the node is being removed.</p>\\n<p>For attribute nodes this property returns the <xref href=\\\"System.Xml.XmlAttribute.OwnerElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: XmlNodeChangedEventArgs.NewParent\n- uid: System.Xml.XmlNodeChangedEventArgs.NewValue\n  commentId: P:System.Xml.XmlNodeChangedEventArgs.NewValue\n  id: NewValue\n  parent: System.Xml.XmlNodeChangedEventArgs\n  langs:\n  - csharp\n  - vb\n  name: NewValue\n  fullName: System.Xml.XmlNodeChangedEventArgs.NewValue\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NewValue\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 295\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the new value of the node.</p>\\n\"\n  syntax:\n    content: public string NewValue { get; }\n    content.vb: Public ReadOnly Property NewValue As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The new value of the node. This property returns <strong>null</strong> if the node is neither an attribute nor a text node, or if the node is being removed.</p>\\n<p>If called in a <xref href=\\\"System.Xml.XmlDocument.NodeChanging\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> event, <strong>NewValue</strong> returns the value of the node if the change is successful. If called in a <xref href=\\\"System.Xml.XmlDocument.NodeChanged\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> event, <strong>NewValue</strong> returns the current value of the node.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: XmlNodeChangedEventArgs.NewValue\n- uid: System.Xml.XmlNodeChangedEventArgs.Node\n  commentId: P:System.Xml.XmlNodeChangedEventArgs.Node\n  id: Node\n  parent: System.Xml.XmlNodeChangedEventArgs\n  langs:\n  - csharp\n  - vb\n  name: Node\n  fullName: System.Xml.XmlNodeChangedEventArgs.Node\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Node\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 296\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is being added, removed or changed.</p>\\n\"\n  syntax:\n    content: public XmlNode Node { get; }\n    content.vb: Public ReadOnly Property Node As XmlNode\n    parameters: []\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The <strong>XmlNode</strong> that is being added, removed or changed; this property never returns <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: XmlNodeChangedEventArgs.Node\n- uid: System.Xml.XmlNodeChangedEventArgs.OldParent\n  commentId: P:System.Xml.XmlNodeChangedEventArgs.OldParent\n  id: OldParent\n  parent: System.Xml.XmlNodeChangedEventArgs\n  langs:\n  - csharp\n  - vb\n  name: OldParent\n  fullName: System.Xml.XmlNodeChangedEventArgs.OldParent\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OldParent\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 297\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the value of the <xref href=\\\"System.Xml.XmlNode.ParentNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> before the operation began.</p>\\n\"\n  syntax:\n    content: public XmlNode OldParent { get; }\n    content.vb: Public ReadOnly Property OldParent As XmlNode\n    parameters: []\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The value of the <strong>ParentNode</strong> before the operation began. This property returns <strong>null</strong> if the node did not have a parent.</p>\\n<p>For attribute nodes this property returns the <xref href=\\\"System.Xml.XmlAttribute.OwnerElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: XmlNodeChangedEventArgs.OldParent\n- uid: System.Xml.XmlNodeChangedEventArgs.OldValue\n  commentId: P:System.Xml.XmlNodeChangedEventArgs.OldValue\n  id: OldValue\n  parent: System.Xml.XmlNodeChangedEventArgs\n  langs:\n  - csharp\n  - vb\n  name: OldValue\n  fullName: System.Xml.XmlNodeChangedEventArgs.OldValue\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OldValue\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 298\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the original value of the node.</p>\\n\"\n  syntax:\n    content: public string OldValue { get; }\n    content.vb: Public ReadOnly Property OldValue As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The original value of the node. This property returns <strong>null</strong> if the node is neither an attribute nor a text node, or if the node is being inserted.</p>\\n<p>If called in a <xref href=\\\"System.Xml.XmlDocument.NodeChanging\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> event, <strong>OldValue</strong> returns the current value of the node that will be replaced if the change is successful. If called in a <xref href=\\\"System.Xml.XmlDocument.NodeChanged\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> event, <strong>OldValue</strong> returns the value of node prior to the change.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: XmlNodeChangedEventArgs.OldValue\nreferences:\n- uid: System.Xml\n  isExternal: false\n  name: System.Xml\n  fullName: System.Xml\n  commentId: N:System.Xml\n  nameWithType: System.Xml\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.EventArgs\n  parent: System\n  isExternal: false\n  name: EventArgs\n  fullName: System.EventArgs\n  commentId: T:System.EventArgs\n  nameWithType: EventArgs\n- uid: System.EventArgs.Empty\n  parent: System.EventArgs\n  isExternal: true\n  name: Empty\n  fullName: System.EventArgs.Empty\n  commentId: F:System.EventArgs.Empty\n  nameWithType: EventArgs.Empty\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Xml.XmlNode\n  parent: System.Xml\n  isExternal: false\n  name: XmlNode\n  fullName: System.Xml.XmlNode\n  commentId: T:System.Xml.XmlNode\n  nameWithType: XmlNode\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Xml.XmlNodeChangedAction\n  parent: System.Xml\n  isExternal: false\n  name: XmlNodeChangedAction\n  fullName: System.Xml.XmlNodeChangedAction\n  commentId: T:System.Xml.XmlNodeChangedAction\n  nameWithType: XmlNodeChangedAction\n"}