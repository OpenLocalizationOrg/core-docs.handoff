{"nodes":[{"pos":[699,709],"content":"HMACSHA384","needQuote":true,"nodes":[{"content":"HMACSHA384","pos":[0,10]}]},{"pos":[3842,3854],"content":"HMACSHA384()","needQuote":true,"nodes":[{"content":"HMACSHA384()","pos":[0,12]}]},{"pos":[4998,5016],"content":"HMACSHA384(Byte[])","needQuote":true,"nodes":[{"content":"HMACSHA384(Byte[])","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;key&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[6405,6462],"source":"\\n<p>The <em>key</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[6463,6469],"source":" </p>\\n"},{"pos":[6955,6963],"content":"HashSize","needQuote":true,"nodes":[{"content":"HashSize","pos":[0,8]}]},{"pos":[8075,8078],"content":"Key","needQuote":true,"nodes":[{"content":"Key","pos":[0,3]}]},{"pos":[9205,9221],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[10498,10528],"content":"HashCore(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"HashCore(Byte[], Int32, Int32)","pos":[0,30]}]},{"pos":[12070,12081],"content":"HashFinal()","needQuote":true,"nodes":[{"content":"HashFinal()","pos":[0,11]}]},{"pos":[13172,13184],"content":"Initialize()","needQuote":true,"nodes":[{"content":"Initialize()","pos":[0,12]}]},{"pos":[14064,14092],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[14289,14295],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14491,14504],"content":"HashAlgorithm","needQuote":true,"nodes":[{"content":"HashAlgorithm","pos":[0,13]}]},{"pos":[14770,14788],"content":"KeyedHashAlgorithm","needQuote":true,"nodes":[{"content":"KeyedHashAlgorithm","pos":[0,18]}]},{"pos":[15055,15059],"content":"HMAC","needQuote":true,"nodes":[{"content":"HMAC","pos":[0,4]}]},{"pos":[15296,15312],"content":"ICryptoTransform","needQuote":true,"nodes":[{"content":"ICryptoTransform","pos":[0,16]}]},{"pos":[15536,15547],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[15760,15768],"content":"Create()","needQuote":true,"nodes":[{"content":"Create()","pos":[0,8]}]},{"pos":[15899,15905],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[15992,15993],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16020,16021],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16109,16115],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[16202,16203],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16230,16231],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16468,16482],"content":"Create(String)","needQuote":true,"nodes":[{"content":"Create(String)","pos":[0,14]}]},{"pos":[16641,16647],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[16734,16735],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16785,16791],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[16851,16852],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16955,16961],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[17048,17049],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17099,17105],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[17165,17166],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17417,17431],"content":"BlockSizeValue","needQuote":true,"nodes":[{"content":"BlockSizeValue","pos":[0,14]}]},{"pos":[17714,17722],"content":"HashName","needQuote":true,"nodes":[{"content":"HashName","pos":[0,8]}]},{"pos":[18015,18023],"content":"KeyValue","needQuote":true,"nodes":[{"content":"KeyValue","pos":[0,8]}]},{"pos":[18353,18366],"content":"HashSizeValue","needQuote":true,"nodes":[{"content":"HashSizeValue","pos":[0,13]}]},{"pos":[18692,18701],"content":"HashValue","needQuote":true,"nodes":[{"content":"HashValue","pos":[0,9]}]},{"pos":[19011,19016],"content":"State","needQuote":true,"nodes":[{"content":"State","pos":[0,5]}]},{"pos":[19338,19357],"content":"ComputeHash(Stream)","needQuote":true,"nodes":[{"content":"ComputeHash(Stream)","pos":[0,19]}]},{"pos":[19550,19561],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[19641,19642],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19695,19701],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[19764,19765],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19885,19896],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[19976,19977],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20030,20036],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[20099,20100],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20412,20431],"content":"ComputeHash(Byte[])","needQuote":true,"nodes":[{"content":"ComputeHash(Byte[])","pos":[0,19]}]},{"pos":[20734,20745],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[20825,20826],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20874,20878],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[20937,20939]},{"pos":[20970,20971],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21088,21099],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[21179,21180],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21228,21232],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[21290,21292],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[21320,21321],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21709,21742],"content":"ComputeHash(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ComputeHash(Byte[], Int32, Int32)","pos":[0,33]}]},{"pos":[22141,22152],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[22232,22233],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22281,22285],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[22344,22346]},{"content":",","pos":[22378,22379]},{"pos":[22433,22438],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[22498,22499]},{"pos":[22553,22558],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[22617,22618],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22761,22772],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[22852,22853],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22901,22905],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[22963,22965],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[22994,22995]},{"pos":[23049,23054],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[23114,23115]},{"pos":[23169,23174],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[23233,23234],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23706,23757],"content":"TransformBlock(Byte[], Int32, Int32, Byte[], Int32)","needQuote":true,"nodes":[{"content":"TransformBlock(Byte[], Int32, Int32, Byte[], Int32)","pos":[0,51]}]},{"pos":[24268,24282],"content":"TransformBlock","needQuote":true,"nodes":[{"content":"TransformBlock","pos":[0,14]}]},{"pos":[24386,24387],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24435,24439],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[24498,24500]},{"content":",","pos":[24532,24533]},{"pos":[24587,24592],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[24652,24653]},{"pos":[24707,24712],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[24772,24773]},{"pos":[24826,24830],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[24889,24891]},{"content":",","pos":[24923,24924]},{"pos":[24978,24983],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[25042,25043],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25216,25230],"content":"TransformBlock","needQuote":true,"nodes":[{"content":"TransformBlock","pos":[0,14]}]},{"pos":[25334,25335],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25383,25387],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[25445,25447],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[25476,25477]},{"pos":[25531,25536],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[25596,25597]},{"pos":[25651,25656],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[25716,25717]},{"pos":[25770,25774],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[25832,25834],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[25863,25864]},{"pos":[25918,25923],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[25982,25983],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26499,26540],"content":"TransformFinalBlock(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"TransformFinalBlock(Byte[], Int32, Int32)","pos":[0,41]}]},{"pos":[26971,26990],"content":"TransformFinalBlock","needQuote":true,"nodes":[{"content":"TransformFinalBlock","pos":[0,19]}]},{"pos":[27099,27100],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27148,27152],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[27211,27213]},{"content":",","pos":[27245,27246]},{"pos":[27300,27305],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[27365,27366]},{"pos":[27420,27425],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[27484,27485],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27636,27655],"content":"TransformFinalBlock","needQuote":true,"nodes":[{"content":"TransformFinalBlock","pos":[0,19]}]},{"pos":[27764,27765],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27813,27817],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[27875,27877],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[27906,27907]},{"pos":[27961,27966],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[28026,28027]},{"pos":[28081,28086],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28145,28146],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28568,28577],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[28728,28735],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[28811,28812],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28839,28840],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28938,28945],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[29021,29022],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29049,29050],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29309,29316],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[29463,29468],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[29563,29564],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29591,29592],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29688,29693],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[29788,29789],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29816,29817],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30071,30075],"content":"Hash","needQuote":true,"nodes":[{"content":"Hash","pos":[0,4]}]},{"pos":[30379,30393],"content":"InputBlockSize","needQuote":true,"nodes":[{"content":"InputBlockSize","pos":[0,14]}]},{"pos":[30728,30743],"content":"OutputBlockSize","needQuote":true,"nodes":[{"content":"OutputBlockSize","pos":[0,15]}]},{"pos":[31092,31118],"content":"CanTransformMultipleBlocks","needQuote":true,"nodes":[{"content":"CanTransformMultipleBlocks","pos":[0,26]}]},{"pos":[31491,31508],"content":"CanReuseTransform","needQuote":true,"nodes":[{"content":"CanReuseTransform","pos":[0,17]}]},{"pos":[31787,31797],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[31892,31900],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[31969,31970],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31997,31998],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32068,32076],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[32145,32146],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32173,32174],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32357,32371],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[32490,32496],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[32563,32564],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32614,32620],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32680,32681],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32764,32770],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[32837,32838],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32888,32894],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32954,32955],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33169,33191],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[33339,33345],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[33412,33413],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33463,33469],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[33530,33531]},{"pos":[33586,33592],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33652,33653],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33750,33756],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[33823,33824],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33874,33880],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[33941,33942]},{"pos":[33997,34003],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34063,34064],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34309,34340],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[34506,34521],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[34597,34598],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34648,34654],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[34715,34716]},{"pos":[34771,34777],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34837,34838],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34944,34959],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[35035,35036],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35086,35092],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[35153,35154]},{"pos":[35209,35215],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[35275,35276],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35506,35519],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[35620,35631],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[35703,35704],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35731,35732],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35805,35816],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[35888,35889],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35916,35917],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36092,36101],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[36194,36201],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[36269,36270],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36297,36298],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36367,36374],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[36442,36443],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36470,36471],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36646,36663],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[36772,36787],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[36863,36864],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36891,36892],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36969,36984],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[37060,37061],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37088,37089],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37234,37240],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[37334,37340],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[37460,37464],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[37523,37525]},{"pos":[37588,37592],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[37650,37652],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[37859,37867],"content":"HashSize","needQuote":true,"nodes":[{"content":"HashSize","pos":[0,8]}]},{"pos":[38103,38108],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[38300,38303],"content":"Key","needQuote":true,"nodes":[{"content":"Key","pos":[0,3]}]},{"pos":[38568,38584],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[38747,38754],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[38842,38843],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38894,38901],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[38962,38963],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39068,39075],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[39163,39164],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39215,39222],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[39283,39284],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39479,39486],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[39730,39760],"content":"HashCore(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"HashCore(Byte[], Int32, Int32)","pos":[0,30]}]},{"pos":[40120,40128],"content":"HashCore","needQuote":true,"nodes":[{"content":"HashCore","pos":[0,8]}]},{"pos":[40217,40218],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40266,40270],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[40329,40331]},{"content":",","pos":[40363,40364]},{"pos":[40418,40423],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[40483,40484]},{"pos":[40538,40543],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[40602,40603],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40734,40742],"content":"HashCore","needQuote":true,"nodes":[{"content":"HashCore","pos":[0,8]}]},{"pos":[40831,40832],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40880,40884],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[40942,40944],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[40973,40974]},{"pos":[41028,41033],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[41093,41094]},{"pos":[41148,41153],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[41212,41213],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41558,41569],"content":"HashFinal()","needQuote":true,"nodes":[{"content":"HashFinal()","pos":[0,11]}]},{"pos":[41706,41715],"content":"HashFinal","needQuote":true,"nodes":[{"content":"HashFinal","pos":[0,9]}]},{"pos":[41805,41806],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41833,41834],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41925,41934],"content":"HashFinal","needQuote":true,"nodes":[{"content":"HashFinal","pos":[0,9]}]},{"pos":[42024,42025],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42052,42053],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42285,42297],"content":"Initialize()","needQuote":true,"nodes":[{"content":"Initialize()","pos":[0,12]}]},{"pos":[42436,42446],"content":"Initialize","needQuote":true,"nodes":[{"content":"Initialize","pos":[0,10]}]},{"pos":[42537,42538],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42565,42566],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42658,42668],"content":"Initialize","needQuote":true,"nodes":[{"content":"Initialize","pos":[0,10]}]},{"pos":[42759,42760],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42787,42788],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42963,42984],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Security.Cryptography.HMACSHA384\n  commentId: T:System.Security.Cryptography.HMACSHA384\n  id: HMACSHA384\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.HMACSHA384.#ctor\n  - System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])\n  - System.Security.Cryptography.HMACSHA384.Dispose(System.Boolean)\n  - System.Security.Cryptography.HMACSHA384.HashCore(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HMACSHA384.HashFinal\n  - System.Security.Cryptography.HMACSHA384.HashSize\n  - System.Security.Cryptography.HMACSHA384.Initialize\n  - System.Security.Cryptography.HMACSHA384.Key\n  langs:\n  - csharp\n  - vb\n  name: HMACSHA384\n  fullName: System.Security.Cryptography.HMACSHA384\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HMACSHA384\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 145\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Computes a Hash-based Message Authentication Code (HMAC) using the <xref href=\\\"System.Security.Cryptography.SHA384\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> hash function.</p>\\n\"\n  syntax:\n    content: 'public class HMACSHA384 : HMAC, ICryptoTransform, IDisposable'\n    content.vb: >-\n      Public Class HMACSHA384\n          Inherits HMAC\n          Implements ICryptoTransform, IDisposable\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.HashAlgorithm\n  - System.Security.Cryptography.KeyedHashAlgorithm\n  - System.Security.Cryptography.HMAC\n  implements:\n  - System.Security.Cryptography.ICryptoTransform\n  - System.IDisposable\n  inheritedMembers:\n  - System.Security.Cryptography.HMAC.Create\n  - System.Security.Cryptography.HMAC.Create(System.String)\n  - System.Security.Cryptography.HMAC.BlockSizeValue\n  - System.Security.Cryptography.HMAC.HashName\n  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue\n  - System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  - System.Security.Cryptography.HashAlgorithm.HashValue\n  - System.Security.Cryptography.HashAlgorithm.State\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.Dispose\n  - System.Security.Cryptography.HashAlgorithm.Clear\n  - System.Security.Cryptography.HashAlgorithm.Hash\n  - System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: HMACSHA384\n- uid: System.Security.Cryptography.HMACSHA384.#ctor\n  commentId: M:System.Security.Cryptography.HMACSHA384.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.HMACSHA384\n  langs:\n  - csharp\n  - vb\n  name: HMACSHA384()\n  fullName: System.Security.Cryptography.HMACSHA384.HMACSHA384()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 147\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.HMACSHA384\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class by using a randomly generated key.</p>\\n\"\n  syntax:\n    content: public HMACSHA384()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HMACSHA384.HMACSHA384()\n- uid: System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])\n  commentId: M:System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Security.Cryptography.HMACSHA384\n  langs:\n  - csharp\n  - vb\n  name: HMACSHA384(Byte[])\n  fullName: System.Security.Cryptography.HMACSHA384.HMACSHA384(System.Byte[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 148\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.HMACSHA384\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class by using the specified key data.</p>\\n\"\n  syntax:\n    content: public HMACSHA384(byte[] key)\n    content.vb: Public Sub New(key As Byte())\n    parameters:\n    - id: key\n      type: System.Byte[]\n      description: \"\\n<p>The secret key for <xref href=\\\"System.Security.Cryptography.HMACSHA384\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> encryption. The key can be any length. However, the recommended size is 128 bytes. If the key is more than 128 bytes long, it is hashed (using SHA-384) to derive a 128-byte key. If it is less than 128 bytes long, it is padded to 128 bytes. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>key</em> parameter is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.HMACSHA384.HMACSHA384(System.Byte())\n  name.vb: HMACSHA384(Byte())\n  nameWithType: HMACSHA384.HMACSHA384(Byte[])\n  nameWithType.vb: HMACSHA384.HMACSHA384(Byte())\n- uid: System.Security.Cryptography.HMACSHA384.HashSize\n  commentId: P:System.Security.Cryptography.HMACSHA384.HashSize\n  id: HashSize\n  parent: System.Security.Cryptography.HMACSHA384\n  langs:\n  - csharp\n  - vb\n  name: HashSize\n  fullName: System.Security.Cryptography.HMACSHA384.HashSize\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HashSize\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 149\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override int HashSize { get; }\n    content.vb: Public Overrides ReadOnly Property HashSize As Integer\n    parameters: []\n    return:\n      type: System.Int32\n  overridden: System.Security.Cryptography.HashAlgorithm.HashSize\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: HMACSHA384.HashSize\n- uid: System.Security.Cryptography.HMACSHA384.Key\n  commentId: P:System.Security.Cryptography.HMACSHA384.Key\n  id: Key\n  parent: System.Security.Cryptography.HMACSHA384\n  langs:\n  - csharp\n  - vb\n  name: Key\n  fullName: System.Security.Cryptography.HMACSHA384.Key\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Key\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 150\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override byte[] Key { get; set; }\n    content.vb: Public Overrides Property Key As Byte()\n    parameters: []\n    return:\n      type: System.Byte[]\n  overridden: System.Security.Cryptography.HMAC.Key\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: HMACSHA384.Key\n- uid: System.Security.Cryptography.HMACSHA384.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.HMACSHA384.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.HMACSHA384\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Security.Cryptography.HMACSHA384.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 151\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void Dispose(bool disposing)\n    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n  overridden: System.Security.Cryptography.HMAC.Dispose(System.Boolean)\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  nameWithType: HMACSHA384.Dispose(Boolean)\n- uid: System.Security.Cryptography.HMACSHA384.HashCore(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Security.Cryptography.HMACSHA384.HashCore(System.Byte[],System.Int32,System.Int32)\n  id: HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HMACSHA384\n  langs:\n  - csharp\n  - vb\n  name: HashCore(Byte[], Int32, Int32)\n  fullName: System.Security.Cryptography.HMACSHA384.HashCore(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HashCore\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 152\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void HashCore(byte[] rgb, int ib, int cb)\n    content.vb: Protected Overrides Sub HashCore(rgb As Byte(), ib As Integer, cb As Integer)\n    parameters:\n    - id: rgb\n      type: System.Byte[]\n    - id: ib\n      type: System.Int32\n    - id: cb\n      type: System.Int32\n  overridden: System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  fullName.vb: System.Security.Cryptography.HMACSHA384.HashCore(System.Byte(), System.Int32, System.Int32)\n  name.vb: HashCore(Byte(), Int32, Int32)\n  nameWithType: HMACSHA384.HashCore(Byte[], Int32, Int32)\n  nameWithType.vb: HMACSHA384.HashCore(Byte(), Int32, Int32)\n- uid: System.Security.Cryptography.HMACSHA384.HashFinal\n  commentId: M:System.Security.Cryptography.HMACSHA384.HashFinal\n  id: HashFinal\n  parent: System.Security.Cryptography.HMACSHA384\n  langs:\n  - csharp\n  - vb\n  name: HashFinal()\n  fullName: System.Security.Cryptography.HMACSHA384.HashFinal()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HashFinal\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 153\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashFinal()\n    content.vb: Protected Overrides Function HashFinal As Byte()\n    return:\n      type: System.Byte[]\n  overridden: System.Security.Cryptography.HMAC.HashFinal\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  nameWithType: HMACSHA384.HashFinal()\n- uid: System.Security.Cryptography.HMACSHA384.Initialize\n  commentId: M:System.Security.Cryptography.HMACSHA384.Initialize\n  id: Initialize\n  parent: System.Security.Cryptography.HMACSHA384\n  langs:\n  - csharp\n  - vb\n  name: Initialize()\n  fullName: System.Security.Cryptography.HMACSHA384.Initialize()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Initialize\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 154\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override void Initialize()\n    content.vb: Public Overrides Sub Initialize\n  overridden: System.Security.Cryptography.HMAC.Initialize\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: HMACSHA384.Initialize()\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.Cryptography.HashAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithm\n  fullName: System.Security.Cryptography.HashAlgorithm\n  commentId: T:System.Security.Cryptography.HashAlgorithm\n  nameWithType: HashAlgorithm\n- uid: System.Security.Cryptography.KeyedHashAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: KeyedHashAlgorithm\n  fullName: System.Security.Cryptography.KeyedHashAlgorithm\n  commentId: T:System.Security.Cryptography.KeyedHashAlgorithm\n  nameWithType: KeyedHashAlgorithm\n- uid: System.Security.Cryptography.HMAC\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HMAC\n  fullName: System.Security.Cryptography.HMAC\n  commentId: T:System.Security.Cryptography.HMAC\n  nameWithType: HMAC\n- uid: System.Security.Cryptography.ICryptoTransform\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ICryptoTransform\n  fullName: System.Security.Cryptography.ICryptoTransform\n  commentId: T:System.Security.Cryptography.ICryptoTransform\n  nameWithType: ICryptoTransform\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Security.Cryptography.HMAC.Create\n  parent: System.Security.Cryptography.HMAC\n  isExternal: true\n  name: Create()\n  fullName: System.Security.Cryptography.HMAC.Create()\n  spec.csharp:\n  - uid: System.Security.Cryptography.HMAC.Create\n    name: Create\n    fullName: System.Security.Cryptography.HMAC.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HMAC.Create\n    name: Create\n    fullName: System.Security.Cryptography.HMAC.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HMAC.Create\n  nameWithType: HMAC.Create()\n- uid: System.Security.Cryptography.HMAC.Create(System.String)\n  parent: System.Security.Cryptography.HMAC\n  isExternal: true\n  name: Create(String)\n  fullName: System.Security.Cryptography.HMAC.Create(System.String)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HMAC.Create(System.String)\n    name: Create\n    fullName: System.Security.Cryptography.HMAC.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HMAC.Create(System.String)\n    name: Create\n    fullName: System.Security.Cryptography.HMAC.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HMAC.Create(System.String)\n  nameWithType: HMAC.Create(String)\n- uid: System.Security.Cryptography.HMAC.BlockSizeValue\n  parent: System.Security.Cryptography.HMAC\n  isExternal: true\n  name: BlockSizeValue\n  fullName: System.Security.Cryptography.HMAC.BlockSizeValue\n  commentId: P:System.Security.Cryptography.HMAC.BlockSizeValue\n  nameWithType: HMAC.BlockSizeValue\n- uid: System.Security.Cryptography.HMAC.HashName\n  parent: System.Security.Cryptography.HMAC\n  isExternal: true\n  name: HashName\n  fullName: System.Security.Cryptography.HMAC.HashName\n  commentId: P:System.Security.Cryptography.HMAC.HashName\n  nameWithType: HMAC.HashName\n- uid: System.Security.Cryptography.KeyedHashAlgorithm.KeyValue\n  parent: System.Security.Cryptography.KeyedHashAlgorithm\n  isExternal: true\n  name: KeyValue\n  fullName: System.Security.Cryptography.KeyedHashAlgorithm.KeyValue\n  commentId: F:System.Security.Cryptography.KeyedHashAlgorithm.KeyValue\n  nameWithType: KeyedHashAlgorithm.KeyValue\n- uid: System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: HashSizeValue\n  fullName: System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  commentId: F:System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  nameWithType: HashAlgorithm.HashSizeValue\n- uid: System.Security.Cryptography.HashAlgorithm.HashValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: HashValue\n  fullName: System.Security.Cryptography.HashAlgorithm.HashValue\n  commentId: F:System.Security.Cryptography.HashAlgorithm.HashValue\n  nameWithType: HashAlgorithm.HashValue\n- uid: System.Security.Cryptography.HashAlgorithm.State\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: State\n  fullName: System.Security.Cryptography.HashAlgorithm.State\n  commentId: F:System.Security.Cryptography.HashAlgorithm.State\n  nameWithType: HashAlgorithm.State\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: ComputeHash(Stream)\n  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  nameWithType: HashAlgorithm.ComputeHash(Stream)\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: ComputeHash(Byte[])\n  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  fullname.vb: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte())\n  name.vb: ComputeHash(Byte())\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  nameWithType: HashAlgorithm.ComputeHash(Byte[])\n  nameWithType.vb: HashAlgorithm.ComputeHash(Byte())\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: ComputeHash(Byte[], Int32, Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte(), System.Int32, System.Int32)\n  name.vb: ComputeHash(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  nameWithType: HashAlgorithm.ComputeHash(Byte[], Int32, Int32)\n  nameWithType.vb: HashAlgorithm.ComputeHash(Byte(), Int32, Int32)\n- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[], System.Int32, System.Int32, System.Byte[], System.Int32)\n  fullname.vb: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte(), System.Int32, System.Int32, System.Byte(), System.Int32)\n  name.vb: TransformBlock(Byte(), Int32, Int32, Byte(), Int32)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n    name: TransformBlock\n    fullName: System.Security.Cryptography.HashAlgorithm.TransformBlock\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n    name: TransformBlock\n    fullName: System.Security.Cryptography.HashAlgorithm.TransformBlock\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  nameWithType: HashAlgorithm.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  nameWithType.vb: HashAlgorithm.TransformBlock(Byte(), Int32, Int32, Byte(), Int32)\n- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: TransformFinalBlock(Byte[], Int32, Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte(), System.Int32, System.Int32)\n  name.vb: TransformFinalBlock(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n    name: TransformFinalBlock\n    fullName: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n    name: TransformFinalBlock\n    fullName: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  nameWithType: HashAlgorithm.TransformFinalBlock(Byte[], Int32, Int32)\n  nameWithType.vb: HashAlgorithm.TransformFinalBlock(Byte(), Int32, Int32)\n- uid: System.Security.Cryptography.HashAlgorithm.Dispose\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Dispose()\n  fullName: System.Security.Cryptography.HashAlgorithm.Dispose()\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.HashAlgorithm.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.HashAlgorithm.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.Dispose\n  nameWithType: HashAlgorithm.Dispose()\n- uid: System.Security.Cryptography.HashAlgorithm.Clear\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: Clear()\n  fullName: System.Security.Cryptography.HashAlgorithm.Clear()\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.Clear\n    name: Clear\n    fullName: System.Security.Cryptography.HashAlgorithm.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.Clear\n    name: Clear\n    fullName: System.Security.Cryptography.HashAlgorithm.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.Clear\n  nameWithType: HashAlgorithm.Clear()\n- uid: System.Security.Cryptography.HashAlgorithm.Hash\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: Hash\n  fullName: System.Security.Cryptography.HashAlgorithm.Hash\n  commentId: P:System.Security.Cryptography.HashAlgorithm.Hash\n  nameWithType: HashAlgorithm.Hash\n- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: InputBlockSize\n  fullName: System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  commentId: P:System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  nameWithType: HashAlgorithm.InputBlockSize\n- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: OutputBlockSize\n  fullName: System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  commentId: P:System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  nameWithType: HashAlgorithm.OutputBlockSize\n- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: CanTransformMultipleBlocks\n  fullName: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  commentId: P:System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  nameWithType: HashAlgorithm.CanTransformMultipleBlocks\n- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: CanReuseTransform\n  fullName: System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  commentId: P:System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  nameWithType: HashAlgorithm.CanReuseTransform\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Security.Cryptography.HashAlgorithm.HashSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashSize\n  fullName: System.Security.Cryptography.HashAlgorithm.HashSize\n  commentId: P:System.Security.Cryptography.HashAlgorithm.HashSize\n  nameWithType: HashAlgorithm.HashSize\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Security.Cryptography.HMAC.Key\n  parent: System.Security.Cryptography.HMAC\n  isExternal: true\n  name: Key\n  fullName: System.Security.Cryptography.HMAC.Key\n  commentId: P:System.Security.Cryptography.HMAC.Key\n  nameWithType: HMAC.Key\n- uid: System.Security.Cryptography.HMAC.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.HMAC\n  isExternal: true\n  name: Dispose(Boolean)\n  fullName: System.Security.Cryptography.HMAC.Dispose(System.Boolean)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HMAC.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.HMAC.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HMAC.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.HMAC.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HMAC.Dispose(System.Boolean)\n  nameWithType: HMAC.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HMAC\n  isExternal: true\n  name: HashCore(Byte[], Int32, Int32)\n  fullName: System.Security.Cryptography.HMAC.HashCore(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Security.Cryptography.HMAC.HashCore(System.Byte(), System.Int32, System.Int32)\n  name.vb: HashCore(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)\n    name: HashCore\n    fullName: System.Security.Cryptography.HMAC.HashCore\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)\n    name: HashCore\n    fullName: System.Security.Cryptography.HMAC.HashCore\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)\n  nameWithType: HMAC.HashCore(Byte[], Int32, Int32)\n  nameWithType.vb: HMAC.HashCore(Byte(), Int32, Int32)\n- uid: System.Security.Cryptography.HMAC.HashFinal\n  parent: System.Security.Cryptography.HMAC\n  isExternal: true\n  name: HashFinal()\n  fullName: System.Security.Cryptography.HMAC.HashFinal()\n  spec.csharp:\n  - uid: System.Security.Cryptography.HMAC.HashFinal\n    name: HashFinal\n    fullName: System.Security.Cryptography.HMAC.HashFinal\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HMAC.HashFinal\n    name: HashFinal\n    fullName: System.Security.Cryptography.HMAC.HashFinal\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HMAC.HashFinal\n  nameWithType: HMAC.HashFinal()\n- uid: System.Security.Cryptography.HMAC.Initialize\n  parent: System.Security.Cryptography.HMAC\n  isExternal: true\n  name: Initialize()\n  fullName: System.Security.Cryptography.HMAC.Initialize()\n  spec.csharp:\n  - uid: System.Security.Cryptography.HMAC.Initialize\n    name: Initialize\n    fullName: System.Security.Cryptography.HMAC.Initialize\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HMAC.Initialize\n    name: Initialize\n    fullName: System.Security.Cryptography.HMAC.Initialize\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HMAC.Initialize\n  nameWithType: HMAC.Initialize()\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}