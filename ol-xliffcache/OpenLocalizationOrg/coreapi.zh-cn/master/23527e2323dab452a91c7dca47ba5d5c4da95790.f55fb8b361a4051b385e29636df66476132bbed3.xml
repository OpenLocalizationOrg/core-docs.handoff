{"nodes":[{"pos":[2092,2118],"content":"EastAsianLunisolarCalendar","needQuote":true,"nodes":[{"content":"EastAsianLunisolarCalendar","pos":[0,26]}]},{"pos":[5852,5867],"content":"TwoDigitYearMax","needQuote":true,"nodes":[{"content":"TwoDigitYearMax","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The last year of a 100-year range that can be represented by a 2-digit year.&lt;/p&gt;\\n","pos":[6670,6757],"source":"\\n<p>The last year of a 100-year range that can be represented by a 2-digit year.</p>\\n"},{"content":"\\n&lt;p&gt;The value in a set operation is less than 99 or greater than the maximum supported year in the current calendar.&lt;/p&gt;\\n","pos":[7206,7329],"source":"\\n<p>The value in a set operation is less than 99 or greater than the maximum supported year in the current calendar.</p>\\n"},{"pos":[7828,7854],"content":"AddMonths(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddMonths(DateTime, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The number of months to add.","pos":[8900,8933],"source":"\\n<p>The number of months to add."},{"content":"&lt;/p&gt;\\n","pos":[8934,8940],"source":" </p>\\n"},{"pos":[10483,10508],"content":"AddYears(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddYears(DateTime, Int32)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The number of years to add.","pos":[11545,11577],"source":"\\n<p>The number of years to add."},{"content":"&lt;/p&gt;\\n","pos":[11578,11584],"source":" </p>\\n"},{"pos":[13015,13038],"content":"GetCelestialStem(Int32)","needQuote":true,"nodes":[{"content":"GetCelestialStem(Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;An integer from 1 through 60 that represents a year in the sexagenary cycle.","pos":[13877,13958],"source":"\\n<p>An integer from 1 through 60 that represents a year in the sexagenary cycle."},{"content":"&lt;/p&gt;\\n","pos":[13959,13965],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A number from 1 through 10.&lt;/p&gt;\\n","pos":[14024,14062],"source":"\\n<p>A number from 1 through 10.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;sexagenaryYear&lt;/em&gt; is less than 1 or greater than 60.&lt;/p&gt;\\n","pos":[14193,14264],"source":"\\n<p>\\n<em>sexagenaryYear</em> is less than 1 or greater than 60.</p>\\n"},{"pos":[14701,14724],"content":"GetDayOfMonth(DateTime)","needQuote":true,"nodes":[{"content":"GetDayOfMonth(DateTime)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;An integer from 1 through 31 that represents the day of the month specified in the &lt;em&gt;time&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[15676,15794],"source":"\\n<p>An integer from 1 through 31 that represents the day of the month specified in the <em>time</em> parameter.</p>\\n"},{"pos":[16330,16352],"content":"GetDayOfWeek(DateTime)","needQuote":true,"nodes":[{"content":"GetDayOfWeek(DateTime)","pos":[0,22]}]},{"pos":[18437,18459],"content":"GetDayOfYear(DateTime)","needQuote":true,"nodes":[{"content":"GetDayOfYear(DateTime)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;An integer from 1 through 354 in a common year, or 1 through 384 in a leap year, that represents the day of the year specified in the &lt;em&gt;time&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[19406,19575],"source":"\\n<p>An integer from 1 through 354 in a common year, or 1 through 384 in a leap year, that represents the day of the year specified in the <em>time</em> parameter.</p>\\n"},{"pos":[20184,20219],"content":"GetDaysInMonth(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"GetDaysInMonth(Int32, Int32, Int32)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[21119,21160],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[21161,21167],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 1 through 12 in a common year, or 1 through 13 in a leap year, that represents the month.","pos":[21230,21340],"source":"\\n<p>An integer from 1 through 12 in a common year, or 1 through 13 in a leap year, that represents the month."},{"content":"&lt;/p&gt;\\n","pos":[21341,21347],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[21408,21448],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[21449,21455],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of days in the specified month of the specified year and era.&lt;/p&gt;\\n","pos":[21514,21597],"source":"\\n<p>The number of days in the specified month of the specified year and era.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt;, &lt;em&gt;month&lt;/em&gt;, or &lt;em&gt;era&lt;/em&gt; is outside the range supported by this calendar.","pos":[21827,21929],"source":"\\n<p>\\n<em>year</em>, <em>month</em>, or <em>era</em> is outside the range supported by this calendar."},{"content":"&lt;/p&gt;\\n","pos":[21930,21936],"source":" </p>\\n"},{"pos":[22442,22469],"content":"GetDaysInYear(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetDaysInYear(Int32, Int32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[23299,23340],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[23341,23347],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[23408,23448],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[23449,23455],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of days in the specified year and era.&lt;/p&gt;\\n","pos":[23514,23574],"source":"\\n<p>The number of days in the specified year and era.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; or &lt;em&gt;era&lt;/em&gt; is outside the range supported by this calendar.","pos":[23790,23875],"source":"\\n<p>\\n<em>year</em> or <em>era</em> is outside the range supported by this calendar."},{"content":"&lt;/p&gt;\\n","pos":[23876,23882],"source":" </p>\\n"},{"pos":[24377,24403],"content":"GetLeapMonth(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetLeapMonth(Int32, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.&lt;/p&gt;\\n","pos":[25226,25273],"source":"\\n<p>An integer that represents the year.</p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.&lt;/p&gt;\\n","pos":[25334,25380],"source":"\\n<p>An integer that represents the era.</p>\\n"},{"content":"\\n&lt;p&gt;A positive integer from 1 through 13 that indicates the leap month in the specified year and era.&lt;/p&gt;\\n&lt;p&gt; -or-&lt;/p&gt;\\n&lt;p&gt;Zero if this calendar does not support a leap month, or if the &lt;em&gt;year&lt;/em&gt; and &lt;em&gt;era&lt;/em&gt; parameters do not specify a leap year.&lt;/p&gt;\\n","pos":[25439,25702],"source":"\\n<p>A positive integer from 1 through 13 that indicates the leap month in the specified year and era.</p>\\n<p> -or-</p>\\n<p>Zero if this calendar does not support a leap month, or if the <em>year</em> and <em>era</em> parameters do not specify a leap year.</p>\\n"},{"pos":[26238,26256],"content":"GetMonth(DateTime)","needQuote":true,"nodes":[{"content":"GetMonth(DateTime)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;An integer from 1 to 13 that represents the month specified in the &lt;em&gt;time&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[27174,27276],"source":"\\n<p>An integer from 1 to 13 that represents the month specified in the <em>time</em> parameter.</p>\\n"},{"pos":[27841,27870],"content":"GetMonthsInYear(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetMonthsInYear(Int32, Int32)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[28710,28751],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[28752,28758],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[28819,28859],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[28860,28866],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of months in the specified year in the specified era.","pos":[28925,28994],"source":"\\n<p>The number of months in the specified year in the specified era."},{"content":"The return value is 12 months in a common year or 13 months in a leap year.&lt;/p&gt;\\n","pos":[28995,29076],"source":" The return value is 12 months in a common year or 13 months in a leap year.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; or &lt;em&gt;era&lt;/em&gt; is outside the range supported by this calendar.","pos":[29294,29379],"source":"\\n<p>\\n<em>year</em> or <em>era</em> is outside the range supported by this calendar."},{"content":"&lt;/p&gt;\\n","pos":[29380,29386],"source":" </p>\\n"},{"pos":[29868,29895],"content":"GetSexagenaryYear(DateTime)","needQuote":true,"nodes":[{"content":"GetSexagenaryYear(DateTime)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;A number from 1 through 60 in the sexagenary cycle that corresponds to the &lt;em&gt;date&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[30899,31009],"source":"\\n<p>A number from 1 through 60 in the sexagenary cycle that corresponds to the <em>date</em> parameter.</p>\\n"},{"pos":[31490,31517],"content":"GetTerrestrialBranch(Int32)","needQuote":true,"nodes":[{"content":"GetTerrestrialBranch(Int32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;An integer from 1 through 60 that represents a year in the sexagenary cycle.&lt;/p&gt;\\n","pos":[32376,32463],"source":"\\n<p>An integer from 1 through 60 that represents a year in the sexagenary cycle.</p>\\n"},{"content":"\\n&lt;p&gt;An integer from 1 through 12.&lt;/p&gt;\\n","pos":[32522,32562],"source":"\\n<p>An integer from 1 through 12.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;sexagenaryYear&lt;/em&gt; is less than 1 or greater than 60.&lt;/p&gt;\\n","pos":[32693,32764],"source":"\\n<p>\\n<em>sexagenaryYear</em> is less than 1 or greater than 60.</p>\\n"},{"pos":[33187,33204],"content":"GetYear(DateTime)","needQuote":true,"nodes":[{"content":"GetYear(DateTime)","pos":[0,17]}]},{"pos":[34880,34917],"content":"IsLeapDay(Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapDay(Int32, Int32, Int32, Int32)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[35827,35868],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[35869,35875],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 1 through 13 that represents the month.","pos":[35938,35998],"source":"\\n<p>An integer from 1 through 13 that represents the month."},{"content":"&lt;/p&gt;\\n","pos":[35999,36005],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 1 through 31 that represents the day.","pos":[36066,36124],"source":"\\n<p>An integer from 1 through 31 that represents the day."},{"content":"&lt;/p&gt;\\n","pos":[36125,36131],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[36192,36232],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[36233,36239],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the specified day is a leap day; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[36300,36405],"source":"\\n<p>\\n<strong>true</strong> if the specified day is a leap day; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt;, &lt;em&gt;month&lt;/em&gt;, &lt;em&gt;day&lt;/em&gt;, or &lt;em&gt;era&lt;/em&gt; is outside the range supported by this calendar.","pos":[36643,36759],"source":"\\n<p>\\n<em>year</em>, <em>month</em>, <em>day</em>, or <em>era</em> is outside the range supported by this calendar."},{"content":"&lt;/p&gt;\\n","pos":[36760,36766],"source":" </p>\\n"},{"pos":[37307,37339],"content":"IsLeapMonth(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapMonth(Int32, Int32, Int32)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[38230,38271],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[38272,38278],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 1 through 13 that represents the month.","pos":[38341,38401],"source":"\\n<p>An integer from 1 through 13 that represents the month."},{"content":"&lt;/p&gt;\\n","pos":[38402,38408],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[38469,38509],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[38510,38516],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;month&lt;/em&gt; parameter is a leap month; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[38577,38695],"source":"\\n<p>\\n<strong>true</strong> if the <em>month</em> parameter is a leap month; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt;, &lt;em&gt;month&lt;/em&gt;, or &lt;em&gt;era&lt;/em&gt; is outside the range supported by this calendar.","pos":[38922,39024],"source":"\\n<p>\\n<em>year</em>, <em>month</em>, or <em>era</em> is outside the range supported by this calendar."},{"content":"&lt;/p&gt;\\n","pos":[39025,39031],"source":" </p>\\n"},{"pos":[39525,39549],"content":"IsLeapYear(Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapYear(Int32, Int32)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[40382,40423],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[40424,40430],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[40491,40531],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[40532,40538],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the specified year is a leap year; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[40599,40706],"source":"\\n<p>\\n<strong>true</strong> if the specified year is a leap year; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; or &lt;em&gt;era&lt;/em&gt; is outside the range supported by this calendar.","pos":[40919,41004],"source":"\\n<p>\\n<em>year</em> or <em>era</em> is outside the range supported by this calendar."},{"content":"&lt;/p&gt;\\n","pos":[41005,41011],"source":" </p>\\n"},{"pos":[41731,41797],"content":"ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)","pos":[0,66]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[42960,43001],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[43002,43008],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 1 through 13 that represents the month.","pos":[43071,43131],"source":"\\n<p>An integer from 1 through 13 that represents the month."},{"content":"&lt;/p&gt;\\n","pos":[43132,43138],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 1 through 31 that represents the day.","pos":[43199,43257],"source":"\\n<p>An integer from 1 through 31 that represents the day."},{"content":"&lt;/p&gt;\\n","pos":[43258,43264],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 0 through 23 that represents the hour.","pos":[43326,43385],"source":"\\n<p>An integer from 0 through 23 that represents the hour."},{"content":"&lt;/p&gt;\\n","pos":[43386,43392],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 0 through 59 that represents the minute.","pos":[43456,43517],"source":"\\n<p>An integer from 0 through 59 that represents the minute."},{"content":"&lt;/p&gt;\\n","pos":[43518,43524],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 0 through 59 that represents the second.","pos":[43588,43649],"source":"\\n<p>An integer from 0 through 59 that represents the second."},{"content":"&lt;/p&gt;\\n","pos":[43650,43656],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 0 through 999 that represents the millisecond.","pos":[43725,43792],"source":"\\n<p>An integer from 0 through 999 that represents the millisecond."},{"content":"&lt;/p&gt;\\n","pos":[43793,43799],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[43860,43900],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[43901,43907],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt;, &lt;em&gt;month&lt;/em&gt;, &lt;em&gt;day&lt;/em&gt;, &lt;em&gt;hour&lt;/em&gt;, &lt;em&gt;minute&lt;/em&gt;, &lt;em&gt;second&lt;/em&gt;, &lt;em&gt;millisecond&lt;/em&gt;, or &lt;em&gt;era&lt;/em&gt; is outside the range supported by this calendar.","pos":[44398,44585],"source":"\\n<p>\\n<em>year</em>, <em>month</em>, <em>day</em>, <em>hour</em>, <em>minute</em>, <em>second</em>, <em>millisecond</em>, or <em>era</em> is outside the range supported by this calendar."},{"content":"&lt;/p&gt;\\n","pos":[44586,44592],"source":" </p>\\n"},{"pos":[45096,45118],"content":"ToFourDigitYear(Int32)","needQuote":true,"nodes":[{"content":"ToFourDigitYear(Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;A two-digit or four-digit integer that represents the year to convert.","pos":[45906,45981],"source":"\\n<p>A two-digit or four-digit integer that represents the year to convert."},{"content":"&lt;/p&gt;\\n","pos":[45982,45988],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that contains the four-digit representation of the &lt;em&gt;year&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[46047,46144],"source":"\\n<p>An integer that contains the four-digit representation of the <em>year</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by this calendar.","pos":[46349,46418],"source":"\\n<p>\\n<em>year</em> is outside the range supported by this calendar."},{"content":"&lt;/p&gt;\\n","pos":[46419,46425],"source":" </p>\\n"},{"pos":[46646,46666],"content":"System.Globalization","needQuote":true,"nodes":[{"content":"System.Globalization","pos":[0,20]}]},{"pos":[46839,46845],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[47020,47028],"content":"Calendar","needQuote":true,"nodes":[{"content":"Calendar","pos":[0,8]}]},{"pos":[47210,47220],"content":"ICloneable","needQuote":true,"nodes":[{"content":"ICloneable","pos":[0,10]}]},{"pos":[47426,47436],"content":"CurrentEra","needQuote":true,"nodes":[{"content":"CurrentEra","pos":[0,10]}]},{"pos":[47692,47699],"content":"Clone()","needQuote":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[47820,47825],"content":"Clone","needQuote":true,"nodes":[{"content":"Clone","pos":[0,5]}]},{"pos":[47907,47908],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47935,47936],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48019,48024],"content":"Clone","needQuote":true,"nodes":[{"content":"Clone","pos":[0,5]}]},{"pos":[48106,48107],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48134,48135],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48380,48398],"content":"ReadOnly(Calendar)","needQuote":true,"nodes":[{"content":"ReadOnly(Calendar)","pos":[0,18]}]},{"pos":[48585,48593],"content":"ReadOnly","needQuote":true,"nodes":[{"content":"ReadOnly","pos":[0,8]}]},{"pos":[48678,48679],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48745,48753],"content":"Calendar","needQuote":true,"nodes":[{"content":"Calendar","pos":[0,8]}]},{"pos":[48829,48830],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48947,48955],"content":"ReadOnly","needQuote":true,"nodes":[{"content":"ReadOnly","pos":[0,8]}]},{"pos":[49040,49041],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49107,49115],"content":"Calendar","needQuote":true,"nodes":[{"content":"Calendar","pos":[0,8]}]},{"pos":[49191,49192],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49489,49522],"content":"AddMilliseconds(DateTime, Double)","needQuote":true,"nodes":[{"content":"AddMilliseconds(DateTime, Double)","pos":[0,33]}]},{"pos":[49724,49739],"content":"AddMilliseconds","needQuote":true,"nodes":[{"content":"AddMilliseconds","pos":[0,15]}]},{"pos":[49831,49832],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49884,49892],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[49955,49956]},{"pos":[50011,50017],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[50077,50078],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50202,50217],"content":"AddMilliseconds","needQuote":true,"nodes":[{"content":"AddMilliseconds","pos":[0,15]}]},{"pos":[50309,50310],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50362,50370],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[50433,50434]},{"pos":[50489,50495],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[50555,50556],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50866,50890],"content":"AddDays(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddDays(DateTime, Int32)","pos":[0,24]}]},{"pos":[51074,51081],"content":"AddDays","needQuote":true,"nodes":[{"content":"AddDays","pos":[0,7]}]},{"pos":[51165,51166],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51218,51226],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[51289,51290]},{"pos":[51344,51349],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[51408,51409],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51524,51531],"content":"AddDays","needQuote":true,"nodes":[{"content":"AddDays","pos":[0,7]}]},{"pos":[51615,51616],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51668,51676],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[51739,51740]},{"pos":[51794,51799],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[51858,51859],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52152,52177],"content":"AddHours(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddHours(DateTime, Int32)","pos":[0,25]}]},{"pos":[52363,52371],"content":"AddHours","needQuote":true,"nodes":[{"content":"AddHours","pos":[0,8]}]},{"pos":[52456,52457],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52509,52517],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[52580,52581]},{"pos":[52635,52640],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[52699,52700],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52816,52824],"content":"AddHours","needQuote":true,"nodes":[{"content":"AddHours","pos":[0,8]}]},{"pos":[52909,52910],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52962,52970],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[53033,53034]},{"pos":[53088,53093],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[53152,53153],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53450,53477],"content":"AddMinutes(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddMinutes(DateTime, Int32)","pos":[0,27]}]},{"pos":[53667,53677],"content":"AddMinutes","needQuote":true,"nodes":[{"content":"AddMinutes","pos":[0,10]}]},{"pos":[53764,53765],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53817,53825],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[53888,53889]},{"pos":[53943,53948],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[54007,54008],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54126,54136],"content":"AddMinutes","needQuote":true,"nodes":[{"content":"AddMinutes","pos":[0,10]}]},{"pos":[54223,54224],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54276,54284],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[54347,54348]},{"pos":[54402,54407],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[54466,54467],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54768,54795],"content":"AddSeconds(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddSeconds(DateTime, Int32)","pos":[0,27]}]},{"pos":[54985,54995],"content":"AddSeconds","needQuote":true,"nodes":[{"content":"AddSeconds","pos":[0,10]}]},{"pos":[55082,55083],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55135,55143],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[55206,55207]},{"pos":[55261,55266],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[55325,55326],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55444,55454],"content":"AddSeconds","needQuote":true,"nodes":[{"content":"AddSeconds","pos":[0,10]}]},{"pos":[55541,55542],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55594,55602],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[55665,55666]},{"pos":[55720,55725],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[55784,55785],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56084,56109],"content":"AddWeeks(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddWeeks(DateTime, Int32)","pos":[0,25]}]},{"pos":[56295,56303],"content":"AddWeeks","needQuote":true,"nodes":[{"content":"AddWeeks","pos":[0,8]}]},{"pos":[56388,56389],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56441,56449],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[56512,56513]},{"pos":[56567,56572],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[56631,56632],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56748,56756],"content":"AddWeeks","needQuote":true,"nodes":[{"content":"AddWeeks","pos":[0,8]}]},{"pos":[56841,56842],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56894,56902],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[56965,56966]},{"pos":[57020,57025],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[57084,57085],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57383,57411],"content":"GetDaysInMonth(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetDaysInMonth(Int32, Int32)","pos":[0,28]}]},{"pos":[57603,57617],"content":"GetDaysInMonth","needQuote":true,"nodes":[{"content":"GetDaysInMonth","pos":[0,14]}]},{"pos":[57708,57709],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57758,57763],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[57823,57824]},{"pos":[57878,57883],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[57942,57943],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58062,58076],"content":"GetDaysInMonth","needQuote":true,"nodes":[{"content":"GetDaysInMonth","pos":[0,14]}]},{"pos":[58167,58168],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58217,58222],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[58282,58283]},{"pos":[58337,58342],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[58401,58402],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58692,58712],"content":"GetDaysInYear(Int32)","needQuote":true,"nodes":[{"content":"GetDaysInYear(Int32)","pos":[0,20]}]},{"pos":[58875,58888],"content":"GetDaysInYear","needQuote":true,"nodes":[{"content":"GetDaysInYear","pos":[0,13]}]},{"pos":[58978,58979],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59028,59033],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[59092,59093],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59198,59211],"content":"GetDaysInYear","needQuote":true,"nodes":[{"content":"GetDaysInYear","pos":[0,13]}]},{"pos":[59301,59302],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59351,59356],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[59415,59416],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59680,59696],"content":"GetEra(DateTime)","needQuote":true,"nodes":[{"content":"GetEra(DateTime)","pos":[0,16]}]},{"pos":[59851,59857],"content":"GetEra","needQuote":true,"nodes":[{"content":"GetEra","pos":[0,6]}]},{"pos":[59940,59941],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59993,60001],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[60063,60064],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60165,60171],"content":"GetEra","needQuote":true,"nodes":[{"content":"GetEra","pos":[0,6]}]},{"pos":[60254,60255],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60307,60315],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[60377,60378],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60635,60652],"content":"GetHour(DateTime)","needQuote":true,"nodes":[{"content":"GetHour(DateTime)","pos":[0,17]}]},{"pos":[60809,60816],"content":"GetHour","needQuote":true,"nodes":[{"content":"GetHour","pos":[0,7]}]},{"pos":[60900,60901],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60953,60961],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[61023,61024],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61126,61133],"content":"GetHour","needQuote":true,"nodes":[{"content":"GetHour","pos":[0,7]}]},{"pos":[61217,61218],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61270,61278],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[61340,61341],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61608,61633],"content":"GetMilliseconds(DateTime)","needQuote":true,"nodes":[{"content":"GetMilliseconds(DateTime)","pos":[0,25]}]},{"pos":[61806,61821],"content":"GetMilliseconds","needQuote":true,"nodes":[{"content":"GetMilliseconds","pos":[0,15]}]},{"pos":[61913,61914],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61966,61974],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[62036,62037],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62147,62162],"content":"GetMilliseconds","needQuote":true,"nodes":[{"content":"GetMilliseconds","pos":[0,15]}]},{"pos":[62254,62255],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62307,62315],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[62377,62378],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62655,62674],"content":"GetMinute(DateTime)","needQuote":true,"nodes":[{"content":"GetMinute(DateTime)","pos":[0,19]}]},{"pos":[62835,62844],"content":"GetMinute","needQuote":true,"nodes":[{"content":"GetMinute","pos":[0,9]}]},{"pos":[62930,62931],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62983,62991],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[63053,63054],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63158,63167],"content":"GetMinute","needQuote":true,"nodes":[{"content":"GetMinute","pos":[0,9]}]},{"pos":[63253,63254],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63306,63314],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[63376,63377],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63645,63667],"content":"GetMonthsInYear(Int32)","needQuote":true,"nodes":[{"content":"GetMonthsInYear(Int32)","pos":[0,22]}]},{"pos":[63834,63849],"content":"GetMonthsInYear","needQuote":true,"nodes":[{"content":"GetMonthsInYear","pos":[0,15]}]},{"pos":[63941,63942],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63991,63996],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[64055,64056],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64163,64178],"content":"GetMonthsInYear","needQuote":true,"nodes":[{"content":"GetMonthsInYear","pos":[0,15]}]},{"pos":[64270,64271],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64320,64325],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[64384,64385],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64656,64675],"content":"GetSecond(DateTime)","needQuote":true,"nodes":[{"content":"GetSecond(DateTime)","pos":[0,19]}]},{"pos":[64836,64845],"content":"GetSecond","needQuote":true,"nodes":[{"content":"GetSecond","pos":[0,9]}]},{"pos":[64931,64932],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64984,64992],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[65054,65055],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65159,65168],"content":"GetSecond","needQuote":true,"nodes":[{"content":"GetSecond","pos":[0,9]}]},{"pos":[65254,65255],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65307,65315],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[65377,65378],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65702,65754],"content":"GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)","needQuote":true,"nodes":[{"content":"GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)","pos":[0,52]}]},{"pos":[66035,66048],"content":"GetWeekOfYear","needQuote":true,"nodes":[{"content":"GetWeekOfYear","pos":[0,13]}]},{"pos":[66138,66139],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66191,66199],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[66262,66263]},{"pos":[66342,66358],"content":"CalendarWeekRule","needQuote":true,"nodes":[{"content":"CalendarWeekRule","pos":[0,16]}]},{"content":",","pos":[66443,66444]},{"pos":[66502,66511],"content":"DayOfWeek","needQuote":true,"nodes":[{"content":"DayOfWeek","pos":[0,9]}]},{"pos":[66574,66575],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66738,66751],"content":"GetWeekOfYear","needQuote":true,"nodes":[{"content":"GetWeekOfYear","pos":[0,13]}]},{"pos":[66841,66842],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66894,66902],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[66965,66966]},{"pos":[67045,67061],"content":"CalendarWeekRule","needQuote":true,"nodes":[{"content":"CalendarWeekRule","pos":[0,16]}]},{"content":",","pos":[67146,67147]},{"pos":[67205,67214],"content":"DayOfWeek","needQuote":true,"nodes":[{"content":"DayOfWeek","pos":[0,9]}]},{"pos":[67277,67278],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67658,67688],"content":"IsLeapDay(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapDay(Int32, Int32, Int32)","pos":[0,30]}]},{"pos":[67897,67906],"content":"IsLeapDay","needQuote":true,"nodes":[{"content":"IsLeapDay","pos":[0,9]}]},{"pos":[67992,67993],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68042,68047],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[68107,68108]},{"pos":[68162,68167],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[68227,68228]},{"pos":[68282,68287],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[68346,68347],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68474,68483],"content":"IsLeapDay","needQuote":true,"nodes":[{"content":"IsLeapDay","pos":[0,9]}]},{"pos":[68569,68570],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68619,68624],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[68684,68685]},{"pos":[68739,68744],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[68804,68805]},{"pos":[68859,68864],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[68923,68924],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69235,69260],"content":"IsLeapMonth(Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapMonth(Int32, Int32)","pos":[0,25]}]},{"pos":[69446,69457],"content":"IsLeapMonth","needQuote":true,"nodes":[{"content":"IsLeapMonth","pos":[0,11]}]},{"pos":[69545,69546],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69595,69600],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[69660,69661]},{"pos":[69715,69720],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[69779,69780],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69896,69907],"content":"IsLeapMonth","needQuote":true,"nodes":[{"content":"IsLeapMonth","pos":[0,11]}]},{"pos":[69995,69996],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70045,70050],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[70110,70111]},{"pos":[70165,70170],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[70229,70230],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70513,70532],"content":"GetLeapMonth(Int32)","needQuote":true,"nodes":[{"content":"GetLeapMonth(Int32)","pos":[0,19]}]},{"pos":[70693,70705],"content":"GetLeapMonth","needQuote":true,"nodes":[{"content":"GetLeapMonth","pos":[0,12]}]},{"pos":[70794,70795],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70844,70849],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[70908,70909],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71013,71025],"content":"GetLeapMonth","needQuote":true,"nodes":[{"content":"GetLeapMonth","pos":[0,12]}]},{"pos":[71114,71115],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71164,71169],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[71228,71229],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71492,71509],"content":"IsLeapYear(Int32)","needQuote":true,"nodes":[{"content":"IsLeapYear(Int32)","pos":[0,17]}]},{"pos":[71666,71676],"content":"IsLeapYear","needQuote":true,"nodes":[{"content":"IsLeapYear","pos":[0,10]}]},{"pos":[71763,71764],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71813,71818],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[71877,71878],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71980,71990],"content":"IsLeapYear","needQuote":true,"nodes":[{"content":"IsLeapYear","pos":[0,10]}]},{"pos":[72077,72078],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72127,72132],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[72191,72192],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72529,72588],"content":"ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)","pos":[0,59]}]},{"pos":[72907,72917],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[73004,73005],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73054,73059],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[73119,73120]},{"pos":[73174,73179],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[73239,73240]},{"pos":[73294,73299],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[73359,73360]},{"pos":[73414,73419],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[73479,73480]},{"pos":[73534,73539],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[73599,73600]},{"pos":[73654,73659],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[73719,73720]},{"pos":[73774,73779],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[73838,73839],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74019,74029],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[74116,74117],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74166,74171],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[74231,74232]},{"pos":[74286,74291],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[74351,74352]},{"pos":[74406,74411],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[74471,74472]},{"pos":[74526,74531],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[74591,74592]},{"pos":[74646,74651],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[74711,74712]},{"pos":[74766,74771],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[74831,74832]},{"pos":[74886,74891],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[74950,74951],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75326,75346],"content":"MinSupportedDateTime","needQuote":true,"nodes":[{"content":"MinSupportedDateTime","pos":[0,20]}]},{"pos":[75647,75667],"content":"MaxSupportedDateTime","needQuote":true,"nodes":[{"content":"MaxSupportedDateTime","pos":[0,20]}]},{"pos":[75961,75974],"content":"AlgorithmType","needQuote":true,"nodes":[{"content":"AlgorithmType","pos":[0,13]}]},{"pos":[76244,76254],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[76509,76513],"content":"Eras","needQuote":true,"nodes":[{"content":"Eras","pos":[0,4]}]},{"pos":[76778,76810],"content":"DaysInYearBeforeMinSupportedYear","needQuote":true,"nodes":[{"content":"DaysInYearBeforeMinSupportedYear","pos":[0,32]}]},{"pos":[77103,77113],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[77208,77216],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[77285,77286],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77313,77314],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77384,77392],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[77461,77462],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77489,77490],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77673,77687],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[77806,77812],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[77879,77880],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77930,77936],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[77996,77997],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78080,78086],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[78153,78154],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78204,78210],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[78270,78271],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78485,78507],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[78655,78661],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[78728,78729],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78779,78785],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[78846,78847]},{"pos":[78902,78908],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[78968,78969],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79066,79072],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[79139,79140],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79190,79196],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[79257,79258]},{"pos":[79313,79319],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[79379,79380],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79625,79656],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[79822,79837],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[79913,79914],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79964,79970],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[80031,80032]},{"pos":[80087,80093],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[80153,80154],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80260,80275],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[80351,80352],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80402,80408],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[80469,80470]},{"pos":[80525,80531],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[80591,80592],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80822,80835],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[80936,80947],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[81019,81020],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81047,81048],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81121,81132],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[81204,81205],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81232,81233],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81408,81417],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[81510,81517],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[81585,81586],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81613,81614],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81683,81690],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[81758,81759],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81786,81787],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81962,81979],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[82088,82103],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[82179,82180],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82207,82208],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82285,82300],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[82376,82377],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82404,82405],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82550,82556],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[82741,82756],"content":"TwoDigitYearMax","needQuote":true,"nodes":[{"content":"TwoDigitYearMax","pos":[0,15]}]},{"pos":[82982,82987],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[83207,83233],"content":"AddMonths(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddMonths(DateTime, Int32)","pos":[0,26]}]},{"pos":[83421,83430],"content":"AddMonths","needQuote":true,"nodes":[{"content":"AddMonths","pos":[0,9]}]},{"pos":[83516,83517],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83569,83577],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[83640,83641]},{"pos":[83695,83700],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[83759,83760],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83877,83886],"content":"AddMonths","needQuote":true,"nodes":[{"content":"AddMonths","pos":[0,9]}]},{"pos":[83972,83973],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84025,84033],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[84096,84097]},{"pos":[84151,84156],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[84215,84216],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84438,84446],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[84674,84699],"content":"AddYears(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddYears(DateTime, Int32)","pos":[0,25]}]},{"pos":[84885,84893],"content":"AddYears","needQuote":true,"nodes":[{"content":"AddYears","pos":[0,8]}]},{"pos":[84978,84979],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85031,85039],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[85102,85103]},{"pos":[85157,85162],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[85221,85222],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85338,85346],"content":"AddYears","needQuote":true,"nodes":[{"content":"AddYears","pos":[0,8]}]},{"pos":[85431,85432],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85484,85492],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[85555,85556]},{"pos":[85610,85615],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[85674,85675],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85962,85985],"content":"GetDayOfMonth(DateTime)","needQuote":true,"nodes":[{"content":"GetDayOfMonth(DateTime)","pos":[0,23]}]},{"pos":[86154,86167],"content":"GetDayOfMonth","needQuote":true,"nodes":[{"content":"GetDayOfMonth","pos":[0,13]}]},{"pos":[86257,86258],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86310,86318],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[86380,86381],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86489,86502],"content":"GetDayOfMonth","needQuote":true,"nodes":[{"content":"GetDayOfMonth","pos":[0,13]}]},{"pos":[86592,86593],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86645,86653],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[86715,86716],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86992,87014],"content":"GetDayOfWeek(DateTime)","needQuote":true,"nodes":[{"content":"GetDayOfWeek(DateTime)","pos":[0,22]}]},{"pos":[87181,87193],"content":"GetDayOfWeek","needQuote":true,"nodes":[{"content":"GetDayOfWeek","pos":[0,12]}]},{"pos":[87282,87283],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87335,87343],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[87405,87406],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87513,87525],"content":"GetDayOfWeek","needQuote":true,"nodes":[{"content":"GetDayOfWeek","pos":[0,12]}]},{"pos":[87614,87615],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87667,87675],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[87737,87738],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87947,87956],"content":"DayOfWeek","needQuote":true,"nodes":[{"content":"DayOfWeek","pos":[0,9]}]},{"pos":[88178,88200],"content":"GetDayOfYear(DateTime)","needQuote":true,"nodes":[{"content":"GetDayOfYear(DateTime)","pos":[0,22]}]},{"pos":[88367,88379],"content":"GetDayOfYear","needQuote":true,"nodes":[{"content":"GetDayOfYear","pos":[0,12]}]},{"pos":[88468,88469],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88521,88529],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[88591,88592],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88699,88711],"content":"GetDayOfYear","needQuote":true,"nodes":[{"content":"GetDayOfYear","pos":[0,12]}]},{"pos":[88800,88801],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88853,88861],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[88923,88924],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89223,89258],"content":"GetDaysInMonth(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"GetDaysInMonth(Int32, Int32, Int32)","pos":[0,35]}]},{"pos":[89477,89491],"content":"GetDaysInMonth","needQuote":true,"nodes":[{"content":"GetDaysInMonth","pos":[0,14]}]},{"pos":[89582,89583],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89632,89637],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[89697,89698]},{"pos":[89752,89757],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[89817,89818]},{"pos":[89872,89877],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[89936,89937],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90069,90083],"content":"GetDaysInMonth","needQuote":true,"nodes":[{"content":"GetDaysInMonth","pos":[0,14]}]},{"pos":[90174,90175],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90224,90229],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[90289,90290]},{"pos":[90344,90349],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[90409,90410]},{"pos":[90464,90469],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[90528,90529],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90852,90879],"content":"GetDaysInYear(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetDaysInYear(Int32, Int32)","pos":[0,27]}]},{"pos":[91069,91082],"content":"GetDaysInYear","needQuote":true,"nodes":[{"content":"GetDaysInYear","pos":[0,13]}]},{"pos":[91172,91173],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91222,91227],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[91287,91288]},{"pos":[91342,91347],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[91406,91407],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91525,91538],"content":"GetDaysInYear","needQuote":true,"nodes":[{"content":"GetDaysInYear","pos":[0,13]}]},{"pos":[91628,91629],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91678,91683],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[91743,91744]},{"pos":[91798,91803],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[91862,91863],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92163,92189],"content":"GetLeapMonth(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetLeapMonth(Int32, Int32)","pos":[0,26]}]},{"pos":[92377,92389],"content":"GetLeapMonth","needQuote":true,"nodes":[{"content":"GetLeapMonth","pos":[0,12]}]},{"pos":[92478,92479],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92528,92533],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[92593,92594]},{"pos":[92648,92653],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[92712,92713],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92830,92842],"content":"GetLeapMonth","needQuote":true,"nodes":[{"content":"GetLeapMonth","pos":[0,12]}]},{"pos":[92931,92932],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92981,92986],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[93046,93047]},{"pos":[93101,93106],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[93165,93166],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93450,93468],"content":"GetMonth(DateTime)","needQuote":true,"nodes":[{"content":"GetMonth(DateTime)","pos":[0,18]}]},{"pos":[93627,93635],"content":"GetMonth","needQuote":true,"nodes":[{"content":"GetMonth","pos":[0,8]}]},{"pos":[93720,93721],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93773,93781],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[93843,93844],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93947,93955],"content":"GetMonth","needQuote":true,"nodes":[{"content":"GetMonth","pos":[0,8]}]},{"pos":[94040,94041],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94093,94101],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[94163,94164],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94443,94472],"content":"GetMonthsInYear(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetMonthsInYear(Int32, Int32)","pos":[0,29]}]},{"pos":[94666,94681],"content":"GetMonthsInYear","needQuote":true,"nodes":[{"content":"GetMonthsInYear","pos":[0,15]}]},{"pos":[94773,94774],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94823,94828],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[94888,94889]},{"pos":[94943,94948],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[95007,95008],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95128,95143],"content":"GetMonthsInYear","needQuote":true,"nodes":[{"content":"GetMonthsInYear","pos":[0,15]}]},{"pos":[95235,95236],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95285,95290],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[95350,95351]},{"pos":[95405,95410],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[95469,95470],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95759,95776],"content":"GetYear(DateTime)","needQuote":true,"nodes":[{"content":"GetYear(DateTime)","pos":[0,17]}]},{"pos":[95933,95940],"content":"GetYear","needQuote":true,"nodes":[{"content":"GetYear","pos":[0,7]}]},{"pos":[96024,96025],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96077,96085],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[96147,96148],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96250,96257],"content":"GetYear","needQuote":true,"nodes":[{"content":"GetYear","pos":[0,7]}]},{"pos":[96341,96342],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96394,96402],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[96464,96465],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96762,96799],"content":"IsLeapDay(Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapDay(Int32, Int32, Int32, Int32)","pos":[0,37]}]},{"pos":[97035,97044],"content":"IsLeapDay","needQuote":true,"nodes":[{"content":"IsLeapDay","pos":[0,9]}]},{"pos":[97130,97131],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97180,97185],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[97245,97246]},{"pos":[97300,97305],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[97365,97366]},{"pos":[97420,97425],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[97485,97486]},{"pos":[97540,97545],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[97604,97605],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97745,97754],"content":"IsLeapDay","needQuote":true,"nodes":[{"content":"IsLeapDay","pos":[0,9]}]},{"pos":[97840,97841],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97890,97895],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[97955,97956]},{"pos":[98010,98015],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[98075,98076]},{"pos":[98130,98135],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[98195,98196]},{"pos":[98250,98255],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[98314,98315],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98570,98577],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[98815,98847],"content":"IsLeapMonth(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapMonth(Int32, Int32, Int32)","pos":[0,32]}]},{"pos":[99060,99071],"content":"IsLeapMonth","needQuote":true,"nodes":[{"content":"IsLeapMonth","pos":[0,11]}]},{"pos":[99159,99160],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99209,99214],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[99274,99275]},{"pos":[99329,99334],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[99394,99395]},{"pos":[99449,99454],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[99513,99514],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[99643,99654],"content":"IsLeapMonth","needQuote":true,"nodes":[{"content":"IsLeapMonth","pos":[0,11]}]},{"pos":[99742,99743],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99792,99797],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[99857,99858]},{"pos":[99912,99917],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[99977,99978]},{"pos":[100032,100037],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[100096,100097],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100411,100435],"content":"IsLeapYear(Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapYear(Int32, Int32)","pos":[0,24]}]},{"pos":[100619,100629],"content":"IsLeapYear","needQuote":true,"nodes":[{"content":"IsLeapYear","pos":[0,10]}]},{"pos":[100716,100717],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100766,100771],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[100831,100832]},{"pos":[100886,100891],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[100950,100951],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101066,101076],"content":"IsLeapYear","needQuote":true,"nodes":[{"content":"IsLeapYear","pos":[0,10]}]},{"pos":[101163,101164],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101213,101218],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[101278,101279]},{"pos":[101333,101338],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[101397,101398],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101768,101834],"content":"ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)","pos":[0,66]}]},{"pos":[102180,102190],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[102277,102278],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102327,102332],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[102392,102393]},{"pos":[102447,102452],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[102512,102513]},{"pos":[102567,102572],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[102632,102633]},{"pos":[102687,102692],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[102752,102753]},{"pos":[102807,102812],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[102872,102873]},{"pos":[102927,102932],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[102992,102993]},{"pos":[103047,103052],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[103112,103113]},{"pos":[103167,103172],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[103231,103232],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103425,103435],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[103522,103523],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103572,103577],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[103637,103638]},{"pos":[103692,103697],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[103757,103758]},{"pos":[103812,103817],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[103877,103878]},{"pos":[103932,103937],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[103997,103998]},{"pos":[104052,104057],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[104117,104118]},{"pos":[104172,104177],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[104237,104238]},{"pos":[104292,104297],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[104357,104358]},{"pos":[104412,104417],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[104476,104477],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104881,104903],"content":"ToFourDigitYear(Int32)","needQuote":true,"nodes":[{"content":"ToFourDigitYear(Int32)","pos":[0,22]}]},{"pos":[105070,105085],"content":"ToFourDigitYear","needQuote":true,"nodes":[{"content":"ToFourDigitYear","pos":[0,15]}]},{"pos":[105177,105178],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105227,105232],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[105291,105292],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105399,105414],"content":"ToFourDigitYear","needQuote":true,"nodes":[{"content":"ToFourDigitYear","pos":[0,15]}]},{"pos":[105506,105507],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105556,105561],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[105620,105621],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105846,105871],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[106077,106104],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[106323,106340],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Globalization.EastAsianLunisolarCalendar\n  commentId: T:System.Globalization.EastAsianLunisolarCalendar\n  id: EastAsianLunisolarCalendar\n  parent: System.Globalization\n  children:\n  - System.Globalization.EastAsianLunisolarCalendar.AddMonths(System.DateTime,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.AddYears(System.DateTime,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem(System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.GetDayOfMonth(System.DateTime)\n  - System.Globalization.EastAsianLunisolarCalendar.GetDayOfWeek(System.DateTime)\n  - System.Globalization.EastAsianLunisolarCalendar.GetDayOfYear(System.DateTime)\n  - System.Globalization.EastAsianLunisolarCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear(System.Int32,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.GetLeapMonth(System.Int32,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.GetMonth(System.DateTime)\n  - System.Globalization.EastAsianLunisolarCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear(System.DateTime)\n  - System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch(System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.GetYear(System.DateTime)\n  - System.Globalization.EastAsianLunisolarCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.IsLeapYear(System.Int32,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.ToFourDigitYear(System.Int32)\n  - System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax\n  langs:\n  - csharp\n  - vb\n  name: EastAsianLunisolarCalendar\n  fullName: System.Globalization.EastAsianLunisolarCalendar\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EastAsianLunisolarCalendar\n    path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n    startLine: 15\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Represents a calendar that divides time into months, days, years, and eras, and has dates that are based on cycles of the sun and the moon.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public abstract class EastAsianLunisolarCalendar : Calendar, ICloneable\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public MustInherit Class EastAsianLunisolarCalendar\n          Inherits Calendar\n          Implements ICloneable\n  inheritance:\n  - System.Object\n  - System.Globalization.Calendar\n  implements:\n  - System.ICloneable\n  inheritedMembers:\n  - System.Globalization.Calendar.CurrentEra\n  - System.Globalization.Calendar.Clone\n  - System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)\n  - System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n  - System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n  - System.Globalization.Calendar.GetDaysInYear(System.Int32)\n  - System.Globalization.Calendar.GetEra(System.DateTime)\n  - System.Globalization.Calendar.GetHour(System.DateTime)\n  - System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  - System.Globalization.Calendar.GetMinute(System.DateTime)\n  - System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  - System.Globalization.Calendar.GetSecond(System.DateTime)\n  - System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  - System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n  - System.Globalization.Calendar.GetLeapMonth(System.Int32)\n  - System.Globalization.Calendar.IsLeapYear(System.Int32)\n  - System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Globalization.Calendar.MinSupportedDateTime\n  - System.Globalization.Calendar.MaxSupportedDateTime\n  - System.Globalization.Calendar.AlgorithmType\n  - System.Globalization.Calendar.IsReadOnly\n  - System.Globalization.Calendar.Eras\n  - System.Globalization.Calendar.DaysInYearBeforeMinSupportedYear\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: EastAsianLunisolarCalendar\n- uid: System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax\n  commentId: P:System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax\n  id: TwoDigitYearMax\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  - vb\n  name: TwoDigitYearMax\n  fullName: System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TwoDigitYearMax\n    path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n    startLine: 609\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</p>\\n\"\n  syntax:\n    content: public override int TwoDigitYearMax { get; set; }\n    content.vb: Public Overrides Property TwoDigitYearMax As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The last year of a 100-year range that can be represented by a 2-digit year.</p>\\n\"\n  overridden: System.Globalization.Calendar.TwoDigitYearMax\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The current <xref href=\\\"System.Globalization.EastAsianLunisolarCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  is read-only.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The value in a set operation is less than 99 or greater than the maximum supported year in the current calendar.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: EastAsianLunisolarCalendar.TwoDigitYearMax\n- uid: System.Globalization.EastAsianLunisolarCalendar.AddMonths(System.DateTime,System.Int32)\n  commentId: M:System.Globalization.EastAsianLunisolarCalendar.AddMonths(System.DateTime,System.Int32)\n  id: AddMonths(System.DateTime,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  - vb\n  name: AddMonths(DateTime, Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.AddMonths(System.DateTime, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddMonths\n    path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n    startLine: 398\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Calculates the date that is the specified number of months away from the specified date.</p>\\n\"\n  syntax:\n    content: public override DateTime AddMonths(DateTime time, int months)\n    content.vb: Public Overrides Function AddMonths(time As Date, months As Integer) As Date\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which to add <em>months</em>. </p>\\n\"\n    - id: months\n      type: System.Int32\n      description: \"\\n<p>The number of months to add. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>A new <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that results from adding the specified number of months to the <em>time</em> parameter.</p>\\n\"\n  overridden: System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The result is outside the supported range of a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>months</em> is less than -120000 or greater than 120000. </p>\\n<p>-or-</p>\\n<p>\\n<em>time</em> is less than <xref href=\\\"System.Globalization.Calendar.MinSupportedDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Globalization.Calendar.MaxSupportedDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: EastAsianLunisolarCalendar.AddMonths(DateTime, Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.AddYears(System.DateTime,System.Int32)\n  commentId: M:System.Globalization.EastAsianLunisolarCalendar.AddYears(System.DateTime,System.Int32)\n  id: AddYears(System.DateTime,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  - vb\n  name: AddYears(DateTime, Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.AddYears(System.DateTime, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddYears\n    path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n    startLine: 442\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Calculates the date that is the specified number of years away from the specified date.</p>\\n\"\n  syntax:\n    content: public override DateTime AddYears(DateTime time, int years)\n    content.vb: Public Overrides Function AddYears(time As Date, years As Integer) As Date\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which to add <em>years</em>. </p>\\n\"\n    - id: years\n      type: System.Int32\n      description: \"\\n<p>The number of years to add. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>A new <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that results from adding the specified number of years to the <em>time</em> parameter.</p>\\n\"\n  overridden: System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The result is outside the supported range of a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>time</em> is less than <xref href=\\\"System.Globalization.Calendar.MinSupportedDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Globalization.Calendar.MaxSupportedDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: EastAsianLunisolarCalendar.AddYears(DateTime, Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem(System.Int32)\n  commentId: M:System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem(System.Int32)\n  id: GetCelestialStem(System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetCelestialStem(Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCelestialStem\n    path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n    startLine: 64\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Calculates the celestial stem of the specified year in the sexagenary (60-year) cycle.</p>\\n\"\n  syntax:\n    content: public int GetCelestialStem(int sexagenaryYear)\n    content.vb: Public Function GetCelestialStem(sexagenaryYear As Integer) As Integer\n    parameters:\n    - id: sexagenaryYear\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 through 60 that represents a year in the sexagenary cycle. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A number from 1 through 10.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>sexagenaryYear</em> is less than 1 or greater than 60.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EastAsianLunisolarCalendar.GetCelestialStem(Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetDayOfMonth(System.DateTime)\n  commentId: M:System.Globalization.EastAsianLunisolarCalendar.GetDayOfMonth(System.DateTime)\n  id: GetDayOfMonth(System.DateTime)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetDayOfMonth(DateTime)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetDayOfMonth(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDayOfMonth\n    path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n    startLine: 485\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Calculates the day of the month in the specified date.</p>\\n\"\n  syntax:\n    content: public override int GetDayOfMonth(DateTime time)\n    content.vb: Public Overrides Function GetDayOfMonth(time As Date) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 through 31 that represents the day of the month specified in the <em>time</em> parameter.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: EastAsianLunisolarCalendar.GetDayOfMonth(DateTime)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetDayOfWeek(System.DateTime)\n  commentId: M:System.Globalization.EastAsianLunisolarCalendar.GetDayOfWeek(System.DateTime)\n  id: GetDayOfWeek(System.DateTime)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetDayOfWeek(DateTime)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetDayOfWeek(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDayOfWeek\n    path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n    startLine: 541\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Calculates the day of the week in the specified date.</p>\\n\"\n  syntax:\n    content: public override DayOfWeek GetDayOfWeek(DateTime time)\n    content.vb: Public Overrides Function GetDayOfWeek(time As Date) As DayOfWeek\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.DayOfWeek\n      description: \"\\n<p>One of the <xref href=\\\"System.DayOfWeek\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that represents the day of the week specified in the <em>time</em> parameter.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>time</em> is less than <xref href=\\\"System.Globalization.Calendar.MinSupportedDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Globalization.Calendar.MaxSupportedDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: EastAsianLunisolarCalendar.GetDayOfWeek(DateTime)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetDayOfYear(System.DateTime)\n  commentId: M:System.Globalization.EastAsianLunisolarCalendar.GetDayOfYear(System.DateTime)\n  id: GetDayOfYear(System.DateTime)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetDayOfYear(DateTime)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetDayOfYear(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDayOfYear\n    path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n    startLine: 468\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Calculates the day of the year in the specified date.</p>\\n\"\n  syntax:\n    content: public override int GetDayOfYear(DateTime time)\n    content.vb: Public Overrides Function GetDayOfYear(time As Date) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 through 354 in a common year, or 1 through 384 in a leap year, that represents the day of the year specified in the <em>time</em> parameter.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: EastAsianLunisolarCalendar.GetDayOfYear(DateTime)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Globalization.EastAsianLunisolarCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  id: GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetDaysInMonth(Int32, Int32, Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetDaysInMonth(System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDaysInMonth\n    path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n    startLine: 220\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Calculates the number of days in the specified month of the specified year and era.</p>\\n\"\n  syntax:\n    content: public override int GetDaysInMonth(int year, int month, int era)\n    content.vb: Public Overrides Function GetDaysInMonth(year As Integer, month As Integer, era As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 through 12 in a common year, or 1 through 13 in a leap year, that represents the month. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of days in the specified month of the specified year and era.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em>, <em>month</em>, or <em>era</em> is outside the range supported by this calendar. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: EastAsianLunisolarCalendar.GetDaysInMonth(Int32, Int32, Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear(System.Int32,System.Int32)\n  commentId: M:System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear(System.Int32,System.Int32)\n  id: GetDaysInYear(System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetDaysInYear(Int32, Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDaysInYear\n    path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n    startLine: 497\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Calculates the number of days in the specified year and era.</p>\\n\"\n  syntax:\n    content: public override int GetDaysInYear(int year, int era)\n    content.vb: Public Overrides Function GetDaysInYear(year As Integer, era As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of days in the specified year and era.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> or <em>era</em> is outside the range supported by this calendar. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: EastAsianLunisolarCalendar.GetDaysInYear(Int32, Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetLeapMonth(System.Int32,System.Int32)\n  commentId: M:System.Globalization.EastAsianLunisolarCalendar.GetLeapMonth(System.Int32,System.Int32)\n  id: GetLeapMonth(System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetLeapMonth(Int32, Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetLeapMonth(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetLeapMonth\n    path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n    startLine: 584\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Calculates the leap month for the specified year and era.</p>\\n\"\n  syntax:\n    content: public override int GetLeapMonth(int year, int era)\n    content.vb: Public Overrides Function GetLeapMonth(year As Integer, era As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year.</p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A positive integer from 1 through 13 that indicates the leap month in the specified year and era.</p>\\n<p> -or-</p>\\n<p>Zero if this calendar does not support a leap month, or if the <em>year</em> and <em>era</em> parameters do not specify a leap year.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: EastAsianLunisolarCalendar.GetLeapMonth(Int32, Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetMonth(System.DateTime)\n  commentId: M:System.Globalization.EastAsianLunisolarCalendar.GetMonth(System.DateTime)\n  id: GetMonth(System.DateTime)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetMonth(DateTime)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetMonth(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMonth\n    path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n    startLine: 513\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the month in the specified date.</p>\\n\"\n  syntax:\n    content: public override int GetMonth(DateTime time)\n    content.vb: Public Overrides Function GetMonth(time As Date) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 to 13 that represents the month specified in the <em>time</em> parameter.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetMonth(System.DateTime)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: EastAsianLunisolarCalendar.GetMonth(DateTime)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  commentId: M:System.Globalization.EastAsianLunisolarCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  id: GetMonthsInYear(System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetMonthsInYear(Int32, Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetMonthsInYear(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMonthsInYear\n    path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n    startLine: 548\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Calculates the number of months in the specified year and era.</p>\\n\"\n  syntax:\n    content: public override int GetMonthsInYear(int year, int era)\n    content.vb: Public Overrides Function GetMonthsInYear(year As Integer, era As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of months in the specified year in the specified era. The return value is 12 months in a common year or 13 months in a leap year.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> or <em>era</em> is outside the range supported by this calendar. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: EastAsianLunisolarCalendar.GetMonthsInYear(Int32, Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear(System.DateTime)\n  commentId: M:System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear(System.DateTime)\n  id: GetSexagenaryYear(System.DateTime)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetSexagenaryYear(DateTime)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetSexagenaryYear\n    path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n    startLine: 51\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Calculates the year in the sexagenary (60-year) cycle that corresponds to the specified date.</p>\\n\"\n  syntax:\n    content: public virtual int GetSexagenaryYear(DateTime time)\n    content.vb: Public Overridable Function GetSexagenaryYear(time As Date) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>A <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A number from 1 through 60 in the sexagenary cycle that corresponds to the <em>date</em> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: EastAsianLunisolarCalendar.GetSexagenaryYear(DateTime)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch(System.Int32)\n  commentId: M:System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch(System.Int32)\n  id: GetTerrestrialBranch(System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetTerrestrialBranch(Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetTerrestrialBranch\n    path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n    startLine: 79\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Calculates the terrestrial branch of the specified year in the sexagenary (60-year) cycle.</p>\\n\"\n  syntax:\n    content: public int GetTerrestrialBranch(int sexagenaryYear)\n    content.vb: Public Function GetTerrestrialBranch(sexagenaryYear As Integer) As Integer\n    parameters:\n    - id: sexagenaryYear\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 through 60 that represents a year in the sexagenary cycle.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 through 12.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>sexagenaryYear</em> is less than 1 or greater than 60.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EastAsianLunisolarCalendar.GetTerrestrialBranch(Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.GetYear(System.DateTime)\n  commentId: M:System.Globalization.EastAsianLunisolarCalendar.GetYear(System.DateTime)\n  id: GetYear(System.DateTime)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetYear(DateTime)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.GetYear(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetYear\n    path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n    startLine: 526\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the year in the specified date.</p>\\n\"\n  syntax:\n    content: public override int GetYear(DateTime time)\n    content.vb: Public Overrides Function GetYear(time As Date) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetYear(System.DateTime)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: EastAsianLunisolarCalendar.GetYear(DateTime)\n- uid: System.Globalization.EastAsianLunisolarCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Globalization.EastAsianLunisolarCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  id: IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  - vb\n  name: IsLeapDay(Int32, Int32, Int32, Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.IsLeapDay(System.Int32, System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLeapDay\n    path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n    startLine: 557\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Determines whether the specified date in the specified era is a leap day.</p>\\n\"\n  syntax:\n    content: public override bool IsLeapDay(int year, int month, int day, int era)\n    content.vb: Public Overrides Function IsLeapDay(year As Integer, month As Integer, day As Integer, era As Integer) As Boolean\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 through 13 that represents the month. </p>\\n\"\n    - id: day\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 through 31 that represents the day. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified day is a leap day; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em>, <em>month</em>, <em>day</em>, or <em>era</em> is outside the range supported by this calendar. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: EastAsianLunisolarCalendar.IsLeapDay(Int32, Int32, Int32, Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Globalization.EastAsianLunisolarCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  id: IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  - vb\n  name: IsLeapMonth(Int32, Int32, Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.IsLeapMonth(System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLeapMonth\n    path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n    startLine: 574\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Determines whether the specified month in the specified year and era is a leap month.</p>\\n\"\n  syntax:\n    content: public override bool IsLeapMonth(int year, int month, int era)\n    content.vb: Public Overrides Function IsLeapMonth(year As Integer, month As Integer, era As Integer) As Boolean\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 through 13 that represents the month. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>month</em> parameter is a leap month; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em>, <em>month</em>, or <em>era</em> is outside the range supported by this calendar. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: EastAsianLunisolarCalendar.IsLeapMonth(Int32, Int32, Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.IsLeapYear(System.Int32,System.Int32)\n  commentId: M:System.Globalization.EastAsianLunisolarCalendar.IsLeapYear(System.Int32,System.Int32)\n  id: IsLeapYear(System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  - vb\n  name: IsLeapYear(Int32, Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.IsLeapYear(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLeapYear\n    path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n    startLine: 601\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Determines whether the specified year in the specified era is a leap year.</p>\\n\"\n  syntax:\n    content: public override bool IsLeapYear(int year, int era)\n    content.vb: Public Overrides Function IsLeapYear(year As Integer, era As Integer) As Boolean\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified year is a leap year; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> or <em>era</em> is outside the range supported by this calendar. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: EastAsianLunisolarCalendar.IsLeapYear(Int32, Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Globalization.EastAsianLunisolarCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  - vb\n  name: ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.ToDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDateTime\n    path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n    startLine: 232\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is set to the specified date, time, and era.</p>\\n\"\n  syntax:\n    content: public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era)\n    content.vb: Public Overrides Function ToDateTime(year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, era As Integer) As Date\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 through 13 that represents the month. </p>\\n\"\n    - id: day\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 through 31 that represents the day. </p>\\n\"\n    - id: hour\n      type: System.Int32\n      description: \"\\n<p>An integer from 0 through 23 that represents the hour. </p>\\n\"\n    - id: minute\n      type: System.Int32\n      description: \"\\n<p>An integer from 0 through 59 that represents the minute. </p>\\n\"\n    - id: second\n      type: System.Int32\n      description: \"\\n<p>An integer from 0 through 59 that represents the second. </p>\\n\"\n    - id: millisecond\n      type: System.Int32\n      description: \"\\n<p>An integer from 0 through 999 that represents the millisecond. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>A <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is set to the specified date, time, and era.</p>\\n\"\n  overridden: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em>, <em>month</em>, <em>day</em>, <em>hour</em>, <em>minute</em>, <em>second</em>, <em>millisecond</em>, or <em>era</em> is outside the range supported by this calendar. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: EastAsianLunisolarCalendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n- uid: System.Globalization.EastAsianLunisolarCalendar.ToFourDigitYear(System.Int32)\n  commentId: M:System.Globalization.EastAsianLunisolarCalendar.ToFourDigitYear(System.Int32)\n  id: ToFourDigitYear(System.Int32)\n  parent: System.Globalization.EastAsianLunisolarCalendar\n  langs:\n  - csharp\n  - vb\n  name: ToFourDigitYear(Int32)\n  fullName: System.Globalization.EastAsianLunisolarCalendar.ToFourDigitYear(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToFourDigitYear\n    path: src/mscorlib/src/System/Globalization/EastAsianLunisolarCalendar.cs\n    startLine: 630\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Converts the specified year to a four-digit year.</p>\\n\"\n  syntax:\n    content: public override int ToFourDigitYear(int year)\n    content.vb: Public Overrides Function ToFourDigitYear(year As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>A two-digit or four-digit integer that represents the year to convert. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer that contains the four-digit representation of the <em>year</em> parameter.</p>\\n\"\n  overridden: System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by this calendar. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: EastAsianLunisolarCalendar.ToFourDigitYear(Int32)\nreferences:\n- uid: System.Globalization\n  isExternal: false\n  name: System.Globalization\n  fullName: System.Globalization\n  nameWithType: System.Globalization\n  commentId: N:System.Globalization\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Globalization.Calendar\n  parent: System.Globalization\n  isExternal: false\n  name: Calendar\n  fullName: System.Globalization.Calendar\n  nameWithType: Calendar\n  commentId: T:System.Globalization.Calendar\n- uid: System.ICloneable\n  parent: System\n  isExternal: true\n  name: ICloneable\n  fullName: System.ICloneable\n  nameWithType: ICloneable\n  commentId: T:System.ICloneable\n- uid: System.Globalization.Calendar.CurrentEra\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: CurrentEra\n  fullName: System.Globalization.Calendar.CurrentEra\n  nameWithType: Calendar.CurrentEra\n  commentId: F:System.Globalization.Calendar.CurrentEra\n- uid: System.Globalization.Calendar.Clone\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: Clone()\n  fullName: System.Globalization.Calendar.Clone()\n  spec.csharp:\n  - uid: System.Globalization.Calendar.Clone\n    name: Clone\n    fullName: System.Globalization.Calendar.Clone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.Clone\n    name: Clone\n    fullName: System.Globalization.Calendar.Clone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Calendar.Clone()\n  commentId: M:System.Globalization.Calendar.Clone\n- uid: System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: ReadOnly(Calendar)\n  fullName: System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)\n    name: ReadOnly\n    fullName: System.Globalization.Calendar.ReadOnly\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Globalization.Calendar\n    name: Calendar\n    fullName: System.Globalization.Calendar\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)\n    name: ReadOnly\n    fullName: System.Globalization.Calendar.ReadOnly\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Globalization.Calendar\n    name: Calendar\n    fullName: System.Globalization.Calendar\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.ReadOnly(Calendar)\n  commentId: M:System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)\n- uid: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddMilliseconds(DateTime, Double)\n  fullName: System.Globalization.Calendar.AddMilliseconds(System.DateTime, System.Double)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n    name: AddMilliseconds\n    fullName: System.Globalization.Calendar.AddMilliseconds\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n    name: AddMilliseconds\n    fullName: System.Globalization.Calendar.AddMilliseconds\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddMilliseconds(DateTime, Double)\n  commentId: M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n- uid: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddDays(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddDays(System.DateTime, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n    name: AddDays\n    fullName: System.Globalization.Calendar.AddDays\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n    name: AddDays\n    fullName: System.Globalization.Calendar.AddDays\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddDays(DateTime, Int32)\n  commentId: M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n- uid: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddHours(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddHours(System.DateTime, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n    name: AddHours\n    fullName: System.Globalization.Calendar.AddHours\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n    name: AddHours\n    fullName: System.Globalization.Calendar.AddHours\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddHours(DateTime, Int32)\n  commentId: M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n- uid: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddMinutes(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddMinutes(System.DateTime, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n    name: AddMinutes\n    fullName: System.Globalization.Calendar.AddMinutes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n    name: AddMinutes\n    fullName: System.Globalization.Calendar.AddMinutes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddMinutes(DateTime, Int32)\n  commentId: M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n- uid: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddSeconds(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddSeconds(System.DateTime, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n    name: AddSeconds\n    fullName: System.Globalization.Calendar.AddSeconds\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n    name: AddSeconds\n    fullName: System.Globalization.Calendar.AddSeconds\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddSeconds(DateTime, Int32)\n  commentId: M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n- uid: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddWeeks(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddWeeks(System.DateTime, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n    name: AddWeeks\n    fullName: System.Globalization.Calendar.AddWeeks\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n    name: AddWeeks\n    fullName: System.Globalization.Calendar.AddWeeks\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddWeeks(DateTime, Int32)\n  commentId: M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n- uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetDaysInMonth(Int32, Int32)\n  fullName: System.Globalization.Calendar.GetDaysInMonth(System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n    name: GetDaysInMonth\n    fullName: System.Globalization.Calendar.GetDaysInMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n    name: GetDaysInMonth\n    fullName: System.Globalization.Calendar.GetDaysInMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetDaysInMonth(Int32, Int32)\n  commentId: M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.GetDaysInYear(System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetDaysInYear(Int32)\n  fullName: System.Globalization.Calendar.GetDaysInYear(System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetDaysInYear(System.Int32)\n    name: GetDaysInYear\n    fullName: System.Globalization.Calendar.GetDaysInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetDaysInYear(System.Int32)\n    name: GetDaysInYear\n    fullName: System.Globalization.Calendar.GetDaysInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetDaysInYear(Int32)\n  commentId: M:System.Globalization.Calendar.GetDaysInYear(System.Int32)\n- uid: System.Globalization.Calendar.GetEra(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetEra(DateTime)\n  fullName: System.Globalization.Calendar.GetEra(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetEra(System.DateTime)\n    name: GetEra\n    fullName: System.Globalization.Calendar.GetEra\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetEra(System.DateTime)\n    name: GetEra\n    fullName: System.Globalization.Calendar.GetEra\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetEra(DateTime)\n  commentId: M:System.Globalization.Calendar.GetEra(System.DateTime)\n- uid: System.Globalization.Calendar.GetHour(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetHour(DateTime)\n  fullName: System.Globalization.Calendar.GetHour(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetHour(System.DateTime)\n    name: GetHour\n    fullName: System.Globalization.Calendar.GetHour\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetHour(System.DateTime)\n    name: GetHour\n    fullName: System.Globalization.Calendar.GetHour\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetHour(DateTime)\n  commentId: M:System.Globalization.Calendar.GetHour(System.DateTime)\n- uid: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetMilliseconds(DateTime)\n  fullName: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n    name: GetMilliseconds\n    fullName: System.Globalization.Calendar.GetMilliseconds\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n    name: GetMilliseconds\n    fullName: System.Globalization.Calendar.GetMilliseconds\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetMilliseconds(DateTime)\n  commentId: M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n- uid: System.Globalization.Calendar.GetMinute(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetMinute(DateTime)\n  fullName: System.Globalization.Calendar.GetMinute(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetMinute(System.DateTime)\n    name: GetMinute\n    fullName: System.Globalization.Calendar.GetMinute\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetMinute(System.DateTime)\n    name: GetMinute\n    fullName: System.Globalization.Calendar.GetMinute\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetMinute(DateTime)\n  commentId: M:System.Globalization.Calendar.GetMinute(System.DateTime)\n- uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetMonthsInYear(Int32)\n  fullName: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n    name: GetMonthsInYear\n    fullName: System.Globalization.Calendar.GetMonthsInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n    name: GetMonthsInYear\n    fullName: System.Globalization.Calendar.GetMonthsInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetMonthsInYear(Int32)\n  commentId: M:System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n- uid: System.Globalization.Calendar.GetSecond(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetSecond(DateTime)\n  fullName: System.Globalization.Calendar.GetSecond(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetSecond(System.DateTime)\n    name: GetSecond\n    fullName: System.Globalization.Calendar.GetSecond\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetSecond(System.DateTime)\n    name: GetSecond\n    fullName: System.Globalization.Calendar.GetSecond\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetSecond(DateTime)\n  commentId: M:System.Globalization.Calendar.GetSecond(System.DateTime)\n- uid: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)\n  fullName: System.Globalization.Calendar.GetWeekOfYear(System.DateTime, System.Globalization.CalendarWeekRule, System.DayOfWeek)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    name: GetWeekOfYear\n    fullName: System.Globalization.Calendar.GetWeekOfYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Globalization.CalendarWeekRule\n    name: CalendarWeekRule\n    fullName: System.Globalization.CalendarWeekRule\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.DayOfWeek\n    name: DayOfWeek\n    fullName: System.DayOfWeek\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    name: GetWeekOfYear\n    fullName: System.Globalization.Calendar.GetWeekOfYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Globalization.CalendarWeekRule\n    name: CalendarWeekRule\n    fullName: System.Globalization.CalendarWeekRule\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.DayOfWeek\n    name: DayOfWeek\n    fullName: System.DayOfWeek\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)\n  commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n- uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: IsLeapDay(Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.IsLeapDay(System.Int32, System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n    name: IsLeapDay\n    fullName: System.Globalization.Calendar.IsLeapDay\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n    name: IsLeapDay\n    fullName: System.Globalization.Calendar.IsLeapDay\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.IsLeapDay(Int32, Int32, Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: IsLeapMonth(Int32, Int32)\n  fullName: System.Globalization.Calendar.IsLeapMonth(System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n    name: IsLeapMonth\n    fullName: System.Globalization.Calendar.IsLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n    name: IsLeapMonth\n    fullName: System.Globalization.Calendar.IsLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.IsLeapMonth(Int32, Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.GetLeapMonth(System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetLeapMonth(Int32)\n  fullName: System.Globalization.Calendar.GetLeapMonth(System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetLeapMonth(System.Int32)\n    name: GetLeapMonth\n    fullName: System.Globalization.Calendar.GetLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetLeapMonth(System.Int32)\n    name: GetLeapMonth\n    fullName: System.Globalization.Calendar.GetLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetLeapMonth(Int32)\n  commentId: M:System.Globalization.Calendar.GetLeapMonth(System.Int32)\n- uid: System.Globalization.Calendar.IsLeapYear(System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: IsLeapYear(Int32)\n  fullName: System.Globalization.Calendar.IsLeapYear(System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.IsLeapYear(System.Int32)\n    name: IsLeapYear\n    fullName: System.Globalization.Calendar.IsLeapYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.IsLeapYear(System.Int32)\n    name: IsLeapYear\n    fullName: System.Globalization.Calendar.IsLeapYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.IsLeapYear(Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapYear(System.Int32)\n- uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.ToDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n    name: ToDateTime\n    fullName: System.Globalization.Calendar.ToDateTime\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n    name: ToDateTime\n    fullName: System.Globalization.Calendar.ToDateTime\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  commentId: M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.MinSupportedDateTime\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: MinSupportedDateTime\n  fullName: System.Globalization.Calendar.MinSupportedDateTime\n  nameWithType: Calendar.MinSupportedDateTime\n  commentId: P:System.Globalization.Calendar.MinSupportedDateTime\n- uid: System.Globalization.Calendar.MaxSupportedDateTime\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: MaxSupportedDateTime\n  fullName: System.Globalization.Calendar.MaxSupportedDateTime\n  nameWithType: Calendar.MaxSupportedDateTime\n  commentId: P:System.Globalization.Calendar.MaxSupportedDateTime\n- uid: System.Globalization.Calendar.AlgorithmType\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AlgorithmType\n  fullName: System.Globalization.Calendar.AlgorithmType\n  nameWithType: Calendar.AlgorithmType\n  commentId: P:System.Globalization.Calendar.AlgorithmType\n- uid: System.Globalization.Calendar.IsReadOnly\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: IsReadOnly\n  fullName: System.Globalization.Calendar.IsReadOnly\n  nameWithType: Calendar.IsReadOnly\n  commentId: P:System.Globalization.Calendar.IsReadOnly\n- uid: System.Globalization.Calendar.Eras\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: Eras\n  fullName: System.Globalization.Calendar.Eras\n  nameWithType: Calendar.Eras\n  commentId: P:System.Globalization.Calendar.Eras\n- uid: System.Globalization.Calendar.DaysInYearBeforeMinSupportedYear\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: DaysInYearBeforeMinSupportedYear\n  fullName: System.Globalization.Calendar.DaysInYearBeforeMinSupportedYear\n  nameWithType: Calendar.DaysInYearBeforeMinSupportedYear\n  commentId: P:System.Globalization.Calendar.DaysInYearBeforeMinSupportedYear\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Globalization.Calendar.TwoDigitYearMax\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: TwoDigitYearMax\n  fullName: System.Globalization.Calendar.TwoDigitYearMax\n  nameWithType: Calendar.TwoDigitYearMax\n  commentId: P:System.Globalization.Calendar.TwoDigitYearMax\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddMonths(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddMonths(System.DateTime, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n    name: AddMonths\n    fullName: System.Globalization.Calendar.AddMonths\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n    name: AddMonths\n    fullName: System.Globalization.Calendar.AddMonths\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddMonths(DateTime, Int32)\n  commentId: M:System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  fullName: System.DateTime\n  nameWithType: DateTime\n  commentId: T:System.DateTime\n- uid: System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddYears(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddYears(System.DateTime, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n    name: AddYears\n    fullName: System.Globalization.Calendar.AddYears\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n    name: AddYears\n    fullName: System.Globalization.Calendar.AddYears\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddYears(DateTime, Int32)\n  commentId: M:System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n- uid: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetDayOfMonth(DateTime)\n  fullName: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n    name: GetDayOfMonth\n    fullName: System.Globalization.Calendar.GetDayOfMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n    name: GetDayOfMonth\n    fullName: System.Globalization.Calendar.GetDayOfMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetDayOfMonth(DateTime)\n  commentId: M:System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n- uid: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetDayOfWeek(DateTime)\n  fullName: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n    name: GetDayOfWeek\n    fullName: System.Globalization.Calendar.GetDayOfWeek\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n    name: GetDayOfWeek\n    fullName: System.Globalization.Calendar.GetDayOfWeek\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetDayOfWeek(DateTime)\n  commentId: M:System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n- uid: System.DayOfWeek\n  parent: System\n  isExternal: false\n  name: DayOfWeek\n  fullName: System.DayOfWeek\n  nameWithType: DayOfWeek\n  commentId: T:System.DayOfWeek\n- uid: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetDayOfYear(DateTime)\n  fullName: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n    name: GetDayOfYear\n    fullName: System.Globalization.Calendar.GetDayOfYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n    name: GetDayOfYear\n    fullName: System.Globalization.Calendar.GetDayOfYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetDayOfYear(DateTime)\n  commentId: M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n- uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetDaysInMonth(Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.GetDaysInMonth(System.Int32, System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n    name: GetDaysInMonth\n    fullName: System.Globalization.Calendar.GetDaysInMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n    name: GetDaysInMonth\n    fullName: System.Globalization.Calendar.GetDaysInMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetDaysInMonth(Int32, Int32, Int32)\n  commentId: M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetDaysInYear(Int32, Int32)\n  fullName: System.Globalization.Calendar.GetDaysInYear(System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)\n    name: GetDaysInYear\n    fullName: System.Globalization.Calendar.GetDaysInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)\n    name: GetDaysInYear\n    fullName: System.Globalization.Calendar.GetDaysInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetDaysInYear(Int32, Int32)\n  commentId: M:System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetLeapMonth(Int32, Int32)\n  fullName: System.Globalization.Calendar.GetLeapMonth(System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)\n    name: GetLeapMonth\n    fullName: System.Globalization.Calendar.GetLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)\n    name: GetLeapMonth\n    fullName: System.Globalization.Calendar.GetLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetLeapMonth(Int32, Int32)\n  commentId: M:System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.GetMonth(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetMonth(DateTime)\n  fullName: System.Globalization.Calendar.GetMonth(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetMonth(System.DateTime)\n    name: GetMonth\n    fullName: System.Globalization.Calendar.GetMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetMonth(System.DateTime)\n    name: GetMonth\n    fullName: System.Globalization.Calendar.GetMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetMonth(DateTime)\n  commentId: M:System.Globalization.Calendar.GetMonth(System.DateTime)\n- uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetMonthsInYear(Int32, Int32)\n  fullName: System.Globalization.Calendar.GetMonthsInYear(System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)\n    name: GetMonthsInYear\n    fullName: System.Globalization.Calendar.GetMonthsInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)\n    name: GetMonthsInYear\n    fullName: System.Globalization.Calendar.GetMonthsInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetMonthsInYear(Int32, Int32)\n  commentId: M:System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.GetYear(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetYear(DateTime)\n  fullName: System.Globalization.Calendar.GetYear(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetYear(System.DateTime)\n    name: GetYear\n    fullName: System.Globalization.Calendar.GetYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetYear(System.DateTime)\n    name: GetYear\n    fullName: System.Globalization.Calendar.GetYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetYear(DateTime)\n  commentId: M:System.Globalization.Calendar.GetYear(System.DateTime)\n- uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: IsLeapDay(Int32, Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.IsLeapDay(System.Int32, System.Int32, System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n    name: IsLeapDay\n    fullName: System.Globalization.Calendar.IsLeapDay\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n    name: IsLeapDay\n    fullName: System.Globalization.Calendar.IsLeapDay\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.IsLeapDay(Int32, Int32, Int32, Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: IsLeapMonth(Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.IsLeapMonth(System.Int32, System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n    name: IsLeapMonth\n    fullName: System.Globalization.Calendar.IsLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n    name: IsLeapMonth\n    fullName: System.Globalization.Calendar.IsLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.IsLeapMonth(Int32, Int32, Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: IsLeapYear(Int32, Int32)\n  fullName: System.Globalization.Calendar.IsLeapYear(System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)\n    name: IsLeapYear\n    fullName: System.Globalization.Calendar.IsLeapYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)\n    name: IsLeapYear\n    fullName: System.Globalization.Calendar.IsLeapYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.IsLeapYear(Int32, Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.ToDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n    name: ToDateTime\n    fullName: System.Globalization.Calendar.ToDateTime\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n    name: ToDateTime\n    fullName: System.Globalization.Calendar.ToDateTime\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  commentId: M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: ToFourDigitYear(Int32)\n  fullName: System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n    name: ToFourDigitYear\n    fullName: System.Globalization.Calendar.ToFourDigitYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n    name: ToFourDigitYear\n    fullName: System.Globalization.Calendar.ToFourDigitYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.ToFourDigitYear(Int32)\n  commentId: M:System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}