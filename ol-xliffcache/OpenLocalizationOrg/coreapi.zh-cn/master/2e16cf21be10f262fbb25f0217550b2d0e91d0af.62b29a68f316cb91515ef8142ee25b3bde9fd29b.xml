{"nodes":[{"pos":[999,1014],"content":"ArrayWithOffset","needQuote":true,"nodes":[{"content":"ArrayWithOffset","pos":[0,15]}]},{"pos":[2676,2706],"content":"ArrayWithOffset(Object, Int32)","needQuote":true,"nodes":[{"content":"ArrayWithOffset(Object, Int32)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;A managed array.","pos":[3676,3697],"source":"\\n<p>A managed array."},{"content":"&lt;/p&gt;\\n","pos":[3698,3704],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The offset in bytes, of the element to be passed through platform invoke.","pos":[3768,3846],"source":"\\n<p>The offset in bytes, of the element to be passed through platform invoke."},{"content":"&lt;/p&gt;\\n","pos":[3847,3853],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The array is larger than 2 gigabytes (GB).&lt;/p&gt;\\n","pos":[3964,4017],"source":"\\n<p>The array is larger than 2 gigabytes (GB).</p>\\n"},{"pos":[4420,4434],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;Object to compare with this instance.","pos":[5318,5360],"source":"\\n<p>Object to compare with this instance."},{"content":"&lt;/p&gt;\\n","pos":[5361,5367],"source":" </p>\\n"},{"pos":[6198,6221],"content":"Equals(ArrayWithOffset)","needQuote":true,"nodes":[{"content":"Equals(ArrayWithOffset)","pos":[0,23]}]},{"pos":[7978,7988],"content":"GetArray()","needQuote":true,"nodes":[{"content":"GetArray()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The managed array this instance references.&lt;/p&gt;\\n","pos":[8785,8839],"source":"\\n<p>The managed array this instance references.</p>\\n"},{"pos":[9192,9205],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The hash code for this instance.&lt;/p&gt;\\n","pos":[9918,9961],"source":"\\n<p>The hash code for this instance.</p>\\n"},{"pos":[10381,10392],"content":"GetOffset()","needQuote":true,"nodes":[{"content":"GetOffset()","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The offset for this instance.&lt;/p&gt;\\n","pos":[11199,11239],"source":"\\n<p>The offset for this instance.</p>\\n"},{"pos":[11878,11920],"content":"Equality(ArrayWithOffset, ArrayWithOffset)","needQuote":true,"nodes":[{"content":"Equality(ArrayWithOffset, ArrayWithOffset)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the value of &lt;em&gt;a&lt;/em&gt; is the same as the value of &lt;em&gt;b&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[13463,13599],"source":"\\n<p>\\n<strong>true</strong> if the value of <em>a</em> is the same as the value of <em>b</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[14297,14341],"content":"Inequality(ArrayWithOffset, ArrayWithOffset)","needQuote":true,"nodes":[{"content":"Inequality(ArrayWithOffset, ArrayWithOffset)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the value of &lt;em&gt;a&lt;/em&gt; is not the same as the value of &lt;em&gt;b&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[15896,16036],"source":"\\n<p>\\n<strong>true</strong> if the value of <em>a</em> is not the same as the value of <em>b</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[16273,16303],"content":"System.Runtime.InteropServices","needQuote":true,"nodes":[{"content":"System.Runtime.InteropServices","pos":[0,30]}]},{"pos":[16528,16538],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[16639,16647],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[16698,16699],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16726,16727],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16800,16808],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[16859,16860],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16887,16888],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17091,17113],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[17261,17267],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17334,17335],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17385,17391],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17452,17453]},{"pos":[17508,17514],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17574,17575],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17672,17678],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17745,17746],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17796,17802],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17863,17864]},{"pos":[17919,17925],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17985,17986],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18231,18262],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[18428,18443],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[18519,18520],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18570,18576],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18637,18638]},{"pos":[18693,18699],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18759,18760],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18866,18881],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[18957,18958],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19008,19014],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19075,19076]},{"pos":[19131,19137],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19197,19198],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19424,19433],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[19526,19533],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[19601,19602],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19629,19630],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19699,19706],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[19774,19775],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19802,19803],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19959,19968],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[20122,20128],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20249,20255],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[20385,20390],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[20566,20580],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[20705,20711],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20760,20761],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20811,20817],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20877,20878],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20964,20970],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21019,21020],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21070,21076],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21136,21137],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21316,21323],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[21528,21543],"content":"ArrayWithOffset","needQuote":true,"nodes":[{"content":"ArrayWithOffset","pos":[0,15]}]},{"pos":[21788,21801],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[21908,21919],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[21973,21974],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22001,22002],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22078,22089],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[22143,22144],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22171,22172],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22350,22367],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Runtime.InteropServices.ArrayWithOffset\n  commentId: T:System.Runtime.InteropServices.ArrayWithOffset\n  id: ArrayWithOffset\n  parent: System.Runtime.InteropServices\n  children:\n  - System.Runtime.InteropServices.ArrayWithOffset.#ctor(System.Object,System.Int32)\n  - System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Object)\n  - System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Runtime.InteropServices.ArrayWithOffset)\n  - System.Runtime.InteropServices.ArrayWithOffset.GetArray\n  - System.Runtime.InteropServices.ArrayWithOffset.GetHashCode\n  - System.Runtime.InteropServices.ArrayWithOffset.GetOffset\n  - System.Runtime.InteropServices.ArrayWithOffset.op_Equality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)\n  - System.Runtime.InteropServices.ArrayWithOffset.op_Inequality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)\n  langs:\n  - csharp\n  - vb\n  name: ArrayWithOffset\n  fullName: System.Runtime.InteropServices.ArrayWithOffset\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/ArrayWithOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ArrayWithOffset\n    path: src/mscorlib/src/System/Runtime/InteropServices/ArrayWithOffset.cs\n    startLine: 10\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Encapsulates an array and an offset within the specified array.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public struct ArrayWithOffset\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public Structure ArrayWithOffset\n  inheritedMembers:\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: ArrayWithOffset\n- uid: System.Runtime.InteropServices.ArrayWithOffset.#ctor(System.Object,System.Int32)\n  commentId: M:System.Runtime.InteropServices.ArrayWithOffset.#ctor(System.Object,System.Int32)\n  id: '#ctor(System.Object,System.Int32)'\n  parent: System.Runtime.InteropServices.ArrayWithOffset\n  langs:\n  - csharp\n  - vb\n  name: ArrayWithOffset(Object, Int32)\n  fullName: System.Runtime.InteropServices.ArrayWithOffset.ArrayWithOffset(System.Object, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/ArrayWithOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Runtime/InteropServices/ArrayWithOffset.cs\n    startLine: 19\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public ArrayWithOffset(object array, int offset)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Sub New(array As Object, offset As Integer)\n    parameters:\n    - id: array\n      type: System.Object\n      description: \"\\n<p>A managed array. </p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset in bytes, of the element to be passed through platform invoke. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The array is larger than 2 gigabytes (GB).</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ArrayWithOffset.ArrayWithOffset(Object, Int32)\n- uid: System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Object)\n  commentId: M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Runtime.InteropServices.ArrayWithOffset\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/ArrayWithOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Runtime/InteropServices/ArrayWithOffset.cs\n    startLine: 43\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Indicates whether the specified object matches the current <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>Object to compare with this instance. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the object matches this <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: ArrayWithOffset.Equals(Object)\n- uid: System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Runtime.InteropServices.ArrayWithOffset)\n  commentId: M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Runtime.InteropServices.ArrayWithOffset)\n  id: Equals(System.Runtime.InteropServices.ArrayWithOffset)\n  parent: System.Runtime.InteropServices.ArrayWithOffset\n  langs:\n  - csharp\n  - vb\n  name: Equals(ArrayWithOffset)\n  fullName: System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Runtime.InteropServices.ArrayWithOffset)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/ArrayWithOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Runtime/InteropServices/ArrayWithOffset.cs\n    startLine: 51\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Indicates whether the specified <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object matches the current instance.</p>\\n\"\n  syntax:\n    content: public bool Equals(ArrayWithOffset obj)\n    content.vb: Public Function Equals(obj As ArrayWithOffset) As Boolean\n    parameters:\n    - id: obj\n      type: System.Runtime.InteropServices.ArrayWithOffset\n      description: \"\\n<p>An <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to compare with this instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object matches the current instance; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ArrayWithOffset.Equals(ArrayWithOffset)\n- uid: System.Runtime.InteropServices.ArrayWithOffset.GetArray\n  commentId: M:System.Runtime.InteropServices.ArrayWithOffset.GetArray\n  id: GetArray\n  parent: System.Runtime.InteropServices.ArrayWithOffset\n  langs:\n  - csharp\n  - vb\n  name: GetArray()\n  fullName: System.Runtime.InteropServices.ArrayWithOffset.GetArray()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/ArrayWithOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetArray\n    path: src/mscorlib/src/System/Runtime/InteropServices/ArrayWithOffset.cs\n    startLine: 28\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Returns the managed array referenced by this <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public object GetArray()\n    content.vb: Public Function GetArray As Object\n    return:\n      type: System.Object\n      description: \"\\n<p>The managed array this instance references.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ArrayWithOffset.GetArray()\n- uid: System.Runtime.InteropServices.ArrayWithOffset.GetHashCode\n  commentId: M:System.Runtime.InteropServices.ArrayWithOffset.GetHashCode\n  id: GetHashCode\n  parent: System.Runtime.InteropServices.ArrayWithOffset\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Runtime.InteropServices.ArrayWithOffset.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/ArrayWithOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Runtime/InteropServices/ArrayWithOffset.cs\n    startLine: 38\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Returns a hash code for this value type.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The hash code for this instance.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: ArrayWithOffset.GetHashCode()\n- uid: System.Runtime.InteropServices.ArrayWithOffset.GetOffset\n  commentId: M:System.Runtime.InteropServices.ArrayWithOffset.GetOffset\n  id: GetOffset\n  parent: System.Runtime.InteropServices.ArrayWithOffset\n  langs:\n  - csharp\n  - vb\n  name: GetOffset()\n  fullName: System.Runtime.InteropServices.ArrayWithOffset.GetOffset()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/ArrayWithOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetOffset\n    path: src/mscorlib/src/System/Runtime/InteropServices/ArrayWithOffset.cs\n    startLine: 33\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Returns the offset provided when this <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> was constructed.</p>\\n\"\n  syntax:\n    content: public int GetOffset()\n    content.vb: Public Function GetOffset As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The offset for this instance.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ArrayWithOffset.GetOffset()\n- uid: System.Runtime.InteropServices.ArrayWithOffset.op_Equality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)\n  commentId: M:System.Runtime.InteropServices.ArrayWithOffset.op_Equality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)\n  id: op_Equality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)\n  parent: System.Runtime.InteropServices.ArrayWithOffset\n  langs:\n  - csharp\n  - vb\n  name: Equality(ArrayWithOffset, ArrayWithOffset)\n  fullName: System.Runtime.InteropServices.ArrayWithOffset.Equality(System.Runtime.InteropServices.ArrayWithOffset, System.Runtime.InteropServices.ArrayWithOffset)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/ArrayWithOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Equality\n    path: src/mscorlib/src/System/Runtime/InteropServices/ArrayWithOffset.cs\n    startLine: 56\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Determines whether two specified <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects have the same value.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(ArrayWithOffset a, ArrayWithOffset b)\n    content.vb: Public Shared Operator =(a As ArrayWithOffset, b As ArrayWithOffset) As Boolean\n    parameters:\n    - id: a\n      type: System.Runtime.InteropServices.ArrayWithOffset\n      description: \"\\n<p>An <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to compare with the <em>b</em> parameter. </p>\\n\"\n    - id: b\n      type: System.Runtime.InteropServices.ArrayWithOffset\n      description: \"\\n<p>An <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to compare with the <em>a</em> parameter.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the value of <em>a</em> is the same as the value of <em>b</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ArrayWithOffset.Equality(ArrayWithOffset, ArrayWithOffset)\n- uid: System.Runtime.InteropServices.ArrayWithOffset.op_Inequality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)\n  commentId: M:System.Runtime.InteropServices.ArrayWithOffset.op_Inequality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)\n  id: op_Inequality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)\n  parent: System.Runtime.InteropServices.ArrayWithOffset\n  langs:\n  - csharp\n  - vb\n  name: Inequality(ArrayWithOffset, ArrayWithOffset)\n  fullName: System.Runtime.InteropServices.ArrayWithOffset.Inequality(System.Runtime.InteropServices.ArrayWithOffset, System.Runtime.InteropServices.ArrayWithOffset)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/ArrayWithOffset.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Inequality\n    path: src/mscorlib/src/System/Runtime/InteropServices/ArrayWithOffset.cs\n    startLine: 61\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Determines whether two specified <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects no not have the same value.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(ArrayWithOffset a, ArrayWithOffset b)\n    content.vb: Public Shared Operator <>(a As ArrayWithOffset, b As ArrayWithOffset) As Boolean\n    parameters:\n    - id: a\n      type: System.Runtime.InteropServices.ArrayWithOffset\n      description: \"\\n<p>An <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to compare with the <em>b</em> parameter. </p>\\n\"\n    - id: b\n      type: System.Runtime.InteropServices.ArrayWithOffset\n      description: \"\\n<p>An <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to compare with the <em>a</em> parameter.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the value of <em>a</em> is not the same as the value of <em>b</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ArrayWithOffset.Inequality(ArrayWithOffset, ArrayWithOffset)\nreferences:\n- uid: System.Runtime.InteropServices\n  isExternal: false\n  name: System.Runtime.InteropServices\n  fullName: System.Runtime.InteropServices\n  nameWithType: System.Runtime.InteropServices\n  commentId: N:System.Runtime.InteropServices\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Runtime.InteropServices.ArrayWithOffset\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: ArrayWithOffset\n  fullName: System.Runtime.InteropServices.ArrayWithOffset\n  nameWithType: ArrayWithOffset\n  commentId: T:System.Runtime.InteropServices.ArrayWithOffset\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}