{"nodes":[{"pos":[2957,2968],"content":"RegexRunner","needQuote":true,"nodes":[{"content":"RegexRunner","pos":[0,11]}]},{"pos":[4420,4428],"content":"runcrawl","needQuote":true,"nodes":[{"content":"runcrawl","pos":[0,8]}]},{"pos":[5649,5660],"content":"runcrawlpos","needQuote":true,"nodes":[{"content":"runcrawlpos","pos":[0,11]}]},{"pos":[6881,6889],"content":"runmatch","needQuote":true,"nodes":[{"content":"runmatch","pos":[0,8]}]},{"pos":[8119,8127],"content":"runregex","needQuote":true,"nodes":[{"content":"runregex","pos":[0,8]}]},{"pos":[9357,9365],"content":"runstack","needQuote":true,"nodes":[{"content":"runstack","pos":[0,8]}]},{"pos":[10586,10597],"content":"runstackpos","needQuote":true,"nodes":[{"content":"runstackpos","pos":[0,11]}]},{"pos":[11815,11822],"content":"runtext","needQuote":true,"nodes":[{"content":"runtext","pos":[0,7]}]},{"pos":[13032,13042],"content":"runtextbeg","needQuote":true,"nodes":[{"content":"runtextbeg","pos":[0,10]}]},{"pos":[14264,14274],"content":"runtextend","needQuote":true,"nodes":[{"content":"runtextend","pos":[0,10]}]},{"pos":[15496,15506],"content":"runtextpos","needQuote":true,"nodes":[{"content":"runtextpos","pos":[0,10]}]},{"pos":[16734,16746],"content":"runtextstart","needQuote":true,"nodes":[{"content":"runtextstart","pos":[0,12]}]},{"pos":[17972,17980],"content":"runtrack","needQuote":true,"nodes":[{"content":"runtrack","pos":[0,8]}]},{"pos":[19207,19220],"content":"runtrackcount","needQuote":true,"nodes":[{"content":"runtrackcount","pos":[0,13]}]},{"pos":[20460,20471],"content":"runtrackpos","needQuote":true,"nodes":[{"content":"runtrackpos","pos":[0,11]}]},{"pos":[21685,21698],"content":"RegexRunner()","needQuote":true,"nodes":[{"content":"RegexRunner()","pos":[0,13]}]},{"pos":[22876,22904],"content":"Capture(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"Capture(Int32, Int32, Int32)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;A capture number.","pos":[23939,23961],"source":"\\n<p>A capture number."},{"content":"&lt;/p&gt;\\n","pos":[23962,23968],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting position of the capture.","pos":[24031,24073],"source":"\\n<p>The starting position of the capture."},{"content":"&lt;/p&gt;\\n","pos":[24074,24080],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The ending position of the capture.","pos":[24141,24181],"source":"\\n<p>The ending position of the capture."},{"content":"&lt;/p&gt;\\n","pos":[24182,24188],"source":" </p>\\n"},{"pos":[24630,24655],"content":"CharInClass(Char, String)","needQuote":true,"nodes":[{"content":"CharInClass(Char, String)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;A character to test.&lt;/p&gt;\\n","pos":[25747,25778],"source":"\\n<p>A character to test.</p>\\n"},{"content":"\\n&lt;p&gt;The internal name of a character class.&lt;/p&gt;\\n","pos":[25846,25896],"source":"\\n<p>The internal name of a character class.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;ch&lt;/em&gt; parameter is in the character class specified by the &lt;em&gt;charClass&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[25957,26093],"source":"\\n<p>\\n<strong>true</strong> if the <em>ch</em> parameter is in the character class specified by the <em>charClass</em> parameter.</p>\\n"},{"pos":[26590,26621],"content":"CharInSet(Char, String, String)","needQuote":true,"nodes":[{"content":"CharInSet(Char, String, String)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;A character.","pos":[27690,27707],"source":"\\n<p>A character."},{"content":"&lt;/p&gt;\\n","pos":[27708,27714],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character set.","pos":[27776,27799],"source":"\\n<p>The character set."},{"content":"&lt;/p&gt;\\n","pos":[27800,27806],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character category.","pos":[27873,27901],"source":"\\n<p>The character category."},{"content":"&lt;/p&gt;\\n","pos":[27902,27908],"source":" </p>\\n"},{"pos":[28452,28466],"content":"CheckTimeout()","needQuote":true,"nodes":[{"content":"CheckTimeout()","pos":[0,14]}]},{"pos":[29688,29700],"content":"Crawl(Int32)","needQuote":true,"nodes":[{"content":"Crawl(Int32)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A number to save.","pos":[30630,30652],"source":"\\n<p>A number to save."},{"content":"&lt;/p&gt;\\n","pos":[30653,30659],"source":" </p>\\n"},{"pos":[30995,31005],"content":"Crawlpos()","needQuote":true,"nodes":[{"content":"Crawlpos()","pos":[0,10]}]},{"pos":[32350,32363],"content":"DoubleCrawl()","needQuote":true,"nodes":[{"content":"DoubleCrawl()","pos":[0,13]}]},{"pos":[33557,33570],"content":"DoubleStack()","needQuote":true,"nodes":[{"content":"DoubleStack()","pos":[0,13]}]},{"pos":[34764,34777],"content":"DoubleTrack()","needQuote":true,"nodes":[{"content":"DoubleTrack()","pos":[0,13]}]},{"pos":[35977,35992],"content":"EnsureStorage()","needQuote":true,"nodes":[{"content":"EnsureStorage()","pos":[0,15]}]},{"pos":[37202,37217],"content":"FindFirstChar()","needQuote":true,"nodes":[{"content":"FindFirstChar()","pos":[0,15]}]},{"pos":[38617,38621],"content":"Go()","needQuote":true,"nodes":[{"content":"Go()","pos":[0,4]}]},{"pos":[39831,39847],"content":"InitTrackCount()","needQuote":true,"nodes":[{"content":"InitTrackCount()","pos":[0,16]}]},{"pos":[41225,41256],"content":"IsBoundary(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"IsBoundary(Int32, Int32, Int32)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The possible boundary position.","pos":[42328,42364],"source":"\\n<p>The possible boundary position."},{"content":"&lt;/p&gt;\\n","pos":[42365,42371],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting position.","pos":[42437,42464],"source":"\\n<p>The starting position."},{"content":"&lt;/p&gt;\\n","pos":[42465,42471],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;&lt;/p&gt;\\n&lt;p&gt;The ending position.","pos":[42535,42569],"source":"\\n<p></p>\\n<p>The ending position."},{"content":"&lt;/p&gt;\\n","pos":[42570,42576],"source":" </p>\\n"},{"pos":[43224,43259],"content":"IsECMABoundary(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"IsECMABoundary(Int32, Int32, Int32)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The possible ECMA boundary position.","pos":[44347,44388],"source":"\\n<p>The possible ECMA boundary position."},{"content":"&lt;/p&gt;\\n","pos":[44389,44395],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting position.","pos":[44461,44488],"source":"\\n<p>The starting position."},{"content":"&lt;/p&gt;\\n","pos":[44489,44495],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;&lt;/p&gt;\\n&lt;p&gt;The ending position.","pos":[44559,44593],"source":"\\n<p></p>\\n<p>The ending position."},{"content":"&lt;/p&gt;\\n","pos":[44594,44600],"source":" </p>\\n"},{"pos":[45159,45175],"content":"IsMatched(Int32)","needQuote":true,"nodes":[{"content":"IsMatched(Int32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The capture number.","pos":[46143,46167],"source":"\\n<p>The capture number."},{"content":"&lt;/p&gt;\\n","pos":[46168,46174],"source":" </p>\\n"},{"pos":[46717,46734],"content":"MatchIndex(Int32)","needQuote":true,"nodes":[{"content":"MatchIndex(Int32)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The capture number.","pos":[47705,47729],"source":"\\n<p>The capture number."},{"content":"&lt;/p&gt;\\n","pos":[47730,47736],"source":" </p>\\n"},{"pos":[48279,48297],"content":"MatchLength(Int32)","needQuote":true,"nodes":[{"content":"MatchLength(Int32)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The capture number.","pos":[49272,49296],"source":"\\n<p>The capture number."},{"content":"&lt;/p&gt;\\n","pos":[49297,49303],"source":" </p>\\n"},{"pos":[49796,49806],"content":"Popcrawl()","needQuote":true,"nodes":[{"content":"Popcrawl()","pos":[0,10]}]},{"pos":[51487,51543],"content":"Scan(Regex, String, Int32, Int32, Int32, Int32, Boolean)","needQuote":true,"nodes":[{"content":"Scan(Regex, String, Int32, Int32, Int32, Int32, Boolean)","pos":[0,56]}]},{"content":"\\n&lt;p&gt;An instance of the regular expression engine.","pos":[52825,52875],"source":"\\n<p>An instance of the regular expression engine."},{"content":"&lt;/p&gt;\\n","pos":[52876,52882],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The text to scan for a pattern match.","pos":[52945,52987],"source":"\\n<p>The text to scan for a pattern match."},{"content":"&lt;/p&gt;\\n","pos":[52988,52994],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based starting position in &lt;em&gt;text&lt;/em&gt; at which the regular expression engine scans for a match.","pos":[53059,53171],"source":"\\n<p>The zero-based starting position in <em>text</em> at which the regular expression engine scans for a match."},{"content":"&lt;/p&gt;\\n","pos":[53173,53179],"source":"  </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based ending position in &lt;em&gt;text&lt;/em&gt; at which the regular expression engine scans for a match.","pos":[53244,53354],"source":"\\n<p>The zero-based ending position in <em>text</em> at which the regular expression engine scans for a match."},{"content":"&lt;/p&gt;\\n","pos":[53356,53362],"source":"  </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based starting position to scan for this match.","pos":[53429,53490],"source":"\\n<p>The zero-based starting position to scan for this match."},{"content":"&lt;/p&gt;\\n","pos":[53492,53498],"source":"  </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters in the previous match.","pos":[53563,53615],"source":"\\n<p>The number of characters in the previous match."},{"content":"&lt;/p&gt;\\n","pos":[53616,53622],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to search for a match in quick mode; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[53687,53787],"source":"\\n<p>\\n<strong>true</strong> to search for a match in quick mode; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[53788,53794],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A match.&lt;/p&gt;\\n","pos":[53877,53896],"source":"\\n<p>A match.</p>\\n"},{"pos":[54669,54735],"content":"Scan(Regex, String, Int32, Int32, Int32, Int32, Boolean, TimeSpan)","needQuote":true,"nodes":[{"content":"Scan(Regex, String, Int32, Int32, Int32, Int32, Boolean, TimeSpan)","pos":[0,66]}]},{"content":"\\n&lt;p&gt;An instance of the regular expression engine.","pos":[56073,56123],"source":"\\n<p>An instance of the regular expression engine."},{"content":"&lt;/p&gt;\\n","pos":[56124,56130],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The text to scan for a pattern match.","pos":[56193,56235],"source":"\\n<p>The text to scan for a pattern match."},{"content":"&lt;/p&gt;\\n","pos":[56236,56242],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based starting position in &lt;em&gt;text&lt;/em&gt; at which the regular expression engine scans for a match.","pos":[56307,56419],"source":"\\n<p>The zero-based starting position in <em>text</em> at which the regular expression engine scans for a match."},{"content":"&lt;/p&gt;\\n","pos":[56421,56427],"source":"  </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based ending position in &lt;em&gt;text&lt;/em&gt; at which the regular expression engine scans for a match.","pos":[56492,56602],"source":"\\n<p>The zero-based ending position in <em>text</em> at which the regular expression engine scans for a match."},{"content":"&lt;/p&gt;\\n","pos":[56604,56610],"source":"  </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based starting position to scan for this match.","pos":[56677,56738],"source":"\\n<p>The zero-based starting position to scan for this match."},{"content":"&lt;/p&gt;\\n","pos":[56740,56746],"source":"  </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters in the previous match.","pos":[56811,56863],"source":"\\n<p>The number of characters in the previous match."},{"content":"&lt;/p&gt;\\n","pos":[56864,56870],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to search for a match in quick mode; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[56935,57035],"source":"\\n<p>\\n<strong>true</strong> to search for a match in quick mode; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[57036,57042],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The timeout interval.","pos":[57110,57136],"source":"\\n<p>The timeout interval."},{"content":"&lt;/p&gt;\\n","pos":[57137,57143],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A match.","pos":[57226,57239],"source":"\\n<p>A match."},{"content":"&lt;/p&gt;\\n","pos":[57240,57246],"source":" </p>\\n"},{"pos":[57816,57859],"content":"TransferCapture(Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"TransferCapture(Int32, Int32, Int32, Int32)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;A capture number.","pos":[58975,58997],"source":"\\n<p>A capture number."},{"content":"&lt;/p&gt;\\n","pos":[58998,59004],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A saved capture number.&lt;/p&gt;\\n","pos":[59070,59104],"source":"\\n<p>A saved capture number.</p>\\n"},{"content":"\\n&lt;p&gt;The starting position.","pos":[59167,59194],"source":"\\n<p>The starting position."},{"content":"&lt;/p&gt;\\n","pos":[59195,59201],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The ending position.","pos":[59262,59287],"source":"\\n<p>The ending position."},{"content":"&lt;/p&gt;\\n","pos":[59288,59294],"source":" </p>\\n"},{"pos":[59664,59675],"content":"Uncapture()","needQuote":true,"nodes":[{"content":"Uncapture()","pos":[0,11]}]},{"pos":[60698,60728],"content":"System.Text.RegularExpressions","needQuote":true,"nodes":[{"content":"System.Text.RegularExpressions","pos":[0,30]}]},{"pos":[60931,60937],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[61097,61107],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[61202,61210],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[61279,61280],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61307,61308],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61378,61386],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[61455,61456],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61483,61484],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61667,61681],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[61800,61806],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[61873,61874],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61924,61930],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[61990,61991],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62074,62080],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[62147,62148],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62198,62204],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[62264,62265],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62479,62501],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[62649,62655],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[62722,62723],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62773,62779],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[62840,62841]},{"pos":[62896,62902],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[62962,62963],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63060,63066],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[63133,63134],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63184,63190],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[63251,63252]},{"pos":[63307,63313],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[63373,63374],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63619,63650],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[63816,63831],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[63907,63908],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63958,63964],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[64025,64026]},{"pos":[64081,64087],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[64147,64148],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64254,64269],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[64345,64346],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64396,64402],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[64463,64464]},{"pos":[64519,64525],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[64585,64586],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64816,64829],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[64930,64941],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[65013,65014],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65041,65042],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65115,65126],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[65198,65199],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65226,65227],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65402,65411],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[65504,65511],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[65579,65580],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65607,65608],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65677,65684],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[65752,65753],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65780,65781],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65956,65973],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[66082,66097],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[66173,66174],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66201,66202],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66279,66294],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[66370,66371],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66398,66399],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66544,66550],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[66645,66652],"content":"Int32[]","needQuote":true,"nodes":[{"content":"Int32[]","pos":[0,7]}]},{"pos":[66776,66781],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"[]","pos":[66841,66843]},{"pos":[66907,66912],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[66971,66973],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[67107,67112],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[67301,67306],"content":"Match","needQuote":true,"nodes":[{"content":"Match","pos":[0,5]}]},{"pos":[67543,67548],"content":"Regex","needQuote":true,"nodes":[{"content":"Regex","pos":[0,5]}]},{"pos":[67738,67744],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[67887,67891],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[68031,68038],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[68188,68196],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]}],"content":"items:\n- uid: System.Text.RegularExpressions.RegexRunner\n  commentId: T:System.Text.RegularExpressions.RegexRunner\n  id: RegexRunner\n  parent: System.Text.RegularExpressions\n  children:\n  - System.Text.RegularExpressions.RegexRunner.#ctor\n  - System.Text.RegularExpressions.RegexRunner.Capture(System.Int32,System.Int32,System.Int32)\n  - System.Text.RegularExpressions.RegexRunner.CharInClass(System.Char,System.String)\n  - System.Text.RegularExpressions.RegexRunner.CharInSet(System.Char,System.String,System.String)\n  - System.Text.RegularExpressions.RegexRunner.CheckTimeout\n  - System.Text.RegularExpressions.RegexRunner.Crawl(System.Int32)\n  - System.Text.RegularExpressions.RegexRunner.Crawlpos\n  - System.Text.RegularExpressions.RegexRunner.DoubleCrawl\n  - System.Text.RegularExpressions.RegexRunner.DoubleStack\n  - System.Text.RegularExpressions.RegexRunner.DoubleTrack\n  - System.Text.RegularExpressions.RegexRunner.EnsureStorage\n  - System.Text.RegularExpressions.RegexRunner.FindFirstChar\n  - System.Text.RegularExpressions.RegexRunner.Go\n  - System.Text.RegularExpressions.RegexRunner.InitTrackCount\n  - System.Text.RegularExpressions.RegexRunner.IsBoundary(System.Int32,System.Int32,System.Int32)\n  - System.Text.RegularExpressions.RegexRunner.IsECMABoundary(System.Int32,System.Int32,System.Int32)\n  - System.Text.RegularExpressions.RegexRunner.IsMatched(System.Int32)\n  - System.Text.RegularExpressions.RegexRunner.MatchIndex(System.Int32)\n  - System.Text.RegularExpressions.RegexRunner.MatchLength(System.Int32)\n  - System.Text.RegularExpressions.RegexRunner.Popcrawl\n  - System.Text.RegularExpressions.RegexRunner.runcrawl\n  - System.Text.RegularExpressions.RegexRunner.runcrawlpos\n  - System.Text.RegularExpressions.RegexRunner.runmatch\n  - System.Text.RegularExpressions.RegexRunner.runregex\n  - System.Text.RegularExpressions.RegexRunner.runstack\n  - System.Text.RegularExpressions.RegexRunner.runstackpos\n  - System.Text.RegularExpressions.RegexRunner.runtext\n  - System.Text.RegularExpressions.RegexRunner.runtextbeg\n  - System.Text.RegularExpressions.RegexRunner.runtextend\n  - System.Text.RegularExpressions.RegexRunner.runtextpos\n  - System.Text.RegularExpressions.RegexRunner.runtextstart\n  - System.Text.RegularExpressions.RegexRunner.runtrack\n  - System.Text.RegularExpressions.RegexRunner.runtrackcount\n  - System.Text.RegularExpressions.RegexRunner.runtrackpos\n  - System.Text.RegularExpressions.RegexRunner.Scan(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)\n  - System.Text.RegularExpressions.RegexRunner.Scan(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.TimeSpan)\n  - System.Text.RegularExpressions.RegexRunner.TransferCapture(System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Text.RegularExpressions.RegexRunner.Uncapture\n  langs:\n  - csharp\n  - vb\n  name: RegexRunner\n  fullName: System.Text.RegularExpressions.RegexRunner\n  type: Class\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RegexRunner\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 157\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>The <xref href=\\\"System.Text.RegularExpressions.RegexRunner\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class is the base class for compiled regular expressions.</p>\\n\"\n  syntax:\n    content: public abstract class RegexRunner\n    content.vb: Public MustInherit Class RegexRunner\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: RegexRunner\n- uid: System.Text.RegularExpressions.RegexRunner.runcrawl\n  commentId: F:System.Text.RegularExpressions.RegexRunner.runcrawl\n  id: runcrawl\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: runcrawl\n  fullName: System.Text.RegularExpressions.RegexRunner.runcrawl\n  type: Field\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: runcrawl\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 160\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected int[] runcrawl\n    content.vb: Protected runcrawl As Integer()\n    return:\n      type: System.Int32[]\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.runcrawl\n- uid: System.Text.RegularExpressions.RegexRunner.runcrawlpos\n  commentId: F:System.Text.RegularExpressions.RegexRunner.runcrawlpos\n  id: runcrawlpos\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: runcrawlpos\n  fullName: System.Text.RegularExpressions.RegexRunner.runcrawlpos\n  type: Field\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: runcrawlpos\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 161\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected int runcrawlpos\n    content.vb: Protected runcrawlpos As Integer\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.runcrawlpos\n- uid: System.Text.RegularExpressions.RegexRunner.runmatch\n  commentId: F:System.Text.RegularExpressions.RegexRunner.runmatch\n  id: runmatch\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: runmatch\n  fullName: System.Text.RegularExpressions.RegexRunner.runmatch\n  type: Field\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: runmatch\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 162\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected Match runmatch\n    content.vb: Protected runmatch As Match\n    return:\n      type: System.Text.RegularExpressions.Match\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.runmatch\n- uid: System.Text.RegularExpressions.RegexRunner.runregex\n  commentId: F:System.Text.RegularExpressions.RegexRunner.runregex\n  id: runregex\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: runregex\n  fullName: System.Text.RegularExpressions.RegexRunner.runregex\n  type: Field\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: runregex\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 163\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected Regex runregex\n    content.vb: Protected runregex As Regex\n    return:\n      type: System.Text.RegularExpressions.Regex\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.runregex\n- uid: System.Text.RegularExpressions.RegexRunner.runstack\n  commentId: F:System.Text.RegularExpressions.RegexRunner.runstack\n  id: runstack\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: runstack\n  fullName: System.Text.RegularExpressions.RegexRunner.runstack\n  type: Field\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: runstack\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 164\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected int[] runstack\n    content.vb: Protected runstack As Integer()\n    return:\n      type: System.Int32[]\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.runstack\n- uid: System.Text.RegularExpressions.RegexRunner.runstackpos\n  commentId: F:System.Text.RegularExpressions.RegexRunner.runstackpos\n  id: runstackpos\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: runstackpos\n  fullName: System.Text.RegularExpressions.RegexRunner.runstackpos\n  type: Field\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: runstackpos\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 165\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected int runstackpos\n    content.vb: Protected runstackpos As Integer\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.runstackpos\n- uid: System.Text.RegularExpressions.RegexRunner.runtext\n  commentId: F:System.Text.RegularExpressions.RegexRunner.runtext\n  id: runtext\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: runtext\n  fullName: System.Text.RegularExpressions.RegexRunner.runtext\n  type: Field\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: runtext\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 166\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected string runtext\n    content.vb: Protected runtext As String\n    return:\n      type: System.String\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.runtext\n- uid: System.Text.RegularExpressions.RegexRunner.runtextbeg\n  commentId: F:System.Text.RegularExpressions.RegexRunner.runtextbeg\n  id: runtextbeg\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: runtextbeg\n  fullName: System.Text.RegularExpressions.RegexRunner.runtextbeg\n  type: Field\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: runtextbeg\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 167\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected int runtextbeg\n    content.vb: Protected runtextbeg As Integer\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.runtextbeg\n- uid: System.Text.RegularExpressions.RegexRunner.runtextend\n  commentId: F:System.Text.RegularExpressions.RegexRunner.runtextend\n  id: runtextend\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: runtextend\n  fullName: System.Text.RegularExpressions.RegexRunner.runtextend\n  type: Field\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: runtextend\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 168\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected int runtextend\n    content.vb: Protected runtextend As Integer\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.runtextend\n- uid: System.Text.RegularExpressions.RegexRunner.runtextpos\n  commentId: F:System.Text.RegularExpressions.RegexRunner.runtextpos\n  id: runtextpos\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: runtextpos\n  fullName: System.Text.RegularExpressions.RegexRunner.runtextpos\n  type: Field\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: runtextpos\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 169\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected int runtextpos\n    content.vb: Protected runtextpos As Integer\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.runtextpos\n- uid: System.Text.RegularExpressions.RegexRunner.runtextstart\n  commentId: F:System.Text.RegularExpressions.RegexRunner.runtextstart\n  id: runtextstart\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: runtextstart\n  fullName: System.Text.RegularExpressions.RegexRunner.runtextstart\n  type: Field\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: runtextstart\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 170\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected int runtextstart\n    content.vb: Protected runtextstart As Integer\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.runtextstart\n- uid: System.Text.RegularExpressions.RegexRunner.runtrack\n  commentId: F:System.Text.RegularExpressions.RegexRunner.runtrack\n  id: runtrack\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: runtrack\n  fullName: System.Text.RegularExpressions.RegexRunner.runtrack\n  type: Field\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: runtrack\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 171\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected int[] runtrack\n    content.vb: Protected runtrack As Integer()\n    return:\n      type: System.Int32[]\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.runtrack\n- uid: System.Text.RegularExpressions.RegexRunner.runtrackcount\n  commentId: F:System.Text.RegularExpressions.RegexRunner.runtrackcount\n  id: runtrackcount\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: runtrackcount\n  fullName: System.Text.RegularExpressions.RegexRunner.runtrackcount\n  type: Field\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: runtrackcount\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 172\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected int runtrackcount\n    content.vb: Protected runtrackcount As Integer\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.runtrackcount\n- uid: System.Text.RegularExpressions.RegexRunner.runtrackpos\n  commentId: F:System.Text.RegularExpressions.RegexRunner.runtrackpos\n  id: runtrackpos\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: runtrackpos\n  fullName: System.Text.RegularExpressions.RegexRunner.runtrackpos\n  type: Field\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: runtrackpos\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 173\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected int runtrackpos\n    content.vb: Protected runtrackpos As Integer\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.runtrackpos\n- uid: System.Text.RegularExpressions.RegexRunner.#ctor\n  commentId: M:System.Text.RegularExpressions.RegexRunner.#ctor\n  id: '#ctor'\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: RegexRunner()\n  fullName: System.Text.RegularExpressions.RegexRunner.RegexRunner()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 174\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.RegularExpressions.RegexRunner\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. </p>\\n\"\n  syntax:\n    content: protected RegexRunner()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.RegexRunner()\n- uid: System.Text.RegularExpressions.RegexRunner.Capture(System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Text.RegularExpressions.RegexRunner.Capture(System.Int32,System.Int32,System.Int32)\n  id: Capture(System.Int32,System.Int32,System.Int32)\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: Capture(Int32, Int32, Int32)\n  fullName: System.Text.RegularExpressions.RegexRunner.Capture(System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Capture\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 175\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected void Capture(int capnum, int start, int end)\n    content.vb: Protected Sub Capture(capnum As Integer, start As Integer, end As Integer)\n    parameters:\n    - id: capnum\n      type: System.Int32\n      description: \"\\n<p>A capture number. </p>\\n\"\n    - id: start\n      type: System.Int32\n      description: \"\\n<p>The starting position of the capture. </p>\\n\"\n    - id: end\n      type: System.Int32\n      description: \"\\n<p>The ending position of the capture. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.Capture(Int32, Int32, Int32)\n- uid: System.Text.RegularExpressions.RegexRunner.CharInClass(System.Char,System.String)\n  commentId: M:System.Text.RegularExpressions.RegexRunner.CharInClass(System.Char,System.String)\n  id: CharInClass(System.Char,System.String)\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: CharInClass(Char, String)\n  fullName: System.Text.RegularExpressions.RegexRunner.CharInClass(System.Char, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CharInClass\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 176\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. Determines whether a character is in a character class.</p>\\n\"\n  syntax:\n    content: protected static bool CharInClass(char ch, string charClass)\n    content.vb: Protected Shared Function CharInClass(ch As Char, charClass As String) As Boolean\n    parameters:\n    - id: ch\n      type: System.Char\n      description: \"\\n<p>A character to test.</p>\\n\"\n    - id: charClass\n      type: System.String\n      description: \"\\n<p>The internal name of a character class.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>ch</em> parameter is in the character class specified by the <em>charClass</em> parameter.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - static\n  modifiers.vb:\n  - Protected\n  - Shared\n  nameWithType: RegexRunner.CharInClass(Char, String)\n- uid: System.Text.RegularExpressions.RegexRunner.CharInSet(System.Char,System.String,System.String)\n  commentId: M:System.Text.RegularExpressions.RegexRunner.CharInSet(System.Char,System.String,System.String)\n  id: CharInSet(System.Char,System.String,System.String)\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: CharInSet(Char, String, String)\n  fullName: System.Text.RegularExpressions.RegexRunner.CharInSet(System.Char, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CharInSet\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 177\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected static bool CharInSet(char ch, string set, string category)\n    content.vb: Protected Shared Function CharInSet(ch As Char, set As String, category As String) As Boolean\n    parameters:\n    - id: ch\n      type: System.Char\n      description: \"\\n<p>A character. </p>\\n\"\n    - id: set\n      type: System.String\n      description: \"\\n<p>The character set. </p>\\n\"\n    - id: category\n      type: System.String\n      description: \"\\n<p>The character category. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - static\n  modifiers.vb:\n  - Protected\n  - Shared\n  nameWithType: RegexRunner.CharInSet(Char, String, String)\n- uid: System.Text.RegularExpressions.RegexRunner.CheckTimeout\n  commentId: M:System.Text.RegularExpressions.RegexRunner.CheckTimeout\n  id: CheckTimeout\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: CheckTimeout()\n  fullName: System.Text.RegularExpressions.RegexRunner.CheckTimeout()\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CheckTimeout\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 178\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: protected void CheckTimeout()\n    content.vb: Protected Sub CheckTimeout\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.CheckTimeout()\n- uid: System.Text.RegularExpressions.RegexRunner.Crawl(System.Int32)\n  commentId: M:System.Text.RegularExpressions.RegexRunner.Crawl(System.Int32)\n  id: Crawl(System.Int32)\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: Crawl(Int32)\n  fullName: System.Text.RegularExpressions.RegexRunner.Crawl(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Crawl\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 179\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected void Crawl(int i)\n    content.vb: Protected Sub Crawl(i As Integer)\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>A number to save. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.Crawl(Int32)\n- uid: System.Text.RegularExpressions.RegexRunner.Crawlpos\n  commentId: M:System.Text.RegularExpressions.RegexRunner.Crawlpos\n  id: Crawlpos\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: Crawlpos()\n  fullName: System.Text.RegularExpressions.RegexRunner.Crawlpos()\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Crawlpos\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 180\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected int Crawlpos()\n    content.vb: Protected Function Crawlpos As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>Returns <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.Crawlpos()\n- uid: System.Text.RegularExpressions.RegexRunner.DoubleCrawl\n  commentId: M:System.Text.RegularExpressions.RegexRunner.DoubleCrawl\n  id: DoubleCrawl\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: DoubleCrawl()\n  fullName: System.Text.RegularExpressions.RegexRunner.DoubleCrawl()\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DoubleCrawl\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 181\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected void DoubleCrawl()\n    content.vb: Protected Sub DoubleCrawl\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.DoubleCrawl()\n- uid: System.Text.RegularExpressions.RegexRunner.DoubleStack\n  commentId: M:System.Text.RegularExpressions.RegexRunner.DoubleStack\n  id: DoubleStack\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: DoubleStack()\n  fullName: System.Text.RegularExpressions.RegexRunner.DoubleStack()\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DoubleStack\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 182\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected void DoubleStack()\n    content.vb: Protected Sub DoubleStack\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.DoubleStack()\n- uid: System.Text.RegularExpressions.RegexRunner.DoubleTrack\n  commentId: M:System.Text.RegularExpressions.RegexRunner.DoubleTrack\n  id: DoubleTrack\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: DoubleTrack()\n  fullName: System.Text.RegularExpressions.RegexRunner.DoubleTrack()\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DoubleTrack\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 183\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected void DoubleTrack()\n    content.vb: Protected Sub DoubleTrack\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.DoubleTrack()\n- uid: System.Text.RegularExpressions.RegexRunner.EnsureStorage\n  commentId: M:System.Text.RegularExpressions.RegexRunner.EnsureStorage\n  id: EnsureStorage\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: EnsureStorage()\n  fullName: System.Text.RegularExpressions.RegexRunner.EnsureStorage()\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EnsureStorage\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 184\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected void EnsureStorage()\n    content.vb: Protected Sub EnsureStorage\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.EnsureStorage()\n- uid: System.Text.RegularExpressions.RegexRunner.FindFirstChar\n  commentId: M:System.Text.RegularExpressions.RegexRunner.FindFirstChar\n  id: FindFirstChar\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: FindFirstChar()\n  fullName: System.Text.RegularExpressions.RegexRunner.FindFirstChar()\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FindFirstChar\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 185\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected abstract bool FindFirstChar()\n    content.vb: Protected MustOverride Function FindFirstChar As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - abstract\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  nameWithType: RegexRunner.FindFirstChar()\n- uid: System.Text.RegularExpressions.RegexRunner.Go\n  commentId: M:System.Text.RegularExpressions.RegexRunner.Go\n  id: Go\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: Go()\n  fullName: System.Text.RegularExpressions.RegexRunner.Go()\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Go\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 186\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected abstract void Go()\n    content.vb: Protected MustOverride Sub Go\n  modifiers.csharp:\n  - protected\n  - abstract\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  nameWithType: RegexRunner.Go()\n- uid: System.Text.RegularExpressions.RegexRunner.InitTrackCount\n  commentId: M:System.Text.RegularExpressions.RegexRunner.InitTrackCount\n  id: InitTrackCount\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: InitTrackCount()\n  fullName: System.Text.RegularExpressions.RegexRunner.InitTrackCount()\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InitTrackCount\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 187\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected abstract void InitTrackCount()\n    content.vb: Protected MustOverride Sub InitTrackCount\n  modifiers.csharp:\n  - protected\n  - abstract\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  nameWithType: RegexRunner.InitTrackCount()\n- uid: System.Text.RegularExpressions.RegexRunner.IsBoundary(System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Text.RegularExpressions.RegexRunner.IsBoundary(System.Int32,System.Int32,System.Int32)\n  id: IsBoundary(System.Int32,System.Int32,System.Int32)\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: IsBoundary(Int32, Int32, Int32)\n  fullName: System.Text.RegularExpressions.RegexRunner.IsBoundary(System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsBoundary\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 188\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected bool IsBoundary(int index, int startpos, int endpos)\n    content.vb: Protected Function IsBoundary(index As Integer, startpos As Integer, endpos As Integer) As Boolean\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The possible boundary position. </p>\\n\"\n    - id: startpos\n      type: System.Int32\n      description: \"\\n<p>The starting position. </p>\\n\"\n    - id: endpos\n      type: System.Int32\n      description: \"\\n<p></p>\\n<p>The ending position. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.IsBoundary(Int32, Int32, Int32)\n- uid: System.Text.RegularExpressions.RegexRunner.IsECMABoundary(System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Text.RegularExpressions.RegexRunner.IsECMABoundary(System.Int32,System.Int32,System.Int32)\n  id: IsECMABoundary(System.Int32,System.Int32,System.Int32)\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: IsECMABoundary(Int32, Int32, Int32)\n  fullName: System.Text.RegularExpressions.RegexRunner.IsECMABoundary(System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsECMABoundary\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 189\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected bool IsECMABoundary(int index, int startpos, int endpos)\n    content.vb: Protected Function IsECMABoundary(index As Integer, startpos As Integer, endpos As Integer) As Boolean\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The possible ECMA boundary position. </p>\\n\"\n    - id: startpos\n      type: System.Int32\n      description: \"\\n<p>The starting position. </p>\\n\"\n    - id: endpos\n      type: System.Int32\n      description: \"\\n<p></p>\\n<p>The ending position. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.IsECMABoundary(Int32, Int32, Int32)\n- uid: System.Text.RegularExpressions.RegexRunner.IsMatched(System.Int32)\n  commentId: M:System.Text.RegularExpressions.RegexRunner.IsMatched(System.Int32)\n  id: IsMatched(System.Int32)\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: IsMatched(Int32)\n  fullName: System.Text.RegularExpressions.RegexRunner.IsMatched(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsMatched\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 190\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected bool IsMatched(int cap)\n    content.vb: Protected Function IsMatched(cap As Integer) As Boolean\n    parameters:\n    - id: cap\n      type: System.Int32\n      description: \"\\n<p>The capture number. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.IsMatched(Int32)\n- uid: System.Text.RegularExpressions.RegexRunner.MatchIndex(System.Int32)\n  commentId: M:System.Text.RegularExpressions.RegexRunner.MatchIndex(System.Int32)\n  id: MatchIndex(System.Int32)\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: MatchIndex(Int32)\n  fullName: System.Text.RegularExpressions.RegexRunner.MatchIndex(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MatchIndex\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 191\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected int MatchIndex(int cap)\n    content.vb: Protected Function MatchIndex(cap As Integer) As Integer\n    parameters:\n    - id: cap\n      type: System.Int32\n      description: \"\\n<p>The capture number. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>Returns <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.MatchIndex(Int32)\n- uid: System.Text.RegularExpressions.RegexRunner.MatchLength(System.Int32)\n  commentId: M:System.Text.RegularExpressions.RegexRunner.MatchLength(System.Int32)\n  id: MatchLength(System.Int32)\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: MatchLength(Int32)\n  fullName: System.Text.RegularExpressions.RegexRunner.MatchLength(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MatchLength\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 192\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected int MatchLength(int cap)\n    content.vb: Protected Function MatchLength(cap As Integer) As Integer\n    parameters:\n    - id: cap\n      type: System.Int32\n      description: \"\\n<p>The capture number. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>Returns <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.MatchLength(Int32)\n- uid: System.Text.RegularExpressions.RegexRunner.Popcrawl\n  commentId: M:System.Text.RegularExpressions.RegexRunner.Popcrawl\n  id: Popcrawl\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: Popcrawl()\n  fullName: System.Text.RegularExpressions.RegexRunner.Popcrawl()\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Popcrawl\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 193\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected int Popcrawl()\n    content.vb: Protected Function Popcrawl As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>Returns <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.Popcrawl()\n- uid: System.Text.RegularExpressions.RegexRunner.Scan(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)\n  commentId: M:System.Text.RegularExpressions.RegexRunner.Scan(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)\n  id: Scan(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: Scan(Regex, String, Int32, Int32, Int32, Int32, Boolean)\n  fullName: System.Text.RegularExpressions.RegexRunner.Scan(System.Text.RegularExpressions.Regex, System.String, System.Int32, System.Int32, System.Int32, System.Int32, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Scan\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 194\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: protected Match Scan(Regex regex, string text, int textbeg, int textend, int textstart, int prevlen, bool quick)\n    content.vb: Protected Function Scan(regex As Regex, text As String, textbeg As Integer, textend As Integer, textstart As Integer, prevlen As Integer, quick As Boolean) As Match\n    parameters:\n    - id: regex\n      type: System.Text.RegularExpressions.Regex\n      description: \"\\n<p>An instance of the regular expression engine. </p>\\n\"\n    - id: text\n      type: System.String\n      description: \"\\n<p>The text to scan for a pattern match. </p>\\n\"\n    - id: textbeg\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting position in <em>text</em> at which the regular expression engine scans for a match.  </p>\\n\"\n    - id: textend\n      type: System.Int32\n      description: \"\\n<p>The zero-based ending position in <em>text</em> at which the regular expression engine scans for a match.  </p>\\n\"\n    - id: textstart\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting position to scan for this match.  </p>\\n\"\n    - id: prevlen\n      type: System.Int32\n      description: \"\\n<p>The number of characters in the previous match. </p>\\n\"\n    - id: quick\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to search for a match in quick mode; otherwise, <strong>false</strong>. </p>\\n\"\n    return:\n      type: System.Text.RegularExpressions.Match\n      description: \"\\n<p>A match.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.Scan(Regex, String, Int32, Int32, Int32, Int32, Boolean)\n- uid: System.Text.RegularExpressions.RegexRunner.Scan(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.TimeSpan)\n  commentId: M:System.Text.RegularExpressions.RegexRunner.Scan(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.TimeSpan)\n  id: Scan(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.TimeSpan)\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: Scan(Regex, String, Int32, Int32, Int32, Int32, Boolean, TimeSpan)\n  fullName: System.Text.RegularExpressions.RegexRunner.Scan(System.Text.RegularExpressions.Regex, System.String, System.Int32, System.Int32, System.Int32, System.Int32, System.Boolean, System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Scan\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 195\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: protected Match Scan(Regex regex, string text, int textbeg, int textend, int textstart, int prevlen, bool quick, TimeSpan timeout)\n    content.vb: Protected Function Scan(regex As Regex, text As String, textbeg As Integer, textend As Integer, textstart As Integer, prevlen As Integer, quick As Boolean, timeout As TimeSpan) As Match\n    parameters:\n    - id: regex\n      type: System.Text.RegularExpressions.Regex\n      description: \"\\n<p>An instance of the regular expression engine. </p>\\n\"\n    - id: text\n      type: System.String\n      description: \"\\n<p>The text to scan for a pattern match. </p>\\n\"\n    - id: textbeg\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting position in <em>text</em> at which the regular expression engine scans for a match.  </p>\\n\"\n    - id: textend\n      type: System.Int32\n      description: \"\\n<p>The zero-based ending position in <em>text</em> at which the regular expression engine scans for a match.  </p>\\n\"\n    - id: textstart\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting position to scan for this match.  </p>\\n\"\n    - id: prevlen\n      type: System.Int32\n      description: \"\\n<p>The number of characters in the previous match. </p>\\n\"\n    - id: quick\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to search for a match in quick mode; otherwise, <strong>false</strong>. </p>\\n\"\n    - id: timeout\n      type: System.TimeSpan\n      description: \"\\n<p>The timeout interval. </p>\\n\"\n    return:\n      type: System.Text.RegularExpressions.Match\n      description: \"\\n<p>A match. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.Scan(Regex, String, Int32, Int32, Int32, Int32, Boolean, TimeSpan)\n- uid: System.Text.RegularExpressions.RegexRunner.TransferCapture(System.Int32,System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Text.RegularExpressions.RegexRunner.TransferCapture(System.Int32,System.Int32,System.Int32,System.Int32)\n  id: TransferCapture(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: TransferCapture(Int32, Int32, Int32, Int32)\n  fullName: System.Text.RegularExpressions.RegexRunner.TransferCapture(System.Int32, System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TransferCapture\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 196\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected void TransferCapture(int capnum, int uncapnum, int start, int end)\n    content.vb: Protected Sub TransferCapture(capnum As Integer, uncapnum As Integer, start As Integer, end As Integer)\n    parameters:\n    - id: capnum\n      type: System.Int32\n      description: \"\\n<p>A capture number. </p>\\n\"\n    - id: uncapnum\n      type: System.Int32\n      description: \"\\n<p>A saved capture number.</p>\\n\"\n    - id: start\n      type: System.Int32\n      description: \"\\n<p>The starting position. </p>\\n\"\n    - id: end\n      type: System.Int32\n      description: \"\\n<p>The ending position. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.TransferCapture(Int32, Int32, Int32, Int32)\n- uid: System.Text.RegularExpressions.RegexRunner.Uncapture\n  commentId: M:System.Text.RegularExpressions.RegexRunner.Uncapture\n  id: Uncapture\n  parent: System.Text.RegularExpressions.RegexRunner\n  langs:\n  - csharp\n  - vb\n  name: Uncapture()\n  fullName: System.Text.RegularExpressions.RegexRunner.Uncapture()\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Uncapture\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 197\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: protected void Uncapture()\n    content.vb: Protected Sub Uncapture\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunner.Uncapture()\nreferences:\n- uid: System.Text.RegularExpressions\n  isExternal: false\n  name: System.Text.RegularExpressions\n  fullName: System.Text.RegularExpressions\n  commentId: N:System.Text.RegularExpressions\n  nameWithType: System.Text.RegularExpressions\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Int32[]\n  name: Int32[]\n  fullName: System.Int32[]\n  fullname.vb: System.Int32()\n  name.vb: Int32()\n  spec.csharp:\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Int32[]\n  nameWithType.vb: Int32()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Text.RegularExpressions.Match\n  parent: System.Text.RegularExpressions\n  isExternal: false\n  name: Match\n  fullName: System.Text.RegularExpressions.Match\n  commentId: T:System.Text.RegularExpressions.Match\n  nameWithType: Match\n- uid: System.Text.RegularExpressions.Regex\n  parent: System.Text.RegularExpressions\n  isExternal: false\n  name: Regex\n  fullName: System.Text.RegularExpressions.Regex\n  commentId: T:System.Text.RegularExpressions.Regex\n  nameWithType: Regex\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  commentId: T:System.Char\n  nameWithType: Char\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  fullName: System.TimeSpan\n  commentId: T:System.TimeSpan\n  nameWithType: TimeSpan\n"}