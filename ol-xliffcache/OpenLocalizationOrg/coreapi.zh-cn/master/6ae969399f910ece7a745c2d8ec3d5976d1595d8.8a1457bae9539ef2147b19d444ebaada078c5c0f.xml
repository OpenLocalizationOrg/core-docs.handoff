{"nodes":[{"pos":[489,502],"content":"ProcessModule","needQuote":true,"nodes":[{"content":"ProcessModule","pos":[0,13]}]},{"pos":[2031,2042],"content":"BaseAddress","needQuote":true,"nodes":[{"content":"BaseAddress","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The load address of the module.&lt;/p&gt;\\n","pos":[2763,2805],"source":"\\n<p>The load address of the module.</p>\\n"},{"pos":[3154,3171],"content":"EntryPointAddress","needQuote":true,"nodes":[{"content":"EntryPointAddress","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The entry point of the module.&lt;/p&gt;\\n","pos":[3957,3998],"source":"\\n<p>The entry point of the module.</p>\\n"},{"pos":[4326,4334],"content":"FileName","needQuote":true,"nodes":[{"content":"FileName","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The fully qualified path that defines the location of the module.&lt;/p&gt;\\n","pos":[5024,5100],"source":"\\n<p>The fully qualified path that defines the location of the module.</p>\\n"},{"pos":[5443,5459],"content":"ModuleMemorySize","needQuote":true,"nodes":[{"content":"ModuleMemorySize","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The size, in bytes, of the memory that the module occupies.&lt;/p&gt;\\n","pos":[6207,6277],"source":"\\n<p>The size, in bytes, of the memory that the module occupies.</p>\\n"},{"pos":[6610,6620],"content":"ModuleName","needQuote":true,"nodes":[{"content":"ModuleName","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The name of the module.&lt;/p&gt;\\n","pos":[7321,7355],"source":"\\n<p>The name of the module.</p>\\n"},{"pos":[7676,7686],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[8744,8762],"content":"System.Diagnostics","needQuote":true,"nodes":[{"content":"System.Diagnostics","pos":[0,18]}]},{"pos":[8929,8935],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9108,9122],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[9241,9247],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9314,9315],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9365,9371],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9431,9432],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9515,9521],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9588,9589],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9639,9645],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9705,9706],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9920,9942],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[10090,10096],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10163,10164],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10214,10220],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10281,10282]},{"pos":[10337,10343],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10403,10404],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10501,10507],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10574,10575],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10625,10631],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10692,10693]},{"pos":[10748,10754],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10814,10815],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11060,11091],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[11257,11272],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[11348,11349],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11399,11405],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11466,11467]},{"pos":[11522,11528],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11588,11589],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11695,11710],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[11786,11787],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11837,11843],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11904,11905]},{"pos":[11960,11966],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12026,12027],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12257,12270],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[12371,12382],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[12454,12455],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12482,12483],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12556,12567],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[12639,12640],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12667,12668],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12843,12852],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[12945,12952],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[13020,13021],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13048,13049],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13118,13125],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[13193,13194],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13221,13222],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13397,13414],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[13523,13538],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[13614,13615],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13642,13643],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13720,13735],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[13811,13812],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13839,13840],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13985,13991],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[14122,14128],"content":"IntPtr","needQuote":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"pos":[14273,14279],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[14423,14428],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[14585,14595],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[14690,14698],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[14767,14768],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14795,14796],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14866,14874],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[14943,14944],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14971,14972],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]}],"content":"items:\n- uid: System.Diagnostics.ProcessModule\n  commentId: T:System.Diagnostics.ProcessModule\n  id: ProcessModule\n  parent: System.Diagnostics\n  children:\n  - System.Diagnostics.ProcessModule.BaseAddress\n  - System.Diagnostics.ProcessModule.EntryPointAddress\n  - System.Diagnostics.ProcessModule.FileName\n  - System.Diagnostics.ProcessModule.ModuleMemorySize\n  - System.Diagnostics.ProcessModule.ModuleName\n  - System.Diagnostics.ProcessModule.ToString\n  langs:\n  - csharp\n  - vb\n  name: ProcessModule\n  fullName: System.Diagnostics.ProcessModule\n  type: Class\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModule.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ProcessModule\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModule.cs\n    startLine: 13\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Represents a.dll or .exe file that is loaded into a particular process.</p>\\n\"\n  syntax:\n    content: public class ProcessModule\n    content.vb: Public Class ProcessModule\n  see:\n  - type: System.Security.Permissions.SecurityAction.LinkDemand\n    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand\n  - type: System.Security.Permissions.SecurityAction.InheritanceDemand\n    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: ProcessModule\n- uid: System.Diagnostics.ProcessModule.BaseAddress\n  commentId: P:System.Diagnostics.ProcessModule.BaseAddress\n  id: BaseAddress\n  parent: System.Diagnostics.ProcessModule\n  langs:\n  - csharp\n  - vb\n  name: BaseAddress\n  fullName: System.Diagnostics.ProcessModule.BaseAddress\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModule.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BaseAddress\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModule.cs\n    startLine: 54\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the memory address where the module was loaded.</p>\\n\"\n  syntax:\n    content: public IntPtr BaseAddress { get; }\n    content.vb: Public ReadOnly Property BaseAddress As IntPtr\n    parameters: []\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>The load address of the module.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ProcessModule.BaseAddress\n- uid: System.Diagnostics.ProcessModule.EntryPointAddress\n  commentId: P:System.Diagnostics.ProcessModule.EntryPointAddress\n  id: EntryPointAddress\n  parent: System.Diagnostics.ProcessModule\n  langs:\n  - csharp\n  - vb\n  name: EntryPointAddress\n  fullName: System.Diagnostics.ProcessModule.EntryPointAddress\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModule.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EntryPointAddress\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModule.cs\n    startLine: 80\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the memory address for the function that runs when the system loads and runs the module.</p>\\n\"\n  syntax:\n    content: public IntPtr EntryPointAddress { get; }\n    content.vb: Public ReadOnly Property EntryPointAddress As IntPtr\n    parameters: []\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>The entry point of the module.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ProcessModule.EntryPointAddress\n- uid: System.Diagnostics.ProcessModule.FileName\n  commentId: P:System.Diagnostics.ProcessModule.FileName\n  id: FileName\n  parent: System.Diagnostics.ProcessModule\n  langs:\n  - csharp\n  - vb\n  name: FileName\n  fullName: System.Diagnostics.ProcessModule.FileName\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModule.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FileName\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModule.cs\n    startLine: 43\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the full path to the module.</p>\\n\"\n  syntax:\n    content: public string FileName { get; }\n    content.vb: Public ReadOnly Property FileName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The fully qualified path that defines the location of the module.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ProcessModule.FileName\n- uid: System.Diagnostics.ProcessModule.ModuleMemorySize\n  commentId: P:System.Diagnostics.ProcessModule.ModuleMemorySize\n  id: ModuleMemorySize\n  parent: System.Diagnostics.ProcessModule\n  langs:\n  - csharp\n  - vb\n  name: ModuleMemorySize\n  fullName: System.Diagnostics.ProcessModule.ModuleMemorySize\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModule.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ModuleMemorySize\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModule.cs\n    startLine: 68\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the amount of memory that is required to load the module.</p>\\n\"\n  syntax:\n    content: public int ModuleMemorySize { get; }\n    content.vb: Public ReadOnly Property ModuleMemorySize As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The size, in bytes, of the memory that the module occupies.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ProcessModule.ModuleMemorySize\n- uid: System.Diagnostics.ProcessModule.ModuleName\n  commentId: P:System.Diagnostics.ProcessModule.ModuleName\n  id: ModuleName\n  parent: System.Diagnostics.ProcessModule\n  langs:\n  - csharp\n  - vb\n  name: ModuleName\n  fullName: System.Diagnostics.ProcessModule.ModuleName\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModule.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ModuleName\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModule.cs\n    startLine: 32\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the name of the process module.</p>\\n\"\n  syntax:\n    content: public string ModuleName { get; }\n    content.vb: Public ReadOnly Property ModuleName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the module.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ProcessModule.ModuleName\n- uid: System.Diagnostics.ProcessModule.ToString\n  commentId: M:System.Diagnostics.ProcessModule.ToString\n  id: ToString\n  parent: System.Diagnostics.ProcessModule\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Diagnostics.ProcessModule.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModule.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModule.cs\n    startLine: 105\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Converts the name of the module to a string.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The value of the <xref href=\\\"System.Diagnostics.ProcessModule.ModuleName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: ProcessModule.ToString()\nreferences:\n- uid: System.Diagnostics\n  isExternal: false\n  name: System.Diagnostics\n  fullName: System.Diagnostics\n  nameWithType: System.Diagnostics\n  commentId: N:System.Diagnostics\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  fullName: System.IntPtr\n  nameWithType: IntPtr\n  commentId: T:System.IntPtr\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n"}