{"nodes":[{"pos":[914,931],"content":"XmlWriterSettings","needQuote":true,"nodes":[{"content":"XmlWriterSettings","pos":[0,17]}]},{"pos":[2389,2408],"content":"XmlWriterSettings()","needQuote":true,"nodes":[{"content":"XmlWriterSettings()","pos":[0,19]}]},{"pos":[3346,3351],"content":"Async","needQuote":true,"nodes":[{"content":"Async","pos":[0,5]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if asynchronous methods can be used; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[4218,4324],"source":"\\n<p>\\n<strong>true</strong> if asynchronous methods can be used; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[4648,4663],"content":"CheckCharacters","needQuote":true,"nodes":[{"content":"CheckCharacters","pos":[0,15]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to do character checking; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[5559,5648],"source":"\\n<p>\\n<strong>true</strong> to do character checking; otherwise, <strong>false</strong>."},{"content":"The default is &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[5649,5692],"source":" The default is <strong>true</strong>.</p>\\n"},{"pos":[6014,6025],"content":"CloseOutput","needQuote":true,"nodes":[{"content":"CloseOutput","pos":[0,11]}]},{"pos":[7576,7592],"content":"ConformanceLevel","needQuote":true,"nodes":[{"content":"ConformanceLevel","pos":[0,16]}]},{"pos":[8910,8918],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The text encoding to use.","pos":[9590,9620],"source":"\\n<p>The text encoding to use."},{"content":"The default is &lt;strong&gt;Encoding.UTF8&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9621,9673],"source":" The default is <strong>Encoding.UTF8</strong>.</p>\\n"},{"pos":[9973,9979],"content":"Indent","needQuote":true,"nodes":[{"content":"Indent","pos":[0,6]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to write individual elements on new lines and indent; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[10645,10762],"source":"\\n<p>\\n<strong>true</strong> to write individual elements on new lines and indent; otherwise, <strong>false</strong>."},{"content":"The default is &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10763,10807],"source":" The default is <strong>false</strong>.</p>\\n"},{"pos":[11120,11131],"content":"IndentChars","needQuote":true,"nodes":[{"content":"IndentChars","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The character string to use when indenting.","pos":[11982,12030],"source":"\\n<p>The character string to use when indenting."},{"content":"This can be set to any string value.","pos":[12031,12067]},{"content":"However, to ensure valid XML, you should specify only valid white space characters, such as space characters, tabs, carriage returns, or line feeds.","pos":[12068,12216]},{"content":"The default is two spaces.&lt;/p&gt;\\n","pos":[12217,12249],"source":" The default is two spaces.</p>\\n"},{"pos":[12867,12884],"content":"NamespaceHandling","needQuote":true,"nodes":[{"content":"NamespaceHandling","pos":[0,17]}]},{"pos":[14500,14512],"content":"NewLineChars","needQuote":true,"nodes":[{"content":"NewLineChars","pos":[0,12]}]},{"pos":[16119,16134],"content":"NewLineHandling","needQuote":true,"nodes":[{"content":"NewLineHandling","pos":[0,15]}]},{"pos":[17460,17479],"content":"NewLineOnAttributes","needQuote":true,"nodes":[{"content":"NewLineOnAttributes","pos":[0,19]}]},{"pos":[19126,19144],"content":"OmitXmlDeclaration","needQuote":true,"nodes":[{"content":"OmitXmlDeclaration","pos":[0,18]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to omit the XML declaration; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[19866,19958],"source":"\\n<p>\\n<strong>true</strong> to omit the XML declaration; otherwise, <strong>false</strong>."},{"content":"The default is &lt;strong&gt;false&lt;/strong&gt;, an XML declaration is written.&lt;/p&gt;\\n","pos":[19959,20034],"source":" The default is <strong>false</strong>, an XML declaration is written.</p>\\n"},{"pos":[20395,20418],"content":"WriteEndDocumentOnClose","needQuote":true,"nodes":[{"content":"WriteEndDocumentOnClose","pos":[0,23]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if all unclosed element tags will be closed out; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[21386,21498],"source":"\\n<p>\\n<strong>true</strong> if all unclosed element tags will be closed out; otherwise, <strong>false</strong>."},{"content":"The default value is &lt;strong&gt;true&lt;/strong&gt;.","pos":[21499,21542],"source":" The default value is <strong>true</strong>."},{"content":"&lt;/p&gt;\\n","pos":[21543,21549],"source":" </p>\\n"},{"pos":[21861,21868],"content":"Clone()","needQuote":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[22995,23002],"content":"Reset()","needQuote":true,"nodes":[{"content":"Reset()","pos":[0,7]}]},{"pos":[23722,23732],"content":"System.Xml","needQuote":true,"nodes":[{"content":"System.Xml","pos":[0,10]}]},{"pos":[23875,23881],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24041,24051],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[24146,24154],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[24223,24224],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24251,24252],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24322,24330],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[24399,24400],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24427,24428],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24611,24625],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[24744,24750],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24817,24818],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24868,24874],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24934,24935],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25018,25024],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25091,25092],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25142,25148],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25208,25209],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25423,25445],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[25593,25599],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25666,25667],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25717,25723],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25784,25785]},{"pos":[25840,25846],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25906,25907],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26004,26010],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26077,26078],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26128,26134],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26195,26196]},{"pos":[26251,26257],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26317,26318],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26563,26594],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[26760,26775],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[26851,26852],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26902,26908],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26969,26970]},{"pos":[27025,27031],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27091,27092],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27198,27213],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[27289,27290],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27340,27346],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27407,27408]},{"pos":[27463,27469],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27529,27530],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27760,27773],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[27874,27885],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[27957,27958],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27985,27986],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28059,28070],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[28142,28143],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28170,28171],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28346,28355],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[28448,28455],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[28523,28524],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28551,28552],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28621,28628],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[28696,28697],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28724,28725],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28900,28917],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[29026,29041],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[29117,29118],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29145,29146],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29223,29238],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[29314,29315],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29342,29343],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29488,29494],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[29626,29633],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[29799,29815],"content":"ConformanceLevel","needQuote":true,"nodes":[{"content":"ConformanceLevel","pos":[0,16]}]},{"pos":[30010,30018],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"pos":[30160,30171],"content":"System.Text","needQuote":true,"nodes":[{"content":"System.Text","pos":[0,11]}]},{"pos":[30317,30323],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[30487,30504],"content":"NamespaceHandling","needQuote":true,"nodes":[{"content":"NamespaceHandling","pos":[0,17]}]},{"pos":[30707,30722],"content":"NewLineHandling","needQuote":true,"nodes":[{"content":"NewLineHandling","pos":[0,15]}]},{"pos":[30921,30938],"content":"XmlWriterSettings","needQuote":true,"nodes":[{"content":"XmlWriterSettings","pos":[0,17]}]},{"pos":[31122,31143],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Xml.XmlWriterSettings\n  commentId: T:System.Xml.XmlWriterSettings\n  id: XmlWriterSettings\n  parent: System.Xml\n  children:\n  - System.Xml.XmlWriterSettings.#ctor\n  - System.Xml.XmlWriterSettings.Async\n  - System.Xml.XmlWriterSettings.CheckCharacters\n  - System.Xml.XmlWriterSettings.Clone\n  - System.Xml.XmlWriterSettings.CloseOutput\n  - System.Xml.XmlWriterSettings.ConformanceLevel\n  - System.Xml.XmlWriterSettings.Encoding\n  - System.Xml.XmlWriterSettings.Indent\n  - System.Xml.XmlWriterSettings.IndentChars\n  - System.Xml.XmlWriterSettings.NamespaceHandling\n  - System.Xml.XmlWriterSettings.NewLineChars\n  - System.Xml.XmlWriterSettings.NewLineHandling\n  - System.Xml.XmlWriterSettings.NewLineOnAttributes\n  - System.Xml.XmlWriterSettings.OmitXmlDeclaration\n  - System.Xml.XmlWriterSettings.Reset\n  - System.Xml.XmlWriterSettings.WriteEndDocumentOnClose\n  langs:\n  - csharp\n  - vb\n  name: XmlWriterSettings\n  fullName: System.Xml.XmlWriterSettings\n  type: Class\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XmlWriterSettings\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 475\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Specifies a set of features to support on the <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object created by the <xref href=\\\"System.Xml.XmlWriter.Create(System.IO.Stream)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: public sealed class XmlWriterSettings\n    content.vb: Public NotInheritable Class XmlWriterSettings\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: XmlWriterSettings\n- uid: System.Xml.XmlWriterSettings.#ctor\n  commentId: M:System.Xml.XmlWriterSettings.#ctor\n  id: '#ctor'\n  parent: System.Xml.XmlWriterSettings\n  langs:\n  - csharp\n  - vb\n  name: XmlWriterSettings()\n  fullName: System.Xml.XmlWriterSettings.XmlWriterSettings()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 477\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Xml.XmlWriterSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public XmlWriterSettings()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriterSettings.XmlWriterSettings()\n- uid: System.Xml.XmlWriterSettings.Async\n  commentId: P:System.Xml.XmlWriterSettings.Async\n  id: Async\n  parent: System.Xml.XmlWriterSettings\n  langs:\n  - csharp\n  - vb\n  name: Async\n  fullName: System.Xml.XmlWriterSettings.Async\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Async\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 478\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets a value that indicates whether asynchronous <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> methods can be used on a particular <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public bool Async { get; set; }\n    content.vb: Public Property Async As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if asynchronous methods can be used; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriterSettings.Async\n- uid: System.Xml.XmlWriterSettings.CheckCharacters\n  commentId: P:System.Xml.XmlWriterSettings.CheckCharacters\n  id: CheckCharacters\n  parent: System.Xml.XmlWriterSettings\n  langs:\n  - csharp\n  - vb\n  name: CheckCharacters\n  fullName: System.Xml.XmlWriterSettings.CheckCharacters\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CheckCharacters\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 479\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets a value that indicates whether the XML writer should check to ensure that all characters in the document conform to the \\\"2.2 Characters\\\" section of the W3C <see href=\\\"http://www.w3.org/TR/REC-xml/#charsets\\\">XML 1.0 Recommendation</see>.</p>\\n\"\n  syntax:\n    content: public bool CheckCharacters { get; set; }\n    content.vb: Public Property CheckCharacters As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to do character checking; otherwise, <strong>false</strong>. The default is <strong>true</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriterSettings.CheckCharacters\n- uid: System.Xml.XmlWriterSettings.CloseOutput\n  commentId: P:System.Xml.XmlWriterSettings.CloseOutput\n  id: CloseOutput\n  parent: System.Xml.XmlWriterSettings\n  langs:\n  - csharp\n  - vb\n  name: CloseOutput\n  fullName: System.Xml.XmlWriterSettings.CloseOutput\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CloseOutput\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 480\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets a value indicating whether the <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> should also close the underlying stream or <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> when the <xref href=\\\"System.Xml.XmlWriter.Close\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method is called.</p>\\n\"\n  syntax:\n    content: public bool CloseOutput { get; set; }\n    content.vb: Public Property CloseOutput As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to also close the underlying stream or <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriterSettings.CloseOutput\n- uid: System.Xml.XmlWriterSettings.ConformanceLevel\n  commentId: P:System.Xml.XmlWriterSettings.ConformanceLevel\n  id: ConformanceLevel\n  parent: System.Xml.XmlWriterSettings\n  langs:\n  - csharp\n  - vb\n  name: ConformanceLevel\n  fullName: System.Xml.XmlWriterSettings.ConformanceLevel\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConformanceLevel\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 481\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets the level of conformance that the XML writer checks the XML output for.</p>\\n\"\n  syntax:\n    content: public ConformanceLevel ConformanceLevel { get; set; }\n    content.vb: Public Property ConformanceLevel As ConformanceLevel\n    parameters: []\n    return:\n      type: System.Xml.ConformanceLevel\n      description: \"\\n<p>One of the enumeration values that specifies the level of conformance (document, fragment, or automatic detection). The default is <xref href=\\\"System.Xml.ConformanceLevel.Document\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriterSettings.ConformanceLevel\n- uid: System.Xml.XmlWriterSettings.Encoding\n  commentId: P:System.Xml.XmlWriterSettings.Encoding\n  id: Encoding\n  parent: System.Xml.XmlWriterSettings\n  langs:\n  - csharp\n  - vb\n  name: Encoding\n  fullName: System.Xml.XmlWriterSettings.Encoding\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Encoding\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 482\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets the type of text encoding to use.</p>\\n\"\n  syntax:\n    content: public Encoding Encoding { get; set; }\n    content.vb: Public Property Encoding As Encoding\n    parameters: []\n    return:\n      type: System.Text.Encoding\n      description: \"\\n<p>The text encoding to use. The default is <strong>Encoding.UTF8</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriterSettings.Encoding\n- uid: System.Xml.XmlWriterSettings.Indent\n  commentId: P:System.Xml.XmlWriterSettings.Indent\n  id: Indent\n  parent: System.Xml.XmlWriterSettings\n  langs:\n  - csharp\n  - vb\n  name: Indent\n  fullName: System.Xml.XmlWriterSettings.Indent\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Indent\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 483\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets a value indicating whether to indent elements.</p>\\n\"\n  syntax:\n    content: public bool Indent { get; set; }\n    content.vb: Public Property Indent As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to write individual elements on new lines and indent; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriterSettings.Indent\n- uid: System.Xml.XmlWriterSettings.IndentChars\n  commentId: P:System.Xml.XmlWriterSettings.IndentChars\n  id: IndentChars\n  parent: System.Xml.XmlWriterSettings\n  langs:\n  - csharp\n  - vb\n  name: IndentChars\n  fullName: System.Xml.XmlWriterSettings.IndentChars\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IndentChars\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 484\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets the character string to use when indenting. This setting is used when the <xref href=\\\"System.Xml.XmlWriterSettings.Indent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is set to <strong>true</strong>.</p>\\n\"\n  syntax:\n    content: public string IndentChars { get; set; }\n    content.vb: Public Property IndentChars As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The character string to use when indenting. This can be set to any string value. However, to ensure valid XML, you should specify only valid white space characters, such as space characters, tabs, carriage returns, or line feeds. The default is two spaces.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The value assigned to the <xref href=\\\"System.Xml.XmlWriterSettings.IndentChars\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriterSettings.IndentChars\n- uid: System.Xml.XmlWriterSettings.NamespaceHandling\n  commentId: P:System.Xml.XmlWriterSettings.NamespaceHandling\n  id: NamespaceHandling\n  parent: System.Xml.XmlWriterSettings\n  langs:\n  - csharp\n  - vb\n  name: NamespaceHandling\n  fullName: System.Xml.XmlWriterSettings.NamespaceHandling\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NamespaceHandling\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 485\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets a value that indicates whether the <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> should remove duplicate namespace declarations when writing XML content. The default behavior is for the writer to output all namespace declarations that are present in the writer's namespace resolver.</p>\\n\"\n  syntax:\n    content: public NamespaceHandling NamespaceHandling { get; set; }\n    content.vb: Public Property NamespaceHandling As NamespaceHandling\n    parameters: []\n    return:\n      type: System.Xml.NamespaceHandling\n      description: \"\\n<p>The <xref href=\\\"System.Xml.NamespaceHandling\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration used to specify whether to remove duplicate namespace declarations in the <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriterSettings.NamespaceHandling\n- uid: System.Xml.XmlWriterSettings.NewLineChars\n  commentId: P:System.Xml.XmlWriterSettings.NewLineChars\n  id: NewLineChars\n  parent: System.Xml.XmlWriterSettings\n  langs:\n  - csharp\n  - vb\n  name: NewLineChars\n  fullName: System.Xml.XmlWriterSettings.NewLineChars\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NewLineChars\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 486\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets the character string to use for line breaks.</p>\\n\"\n  syntax:\n    content: public string NewLineChars { get; set; }\n    content.vb: Public Property NewLineChars As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The character string to use for line breaks. This can be set to any string value. However, to ensure valid XML, you should specify only valid white space characters, such as space characters, tabs, carriage returns, or line feeds. The default is <code>\\\\r\\\\n</code> (carriage return, new line).</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The value assigned to the <xref href=\\\"System.Xml.XmlWriterSettings.NewLineChars\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriterSettings.NewLineChars\n- uid: System.Xml.XmlWriterSettings.NewLineHandling\n  commentId: P:System.Xml.XmlWriterSettings.NewLineHandling\n  id: NewLineHandling\n  parent: System.Xml.XmlWriterSettings\n  langs:\n  - csharp\n  - vb\n  name: NewLineHandling\n  fullName: System.Xml.XmlWriterSettings.NewLineHandling\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NewLineHandling\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 487\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets a value indicating whether to normalize line breaks in the output.</p>\\n\"\n  syntax:\n    content: public NewLineHandling NewLineHandling { get; set; }\n    content.vb: Public Property NewLineHandling As NewLineHandling\n    parameters: []\n    return:\n      type: System.Xml.NewLineHandling\n      description: \"\\n<p>One of the <xref href=\\\"System.Xml.NewLineHandling\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values. The default is <xref href=\\\"System.Xml.NewLineHandling.Replace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriterSettings.NewLineHandling\n- uid: System.Xml.XmlWriterSettings.NewLineOnAttributes\n  commentId: P:System.Xml.XmlWriterSettings.NewLineOnAttributes\n  id: NewLineOnAttributes\n  parent: System.Xml.XmlWriterSettings\n  langs:\n  - csharp\n  - vb\n  name: NewLineOnAttributes\n  fullName: System.Xml.XmlWriterSettings.NewLineOnAttributes\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NewLineOnAttributes\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 488\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets a value indicating whether to write attributes on a new line.</p>\\n\"\n  syntax:\n    content: public bool NewLineOnAttributes { get; set; }\n    content.vb: Public Property NewLineOnAttributes As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to write attributes on individual lines; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n<p>This setting has no effect when the <xref href=\\\"System.Xml.XmlWriterSettings.Indent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property value is <strong>false</strong>.</p>\\n<p>When <xref href=\\\"System.Xml.XmlWriterSettings.NewLineOnAttributes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <strong>true</strong>, each attribute is pre-pended with a new line and one extra level of indentation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriterSettings.NewLineOnAttributes\n- uid: System.Xml.XmlWriterSettings.OmitXmlDeclaration\n  commentId: P:System.Xml.XmlWriterSettings.OmitXmlDeclaration\n  id: OmitXmlDeclaration\n  parent: System.Xml.XmlWriterSettings\n  langs:\n  - csharp\n  - vb\n  name: OmitXmlDeclaration\n  fullName: System.Xml.XmlWriterSettings.OmitXmlDeclaration\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OmitXmlDeclaration\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 489\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets a value indicating whether to omit an XML declaration.</p>\\n\"\n  syntax:\n    content: public bool OmitXmlDeclaration { get; set; }\n    content.vb: Public Property OmitXmlDeclaration As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to omit the XML declaration; otherwise, <strong>false</strong>. The default is <strong>false</strong>, an XML declaration is written.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriterSettings.OmitXmlDeclaration\n- uid: System.Xml.XmlWriterSettings.WriteEndDocumentOnClose\n  commentId: P:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose\n  id: WriteEndDocumentOnClose\n  parent: System.Xml.XmlWriterSettings\n  langs:\n  - csharp\n  - vb\n  name: WriteEndDocumentOnClose\n  fullName: System.Xml.XmlWriterSettings.WriteEndDocumentOnClose\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteEndDocumentOnClose\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 490\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets a value that indicates whether the <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will add closing tags to all unclosed element tags when the <xref href=\\\"System.Xml.XmlWriter.Close\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method is called.</p>\\n\"\n  syntax:\n    content: public bool WriteEndDocumentOnClose { get; set; }\n    content.vb: Public Property WriteEndDocumentOnClose As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if all unclosed element tags will be closed out; otherwise, <strong>false</strong>. The default value is <strong>true</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriterSettings.WriteEndDocumentOnClose\n- uid: System.Xml.XmlWriterSettings.Clone\n  commentId: M:System.Xml.XmlWriterSettings.Clone\n  id: Clone\n  parent: System.Xml.XmlWriterSettings\n  langs:\n  - csharp\n  - vb\n  name: Clone()\n  fullName: System.Xml.XmlWriterSettings.Clone()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Clone\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 491\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Creates a copy of the <xref href=\\\"System.Xml.XmlWriterSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public XmlWriterSettings Clone()\n    content.vb: Public Function Clone As XmlWriterSettings\n    return:\n      type: System.Xml.XmlWriterSettings\n      description: \"\\n<p>The cloned <xref href=\\\"System.Xml.XmlWriterSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriterSettings.Clone()\n- uid: System.Xml.XmlWriterSettings.Reset\n  commentId: M:System.Xml.XmlWriterSettings.Reset\n  id: Reset\n  parent: System.Xml.XmlWriterSettings\n  langs:\n  - csharp\n  - vb\n  name: Reset()\n  fullName: System.Xml.XmlWriterSettings.Reset()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Reset\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 492\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Resets the members of the settings class to their default values.</p>\\n\"\n  syntax:\n    content: public void Reset()\n    content.vb: Public Sub Reset\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlWriterSettings.Reset()\nreferences:\n- uid: System.Xml\n  isExternal: false\n  name: System.Xml\n  fullName: System.Xml\n  commentId: N:System.Xml\n  nameWithType: System.Xml\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Xml.ConformanceLevel\n  parent: System.Xml\n  isExternal: false\n  name: ConformanceLevel\n  fullName: System.Xml.ConformanceLevel\n  commentId: T:System.Xml.ConformanceLevel\n  nameWithType: ConformanceLevel\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: false\n  name: Encoding\n  fullName: System.Text.Encoding\n  commentId: T:System.Text.Encoding\n  nameWithType: Encoding\n- uid: System.Text\n  isExternal: false\n  name: System.Text\n  fullName: System.Text\n  commentId: N:System.Text\n  nameWithType: System.Text\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Xml.NamespaceHandling\n  parent: System.Xml\n  isExternal: false\n  name: NamespaceHandling\n  fullName: System.Xml.NamespaceHandling\n  commentId: T:System.Xml.NamespaceHandling\n  nameWithType: NamespaceHandling\n- uid: System.Xml.NewLineHandling\n  parent: System.Xml\n  isExternal: false\n  name: NewLineHandling\n  fullName: System.Xml.NewLineHandling\n  commentId: T:System.Xml.NewLineHandling\n  nameWithType: NewLineHandling\n- uid: System.Xml.XmlWriterSettings\n  parent: System.Xml\n  isExternal: false\n  name: XmlWriterSettings\n  fullName: System.Xml.XmlWriterSettings\n  commentId: T:System.Xml.XmlWriterSettings\n  nameWithType: XmlWriterSettings\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}