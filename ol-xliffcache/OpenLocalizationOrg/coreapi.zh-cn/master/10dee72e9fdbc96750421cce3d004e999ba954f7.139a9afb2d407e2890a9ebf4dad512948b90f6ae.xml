{"nodes":[{"pos":[876,890],"content":"CriticalHandle","needQuote":true,"nodes":[{"content":"CriticalHandle","pos":[0,14]}]},{"pos":[3059,3065],"content":"handle","needQuote":true,"nodes":[{"content":"handle","pos":[0,6]}]},{"pos":[4077,4099],"content":"CriticalHandle(IntPtr)","needQuote":true,"nodes":[{"content":"CriticalHandle(IntPtr)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The value of an invalid handle (usually 0 or -1).&lt;/p&gt;\\n","pos":[5182,5242],"source":"\\n<p>The value of an invalid handle (usually 0 or -1).</p>\\n"},{"content":"\\n&lt;p&gt;The derived class resides in an assembly without unmanaged code access permission.&lt;/p&gt;\\n","pos":[5353,5446],"source":"\\n<p>The derived class resides in an assembly without unmanaged code access permission.</p>\\n"},{"pos":[6265,6273],"content":"IsClosed","needQuote":true,"nodes":[{"content":"IsClosed","pos":[0,8]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the handle is closed; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[7106,7200],"source":"\\n<p>\\n<strong>true</strong> if the handle is closed; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[7704,7713],"content":"IsInvalid","needQuote":true,"nodes":[{"content":"IsInvalid","pos":[0,9]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the handle is valid; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8615,8708],"source":"\\n<p>\\n<strong>true</strong> if the handle is valid; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[9237,9246],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[10749,10765],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; for a normal dispose operation; &lt;strong&gt;false&lt;/strong&gt; to finalize the handle.&lt;/p&gt;\\n","pos":[11914,12027],"source":"\\n<p>\\n<strong>true</strong> for a normal dispose operation; <strong>false</strong> to finalize the handle.</p>\\n"},{"pos":[12564,12579],"content":"ReleaseHandle()","needQuote":true,"nodes":[{"content":"ReleaseHandle()","pos":[0,15]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the handle is released successfully; otherwise, in the event of a catastrophic failure,&lt;strong&gt; false&lt;/strong&gt;.","pos":[13512,13655],"source":"\\n<p>\\n<strong>true</strong> if the handle is released successfully; otherwise, in the event of a catastrophic failure,<strong> false</strong>."},{"content":"In this case, it generates a releaseHandleFailed MDA Managed Debugging Assistant.&lt;/p&gt;\\n","pos":[13656,13743],"source":" In this case, it generates a releaseHandleFailed MDA Managed Debugging Assistant.</p>\\n"},{"pos":[14172,14189],"content":"SetHandle(IntPtr)","needQuote":true,"nodes":[{"content":"SetHandle(IntPtr)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The pre-existing handle to use.&lt;/p&gt;\\n","pos":[15103,15145],"source":"\\n<p>The pre-existing handle to use.</p>\\n"},{"pos":[15528,15548],"content":"SetHandleAsInvalid()","needQuote":true,"nodes":[{"content":"SetHandleAsInvalid()","pos":[0,20]}]},{"pos":[16690,16700],"content":"Finalize()","needQuote":true,"nodes":[{"content":"Finalize()","pos":[0,10]}]},{"pos":[17871,17901],"content":"System.Runtime.InteropServices","needQuote":true,"nodes":[{"content":"System.Runtime.InteropServices","pos":[0,30]}]},{"pos":[18104,18110],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18260,18271],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[18446,18456],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[18551,18559],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[18628,18629],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18656,18657],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18727,18735],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[18804,18805],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18832,18833],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19016,19030],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[19149,19155],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19222,19223],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19273,19279],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19339,19340],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19423,19429],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19496,19497],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19547,19553],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19613,19614],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19828,19850],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[19998,20004],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20071,20072],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20122,20128],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20189,20190]},{"pos":[20245,20251],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20311,20312],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20409,20415],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20482,20483],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20533,20539],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20600,20601]},{"pos":[20656,20662],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20722,20723],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20968,20999],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[21165,21180],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[21256,21257],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21307,21313],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21374,21375]},{"pos":[21430,21436],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21496,21497],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21603,21618],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[21694,21695],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21745,21751],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21812,21813]},{"pos":[21868,21874],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21934,21935],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22165,22178],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[22279,22290],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[22362,22363],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22390,22391],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22464,22475],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[22547,22548],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22575,22576],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22751,22760],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[22853,22860],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[22928,22929],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22956,22957],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23026,23033],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[23101,23102],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23129,23130],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23305,23322],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[23431,23446],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[23522,23523],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23550,23551],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23628,23643],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[23719,23720],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23747,23748],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23893,23899],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[24030,24036],"content":"IntPtr","needQuote":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"pos":[24182,24189],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[24362,24371],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[24474,24481],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[24533,24534],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24561,24562],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24636,24643],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[24695,24696],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24723,24724],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24898,24915],"content":"TypeLoadException","needQuote":true,"nodes":[{"content":"TypeLoadException","pos":[0,17]}]}],"content":"items:\n- uid: System.Runtime.InteropServices.CriticalHandle\n  commentId: T:System.Runtime.InteropServices.CriticalHandle\n  id: CriticalHandle\n  parent: System.Runtime.InteropServices\n  children:\n  - System.Runtime.InteropServices.CriticalHandle.#ctor(System.IntPtr)\n  - System.Runtime.InteropServices.CriticalHandle.Dispose\n  - System.Runtime.InteropServices.CriticalHandle.Dispose(System.Boolean)\n  - System.Runtime.InteropServices.CriticalHandle.Finalize\n  - System.Runtime.InteropServices.CriticalHandle.handle\n  - System.Runtime.InteropServices.CriticalHandle.IsClosed\n  - System.Runtime.InteropServices.CriticalHandle.IsInvalid\n  - System.Runtime.InteropServices.CriticalHandle.ReleaseHandle\n  - System.Runtime.InteropServices.CriticalHandle.SetHandle(System.IntPtr)\n  - System.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid\n  langs:\n  - csharp\n  - vb\n  name: CriticalHandle\n  fullName: System.Runtime.InteropServices.CriticalHandle\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/CriticalHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CriticalHandle\n    path: src/mscorlib/src/System/Runtime/InteropServices/CriticalHandle.cs\n    startLine: 141\n  assemblies:\n  - System.Runtime.Handles\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Represents a wrapper class for handle resources.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public abstract class CriticalHandle : CriticalFinalizerObject, IDisposable\n    content.vb: >-\n      <SecurityCritical>\n\n      Public MustInherit Class CriticalHandle\n          Inherits CriticalFinalizerObject\n          Implements IDisposable\n  seealso:\n  - type: System.Runtime.InteropServices.SafeHandle\n    commentId: T:System.Runtime.InteropServices.SafeHandle\n  - type: Microsoft.Win32.SafeHandles\n    commentId: N:Microsoft.Win32.SafeHandles\n  see:\n  - type: System.Security.Permissions.SecurityAction.InheritanceDemand\n    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: CriticalHandle\n- uid: System.Runtime.InteropServices.CriticalHandle.handle\n  commentId: F:System.Runtime.InteropServices.CriticalHandle.handle\n  id: handle\n  parent: System.Runtime.InteropServices.CriticalHandle\n  langs:\n  - csharp\n  - vb\n  name: handle\n  fullName: System.Runtime.InteropServices.CriticalHandle.handle\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/CriticalHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: handle\n    path: src/mscorlib/src/System/Runtime/InteropServices/CriticalHandle.cs\n    startLine: 152\n  assemblies:\n  - System.Runtime.Handles\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Specifies the handle to be wrapped.</p>\\n\"\n  syntax:\n    content: protected IntPtr handle\n    content.vb: Protected handle As IntPtr\n    return:\n      type: System.IntPtr\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: CriticalHandle.handle\n- uid: System.Runtime.InteropServices.CriticalHandle.#ctor(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.CriticalHandle.#ctor(System.IntPtr)\n  id: '#ctor(System.IntPtr)'\n  parent: System.Runtime.InteropServices.CriticalHandle\n  langs:\n  - csharp\n  - vb\n  name: CriticalHandle(IntPtr)\n  fullName: System.Runtime.InteropServices.CriticalHandle.CriticalHandle(System.IntPtr)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/CriticalHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Runtime/InteropServices/CriticalHandle.cs\n    startLine: 156\n  assemblies:\n  - System.Runtime.Handles\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Runtime.InteropServices.CriticalHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified invalid handle value.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      protected CriticalHandle(IntPtr invalidHandleValue)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Protected Sub New(invalidHandleValue As IntPtr)\n    parameters:\n    - id: invalidHandleValue\n      type: System.IntPtr\n      description: \"\\n<p>The value of an invalid handle (usually 0 or -1).</p>\\n\"\n  exceptions:\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>The derived class resides in an assembly without unmanaged code access permission.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)\n    commentId: M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)\n  see:\n  - type: System.Security.Permissions.SecurityAction.InheritanceDemand\n    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: CriticalHandle.CriticalHandle(IntPtr)\n- uid: System.Runtime.InteropServices.CriticalHandle.IsClosed\n  commentId: P:System.Runtime.InteropServices.CriticalHandle.IsClosed\n  id: IsClosed\n  parent: System.Runtime.InteropServices.CriticalHandle\n  langs:\n  - csharp\n  - vb\n  name: IsClosed\n  fullName: System.Runtime.InteropServices.CriticalHandle.IsClosed\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/CriticalHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsClosed\n    path: src/mscorlib/src/System/Runtime/InteropServices/CriticalHandle.cs\n    startLine: 217\n  assemblies:\n  - System.Runtime.Handles\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Gets a value indicating whether the handle is closed.</p>\\n\"\n  syntax:\n    content: >-\n      public bool IsClosed\n\n      {\n          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n          get;\n      }\n    content.vb: Public ReadOnly Property IsClosed As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the handle is closed; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.SafeHandle.IsInvalid\n    commentId: P:System.Runtime.InteropServices.SafeHandle.IsInvalid\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CriticalHandle.IsClosed\n- uid: System.Runtime.InteropServices.CriticalHandle.IsInvalid\n  commentId: P:System.Runtime.InteropServices.CriticalHandle.IsInvalid\n  id: IsInvalid\n  parent: System.Runtime.InteropServices.CriticalHandle\n  langs:\n  - csharp\n  - vb\n  name: IsInvalid\n  fullName: System.Runtime.InteropServices.CriticalHandle.IsInvalid\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/CriticalHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsInvalid\n    path: src/mscorlib/src/System/Runtime/InteropServices/CriticalHandle.cs\n    startLine: 226\n  assemblies:\n  - System.Runtime.Handles\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>When overridden in a derived class, gets a value indicating whether the handle value is invalid.</p>\\n\"\n  syntax:\n    content: >-\n      public abstract bool IsInvalid\n\n      {\n          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n          get;\n      }\n    content.vb: Public MustOverride ReadOnly Property IsInvalid As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the handle is valid; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.SafeHandle.IsInvalid\n    commentId: P:System.Runtime.InteropServices.SafeHandle.IsInvalid\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: CriticalHandle.IsInvalid\n- uid: System.Runtime.InteropServices.CriticalHandle.Dispose\n  commentId: M:System.Runtime.InteropServices.CriticalHandle.Dispose\n  id: Dispose\n  parent: System.Runtime.InteropServices.CriticalHandle\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Runtime.InteropServices.CriticalHandle.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/CriticalHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/Runtime/InteropServices/CriticalHandle.cs\n    startLine: 237\n  assemblies:\n  - System.Runtime.Handles\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Releases all resources used by the <xref href=\\\"System.Runtime.InteropServices.CriticalHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public void Dispose()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  attributes:\n  - type: System.Security.SecuritySafeCriticalAttribute\n    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CriticalHandle.Dispose()\n- uid: System.Runtime.InteropServices.CriticalHandle.Dispose(System.Boolean)\n  commentId: M:System.Runtime.InteropServices.CriticalHandle.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Runtime.InteropServices.CriticalHandle\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Runtime.InteropServices.CriticalHandle.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/CriticalHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/Runtime/InteropServices/CriticalHandle.cs\n    startLine: 244\n  assemblies:\n  - System.Runtime.Handles\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.Runtime.InteropServices.CriticalHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class specifying whether to perform a normal dispose operation.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      protected virtual void Dispose(bool disposing)\n    content.vb: >-\n      <SecurityCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> for a normal dispose operation; <strong>false</strong> to finalize the handle.</p>\\n\"\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: CriticalHandle.Dispose(Boolean)\n- uid: System.Runtime.InteropServices.CriticalHandle.ReleaseHandle\n  commentId: M:System.Runtime.InteropServices.CriticalHandle.ReleaseHandle\n  id: ReleaseHandle\n  parent: System.Runtime.InteropServices.CriticalHandle\n  langs:\n  - csharp\n  - vb\n  name: ReleaseHandle()\n  fullName: System.Runtime.InteropServices.CriticalHandle.ReleaseHandle()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/CriticalHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReleaseHandle\n    path: src/mscorlib/src/System/Runtime/InteropServices/CriticalHandle.cs\n    startLine: 270\n  assemblies:\n  - System.Runtime.Handles\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>When overridden in a derived class, executes the code required to free the handle.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      protected abstract bool ReleaseHandle()\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Protected MustOverride Function ReleaseHandle As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the handle is released successfully; otherwise, in the event of a catastrophic failure,<strong> false</strong>. In this case, it generates a releaseHandleFailed MDA Managed Debugging Assistant.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - abstract\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  nameWithType: CriticalHandle.ReleaseHandle()\n- uid: System.Runtime.InteropServices.CriticalHandle.SetHandle(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.CriticalHandle.SetHandle(System.IntPtr)\n  id: SetHandle(System.IntPtr)\n  parent: System.Runtime.InteropServices.CriticalHandle\n  langs:\n  - csharp\n  - vb\n  name: SetHandle(IntPtr)\n  fullName: System.Runtime.InteropServices.CriticalHandle.SetHandle(System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/CriticalHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetHandle\n    path: src/mscorlib/src/System/Runtime/InteropServices/CriticalHandle.cs\n    startLine: 210\n  assemblies:\n  - System.Runtime.Handles\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Sets the handle to the specified pre-existing handle.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      protected void SetHandle(IntPtr handle)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Protected Sub SetHandle(handle As IntPtr)\n    parameters:\n    - id: handle\n      type: System.IntPtr\n      description: \"\\n<p>The pre-existing handle to use.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: CriticalHandle.SetHandle(IntPtr)\n- uid: System.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid\n  commentId: M:System.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid\n  id: SetHandleAsInvalid\n  parent: System.Runtime.InteropServices.CriticalHandle\n  langs:\n  - csharp\n  - vb\n  name: SetHandleAsInvalid()\n  fullName: System.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/CriticalHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetHandleAsInvalid\n    path: src/mscorlib/src/System/Runtime/InteropServices/CriticalHandle.cs\n    startLine: 255\n  assemblies:\n  - System.Runtime.Handles\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Marks a handle as invalid.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public void SetHandleAsInvalid()\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Sub SetHandleAsInvalid\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CriticalHandle.SetHandleAsInvalid()\n- uid: System.Runtime.InteropServices.CriticalHandle.Finalize\n  commentId: M:System.Runtime.InteropServices.CriticalHandle.Finalize\n  id: Finalize\n  parent: System.Runtime.InteropServices.CriticalHandle\n  langs:\n  - csharp\n  - vb\n  name: Finalize()\n  fullName: System.Runtime.InteropServices.CriticalHandle.Finalize()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/CriticalHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Finalize\n    path: src/mscorlib/src/System/Runtime/InteropServices/CriticalHandle.cs\n    startLine: 175\n  assemblies:\n  - System.Runtime.Handles\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Frees all resources associated with the handle.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      protected void Finalize()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Protected Sub Finalize\n  seealso:\n  - type: System.Runtime.InteropServices.CriticalHandle.Dispose\n    commentId: M:System.Runtime.InteropServices.CriticalHandle.Dispose\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: CriticalHandle.Finalize()\nreferences:\n- uid: System.Runtime.InteropServices\n  isExternal: false\n  name: System.Runtime.InteropServices\n  fullName: System.Runtime.InteropServices\n  nameWithType: System.Runtime.InteropServices\n  commentId: N:System.Runtime.InteropServices\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  fullName: System.IntPtr\n  nameWithType: IntPtr\n  commentId: T:System.IntPtr\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDisposable.Dispose()\n  commentId: M:System.IDisposable.Dispose\n- uid: System.TypeLoadException\n  parent: System\n  isExternal: false\n  name: TypeLoadException\n  fullName: System.TypeLoadException\n  nameWithType: TypeLoadException\n  commentId: T:System.TypeLoadException\n"}