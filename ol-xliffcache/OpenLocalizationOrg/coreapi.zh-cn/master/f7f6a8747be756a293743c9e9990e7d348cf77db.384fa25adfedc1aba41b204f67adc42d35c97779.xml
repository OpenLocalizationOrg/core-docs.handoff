{"nodes":[{"pos":[1484,1496],"content":"UTF7Encoding","needQuote":true,"nodes":[{"content":"UTF7Encoding","pos":[0,12]}]},{"pos":[5070,5084],"content":"UTF7Encoding()","needQuote":true,"nodes":[{"content":"UTF7Encoding()","pos":[0,14]}]},{"pos":[6013,6034],"content":"UTF7Encoding(Boolean)","needQuote":true,"nodes":[{"content":"UTF7Encoding(Boolean)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to specify that optional characters are allowed; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[6853,6965],"source":"\\n<p>\\n<strong>true</strong> to specify that optional characters are allowed; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[6966,6972],"source":" </p>\\n"},{"pos":[7297,7311],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[9316,9342],"content":"GetByteCount(Char*, Int32)","needQuote":true,"nodes":[{"content":"GetByteCount(Char*, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;A pointer to the first character to encode.","pos":[10337,10385],"source":"\\n<p>A pointer to the first character to encode."},{"content":"&lt;/p&gt;\\n","pos":[10386,10392],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[10455,10495],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[10496,10502],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes produced by encoding the specified characters.&lt;/p&gt;\\n","pos":[10561,10638],"source":"\\n<p>The number of bytes produced by encoding the specified characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing &lt;/strong&gt;in Visual Basic .NET).","pos":[10832,10927],"source":"\\n<p>\\n<em>chars</em> is <strong>null </strong>(<strong>Nothing </strong>in Visual Basic .NET)."},{"content":"&lt;/p&gt;\\n","pos":[10928,10934],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an int.","pos":[11051,11210],"source":"\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an int."},{"content":"&lt;/p&gt;\\n","pos":[11211,11217],"source":" </p>\\n"},{"pos":[13021,13055],"content":"GetByteCount(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetByteCount(Char[], Int32, Int32)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The character array containing the set of characters to encode.","pos":[13983,14051],"source":"\\n<p>The character array containing the set of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[14052,14058],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first character to encode.","pos":[14121,14169],"source":"\\n<p>The index of the first character to encode."},{"content":"&lt;/p&gt;\\n","pos":[14170,14176],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[14239,14279],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[14280,14286],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes produced by encoding the specified characters.&lt;/p&gt;\\n","pos":[14345,14422],"source":"\\n<p>The number of bytes produced by encoding the specified characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).","pos":[14630,14704],"source":"\\n<p>\\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>)."},{"content":"&lt;/p&gt;\\n","pos":[14705,14711],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not denote a valid range in &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an int.","pos":[14828,15110],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an int."},{"content":"&lt;/p&gt;\\n","pos":[15111,15117],"source":" </p>\\n"},{"pos":[16639,16659],"content":"GetByteCount(String)","needQuote":true,"nodes":[{"content":"GetByteCount(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The number of bytes produced by encoding the specified characters.&lt;/p&gt;\\n","pos":[17800,17877],"source":"\\n<p>The number of bytes produced by encoding the specified characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).","pos":[18059,18129],"source":"\\n<p>\\n<em>s</em> is <strong>null </strong>(<strong>Nothing</strong>)."},{"content":"&lt;/p&gt;\\n","pos":[18130,18136],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an int.","pos":[18253,18354],"source":"\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an int."},{"content":"&lt;/p&gt;\\n","pos":[18355,18361],"source":" </p>\\n"},{"pos":[19760,19796],"content":"GetBytes(Char*, Int32, Byte*, Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Char*, Int32, Byte*, Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;A pointer to the first character to encode.","pos":[20914,20962],"source":"\\n<p>A pointer to the first character to encode."},{"content":"&lt;/p&gt;\\n","pos":[20963,20969],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[21036,21076],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[21077,21083],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A pointer to the location at which to start writing the resulting sequence of bytes.","pos":[21146,21235],"source":"\\n<p>A pointer to the location at which to start writing the resulting sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[21236,21242],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of bytes to write.","pos":[21309,21351],"source":"\\n<p>The maximum number of bytes to write."},{"content":"&lt;/p&gt;\\n","pos":[21352,21358],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of bytes written at the location indicated by &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n","pos":[21417,21507],"source":"\\n<p>The actual number of bytes written at the location indicated by <em>bytes</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).","pos":[21723,21889],"source":"\\n<p>\\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>)."},{"content":"&lt;/p&gt;\\n","pos":[21890,21896],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charCount&lt;/em&gt; or &lt;em&gt;byteCount&lt;/em&gt; is less than zero.","pos":[22013,22079],"source":"\\n<p>\\n<em>charCount</em> or <em>byteCount</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[22080,22086],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;byteCount&lt;/em&gt; is less than the resulting number of bytes.","pos":[22183,22252],"source":"\\n<p>\\n<em>byteCount</em> is less than the resulting number of bytes."},{"content":"&lt;/p&gt;\\n","pos":[22253,22259],"source":" </p>\\n"},{"pos":[24094,24139],"content":"GetBytes(Char[], Int32, Int32, Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Char[], Int32, Int32, Byte[], Int32)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The character array containing the set of characters to encode.","pos":[25150,25218],"source":"\\n<p>The character array containing the set of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[25219,25225],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first character to encode.","pos":[25292,25340],"source":"\\n<p>The index of the first character to encode."},{"content":"&lt;/p&gt;\\n","pos":[25341,25347],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[25414,25454],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[25455,25461],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The byte array to contain the resulting sequence of bytes.","pos":[25525,25588],"source":"\\n<p>The byte array to contain the resulting sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[25589,25595],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index at which to start writing the resulting sequence of bytes.","pos":[25662,25735],"source":"\\n<p>The index at which to start writing the resulting sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[25736,25742],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of bytes written into &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n","pos":[25801,25867],"source":"\\n<p>The actual number of bytes written into <em>bytes</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).","pos":[26098,26264],"source":"\\n<p>\\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>)."},{"content":"&lt;/p&gt;\\n","pos":[26265,26271],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; or &lt;em&gt;charCount&lt;/em&gt; or &lt;em&gt;byteIndex&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; and &lt;em&gt;charCount&lt;/em&gt; do not denote a valid range in &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;byteIndex&lt;/em&gt; is not a valid index in &lt;em&gt;bytes&lt;/em&gt;.","pos":[26388,26672],"source":"\\n<p>\\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteIndex</em> is not a valid index in <em>bytes</em>."},{"content":"&lt;/p&gt;\\n","pos":[26673,26679],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; does not have enough capacity from &lt;em&gt;byteIndex&lt;/em&gt; to the end of the array to accommodate the resulting bytes.","pos":[26776,26911],"source":"\\n<p>\\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes."},{"content":"&lt;/p&gt;\\n","pos":[26912,26918],"source":" </p>\\n"},{"pos":[28597,28642],"content":"GetBytes(String, Int32, Int32, Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBytes(String, Int32, Int32, Byte[], Int32)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The index of the first character to encode.","pos":[29953,30001],"source":"\\n<p>The index of the first character to encode."},{"content":"&lt;/p&gt;\\n","pos":[30002,30008],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[30075,30115],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[30116,30122],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The byte array to contain the resulting sequence of bytes.","pos":[30186,30249],"source":"\\n<p>The byte array to contain the resulting sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[30250,30256],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index at which to start writing the resulting sequence of bytes.","pos":[30323,30396],"source":"\\n<p>The index at which to start writing the resulting sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[30397,30403],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of bytes written into &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n","pos":[30462,30528],"source":"\\n<p>The actual number of bytes written into <em>bytes</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).","pos":[30759,30921],"source":"\\n<p>\\n<em>s</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>)."},{"content":"&lt;/p&gt;\\n","pos":[30922,30928],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; or &lt;em&gt;charCount&lt;/em&gt; or &lt;em&gt;byteIndex&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; and &lt;em&gt;charCount&lt;/em&gt; do not denote a valid range in &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;byteIndex&lt;/em&gt; is not a valid index in &lt;em&gt;bytes&lt;/em&gt;.","pos":[31045,31329],"source":"\\n<p>\\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteIndex</em> is not a valid index in <em>bytes</em>."},{"content":"&lt;/p&gt;\\n","pos":[31330,31336],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; does not have enough capacity from &lt;em&gt;byteIndex&lt;/em&gt; to the end of the array to accommodate the resulting bytes.","pos":[31433,31568],"source":"\\n<p>\\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes."},{"content":"&lt;/p&gt;\\n","pos":[31569,31575],"source":" </p>\\n"},{"pos":[33143,33169],"content":"GetCharCount(Byte*, Int32)","needQuote":true,"nodes":[{"content":"GetCharCount(Byte*, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;A pointer to the first byte to decode.","pos":[34164,34207],"source":"\\n<p>A pointer to the first byte to decode."},{"content":"&lt;/p&gt;\\n","pos":[34208,34214],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[34277,34312],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[34313,34319],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters produced by decoding the specified sequence of bytes.&lt;/p&gt;\\n","pos":[34378,34467],"source":"\\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).","pos":[34661,34735],"source":"\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>)."},{"content":"&lt;/p&gt;\\n","pos":[34736,34742],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The resulting number of characters is greater than the maximum number that can be returned as an int.","pos":[34859,35023],"source":"\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of characters is greater than the maximum number that can be returned as an int."},{"content":"&lt;/p&gt;\\n","pos":[35024,35030],"source":" </p>\\n"},{"pos":[36802,36836],"content":"GetCharCount(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetCharCount(Byte[], Int32, Int32)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The byte array containing the sequence of bytes to decode.","pos":[37764,37827],"source":"\\n<p>The byte array containing the sequence of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[37828,37834],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first byte to decode.","pos":[37897,37940],"source":"\\n<p>The index of the first byte to decode."},{"content":"&lt;/p&gt;\\n","pos":[37941,37947],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[38010,38045],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[38046,38052],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters produced by decoding the specified sequence of bytes.&lt;/p&gt;\\n","pos":[38111,38200],"source":"\\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).","pos":[38408,38482],"source":"\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>)."},{"content":"&lt;/p&gt;\\n","pos":[38483,38489],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not denote a valid range in &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The resulting number of characters is greater than the maximum number that can be returned as an int.","pos":[38606,38893],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>.</p>\\n<p>-or- </p>\\n<p>The resulting number of characters is greater than the maximum number that can be returned as an int."},{"content":"&lt;/p&gt;\\n","pos":[38894,38900],"source":" </p>\\n"},{"pos":[40494,40530],"content":"GetChars(Byte*, Int32, Char*, Int32)","needQuote":true,"nodes":[{"content":"GetChars(Byte*, Int32, Char*, Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;A pointer to the first byte to decode.","pos":[41648,41691],"source":"\\n<p>A pointer to the first byte to decode."},{"content":"&lt;/p&gt;\\n","pos":[41692,41698],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[41765,41800],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[41801,41807],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A pointer to the location at which to start writing the resulting set of characters.","pos":[41870,41959],"source":"\\n<p>A pointer to the location at which to start writing the resulting set of characters."},{"content":"&lt;/p&gt;\\n","pos":[41960,41966],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of characters to write.","pos":[42033,42080],"source":"\\n<p>The maximum number of characters to write."},{"content":"&lt;/p&gt;\\n","pos":[42081,42087],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of characters written at the location indicated by &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n","pos":[42146,42241],"source":"\\n<p>The actual number of characters written at the location indicated by <em>chars</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).","pos":[42457,42623],"source":"\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>)."},{"content":"&lt;/p&gt;\\n","pos":[42624,42630],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;byteCount&lt;/em&gt; or &lt;em&gt;charCount&lt;/em&gt; is less than zero.","pos":[42747,42813],"source":"\\n<p>\\n<em>byteCount</em> or <em>charCount</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[42814,42820],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charCount&lt;/em&gt; is less than the resulting number of characters.","pos":[42917,42991],"source":"\\n<p>\\n<em>charCount</em> is less than the resulting number of characters."},{"content":"&lt;/p&gt;\\n","pos":[42992,42998],"source":" </p>\\n"},{"pos":[45014,45059],"content":"GetChars(Byte[], Int32, Int32, Char[], Int32)","needQuote":true,"nodes":[{"content":"GetChars(Byte[], Int32, Int32, Char[], Int32)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The byte array containing the sequence of bytes to decode.","pos":[46070,46133],"source":"\\n<p>The byte array containing the sequence of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[46134,46140],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first byte to decode.","pos":[46207,46250],"source":"\\n<p>The index of the first byte to decode."},{"content":"&lt;/p&gt;\\n","pos":[46251,46257],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[46324,46359],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[46360,46366],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character array to contain the resulting set of characters.","pos":[46430,46498],"source":"\\n<p>The character array to contain the resulting set of characters."},{"content":"&lt;/p&gt;\\n","pos":[46499,46505],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index at which to start writing the resulting set of characters.","pos":[46572,46645],"source":"\\n<p>The index at which to start writing the resulting set of characters."},{"content":"&lt;/p&gt;\\n","pos":[46646,46652],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of characters written into &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n","pos":[46711,46782],"source":"\\n<p>The actual number of characters written into <em>chars</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).","pos":[47013,47179],"source":"\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>)."},{"content":"&lt;/p&gt;\\n","pos":[47180,47186],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;byteIndex&lt;/em&gt; or &lt;em&gt;byteCount&lt;/em&gt; or &lt;em&gt;charIndex&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;byteindex&lt;/em&gt; and &lt;em&gt;byteCount&lt;/em&gt; do not denote a valid range in &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; is not a valid index in &lt;em&gt;chars&lt;/em&gt;.","pos":[47303,47587],"source":"\\n<p>\\n<em>byteIndex</em> or <em>byteCount</em> or <em>charIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteindex</em> and <em>byteCount</em> do not denote a valid range in <em>bytes</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> is not a valid index in <em>chars</em>."},{"content":"&lt;/p&gt;\\n","pos":[47588,47594],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; does not have enough capacity from &lt;em&gt;charIndex&lt;/em&gt; to the end of the array to accommodate the resulting characters.","pos":[47691,47831],"source":"\\n<p>\\n<em>chars</em> does not have enough capacity from <em>charIndex</em> to the end of the array to accommodate the resulting characters."},{"content":"&lt;/p&gt;\\n","pos":[47832,47838],"source":" </p>\\n"},{"pos":[49500,49512],"content":"GetDecoder()","needQuote":true,"nodes":[{"content":"GetDecoder()","pos":[0,12]}]},{"pos":[51520,51532],"content":"GetEncoder()","needQuote":true,"nodes":[{"content":"GetEncoder()","pos":[0,12]}]},{"pos":[53365,53378],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[54170,54215],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[54630,54652],"content":"GetMaxByteCount(Int32)","needQuote":true,"nodes":[{"content":"GetMaxByteCount(Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[55424,55464],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[55465,55471],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of bytes produced by encoding the specified number of characters.&lt;/p&gt;\\n","pos":[55530,55625],"source":"\\n<p>The maximum number of bytes produced by encoding the specified number of characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charCount&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an int.","pos":[55821,55984],"source":"\\n<p>\\n<em>charCount</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an int."},{"content":"&lt;/p&gt;\\n","pos":[55985,55991],"source":" </p>\\n"},{"pos":[57346,57368],"content":"GetMaxCharCount(Int32)","needQuote":true,"nodes":[{"content":"GetMaxCharCount(Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[58140,58175],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[58176,58182],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of characters produced by decoding the specified number of bytes.&lt;/p&gt;\\n","pos":[58241,58336],"source":"\\n<p>The maximum number of characters produced by decoding the specified number of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;byteCount&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The resulting number of characters is greater than the maximum number that can be returned as an int.","pos":[58532,58700],"source":"\\n<p>\\n<em>byteCount</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of characters is greater than the maximum number that can be returned as an int."},{"content":"&lt;/p&gt;\\n","pos":[58701,58707],"source":" </p>\\n"},{"pos":[60304,60335],"content":"GetString(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetString(Byte[], Int32, Int32)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The byte array containing the sequence of bytes to decode.","pos":[61257,61320],"source":"\\n<p>The byte array containing the sequence of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[61321,61327],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first byte to decode.","pos":[61390,61433],"source":"\\n<p>The index of the first byte to decode."},{"content":"&lt;/p&gt;\\n","pos":[61434,61440],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[61503,61538],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[61539,61545],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).","pos":[61964,62038],"source":"\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>)."},{"content":"&lt;/p&gt;\\n","pos":[62039,62045],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not denote a valid range in &lt;em&gt;bytes&lt;/em&gt;.","pos":[62162,62325],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>."},{"content":"&lt;/p&gt;\\n","pos":[62326,62332],"source":" </p>\\n"},{"pos":[63852,63863],"content":"System.Text","needQuote":true,"nodes":[{"content":"System.Text","pos":[0,11]}]},{"pos":[64009,64015],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[64172,64180],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"pos":[64344,64354],"content":"ICloneable","needQuote":true,"nodes":[{"content":"ICloneable","pos":[0,10]}]},{"pos":[64596,64631],"content":"Convert(Encoding, Encoding, Byte[])","needQuote":true,"nodes":[{"content":"Convert(Encoding, Encoding, Byte[])","pos":[0,35]}]},{"pos":[65002,65009],"content":"Convert","needQuote":true,"nodes":[{"content":"Convert","pos":[0,7]}]},{"pos":[65084,65085],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65142,65150],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[65218,65219]},{"pos":[65281,65289],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[65357,65358]},{"pos":[65411,65415],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[65474,65476]},{"pos":[65507,65508],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65641,65648],"content":"Convert","needQuote":true,"nodes":[{"content":"Convert","pos":[0,7]}]},{"pos":[65723,65724],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65781,65789],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[65857,65858]},{"pos":[65920,65928],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[65996,65997]},{"pos":[66050,66054],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[66112,66114],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[66142,66143],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66563,66612],"content":"Convert(Encoding, Encoding, Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Convert(Encoding, Encoding, Byte[], Int32, Int32)","pos":[0,49]}]},{"pos":[67079,67086],"content":"Convert","needQuote":true,"nodes":[{"content":"Convert","pos":[0,7]}]},{"pos":[67161,67162],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67219,67227],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[67295,67296]},{"pos":[67358,67366],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[67434,67435]},{"pos":[67488,67492],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[67551,67553]},{"content":",","pos":[67585,67586]},{"pos":[67640,67645],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[67705,67706]},{"pos":[67760,67765],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[67824,67825],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67984,67991],"content":"Convert","needQuote":true,"nodes":[{"content":"Convert","pos":[0,7]}]},{"pos":[68066,68067],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68124,68132],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[68200,68201]},{"pos":[68263,68271],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[68339,68340]},{"pos":[68393,68397],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[68455,68457],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[68486,68487]},{"pos":[68541,68546],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[68606,68607]},{"pos":[68661,68666],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[68725,68726],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69156,69190],"content":"RegisterProvider(EncodingProvider)","needQuote":true,"nodes":[{"content":"RegisterProvider(EncodingProvider)","pos":[0,34]}]},{"pos":[69373,69389],"content":"RegisterProvider","needQuote":true,"nodes":[{"content":"RegisterProvider","pos":[0,16]}]},{"pos":[69473,69474],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69539,69555],"content":"EncodingProvider","needQuote":true,"nodes":[{"content":"EncodingProvider","pos":[0,16]}]},{"pos":[69630,69631],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69746,69762],"content":"RegisterProvider","needQuote":true,"nodes":[{"content":"RegisterProvider","pos":[0,16]}]},{"pos":[69846,69847],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69912,69928],"content":"EncodingProvider","needQuote":true,"nodes":[{"content":"EncodingProvider","pos":[0,16]}]},{"pos":[70003,70004],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70276,70294],"content":"GetEncoding(Int32)","needQuote":true,"nodes":[{"content":"GetEncoding(Int32)","pos":[0,18]}]},{"pos":[70435,70446],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[70525,70526],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70575,70580],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[70639,70640],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70734,70745],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[70824,70825],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70874,70879],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[70938,70939],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71230,71282],"content":"GetEncoding(Int32, EncoderFallback, DecoderFallback)","needQuote":true,"nodes":[{"content":"GetEncoding(Int32, EncoderFallback, DecoderFallback)","pos":[0,52]}]},{"pos":[71537,71548],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[71627,71628],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71677,71682],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[71742,71743]},{"pos":[71812,71827],"content":"EncoderFallback","needQuote":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"content":",","pos":[71902,71903]},{"pos":[71972,71987],"content":"DecoderFallback","needQuote":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"pos":[72061,72062],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72212,72223],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[72302,72303],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72352,72357],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[72417,72418]},{"pos":[72487,72502],"content":"EncoderFallback","needQuote":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"content":",","pos":[72577,72578]},{"pos":[72647,72662],"content":"DecoderFallback","needQuote":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"pos":[72736,72737],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73063,73082],"content":"GetEncoding(String)","needQuote":true,"nodes":[{"content":"GetEncoding(String)","pos":[0,19]}]},{"pos":[73225,73236],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[73315,73316],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73366,73372],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[73432,73433],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73528,73539],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[73618,73619],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73669,73675],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[73735,73736],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74030,74083],"content":"GetEncoding(String, EncoderFallback, DecoderFallback)","needQuote":true,"nodes":[{"content":"GetEncoding(String, EncoderFallback, DecoderFallback)","pos":[0,53]}]},{"pos":[74340,74351],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[74430,74431],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74481,74487],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[74548,74549]},{"pos":[74618,74633],"content":"EncoderFallback","needQuote":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"content":",","pos":[74708,74709]},{"pos":[74778,74793],"content":"DecoderFallback","needQuote":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"pos":[74867,74868],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75019,75030],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[75109,75110],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75160,75166],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[75227,75228]},{"pos":[75297,75312],"content":"EncoderFallback","needQuote":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"content":",","pos":[75387,75388]},{"pos":[75457,75472],"content":"DecoderFallback","needQuote":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"pos":[75546,75547],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75861,75875],"content":"GetEncodings()","needQuote":true,"nodes":[{"content":"GetEncodings()","pos":[0,14]}]},{"pos":[75992,76004],"content":"GetEncodings","needQuote":true,"nodes":[{"content":"GetEncodings","pos":[0,12]}]},{"pos":[76084,76085],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76112,76113],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76194,76206],"content":"GetEncodings","needQuote":true,"nodes":[{"content":"GetEncodings","pos":[0,12]}]},{"pos":[76286,76287],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76314,76315],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76519,76532],"content":"GetPreamble()","needQuote":true,"nodes":[{"content":"GetPreamble()","pos":[0,13]}]},{"pos":[76647,76658],"content":"GetPreamble","needQuote":true,"nodes":[{"content":"GetPreamble","pos":[0,11]}]},{"pos":[76737,76738],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76765,76766],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76846,76857],"content":"GetPreamble","needQuote":true,"nodes":[{"content":"GetPreamble","pos":[0,11]}]},{"pos":[76936,76937],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76964,76965],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77161,77168],"content":"Clone()","needQuote":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[77271,77276],"content":"Clone","needQuote":true,"nodes":[{"content":"Clone","pos":[0,5]}]},{"pos":[77349,77350],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77377,77378],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77452,77457],"content":"Clone","needQuote":true,"nodes":[{"content":"Clone","pos":[0,5]}]},{"pos":[77530,77531],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77558,77559],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77765,77785],"content":"GetByteCount(Char[])","needQuote":true,"nodes":[{"content":"GetByteCount(Char[])","pos":[0,20]}]},{"pos":[78026,78038],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[78118,78119],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78167,78171],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[78230,78232]},{"pos":[78263,78264],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78360,78372],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[78452,78453],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78501,78505],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[78563,78565],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[78593,78594],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78880,78896],"content":"GetBytes(Char[])","needQuote":true,"nodes":[{"content":"GetBytes(Char[])","pos":[0,16]}]},{"pos":[79121,79129],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[79205,79206],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79254,79258],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[79317,79319]},{"pos":[79350,79351],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79443,79451],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[79527,79528],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79576,79580],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[79638,79640],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[79668,79669],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79969,79999],"content":"GetBytes(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Char[], Int32, Int32)","pos":[0,30]}]},{"pos":[80320,80328],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[80404,80405],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80453,80457],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[80516,80518]},{"content":",","pos":[80550,80551]},{"pos":[80605,80610],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[80670,80671]},{"pos":[80725,80730],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[80789,80790],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80908,80916],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[80992,80993],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81041,81045],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[81103,81105],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[81134,81135]},{"pos":[81189,81194],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[81254,81255]},{"pos":[81309,81314],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[81373,81374],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81702,81718],"content":"GetBytes(String)","needQuote":true,"nodes":[{"content":"GetBytes(String)","pos":[0,16]}]},{"pos":[81855,81863],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[81939,81940],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81990,81996],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[82056,82057],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82149,82157],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[82233,82234],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82284,82290],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[82350,82351],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82584,82604],"content":"GetCharCount(Byte[])","needQuote":true,"nodes":[{"content":"GetCharCount(Byte[])","pos":[0,20]}]},{"pos":[82845,82857],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[82937,82938],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82986,82990],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[83049,83051]},{"pos":[83082,83083],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83179,83191],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[83271,83272],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83320,83324],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[83382,83384],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[83412,83413],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83699,83715],"content":"GetChars(Byte[])","needQuote":true,"nodes":[{"content":"GetChars(Byte[])","pos":[0,16]}]},{"pos":[83940,83948],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[84024,84025],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84073,84077],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[84136,84138]},{"pos":[84169,84170],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84262,84270],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[84346,84347],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84395,84399],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[84457,84459],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[84487,84488],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84788,84818],"content":"GetChars(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetChars(Byte[], Int32, Int32)","pos":[0,30]}]},{"pos":[85139,85147],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[85223,85224],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85272,85276],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[85335,85337]},{"content":",","pos":[85369,85370]},{"pos":[85424,85429],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[85489,85490]},{"pos":[85544,85549],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[85608,85609],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85727,85735],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[85811,85812],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85860,85864],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[85922,85924],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[85953,85954]},{"pos":[86008,86013],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[86073,86074]},{"pos":[86128,86133],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[86192,86193],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86534,86557],"content":"GetString(Byte*, Int32)","needQuote":true,"nodes":[{"content":"GetString(Byte*, Int32)","pos":[0,23]}]},{"pos":[86721,86730],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[86807,86808],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86856,86860],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[86951,86952]},{"pos":[87006,87011],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[87070,87071],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87176,87185],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[87262,87263],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87311,87315],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[87406,87407]},{"pos":[87461,87466],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[87525,87526],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87770,87790],"content":"IsAlwaysNormalized()","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized()","pos":[0,20]}]},{"pos":[87919,87937],"content":"IsAlwaysNormalized","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized","pos":[0,18]}]},{"pos":[88023,88024],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88051,88052],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88139,88157],"content":"IsAlwaysNormalized","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized","pos":[0,18]}]},{"pos":[88243,88244],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88271,88272],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88526,88563],"content":"IsAlwaysNormalized(NormalizationForm)","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized(NormalizationForm)","pos":[0,37]}]},{"pos":[88752,88770],"content":"IsAlwaysNormalized","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized","pos":[0,18]}]},{"pos":[88856,88857],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88923,88940],"content":"NormalizationForm","needQuote":true,"nodes":[{"content":"NormalizationForm","pos":[0,17]}]},{"pos":[89016,89017],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89135,89153],"content":"IsAlwaysNormalized","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized","pos":[0,18]}]},{"pos":[89239,89240],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89306,89323],"content":"NormalizationForm","needQuote":true,"nodes":[{"content":"NormalizationForm","pos":[0,17]}]},{"pos":[89399,89400],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89677,89694],"content":"GetString(Byte[])","needQuote":true,"nodes":[{"content":"GetString(Byte[])","pos":[0,17]}]},{"pos":[89923,89932],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[90009,90010],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90058,90062],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[90121,90123]},{"pos":[90154,90155],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90248,90257],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[90334,90335],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90383,90387],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[90445,90447],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[90475,90476],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90738,90746],"content":"BodyName","needQuote":true,"nodes":[{"content":"BodyName","pos":[0,8]}]},{"pos":[90967,90979],"content":"EncodingName","needQuote":true,"nodes":[{"content":"EncodingName","pos":[0,12]}]},{"pos":[91210,91220],"content":"HeaderName","needQuote":true,"nodes":[{"content":"HeaderName","pos":[0,10]}]},{"pos":[91442,91449],"content":"WebName","needQuote":true,"nodes":[{"content":"WebName","pos":[0,7]}]},{"pos":[91670,91685],"content":"WindowsCodePage","needQuote":true,"nodes":[{"content":"WindowsCodePage","pos":[0,15]}]},{"pos":[91931,91947],"content":"IsBrowserDisplay","needQuote":true,"nodes":[{"content":"IsBrowserDisplay","pos":[0,16]}]},{"pos":[92193,92206],"content":"IsBrowserSave","needQuote":true,"nodes":[{"content":"IsBrowserSave","pos":[0,13]}]},{"pos":[92447,92464],"content":"IsMailNewsDisplay","needQuote":true,"nodes":[{"content":"IsMailNewsDisplay","pos":[0,17]}]},{"pos":[92714,92728],"content":"IsMailNewsSave","needQuote":true,"nodes":[{"content":"IsMailNewsSave","pos":[0,14]}]},{"pos":[92967,92979],"content":"IsSingleByte","needQuote":true,"nodes":[{"content":"IsSingleByte","pos":[0,12]}]},{"pos":[93215,93230],"content":"EncoderFallback","needQuote":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"pos":[93475,93490],"content":"DecoderFallback","needQuote":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"pos":[93730,93740],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[93960,93965],"content":"ASCII","needQuote":true,"nodes":[{"content":"ASCII","pos":[0,5]}]},{"pos":[94173,94181],"content":"CodePage","needQuote":true,"nodes":[{"content":"CodePage","pos":[0,8]}]},{"pos":[94397,94404],"content":"Default","needQuote":true,"nodes":[{"content":"Default","pos":[0,7]}]},{"pos":[94617,94624],"content":"Unicode","needQuote":true,"nodes":[{"content":"Unicode","pos":[0,7]}]},{"pos":[94846,94862],"content":"BigEndianUnicode","needQuote":true,"nodes":[{"content":"BigEndianUnicode","pos":[0,16]}]},{"pos":[95099,95103],"content":"UTF7","needQuote":true,"nodes":[{"content":"UTF7","pos":[0,4]}]},{"pos":[95304,95308],"content":"UTF8","needQuote":true,"nodes":[{"content":"UTF8","pos":[0,4]}]},{"pos":[95510,95515],"content":"UTF32","needQuote":true,"nodes":[{"content":"UTF32","pos":[0,5]}]},{"pos":[95709,95719],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[95814,95822],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[95891,95892],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95919,95920],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95990,95998],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[96067,96068],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96095,96096],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96293,96315],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[96463,96469],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[96536,96537],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96587,96593],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[96654,96655]},{"pos":[96710,96716],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[96776,96777],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96874,96880],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[96947,96948],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96998,97004],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[97065,97066]},{"pos":[97121,97127],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[97187,97188],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97433,97464],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[97630,97645],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[97721,97722],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97772,97778],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[97839,97840]},{"pos":[97895,97901],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[97961,97962],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98068,98083],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[98159,98160],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98210,98216],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[98277,98278]},{"pos":[98333,98339],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[98399,98400],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98626,98635],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[98728,98735],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[98803,98804],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98831,98832],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98901,98908],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[98976,98977],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99004,99005],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[99180,99197],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[99306,99321],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[99397,99398],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99425,99426],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[99503,99518],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[99594,99595],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99622,99623],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[99768,99774],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[99906,99913],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[100103,100117],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[100250,100256],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[100330,100331],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100381,100387],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[100447,100448],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100538,100544],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[100618,100619],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100669,100675],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[100735,100736],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100977,101003],"content":"GetByteCount(Char*, Int32)","needQuote":true,"nodes":[{"content":"GetByteCount(Char*, Int32)","pos":[0,26]}]},{"pos":[101173,101185],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[101265,101266],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101314,101318],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[101409,101410]},{"pos":[101464,101469],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[101528,101529],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101637,101649],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[101729,101730],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101778,101782],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[101873,101874]},{"pos":[101928,101933],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[101992,101993],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102166,102171],"content":"Char*","needQuote":true,"nodes":[{"content":"Char*","pos":[0,5]}]},{"pos":[102243,102247],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[102369,102373],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[102540,102545],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[102761,102795],"content":"GetByteCount(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetByteCount(Char[], Int32, Int32)","pos":[0,34]}]},{"pos":[103132,103144],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[103224,103225],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103273,103277],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[103336,103338]},{"content":",","pos":[103370,103371]},{"pos":[103425,103430],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[103490,103491]},{"pos":[103545,103550],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[103609,103610],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103732,103744],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[103824,103825],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103873,103877],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[103935,103937],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[103966,103967]},{"pos":[104021,104026],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[104086,104087]},{"pos":[104141,104146],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[104205,104206],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104465,104471],"content":"Char[]","needQuote":true,"nodes":[{"content":"Char[]","pos":[0,6]}]},{"pos":[104591,104595],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[104654,104656]},{"pos":[104719,104723],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[104781,104783],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[104964,104984],"content":"GetByteCount(String)","needQuote":true,"nodes":[{"content":"GetByteCount(String)","pos":[0,20]}]},{"pos":[105129,105141],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[105221,105222],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105272,105278],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[105338,105339],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105435,105447],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[105527,105528],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105578,105584],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[105644,105645],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105838,105844],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[106071,106107],"content":"GetBytes(Char*, Int32, Byte*, Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Char*, Int32, Byte*, Int32)","pos":[0,36]}]},{"pos":[106323,106331],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[106407,106408],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106456,106460],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[106551,106552]},{"pos":[106606,106611],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[106671,106672]},{"pos":[106725,106729],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[106820,106821]},{"pos":[106875,106880],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[106939,106940],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[107070,107078],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[107154,107155],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[107203,107207],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[107298,107299]},{"pos":[107353,107358],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[107418,107419]},{"pos":[107472,107476],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[107567,107568]},{"pos":[107622,107627],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[107686,107687],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[107892,107897],"content":"Byte*","needQuote":true,"nodes":[{"content":"Byte*","pos":[0,5]}]},{"pos":[107969,107973],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[108095,108099],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[108364,108409],"content":"GetBytes(Char[], Int32, Int32, Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Char[], Int32, Int32, Byte[], Int32)","pos":[0,45]}]},{"pos":[108830,108838],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[108914,108915],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[108963,108967],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[109026,109028]},{"content":",","pos":[109060,109061]},{"pos":[109115,109120],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[109180,109181]},{"pos":[109235,109240],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[109300,109301]},{"pos":[109354,109358],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[109417,109419]},{"content":",","pos":[109451,109452]},{"pos":[109506,109511],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[109570,109571],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109716,109724],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[109800,109801],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109849,109853],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[109911,109913],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[109942,109943]},{"pos":[109997,110002],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[110062,110063]},{"pos":[110117,110122],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[110182,110183]},{"pos":[110236,110240],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[110298,110300],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[110329,110330]},{"pos":[110384,110389],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[110448,110449],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110753,110759],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[110879,110883],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[110942,110944]},{"pos":[111007,111011],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[111069,111071],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[111301,111346],"content":"GetBytes(String, Int32, Int32, Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBytes(String, Int32, Int32, Byte[], Int32)","pos":[0,45]}]},{"pos":[111767,111775],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[111851,111852],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111902,111908],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[111969,111970]},{"pos":[112024,112029],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[112089,112090]},{"pos":[112144,112149],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[112209,112210]},{"pos":[112263,112267],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[112326,112328]},{"content":",","pos":[112360,112361]},{"pos":[112415,112420],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[112479,112480],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112625,112633],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[112709,112710],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112760,112766],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[112827,112828]},{"pos":[112882,112887],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[112947,112948]},{"pos":[113002,113007],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[113067,113068]},{"pos":[113121,113125],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[113183,113185],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[113214,113215]},{"pos":[113269,113274],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[113333,113334],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113735,113761],"content":"GetCharCount(Byte*, Int32)","needQuote":true,"nodes":[{"content":"GetCharCount(Byte*, Int32)","pos":[0,26]}]},{"pos":[113931,113943],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[114023,114024],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114072,114076],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[114167,114168]},{"pos":[114222,114227],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[114286,114287],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[114395,114407],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[114487,114488],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114536,114540],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[114631,114632]},{"pos":[114686,114691],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[114750,114751],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115036,115070],"content":"GetCharCount(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetCharCount(Byte[], Int32, Int32)","pos":[0,34]}]},{"pos":[115407,115419],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[115499,115500],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115548,115552],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[115611,115613]},{"content":",","pos":[115645,115646]},{"pos":[115700,115705],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[115765,115766]},{"pos":[115820,115825],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[115884,115885],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[116007,116019],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[116099,116100],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116148,116152],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[116210,116212],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[116241,116242]},{"pos":[116296,116301],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[116361,116362]},{"pos":[116416,116421],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[116480,116481],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[116859,116895],"content":"GetChars(Byte*, Int32, Char*, Int32)","needQuote":true,"nodes":[{"content":"GetChars(Byte*, Int32, Char*, Int32)","pos":[0,36]}]},{"pos":[117111,117119],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[117195,117196],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[117244,117248],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[117339,117340]},{"pos":[117394,117399],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[117459,117460]},{"pos":[117513,117517],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[117608,117609]},{"pos":[117663,117668],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[117727,117728],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117858,117866],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[117942,117943],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[117991,117995],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[118086,118087]},{"pos":[118141,118146],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[118206,118207]},{"pos":[118260,118264],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[118355,118356]},{"pos":[118410,118415],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[118474,118475],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118815,118860],"content":"GetChars(Byte[], Int32, Int32, Char[], Int32)","needQuote":true,"nodes":[{"content":"GetChars(Byte[], Int32, Int32, Char[], Int32)","pos":[0,45]}]},{"pos":[119281,119289],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[119365,119366],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119414,119418],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[119477,119479]},{"content":",","pos":[119511,119512]},{"pos":[119566,119571],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[119631,119632]},{"pos":[119686,119691],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[119751,119752]},{"pos":[119805,119809],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[119868,119870]},{"content":",","pos":[119902,119903]},{"pos":[119957,119962],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[120021,120022],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[120167,120175],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[120251,120252],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[120300,120304],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[120362,120364],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[120393,120394]},{"pos":[120448,120453],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[120513,120514]},{"pos":[120568,120573],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[120633,120634]},{"pos":[120687,120691],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[120749,120751],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[120780,120781]},{"pos":[120835,120840],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[120899,120900],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[121272,121284],"content":"GetDecoder()","needQuote":true,"nodes":[{"content":"GetDecoder()","pos":[0,12]}]},{"pos":[121397,121407],"content":"GetDecoder","needQuote":true,"nodes":[{"content":"GetDecoder","pos":[0,10]}]},{"pos":[121485,121486],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[121513,121514],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[121593,121603],"content":"GetDecoder","needQuote":true,"nodes":[{"content":"GetDecoder","pos":[0,10]}]},{"pos":[121681,121682],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[121709,121710],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[121889,121896],"content":"Decoder","needQuote":true,"nodes":[{"content":"Decoder","pos":[0,7]}]},{"pos":[122085,122097],"content":"GetEncoder()","needQuote":true,"nodes":[{"content":"GetEncoder()","pos":[0,12]}]},{"pos":[122210,122220],"content":"GetEncoder","needQuote":true,"nodes":[{"content":"GetEncoder","pos":[0,10]}]},{"pos":[122298,122299],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[122326,122327],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122406,122416],"content":"GetEncoder","needQuote":true,"nodes":[{"content":"GetEncoder","pos":[0,10]}]},{"pos":[122494,122495],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[122522,122523],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122702,122709],"content":"Encoder","needQuote":true,"nodes":[{"content":"Encoder","pos":[0,7]}]},{"pos":[122899,122912],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[123027,123038],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[123117,123118],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123145,123146],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123226,123237],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[123316,123317],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123344,123345],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123565,123587],"content":"GetMaxByteCount(Int32)","needQuote":true,"nodes":[{"content":"GetMaxByteCount(Int32)","pos":[0,22]}]},{"pos":[123736,123751],"content":"GetMaxByteCount","needQuote":true,"nodes":[{"content":"GetMaxByteCount","pos":[0,15]}]},{"pos":[123834,123835],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123884,123889],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[123948,123949],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[124047,124062],"content":"GetMaxByteCount","needQuote":true,"nodes":[{"content":"GetMaxByteCount","pos":[0,15]}]},{"pos":[124145,124146],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[124195,124200],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[124259,124260],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[124507,124529],"content":"GetMaxCharCount(Int32)","needQuote":true,"nodes":[{"content":"GetMaxCharCount(Int32)","pos":[0,22]}]},{"pos":[124678,124693],"content":"GetMaxCharCount","needQuote":true,"nodes":[{"content":"GetMaxCharCount","pos":[0,15]}]},{"pos":[124776,124777],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[124826,124831],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[124890,124891],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[124989,125004],"content":"GetMaxCharCount","needQuote":true,"nodes":[{"content":"GetMaxCharCount","pos":[0,15]}]},{"pos":[125087,125088],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125137,125142],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[125201,125202],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[125470,125501],"content":"GetString(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetString(Byte[], Int32, Int32)","pos":[0,31]}]},{"pos":[125826,125835],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[125912,125913],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125961,125965],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[126024,126026]},{"content":",","pos":[126058,126059]},{"pos":[126113,126118],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[126178,126179]},{"pos":[126233,126238],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[126297,126298],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126417,126426],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[126503,126504],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[126552,126556],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[126614,126616],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[126645,126646]},{"pos":[126700,126705],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[126765,126766]},{"pos":[126820,126825],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[126884,126885],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127170,127191],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[127385,127412],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[127626,127650],"content":"EncoderFallbackException","needQuote":true,"nodes":[{"content":"EncoderFallbackException","pos":[0,24]}]},{"pos":[127870,127887],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[128071,128095],"content":"DecoderFallbackException","needQuote":true,"nodes":[{"content":"DecoderFallbackException","pos":[0,24]}]}],"content":"items:\n- uid: System.Text.UTF7Encoding\n  commentId: T:System.Text.UTF7Encoding\n  id: UTF7Encoding\n  parent: System.Text\n  children:\n  - System.Text.UTF7Encoding.#ctor\n  - System.Text.UTF7Encoding.#ctor(System.Boolean)\n  - System.Text.UTF7Encoding.Equals(System.Object)\n  - System.Text.UTF7Encoding.GetByteCount(System.Char*,System.Int32)\n  - System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - System.Text.UTF7Encoding.GetByteCount(System.String)\n  - System.Text.UTF7Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  - System.Text.UTF7Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Text.UTF7Encoding.GetCharCount(System.Byte*,System.Int32)\n  - System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - System.Text.UTF7Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  - System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - System.Text.UTF7Encoding.GetDecoder\n  - System.Text.UTF7Encoding.GetEncoder\n  - System.Text.UTF7Encoding.GetHashCode\n  - System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\n  - System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\n  - System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  - vb\n  name: UTF7Encoding\n  fullName: System.Text.UTF7Encoding\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: UTF7Encoding\n    path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n    startLine: 16\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Represents a UTF-7 encoding of Unicode characters.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public class UTF7Encoding : Encoding, ICloneable\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public Class UTF7Encoding\n          Inherits Encoding\n          Implements ICloneable\n  seealso:\n  - type: System.Text.Decoder\n    commentId: T:System.Text.Decoder\n  - type: System.Text.Encoder\n    commentId: T:System.Text.Encoder\n  inheritance:\n  - System.Object\n  - System.Text.Encoding\n  implements:\n  - System.ICloneable\n  inheritedMembers:\n  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n  - System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n  - System.Text.Encoding.GetEncoding(System.Int32)\n  - System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  - System.Text.Encoding.GetEncoding(System.String)\n  - System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  - System.Text.Encoding.GetEncodings\n  - System.Text.Encoding.GetPreamble\n  - System.Text.Encoding.Clone\n  - System.Text.Encoding.GetByteCount(System.Char[])\n  - System.Text.Encoding.GetBytes(System.Char[])\n  - System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n  - System.Text.Encoding.GetBytes(System.String)\n  - System.Text.Encoding.GetCharCount(System.Byte[])\n  - System.Text.Encoding.GetChars(System.Byte[])\n  - System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n  - System.Text.Encoding.GetString(System.Byte*,System.Int32)\n  - System.Text.Encoding.IsAlwaysNormalized\n  - System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n  - System.Text.Encoding.GetString(System.Byte[])\n  - System.Text.Encoding.BodyName\n  - System.Text.Encoding.EncodingName\n  - System.Text.Encoding.HeaderName\n  - System.Text.Encoding.WebName\n  - System.Text.Encoding.WindowsCodePage\n  - System.Text.Encoding.IsBrowserDisplay\n  - System.Text.Encoding.IsBrowserSave\n  - System.Text.Encoding.IsMailNewsDisplay\n  - System.Text.Encoding.IsMailNewsSave\n  - System.Text.Encoding.IsSingleByte\n  - System.Text.Encoding.EncoderFallback\n  - System.Text.Encoding.DecoderFallback\n  - System.Text.Encoding.IsReadOnly\n  - System.Text.Encoding.ASCII\n  - System.Text.Encoding.CodePage\n  - System.Text.Encoding.Default\n  - System.Text.Encoding.Unicode\n  - System.Text.Encoding.BigEndianUnicode\n  - System.Text.Encoding.UTF7\n  - System.Text.Encoding.UTF8\n  - System.Text.Encoding.UTF32\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: UTF7Encoding\n- uid: System.Text.UTF7Encoding.#ctor\n  commentId: M:System.Text.UTF7Encoding.#ctor\n  id: '#ctor'\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  - vb\n  name: UTF7Encoding()\n  fullName: System.Text.UTF7Encoding.UTF7Encoding()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n    startLine: 50\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.UTF7Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public UTF7Encoding()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UTF7Encoding.UTF7Encoding()\n- uid: System.Text.UTF7Encoding.#ctor(System.Boolean)\n  commentId: M:System.Text.UTF7Encoding.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  - vb\n  name: UTF7Encoding(Boolean)\n  fullName: System.Text.UTF7Encoding.UTF7Encoding(System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n    startLine: 55\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.UTF7Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. A parameter specifies whether to allow optional characters.</p>\\n\"\n  syntax:\n    content: public UTF7Encoding(bool allowOptionals)\n    content.vb: Public Sub New(allowOptionals As Boolean)\n    parameters:\n    - id: allowOptionals\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to specify that optional characters are allowed; otherwise, <strong>false</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UTF7Encoding.UTF7Encoding(Boolean)\n- uid: System.Text.UTF7Encoding.Equals(System.Object)\n  commentId: M:System.Text.UTF7Encoding.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Text.UTF7Encoding.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n    startLine: 126\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Gets a value indicating whether the specified object is equal to the current <xref href=\\\"System.Text.UTF7Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public override bool Equals(object value)\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overrides Function Equals(value As Object) As Boolean\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object to compare to the current <xref href=\\\"System.Text.UTF7Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value</em> is a <xref href=\\\"System.Text.UTF7Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and is equal to the current <xref href=\\\"System.Text.UTF7Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Text.Encoding.Equals(System.Object)\n  seealso:\n  - type: System.Text.Encoding\n    commentId: T:System.Text.Encoding\n  - type: System.Text.UTF7Encoding.#ctor\n    commentId: M:System.Text.UTF7Encoding.#ctor\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF7Encoding.Equals(Object)\n- uid: System.Text.UTF7Encoding.GetByteCount(System.Char*,System.Int32)\n  commentId: M:System.Text.UTF7Encoding.GetByteCount(System.Char*,System.Int32)\n  id: GetByteCount(System.Char*,System.Int32)\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetByteCount(Char*, Int32)\n  fullName: System.Text.UTF7Encoding.GetByteCount(System.Char*, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetByteCount\n    path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n    startLine: 210\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      [ComVisible(false)]\n\n      public override int GetByteCount(char *chars, int count)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      <ComVisible(False)>\n\n      Public Overrides Function GetByteCount(chars As Char *, count As Integer) As Integer\n    parameters:\n    - id: chars\n      type: System.Char*\n      description: \"\\n<p>A pointer to the first character to encode. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of bytes produced by encoding the specified characters.</p>\\n\"\n  overridden: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null </strong>(<strong>Nothing </strong>in Visual Basic .NET). </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an int. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - type: System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\n  - type: System.Text.UTF7Encoding.GetEncoder\n    commentId: M:System.Text.UTF7Encoding.GetEncoder\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF7Encoding.GetByteCount(Char*, Int32)\n- uid: System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  id: GetByteCount(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetByteCount(Char[], Int32, Int32)\n  fullName: System.Text.UTF7Encoding.GetByteCount(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetByteCount\n    path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n    startLine: 162\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the number of bytes produced by encoding a set of characters from the specified character array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetByteCount(char[] chars, int index, int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetByteCount(chars As Char(), index As Integer, count As Integer) As Integer\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>The character array containing the set of characters to encode. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the first character to encode. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of bytes produced by encoding the specified characters.</p>\\n\"\n  overridden: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an int. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - type: System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\n  - type: System.Text.UTF7Encoding.GetEncoder\n    commentId: M:System.Text.UTF7Encoding.GetEncoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.UTF7Encoding.GetByteCount(System.Char(), System.Int32, System.Int32)\n  name.vb: GetByteCount(Char(), Int32, Int32)\n  nameWithType: UTF7Encoding.GetByteCount(Char[], Int32, Int32)\n  nameWithType.vb: UTF7Encoding.GetByteCount(Char(), Int32, Int32)\n- uid: System.Text.UTF7Encoding.GetByteCount(System.String)\n  commentId: M:System.Text.UTF7Encoding.GetByteCount(System.String)\n  id: GetByteCount(System.String)\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetByteCount(String)\n  fullName: System.Text.UTF7Encoding.GetByteCount(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetByteCount\n    path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n    startLine: 193\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the number of bytes produced by encoding the characters in the specified <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ComVisible(false)]\n\n      public override int GetByteCount(string s)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ComVisible(False)>\n\n      Public Overrides Function GetByteCount(s As String) As Integer\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object containing the set of characters to encode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of bytes produced by encoding the specified characters.</p>\\n\"\n  overridden: System.Text.Encoding.GetByteCount(System.String)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an int. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - type: System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\n  - type: System.Text.UTF7Encoding.GetEncoder\n    commentId: M:System.Text.UTF7Encoding.GetEncoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF7Encoding.GetByteCount(String)\n- uid: System.Text.UTF7Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  commentId: M:System.Text.UTF7Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  id: GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(Char*, Int32, Byte*, Int32)\n  fullName: System.Text.UTF7Encoding.GetBytes(System.Char*, System.Int32, System.Byte*, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n    startLine: 326\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      [ComVisible(false)]\n\n      public override int GetBytes(char *chars, int charCount, byte *bytes, int byteCount)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      <ComVisible(False)>\n\n      Public Overrides Function GetBytes(chars As Char *, charCount As Integer, bytes As Byte *, byteCount As Integer) As Integer\n    parameters:\n    - id: chars\n      type: System.Char*\n      description: \"\\n<p>A pointer to the first character to encode. </p>\\n\"\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    - id: bytes\n      type: System.Byte*\n      description: \"\\n<p>A pointer to the location at which to start writing the resulting sequence of bytes. </p>\\n\"\n    - id: byteCount\n      type: System.Int32\n      description: \"\\n<p>The maximum number of bytes to write. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of bytes written at the location indicated by <em>bytes</em>.</p>\\n\"\n  overridden: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>charCount</em> or <em>byteCount</em> is less than zero. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>byteCount</em> is less than the resulting number of bytes. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF7Encoding.GetEncoder\n    commentId: M:System.Text.UTF7Encoding.GetEncoder\n  - type: System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - type: System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF7Encoding.GetBytes(Char*, Int32, Byte*, Int32)\n- uid: System.Text.UTF7Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  commentId: M:System.Text.UTF7Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  fullName: System.Text.UTF7Encoding.GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n    startLine: 282\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Encodes a set of characters from the specified character array into the specified byte array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetBytes(chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>The character array containing the set of characters to encode. </p>\\n\"\n    - id: charIndex\n      type: System.Int32\n      description: \"\\n<p>The index of the first character to encode. </p>\\n\"\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array to contain the resulting sequence of bytes. </p>\\n\"\n    - id: byteIndex\n      type: System.Int32\n      description: \"\\n<p>The index at which to start writing the resulting sequence of bytes. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of bytes written into <em>bytes</em>.</p>\\n\"\n  overridden: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteIndex</em> is not a valid index in <em>bytes</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF7Encoding.GetEncoder\n    commentId: M:System.Text.UTF7Encoding.GetEncoder\n  - type: System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - type: System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.UTF7Encoding.GetBytes(System.Char(), System.Int32, System.Int32, System.Byte(), System.Int32)\n  name.vb: GetBytes(Char(), Int32, Int32, Byte(), Int32)\n  nameWithType: UTF7Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  nameWithType.vb: UTF7Encoding.GetBytes(Char(), Int32, Int32, Byte(), Int32)\n- uid: System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  commentId: M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(String, Int32, Int32, Byte[], Int32)\n  fullName: System.Text.UTF7Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n    startLine: 234\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Encodes a set of characters from the specified <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> into the specified byte array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ComVisible(false)]\n\n      public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ComVisible(False)>\n\n      Public Overrides Function GetBytes(s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the set of characters to encode. </p>\\n\"\n    - id: charIndex\n      type: System.Int32\n      description: \"\\n<p>The index of the first character to encode. </p>\\n\"\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array to contain the resulting sequence of bytes. </p>\\n\"\n    - id: byteIndex\n      type: System.Int32\n      description: \"\\n<p>The index at which to start writing the resulting sequence of bytes. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of bytes written into <em>bytes</em>.</p>\\n\"\n  overridden: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteIndex</em> is not a valid index in <em>bytes</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF7Encoding.GetEncoder\n    commentId: M:System.Text.UTF7Encoding.GetEncoder\n  - type: System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - type: System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.UTF7Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte(), System.Int32)\n  name.vb: GetBytes(String, Int32, Int32, Byte(), Int32)\n  nameWithType: UTF7Encoding.GetBytes(String, Int32, Int32, Byte[], Int32)\n  nameWithType.vb: UTF7Encoding.GetBytes(String, Int32, Int32, Byte(), Int32)\n- uid: System.Text.UTF7Encoding.GetCharCount(System.Byte*,System.Int32)\n  commentId: M:System.Text.UTF7Encoding.GetCharCount(System.Byte*,System.Int32)\n  id: GetCharCount(System.Byte*,System.Int32)\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetCharCount(Byte*, Int32)\n  fullName: System.Text.UTF7Encoding.GetCharCount(System.Byte*, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCharCount\n    path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n    startLine: 382\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      [ComVisible(false)]\n\n      public override int GetCharCount(byte *bytes, int count)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      <ComVisible(False)>\n\n      Public Overrides Function GetCharCount(bytes As Byte *, count As Integer) As Integer\n    parameters:\n    - id: bytes\n      type: System.Byte*\n      description: \"\\n<p>A pointer to the first byte to decode. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\\n\"\n  overridden: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of characters is greater than the maximum number that can be returned as an int. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF7Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  - type: System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\n  - type: System.Text.UTF7Encoding.GetDecoder\n    commentId: M:System.Text.UTF7Encoding.GetDecoder\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF7Encoding.GetCharCount(Byte*, Int32)\n- uid: System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  id: GetCharCount(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetCharCount(Byte[], Int32, Int32)\n  fullName: System.Text.UTF7Encoding.GetCharCount(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCharCount\n    path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n    startLine: 352\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetCharCount(byte[] bytes, int index, int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetCharCount(bytes As Byte(), index As Integer, count As Integer) As Integer\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array containing the sequence of bytes to decode. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the first byte to decode. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\\n\"\n  overridden: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>.</p>\\n<p>-or- </p>\\n<p>The resulting number of characters is greater than the maximum number that can be returned as an int. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF7Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  - type: System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\n  - type: System.Text.UTF7Encoding.GetDecoder\n    commentId: M:System.Text.UTF7Encoding.GetDecoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.UTF7Encoding.GetCharCount(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetCharCount(Byte(), Int32, Int32)\n  nameWithType: UTF7Encoding.GetCharCount(Byte[], Int32, Int32)\n  nameWithType.vb: UTF7Encoding.GetCharCount(Byte(), Int32, Int32)\n- uid: System.Text.UTF7Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  commentId: M:System.Text.UTF7Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  id: GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetChars(Byte*, Int32, Char*, Int32)\n  fullName: System.Text.UTF7Encoding.GetChars(System.Byte*, System.Int32, System.Char*, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetChars\n    path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n    startLine: 449\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      [ComVisible(false)]\n\n      public override int GetChars(byte *bytes, int byteCount, char *chars, int charCount)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      <ComVisible(False)>\n\n      Public Overrides Function GetChars(bytes As Byte *, byteCount As Integer, chars As Char *, charCount As Integer) As Integer\n    parameters:\n    - id: bytes\n      type: System.Byte*\n      description: \"\\n<p>A pointer to the first byte to decode. </p>\\n\"\n    - id: byteCount\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    - id: chars\n      type: System.Char*\n      description: \"\\n<p>A pointer to the location at which to start writing the resulting set of characters. </p>\\n\"\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters to write. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of characters written at the location indicated by <em>chars</em>.</p>\\n\"\n  overridden: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>byteCount</em> or <em>charCount</em> is less than zero. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>charCount</em> is less than the resulting number of characters. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\n  - type: System.Text.UTF7Encoding.GetDecoder\n    commentId: M:System.Text.UTF7Encoding.GetDecoder\n  - type: System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF7Encoding.GetChars(Byte*, Int32, Char*, Int32)\n- uid: System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  commentId: M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetChars(Byte[], Int32, Int32, Char[], Int32)\n  fullName: System.Text.UTF7Encoding.GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetChars\n    path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n    startLine: 405\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Decodes a sequence of bytes from the specified byte array into the specified character array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetChars(bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array containing the sequence of bytes to decode. </p>\\n\"\n    - id: byteIndex\n      type: System.Int32\n      description: \"\\n<p>The index of the first byte to decode. </p>\\n\"\n    - id: byteCount\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>The character array to contain the resulting set of characters. </p>\\n\"\n    - id: charIndex\n      type: System.Int32\n      description: \"\\n<p>The index at which to start writing the resulting set of characters. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of characters written into <em>chars</em>.</p>\\n\"\n  overridden: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>byteIndex</em> or <em>byteCount</em> or <em>charIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteindex</em> and <em>byteCount</em> do not denote a valid range in <em>bytes</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> is not a valid index in <em>chars</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>chars</em> does not have enough capacity from <em>charIndex</em> to the end of the array to accommodate the resulting characters. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\n  - type: System.Text.UTF7Encoding.GetDecoder\n    commentId: M:System.Text.UTF7Encoding.GetDecoder\n  - type: System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.UTF7Encoding.GetChars(System.Byte(), System.Int32, System.Int32, System.Char(), System.Int32)\n  name.vb: GetChars(Byte(), Int32, Int32, Char(), Int32)\n  nameWithType: UTF7Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32)\n  nameWithType.vb: UTF7Encoding.GetChars(Byte(), Int32, Int32, Char(), Int32)\n- uid: System.Text.UTF7Encoding.GetDecoder\n  commentId: M:System.Text.UTF7Encoding.GetDecoder\n  id: GetDecoder\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetDecoder()\n  fullName: System.Text.UTF7Encoding.GetDecoder()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDecoder\n    path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n    startLine: 835\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Obtains a decoder that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters.</p>\\n\"\n  syntax:\n    content: public override Decoder GetDecoder()\n    content.vb: Public Overrides Function GetDecoder As Decoder\n    return:\n      type: System.Text.Decoder\n      description: \"\\n<p>A <xref href=\\\"System.Text.Decoder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters.</p>\\n\"\n  overridden: System.Text.Encoding.GetDecoder\n  seealso:\n  - type: System.Text.Decoder\n    commentId: T:System.Text.Decoder\n  - type: System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - type: System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.UTF7Encoding.GetEncoder\n    commentId: M:System.Text.UTF7Encoding.GetEncoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF7Encoding.GetDecoder()\n- uid: System.Text.UTF7Encoding.GetEncoder\n  commentId: M:System.Text.UTF7Encoding.GetEncoder\n  id: GetEncoder\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetEncoder()\n  fullName: System.Text.UTF7Encoding.GetEncoder()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetEncoder\n    path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n    startLine: 841\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Obtains an encoder that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes.</p>\\n\"\n  syntax:\n    content: public override Encoder GetEncoder()\n    content.vb: Public Overrides Function GetEncoder As Encoder\n    return:\n      type: System.Text.Encoder\n      description: \"\\n<p>A <xref href=\\\"System.Text.Encoder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes.</p>\\n\"\n  overridden: System.Text.Encoding.GetEncoder\n  seealso:\n  - type: System.Text.Encoder\n    commentId: T:System.Text.Encoder\n  - type: System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - type: System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - type: System.Text.UTF7Encoding.GetDecoder\n    commentId: M:System.Text.UTF7Encoding.GetDecoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF7Encoding.GetEncoder()\n- uid: System.Text.UTF7Encoding.GetHashCode\n  commentId: M:System.Text.UTF7Encoding.GetHashCode\n  id: GetHashCode\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Text.UTF7Encoding.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n    startLine: 141\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Returns the hash code for the current <xref href=\\\"System.Text.UTF7Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public override int GetHashCode()\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.Text.Encoding.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF7Encoding.GetHashCode()\n- uid: System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\n  commentId: M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\n  id: GetMaxByteCount(System.Int32)\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetMaxByteCount(Int32)\n  fullName: System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMaxByteCount\n    path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n    startLine: 847\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the maximum number of bytes produced by encoding the specified number of characters.</p>\\n\"\n  syntax:\n    content: public override int GetMaxByteCount(int charCount)\n    content.vb: Public Overrides Function GetMaxByteCount(charCount As Integer) As Integer\n    parameters:\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The maximum number of bytes produced by encoding the specified number of characters.</p>\\n\"\n  overridden: System.Text.Encoding.GetMaxByteCount(System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>charCount</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an int. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - type: System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - type: System.Text.UTF7Encoding.GetEncoder\n    commentId: M:System.Text.UTF7Encoding.GetEncoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF7Encoding.GetMaxByteCount(Int32)\n- uid: System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\n  commentId: M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\n  id: GetMaxCharCount(System.Int32)\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetMaxCharCount(Int32)\n  fullName: System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMaxCharCount\n    path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n    startLine: 880\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the maximum number of characters produced by decoding the specified number of bytes.</p>\\n\"\n  syntax:\n    content: public override int GetMaxCharCount(int byteCount)\n    content.vb: Public Overrides Function GetMaxCharCount(byteCount As Integer) As Integer\n    parameters:\n    - id: byteCount\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters produced by decoding the specified number of bytes.</p>\\n\"\n  overridden: System.Text.Encoding.GetMaxCharCount(System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>byteCount</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of characters is greater than the maximum number that can be returned as an int. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - type: System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.UTF7Encoding.GetDecoder\n    commentId: M:System.Text.UTF7Encoding.GetDecoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF7Encoding.GetMaxCharCount(Int32)\n- uid: System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  id: GetString(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.UTF7Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetString(Byte[], Int32, Int32)\n  fullName: System.Text.UTF7Encoding.GetString(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetString\n    path: src/mscorlib/src/System/Text/UTF7Encoding.cs\n    startLine: 475\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Decodes a range of bytes from a byte array into a string.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ComVisible(false)]\n\n      public override string GetString(byte[] bytes, int index, int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ComVisible(False)>\n\n      Public Overrides Function GetString(bytes As Byte(), index As Integer, count As Integer) As String\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array containing the sequence of bytes to decode. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the first byte to decode. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the results of decoding the specified sequence of bytes.</p>\\n\"\n  overridden: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - type: System.Text.UTF7Encoding.GetDecoder\n    commentId: M:System.Text.UTF7Encoding.GetDecoder\n  - type: System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.UTF7Encoding.GetString(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetString(Byte(), Int32, Int32)\n  nameWithType: UTF7Encoding.GetString(Byte[], Int32, Int32)\n  nameWithType.vb: UTF7Encoding.GetString(Byte(), Int32, Int32)\nreferences:\n- uid: System.Text\n  isExternal: false\n  name: System.Text\n  fullName: System.Text\n  nameWithType: System.Text\n  commentId: N:System.Text\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: false\n  name: Encoding\n  fullName: System.Text.Encoding\n  nameWithType: Encoding\n  commentId: T:System.Text.Encoding\n- uid: System.ICloneable\n  parent: System\n  isExternal: true\n  name: ICloneable\n  fullName: System.ICloneable\n  nameWithType: ICloneable\n  commentId: T:System.ICloneable\n- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Convert(Encoding, Encoding, Byte[])\n  fullName: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte[])\n  fullname.vb: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte())\n  name.vb: Convert(Encoding, Encoding, Byte())\n  spec.csharp:\n  - uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n    name: Convert\n    fullName: System.Text.Encoding.Convert\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n    name: Convert\n    fullName: System.Text.Encoding.Convert\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.Convert(Encoding, Encoding, Byte[])\n  nameWithType.vb: Encoding.Convert(Encoding, Encoding, Byte())\n  commentId: M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Convert(Encoding, Encoding, Byte[], Int32, Int32)\n  fullName: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte(), System.Int32, System.Int32)\n  name.vb: Convert(Encoding, Encoding, Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n    name: Convert\n    fullName: System.Text.Encoding.Convert\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n    name: Convert\n    fullName: System.Text.Encoding.Convert\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.Convert(Encoding, Encoding, Byte[], Int32, Int32)\n  nameWithType.vb: Encoding.Convert(Encoding, Encoding, Byte(), Int32, Int32)\n  commentId: M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n- uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: RegisterProvider(EncodingProvider)\n  fullName: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n  spec.csharp:\n  - uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n    name: RegisterProvider\n    fullName: System.Text.Encoding.RegisterProvider\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.EncodingProvider\n    name: EncodingProvider\n    fullName: System.Text.EncodingProvider\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n    name: RegisterProvider\n    fullName: System.Text.Encoding.RegisterProvider\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.EncodingProvider\n    name: EncodingProvider\n    fullName: System.Text.EncodingProvider\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.RegisterProvider(EncodingProvider)\n  commentId: M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n- uid: System.Text.Encoding.GetEncoding(System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncoding(Int32)\n  fullName: System.Text.Encoding.GetEncoding(System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncoding(System.Int32)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncoding(System.Int32)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncoding(Int32)\n  commentId: M:System.Text.Encoding.GetEncoding(System.Int32)\n- uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncoding(Int32, EncoderFallback, DecoderFallback)\n  fullName: System.Text.Encoding.GetEncoding(System.Int32, System.Text.EncoderFallback, System.Text.DecoderFallback)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.EncoderFallback\n    name: EncoderFallback\n    fullName: System.Text.EncoderFallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.DecoderFallback\n    name: DecoderFallback\n    fullName: System.Text.DecoderFallback\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.EncoderFallback\n    name: EncoderFallback\n    fullName: System.Text.EncoderFallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.DecoderFallback\n    name: DecoderFallback\n    fullName: System.Text.DecoderFallback\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncoding(Int32, EncoderFallback, DecoderFallback)\n  commentId: M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n- uid: System.Text.Encoding.GetEncoding(System.String)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncoding(String)\n  fullName: System.Text.Encoding.GetEncoding(System.String)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncoding(System.String)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncoding(System.String)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncoding(String)\n  commentId: M:System.Text.Encoding.GetEncoding(System.String)\n- uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncoding(String, EncoderFallback, DecoderFallback)\n  fullName: System.Text.Encoding.GetEncoding(System.String, System.Text.EncoderFallback, System.Text.DecoderFallback)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.EncoderFallback\n    name: EncoderFallback\n    fullName: System.Text.EncoderFallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.DecoderFallback\n    name: DecoderFallback\n    fullName: System.Text.DecoderFallback\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.EncoderFallback\n    name: EncoderFallback\n    fullName: System.Text.EncoderFallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.DecoderFallback\n    name: DecoderFallback\n    fullName: System.Text.DecoderFallback\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncoding(String, EncoderFallback, DecoderFallback)\n  commentId: M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n- uid: System.Text.Encoding.GetEncodings\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncodings()\n  fullName: System.Text.Encoding.GetEncodings()\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncodings\n    name: GetEncodings\n    fullName: System.Text.Encoding.GetEncodings\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncodings\n    name: GetEncodings\n    fullName: System.Text.Encoding.GetEncodings\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncodings()\n  commentId: M:System.Text.Encoding.GetEncodings\n- uid: System.Text.Encoding.GetPreamble\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetPreamble()\n  fullName: System.Text.Encoding.GetPreamble()\n  spec.csharp:\n  - uid: System.Text.Encoding.GetPreamble\n    name: GetPreamble\n    fullName: System.Text.Encoding.GetPreamble\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetPreamble\n    name: GetPreamble\n    fullName: System.Text.Encoding.GetPreamble\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetPreamble()\n  commentId: M:System.Text.Encoding.GetPreamble\n- uid: System.Text.Encoding.Clone\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Clone()\n  fullName: System.Text.Encoding.Clone()\n  spec.csharp:\n  - uid: System.Text.Encoding.Clone\n    name: Clone\n    fullName: System.Text.Encoding.Clone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.Clone\n    name: Clone\n    fullName: System.Text.Encoding.Clone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.Clone()\n  commentId: M:System.Text.Encoding.Clone\n- uid: System.Text.Encoding.GetByteCount(System.Char[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetByteCount(Char[])\n  fullName: System.Text.Encoding.GetByteCount(System.Char[])\n  fullname.vb: System.Text.Encoding.GetByteCount(System.Char())\n  name.vb: GetByteCount(Char())\n  spec.csharp:\n  - uid: System.Text.Encoding.GetByteCount(System.Char[])\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetByteCount(System.Char[])\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetByteCount(Char[])\n  nameWithType.vb: Encoding.GetByteCount(Char())\n  commentId: M:System.Text.Encoding.GetByteCount(System.Char[])\n- uid: System.Text.Encoding.GetBytes(System.Char[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(Char[])\n  fullName: System.Text.Encoding.GetBytes(System.Char[])\n  fullname.vb: System.Text.Encoding.GetBytes(System.Char())\n  name.vb: GetBytes(Char())\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.Char[])\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.Char[])\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(Char[])\n  nameWithType.vb: Encoding.GetBytes(Char())\n  commentId: M:System.Text.Encoding.GetBytes(System.Char[])\n- uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(Char[], Int32, Int32)\n  fullName: System.Text.Encoding.GetBytes(System.Char[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.GetBytes(System.Char(), System.Int32, System.Int32)\n  name.vb: GetBytes(Char(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(Char[], Int32, Int32)\n  nameWithType.vb: Encoding.GetBytes(Char(), Int32, Int32)\n  commentId: M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n- uid: System.Text.Encoding.GetBytes(System.String)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(String)\n  fullName: System.Text.Encoding.GetBytes(System.String)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.String)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.String)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(String)\n  commentId: M:System.Text.Encoding.GetBytes(System.String)\n- uid: System.Text.Encoding.GetCharCount(System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetCharCount(Byte[])\n  fullName: System.Text.Encoding.GetCharCount(System.Byte[])\n  fullname.vb: System.Text.Encoding.GetCharCount(System.Byte())\n  name.vb: GetCharCount(Byte())\n  spec.csharp:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte[])\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte[])\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetCharCount(Byte[])\n  nameWithType.vb: Encoding.GetCharCount(Byte())\n  commentId: M:System.Text.Encoding.GetCharCount(System.Byte[])\n- uid: System.Text.Encoding.GetChars(System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetChars(Byte[])\n  fullName: System.Text.Encoding.GetChars(System.Byte[])\n  fullname.vb: System.Text.Encoding.GetChars(System.Byte())\n  name.vb: GetChars(Byte())\n  spec.csharp:\n  - uid: System.Text.Encoding.GetChars(System.Byte[])\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetChars(System.Byte[])\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetChars(Byte[])\n  nameWithType.vb: Encoding.GetChars(Byte())\n  commentId: M:System.Text.Encoding.GetChars(System.Byte[])\n- uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetChars(Byte[], Int32, Int32)\n  fullName: System.Text.Encoding.GetChars(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.GetChars(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetChars(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetChars(Byte[], Int32, Int32)\n  nameWithType.vb: Encoding.GetChars(Byte(), Int32, Int32)\n  commentId: M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n- uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetString(Byte*, Int32)\n  fullName: System.Text.Encoding.GetString(System.Byte*, System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetString(Byte*, Int32)\n  commentId: M:System.Text.Encoding.GetString(System.Byte*,System.Int32)\n- uid: System.Text.Encoding.IsAlwaysNormalized\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsAlwaysNormalized()\n  fullName: System.Text.Encoding.IsAlwaysNormalized()\n  spec.csharp:\n  - uid: System.Text.Encoding.IsAlwaysNormalized\n    name: IsAlwaysNormalized\n    fullName: System.Text.Encoding.IsAlwaysNormalized\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.IsAlwaysNormalized\n    name: IsAlwaysNormalized\n    fullName: System.Text.Encoding.IsAlwaysNormalized\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.IsAlwaysNormalized()\n  commentId: M:System.Text.Encoding.IsAlwaysNormalized\n- uid: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsAlwaysNormalized(NormalizationForm)\n  fullName: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n  spec.csharp:\n  - uid: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n    name: IsAlwaysNormalized\n    fullName: System.Text.Encoding.IsAlwaysNormalized\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.NormalizationForm\n    name: NormalizationForm\n    fullName: System.Text.NormalizationForm\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n    name: IsAlwaysNormalized\n    fullName: System.Text.Encoding.IsAlwaysNormalized\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.NormalizationForm\n    name: NormalizationForm\n    fullName: System.Text.NormalizationForm\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.IsAlwaysNormalized(NormalizationForm)\n  commentId: M:System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n- uid: System.Text.Encoding.GetString(System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetString(Byte[])\n  fullName: System.Text.Encoding.GetString(System.Byte[])\n  fullname.vb: System.Text.Encoding.GetString(System.Byte())\n  name.vb: GetString(Byte())\n  spec.csharp:\n  - uid: System.Text.Encoding.GetString(System.Byte[])\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetString(System.Byte[])\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetString(Byte[])\n  nameWithType.vb: Encoding.GetString(Byte())\n  commentId: M:System.Text.Encoding.GetString(System.Byte[])\n- uid: System.Text.Encoding.BodyName\n  parent: System.Text.Encoding\n  isExternal: true\n  name: BodyName\n  fullName: System.Text.Encoding.BodyName\n  nameWithType: Encoding.BodyName\n  commentId: P:System.Text.Encoding.BodyName\n- uid: System.Text.Encoding.EncodingName\n  parent: System.Text.Encoding\n  isExternal: true\n  name: EncodingName\n  fullName: System.Text.Encoding.EncodingName\n  nameWithType: Encoding.EncodingName\n  commentId: P:System.Text.Encoding.EncodingName\n- uid: System.Text.Encoding.HeaderName\n  parent: System.Text.Encoding\n  isExternal: true\n  name: HeaderName\n  fullName: System.Text.Encoding.HeaderName\n  nameWithType: Encoding.HeaderName\n  commentId: P:System.Text.Encoding.HeaderName\n- uid: System.Text.Encoding.WebName\n  parent: System.Text.Encoding\n  isExternal: true\n  name: WebName\n  fullName: System.Text.Encoding.WebName\n  nameWithType: Encoding.WebName\n  commentId: P:System.Text.Encoding.WebName\n- uid: System.Text.Encoding.WindowsCodePage\n  parent: System.Text.Encoding\n  isExternal: true\n  name: WindowsCodePage\n  fullName: System.Text.Encoding.WindowsCodePage\n  nameWithType: Encoding.WindowsCodePage\n  commentId: P:System.Text.Encoding.WindowsCodePage\n- uid: System.Text.Encoding.IsBrowserDisplay\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsBrowserDisplay\n  fullName: System.Text.Encoding.IsBrowserDisplay\n  nameWithType: Encoding.IsBrowserDisplay\n  commentId: P:System.Text.Encoding.IsBrowserDisplay\n- uid: System.Text.Encoding.IsBrowserSave\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsBrowserSave\n  fullName: System.Text.Encoding.IsBrowserSave\n  nameWithType: Encoding.IsBrowserSave\n  commentId: P:System.Text.Encoding.IsBrowserSave\n- uid: System.Text.Encoding.IsMailNewsDisplay\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsMailNewsDisplay\n  fullName: System.Text.Encoding.IsMailNewsDisplay\n  nameWithType: Encoding.IsMailNewsDisplay\n  commentId: P:System.Text.Encoding.IsMailNewsDisplay\n- uid: System.Text.Encoding.IsMailNewsSave\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsMailNewsSave\n  fullName: System.Text.Encoding.IsMailNewsSave\n  nameWithType: Encoding.IsMailNewsSave\n  commentId: P:System.Text.Encoding.IsMailNewsSave\n- uid: System.Text.Encoding.IsSingleByte\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsSingleByte\n  fullName: System.Text.Encoding.IsSingleByte\n  nameWithType: Encoding.IsSingleByte\n  commentId: P:System.Text.Encoding.IsSingleByte\n- uid: System.Text.Encoding.EncoderFallback\n  parent: System.Text.Encoding\n  isExternal: true\n  name: EncoderFallback\n  fullName: System.Text.Encoding.EncoderFallback\n  nameWithType: Encoding.EncoderFallback\n  commentId: P:System.Text.Encoding.EncoderFallback\n- uid: System.Text.Encoding.DecoderFallback\n  parent: System.Text.Encoding\n  isExternal: true\n  name: DecoderFallback\n  fullName: System.Text.Encoding.DecoderFallback\n  nameWithType: Encoding.DecoderFallback\n  commentId: P:System.Text.Encoding.DecoderFallback\n- uid: System.Text.Encoding.IsReadOnly\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsReadOnly\n  fullName: System.Text.Encoding.IsReadOnly\n  nameWithType: Encoding.IsReadOnly\n  commentId: P:System.Text.Encoding.IsReadOnly\n- uid: System.Text.Encoding.ASCII\n  parent: System.Text.Encoding\n  isExternal: true\n  name: ASCII\n  fullName: System.Text.Encoding.ASCII\n  nameWithType: Encoding.ASCII\n  commentId: P:System.Text.Encoding.ASCII\n- uid: System.Text.Encoding.CodePage\n  parent: System.Text.Encoding\n  isExternal: true\n  name: CodePage\n  fullName: System.Text.Encoding.CodePage\n  nameWithType: Encoding.CodePage\n  commentId: P:System.Text.Encoding.CodePage\n- uid: System.Text.Encoding.Default\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Default\n  fullName: System.Text.Encoding.Default\n  nameWithType: Encoding.Default\n  commentId: P:System.Text.Encoding.Default\n- uid: System.Text.Encoding.Unicode\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Unicode\n  fullName: System.Text.Encoding.Unicode\n  nameWithType: Encoding.Unicode\n  commentId: P:System.Text.Encoding.Unicode\n- uid: System.Text.Encoding.BigEndianUnicode\n  parent: System.Text.Encoding\n  isExternal: true\n  name: BigEndianUnicode\n  fullName: System.Text.Encoding.BigEndianUnicode\n  nameWithType: Encoding.BigEndianUnicode\n  commentId: P:System.Text.Encoding.BigEndianUnicode\n- uid: System.Text.Encoding.UTF7\n  parent: System.Text.Encoding\n  isExternal: true\n  name: UTF7\n  fullName: System.Text.Encoding.UTF7\n  nameWithType: Encoding.UTF7\n  commentId: P:System.Text.Encoding.UTF7\n- uid: System.Text.Encoding.UTF8\n  parent: System.Text.Encoding\n  isExternal: true\n  name: UTF8\n  fullName: System.Text.Encoding.UTF8\n  nameWithType: Encoding.UTF8\n  commentId: P:System.Text.Encoding.UTF8\n- uid: System.Text.Encoding.UTF32\n  parent: System.Text.Encoding\n  isExternal: true\n  name: UTF32\n  fullName: System.Text.Encoding.UTF32\n  nameWithType: Encoding.UTF32\n  commentId: P:System.Text.Encoding.UTF32\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Text.Encoding.Equals(System.Object)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Text.Encoding.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Text.Encoding.Equals(System.Object)\n    name: Equals\n    fullName: System.Text.Encoding.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.Equals(System.Object)\n    name: Equals\n    fullName: System.Text.Encoding.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.Equals(Object)\n  commentId: M:System.Text.Encoding.Equals(System.Object)\n- uid: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetByteCount(Char*, Int32)\n  fullName: System.Text.Encoding.GetByteCount(System.Char*, System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetByteCount(Char*, Int32)\n  commentId: M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)\n- uid: System.Char*\n  name: Char*\n  fullName: System.Char*\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  nameWithType: Char*\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetByteCount(Char[], Int32, Int32)\n  fullName: System.Text.Encoding.GetByteCount(System.Char[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.GetByteCount(System.Char(), System.Int32, System.Int32)\n  name.vb: GetByteCount(Char(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetByteCount(Char[], Int32, Int32)\n  nameWithType.vb: Encoding.GetByteCount(Char(), Int32, Int32)\n  commentId: M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n- uid: System.Char[]\n  name: Char[]\n  fullName: System.Char[]\n  fullname.vb: System.Char()\n  name.vb: Char()\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Char[]\n  nameWithType.vb: Char()\n- uid: System.Text.Encoding.GetByteCount(System.String)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetByteCount(String)\n  fullName: System.Text.Encoding.GetByteCount(System.String)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetByteCount(System.String)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetByteCount(System.String)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetByteCount(String)\n  commentId: M:System.Text.Encoding.GetByteCount(System.String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(Char*, Int32, Byte*, Int32)\n  fullName: System.Text.Encoding.GetBytes(System.Char*, System.Int32, System.Byte*, System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(Char*, Int32, Byte*, Int32)\n  commentId: M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n- uid: System.Byte*\n  name: Byte*\n  fullName: System.Byte*\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  nameWithType: Byte*\n- uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  fullName: System.Text.Encoding.GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)\n  fullname.vb: System.Text.Encoding.GetBytes(System.Char(), System.Int32, System.Int32, System.Byte(), System.Int32)\n  name.vb: GetBytes(Char(), Int32, Int32, Byte(), Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  nameWithType.vb: Encoding.GetBytes(Char(), Int32, Int32, Byte(), Int32)\n  commentId: M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(String, Int32, Int32, Byte[], Int32)\n  fullName: System.Text.Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte[], System.Int32)\n  fullname.vb: System.Text.Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte(), System.Int32)\n  name.vb: GetBytes(String, Int32, Int32, Byte(), Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(String, Int32, Int32, Byte[], Int32)\n  nameWithType.vb: Encoding.GetBytes(String, Int32, Int32, Byte(), Int32)\n  commentId: M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n- uid: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetCharCount(Byte*, Int32)\n  fullName: System.Text.Encoding.GetCharCount(System.Byte*, System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetCharCount(Byte*, Int32)\n  commentId: M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)\n- uid: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetCharCount(Byte[], Int32, Int32)\n  fullName: System.Text.Encoding.GetCharCount(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.GetCharCount(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetCharCount(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetCharCount(Byte[], Int32, Int32)\n  nameWithType.vb: Encoding.GetCharCount(Byte(), Int32, Int32)\n  commentId: M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n- uid: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetChars(Byte*, Int32, Char*, Int32)\n  fullName: System.Text.Encoding.GetChars(System.Byte*, System.Int32, System.Char*, System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetChars(Byte*, Int32, Char*, Int32)\n  commentId: M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n- uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetChars(Byte[], Int32, Int32, Char[], Int32)\n  fullName: System.Text.Encoding.GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)\n  fullname.vb: System.Text.Encoding.GetChars(System.Byte(), System.Int32, System.Int32, System.Char(), System.Int32)\n  name.vb: GetChars(Byte(), Int32, Int32, Char(), Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32)\n  nameWithType.vb: Encoding.GetChars(Byte(), Int32, Int32, Char(), Int32)\n  commentId: M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n- uid: System.Text.Encoding.GetDecoder\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetDecoder()\n  fullName: System.Text.Encoding.GetDecoder()\n  spec.csharp:\n  - uid: System.Text.Encoding.GetDecoder\n    name: GetDecoder\n    fullName: System.Text.Encoding.GetDecoder\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetDecoder\n    name: GetDecoder\n    fullName: System.Text.Encoding.GetDecoder\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetDecoder()\n  commentId: M:System.Text.Encoding.GetDecoder\n- uid: System.Text.Decoder\n  parent: System.Text\n  isExternal: false\n  name: Decoder\n  fullName: System.Text.Decoder\n  nameWithType: Decoder\n  commentId: T:System.Text.Decoder\n- uid: System.Text.Encoding.GetEncoder\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncoder()\n  fullName: System.Text.Encoding.GetEncoder()\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncoder\n    name: GetEncoder\n    fullName: System.Text.Encoding.GetEncoder\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncoder\n    name: GetEncoder\n    fullName: System.Text.Encoding.GetEncoder\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncoder()\n  commentId: M:System.Text.Encoding.GetEncoder\n- uid: System.Text.Encoder\n  parent: System.Text\n  isExternal: false\n  name: Encoder\n  fullName: System.Text.Encoder\n  nameWithType: Encoder\n  commentId: T:System.Text.Encoder\n- uid: System.Text.Encoding.GetHashCode\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Text.Encoding.GetHashCode()\n  spec.csharp:\n  - uid: System.Text.Encoding.GetHashCode\n    name: GetHashCode\n    fullName: System.Text.Encoding.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetHashCode\n    name: GetHashCode\n    fullName: System.Text.Encoding.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetHashCode()\n  commentId: M:System.Text.Encoding.GetHashCode\n- uid: System.Text.Encoding.GetMaxByteCount(System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetMaxByteCount(Int32)\n  fullName: System.Text.Encoding.GetMaxByteCount(System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetMaxByteCount(System.Int32)\n    name: GetMaxByteCount\n    fullName: System.Text.Encoding.GetMaxByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetMaxByteCount(System.Int32)\n    name: GetMaxByteCount\n    fullName: System.Text.Encoding.GetMaxByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetMaxByteCount(Int32)\n  commentId: M:System.Text.Encoding.GetMaxByteCount(System.Int32)\n- uid: System.Text.Encoding.GetMaxCharCount(System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetMaxCharCount(Int32)\n  fullName: System.Text.Encoding.GetMaxCharCount(System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetMaxCharCount(System.Int32)\n    name: GetMaxCharCount\n    fullName: System.Text.Encoding.GetMaxCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetMaxCharCount(System.Int32)\n    name: GetMaxCharCount\n    fullName: System.Text.Encoding.GetMaxCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetMaxCharCount(Int32)\n  commentId: M:System.Text.Encoding.GetMaxCharCount(System.Int32)\n- uid: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetString(Byte[], Int32, Int32)\n  fullName: System.Text.Encoding.GetString(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.GetString(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetString(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetString(Byte[], Int32, Int32)\n  nameWithType.vb: Encoding.GetString(Byte(), Int32, Int32)\n  commentId: M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.Text.EncoderFallbackException\n  isExternal: false\n  name: EncoderFallbackException\n  fullName: System.Text.EncoderFallbackException\n  nameWithType: EncoderFallbackException\n  commentId: T:System.Text.EncoderFallbackException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.Text.DecoderFallbackException\n  isExternal: false\n  name: DecoderFallbackException\n  fullName: System.Text.DecoderFallbackException\n  nameWithType: DecoderFallbackException\n  commentId: T:System.Text.DecoderFallbackException\n"}