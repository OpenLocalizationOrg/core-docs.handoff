{"nodes":[{"pos":[1194,1201],"content":"ISet<T>","needQuote":true,"nodes":[{"content":"ISet&lt;T&gt;","pos":[0,7],"source":"ISet<T>"}]},{"content":"\\n&lt;p&gt;The type of elements in the set.&lt;/p&gt;\\n","pos":[1920,1963],"source":"\\n<p>The type of elements in the set.</p>\\n"},{"pos":[2825,2831],"content":"Add(T)","needQuote":true,"nodes":[{"content":"Add(T)","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The element to add to the set.&lt;/p&gt;\\n","pos":[3493,3534],"source":"\\n<p>The element to add to the set.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the element is added to the set; &lt;strong&gt;false&lt;/strong&gt; if the element is already in the set.&lt;/p&gt;\\n","pos":[3595,3726],"source":"\\n<p>\\n<strong>true</strong> if the element is added to the set; <strong>false</strong> if the element is already in the set.</p>\\n"},{"pos":[4196,4222],"content":"ExceptWith(IEnumerable<T>)","needQuote":true,"nodes":[{"content":"ExceptWith(IEnumerable&lt;T&gt;)","pos":[0,26],"source":"ExceptWith(IEnumerable<T>)"}]},{"content":"\\n&lt;p&gt;The collection of items to remove from the set.&lt;/p&gt;\\n","pos":[4970,5028],"source":"\\n<p>The collection of items to remove from the set.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;other&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[5147,5200],"source":"\\n<p>\\n<em>other</em> is <strong>null</strong>.</p>\\n"},{"pos":[5813,5842],"content":"IntersectWith(IEnumerable<T>)","needQuote":true,"nodes":[{"content":"IntersectWith(IEnumerable&lt;T&gt;)","pos":[0,29],"source":"IntersectWith(IEnumerable<T>)"}]},{"content":"\\n&lt;p&gt;The collection to compare to the current set.&lt;/p&gt;\\n","pos":[6631,6687],"source":"\\n<p>The collection to compare to the current set.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;other&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[6806,6859],"source":"\\n<p>\\n<em>other</em> is <strong>null</strong>.</p>\\n"},{"pos":[7493,7525],"content":"IsProperSubsetOf(IEnumerable<T>)","needQuote":true,"nodes":[{"content":"IsProperSubsetOf(IEnumerable&lt;T&gt;)","pos":[0,32],"source":"IsProperSubsetOf(IEnumerable<T>)"}]},{"content":"\\n&lt;p&gt;The collection to compare to the current set.&lt;/p&gt;\\n","pos":[8332,8388],"source":"\\n<p>The collection to compare to the current set.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current set is a proper subset of &lt;em&gt;other&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8449,8575],"source":"\\n<p>\\n<strong>true</strong> if the current set is a proper subset of <em>other</em>; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;other&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8694,8747],"source":"\\n<p>\\n<em>other</em> is <strong>null</strong>.</p>\\n"},{"pos":[9399,9433],"content":"IsProperSupersetOf(IEnumerable<T>)","needQuote":true,"nodes":[{"content":"IsProperSupersetOf(IEnumerable&lt;T&gt;)","pos":[0,34],"source":"IsProperSupersetOf(IEnumerable<T>)"}]},{"content":"\\n&lt;p&gt;The collection to compare to the current set.","pos":[10250,10300],"source":"\\n<p>The collection to compare to the current set."},{"content":"&lt;/p&gt;\\n","pos":[10301,10307],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current set is a proper superset of &lt;em&gt;other&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10368,10496],"source":"\\n<p>\\n<strong>true</strong> if the current set is a proper superset of <em>other</em>; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;other&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10615,10668],"source":"\\n<p>\\n<em>other</em> is <strong>null</strong>.</p>\\n"},{"pos":[11304,11330],"content":"IsSubsetOf(IEnumerable<T>)","needQuote":true,"nodes":[{"content":"IsSubsetOf(IEnumerable&lt;T&gt;)","pos":[0,26],"source":"IsSubsetOf(IEnumerable<T>)"}]},{"content":"\\n&lt;p&gt;The collection to compare to the current set.&lt;/p&gt;\\n","pos":[12087,12143],"source":"\\n<p>The collection to compare to the current set.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current set is a subset of &lt;em&gt;other&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12204,12323],"source":"\\n<p>\\n<strong>true</strong> if the current set is a subset of <em>other</em>; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;other&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12442,12495],"source":"\\n<p>\\n<em>other</em> is <strong>null</strong>.</p>\\n"},{"pos":[13105,13133],"content":"IsSupersetOf(IEnumerable<T>)","needQuote":true,"nodes":[{"content":"IsSupersetOf(IEnumerable&lt;T&gt;)","pos":[0,28],"source":"IsSupersetOf(IEnumerable<T>)"}]},{"content":"\\n&lt;p&gt;The collection to compare to the current set.&lt;/p&gt;\\n","pos":[13910,13966],"source":"\\n<p>The collection to compare to the current set.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current set is a superset of &lt;em&gt;other&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[14027,14148],"source":"\\n<p>\\n<strong>true</strong> if the current set is a superset of <em>other</em>; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;other&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[14267,14320],"source":"\\n<p>\\n<em>other</em> is <strong>null</strong>.</p>\\n"},{"pos":[14926,14950],"content":"Overlaps(IEnumerable<T>)","needQuote":true,"nodes":[{"content":"Overlaps(IEnumerable&lt;T&gt;)","pos":[0,24],"source":"Overlaps(IEnumerable<T>)"}]},{"content":"\\n&lt;p&gt;The collection to compare to the current set.&lt;/p&gt;\\n","pos":[15710,15766],"source":"\\n<p>The collection to compare to the current set.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current set and &lt;em&gt;other&lt;/em&gt; share at least one common element; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[15827,15969],"source":"\\n<p>\\n<strong>true</strong> if the current set and <em>other</em> share at least one common element; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;other&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16088,16141],"source":"\\n<p>\\n<em>other</em> is <strong>null</strong>.</p>\\n"},{"pos":[16734,16759],"content":"SetEquals(IEnumerable<T>)","needQuote":true,"nodes":[{"content":"SetEquals(IEnumerable&lt;T&gt;)","pos":[0,25],"source":"SetEquals(IEnumerable<T>)"}]},{"content":"\\n&lt;p&gt;The collection to compare to the current set.&lt;/p&gt;\\n","pos":[17539,17595],"source":"\\n<p>The collection to compare to the current set.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current set is equal to &lt;em&gt;other&lt;/em&gt;; otherwise, false.&lt;/p&gt;\\n","pos":[17656,17755],"source":"\\n<p>\\n<strong>true</strong> if the current set is equal to <em>other</em>; otherwise, false.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;other&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17874,17927],"source":"\\n<p>\\n<em>other</em> is <strong>null</strong>.</p>\\n"},{"pos":[18554,18589],"content":"SymmetricExceptWith(IEnumerable<T>)","needQuote":true,"nodes":[{"content":"SymmetricExceptWith(IEnumerable&lt;T&gt;)","pos":[0,35],"source":"SymmetricExceptWith(IEnumerable<T>)"}]},{"content":"\\n&lt;p&gt;The collection to compare to the current set.&lt;/p&gt;\\n","pos":[19451,19507],"source":"\\n<p>The collection to compare to the current set.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;other&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[19626,19679],"source":"\\n<p>\\n<em>other</em> is <strong>null</strong>.</p>\\n"},{"pos":[20316,20341],"content":"UnionWith(IEnumerable<T>)","needQuote":true,"nodes":[{"content":"UnionWith(IEnumerable&lt;T&gt;)","pos":[0,25],"source":"UnionWith(IEnumerable<T>)"}]},{"content":"\\n&lt;p&gt;The collection to compare to the current set.&lt;/p&gt;\\n","pos":[21150,21206],"source":"\\n<p>The collection to compare to the current set.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;other&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[21325,21378],"source":"\\n<p>\\n<em>other</em> is <strong>null</strong>.</p>\\n"},{"pos":[21712,21738],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[22043,22048],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[22509,22519],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[22995,23002],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[23214,23219],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[23292,23293],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23320,23321],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23415,23420],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[23496,23497],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23524,23525],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23885,23896],"content":"Contains(T)","needQuote":true,"nodes":[{"content":"Contains(T)","pos":[0,11]}]},{"pos":[24123,24131],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[24207,24208],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24235,24236],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[24263,24264],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24365,24373],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[24452,24453],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24480,24481],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[24508,24509],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24910,24928],"content":"CopyTo(T[], Int32)","needQuote":true,"nodes":[{"content":"CopyTo(T[], Int32)","pos":[0,18]}]},{"pos":[25226,25232],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[25306,25307],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25334,25335],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":"[]","pos":[25363,25365]},{"content":",","pos":[25397,25398]},{"pos":[25452,25457],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[25516,25517],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25631,25637],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[25714,25715],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25742,25743],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[25770,25772],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[25801,25802]},{"pos":[25856,25861],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[25920,25921],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26319,26328],"content":"Remove(T)","needQuote":true,"nodes":[{"content":"Remove(T)","pos":[0,9]}]},{"pos":[26549,26555],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[26629,26630],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26657,26658],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[26685,26686],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26785,26791],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[26868,26869],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26896,26897],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[26924,26925],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27295,27310],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[27546,27559],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[27640,27641],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27668,27669],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27771,27784],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[27868,27869],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27896,27897],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28168,28173],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[28593,28607],"content":"ICollection<T>","needQuote":true,"nodes":[{"content":"ICollection&lt;T&gt;","pos":[0,14],"source":"ICollection<T>"}]},{"pos":[28826,28837],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[28901,28902],"content":"<","needQuote":true,"nodes":[]},{"pos":[28929,28930],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[29050,29061],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"content":"(Of","pos":[29126,29129]},{"pos":[29163,29164],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[29191,29192],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29422,29432],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[29808,29815],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[30027,30032],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[30105,30106],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30133,30134],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30228,30233],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[30309,30310],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30337,30338],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30590,30601],"content":"Contains(T)","needQuote":true,"nodes":[{"content":"Contains(T)","pos":[0,11]}]},{"pos":[30828,30836],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[30912,30913],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30940,30941],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[30968,30969],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31070,31078],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[31157,31158],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31185,31186],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[31213,31214],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31493,31511],"content":"CopyTo(T[], Int32)","needQuote":true,"nodes":[{"content":"CopyTo(T[], Int32)","pos":[0,18]}]},{"pos":[31809,31815],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[31889,31890],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31917,31918],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":"[]","pos":[31946,31948]},{"content":",","pos":[31980,31981]},{"pos":[32035,32040],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[32099,32100],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32214,32220],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[32297,32298],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32325,32326],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[32353,32355],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[32384,32385]},{"pos":[32439,32444],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[32503,32504],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32796,32805],"content":"Remove(T)","needQuote":true,"nodes":[{"content":"Remove(T)","pos":[0,9]}]},{"pos":[33026,33032],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[33106,33107],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33134,33135],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[33162,33163],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33262,33268],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[33345,33346],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33373,33374],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[33401,33402],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33664,33679],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[33915,33928],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[34009,34010],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34037,34038],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34140,34153],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[34237,34238],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34265,34266],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34604,34618],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[34837,34848],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[34912,34913],"content":"<","needQuote":true,"nodes":[]},{"pos":[34940,34941],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[35061,35072],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[35137,35140]},{"pos":[35174,35175],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[35202,35203],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35422,35436],"content":"ICollection<T>","needQuote":true,"nodes":[{"content":"ICollection&lt;T&gt;","pos":[0,14],"source":"ICollection<T>"}]},{"pos":[35655,35666],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[35730,35731],"content":"<","needQuote":true,"nodes":[]},{"pos":[35758,35759],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[35879,35890],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"content":"(Of","pos":[35955,35958]},{"pos":[35992,35993],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[36020,36021],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36238,36252],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[36471,36482],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[36546,36547],"content":"<","needQuote":true,"nodes":[]},{"pos":[36574,36575],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[36695,36706],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[36771,36774]},{"pos":[36808,36809],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[36836,36837],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37015,37016],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[37135,37142],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[37261,37262],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[37337,37343],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[37472,37493],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Collections.Generic.ISet`1\n  commentId: T:System.Collections.Generic.ISet`1\n  id: ISet`1\n  parent: System.Collections.Generic\n  children:\n  - System.Collections.Generic.ISet`1.Add(`0)\n  - System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})\n  - System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})\n  - System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})\n  - System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})\n  - System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})\n  - System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})\n  - System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})\n  - System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})\n  - System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})\n  - System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})\n  langs:\n  - csharp\n  - vb\n  name: ISet<T>\n  fullName: System.Collections.Generic.ISet<T>\n  type: Interface\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ISet\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 2422\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Provides the base interface for the abstraction of sets.</p>\\n\"\n  syntax:\n    content: 'public interface ISet<T> : ICollection<T>, IEnumerable<T>, IEnumerable'\n    content.vb: >-\n      Public Interface ISet(Of T)\n          Inherits ICollection(Of T), IEnumerable(Of T), IEnumerable\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of elements in the set.</p>\\n\"\n  inheritedMembers:\n  - System.Collections.Generic.ICollection{{T}}.Count\n  - System.Collections.Generic.ICollection{{T}}.IsReadOnly\n  - System.Collections.Generic.ICollection{{T}}.Clear\n  - System.Collections.Generic.ICollection{{T}}.Contains({T})\n  - System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)\n  - System.Collections.Generic.ICollection{{T}}.Remove({T})\n  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator\n  modifiers.csharp:\n  - public\n  - interface\n  modifiers.vb:\n  - Public\n  - Interface\n  fullName.vb: System.Collections.Generic.ISet(Of T)\n  name.vb: ISet(Of T)\n  nameWithType: ISet<T>\n  nameWithType.vb: ISet(Of T)\n- uid: System.Collections.Generic.ISet`1.Add(`0)\n  commentId: M:System.Collections.Generic.ISet`1.Add(`0)\n  id: Add(`0)\n  parent: System.Collections.Generic.ISet`1\n  langs:\n  - csharp\n  - vb\n  name: Add(T)\n  fullName: System.Collections.Generic.ISet<T>.Add(T)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 2424\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Adds an element to the current set and returns a value to indicate if the element was successfully added. </p>\\n\"\n  syntax:\n    content: bool Add(T item)\n    content.vb: Function Add(item As T) As Boolean\n    parameters:\n    - id: item\n      type: '{T}'\n      description: \"\\n<p>The element to add to the set.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the element is added to the set; <strong>false</strong> if the element is already in the set.</p>\\n\"\n  fullName.vb: System.Collections.Generic.ISet(Of T).Add(T)\n  nameWithType: ISet<T>.Add(T)\n  nameWithType.vb: ISet(Of T).Add(T)\n- uid: System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})\n  commentId: M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})\n  id: ExceptWith(System.Collections.Generic.IEnumerable{`0})\n  parent: System.Collections.Generic.ISet`1\n  langs:\n  - csharp\n  - vb\n  name: ExceptWith(IEnumerable<T>)\n  fullName: System.Collections.Generic.ISet<T>.ExceptWith(System.Collections.Generic.IEnumerable<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExceptWith\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 2425\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Removes all elements in the specified collection from the current set.</p>\\n\"\n  syntax:\n    content: void ExceptWith(IEnumerable<T> other)\n    content.vb: Sub ExceptWith(other As IEnumerable(Of T))\n    parameters:\n    - id: other\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>The collection of items to remove from the set.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>other</em> is <strong>null</strong>.</p>\\n\"\n  fullName.vb: System.Collections.Generic.ISet(Of T).ExceptWith(System.Collections.Generic.IEnumerable(Of T))\n  name.vb: ExceptWith(IEnumerable(Of T))\n  nameWithType: ISet<T>.ExceptWith(IEnumerable<T>)\n  nameWithType.vb: ISet(Of T).ExceptWith(IEnumerable(Of T))\n- uid: System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})\n  commentId: M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})\n  id: IntersectWith(System.Collections.Generic.IEnumerable{`0})\n  parent: System.Collections.Generic.ISet`1\n  langs:\n  - csharp\n  - vb\n  name: IntersectWith(IEnumerable<T>)\n  fullName: System.Collections.Generic.ISet<T>.IntersectWith(System.Collections.Generic.IEnumerable<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IntersectWith\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 2426\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Modifies the current set so that it contains only elements that are also in a specified collection.</p>\\n\"\n  syntax:\n    content: void IntersectWith(IEnumerable<T> other)\n    content.vb: Sub IntersectWith(other As IEnumerable(Of T))\n    parameters:\n    - id: other\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>The collection to compare to the current set.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>other</em> is <strong>null</strong>.</p>\\n\"\n  fullName.vb: System.Collections.Generic.ISet(Of T).IntersectWith(System.Collections.Generic.IEnumerable(Of T))\n  name.vb: IntersectWith(IEnumerable(Of T))\n  nameWithType: ISet<T>.IntersectWith(IEnumerable<T>)\n  nameWithType.vb: ISet(Of T).IntersectWith(IEnumerable(Of T))\n- uid: System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})\n  commentId: M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})\n  id: IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})\n  parent: System.Collections.Generic.ISet`1\n  langs:\n  - csharp\n  - vb\n  name: IsProperSubsetOf(IEnumerable<T>)\n  fullName: System.Collections.Generic.ISet<T>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsProperSubsetOf\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 2427\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Determines whether the current set is a proper (strict) subset of a specified collection.</p>\\n\"\n  syntax:\n    content: bool IsProperSubsetOf(IEnumerable<T> other)\n    content.vb: Function IsProperSubsetOf(other As IEnumerable(Of T)) As Boolean\n    parameters:\n    - id: other\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>The collection to compare to the current set.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current set is a proper subset of <em>other</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>other</em> is <strong>null</strong>.</p>\\n\"\n  fullName.vb: System.Collections.Generic.ISet(Of T).IsProperSubsetOf(System.Collections.Generic.IEnumerable(Of T))\n  name.vb: IsProperSubsetOf(IEnumerable(Of T))\n  nameWithType: ISet<T>.IsProperSubsetOf(IEnumerable<T>)\n  nameWithType.vb: ISet(Of T).IsProperSubsetOf(IEnumerable(Of T))\n- uid: System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})\n  commentId: M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})\n  id: IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})\n  parent: System.Collections.Generic.ISet`1\n  langs:\n  - csharp\n  - vb\n  name: IsProperSupersetOf(IEnumerable<T>)\n  fullName: System.Collections.Generic.ISet<T>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsProperSupersetOf\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 2428\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Determines whether the current set is a proper (strict) superset of a specified collection.</p>\\n\"\n  syntax:\n    content: bool IsProperSupersetOf(IEnumerable<T> other)\n    content.vb: Function IsProperSupersetOf(other As IEnumerable(Of T)) As Boolean\n    parameters:\n    - id: other\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>The collection to compare to the current set. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current set is a proper superset of <em>other</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>other</em> is <strong>null</strong>.</p>\\n\"\n  fullName.vb: System.Collections.Generic.ISet(Of T).IsProperSupersetOf(System.Collections.Generic.IEnumerable(Of T))\n  name.vb: IsProperSupersetOf(IEnumerable(Of T))\n  nameWithType: ISet<T>.IsProperSupersetOf(IEnumerable<T>)\n  nameWithType.vb: ISet(Of T).IsProperSupersetOf(IEnumerable(Of T))\n- uid: System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})\n  commentId: M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})\n  id: IsSubsetOf(System.Collections.Generic.IEnumerable{`0})\n  parent: System.Collections.Generic.ISet`1\n  langs:\n  - csharp\n  - vb\n  name: IsSubsetOf(IEnumerable<T>)\n  fullName: System.Collections.Generic.ISet<T>.IsSubsetOf(System.Collections.Generic.IEnumerable<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsSubsetOf\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 2429\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Determines whether a set is a subset of a specified collection.</p>\\n\"\n  syntax:\n    content: bool IsSubsetOf(IEnumerable<T> other)\n    content.vb: Function IsSubsetOf(other As IEnumerable(Of T)) As Boolean\n    parameters:\n    - id: other\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>The collection to compare to the current set.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current set is a subset of <em>other</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>other</em> is <strong>null</strong>.</p>\\n\"\n  fullName.vb: System.Collections.Generic.ISet(Of T).IsSubsetOf(System.Collections.Generic.IEnumerable(Of T))\n  name.vb: IsSubsetOf(IEnumerable(Of T))\n  nameWithType: ISet<T>.IsSubsetOf(IEnumerable<T>)\n  nameWithType.vb: ISet(Of T).IsSubsetOf(IEnumerable(Of T))\n- uid: System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})\n  commentId: M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})\n  id: IsSupersetOf(System.Collections.Generic.IEnumerable{`0})\n  parent: System.Collections.Generic.ISet`1\n  langs:\n  - csharp\n  - vb\n  name: IsSupersetOf(IEnumerable<T>)\n  fullName: System.Collections.Generic.ISet<T>.IsSupersetOf(System.Collections.Generic.IEnumerable<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsSupersetOf\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 2430\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Determines whether the current set is a superset of a specified collection.</p>\\n\"\n  syntax:\n    content: bool IsSupersetOf(IEnumerable<T> other)\n    content.vb: Function IsSupersetOf(other As IEnumerable(Of T)) As Boolean\n    parameters:\n    - id: other\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>The collection to compare to the current set.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current set is a superset of <em>other</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>other</em> is <strong>null</strong>.</p>\\n\"\n  fullName.vb: System.Collections.Generic.ISet(Of T).IsSupersetOf(System.Collections.Generic.IEnumerable(Of T))\n  name.vb: IsSupersetOf(IEnumerable(Of T))\n  nameWithType: ISet<T>.IsSupersetOf(IEnumerable<T>)\n  nameWithType.vb: ISet(Of T).IsSupersetOf(IEnumerable(Of T))\n- uid: System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})\n  commentId: M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})\n  id: Overlaps(System.Collections.Generic.IEnumerable{`0})\n  parent: System.Collections.Generic.ISet`1\n  langs:\n  - csharp\n  - vb\n  name: Overlaps(IEnumerable<T>)\n  fullName: System.Collections.Generic.ISet<T>.Overlaps(System.Collections.Generic.IEnumerable<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Overlaps\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 2431\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Determines whether the current set overlaps with the specified collection.</p>\\n\"\n  syntax:\n    content: bool Overlaps(IEnumerable<T> other)\n    content.vb: Function Overlaps(other As IEnumerable(Of T)) As Boolean\n    parameters:\n    - id: other\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>The collection to compare to the current set.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current set and <em>other</em> share at least one common element; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>other</em> is <strong>null</strong>.</p>\\n\"\n  fullName.vb: System.Collections.Generic.ISet(Of T).Overlaps(System.Collections.Generic.IEnumerable(Of T))\n  name.vb: Overlaps(IEnumerable(Of T))\n  nameWithType: ISet<T>.Overlaps(IEnumerable<T>)\n  nameWithType.vb: ISet(Of T).Overlaps(IEnumerable(Of T))\n- uid: System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})\n  commentId: M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})\n  id: SetEquals(System.Collections.Generic.IEnumerable{`0})\n  parent: System.Collections.Generic.ISet`1\n  langs:\n  - csharp\n  - vb\n  name: SetEquals(IEnumerable<T>)\n  fullName: System.Collections.Generic.ISet<T>.SetEquals(System.Collections.Generic.IEnumerable<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetEquals\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 2432\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Determines whether the current set and the specified collection contain the same elements.</p>\\n\"\n  syntax:\n    content: bool SetEquals(IEnumerable<T> other)\n    content.vb: Function SetEquals(other As IEnumerable(Of T)) As Boolean\n    parameters:\n    - id: other\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>The collection to compare to the current set.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current set is equal to <em>other</em>; otherwise, false.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>other</em> is <strong>null</strong>.</p>\\n\"\n  fullName.vb: System.Collections.Generic.ISet(Of T).SetEquals(System.Collections.Generic.IEnumerable(Of T))\n  name.vb: SetEquals(IEnumerable(Of T))\n  nameWithType: ISet<T>.SetEquals(IEnumerable<T>)\n  nameWithType.vb: ISet(Of T).SetEquals(IEnumerable(Of T))\n- uid: System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})\n  commentId: M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})\n  id: SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})\n  parent: System.Collections.Generic.ISet`1\n  langs:\n  - csharp\n  - vb\n  name: SymmetricExceptWith(IEnumerable<T>)\n  fullName: System.Collections.Generic.ISet<T>.SymmetricExceptWith(System.Collections.Generic.IEnumerable<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SymmetricExceptWith\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 2433\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both. </p>\\n\"\n  syntax:\n    content: void SymmetricExceptWith(IEnumerable<T> other)\n    content.vb: Sub SymmetricExceptWith(other As IEnumerable(Of T))\n    parameters:\n    - id: other\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>The collection to compare to the current set.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>other</em> is <strong>null</strong>.</p>\\n\"\n  fullName.vb: System.Collections.Generic.ISet(Of T).SymmetricExceptWith(System.Collections.Generic.IEnumerable(Of T))\n  name.vb: SymmetricExceptWith(IEnumerable(Of T))\n  nameWithType: ISet<T>.SymmetricExceptWith(IEnumerable<T>)\n  nameWithType.vb: ISet(Of T).SymmetricExceptWith(IEnumerable(Of T))\n- uid: System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})\n  commentId: M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})\n  id: UnionWith(System.Collections.Generic.IEnumerable{`0})\n  parent: System.Collections.Generic.ISet`1\n  langs:\n  - csharp\n  - vb\n  name: UnionWith(IEnumerable<T>)\n  fullName: System.Collections.Generic.ISet<T>.UnionWith(System.Collections.Generic.IEnumerable<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UnionWith\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 2434\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Modifies the current set so that it contains all elements that are present in the current set, in the specified collection, or in both.</p>\\n\"\n  syntax:\n    content: void UnionWith(IEnumerable<T> other)\n    content.vb: Sub UnionWith(other As IEnumerable(Of T))\n    parameters:\n    - id: other\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>The collection to compare to the current set.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>other</em> is <strong>null</strong>.</p>\\n\"\n  fullName.vb: System.Collections.Generic.ISet(Of T).UnionWith(System.Collections.Generic.IEnumerable(Of T))\n  name.vb: UnionWith(IEnumerable(Of T))\n  nameWithType: ISet<T>.UnionWith(IEnumerable<T>)\n  nameWithType.vb: ISet(Of T).UnionWith(IEnumerable(Of T))\nreferences:\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n  nameWithType: System.Collections.Generic\n- uid: System.Collections.Generic.ICollection{{T}}.Count\n  parent: System.Collections.Generic.ICollection{{T}}\n  definition: System.Collections.Generic.ICollection`1.Count\n  name: Count\n  fullName: System.Collections.Generic.ICollection<T>.Count\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Count\n  commentId: P:System.Collections.Generic.ICollection{`0}.Count\n  nameWithType: ICollection<T>.Count\n  nameWithType.vb: ICollection(Of T).Count\n- uid: System.Collections.Generic.ICollection{{T}}.IsReadOnly\n  parent: System.Collections.Generic.ICollection{{T}}\n  definition: System.Collections.Generic.ICollection`1.IsReadOnly\n  name: IsReadOnly\n  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly\n  fullname.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly\n  commentId: P:System.Collections.Generic.ICollection{`0}.IsReadOnly\n  nameWithType: ICollection<T>.IsReadOnly\n  nameWithType.vb: ICollection(Of T).IsReadOnly\n- uid: System.Collections.Generic.ICollection{{T}}.Clear\n  parent: System.Collections.Generic.ICollection{{T}}\n  definition: System.Collections.Generic.ICollection`1.Clear\n  name: Clear()\n  fullName: System.Collections.Generic.ICollection<T>.Clear()\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Clear()\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Clear\n    name: Clear\n    fullName: System.Collections.Generic.ICollection<T>.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Clear\n    name: Clear\n    fullName: System.Collections.Generic.ICollection(Of T).Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.Generic.ICollection{`0}.Clear\n  nameWithType: ICollection<T>.Clear()\n  nameWithType.vb: ICollection(Of T).Clear()\n- uid: System.Collections.Generic.ICollection{{T}}.Contains({T})\n  parent: System.Collections.Generic.ICollection{{T}}\n  definition: System.Collections.Generic.ICollection`1.Contains(`0)\n  name: Contains(T)\n  fullName: System.Collections.Generic.ICollection<T>.Contains(T)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Contains(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Contains(`0)\n    name: Contains\n    fullName: System.Collections.Generic.ICollection<T>.Contains\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Contains(`0)\n    name: Contains\n    fullName: System.Collections.Generic.ICollection(Of T).Contains\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.Generic.ICollection{`0}.Contains(`0)\n  nameWithType: ICollection<T>.Contains(T)\n  nameWithType.vb: ICollection(Of T).Contains(T)\n- uid: System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)\n  parent: System.Collections.Generic.ICollection{{T}}\n  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n  name: CopyTo(T[], Int32)\n  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)\n  name.vb: CopyTo(T(), Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n    name: CopyTo\n    fullName: System.Collections.Generic.ICollection<T>.CopyTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n    name: CopyTo\n    fullName: System.Collections.Generic.ICollection(Of T).CopyTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.Generic.ICollection{`0}.CopyTo(`0[],System.Int32)\n  nameWithType: ICollection<T>.CopyTo(T[], Int32)\n  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)\n- uid: System.Collections.Generic.ICollection{{T}}.Remove({T})\n  parent: System.Collections.Generic.ICollection{{T}}\n  definition: System.Collections.Generic.ICollection`1.Remove(`0)\n  name: Remove(T)\n  fullName: System.Collections.Generic.ICollection<T>.Remove(T)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Remove(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Remove(`0)\n    name: Remove\n    fullName: System.Collections.Generic.ICollection<T>.Remove\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Remove(`0)\n    name: Remove\n    fullName: System.Collections.Generic.ICollection(Of T).Remove\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.Generic.ICollection{`0}.Remove(`0)\n  nameWithType: ICollection<T>.Remove(T)\n  nameWithType.vb: ICollection(Of T).Remove(T)\n- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator\n  parent: System.Collections.Generic.IEnumerable{{T}}\n  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator\n  name: GetEnumerator()\n  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator\n  nameWithType: IEnumerable<T>.GetEnumerator()\n  nameWithType.vb: IEnumerable(Of T).GetEnumerator()\n- uid: System.Collections.Generic.ICollection`1.Count\n  isExternal: false\n  name: Count\n  fullName: System.Collections.Generic.ICollection<T>.Count\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Count\n  commentId: P:System.Collections.Generic.ICollection`1.Count\n  nameWithType: ICollection<T>.Count\n  nameWithType.vb: ICollection(Of T).Count\n- uid: System.Collections.Generic.ICollection{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.ICollection`1\n  name: ICollection<T>\n  fullName: System.Collections.Generic.ICollection<T>\n  fullname.vb: System.Collections.Generic.ICollection(Of T)\n  name.vb: ICollection(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.ICollection{`0}\n  nameWithType: ICollection<T>\n  nameWithType.vb: ICollection(Of T)\n- uid: System.Collections.Generic.ICollection`1.IsReadOnly\n  isExternal: false\n  name: IsReadOnly\n  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly\n  fullname.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly\n  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly\n  nameWithType: ICollection<T>.IsReadOnly\n  nameWithType.vb: ICollection(Of T).IsReadOnly\n- uid: System.Collections.Generic.ICollection`1.Clear\n  isExternal: false\n  name: Clear()\n  fullName: System.Collections.Generic.ICollection<T>.Clear()\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Clear()\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Clear\n    name: Clear\n    fullName: System.Collections.Generic.ICollection<T>.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Clear\n    name: Clear\n    fullName: System.Collections.Generic.ICollection(Of T).Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.Generic.ICollection`1.Clear\n  nameWithType: ICollection<T>.Clear()\n  nameWithType.vb: ICollection(Of T).Clear()\n- uid: System.Collections.Generic.ICollection`1.Contains(`0)\n  isExternal: false\n  name: Contains(T)\n  fullName: System.Collections.Generic.ICollection<T>.Contains(T)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Contains(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Contains(`0)\n    name: Contains\n    fullName: System.Collections.Generic.ICollection<T>.Contains\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Contains(`0)\n    name: Contains\n    fullName: System.Collections.Generic.ICollection(Of T).Contains\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)\n  nameWithType: ICollection<T>.Contains(T)\n  nameWithType.vb: ICollection(Of T).Contains(T)\n- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n  isExternal: true\n  name: CopyTo(T[], Int32)\n  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)\n  name.vb: CopyTo(T(), Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n    name: CopyTo\n    fullName: System.Collections.Generic.ICollection<T>.CopyTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n    name: CopyTo\n    fullName: System.Collections.Generic.ICollection(Of T).CopyTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n  nameWithType: ICollection<T>.CopyTo(T[], Int32)\n  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)\n- uid: System.Collections.Generic.ICollection`1.Remove(`0)\n  isExternal: false\n  name: Remove(T)\n  fullName: System.Collections.Generic.ICollection<T>.Remove(T)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Remove(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Remove(`0)\n    name: Remove\n    fullName: System.Collections.Generic.ICollection<T>.Remove\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Remove(`0)\n    name: Remove\n    fullName: System.Collections.Generic.ICollection(Of T).Remove\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)\n  nameWithType: ICollection<T>.Remove(T)\n  nameWithType.vb: ICollection(Of T).Remove(T)\n- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator\n  nameWithType: IEnumerable<T>.GetEnumerator()\n  nameWithType.vb: IEnumerable(Of T).GetEnumerator()\n- uid: System.Collections.Generic.IEnumerable{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{`0}\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n- uid: System.Collections.Generic.ICollection`1\n  isExternal: false\n  name: ICollection<T>\n  fullName: System.Collections.Generic.ICollection<T>\n  fullname.vb: System.Collections.Generic.ICollection(Of T)\n  name.vb: ICollection(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.ICollection`1\n  nameWithType: ICollection<T>\n  nameWithType.vb: ICollection(Of T)\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable`1\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n- uid: '{T}'\n  definition: T\n  name: T\n  fullName: T\n  commentId: '!:T'\n  nameWithType: T\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: T\n  isExternal: false\n  name: T\n  fullName: T\n  nameWithType: T\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}