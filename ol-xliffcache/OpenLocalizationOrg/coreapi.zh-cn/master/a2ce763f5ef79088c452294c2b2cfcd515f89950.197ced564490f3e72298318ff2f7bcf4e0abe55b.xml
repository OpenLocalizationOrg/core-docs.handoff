{"nodes":[{"pos":[474,491],"content":"ReflectionContext","needQuote":true,"nodes":[{"content":"ReflectionContext","pos":[0,17]}]},{"pos":[1765,1784],"content":"ReflectionContext()","needQuote":true,"nodes":[{"content":"ReflectionContext()","pos":[0,19]}]},{"pos":[2842,2866],"content":"GetTypeForObject(Object)","needQuote":true,"nodes":[{"content":"GetTypeForObject(Object)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The object to represent.&lt;/p&gt;\\n","pos":[3657,3692],"source":"\\n<p>The object to represent.</p>\\n"},{"content":"\\n&lt;p&gt;An object that represents the type of the specified object.&lt;/p&gt;\\n","pos":[3765,3835],"source":"\\n<p>An object that represents the type of the specified object.</p>\\n"},{"pos":[4283,4304],"content":"MapAssembly(Assembly)","needQuote":true,"nodes":[{"content":"MapAssembly(Assembly)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The external representation of the assembly to represent in this context.&lt;/p&gt;\\n","pos":[5162,5246],"source":"\\n<p>The external representation of the assembly to represent in this context.</p>\\n"},{"content":"\\n&lt;p&gt;The representation of the assembly in this reflection context.&lt;/p&gt;\\n","pos":[5319,5392],"source":"\\n<p>The representation of the assembly in this reflection context.</p>\\n"},{"pos":[5827,5844],"content":"MapType(TypeInfo)","needQuote":true,"nodes":[{"content":"MapType(TypeInfo)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The external representation of the type to represent in this context.&lt;/p&gt;\\n","pos":[6661,6741],"source":"\\n<p>The external representation of the type to represent in this context.</p>\\n"},{"content":"\\n&lt;p&gt;The representation of the type in this reflection context..&lt;/p&gt;\\n","pos":[6814,6884],"source":"\\n<p>The representation of the type in this reflection context..</p>\\n"},{"pos":[7091,7108],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[7272,7278],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7438,7448],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[7543,7551],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7620,7621],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7648,7649],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7719,7727],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7796,7797],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7824,7825],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8008,8022],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[8141,8147],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8214,8215],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8265,8271],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8331,8332],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8415,8421],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8488,8489],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8539,8545],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8605,8606],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8820,8842],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[8990,8996],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9063,9064],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9114,9120],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9181,9182]},{"pos":[9237,9243],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9303,9304],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9401,9407],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9474,9475],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9525,9531],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9592,9593]},{"pos":[9648,9654],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9714,9715],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9960,9991],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[10157,10172],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10248,10249],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10299,10305],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10366,10367]},{"pos":[10422,10428],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10488,10489],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10595,10610],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10686,10687],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10737,10743],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10804,10805]},{"pos":[10860,10866],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10926,10927],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11157,11170],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[11271,11282],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[11354,11355],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11382,11383],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11456,11467],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[11539,11540],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11567,11568],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11743,11752],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[11845,11852],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11920,11921],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11948,11949],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12018,12025],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[12093,12094],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12121,12122],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12297,12314],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[12423,12438],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12514,12515],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12542,12543],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12620,12635],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12711,12712],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12739,12740],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12885,12891],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[13046,13054],"content":"TypeInfo","needQuote":true,"nodes":[{"content":"TypeInfo","pos":[0,8]}]},{"pos":[13251,13259],"content":"Assembly","needQuote":true,"nodes":[{"content":"Assembly","pos":[0,8]}]}],"content":"items:\n- uid: System.Reflection.ReflectionContext\n  commentId: T:System.Reflection.ReflectionContext\n  id: ReflectionContext\n  parent: System.Reflection\n  children:\n  - System.Reflection.ReflectionContext.#ctor\n  - System.Reflection.ReflectionContext.GetTypeForObject(System.Object)\n  - System.Reflection.ReflectionContext.MapAssembly(System.Reflection.Assembly)\n  - System.Reflection.ReflectionContext.MapType(System.Reflection.TypeInfo)\n  langs:\n  - csharp\n  - vb\n  name: ReflectionContext\n  fullName: System.Reflection.ReflectionContext\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/ReflectionContext.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReflectionContext\n    path: src/mscorlib/src/System/Reflection/ReflectionContext.cs\n    startLine: 19\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Represents a context that can provide reflection objects.</p>\\n\"\n  syntax:\n    content: public abstract class ReflectionContext\n    content.vb: Public MustInherit Class ReflectionContext\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: ReflectionContext\n- uid: System.Reflection.ReflectionContext.#ctor\n  commentId: M:System.Reflection.ReflectionContext.#ctor\n  id: '#ctor'\n  parent: System.Reflection.ReflectionContext\n  langs:\n  - csharp\n  - vb\n  name: ReflectionContext()\n  fullName: System.Reflection.ReflectionContext.ReflectionContext()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/ReflectionContext.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Reflection/ReflectionContext.cs\n    startLine: 21\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Reflection.ReflectionContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected ReflectionContext()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: ReflectionContext.ReflectionContext()\n- uid: System.Reflection.ReflectionContext.GetTypeForObject(System.Object)\n  commentId: M:System.Reflection.ReflectionContext.GetTypeForObject(System.Object)\n  id: GetTypeForObject(System.Object)\n  parent: System.Reflection.ReflectionContext\n  langs:\n  - csharp\n  - vb\n  name: GetTypeForObject(Object)\n  fullName: System.Reflection.ReflectionContext.GetTypeForObject(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/ReflectionContext.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetTypeForObject\n    path: src/mscorlib/src/System/Reflection/ReflectionContext.cs\n    startLine: 27\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the representation of the type of the specified object in this reflection context.</p>\\n\"\n  syntax:\n    content: public virtual TypeInfo GetTypeForObject(object value)\n    content.vb: Public Overridable Function GetTypeForObject(value As Object) As TypeInfo\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to represent.</p>\\n\"\n    return:\n      type: System.Reflection.TypeInfo\n      description: \"\\n<p>An object that represents the type of the specified object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ReflectionContext.GetTypeForObject(Object)\n- uid: System.Reflection.ReflectionContext.MapAssembly(System.Reflection.Assembly)\n  commentId: M:System.Reflection.ReflectionContext.MapAssembly(System.Reflection.Assembly)\n  id: MapAssembly(System.Reflection.Assembly)\n  parent: System.Reflection.ReflectionContext\n  langs:\n  - csharp\n  - vb\n  name: MapAssembly(Assembly)\n  fullName: System.Reflection.ReflectionContext.MapAssembly(System.Reflection.Assembly)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/ReflectionContext.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MapAssembly\n    path: src/mscorlib/src/System/Reflection/ReflectionContext.cs\n    startLine: 23\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the representation, in this reflection context, of an assembly that is represented by an object from another reflection context.</p>\\n\"\n  syntax:\n    content: public abstract Assembly MapAssembly(Assembly assembly)\n    content.vb: Public MustOverride Function MapAssembly(assembly As Assembly) As Assembly\n    parameters:\n    - id: assembly\n      type: System.Reflection.Assembly\n      description: \"\\n<p>The external representation of the assembly to represent in this context.</p>\\n\"\n    return:\n      type: System.Reflection.Assembly\n      description: \"\\n<p>The representation of the assembly in this reflection context.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: ReflectionContext.MapAssembly(Assembly)\n- uid: System.Reflection.ReflectionContext.MapType(System.Reflection.TypeInfo)\n  commentId: M:System.Reflection.ReflectionContext.MapType(System.Reflection.TypeInfo)\n  id: MapType(System.Reflection.TypeInfo)\n  parent: System.Reflection.ReflectionContext\n  langs:\n  - csharp\n  - vb\n  name: MapType(TypeInfo)\n  fullName: System.Reflection.ReflectionContext.MapType(System.Reflection.TypeInfo)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/ReflectionContext.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MapType\n    path: src/mscorlib/src/System/Reflection/ReflectionContext.cs\n    startLine: 25\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the representation, in this reflection context, of a type represented by an object from another reflection context.</p>\\n\"\n  syntax:\n    content: public abstract TypeInfo MapType(TypeInfo type)\n    content.vb: Public MustOverride Function MapType(type As TypeInfo) As TypeInfo\n    parameters:\n    - id: type\n      type: System.Reflection.TypeInfo\n      description: \"\\n<p>The external representation of the type to represent in this context.</p>\\n\"\n    return:\n      type: System.Reflection.TypeInfo\n      description: \"\\n<p>The representation of the type in this reflection context..</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: ReflectionContext.MapType(TypeInfo)\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Reflection.TypeInfo\n  parent: System.Reflection\n  isExternal: false\n  name: TypeInfo\n  fullName: System.Reflection.TypeInfo\n  nameWithType: TypeInfo\n  commentId: T:System.Reflection.TypeInfo\n- uid: System.Reflection.Assembly\n  parent: System.Reflection\n  isExternal: false\n  name: Assembly\n  fullName: System.Reflection.Assembly\n  nameWithType: Assembly\n  commentId: T:System.Reflection.Assembly\n"}