{"nodes":[{"pos":[268,290],"content":"ConsoleCancelEventArgs","needQuote":true,"nodes":[{"content":"ConsoleCancelEventArgs","pos":[0,22]}]},{"pos":[1740,1746],"content":"Cancel","needQuote":true,"nodes":[{"content":"Cancel","pos":[0,6]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current process should resume when the event handler concludes; &lt;strong&gt;false&lt;/strong&gt; if the current process should terminate.","pos":[2752,2915],"source":"\\n<p>\\n<strong>true</strong> if the current process should resume when the event handler concludes; <strong>false</strong> if the current process should terminate."},{"content":"The default value is &lt;strong&gt;false&lt;/strong&gt;; the current process terminates when the event handler returns.","pos":[2916,3023],"source":" The default value is <strong>false</strong>; the current process terminates when the event handler returns."},{"content":"If &lt;strong&gt;true&lt;/strong&gt;, the current process continues.","pos":[3024,3080],"source":" If <strong>true</strong>, the current process continues."},{"content":"&lt;/p&gt;\\n","pos":[3081,3087],"source":" </p>\\n"},{"pos":[3756,3766],"content":"SpecialKey","needQuote":true,"nodes":[{"content":"SpecialKey","pos":[0,10]}]},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies the key combination that interrupted the current process.","pos":[4494,4601],"source":"\\n<p>One of the enumeration values that specifies the key combination that interrupted the current process."},{"content":"There is no default value.&lt;/p&gt;\\n","pos":[4602,4634],"source":" There is no default value.</p>\\n"},{"pos":[4819,4825],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[4956,4962],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5110,5119],"content":"EventArgs","needQuote":true,"nodes":[{"content":"EventArgs","pos":[0,9]}]},{"pos":[5291,5296],"content":"Empty","needQuote":true,"nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[5483,5493],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[5588,5596],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[5665,5666],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[5693,5694],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[5764,5772],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[5841,5842],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[5869,5870],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6053,6067],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[6186,6192],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[6259,6260],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6310,6316],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6376,6377],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6460,6466],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[6533,6534],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6584,6590],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6650,6651],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6865,6887],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[7035,7041],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7108,7109],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7159,7165],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[7226,7227]},{"pos":[7282,7288],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7348,7349],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7446,7452],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7519,7520],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7570,7576],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[7637,7638]},{"pos":[7693,7699],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7759,7760],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8005,8036],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[8202,8217],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[8293,8294],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8344,8350],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8411,8412]},{"pos":[8467,8473],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8533,8534],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8640,8655],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[8731,8732],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8782,8788],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8849,8850]},{"pos":[8905,8911],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8971,8972],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9202,9215],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[9316,9327],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[9399,9400],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9427,9428],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9501,9512],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[9584,9585],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9612,9613],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9788,9797],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[9890,9897],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[9965,9966],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9993,9994],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10063,10070],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[10138,10139],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10166,10167],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10342,10359],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[10468,10483],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[10559,10560],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10587,10588],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10665,10680],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[10756,10757],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10784,10785],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10955,10962],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[11121,11138],"content":"ConsoleSpecialKey","needQuote":true,"nodes":[{"content":"ConsoleSpecialKey","pos":[0,17]}]}],"content":"items:\n- uid: System.ConsoleCancelEventArgs\n  commentId: T:System.ConsoleCancelEventArgs\n  id: ConsoleCancelEventArgs\n  parent: System\n  children:\n  - System.ConsoleCancelEventArgs.Cancel\n  - System.ConsoleCancelEventArgs.SpecialKey\n  langs:\n  - csharp\n  - vb\n  name: ConsoleCancelEventArgs\n  fullName: System.ConsoleCancelEventArgs\n  type: Class\n  source:\n    remote:\n      path: src/System.Console/src/System/ConsoleCancelEventArgs.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConsoleCancelEventArgs\n    path: src/System.Console/src/System/ConsoleCancelEventArgs.cs\n    startLine: 9\n  assemblies:\n  - System.Console\n  namespace: System\n  summary: \"\\n<p>Provides data for the <xref href=\\\"System.Console.CancelKeyPress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> event. This class cannot be inherited.</p>\\n\"\n  syntax:\n    content: 'public sealed class ConsoleCancelEventArgs : EventArgs'\n    content.vb: >-\n      Public NotInheritable Class ConsoleCancelEventArgs\n          Inherits EventArgs\n  inheritance:\n  - System.Object\n  - System.EventArgs\n  inheritedMembers:\n  - System.EventArgs.Empty\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: ConsoleCancelEventArgs\n- uid: System.ConsoleCancelEventArgs.Cancel\n  commentId: P:System.ConsoleCancelEventArgs.Cancel\n  id: Cancel\n  parent: System.ConsoleCancelEventArgs\n  langs:\n  - csharp\n  - vb\n  name: Cancel\n  fullName: System.ConsoleCancelEventArgs.Cancel\n  type: Property\n  source:\n    remote:\n      path: src/System.Console/src/System/ConsoleCancelEventArgs.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Cancel\n    path: src/System.Console/src/System/ConsoleCancelEventArgs.cs\n    startLine: 20\n  assemblies:\n  - System.Console\n  namespace: System\n  summary: \"\\n<p>Gets or sets a value that indicates whether simultaneously pressing the <xref href=\\\"System.ConsoleModifiers.Control\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> modifier key and the <xref href=\\\"System.ConsoleKey.C\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> console key (Ctrl+C) or the Ctrl+Break keys terminates the current process. The default is <strong>false</strong>, which terminates the current process. </p>\\n\"\n  syntax:\n    content: public bool Cancel { get; set; }\n    content.vb: Public Property Cancel As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current process should resume when the event handler concludes; <strong>false</strong> if the current process should terminate. The default value is <strong>false</strong>; the current process terminates when the event handler returns. If <strong>true</strong>, the current process continues. </p>\\n\"\n  seealso:\n  - type: System.ConsoleCancelEventHandler\n    commentId: T:System.ConsoleCancelEventHandler\n  - type: System.ConsoleKey\n    commentId: T:System.ConsoleKey\n  - type: System.ConsoleModifiers\n    commentId: T:System.ConsoleModifiers\n  - type: System.ConsoleCancelEventArgs.SpecialKey\n    commentId: P:System.ConsoleCancelEventArgs.SpecialKey\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: ConsoleCancelEventArgs.Cancel\n- uid: System.ConsoleCancelEventArgs.SpecialKey\n  commentId: P:System.ConsoleCancelEventArgs.SpecialKey\n  id: SpecialKey\n  parent: System.ConsoleCancelEventArgs\n  langs:\n  - csharp\n  - vb\n  name: SpecialKey\n  fullName: System.ConsoleCancelEventArgs.SpecialKey\n  type: Property\n  source:\n    remote:\n      path: src/System.Console/src/System/ConsoleCancelEventArgs.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SpecialKey\n    path: src/System.Console/src/System/ConsoleCancelEventArgs.cs\n    startLine: 25\n  assemblies:\n  - System.Console\n  namespace: System\n  summary: \"\\n<p>Gets the combination of modifier and console keys that interrupted the current process.</p>\\n\"\n  syntax:\n    content: public ConsoleSpecialKey SpecialKey { get; }\n    content.vb: Public ReadOnly Property SpecialKey As ConsoleSpecialKey\n    parameters: []\n    return:\n      type: System.ConsoleSpecialKey\n      description: \"\\n<p>One of the enumeration values that specifies the key combination that interrupted the current process. There is no default value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ConsoleCancelEventArgs.SpecialKey\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.EventArgs\n  parent: System\n  isExternal: false\n  name: EventArgs\n  fullName: System.EventArgs\n  nameWithType: EventArgs\n  commentId: T:System.EventArgs\n- uid: System.EventArgs.Empty\n  parent: System.EventArgs\n  isExternal: true\n  name: Empty\n  fullName: System.EventArgs.Empty\n  nameWithType: EventArgs.Empty\n  commentId: F:System.EventArgs.Empty\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.ConsoleSpecialKey\n  parent: System\n  isExternal: false\n  name: ConsoleSpecialKey\n  fullName: System.ConsoleSpecialKey\n  nameWithType: ConsoleSpecialKey\n  commentId: T:System.ConsoleSpecialKey\n"}