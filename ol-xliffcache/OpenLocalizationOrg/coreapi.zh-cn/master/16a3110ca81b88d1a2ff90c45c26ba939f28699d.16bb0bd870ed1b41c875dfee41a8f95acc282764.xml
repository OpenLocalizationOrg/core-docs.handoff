{"nodes":[{"pos":[350,362],"content":"LocalBuilder","needQuote":true,"nodes":[{"content":"LocalBuilder","pos":[0,12]}]},{"pos":[2093,2101],"content":"IsPinned","needQuote":true,"nodes":[{"content":"IsPinned","pos":[0,8]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the object referred to by the local variable is pinned in memory; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[2861,2999],"source":"\\n<p>\\n<strong>true</strong> if the object referred to by the local variable is pinned in memory; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[3418,3428],"content":"LocalIndex","needQuote":true,"nodes":[{"content":"LocalIndex","pos":[0,10]}]},{"content":"\\n&lt;p&gt;An integer value that represents the order of declaration of the local variable within the method body.&lt;/p&gt;\\n","pos":[4167,4281],"source":"\\n<p>An integer value that represents the order of declaration of the local variable within the method body.</p>\\n"},{"pos":[4701,4710],"content":"LocalType","needQuote":true,"nodes":[{"content":"LocalType","pos":[0,9]}]},{"pos":[5793,5815],"content":"System.Reflection.Emit","needQuote":true,"nodes":[{"content":"System.Reflection.Emit","pos":[0,22]}]},{"pos":[5994,6000],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6178,6195],"content":"LocalVariableInfo","needQuote":true,"nodes":[{"content":"LocalVariableInfo","pos":[0,17]}]},{"pos":[6454,6464],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[6603,6611],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[6702,6703],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6730,6731],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6823,6831],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[6922,6923],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6950,6951],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7167,7181],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[7300,7306],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7373,7374],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7424,7430],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7490,7491],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7574,7580],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7647,7648],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7698,7704],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7764,7765],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7979,8001],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[8149,8155],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8222,8223],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8273,8279],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8340,8341]},{"pos":[8396,8402],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8462,8463],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8560,8566],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8633,8634],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8684,8690],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8751,8752]},{"pos":[8807,8813],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8873,8874],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9119,9150],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[9316,9331],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9407,9408],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9458,9464],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9525,9526]},{"pos":[9581,9587],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9647,9648],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9754,9769],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9845,9846],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9896,9902],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9963,9964]},{"pos":[10019,10025],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10085,10086],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10316,10329],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[10430,10441],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10513,10514],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10541,10542],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10615,10626],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10698,10699],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10726,10727],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10902,10911],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[11004,11011],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11079,11080],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11107,11108],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11177,11184],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11252,11253],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11280,11281],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11456,11473],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[11582,11597],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[11673,11674],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11701,11702],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11779,11794],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[11870,11871],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11898,11899],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12044,12050],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[12168,12185],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[12408,12416],"content":"IsPinned","needQuote":true,"nodes":[{"content":"IsPinned","pos":[0,8]}]},{"pos":[12644,12651],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[12860,12870],"content":"LocalIndex","needQuote":true,"nodes":[{"content":"LocalIndex","pos":[0,10]}]},{"pos":[13102,13107],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[13309,13318],"content":"LocalType","needQuote":true,"nodes":[{"content":"LocalType","pos":[0,9]}]},{"pos":[13546,13550],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]}],"content":"items:\n- uid: System.Reflection.Emit.LocalBuilder\n  commentId: T:System.Reflection.Emit.LocalBuilder\n  id: LocalBuilder\n  parent: System.Reflection.Emit\n  children:\n  - System.Reflection.Emit.LocalBuilder.IsPinned\n  - System.Reflection.Emit.LocalBuilder.LocalIndex\n  - System.Reflection.Emit.LocalBuilder.LocalType\n  langs:\n  - csharp\n  - vb\n  name: LocalBuilder\n  fullName: System.Reflection.Emit.LocalBuilder\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/LocalBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LocalBuilder\n    path: src/mscorlib/src/System/Reflection/Emit/LocalBuilder.cs\n    startLine: 11\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Represents a local variable within a method or constructor.</p>\\n\"\n  syntax:\n    content: >-\n      [ClassInterface(ClassInterfaceType.None)]\n\n      [ComDefaultInterface(typeof (_LocalBuilder))]\n\n      [ComVisible(true)]\n\n      public sealed class LocalBuilder : LocalVariableInfo, _LocalBuilder\n    content.vb: >-\n      <ClassInterface(ClassInterfaceType.None)>\n\n      <ComDefaultInterface(GetType(_LocalBuilder))>\n\n      <ComVisible(True)>\n\n      Public NotInheritable Class LocalBuilder\n          Inherits LocalVariableInfo\n          Implements _LocalBuilder\n  inheritance:\n  - System.Object\n  - System.Reflection.LocalVariableInfo\n  inheritedMembers:\n  - System.Reflection.LocalVariableInfo.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: LocalBuilder\n- uid: System.Reflection.Emit.LocalBuilder.IsPinned\n  commentId: P:System.Reflection.Emit.LocalBuilder.IsPinned\n  id: IsPinned\n  parent: System.Reflection.Emit.LocalBuilder\n  langs:\n  - csharp\n  - vb\n  name: IsPinned\n  fullName: System.Reflection.Emit.LocalBuilder.IsPinned\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/LocalBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsPinned\n    path: src/mscorlib/src/System/Reflection/Emit/LocalBuilder.cs\n    startLine: 48\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Gets a value indicating whether the object referred to by the local variable is pinned in memory.</p>\\n\"\n  syntax:\n    content: public override bool IsPinned { get; }\n    content.vb: Public Overrides ReadOnly Property IsPinned As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the object referred to by the local variable is pinned in memory; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Reflection.LocalVariableInfo.IsPinned\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: LocalBuilder.IsPinned\n- uid: System.Reflection.Emit.LocalBuilder.LocalIndex\n  commentId: P:System.Reflection.Emit.LocalBuilder.LocalIndex\n  id: LocalIndex\n  parent: System.Reflection.Emit.LocalBuilder\n  langs:\n  - csharp\n  - vb\n  name: LocalIndex\n  fullName: System.Reflection.Emit.LocalBuilder.LocalIndex\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/LocalBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LocalIndex\n    path: src/mscorlib/src/System/Reflection/Emit/LocalBuilder.cs\n    startLine: 56\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Gets the zero-based index of the local variable within the method body.</p>\\n\"\n  syntax:\n    content: public override int LocalIndex { get; }\n    content.vb: Public Overrides ReadOnly Property LocalIndex As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer value that represents the order of declaration of the local variable within the method body.</p>\\n\"\n  overridden: System.Reflection.LocalVariableInfo.LocalIndex\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: LocalBuilder.LocalIndex\n- uid: System.Reflection.Emit.LocalBuilder.LocalType\n  commentId: P:System.Reflection.Emit.LocalBuilder.LocalType\n  id: LocalType\n  parent: System.Reflection.Emit.LocalBuilder\n  langs:\n  - csharp\n  - vb\n  name: LocalType\n  fullName: System.Reflection.Emit.LocalBuilder.LocalType\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/LocalBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LocalType\n    path: src/mscorlib/src/System/Reflection/Emit/LocalBuilder.cs\n    startLine: 49\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Gets the type of the local variable.</p>\\n\"\n  syntax:\n    content: public override Type LocalType { get; }\n    content.vb: Public Overrides ReadOnly Property LocalType As Type\n    parameters: []\n    return:\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the local variable.</p>\\n\"\n  overridden: System.Reflection.LocalVariableInfo.LocalType\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: LocalBuilder.LocalType\nreferences:\n- uid: System.Reflection.Emit\n  isExternal: false\n  name: System.Reflection.Emit\n  fullName: System.Reflection.Emit\n  nameWithType: System.Reflection.Emit\n  commentId: N:System.Reflection.Emit\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Reflection.LocalVariableInfo\n  parent: System.Reflection\n  isExternal: false\n  name: LocalVariableInfo\n  fullName: System.Reflection.LocalVariableInfo\n  nameWithType: LocalVariableInfo\n  commentId: T:System.Reflection.LocalVariableInfo\n- uid: System.Reflection.LocalVariableInfo.ToString\n  parent: System.Reflection.LocalVariableInfo\n  isExternal: true\n  name: ToString()\n  fullName: System.Reflection.LocalVariableInfo.ToString()\n  spec.csharp:\n  - uid: System.Reflection.LocalVariableInfo.ToString\n    name: ToString\n    fullName: System.Reflection.LocalVariableInfo.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.LocalVariableInfo.ToString\n    name: ToString\n    fullName: System.Reflection.LocalVariableInfo.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: LocalVariableInfo.ToString()\n  commentId: M:System.Reflection.LocalVariableInfo.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Reflection.LocalVariableInfo.IsPinned\n  parent: System.Reflection.LocalVariableInfo\n  isExternal: true\n  name: IsPinned\n  fullName: System.Reflection.LocalVariableInfo.IsPinned\n  nameWithType: LocalVariableInfo.IsPinned\n  commentId: P:System.Reflection.LocalVariableInfo.IsPinned\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Reflection.LocalVariableInfo.LocalIndex\n  parent: System.Reflection.LocalVariableInfo\n  isExternal: true\n  name: LocalIndex\n  fullName: System.Reflection.LocalVariableInfo.LocalIndex\n  nameWithType: LocalVariableInfo.LocalIndex\n  commentId: P:System.Reflection.LocalVariableInfo.LocalIndex\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Reflection.LocalVariableInfo.LocalType\n  parent: System.Reflection.LocalVariableInfo\n  isExternal: true\n  name: LocalType\n  fullName: System.Reflection.LocalVariableInfo.LocalType\n  nameWithType: LocalVariableInfo.LocalType\n  commentId: P:System.Reflection.LocalVariableInfo.LocalType\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n"}