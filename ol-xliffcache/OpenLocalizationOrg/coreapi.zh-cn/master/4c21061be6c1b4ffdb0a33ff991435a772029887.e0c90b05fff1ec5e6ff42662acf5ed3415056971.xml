{"nodes":[{"pos":[1572,1584],"content":"PropertyInfo","needQuote":true,"nodes":[{"content":"PropertyInfo","pos":[0,12]}]},{"pos":[4238,4248],"content":"Attributes","needQuote":true,"nodes":[{"content":"Attributes","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The attributes of this property.&lt;/p&gt;\\n","pos":[4969,5012],"source":"\\n<p>The attributes of this property.</p>\\n"},{"pos":[5640,5647],"content":"CanRead","needQuote":true,"nodes":[{"content":"CanRead","pos":[0,7]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this property can be read; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[6328,6427],"source":"\\n<p>\\n<strong>true</strong> if this property can be read; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[6768,6776],"content":"CanWrite","needQuote":true,"nodes":[{"content":"CanWrite","pos":[0,8]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this property can be written to; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[7467,7572],"source":"\\n<p>\\n<strong>true</strong> if this property can be written to; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[7917,7926],"content":"GetMethod","needQuote":true,"nodes":[{"content":"GetMethod","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;get&lt;/strong&gt; accessor for this property.&lt;/p&gt;\\n","pos":[8637,8700],"source":"\\n<p>The <strong>get</strong> accessor for this property.</p>\\n"},{"pos":[9056,9069],"content":"IsSpecialName","needQuote":true,"nodes":[{"content":"IsSpecialName","pos":[0,13]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this property is the special name; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9761,9868],"source":"\\n<p>\\n<strong>true</strong> if this property is the special name; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[10197,10209],"content":"PropertyType","needQuote":true,"nodes":[{"content":"PropertyType","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The type of this property.&lt;/p&gt;\\n","pos":[10878,10915],"source":"\\n<p>The type of this property.</p>\\n"},{"pos":[11264,11273],"content":"SetMethod","needQuote":true,"nodes":[{"content":"SetMethod","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;set&lt;/strong&gt; accessor for this property, or &lt;strong&gt;null&lt;/strong&gt; if the property is read-only.&lt;/p&gt;\\n","pos":[11984,12102],"source":"\\n<p>The <strong>set</strong> accessor for this property, or <strong>null</strong> if the property is read-only.</p>\\n"},{"pos":[12709,12723],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;An object to compare with this instance, or &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[13444,13521],"source":"\\n<p>An object to compare with this instance, or <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;obj&lt;/em&gt; equals the type and value of this instance; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[13582,13711],"source":"\\n<p>\\n<strong>true</strong> if <em>obj</em> equals the type and value of this instance; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[14124,14142],"content":"GetConstantValue()","needQuote":true,"nodes":[{"content":"GetConstantValue()","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The Constant table in unmanaged metadata does not contain a constant value for the current property.&lt;/p&gt;\\n","pos":[15220,15331],"source":"\\n<p>The Constant table in unmanaged metadata does not contain a constant value for the current property.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value is not one of the types permitted by the Common Language Specification (CLS).","pos":[15424,15528],"source":"\\n<p>The type of the value is not one of the types permitted by the Common Language Specification (CLS)."},{"content":"See the ECMA Partition II specification, Metadata.","pos":[15529,15579]},{"content":"&lt;/p&gt;\\n","pos":[15580,15586],"source":" </p>\\n"},{"pos":[15924,15937],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[16576,16621],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[17029,17049],"content":"GetIndexParameters()","needQuote":true,"nodes":[{"content":"GetIndexParameters()","pos":[0,20]}]},{"content":"\\n&lt;p&gt;An array of type &lt;strong&gt;ParameterInfo&lt;/strong&gt; containing the parameters for the indexes.","pos":[17818,17913],"source":"\\n<p>An array of type <strong>ParameterInfo</strong> containing the parameters for the indexes."},{"content":"If the property is not indexed, the array has 0 (zero) elements.&lt;/p&gt;\\n","pos":[17914,17984],"source":" If the property is not indexed, the array has 0 (zero) elements.</p>\\n"},{"pos":[18494,18510],"content":"GetValue(Object)","needQuote":true,"nodes":[{"content":"GetValue(Object)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The object whose property value will be returned.&lt;/p&gt;\\n","pos":[19310,19370],"source":"\\n<p>The object whose property value will be returned.</p>\\n"},{"content":"\\n&lt;p&gt;The property value of the specified object.&lt;/p&gt;\\n","pos":[19430,19484],"source":"\\n<p>The property value of the specified object.</p>\\n"},{"pos":[19876,19902],"content":"GetValue(Object, Object[])","needQuote":true,"nodes":[{"content":"GetValue(Object, Object[])","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The object whose property value will be returned.","pos":[20825,20879],"source":"\\n<p>The object whose property value will be returned."},{"content":"&lt;/p&gt;\\n","pos":[20880,20886],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Optional index values for indexed properties.","pos":[20952,21002],"source":"\\n<p>Optional index values for indexed properties."},{"content":"The indexes of indexed properties are zero-based.","pos":[21003,21052]},{"content":"This value should be &lt;strong&gt;null&lt;/strong&gt; for non-indexed properties.","pos":[21053,21123],"source":" This value should be <strong>null</strong> for non-indexed properties."},{"content":"&lt;/p&gt;\\n","pos":[21124,21130],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The property value of the specified object.&lt;/p&gt;\\n","pos":[21190,21244],"source":"\\n<p>The property value of the specified object.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;index&lt;/em&gt; array does not contain the type of arguments needed.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The property's &lt;strong&gt;get&lt;/strong&gt; accessor is not found.","pos":[21355,21512],"source":"\\n<p>The <em>index</em> array does not contain the type of arguments needed.</p>\\n<p>-or- </p>\\n<p>The property's <strong>get</strong> accessor is not found."},{"content":"&lt;/p&gt;\\n","pos":[21513,21519],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of parameters in &lt;em&gt;index&lt;/em&gt; does not match the number of parameters the indexed property takes.","pos":[22144,22259],"source":"\\n<p>The number of parameters in <em>index</em> does not match the number of parameters the indexed property takes."},{"content":"&lt;/p&gt;\\n","pos":[22260,22266],"source":" </p>\\n"},{"pos":[24148,24172],"content":"SetValue(Object, Object)","needQuote":true,"nodes":[{"content":"SetValue(Object, Object)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The object whose property value will be set.&lt;/p&gt;\\n","pos":[24999,25054],"source":"\\n<p>The object whose property value will be set.</p>\\n"},{"content":"\\n&lt;p&gt;The new property value.&lt;/p&gt;\\n","pos":[25118,25152],"source":"\\n<p>The new property value.</p>\\n"},{"pos":[27642,27676],"content":"SetValue(Object, Object, Object[])","needQuote":true,"nodes":[{"content":"SetValue(Object, Object, Object[])","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The object whose property value will be set.","pos":[28623,28672],"source":"\\n<p>The object whose property value will be set."},{"content":"&lt;/p&gt;\\n","pos":[28673,28679],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The new property value.","pos":[28743,28771],"source":"\\n<p>The new property value."},{"content":"&lt;/p&gt;\\n","pos":[28772,28778],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Optional index values for indexed properties.","pos":[28844,28894],"source":"\\n<p>Optional index values for indexed properties."},{"content":"This value should be &lt;strong&gt;null&lt;/strong&gt; for non-indexed properties.","pos":[28895,28965],"source":" This value should be <strong>null</strong> for non-indexed properties."},{"content":"&lt;/p&gt;\\n","pos":[28966,28972],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of parameters in &lt;em&gt;index&lt;/em&gt; does not match the number of parameters the indexed property takes.","pos":[30050,30165],"source":"\\n<p>The number of parameters in <em>index</em> does not match the number of parameters the indexed property takes."},{"content":"&lt;/p&gt;\\n","pos":[30166,30172],"source":" </p>\\n"},{"pos":[32009,32019],"content":"MemberType","needQuote":true,"nodes":[{"content":"MemberType","pos":[0,10]}]},{"pos":[33381,33395],"content":"GetAccessors()","needQuote":true,"nodes":[{"content":"GetAccessors()","pos":[0,14]}]},{"pos":[34983,35004],"content":"GetAccessors(Boolean)","needQuote":true,"nodes":[{"content":"GetAccessors(Boolean)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;Indicates whether non-public methods should be returned in the returned array.","pos":[35888,35971],"source":"\\n<p>Indicates whether non-public methods should be returned in the returned array."},{"content":"&lt;strong&gt;true&lt;/strong&gt; if non-public methods are to be included; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[35972,36070],"source":" <strong>true</strong> if non-public methods are to be included; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[36071,36077],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array whose elements reflect the &lt;strong&gt;get&lt;/strong&gt; and &lt;strong&gt;set&lt;/strong&gt; accessors of the property reflected by the current instance.","pos":[36154,36301],"source":"\\n<p>An array whose elements reflect the <strong>get</strong> and <strong>set</strong> accessors of the property reflected by the current instance."},{"content":"If &lt;em&gt;nonPublic&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt;, this array contains public and non-public &lt;strong&gt;get&lt;/strong&gt; and &lt;strong&gt;set &lt;/strong&gt;accessors.","pos":[36302,36448],"source":" If <em>nonPublic</em> is <strong>true</strong>, this array contains public and non-public <strong>get</strong> and <strong>set </strong>accessors."},{"content":"If &lt;em&gt;nonPublic&lt;/em&gt; is &lt;strong&gt;false&lt;/strong&gt;, this array contains only public &lt;strong&gt;get&lt;/strong&gt; and &lt;strong&gt;set&lt;/strong&gt; accessors.","pos":[36449,36586],"source":" If <em>nonPublic</em> is <strong>false</strong>, this array contains only public <strong>get</strong> and <strong>set</strong> accessors."},{"content":"If no accessors with the specified visibility are found, this method returns an array with zero (0) elements.&lt;/p&gt;\\n","pos":[36587,36702],"source":" If no accessors with the specified visibility are found, this method returns an array with zero (0) elements.</p>\\n"},{"pos":[37180,37194],"content":"GetGetMethod()","needQuote":true,"nodes":[{"content":"GetGetMethod()","pos":[0,14]}]},{"content":"\\n&lt;p&gt;A &lt;strong&gt;MethodInfo&lt;/strong&gt; object representing the public &lt;strong&gt;get&lt;/strong&gt; accessor for this property, or &lt;strong&gt;null&lt;/strong&gt; if the &lt;strong&gt;get&lt;/strong&gt; accessor is non-public or does not exist.&lt;/p&gt;\\n","pos":[37872,38087],"source":"\\n<p>A <strong>MethodInfo</strong> object representing the public <strong>get</strong> accessor for this property, or <strong>null</strong> if the <strong>get</strong> accessor is non-public or does not exist.</p>\\n"},{"pos":[38576,38597],"content":"GetGetMethod(Boolean)","needQuote":true,"nodes":[{"content":"GetGetMethod(Boolean)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;Indicates whether a non-public &lt;strong&gt;get&lt;/strong&gt; accessor should be returned.","pos":[39406,39491],"source":"\\n<p>Indicates whether a non-public <strong>get</strong> accessor should be returned."},{"content":"&lt;strong&gt;true&lt;/strong&gt; if a non-public accessor is to be returned; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[39492,39592],"source":" <strong>true</strong> if a non-public accessor is to be returned; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[39593,39599],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;MethodInfo&lt;/strong&gt; object representing the &lt;strong&gt;get&lt;/strong&gt; accessor for this property, if &lt;em&gt;nonPublic&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt;.","pos":[39674,39829],"source":"\\n<p>A <strong>MethodInfo</strong> object representing the <strong>get</strong> accessor for this property, if <em>nonPublic</em> is <strong>true</strong>."},{"content":"Returns &lt;strong&gt;null&lt;/strong&gt; if &lt;em&gt;nonPublic&lt;/em&gt; is &lt;strong&gt;false&lt;/strong&gt; and the &lt;strong&gt;get&lt;/strong&gt; accessor is non-public, or if &lt;em&gt;nonPublic&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt; but no &lt;strong&gt;get&lt;/strong&gt; accessors exist.&lt;/p&gt;\\n","pos":[39830,40061],"source":" Returns <strong>null</strong> if <em>nonPublic</em> is <strong>false</strong> and the <strong>get</strong> accessor is non-public, or if <em>nonPublic</em> is <strong>true</strong> but no <strong>get</strong> accessors exist.</p>\\n"},{"pos":[40890,40904],"content":"GetSetMethod()","needQuote":true,"nodes":[{"content":"GetSetMethod()","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;MethodInfo&lt;/strong&gt; object representing the &lt;strong&gt;Set&lt;/strong&gt; method for this property if the &lt;strong&gt;set&lt;/strong&gt; accessor is public, or &lt;strong&gt;null&lt;/strong&gt; if the &lt;strong&gt;set&lt;/strong&gt; accessor is not public.&lt;/p&gt;\\n","pos":[41582,41819],"source":"\\n<p>The <strong>MethodInfo</strong> object representing the <strong>Set</strong> method for this property if the <strong>set</strong> accessor is public, or <strong>null</strong> if the <strong>set</strong> accessor is not public.</p>\\n"},{"pos":[42308,42329],"content":"GetSetMethod(Boolean)","needQuote":true,"nodes":[{"content":"GetSetMethod(Boolean)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;Indicates whether the accessor should be returned if it is non-public.","pos":[43117,43192],"source":"\\n<p>Indicates whether the accessor should be returned if it is non-public."},{"content":"&lt;strong&gt;true&lt;/strong&gt; if a non-public accessor is to be returned; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[43193,43293],"source":" <strong>true</strong> if a non-public accessor is to be returned; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[43294,43300],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;This property's &lt;strong&gt;Set&lt;/strong&gt; method, or &lt;strong&gt;null&lt;/strong&gt;, as shown in the following table.&lt;/p&gt;\\n&lt;p&gt;Value &lt;/p&gt;\\n&lt;p&gt;Condition &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;The &lt;strong&gt;Set&lt;/strong&gt; method for this property.","pos":[43375,43600],"source":"\\n<p>This property's <strong>Set</strong> method, or <strong>null</strong>, as shown in the following table.</p>\\n<p>Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>The <strong>Set</strong> method for this property."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The &lt;strong&gt;set&lt;/strong&gt; accessor is public.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;nonPublic&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt; and the &lt;strong&gt;set&lt;/strong&gt; accessor is non-public.","pos":[43601,43786],"source":" </p>\\n</td><td>\\n<p>The <strong>set</strong> accessor is public.</p>\\n<p>-or- </p>\\n<p>\\n<em>nonPublic</em> is <strong>true</strong> and the <strong>set</strong> accessor is non-public."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;strong&gt;null&lt;/strong&gt;\\n&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;nonPublic&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt;, but the property is read-only.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;nonPublic&lt;/em&gt; is &lt;strong&gt;false&lt;/strong&gt; and the &lt;strong&gt;set&lt;/strong&gt; accessor is non-public.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;There is no &lt;strong&gt;set&lt;/strong&gt; accessor.","pos":[43787,44125],"source":" </p>\\n</td></tr><tr><td>\\n<p>\\n<strong>null</strong>\\n</p>\\n</td><td>\\n<p>\\n<em>nonPublic</em> is <strong>true</strong>, but the property is read-only.</p>\\n<p>-or- </p>\\n<p>\\n<em>nonPublic</em> is <strong>false</strong> and the <strong>set</strong> accessor is non-public.</p>\\n<p>-or- </p>\\n<p>There is no <strong>set</strong> accessor."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[44126,44160],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[45031,45059],"content":"GetOptionalCustomModifiers()","needQuote":true,"nodes":[{"content":"GetOptionalCustomModifiers()","pos":[0,28]}]},{"pos":[46580,46601],"content":"GetRawConstantValue()","needQuote":true,"nodes":[{"content":"GetRawConstantValue()","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The Constant table in unmanaged metadata does not contain a constant value for the current property.&lt;/p&gt;\\n","pos":[47691,47802],"source":"\\n<p>The Constant table in unmanaged metadata does not contain a constant value for the current property.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value is not one of the types permitted by the Common Language Specification (CLS).","pos":[47895,47999],"source":"\\n<p>The type of the value is not one of the types permitted by the Common Language Specification (CLS)."},{"content":"See the ECMA Partition II specification, Metadata Logical Format: Other Structures, Element Types used in Signatures.","pos":[48000,48117]},{"content":"&lt;/p&gt;\\n","pos":[48118,48124],"source":" </p>\\n"},{"pos":[48510,48538],"content":"GetRequiredCustomModifiers()","needQuote":true,"nodes":[{"content":"GetRequiredCustomModifiers()","pos":[0,28]}]},{"pos":[49898,49915],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[50079,50085],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[50256,50266],"content":"MemberInfo","needQuote":true,"nodes":[{"content":"MemberInfo","pos":[0,10]}]},{"pos":[50485,50509],"content":"ICustomAttributeProvider","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider","pos":[0,24]}]},{"pos":[50784,50800],"content":"CustomAttributes","needQuote":true,"nodes":[{"content":"CustomAttributes","pos":[0,16]}]},{"pos":[51081,51094],"content":"DeclaringType","needQuote":true,"nodes":[{"content":"DeclaringType","pos":[0,13]}]},{"pos":[51366,51379],"content":"MetadataToken","needQuote":true,"nodes":[{"content":"MetadataToken","pos":[0,13]}]},{"pos":[51644,51650],"content":"Module","needQuote":true,"nodes":[{"content":"Module","pos":[0,6]}]},{"pos":[51892,51896],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[52205,52258],"content":"ICustomAttributeProvider.GetCustomAttributes(Boolean)","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes(Boolean)","pos":[0,53]}]},{"pos":[52604,52648],"content":"ICustomAttributeProvider.GetCustomAttributes","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes","pos":[0,44]}]},{"pos":[52765,52766],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52817,52824],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[52885,52886],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53041,53103],"content":"System.Reflection.ICustomAttributeProvider.GetCustomAttributes","needQuote":true,"nodes":[{"content":"System.Reflection.ICustomAttributeProvider.GetCustomAttributes","pos":[0,62]}]},{"pos":[53220,53221],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53272,53279],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[53340,53341],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53857,53916],"content":"ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)","pos":[0,59]}]},{"pos":[54293,54337],"content":"ICustomAttributeProvider.GetCustomAttributes","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes","pos":[0,44]}]},{"pos":[54454,54455],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54503,54507],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[54566,54567]},{"pos":[54623,54630],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[54691,54692],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54859,54921],"content":"System.Reflection.ICustomAttributeProvider.GetCustomAttributes","needQuote":true,"nodes":[{"content":"System.Reflection.ICustomAttributeProvider.GetCustomAttributes","pos":[0,62]}]},{"pos":[55038,55039],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55087,55091],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[55150,55151]},{"pos":[55207,55214],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[55275,55276],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55806,55855],"content":"ICustomAttributeProvider.IsDefined(Type, Boolean)","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.IsDefined(Type, Boolean)","pos":[0,49]}]},{"pos":[56202,56236],"content":"ICustomAttributeProvider.IsDefined","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.IsDefined","pos":[0,34]}]},{"pos":[56343,56344],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56392,56396],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[56455,56456]},{"pos":[56512,56519],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[56580,56581],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56738,56790],"content":"System.Reflection.ICustomAttributeProvider.IsDefined","needQuote":true,"nodes":[{"content":"System.Reflection.ICustomAttributeProvider.IsDefined","pos":[0,52]}]},{"pos":[56897,56898],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56946,56950],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[57009,57010]},{"pos":[57066,57073],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[57134,57135],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57533,57543],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[57638,57646],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[57715,57716],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57743,57744],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57814,57822],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[57891,57892],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57919,57920],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58117,58139],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[58287,58293],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[58360,58361],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58411,58417],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[58478,58479]},{"pos":[58534,58540],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[58600,58601],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58698,58704],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[58771,58772],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58822,58828],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[58889,58890]},{"pos":[58945,58951],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[59011,59012],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59257,59288],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[59454,59469],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[59545,59546],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59596,59602],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[59663,59664]},{"pos":[59719,59725],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[59785,59786],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59892,59907],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[59983,59984],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60034,60040],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[60101,60102]},{"pos":[60157,60163],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[60223,60224],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60450,60459],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[60552,60559],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[60627,60628],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60655,60656],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60725,60732],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[60800,60801],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60828,60829],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61004,61021],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[61130,61145],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[61221,61222],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61249,61250],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61327,61342],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[61418,61419],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61446,61447],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61592,61598],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[61763,61781],"content":"PropertyAttributes","needQuote":true,"nodes":[{"content":"PropertyAttributes","pos":[0,18]}]},{"pos":[61985,61992],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[62166,62176],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[62353,62357],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[62554,62568],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[62717,62723],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[62784,62785],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62835,62841],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[62901,62902],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63000,63006],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[63067,63068],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63118,63124],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[63184,63185],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63425,63438],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[63569,63580],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[63646,63647],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63674,63675],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63763,63774],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[63840,63841],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63868,63869],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64048,64053],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[64178,64193],"content":"ParameterInfo[]","needQuote":true,"nodes":[{"content":"ParameterInfo[]","pos":[0,15]}]},{"pos":[64382,64395],"content":"ParameterInfo","needQuote":true,"nodes":[{"content":"ParameterInfo","pos":[0,13]}]},{"content":"[]","pos":[64453,64455]},{"pos":[64538,64551],"content":"ParameterInfo","needQuote":true,"nodes":[{"content":"ParameterInfo","pos":[0,13]}]},{"pos":[64608,64610],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[64726,64734],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[64862,64868],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[64929,64931]},{"pos":[64996,65002],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[65062,65064],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[65249,65259],"content":"MemberType","needQuote":true,"nodes":[{"content":"MemberType","pos":[0,10]}]},{"pos":[65498,65509],"content":"MemberTypes","needQuote":true,"nodes":[{"content":"MemberTypes","pos":[0,11]}]},{"pos":[65671,65683],"content":"MethodInfo[]","needQuote":true,"nodes":[{"content":"MethodInfo[]","pos":[0,12]}]},{"pos":[65860,65870],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"content":"[]","pos":[65925,65927]},{"pos":[66007,66017],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[66071,66073],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[66181,66187],"content":"Type[]","needQuote":true,"nodes":[{"content":"Type[]","pos":[0,6]}]},{"pos":[66307,66311],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":"[]","pos":[66349,66351]},{"pos":[66414,66418],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[66455,66457],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[66609,66634],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[66845,66860],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]},{"pos":[67043,67060],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[67241,67256],"content":"TargetException","needQuote":true,"nodes":[{"content":"TargetException","pos":[0,15]}]},{"pos":[67467,67496],"content":"TargetParameterCountException","needQuote":true,"nodes":[{"content":"TargetParameterCountException","pos":[0,29]}]},{"pos":[67730,67751],"content":"MethodAccessException","needQuote":true,"nodes":[{"content":"MethodAccessException","pos":[0,21]}]},{"pos":[67954,67979],"content":"TargetInvocationException","needQuote":true,"nodes":[{"content":"TargetInvocationException","pos":[0,25]}]},{"pos":[68206,68223],"content":"SecurityException","needQuote":true,"nodes":[{"content":"SecurityException","pos":[0,17]}]}],"content":"items:\n- uid: System.Reflection.PropertyInfo\n  commentId: T:System.Reflection.PropertyInfo\n  id: PropertyInfo\n  parent: System.Reflection\n  children:\n  - System.Reflection.PropertyInfo.Attributes\n  - System.Reflection.PropertyInfo.CanRead\n  - System.Reflection.PropertyInfo.CanWrite\n  - System.Reflection.PropertyInfo.Equals(System.Object)\n  - System.Reflection.PropertyInfo.GetAccessors\n  - System.Reflection.PropertyInfo.GetAccessors(System.Boolean)\n  - System.Reflection.PropertyInfo.GetConstantValue\n  - System.Reflection.PropertyInfo.GetGetMethod\n  - System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)\n  - System.Reflection.PropertyInfo.GetHashCode\n  - System.Reflection.PropertyInfo.GetIndexParameters\n  - System.Reflection.PropertyInfo.GetMethod\n  - System.Reflection.PropertyInfo.GetOptionalCustomModifiers\n  - System.Reflection.PropertyInfo.GetRawConstantValue\n  - System.Reflection.PropertyInfo.GetRequiredCustomModifiers\n  - System.Reflection.PropertyInfo.GetSetMethod\n  - System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)\n  - System.Reflection.PropertyInfo.GetValue(System.Object)\n  - System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])\n  - System.Reflection.PropertyInfo.IsSpecialName\n  - System.Reflection.PropertyInfo.MemberType\n  - System.Reflection.PropertyInfo.PropertyType\n  - System.Reflection.PropertyInfo.SetMethod\n  - System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)\n  - System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])\n  langs:\n  - csharp\n  - vb\n  name: PropertyInfo\n  fullName: System.Reflection.PropertyInfo\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PropertyInfo\n    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n    startLine: 21\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Discovers the attributes of a property and provides access to property metadata.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ClassInterface(ClassInterfaceType.None)]\n\n      [ComDefaultInterface(typeof (_PropertyInfo))]\n\n      [PermissionSet(SecurityAction.InheritanceDemand, Name = \"FullTrust\")]\n\n      [ComVisible(true)]\n\n      public abstract class PropertyInfo : MemberInfo, ICustomAttributeProvider, _MemberInfo, _PropertyInfo\n    content.vb: >-\n      <Serializable>\n\n      <ClassInterface(ClassInterfaceType.None)>\n\n      <ComDefaultInterface(GetType(_PropertyInfo))>\n\n      <PermissionSet(SecurityAction.InheritanceDemand, Name:=\"FullTrust\")>\n\n      <ComVisible(True)>\n\n      Public MustInherit Class PropertyInfo\n          Inherits MemberInfo\n          Implements ICustomAttributeProvider, _MemberInfo, _PropertyInfo\n  see:\n  - type: System.Security.Permissions.SecurityAction.InheritanceDemand\n    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand\n  inheritance:\n  - System.Object\n  - System.Reflection.MemberInfo\n  implements:\n  - System.Reflection.ICustomAttributeProvider\n  inheritedMembers:\n  - System.Reflection.MemberInfo.CustomAttributes\n  - System.Reflection.MemberInfo.DeclaringType\n  - System.Reflection.MemberInfo.MetadataToken\n  - System.Reflection.MemberInfo.Module\n  - System.Reflection.MemberInfo.Name\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: PropertyInfo\n- uid: System.Reflection.PropertyInfo.Attributes\n  commentId: P:System.Reflection.PropertyInfo.Attributes\n  id: Attributes\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  - vb\n  name: Attributes\n  fullName: System.Reflection.PropertyInfo.Attributes\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Attributes\n    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n    startLine: 91\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the attributes for this property.</p>\\n\"\n  syntax:\n    content: public abstract PropertyAttributes Attributes { get; }\n    content.vb: Public MustOverride ReadOnly Property Attributes As PropertyAttributes\n    parameters: []\n    return:\n      type: System.Reflection.PropertyAttributes\n      description: \"\\n<p>The attributes of this property.</p>\\n\"\n  seealso:\n  - type: System.Reflection.MemberInfo.CustomAttributes\n    commentId: P:System.Reflection.MemberInfo.CustomAttributes\n  - type: System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\n    commentId: M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: PropertyInfo.Attributes\n- uid: System.Reflection.PropertyInfo.CanRead\n  commentId: P:System.Reflection.PropertyInfo.CanRead\n  id: CanRead\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  - vb\n  name: CanRead\n  fullName: System.Reflection.PropertyInfo.CanRead\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CanRead\n    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n    startLine: 93\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether the property can be read.</p>\\n\"\n  syntax:\n    content: public abstract bool CanRead { get; }\n    content.vb: Public MustOverride ReadOnly Property CanRead As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this property can be read; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: PropertyInfo.CanRead\n- uid: System.Reflection.PropertyInfo.CanWrite\n  commentId: P:System.Reflection.PropertyInfo.CanWrite\n  id: CanWrite\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  - vb\n  name: CanWrite\n  fullName: System.Reflection.PropertyInfo.CanWrite\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CanWrite\n    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n    startLine: 95\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether the property can be written to.</p>\\n\"\n  syntax:\n    content: public abstract bool CanWrite { get; }\n    content.vb: Public MustOverride ReadOnly Property CanWrite As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this property can be written to; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: PropertyInfo.CanWrite\n- uid: System.Reflection.PropertyInfo.GetMethod\n  commentId: P:System.Reflection.PropertyInfo.GetMethod\n  id: GetMethod\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  - vb\n  name: GetMethod\n  fullName: System.Reflection.PropertyInfo.GetMethod\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMethod\n    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n    startLine: 135\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the <strong>get</strong> accessor for this property.</p>\\n\"\n  syntax:\n    content: public virtual MethodInfo GetMethod { get; }\n    content.vb: Public Overridable ReadOnly Property GetMethod As MethodInfo\n    parameters: []\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>The <strong>get</strong> accessor for this property.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: PropertyInfo.GetMethod\n- uid: System.Reflection.PropertyInfo.IsSpecialName\n  commentId: P:System.Reflection.PropertyInfo.IsSpecialName\n  id: IsSpecialName\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  - vb\n  name: IsSpecialName\n  fullName: System.Reflection.PropertyInfo.IsSpecialName\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsSpecialName\n    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n    startLine: 155\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether the property is the special name.</p>\\n\"\n  syntax:\n    content: public bool IsSpecialName { get; }\n    content.vb: Public ReadOnly Property IsSpecialName As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this property is the special name; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: PropertyInfo.IsSpecialName\n- uid: System.Reflection.PropertyInfo.PropertyType\n  commentId: P:System.Reflection.PropertyInfo.PropertyType\n  id: PropertyType\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  - vb\n  name: PropertyType\n  fullName: System.Reflection.PropertyInfo.PropertyType\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PropertyType\n    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n    startLine: 79\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the type of this property.</p>\\n\"\n  syntax:\n    content: public abstract Type PropertyType { get; }\n    content.vb: Public MustOverride ReadOnly Property PropertyType As Type\n    parameters: []\n    return:\n      type: System.Type\n      description: \"\\n<p>The type of this property.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: PropertyInfo.PropertyType\n- uid: System.Reflection.PropertyInfo.SetMethod\n  commentId: P:System.Reflection.PropertyInfo.SetMethod\n  id: SetMethod\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  - vb\n  name: SetMethod\n  fullName: System.Reflection.PropertyInfo.SetMethod\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetMethod\n    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n    startLine: 143\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the <strong>set</strong> accessor for this property.</p>\\n\"\n  syntax:\n    content: public virtual MethodInfo SetMethod { get; }\n    content.vb: Public Overridable ReadOnly Property SetMethod As MethodInfo\n    parameters: []\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>The <strong>set</strong> accessor for this property, or <strong>null</strong> if the property is read-only.</p>\\n\"\n  seealso:\n  - type: System.Reflection.PropertyInfo.GetMethod\n    commentId: P:System.Reflection.PropertyInfo.GetMethod\n  - type: System.Reflection.PropertyInfo.CanWrite\n    commentId: P:System.Reflection.PropertyInfo.CanWrite\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: PropertyInfo.SetMethod\n- uid: System.Reflection.PropertyInfo.Equals(System.Object)\n  commentId: M:System.Reflection.PropertyInfo.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Reflection.PropertyInfo.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n    startLine: 54\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns a value that indicates whether this instance is equal to a specified object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>An object to compare with this instance, or <strong>null</strong>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>obj</em> equals the type and value of this instance; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Reflection.MemberInfo.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: PropertyInfo.Equals(Object)\n- uid: System.Reflection.PropertyInfo.GetConstantValue\n  commentId: M:System.Reflection.PropertyInfo.GetConstantValue\n  id: GetConstantValue\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  - vb\n  name: GetConstantValue()\n  fullName: System.Reflection.PropertyInfo.GetConstantValue()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetConstantValue\n    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n    startLine: 69\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns a literal value associated with the property by a compiler. </p>\\n\"\n  syntax:\n    content: public virtual object GetConstantValue()\n    content.vb: Public Overridable Function GetConstantValue As Object\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the literal value associated with the property. If the literal value is a class type with an element value of zero, the return value is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The Constant table in unmanaged metadata does not contain a constant value for the current property.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification, Metadata. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: PropertyInfo.GetConstantValue()\n- uid: System.Reflection.PropertyInfo.GetHashCode\n  commentId: M:System.Reflection.PropertyInfo.GetHashCode\n  id: GetHashCode\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Reflection.PropertyInfo.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n    startLine: 59\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns the hash code for this instance.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.Reflection.MemberInfo.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: PropertyInfo.GetHashCode()\n- uid: System.Reflection.PropertyInfo.GetIndexParameters\n  commentId: M:System.Reflection.PropertyInfo.GetIndexParameters\n  id: GetIndexParameters\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  - vb\n  name: GetIndexParameters()\n  fullName: System.Reflection.PropertyInfo.GetIndexParameters()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetIndexParameters\n    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n    startLine: 89\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>When overridden in a derived class, returns an array of all the index parameters for the property.</p>\\n\"\n  syntax:\n    content: public abstract ParameterInfo[] GetIndexParameters()\n    content.vb: Public MustOverride Function GetIndexParameters As ParameterInfo()\n    return:\n      type: System.Reflection.ParameterInfo[]\n      description: \"\\n<p>An array of type <strong>ParameterInfo</strong> containing the parameters for the indexes. If the property is not indexed, the array has 0 (zero) elements.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: PropertyInfo.GetIndexParameters()\n- uid: System.Reflection.PropertyInfo.GetValue(System.Object)\n  commentId: M:System.Reflection.PropertyInfo.GetValue(System.Object)\n  id: GetValue(System.Object)\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  - vb\n  name: GetValue(Object)\n  fullName: System.Reflection.PropertyInfo.GetValue(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetValue\n    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n    startLine: 97\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns the property value of a specified object.</p>\\n\"\n  syntax:\n    content: >-\n      [DebuggerStepThrough]\n\n      [DebuggerHidden]\n\n      public object GetValue(object obj)\n    content.vb: >-\n      <DebuggerStepThrough>\n\n      <DebuggerHidden>\n\n      Public Function GetValue(obj As Object) As Object\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object whose property value will be returned.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The property value of the specified object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: PropertyInfo.GetValue(Object)\n- uid: System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])\n  commentId: M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])\n  id: GetValue(System.Object,System.Object[])\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  - vb\n  name: GetValue(Object, Object[])\n  fullName: System.Reflection.PropertyInfo.GetValue(System.Object, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetValue\n    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n    startLine: 104\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns the property value of a specified object with optional index values for indexed properties.</p>\\n\"\n  syntax:\n    content: >-\n      [DebuggerStepThrough]\n\n      [DebuggerHidden]\n\n      public virtual object GetValue(object obj, object[] index)\n    content.vb: >-\n      <DebuggerStepThrough>\n\n      <DebuggerHidden>\n\n      Public Overridable Function GetValue(obj As Object, index As Object()) As Object\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object whose property value will be returned. </p>\\n\"\n    - id: index\n      type: System.Object[]\n      description: \"\\n<p>Optional index values for indexed properties. The indexes of indexed properties are zero-based. This value should be <strong>null</strong> for non-indexed properties. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The property value of the specified object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>index</em> array does not contain the type of arguments needed.</p>\\n<p>-or- </p>\\n<p>The property's <strong>get</strong> accessor is not found. </p>\\n\"\n  - type: System.Reflection.TargetException\n    commentId: T:System.Reflection.TargetException\n    description: \"\\n<p>In the <see href=\\\"http://go.microsoft.com/fwlink/?LinkID=247912\\\">.NET for Windows Store apps</see> or the Portable Class Library, catch <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instead.</p>\\n<p>The object does not match the target type, or a property is an instance property but <em>obj</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Reflection.TargetParameterCountException\n    commentId: T:System.Reflection.TargetParameterCountException\n    description: \"\\n<p>The number of parameters in <em>index</em> does not match the number of parameters the indexed property takes. </p>\\n\"\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: \"\\n<p>In the <see href=\\\"http://go.microsoft.com/fwlink/?LinkID=247912\\\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\\\"System.MemberAccessException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, instead.</p>\\n<p>There was an illegal attempt to access a private or protected method inside a class. </p>\\n\"\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: \"\\n<p>An error occurred while retrieving the property value. For example, an index value specified for an indexed property is out of range. The <xref href=\\\"System.Exception.InnerException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property indicates the reason for the error.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Reflection.PropertyInfo.GetValue(System.Object, System.Object())\n  name.vb: GetValue(Object, Object())\n  nameWithType: PropertyInfo.GetValue(Object, Object[])\n  nameWithType.vb: PropertyInfo.GetValue(Object, Object())\n- uid: System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)\n  commentId: M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)\n  id: SetValue(System.Object,System.Object)\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  - vb\n  name: SetValue(Object, Object)\n  fullName: System.Reflection.PropertyInfo.SetValue(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetValue\n    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n    startLine: 113\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Sets the property value of a specified object.</p>\\n\"\n  syntax:\n    content: >-\n      [DebuggerStepThrough]\n\n      [DebuggerHidden]\n\n      public void SetValue(object obj, object value)\n    content.vb: >-\n      <DebuggerStepThrough>\n\n      <DebuggerHidden>\n\n      Public Sub SetValue(obj As Object, value As Object)\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object whose property value will be set.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The new property value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The property's <strong>set</strong> accessor is not found. </p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> cannot be converted to the type of <xref href=\\\"System.Reflection.PropertyInfo.PropertyType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.Reflection.TargetException\n    commentId: T:System.Reflection.TargetException\n    description: \"\\n<p>In the <see href=\\\"http://go.microsoft.com/fwlink/?LinkID=247912\\\">.NET for Windows Store apps</see> or the Portable Class Library, catch <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instead.</p>\\n<p>The type of <em>obj</em> does not match the target type, or a property is an instance property but <em>obj</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: \"\\n<p>In the <see href=\\\"http://go.microsoft.com/fwlink/?LinkID=247912\\\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\\\"System.MemberAccessException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, instead.</p>\\n<p>There was an illegal attempt to access a private or protected method inside a class. </p>\\n\"\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: \"\\n<p>An error occurred while setting the property value. The <xref href=\\\"System.Exception.InnerException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property indicates the reason for the error.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: PropertyInfo.SetValue(Object, Object)\n- uid: System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])\n  commentId: M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])\n  id: SetValue(System.Object,System.Object,System.Object[])\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  - vb\n  name: SetValue(Object, Object, Object[])\n  fullName: System.Reflection.PropertyInfo.SetValue(System.Object, System.Object, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetValue\n    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n    startLine: 120\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Sets the property value of a specified object with optional index values for index properties.</p>\\n\"\n  syntax:\n    content: >-\n      [DebuggerStepThrough]\n\n      [DebuggerHidden]\n\n      public virtual void SetValue(object obj, object value, object[] index)\n    content.vb: >-\n      <DebuggerStepThrough>\n\n      <DebuggerHidden>\n\n      Public Overridable Sub SetValue(obj As Object, value As Object, index As Object())\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object whose property value will be set. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The new property value. </p>\\n\"\n    - id: index\n      type: System.Object[]\n      description: \"\\n<p>Optional index values for indexed properties. This value should be <strong>null</strong> for non-indexed properties. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>index</em> array does not contain the type of arguments needed.</p>\\n<p>-or- </p>\\n<p>The property's <strong>set</strong> accessor is not found. </p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> cannot be converted to the type of <xref href=\\\"System.Reflection.PropertyInfo.PropertyType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.Reflection.TargetException\n    commentId: T:System.Reflection.TargetException\n    description: \"\\n<p>In the <see href=\\\"http://go.microsoft.com/fwlink/?LinkID=247912\\\">.NET for Windows Store apps</see> or the Portable Class Library, catch <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instead.</p>\\n<p>The object does not match the target type, or a property is an instance property but <em>obj</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Reflection.TargetParameterCountException\n    commentId: T:System.Reflection.TargetParameterCountException\n    description: \"\\n<p>The number of parameters in <em>index</em> does not match the number of parameters the indexed property takes. </p>\\n\"\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: \"\\n<p>In the <see href=\\\"http://go.microsoft.com/fwlink/?LinkID=247912\\\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\\\"System.MemberAccessException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, instead.</p>\\n<p>There was an illegal attempt to access a private or protected method inside a class. </p>\\n\"\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: \"\\n<p>An error occurred while setting the property value. For example, an index value specified for an indexed property is out of range. The <xref href=\\\"System.Exception.InnerException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property indicates the reason for the error.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Reflection.PropertyInfo.SetValue(System.Object, System.Object, System.Object())\n  name.vb: SetValue(Object, Object, Object())\n  nameWithType: PropertyInfo.SetValue(Object, Object, Object[])\n  nameWithType.vb: PropertyInfo.SetValue(Object, Object, Object())\n- uid: System.Reflection.PropertyInfo.MemberType\n  commentId: P:System.Reflection.PropertyInfo.MemberType\n  id: MemberType\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  - vb\n  name: MemberType\n  fullName: System.Reflection.PropertyInfo.MemberType\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MemberType\n    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n    startLine: 65\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Reflection.MemberTypes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value indicating that this member is a property.</p>\\n\"\n  syntax:\n    content: public override MemberTypes MemberType { get; }\n    content.vb: Public Overrides ReadOnly Property MemberType As MemberTypes\n    parameters: []\n    return:\n      type: System.Reflection.MemberTypes\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MemberTypes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value indicating that this member is a property.</p>\\n\"\n  overridden: System.Reflection.MemberInfo.MemberType\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: PropertyInfo.MemberType\n- uid: System.Reflection.PropertyInfo.GetAccessors\n  commentId: M:System.Reflection.PropertyInfo.GetAccessors\n  id: GetAccessors\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  - vb\n  name: GetAccessors()\n  fullName: System.Reflection.PropertyInfo.GetAccessors()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetAccessors\n    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n    startLine: 133\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns an array whose elements reflect the public <strong>get</strong> and <strong>set</strong> accessors of the property reflected by the current instance. </p>\\n\"\n  syntax:\n    content: public MethodInfo[] GetAccessors()\n    content.vb: Public Function GetAccessors As MethodInfo()\n    return:\n      type: System.Reflection.MethodInfo[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects that reflect the public <strong>get</strong> and <strong>set</strong> accessors of the property reflected by the current instance, if found; otherwise, this method returns an array with zero (0) elements.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: PropertyInfo.GetAccessors()\n- uid: System.Reflection.PropertyInfo.GetAccessors(System.Boolean)\n  commentId: M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)\n  id: GetAccessors(System.Boolean)\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  - vb\n  name: GetAccessors(Boolean)\n  fullName: System.Reflection.PropertyInfo.GetAccessors(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetAccessors\n    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n    startLine: 83\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns an array whose elements reflect the public and, if specified, non-public <strong>get</strong> and <strong>set</strong> accessors of the property reflected by the current instance. </p>\\n\"\n  syntax:\n    content: public abstract MethodInfo[] GetAccessors(bool nonPublic)\n    content.vb: Public MustOverride Function GetAccessors(nonPublic As Boolean) As MethodInfo()\n    parameters:\n    - id: nonPublic\n      type: System.Boolean\n      description: \"\\n<p>Indicates whether non-public methods should be returned in the returned array. <strong>true</strong> if non-public methods are to be included; otherwise, <strong>false</strong>. </p>\\n\"\n    return:\n      type: System.Reflection.MethodInfo[]\n      description: \"\\n<p>An array whose elements reflect the <strong>get</strong> and <strong>set</strong> accessors of the property reflected by the current instance. If <em>nonPublic</em> is <strong>true</strong>, this array contains public and non-public <strong>get</strong> and <strong>set </strong>accessors. If <em>nonPublic</em> is <strong>false</strong>, this array contains only public <strong>get</strong> and <strong>set</strong> accessors. If no accessors with the specified visibility are found, this method returns an array with zero (0) elements.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: PropertyInfo.GetAccessors(Boolean)\n- uid: System.Reflection.PropertyInfo.GetGetMethod\n  commentId: M:System.Reflection.PropertyInfo.GetGetMethod\n  id: GetGetMethod\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  - vb\n  name: GetGetMethod()\n  fullName: System.Reflection.PropertyInfo.GetGetMethod()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetGetMethod\n    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n    startLine: 151\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns the public <strong>get</strong> accessor for this property.</p>\\n\"\n  syntax:\n    content: public MethodInfo GetGetMethod()\n    content.vb: Public Function GetGetMethod As MethodInfo\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <strong>MethodInfo</strong> object representing the public <strong>get</strong> accessor for this property, or <strong>null</strong> if the <strong>get</strong> accessor is non-public or does not exist.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: PropertyInfo.GetGetMethod()\n- uid: System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)\n  commentId: M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)\n  id: GetGetMethod(System.Boolean)\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  - vb\n  name: GetGetMethod(Boolean)\n  fullName: System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetGetMethod\n    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n    startLine: 85\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>When overridden in a derived class, returns the public or non-public <strong>get</strong> accessor for this property.</p>\\n\"\n  syntax:\n    content: public abstract MethodInfo GetGetMethod(bool nonPublic)\n    content.vb: Public MustOverride Function GetGetMethod(nonPublic As Boolean) As MethodInfo\n    parameters:\n    - id: nonPublic\n      type: System.Boolean\n      description: \"\\n<p>Indicates whether a non-public <strong>get</strong> accessor should be returned. <strong>true</strong> if a non-public accessor is to be returned; otherwise, <strong>false</strong>. </p>\\n\"\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <strong>MethodInfo</strong> object representing the <strong>get</strong> accessor for this property, if <em>nonPublic</em> is <strong>true</strong>. Returns <strong>null</strong> if <em>nonPublic</em> is <strong>false</strong> and the <strong>get</strong> accessor is non-public, or if <em>nonPublic</em> is <strong>true</strong> but no <strong>get</strong> accessors exist.</p>\\n\"\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The requested method is non-public and the caller does not have <xref href=\\\"System.Security.Permissions.ReflectionPermission\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to reflect on this non-public method. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: PropertyInfo.GetGetMethod(Boolean)\n- uid: System.Reflection.PropertyInfo.GetSetMethod\n  commentId: M:System.Reflection.PropertyInfo.GetSetMethod\n  id: GetSetMethod\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  - vb\n  name: GetSetMethod()\n  fullName: System.Reflection.PropertyInfo.GetSetMethod()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetSetMethod\n    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n    startLine: 153\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns the public <strong>set</strong> accessor for this property.</p>\\n\"\n  syntax:\n    content: public MethodInfo GetSetMethod()\n    content.vb: Public Function GetSetMethod As MethodInfo\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>The <strong>MethodInfo</strong> object representing the <strong>Set</strong> method for this property if the <strong>set</strong> accessor is public, or <strong>null</strong> if the <strong>set</strong> accessor is not public.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: PropertyInfo.GetSetMethod()\n- uid: System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)\n  commentId: M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)\n  id: GetSetMethod(System.Boolean)\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  - vb\n  name: GetSetMethod(Boolean)\n  fullName: System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetSetMethod\n    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n    startLine: 87\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>When overridden in a derived class, returns the <strong>set</strong> accessor for this property.</p>\\n\"\n  syntax:\n    content: public abstract MethodInfo GetSetMethod(bool nonPublic)\n    content.vb: Public MustOverride Function GetSetMethod(nonPublic As Boolean) As MethodInfo\n    parameters:\n    - id: nonPublic\n      type: System.Boolean\n      description: \"\\n<p>Indicates whether the accessor should be returned if it is non-public. <strong>true</strong> if a non-public accessor is to be returned; otherwise, <strong>false</strong>. </p>\\n\"\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>This property's <strong>Set</strong> method, or <strong>null</strong>, as shown in the following table.</p>\\n<p>Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>The <strong>Set</strong> method for this property. </p>\\n</td><td>\\n<p>The <strong>set</strong> accessor is public.</p>\\n<p>-or- </p>\\n<p>\\n<em>nonPublic</em> is <strong>true</strong> and the <strong>set</strong> accessor is non-public. </p>\\n</td></tr><tr><td>\\n<p>\\n<strong>null</strong>\\n</p>\\n</td><td>\\n<p>\\n<em>nonPublic</em> is <strong>true</strong>, but the property is read-only.</p>\\n<p>-or- </p>\\n<p>\\n<em>nonPublic</em> is <strong>false</strong> and the <strong>set</strong> accessor is non-public.</p>\\n<p>-or- </p>\\n<p>There is no <strong>set</strong> accessor. </p>\\n</td></tr></tbody></table>\\n\"\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The requested method is non-public and the caller does not have <xref href=\\\"System.Security.Permissions.ReflectionPermission\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to reflect on this non-public method. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: PropertyInfo.GetSetMethod(Boolean)\n- uid: System.Reflection.PropertyInfo.GetOptionalCustomModifiers\n  commentId: M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers\n  id: GetOptionalCustomModifiers\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  - vb\n  name: GetOptionalCustomModifiers()\n  fullName: System.Reflection.PropertyInfo.GetOptionalCustomModifiers()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetOptionalCustomModifiers\n    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n    startLine: 131\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns an array of types representing the optional custom modifiers of the property.</p>\\n\"\n  syntax:\n    content: public virtual Type[] GetOptionalCustomModifiers()\n    content.vb: Public Overridable Function GetOptionalCustomModifiers As Type()\n    return:\n      type: System.Type[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects that identify the optional custom modifiers of the current property, such as <xref href=\\\"System.Runtime.CompilerServices.IsConst\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Runtime.CompilerServices.IsImplicitlyDereferenced\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: PropertyInfo.GetOptionalCustomModifiers()\n- uid: System.Reflection.PropertyInfo.GetRawConstantValue\n  commentId: M:System.Reflection.PropertyInfo.GetRawConstantValue\n  id: GetRawConstantValue\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  - vb\n  name: GetRawConstantValue()\n  fullName: System.Reflection.PropertyInfo.GetRawConstantValue()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetRawConstantValue\n    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n    startLine: 74\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns a literal value associated with the property by a compiler. </p>\\n\"\n  syntax:\n    content: public virtual object GetRawConstantValue()\n    content.vb: Public Overridable Function GetRawConstantValue As Object\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the literal value associated with the property. If the literal value is a class type with an element value of zero, the return value is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The Constant table in unmanaged metadata does not contain a constant value for the current property.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification, Metadata Logical Format: Other Structures, Element Types used in Signatures. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: PropertyInfo.GetRawConstantValue()\n- uid: System.Reflection.PropertyInfo.GetRequiredCustomModifiers\n  commentId: M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers\n  id: GetRequiredCustomModifiers\n  parent: System.Reflection.PropertyInfo\n  langs:\n  - csharp\n  - vb\n  name: GetRequiredCustomModifiers()\n  fullName: System.Reflection.PropertyInfo.GetRequiredCustomModifiers()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetRequiredCustomModifiers\n    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs\n    startLine: 129\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns an array of types representing the required custom modifiers of the property.</p>\\n\"\n  syntax:\n    content: public virtual Type[] GetRequiredCustomModifiers()\n    content.vb: Public Overridable Function GetRequiredCustomModifiers As Type()\n    return:\n      type: System.Type[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects that identify the required custom modifiers of the current property, such as <xref href=\\\"System.Runtime.CompilerServices.IsConst\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Runtime.CompilerServices.IsImplicitlyDereferenced\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: PropertyInfo.GetRequiredCustomModifiers()\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Reflection.MemberInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo\n  fullName: System.Reflection.MemberInfo\n  nameWithType: MemberInfo\n  commentId: T:System.Reflection.MemberInfo\n- uid: System.Reflection.ICustomAttributeProvider\n  parent: System.Reflection\n  isExternal: false\n  name: ICustomAttributeProvider\n  fullName: System.Reflection.ICustomAttributeProvider\n  nameWithType: ICustomAttributeProvider\n  commentId: T:System.Reflection.ICustomAttributeProvider\n- uid: System.Reflection.MemberInfo.CustomAttributes\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: CustomAttributes\n  fullName: System.Reflection.MemberInfo.CustomAttributes\n  nameWithType: MemberInfo.CustomAttributes\n  commentId: P:System.Reflection.MemberInfo.CustomAttributes\n- uid: System.Reflection.MemberInfo.DeclaringType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: DeclaringType\n  fullName: System.Reflection.MemberInfo.DeclaringType\n  nameWithType: MemberInfo.DeclaringType\n  commentId: P:System.Reflection.MemberInfo.DeclaringType\n- uid: System.Reflection.MemberInfo.MetadataToken\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: MetadataToken\n  fullName: System.Reflection.MemberInfo.MetadataToken\n  nameWithType: MemberInfo.MetadataToken\n  commentId: P:System.Reflection.MemberInfo.MetadataToken\n- uid: System.Reflection.MemberInfo.Module\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: Module\n  fullName: System.Reflection.MemberInfo.Module\n  nameWithType: MemberInfo.Module\n  commentId: P:System.Reflection.MemberInfo.Module\n- uid: System.Reflection.MemberInfo.Name\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: Name\n  fullName: System.Reflection.MemberInfo.Name\n  nameWithType: MemberInfo.Name\n  commentId: P:System.Reflection.MemberInfo.Name\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: true\n  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)\n  name.vb: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n    name: ICustomAttributeProvider.GetCustomAttributes\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n    name: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: true\n  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type, System.Boolean)\n  name.vb: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n    name: ICustomAttributeProvider.GetCustomAttributes\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n    name: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: true\n  name: ICustomAttributeProvider.IsDefined(Type, Boolean)\n  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined(System.Type, System.Boolean)\n  name.vb: System.Reflection.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n    name: ICustomAttributeProvider.IsDefined\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n    name: System.Reflection.ICustomAttributeProvider.IsDefined\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Reflection.PropertyAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: PropertyAttributes\n  fullName: System.Reflection.PropertyAttributes\n  nameWithType: PropertyAttributes\n  commentId: T:System.Reflection.PropertyAttributes\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  fullName: System.Reflection.MethodInfo\n  nameWithType: MethodInfo\n  commentId: T:System.Reflection.MethodInfo\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Reflection.MemberInfo.Equals(System.Object)\n  parent: System.Reflection.MemberInfo\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Reflection.MemberInfo.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo.Equals(System.Object)\n    name: Equals\n    fullName: System.Reflection.MemberInfo.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MemberInfo.Equals(System.Object)\n    name: Equals\n    fullName: System.Reflection.MemberInfo.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberInfo.Equals(Object)\n  commentId: M:System.Reflection.MemberInfo.Equals(System.Object)\n- uid: System.Reflection.MemberInfo.GetHashCode\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.Reflection.MemberInfo.GetHashCode()\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo.GetHashCode\n    name: GetHashCode\n    fullName: System.Reflection.MemberInfo.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MemberInfo.GetHashCode\n    name: GetHashCode\n    fullName: System.Reflection.MemberInfo.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: MemberInfo.GetHashCode()\n  commentId: M:System.Reflection.MemberInfo.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Reflection.ParameterInfo[]\n  name: ParameterInfo[]\n  fullName: System.Reflection.ParameterInfo[]\n  fullname.vb: System.Reflection.ParameterInfo()\n  name.vb: ParameterInfo()\n  spec.csharp:\n  - uid: System.Reflection.ParameterInfo\n    name: ParameterInfo\n    fullName: System.Reflection.ParameterInfo\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Reflection.ParameterInfo\n    name: ParameterInfo\n    fullName: System.Reflection.ParameterInfo\n  - name: ()\n    fullName: ()\n  nameWithType: ParameterInfo[]\n  nameWithType.vb: ParameterInfo()\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: System.Reflection.MemberInfo.MemberType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: MemberType\n  fullName: System.Reflection.MemberInfo.MemberType\n  nameWithType: MemberInfo.MemberType\n  commentId: P:System.Reflection.MemberInfo.MemberType\n- uid: System.Reflection.MemberTypes\n  parent: System.Reflection\n  isExternal: false\n  name: MemberTypes\n  fullName: System.Reflection.MemberTypes\n  nameWithType: MemberTypes\n  commentId: T:System.Reflection.MemberTypes\n- uid: System.Reflection.MethodInfo[]\n  name: MethodInfo[]\n  fullName: System.Reflection.MethodInfo[]\n  fullname.vb: System.Reflection.MethodInfo()\n  name.vb: MethodInfo()\n  spec.csharp:\n  - uid: System.Reflection.MethodInfo\n    name: MethodInfo\n    fullName: System.Reflection.MethodInfo\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Reflection.MethodInfo\n    name: MethodInfo\n    fullName: System.Reflection.MethodInfo\n  - name: ()\n    fullName: ()\n  nameWithType: MethodInfo[]\n  nameWithType.vb: MethodInfo()\n- uid: System.Type[]\n  name: Type[]\n  fullName: System.Type[]\n  fullname.vb: System.Type()\n  name.vb: Type()\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ()\n    fullName: ()\n  nameWithType: Type[]\n  nameWithType.vb: Type()\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.Reflection.TargetException\n  isExternal: false\n  name: TargetException\n  fullName: System.Reflection.TargetException\n  nameWithType: TargetException\n  commentId: T:System.Reflection.TargetException\n- uid: System.Reflection.TargetParameterCountException\n  isExternal: false\n  name: TargetParameterCountException\n  fullName: System.Reflection.TargetParameterCountException\n  nameWithType: TargetParameterCountException\n  commentId: T:System.Reflection.TargetParameterCountException\n- uid: System.MethodAccessException\n  isExternal: false\n  name: MethodAccessException\n  fullName: System.MethodAccessException\n  nameWithType: MethodAccessException\n  commentId: T:System.MethodAccessException\n- uid: System.Reflection.TargetInvocationException\n  isExternal: false\n  name: TargetInvocationException\n  fullName: System.Reflection.TargetInvocationException\n  nameWithType: TargetInvocationException\n  commentId: T:System.Reflection.TargetInvocationException\n- uid: System.Security.SecurityException\n  isExternal: false\n  name: SecurityException\n  fullName: System.Security.SecurityException\n  nameWithType: SecurityException\n  commentId: T:System.Security.SecurityException\n"}