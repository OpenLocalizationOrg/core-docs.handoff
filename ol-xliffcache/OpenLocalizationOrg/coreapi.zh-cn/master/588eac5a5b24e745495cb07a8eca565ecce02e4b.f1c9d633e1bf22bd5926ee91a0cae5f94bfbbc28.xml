{"nodes":[{"pos":[438,450],"content":"XmlNameTable","needQuote":true,"nodes":[{"content":"XmlNameTable","pos":[0,12]}]},{"pos":[1717,1731],"content":"XmlNameTable()","needQuote":true,"nodes":[{"content":"XmlNameTable()","pos":[0,14]}]},{"pos":[2754,2779],"content":"Add(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Add(Char[], Int32, Int32)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The character array containing the name to add.","pos":[3627,3679],"source":"\\n<p>The character array containing the name to add."},{"content":"&lt;/p&gt;\\n","pos":[3680,3686],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Zero-based index into the array specifying the first character of the name.","pos":[3750,3830],"source":"\\n<p>Zero-based index into the array specifying the first character of the name."},{"content":"&lt;/p&gt;\\n","pos":[3831,3837],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters in the name.","pos":[3901,3943],"source":"\\n<p>The number of characters in the name."},{"content":"&lt;/p&gt;\\n","pos":[3944,3950],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The new atomized string or the existing one if it already exists.","pos":[4010,4080],"source":"\\n<p>The new atomized string or the existing one if it already exists."},{"content":"If length is zero, String.Empty is returned.&lt;/p&gt;\\n","pos":[4081,4131],"source":" If length is zero, String.Empty is returned.</p>\\n"},{"content":"\\n&lt;p&gt;0 &gt; &lt;em&gt;offset&lt;/em&gt;&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; &gt;= &lt;em&gt;array&lt;/em&gt;.Length &lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; &gt; &lt;em&gt;array&lt;/em&gt;.Length &lt;/p&gt;\\n&lt;p&gt;The above conditions do not cause an exception to be thrown if &lt;em&gt;length&lt;/em&gt; =0.","pos":[4256,4502],"source":"\\n<p>0 > <em>offset</em></p>\\n<p>-or- </p>\\n<p>\\n<em>offset</em> >= <em>array</em>.Length </p>\\n<p>-or- </p>\\n<p>\\n<em>length</em> > <em>array</em>.Length </p>\\n<p>The above conditions do not cause an exception to be thrown if <em>length</em> =0."},{"content":"&lt;/p&gt;\\n","pos":[4503,4509],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; &lt; 0.","pos":[4626,4653],"source":"\\n<p>\\n<em>length</em> < 0."},{"content":"&lt;/p&gt;\\n","pos":[4654,4660],"source":" </p>\\n"},{"pos":[5188,5199],"content":"Add(String)","needQuote":true,"nodes":[{"content":"Add(String)","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The name to add.","pos":[5957,5978],"source":"\\n<p>The name to add."},{"content":"&lt;/p&gt;\\n","pos":[5979,5985],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The new atomized string or the existing one if it already exists.&lt;/p&gt;\\n","pos":[6045,6121],"source":"\\n<p>The new atomized string or the existing one if it already exists.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[6240,6287],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[6288,6294],"source":" </p>\\n"},{"pos":[6705,6730],"content":"Get(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Get(Char[], Int32, Int32)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The character array containing the name to look up.","pos":[7611,7667],"source":"\\n<p>The character array containing the name to look up."},{"content":"&lt;/p&gt;\\n","pos":[7668,7674],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index into the array specifying the first character of the name.","pos":[7738,7822],"source":"\\n<p>The zero-based index into the array specifying the first character of the name."},{"content":"&lt;/p&gt;\\n","pos":[7823,7829],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters in the name.","pos":[7893,7935],"source":"\\n<p>The number of characters in the name."},{"content":"&lt;/p&gt;\\n","pos":[7936,7942],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The atomized string or &lt;strong&gt;null&lt;/strong&gt; if the string has not already been atomized.","pos":[8002,8096],"source":"\\n<p>The atomized string or <strong>null</strong> if the string has not already been atomized."},{"content":"If &lt;em&gt;length&lt;/em&gt; is zero, String.Empty is returned.&lt;/p&gt;\\n","pos":[8097,8156],"source":" If <em>length</em> is zero, String.Empty is returned.</p>\\n"},{"content":"\\n&lt;p&gt;0 &gt; &lt;em&gt;offset&lt;/em&gt;&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; &gt;= &lt;em&gt;array&lt;/em&gt;.Length &lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; &gt; &lt;em&gt;array&lt;/em&gt;.Length &lt;/p&gt;\\n&lt;p&gt;The above conditions do not cause an exception to be thrown if &lt;em&gt;length&lt;/em&gt; =0.","pos":[8281,8527],"source":"\\n<p>0 > <em>offset</em></p>\\n<p>-or- </p>\\n<p>\\n<em>offset</em> >= <em>array</em>.Length </p>\\n<p>-or- </p>\\n<p>\\n<em>length</em> > <em>array</em>.Length </p>\\n<p>The above conditions do not cause an exception to be thrown if <em>length</em> =0."},{"content":"&lt;/p&gt;\\n","pos":[8528,8534],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; &lt; 0.","pos":[8651,8678],"source":"\\n<p>\\n<em>length</em> < 0."},{"content":"&lt;/p&gt;\\n","pos":[8679,8685],"source":" </p>\\n"},{"pos":[9213,9224],"content":"Get(String)","needQuote":true,"nodes":[{"content":"Get(String)","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The name to look up.","pos":[9978,10003],"source":"\\n<p>The name to look up."},{"content":"&lt;/p&gt;\\n","pos":[10004,10010],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The atomized string or &lt;strong&gt;null&lt;/strong&gt; if the string has not already been atomized.&lt;/p&gt;\\n","pos":[10070,10170],"source":"\\n<p>The atomized string or <strong>null</strong> if the string has not already been atomized.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[10289,10336],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[10337,10343],"source":" </p>\\n"},{"pos":[10532,10542],"content":"System.Xml","needQuote":true,"nodes":[{"content":"System.Xml","pos":[0,10]}]},{"pos":[10685,10691],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10851,10861],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[10956,10964],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[11033,11034],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11061,11062],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11132,11140],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[11209,11210],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11237,11238],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11421,11435],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[11554,11560],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11627,11628],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11678,11684],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11744,11745],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11828,11834],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11901,11902],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11952,11958],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12018,12019],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12233,12255],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[12403,12409],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12476,12477],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12527,12533],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12594,12595]},{"pos":[12650,12656],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12716,12717],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12814,12820],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12887,12888],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12938,12944],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13005,13006]},{"pos":[13061,13067],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13127,13128],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13373,13404],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[13570,13585],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[13661,13662],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13712,13718],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13779,13780]},{"pos":[13835,13841],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13901,13902],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14008,14023],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[14099,14100],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14150,14156],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14217,14218]},{"pos":[14273,14279],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14339,14340],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14570,14583],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[14684,14695],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[14767,14768],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14795,14796],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14869,14880],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[14952,14953],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14980,14981],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15156,15165],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[15258,15265],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[15333,15334],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15361,15362],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15431,15438],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[15506,15507],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15534,15535],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15710,15727],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[15836,15851],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[15927,15928],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15955,15956],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16033,16048],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[16124,16125],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16152,16153],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16298,16304],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[16398,16404],"content":"Char[]","needQuote":true,"nodes":[{"content":"Char[]","pos":[0,6]}]},{"pos":[16524,16528],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[16587,16589]},{"pos":[16652,16656],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[16714,16716],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[16848,16853],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[16995,17001],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[17147,17171],"content":"IndexOutOfRangeException","needQuote":true,"nodes":[{"content":"IndexOutOfRangeException","pos":[0,24]}]},{"pos":[17374,17401],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[17607,17628],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Xml.XmlNameTable\n  commentId: T:System.Xml.XmlNameTable\n  id: XmlNameTable\n  parent: System.Xml\n  children:\n  - System.Xml.XmlNameTable.#ctor\n  - System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)\n  - System.Xml.XmlNameTable.Add(System.String)\n  - System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)\n  - System.Xml.XmlNameTable.Get(System.String)\n  langs:\n  - csharp\n  - vb\n  name: XmlNameTable\n  fullName: System.Xml.XmlNameTable\n  type: Class\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XmlNameTable\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 167\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Table of atomized string objects.</p>\\n\"\n  syntax:\n    content: public abstract class XmlNameTable\n    content.vb: Public MustInherit Class XmlNameTable\n  seealso:\n  - type: System.Xml.NameTable\n    commentId: T:System.Xml.NameTable\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: XmlNameTable\n- uid: System.Xml.XmlNameTable.#ctor\n  commentId: M:System.Xml.XmlNameTable.#ctor\n  id: '#ctor'\n  parent: System.Xml.XmlNameTable\n  langs:\n  - csharp\n  - vb\n  name: XmlNameTable()\n  fullName: System.Xml.XmlNameTable.XmlNameTable()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 169\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Xml.XmlNameTable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. </p>\\n\"\n  syntax:\n    content: protected XmlNameTable()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: XmlNameTable.XmlNameTable()\n- uid: System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)\n  id: Add(System.Char[],System.Int32,System.Int32)\n  parent: System.Xml.XmlNameTable\n  langs:\n  - csharp\n  - vb\n  name: Add(Char[], Int32, Int32)\n  fullName: System.Xml.XmlNameTable.Add(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 170\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, atomizes the specified string and adds it to the <strong>XmlNameTable</strong>.</p>\\n\"\n  syntax:\n    content: public abstract string Add(char[] array, int offset, int length)\n    content.vb: Public MustOverride Function Add(array As Char(), offset As Integer, length As Integer) As String\n    parameters:\n    - id: array\n      type: System.Char[]\n      description: \"\\n<p>The character array containing the name to add. </p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>Zero-based index into the array specifying the first character of the name. </p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of characters in the name. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The new atomized string or the existing one if it already exists. If length is zero, String.Empty is returned.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>0 > <em>offset</em></p>\\n<p>-or- </p>\\n<p>\\n<em>offset</em> >= <em>array</em>.Length </p>\\n<p>-or- </p>\\n<p>\\n<em>length</em> > <em>array</em>.Length </p>\\n<p>The above conditions do not cause an exception to be thrown if <em>length</em> =0. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>length</em> < 0. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Xml.XmlNameTable.Add(System.Char(), System.Int32, System.Int32)\n  name.vb: Add(Char(), Int32, Int32)\n  nameWithType: XmlNameTable.Add(Char[], Int32, Int32)\n  nameWithType.vb: XmlNameTable.Add(Char(), Int32, Int32)\n- uid: System.Xml.XmlNameTable.Add(System.String)\n  commentId: M:System.Xml.XmlNameTable.Add(System.String)\n  id: Add(System.String)\n  parent: System.Xml.XmlNameTable\n  langs:\n  - csharp\n  - vb\n  name: Add(String)\n  fullName: System.Xml.XmlNameTable.Add(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 171\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, atomizes the specified string and adds it to the <strong>XmlNameTable</strong>.</p>\\n\"\n  syntax:\n    content: public abstract string Add(string array)\n    content.vb: Public MustOverride Function Add(array As String) As String\n    parameters:\n    - id: array\n      type: System.String\n      description: \"\\n<p>The name to add. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The new atomized string or the existing one if it already exists.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XmlNameTable.Add(String)\n- uid: System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)\n  id: Get(System.Char[],System.Int32,System.Int32)\n  parent: System.Xml.XmlNameTable\n  langs:\n  - csharp\n  - vb\n  name: Get(Char[], Int32, Int32)\n  fullName: System.Xml.XmlNameTable.Get(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Get\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 172\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, gets the atomized string containing the same characters as the specified range of characters in the given array.</p>\\n\"\n  syntax:\n    content: public abstract string Get(char[] array, int offset, int length)\n    content.vb: Public MustOverride Function Get(array As Char(), offset As Integer, length As Integer) As String\n    parameters:\n    - id: array\n      type: System.Char[]\n      description: \"\\n<p>The character array containing the name to look up. </p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The zero-based index into the array specifying the first character of the name. </p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of characters in the name. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The atomized string or <strong>null</strong> if the string has not already been atomized. If <em>length</em> is zero, String.Empty is returned.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>0 > <em>offset</em></p>\\n<p>-or- </p>\\n<p>\\n<em>offset</em> >= <em>array</em>.Length </p>\\n<p>-or- </p>\\n<p>\\n<em>length</em> > <em>array</em>.Length </p>\\n<p>The above conditions do not cause an exception to be thrown if <em>length</em> =0. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>length</em> < 0. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Xml.XmlNameTable.Get(System.Char(), System.Int32, System.Int32)\n  name.vb: Get(Char(), Int32, Int32)\n  nameWithType: XmlNameTable.Get(Char[], Int32, Int32)\n  nameWithType.vb: XmlNameTable.Get(Char(), Int32, Int32)\n- uid: System.Xml.XmlNameTable.Get(System.String)\n  commentId: M:System.Xml.XmlNameTable.Get(System.String)\n  id: Get(System.String)\n  parent: System.Xml.XmlNameTable\n  langs:\n  - csharp\n  - vb\n  name: Get(String)\n  fullName: System.Xml.XmlNameTable.Get(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Get\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 173\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, gets the atomized string containing the same value as the specified string.</p>\\n\"\n  syntax:\n    content: public abstract string Get(string array)\n    content.vb: Public MustOverride Function Get(array As String) As String\n    parameters:\n    - id: array\n      type: System.String\n      description: \"\\n<p>The name to look up. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The atomized string or <strong>null</strong> if the string has not already been atomized.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XmlNameTable.Get(String)\nreferences:\n- uid: System.Xml\n  isExternal: false\n  name: System.Xml\n  fullName: System.Xml\n  commentId: N:System.Xml\n  nameWithType: System.Xml\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Char[]\n  name: Char[]\n  fullName: System.Char[]\n  fullname.vb: System.Char()\n  name.vb: Char()\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Char[]\n  nameWithType.vb: Char()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.IndexOutOfRangeException\n  isExternal: false\n  name: IndexOutOfRangeException\n  fullName: System.IndexOutOfRangeException\n  nameWithType: IndexOutOfRangeException\n  commentId: T:System.IndexOutOfRangeException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}