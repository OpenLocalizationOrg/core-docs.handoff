{"nodes":[{"pos":[1271,1297],"content":"DataContractJsonSerializer","needQuote":true,"nodes":[{"content":"DataContractJsonSerializer","pos":[0,26]}]},{"pos":[2898,2930],"content":"DataContractJsonSerializer(Type)","needQuote":true,"nodes":[{"content":"DataContractJsonSerializer(Type)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The type of the instances that is serialized or deserialized.&lt;/p&gt;\\n","pos":[3901,3973],"source":"\\n<p>The type of the instances that is serialized or deserialized.</p>\\n"},{"pos":[4580,4631],"content":"DataContractJsonSerializer(Type, IEnumerable<Type>)","needQuote":true,"nodes":[{"content":"DataContractJsonSerializer(Type, IEnumerable&lt;Type&gt;)","pos":[0,51],"source":"DataContractJsonSerializer(Type, IEnumerable<Type>)"}]},{"content":"\\n&lt;p&gt;The type of the instances that are serialized or deserialized.&lt;/p&gt;\\n","pos":[5796,5869],"source":"\\n<p>The type of the instances that are serialized or deserialized.</p>\\n"},{"pos":[7247,7315],"content":"DataContractJsonSerializer(Type, DataContractJsonSerializerSettings)","needQuote":true,"nodes":[{"content":"DataContractJsonSerializer(Type, DataContractJsonSerializerSettings)","pos":[0,68]}]},{"content":"\\n&lt;p&gt;The type of the instances that is serialized or deserialized.&lt;/p&gt;\\n","pos":[8473,8545],"source":"\\n<p>The type of the instances that is serialized or deserialized.</p>\\n"},{"content":"\\n&lt;p&gt;The serializer settings for the JSON serializer.&lt;/p&gt;\\n","pos":[8667,8726],"source":"\\n<p>The serializer settings for the JSON serializer.</p>\\n"},{"pos":[9199,9213],"content":"DateTimeFormat","needQuote":true,"nodes":[{"content":"DateTimeFormat","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The format of the date and time type items in object graph.&lt;/p&gt;\\n","pos":[10070,10140],"source":"\\n<p>The format of the date and time type items in object graph.</p>\\n"},{"pos":[10595,10614],"content":"EmitTypeInformation","needQuote":true,"nodes":[{"content":"EmitTypeInformation","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The data contract JSON serializer settings to emit type information.&lt;/p&gt;\\n","pos":[11523,11602],"source":"\\n<p>The data contract JSON serializer settings to emit type information.</p>\\n"},{"pos":[12035,12045],"content":"KnownTypes","needQuote":true,"nodes":[{"content":"KnownTypes","pos":[0,10]}]},{"pos":[13873,13895],"content":"SerializeReadOnlyTypes","needQuote":true,"nodes":[{"content":"SerializeReadOnlyTypes","pos":[0,22]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to serialize read only types; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[14747,14845],"source":"\\n<p>\\n<strong>true</strong> to serialize read only types; otherwise <strong>false</strong>.</p>\\n"},{"pos":[15326,15351],"content":"UseSimpleDictionaryFormat","needQuote":true,"nodes":[{"content":"UseSimpleDictionaryFormat","pos":[0,25]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to use a simple dictionary format; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16220,16324],"source":"\\n<p>\\n<strong>true</strong> to use a simple dictionary format; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[16817,16835],"content":"ReadObject(Stream)","needQuote":true,"nodes":[{"content":"ReadObject(Stream)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The deserialized object.&lt;/p&gt;\\n","pos":[17873,17908],"source":"\\n<p>The deserialized object.</p>\\n"},{"pos":[18418,18445],"content":"WriteObject(Stream, Object)","needQuote":true,"nodes":[{"content":"WriteObject(Stream, Object)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The object that contains the data to write to the stream.&lt;/p&gt;\\n","pos":[19534,19602],"source":"\\n<p>The object that contains the data to write to the stream.</p>\\n"},{"content":"\\n&lt;p&gt;There is a problem with the instance being written.&lt;/p&gt;\\n","pos":[20179,20241],"source":"\\n<p>There is a problem with the instance being written.</p>\\n"},{"pos":[20812,20845],"content":"System.Runtime.Serialization.Json","needQuote":true,"nodes":[{"content":"System.Runtime.Serialization.Json","pos":[0,33]}]},{"pos":[21057,21063],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21223,21233],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[21328,21336],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[21405,21406],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21433,21434],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21504,21512],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[21581,21582],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21609,21610],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21793,21807],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[21926,21932],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21999,22000],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22050,22056],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22116,22117],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22200,22206],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22273,22274],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22324,22330],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22390,22391],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22605,22627],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[22775,22781],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22848,22849],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22899,22905],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22966,22967]},{"pos":[23022,23028],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23088,23089],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23186,23192],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23259,23260],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23310,23316],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23377,23378]},{"pos":[23433,23439],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23499,23500],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23745,23776],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[23942,23957],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[24033,24034],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24084,24090],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[24151,24152]},{"pos":[24207,24213],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24273,24274],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24380,24395],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[24471,24472],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24522,24528],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[24589,24590]},{"pos":[24645,24651],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24711,24712],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24942,24955],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[25056,25067],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[25139,25140],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25167,25168],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25241,25252],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[25324,25325],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25352,25353],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25528,25537],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[25630,25637],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[25705,25706],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25733,25734],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25803,25810],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[25878,25879],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25906,25907],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26082,26099],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[26208,26223],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[26299,26300],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26327,26328],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26405,26420],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[26496,26497],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26524,26525],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26670,26676],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[26805,26809],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[27041,27058],"content":"IEnumerable<Type>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;Type&gt;","pos":[0,17],"source":"IEnumerable<Type>"}]},{"pos":[27300,27311],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[27396,27397],"content":"<","needQuote":true,"nodes":[]},{"pos":[27445,27449],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[27600,27611],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[27697,27700]},{"pos":[27755,27759],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[27817,27818],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28052,28066],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[28285,28296],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[28360,28361],"content":"<","needQuote":true,"nodes":[]},{"pos":[28388,28389],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[28509,28520],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[28585,28588]},{"pos":[28622,28623],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[28650,28651],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28854,28880],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[29153,29187],"content":"DataContractJsonSerializerSettings","needQuote":true,"nodes":[{"content":"DataContractJsonSerializerSettings","pos":[0,34]}]},{"pos":[29522,29536],"content":"DateTimeFormat","needQuote":true,"nodes":[{"content":"DateTimeFormat","pos":[0,14]}]},{"pos":[29747,29775],"content":"System.Runtime.Serialization","needQuote":true,"nodes":[{"content":"System.Runtime.Serialization","pos":[0,28]}]},{"pos":[30029,30048],"content":"EmitTypeInformation","needQuote":true,"nodes":[{"content":"EmitTypeInformation","pos":[0,19]}]},{"pos":[30395,30419],"content":"ReadOnlyCollection<Type>","needQuote":true,"nodes":[{"content":"ReadOnlyCollection&lt;Type&gt;","pos":[0,24],"source":"ReadOnlyCollection<Type>"}]},{"pos":[30701,30719],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"pos":[30815,30816],"content":"<","needQuote":true,"nodes":[]},{"pos":[30864,30868],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[31030,31048],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"content":"(Of","pos":[31145,31148]},{"pos":[31203,31207],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[31265,31266],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31536,31557],"content":"ReadOnlyCollection<T>","needQuote":true,"nodes":[{"content":"ReadOnlyCollection&lt;T&gt;","pos":[0,21],"source":"ReadOnlyCollection<T>"}]},{"pos":[31816,31834],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"pos":[31909,31910],"content":"<","needQuote":true,"nodes":[]},{"pos":[31937,31938],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[32069,32087],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"content":"(Of","pos":[32163,32166]},{"pos":[32200,32201],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[32228,32229],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32461,32491],"content":"System.Collections.ObjectModel","needQuote":true,"nodes":[{"content":"System.Collections.ObjectModel","pos":[0,30]}]},{"pos":[32695,32702],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[32856,32862],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[32992,33001],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[33168,33196],"content":"InvalidDataContractException","needQuote":true,"nodes":[{"content":"InvalidDataContractException","pos":[0,28]}]},{"pos":[33472,33494],"content":"SerializationException","needQuote":true,"nodes":[{"content":"SerializationException","pos":[0,22]}]}],"content":"items:\n- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer\n  commentId: T:System.Runtime.Serialization.Json.DataContractJsonSerializer\n  id: DataContractJsonSerializer\n  parent: System.Runtime.Serialization.Json\n  children:\n  - System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type)\n  - System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})\n  - System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Runtime.Serialization.Json.DataContractJsonSerializerSettings)\n  - System.Runtime.Serialization.Json.DataContractJsonSerializer.DateTimeFormat\n  - System.Runtime.Serialization.Json.DataContractJsonSerializer.EmitTypeInformation\n  - System.Runtime.Serialization.Json.DataContractJsonSerializer.KnownTypes\n  - System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.IO.Stream)\n  - System.Runtime.Serialization.Json.DataContractJsonSerializer.SerializeReadOnlyTypes\n  - System.Runtime.Serialization.Json.DataContractJsonSerializer.UseSimpleDictionaryFormat\n  - System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.IO.Stream,System.Object)\n  langs:\n  - csharp\n  - vb\n  name: DataContractJsonSerializer\n  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer\n  type: Class\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DataContractJsonSerializer\n    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs\n    startLine: 27\n  assemblies:\n  - System.Runtime.Serialization.Json\n  namespace: System.Runtime.Serialization.Json\n  summary: \"\\n<p>Serializes objects to the JavaScript Object Notation (JSON) and deserializes JSON data to objects. This class cannot be inherited.</p>\\n\"\n  syntax:\n    content: public sealed class DataContractJsonSerializer\n    content.vb: Public NotInheritable Class DataContractJsonSerializer\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: DataContractJsonSerializer\n- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type)\n  commentId: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type)\n  id: '#ctor(System.Type)'\n  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer\n  langs:\n  - csharp\n  - vb\n  name: DataContractJsonSerializer(Type)\n  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.DataContractJsonSerializer(System.Type)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs\n    startLine: 29\n  assemblies:\n  - System.Runtime.Serialization.Json\n  namespace: System.Runtime.Serialization.Json\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Runtime.Serialization.Json.DataContractJsonSerializer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class to serialize or deserialize an object of the specified type.</p>\\n\"\n  syntax:\n    content: public DataContractJsonSerializer(Type type)\n    content.vb: Public Sub New(type As Type)\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The type of the instances that is serialized or deserialized.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DataContractJsonSerializer.DataContractJsonSerializer(Type)\n- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})\n  commentId: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})\n  id: '#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})'\n  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer\n  langs:\n  - csharp\n  - vb\n  name: DataContractJsonSerializer(Type, IEnumerable<Type>)\n  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.DataContractJsonSerializer(System.Type, System.Collections.Generic.IEnumerable<System.Type>)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs\n    startLine: 30\n  assemblies:\n  - System.Runtime.Serialization.Json\n  namespace: System.Runtime.Serialization.Json\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Runtime.Serialization.Json.DataContractJsonSerializer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class to serialize or deserialize an object of the specified type, with a collection of known types that may be present in the object graph. </p>\\n\"\n  syntax:\n    content: public DataContractJsonSerializer(Type type, IEnumerable<Type> knownTypes)\n    content.vb: Public Sub New(type As Type, knownTypes As IEnumerable(Of Type))\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The type of the instances that are serialized or deserialized.</p>\\n\"\n    - id: knownTypes\n      type: System.Collections.Generic.IEnumerable{System.Type}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  of <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the types that may be present in the object graph.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Runtime.Serialization.Json.DataContractJsonSerializer.DataContractJsonSerializer(System.Type, System.Collections.Generic.IEnumerable(Of System.Type))\n  name.vb: DataContractJsonSerializer(Type, IEnumerable(Of Type))\n  nameWithType: DataContractJsonSerializer.DataContractJsonSerializer(Type, IEnumerable<Type>)\n  nameWithType.vb: DataContractJsonSerializer.DataContractJsonSerializer(Type, IEnumerable(Of Type))\n- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Runtime.Serialization.Json.DataContractJsonSerializerSettings)\n  commentId: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Runtime.Serialization.Json.DataContractJsonSerializerSettings)\n  id: '#ctor(System.Type,System.Runtime.Serialization.Json.DataContractJsonSerializerSettings)'\n  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer\n  langs:\n  - csharp\n  - vb\n  name: DataContractJsonSerializer(Type, DataContractJsonSerializerSettings)\n  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.DataContractJsonSerializer(System.Type, System.Runtime.Serialization.Json.DataContractJsonSerializerSettings)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs\n    startLine: 31\n  assemblies:\n  - System.Runtime.Serialization.Json\n  namespace: System.Runtime.Serialization.Json\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Runtime.Serialization.Json.DataContractJsonSerializer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class to serialize or deserialize an object of the specified type and serializer settings.</p>\\n\"\n  syntax:\n    content: public DataContractJsonSerializer(Type type, DataContractJsonSerializerSettings settings)\n    content.vb: Public Sub New(type As Type, settings As DataContractJsonSerializerSettings)\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The type of the instances that is serialized or deserialized.</p>\\n\"\n    - id: settings\n      type: System.Runtime.Serialization.Json.DataContractJsonSerializerSettings\n      description: \"\\n<p>The serializer settings for the JSON serializer.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DataContractJsonSerializer.DataContractJsonSerializer(Type, DataContractJsonSerializerSettings)\n- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.DateTimeFormat\n  commentId: P:System.Runtime.Serialization.Json.DataContractJsonSerializer.DateTimeFormat\n  id: DateTimeFormat\n  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer\n  langs:\n  - csharp\n  - vb\n  name: DateTimeFormat\n  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.DateTimeFormat\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DateTimeFormat\n    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs\n    startLine: 32\n  assemblies:\n  - System.Runtime.Serialization.Json\n  namespace: System.Runtime.Serialization.Json\n  summary: \"\\n<p>Gets the format of the date and time type items in object graph.</p>\\n\"\n  syntax:\n    content: public DateTimeFormat DateTimeFormat { get; }\n    content.vb: Public ReadOnly Property DateTimeFormat As DateTimeFormat\n    parameters: []\n    return:\n      type: System.Runtime.Serialization.DateTimeFormat\n      description: \"\\n<p>The format of the date and time type items in object graph.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DataContractJsonSerializer.DateTimeFormat\n- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.EmitTypeInformation\n  commentId: P:System.Runtime.Serialization.Json.DataContractJsonSerializer.EmitTypeInformation\n  id: EmitTypeInformation\n  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer\n  langs:\n  - csharp\n  - vb\n  name: EmitTypeInformation\n  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.EmitTypeInformation\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EmitTypeInformation\n    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs\n    startLine: 33\n  assemblies:\n  - System.Runtime.Serialization.Json\n  namespace: System.Runtime.Serialization.Json\n  summary: \"\\n<p>Gets or sets the data contract JSON serializer settings to emit type information.</p>\\n\"\n  syntax:\n    content: public EmitTypeInformation EmitTypeInformation { get; }\n    content.vb: Public ReadOnly Property EmitTypeInformation As EmitTypeInformation\n    parameters: []\n    return:\n      type: System.Runtime.Serialization.EmitTypeInformation\n      description: \"\\n<p>The data contract JSON serializer settings to emit type information.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DataContractJsonSerializer.EmitTypeInformation\n- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.KnownTypes\n  commentId: P:System.Runtime.Serialization.Json.DataContractJsonSerializer.KnownTypes\n  id: KnownTypes\n  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer\n  langs:\n  - csharp\n  - vb\n  name: KnownTypes\n  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.KnownTypes\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: KnownTypes\n    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs\n    startLine: 34\n  assemblies:\n  - System.Runtime.Serialization.Json\n  namespace: System.Runtime.Serialization.Json\n  summary: \"\\n<p>Gets a collection of types that may be present in the object graph serialized using this instance of the <xref href=\\\"System.Runtime.Serialization.Json.DataContractJsonSerializer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public ReadOnlyCollection<Type> KnownTypes { get; }\n    content.vb: Public ReadOnly Property KnownTypes As ReadOnlyCollection(Of Type)\n    parameters: []\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Type}\n      description: \"\\n<p>A <xref href=\\\"System.Collections.ObjectModel.ReadOnlyCollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the expected types passed in as known types to the <xref href=\\\"System.Runtime.Serialization.Json.DataContractJsonSerializer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> constructor.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DataContractJsonSerializer.KnownTypes\n- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.SerializeReadOnlyTypes\n  commentId: P:System.Runtime.Serialization.Json.DataContractJsonSerializer.SerializeReadOnlyTypes\n  id: SerializeReadOnlyTypes\n  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer\n  langs:\n  - csharp\n  - vb\n  name: SerializeReadOnlyTypes\n  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.SerializeReadOnlyTypes\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SerializeReadOnlyTypes\n    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs\n    startLine: 35\n  assemblies:\n  - System.Runtime.Serialization.Json\n  namespace: System.Runtime.Serialization.Json\n  summary: \"\\n<p>Gets or sets a value that specifies whether to serialize read only types.</p>\\n\"\n  syntax:\n    content: public bool SerializeReadOnlyTypes { get; }\n    content.vb: Public ReadOnly Property SerializeReadOnlyTypes As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to serialize read only types; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DataContractJsonSerializer.SerializeReadOnlyTypes\n- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.UseSimpleDictionaryFormat\n  commentId: P:System.Runtime.Serialization.Json.DataContractJsonSerializer.UseSimpleDictionaryFormat\n  id: UseSimpleDictionaryFormat\n  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer\n  langs:\n  - csharp\n  - vb\n  name: UseSimpleDictionaryFormat\n  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.UseSimpleDictionaryFormat\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UseSimpleDictionaryFormat\n    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs\n    startLine: 36\n  assemblies:\n  - System.Runtime.Serialization.Json\n  namespace: System.Runtime.Serialization.Json\n  summary: \"\\n<p>Gets or sets a value that specifies whether to use a simple dictionary format.</p>\\n\"\n  syntax:\n    content: public bool UseSimpleDictionaryFormat { get; }\n    content.vb: Public ReadOnly Property UseSimpleDictionaryFormat As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to use a simple dictionary format; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DataContractJsonSerializer.UseSimpleDictionaryFormat\n- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.IO.Stream)\n  commentId: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.IO.Stream)\n  id: ReadObject(System.IO.Stream)\n  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer\n  langs:\n  - csharp\n  - vb\n  name: ReadObject(Stream)\n  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.IO.Stream)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadObject\n    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs\n    startLine: 37\n  assemblies:\n  - System.Runtime.Serialization.Json\n  namespace: System.Runtime.Serialization.Json\n  summary: \"\\n<p>Reads a document stream in the JSON (JavaScript Object Notation) format and returns the deserialized object.</p>\\n\"\n  syntax:\n    content: public object ReadObject(Stream stream)\n    content.vb: Public Function ReadObject(stream As Stream) As Object\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The <xref href=\\\"System.IO.Stream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be read.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The deserialized object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DataContractJsonSerializer.ReadObject(Stream)\n- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.IO.Stream,System.Object)\n  commentId: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.IO.Stream,System.Object)\n  id: WriteObject(System.IO.Stream,System.Object)\n  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer\n  langs:\n  - csharp\n  - vb\n  name: WriteObject(Stream, Object)\n  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.IO.Stream, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteObject\n    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs\n    startLine: 38\n  assemblies:\n  - System.Runtime.Serialization.Json\n  namespace: System.Runtime.Serialization.Json\n  summary: \"\\n<p>Serializes a specified object to JavaScript Object Notation (JSON) data and writes the resulting JSON to a stream.</p>\\n\"\n  syntax:\n    content: public void WriteObject(Stream stream, object graph)\n    content.vb: Public Sub WriteObject(stream As Stream, graph As Object)\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The <xref href=\\\"System.IO.Stream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is written to.</p>\\n\"\n    - id: graph\n      type: System.Object\n      description: \"\\n<p>The object that contains the data to write to the stream.</p>\\n\"\n  exceptions:\n  - type: System.Runtime.Serialization.InvalidDataContractException\n    commentId: T:System.Runtime.Serialization.InvalidDataContractException\n    description: \"\\n<p>The type being serialized does not conform to data contract rules. For example, the <xref href=\\\"System.Runtime.Serialization.DataContractAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> attribute has not been applied to the type.</p>\\n\"\n  - type: System.Runtime.Serialization.SerializationException\n    commentId: T:System.Runtime.Serialization.SerializationException\n    description: \"\\n<p>There is a problem with the instance being written.</p>\\n\"\n  - type: System.ServiceModel.QuotaExceededException\n    commentId: T:System.ServiceModel.QuotaExceededException\n    description: \"\\n<p>The maximum number of objects to serialize has been exceeded. Check the <xref href=\\\"System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DataContractJsonSerializer.WriteObject(Stream, Object)\nreferences:\n- uid: System.Runtime.Serialization.Json\n  isExternal: false\n  name: System.Runtime.Serialization.Json\n  fullName: System.Runtime.Serialization.Json\n  commentId: N:System.Runtime.Serialization.Json\n  nameWithType: System.Runtime.Serialization.Json\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  commentId: T:System.Type\n  nameWithType: Type\n- uid: System.Collections.Generic.IEnumerable{System.Type}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<Type>\n  fullName: System.Collections.Generic.IEnumerable<System.Type>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Type)\n  name.vb: IEnumerable(Of Type)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Type}\n  nameWithType: IEnumerable<Type>\n  nameWithType.vb: IEnumerable(Of Type)\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable`1\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n  nameWithType: System.Collections.Generic\n- uid: System.Runtime.Serialization.Json.DataContractJsonSerializerSettings\n  parent: System.Runtime.Serialization.Json\n  isExternal: false\n  name: DataContractJsonSerializerSettings\n  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializerSettings\n  commentId: T:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings\n  nameWithType: DataContractJsonSerializerSettings\n- uid: System.Runtime.Serialization.DateTimeFormat\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: DateTimeFormat\n  fullName: System.Runtime.Serialization.DateTimeFormat\n  commentId: T:System.Runtime.Serialization.DateTimeFormat\n  nameWithType: DateTimeFormat\n- uid: System.Runtime.Serialization\n  isExternal: false\n  name: System.Runtime.Serialization\n  fullName: System.Runtime.Serialization\n  commentId: N:System.Runtime.Serialization\n  nameWithType: System.Runtime.Serialization\n- uid: System.Runtime.Serialization.EmitTypeInformation\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: EmitTypeInformation\n  fullName: System.Runtime.Serialization.EmitTypeInformation\n  commentId: T:System.Runtime.Serialization.EmitTypeInformation\n  nameWithType: EmitTypeInformation\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Type}\n  parent: System.Collections.ObjectModel\n  definition: System.Collections.ObjectModel.ReadOnlyCollection`1\n  name: ReadOnlyCollection<Type>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Type>\n  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.Type)\n  name.vb: ReadOnlyCollection(Of Type)\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{System.Type}\n  nameWithType: ReadOnlyCollection<Type>\n  nameWithType.vb: ReadOnlyCollection(Of Type)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n  isExternal: false\n  name: ReadOnlyCollection<T>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>\n  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)\n  name.vb: ReadOnlyCollection(Of T)\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1\n  nameWithType: ReadOnlyCollection<T>\n  nameWithType.vb: ReadOnlyCollection(Of T)\n- uid: System.Collections.ObjectModel\n  isExternal: false\n  name: System.Collections.ObjectModel\n  fullName: System.Collections.ObjectModel\n  commentId: N:System.Collections.ObjectModel\n  nameWithType: System.Collections.ObjectModel\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  fullName: System.IO.Stream\n  commentId: T:System.IO.Stream\n  nameWithType: Stream\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  commentId: N:System.IO\n  nameWithType: System.IO\n- uid: System.Runtime.Serialization.InvalidDataContractException\n  isExternal: false\n  name: InvalidDataContractException\n  fullName: System.Runtime.Serialization.InvalidDataContractException\n  nameWithType: InvalidDataContractException\n  commentId: T:System.Runtime.Serialization.InvalidDataContractException\n- uid: System.Runtime.Serialization.SerializationException\n  isExternal: false\n  name: SerializationException\n  fullName: System.Runtime.Serialization.SerializationException\n  nameWithType: SerializationException\n  commentId: T:System.Runtime.Serialization.SerializationException\n- uid: System.ServiceModel.QuotaExceededException\n"}