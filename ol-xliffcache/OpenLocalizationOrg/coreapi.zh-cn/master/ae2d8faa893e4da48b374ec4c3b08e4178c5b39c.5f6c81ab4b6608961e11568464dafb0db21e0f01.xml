{"nodes":[{"pos":[738,746],"content":"TextInfo","needQuote":true,"nodes":[{"content":"TextInfo","pos":[0,8]}]},{"pos":[2173,2184],"content":"CultureName","needQuote":true,"nodes":[{"content":"CultureName","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The name of a culture.","pos":[3032,3059],"source":"\\n<p>The name of a culture."},{"content":"&lt;/p&gt;\\n","pos":[3060,3066],"source":" </p>\\n"},{"pos":[3380,3390],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[4751,4764],"content":"IsRightToLeft","needQuote":true,"nodes":[{"content":"IsRightToLeft","pos":[0,13]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if text flows from right to left; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[5671,5774],"source":"\\n<p>\\n<strong>true</strong> if text flows from right to left; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[6099,6112],"content":"ListSeparator","needQuote":true,"nodes":[{"content":"ListSeparator","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The string that separates items in a list.&lt;/p&gt;\\n","pos":[6918,6971],"source":"\\n<p>The string that separates items in a list.</p>\\n"},{"content":"\\n&lt;p&gt;The value in a set operation is null.&lt;/p&gt;\\n","pos":[7090,7138],"source":"\\n<p>The value in a set operation is null.</p>\\n"},{"pos":[7776,7790],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[9532,9545],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[11182,11195],"content":"ToLower(Char)","needQuote":true,"nodes":[{"content":"ToLower(Char)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The character to convert to lowercase.","pos":[11948,11991],"source":"\\n<p>The character to convert to lowercase."},{"content":"&lt;/p&gt;\\n","pos":[11992,11998],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The specified character converted to lowercase.&lt;/p&gt;\\n","pos":[12056,12114],"source":"\\n<p>The specified character converted to lowercase.</p>\\n"},{"pos":[12754,12769],"content":"ToLower(String)","needQuote":true,"nodes":[{"content":"ToLower(String)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The string to convert to lowercase.","pos":[13537,13577],"source":"\\n<p>The string to convert to lowercase."},{"content":"&lt;/p&gt;\\n","pos":[13578,13584],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The specified string converted to lowercase.&lt;/p&gt;\\n","pos":[13644,13699],"source":"\\n<p>The specified string converted to lowercase.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;str&lt;/em&gt; is null.","pos":[13818,13846],"source":"\\n<p>\\n<em>str</em> is null."},{"content":"&lt;/p&gt;\\n","pos":[13847,13853],"source":" </p>\\n"},{"pos":[14453,14463],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[15855,15868],"content":"ToUpper(Char)","needQuote":true,"nodes":[{"content":"ToUpper(Char)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The character to convert to uppercase.","pos":[16621,16664],"source":"\\n<p>The character to convert to uppercase."},{"content":"&lt;/p&gt;\\n","pos":[16665,16671],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The specified character converted to uppercase.&lt;/p&gt;\\n","pos":[16729,16787],"source":"\\n<p>The specified character converted to uppercase.</p>\\n"},{"pos":[17427,17442],"content":"ToUpper(String)","needQuote":true,"nodes":[{"content":"ToUpper(String)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The string to convert to uppercase.","pos":[18210,18250],"source":"\\n<p>The string to convert to uppercase."},{"content":"&lt;/p&gt;\\n","pos":[18251,18257],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The specified string converted to uppercase.&lt;/p&gt;\\n","pos":[18317,18372],"source":"\\n<p>The specified string converted to uppercase.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;str&lt;/em&gt; is null.","pos":[18491,18519],"source":"\\n<p>\\n<em>str</em> is null."},{"content":"&lt;/p&gt;\\n","pos":[18520,18526],"source":" </p>\\n"},{"pos":[19004,19024],"content":"System.Globalization","needQuote":true,"nodes":[{"content":"System.Globalization","pos":[0,20]}]},{"pos":[19197,19203],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19390,19412],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[19560,19566],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19633,19634],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19684,19690],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19751,19752]},{"pos":[19807,19813],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19873,19874],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19971,19977],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20044,20045],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20095,20101],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20162,20163]},{"pos":[20218,20224],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20284,20285],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20530,20561],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[20727,20742],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[20818,20819],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20869,20875],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20936,20937]},{"pos":[20992,20998],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21058,21059],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21165,21180],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[21256,21257],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21307,21313],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21374,21375]},{"pos":[21430,21436],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21496,21497],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21723,21732],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[21825,21832],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[21900,21901],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21928,21929],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21998,22005],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[22073,22074],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22101,22102],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22277,22294],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[22403,22418],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[22494,22495],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22522,22523],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22600,22615],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[22691,22692],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22719,22720],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22865,22871],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[23002,23008],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[23154,23161],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[23337,23351],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[23470,23476],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23543,23544],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23594,23600],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23660,23661],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23744,23750],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23817,23818],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23868,23874],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23934,23935],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24125,24138],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[24239,24250],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[24322,24323],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24350,24351],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24424,24435],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[24507,24508],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24535,24536],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24696,24701],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[24841,24845],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[24999,25009],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[25104,25112],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[25181,25182],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25209,25210],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25280,25288],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[25357,25358],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25385,25386],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25539,25560],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[25769,25794],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]}],"content":"items:\n- uid: System.Globalization.TextInfo\n  commentId: T:System.Globalization.TextInfo\n  id: TextInfo\n  parent: System.Globalization\n  children:\n  - System.Globalization.TextInfo.CultureName\n  - System.Globalization.TextInfo.Equals(System.Object)\n  - System.Globalization.TextInfo.GetHashCode\n  - System.Globalization.TextInfo.IsReadOnly\n  - System.Globalization.TextInfo.IsRightToLeft\n  - System.Globalization.TextInfo.ListSeparator\n  - System.Globalization.TextInfo.ToLower(System.Char)\n  - System.Globalization.TextInfo.ToLower(System.String)\n  - System.Globalization.TextInfo.ToString\n  - System.Globalization.TextInfo.ToUpper(System.Char)\n  - System.Globalization.TextInfo.ToUpper(System.String)\n  langs:\n  - csharp\n  - vb\n  name: TextInfo\n  fullName: System.Globalization.TextInfo\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TextInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TextInfo\n    path: src/mscorlib/src/System/Globalization/TextInfo.cs\n    startLine: 29\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Defines text properties and behaviors, such as casing, that are specific to a writing system. </p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public class TextInfo : ICloneable, IDeserializationCallback\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public Class TextInfo\n          Implements ICloneable, IDeserializationCallback\n  seealso:\n  - type: System.Globalization.StringInfo\n    commentId: T:System.Globalization.StringInfo\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: TextInfo\n- uid: System.Globalization.TextInfo.CultureName\n  commentId: P:System.Globalization.TextInfo.CultureName\n  id: CultureName\n  parent: System.Globalization.TextInfo\n  langs:\n  - csharp\n  - vb\n  name: CultureName\n  fullName: System.Globalization.TextInfo.CultureName\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TextInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CultureName\n    path: src/mscorlib/src/System/Globalization/TextInfo.cs\n    startLine: 407\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the name of the culture associated with the current <xref href=\\\"System.Globalization.TextInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public string CultureName { get; }\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public ReadOnly Property CultureName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of a culture. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TextInfo.CultureName\n- uid: System.Globalization.TextInfo.IsReadOnly\n  commentId: P:System.Globalization.TextInfo.IsReadOnly\n  id: IsReadOnly\n  parent: System.Globalization.TextInfo\n  langs:\n  - csharp\n  - vb\n  name: IsReadOnly\n  fullName: System.Globalization.TextInfo.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TextInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsReadOnly\n    path: src/mscorlib/src/System/Globalization/TextInfo.cs\n    startLine: 423\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets a value indicating whether the current <xref href=\\\"System.Globalization.TextInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is read-only.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public bool IsReadOnly { get; }\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public ReadOnly Property IsReadOnly As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current <xref href=\\\"System.Globalization.TextInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is read-only; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TextInfo.IsReadOnly\n- uid: System.Globalization.TextInfo.IsRightToLeft\n  commentId: P:System.Globalization.TextInfo.IsRightToLeft\n  id: IsRightToLeft\n  parent: System.Globalization.TextInfo\n  langs:\n  - csharp\n  - vb\n  name: IsRightToLeft\n  fullName: System.Globalization.TextInfo.IsRightToLeft\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TextInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsRightToLeft\n    path: src/mscorlib/src/System/Globalization/TextInfo.cs\n    startLine: 887\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets a value indicating whether the current <xref href=\\\"System.Globalization.TextInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object represents a writing system where text flows from right to left.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public bool IsRightToLeft { get; }\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public ReadOnly Property IsRightToLeft As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if text flows from right to left; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TextInfo.IsRightToLeft\n- uid: System.Globalization.TextInfo.ListSeparator\n  commentId: P:System.Globalization.TextInfo.ListSeparator\n  id: ListSeparator\n  parent: System.Globalization.TextInfo\n  langs:\n  - csharp\n  - vb\n  name: ListSeparator\n  fullName: System.Globalization.TextInfo.ListSeparator\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TextInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ListSeparator\n    path: src/mscorlib/src/System/Globalization/TextInfo.cs\n    startLine: 489\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets or sets the string that separates items in a list.</p>\\n\"\n  syntax:\n    content: >-\n      public virtual string ListSeparator\n\n      {\n          [SecuritySafeCritical]\n          get;\n          [ComVisible(false)]\n          set;\n      }\n    content.vb: Public Overridable Property ListSeparator As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The string that separates items in a list.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The value in a set operation is null.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>In a set operation, the current <xref href=\\\"System.Globalization.TextInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is read-only.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextInfo.ListSeparator\n- uid: System.Globalization.TextInfo.Equals(System.Object)\n  commentId: M:System.Globalization.TextInfo.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Globalization.TextInfo\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Globalization.TextInfo.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TextInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Globalization/TextInfo.cs\n    startLine: 618\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Determines whether the specified object represents the same writing system as the current <xref href=\\\"System.Globalization.TextInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare with the current <xref href=\\\"System.Globalization.TextInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>obj</em> represents the same writing system as the current <xref href=\\\"System.Globalization.TextInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  seealso:\n  - type: System.Object.Equals(System.Object)\n    commentId: M:System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TextInfo.Equals(Object)\n- uid: System.Globalization.TextInfo.GetHashCode\n  commentId: M:System.Globalization.TextInfo.GetHashCode\n  id: GetHashCode\n  parent: System.Globalization.TextInfo\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Globalization.TextInfo.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TextInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Globalization/TextInfo.cs\n    startLine: 642\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Serves as a hash function for the current <xref href=\\\"System.Globalization.TextInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, suitable for hashing algorithms and data structures, such as a hash table.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A hash code for the current <xref href=\\\"System.Globalization.TextInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  seealso:\n  - type: System.Object.GetHashCode\n    commentId: M:System.Object.GetHashCode\n  - type: System.Collections.Hashtable\n    commentId: T:System.Collections.Hashtable\n  - type: System.Globalization.TextInfo.Equals(System.Object)\n    commentId: M:System.Globalization.TextInfo.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TextInfo.GetHashCode()\n- uid: System.Globalization.TextInfo.ToLower(System.Char)\n  commentId: M:System.Globalization.TextInfo.ToLower(System.Char)\n  id: ToLower(System.Char)\n  parent: System.Globalization.TextInfo\n  langs:\n  - csharp\n  - vb\n  name: ToLower(Char)\n  fullName: System.Globalization.TextInfo.ToLower(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TextInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToLower\n    path: src/mscorlib/src/System/Globalization/TextInfo.cs\n    startLine: 522\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Converts the specified character to lowercase.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public virtual char ToLower(char c)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overridable Function ToLower(c As Char) As Char\n    parameters:\n    - id: c\n      type: System.Char\n      description: \"\\n<p>The character to convert to lowercase. </p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>The specified character converted to lowercase.</p>\\n\"\n  seealso:\n  - type: System.Globalization.TextInfo.ToUpper(System.Char)\n    commentId: M:System.Globalization.TextInfo.ToUpper(System.Char)\n  - type: System.Globalization.TextInfo.ToTitleCase(System.String)\n    commentId: M:System.Globalization.TextInfo.ToTitleCase(System.String)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextInfo.ToLower(Char)\n- uid: System.Globalization.TextInfo.ToLower(System.String)\n  commentId: M:System.Globalization.TextInfo.ToLower(System.String)\n  id: ToLower(System.String)\n  parent: System.Globalization.TextInfo\n  langs:\n  - csharp\n  - vb\n  name: ToLower(String)\n  fullName: System.Globalization.TextInfo.ToLower(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TextInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToLower\n    path: src/mscorlib/src/System/Globalization/TextInfo.cs\n    startLine: 532\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Converts the specified string to lowercase.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public virtual string ToLower(string str)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overridable Function ToLower(str As String) As String\n    parameters:\n    - id: str\n      type: System.String\n      description: \"\\n<p>The string to convert to lowercase. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The specified string converted to lowercase.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>str</em> is null. </p>\\n\"\n  seealso:\n  - type: System.Globalization.TextInfo.ToUpper(System.Char)\n    commentId: M:System.Globalization.TextInfo.ToUpper(System.Char)\n  - type: System.Globalization.TextInfo.ToTitleCase(System.String)\n    commentId: M:System.Globalization.TextInfo.ToTitleCase(System.String)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextInfo.ToLower(String)\n- uid: System.Globalization.TextInfo.ToString\n  commentId: M:System.Globalization.TextInfo.ToString\n  id: ToString\n  parent: System.Globalization.TextInfo\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Globalization.TextInfo.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TextInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Globalization/TextInfo.cs\n    startLine: 658\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns a string that represents the current <xref href=\\\"System.Globalization.TextInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string that represents the current <xref href=\\\"System.Globalization.TextInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Object.ToString\n  seealso:\n  - type: System.Object.ToString\n    commentId: M:System.Object.ToString\n  - type: System.String\n    commentId: T:System.String\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TextInfo.ToString()\n- uid: System.Globalization.TextInfo.ToUpper(System.Char)\n  commentId: M:System.Globalization.TextInfo.ToUpper(System.Char)\n  id: ToUpper(System.Char)\n  parent: System.Globalization.TextInfo\n  langs:\n  - csharp\n  - vb\n  name: ToUpper(Char)\n  fullName: System.Globalization.TextInfo.ToUpper(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TextInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUpper\n    path: src/mscorlib/src/System/Globalization/TextInfo.cs\n    startLine: 560\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Converts the specified character to uppercase.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public virtual char ToUpper(char c)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overridable Function ToUpper(c As Char) As Char\n    parameters:\n    - id: c\n      type: System.Char\n      description: \"\\n<p>The character to convert to uppercase. </p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>The specified character converted to uppercase.</p>\\n\"\n  seealso:\n  - type: System.Globalization.TextInfo.ToLower(System.Char)\n    commentId: M:System.Globalization.TextInfo.ToLower(System.Char)\n  - type: System.Globalization.TextInfo.ToTitleCase(System.String)\n    commentId: M:System.Globalization.TextInfo.ToTitleCase(System.String)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextInfo.ToUpper(Char)\n- uid: System.Globalization.TextInfo.ToUpper(System.String)\n  commentId: M:System.Globalization.TextInfo.ToUpper(System.String)\n  id: ToUpper(System.String)\n  parent: System.Globalization.TextInfo\n  langs:\n  - csharp\n  - vb\n  name: ToUpper(String)\n  fullName: System.Globalization.TextInfo.ToUpper(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TextInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUpper\n    path: src/mscorlib/src/System/Globalization/TextInfo.cs\n    startLine: 571\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Converts the specified string to uppercase.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public virtual string ToUpper(string str)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overridable Function ToUpper(str As String) As String\n    parameters:\n    - id: str\n      type: System.String\n      description: \"\\n<p>The string to convert to uppercase. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The specified string converted to uppercase.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>str</em> is null. </p>\\n\"\n  seealso:\n  - type: System.Globalization.TextInfo.ToLower(System.Char)\n    commentId: M:System.Globalization.TextInfo.ToLower(System.Char)\n  - type: System.Globalization.TextInfo.ToTitleCase(System.String)\n    commentId: M:System.Globalization.TextInfo.ToTitleCase(System.String)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextInfo.ToUpper(String)\nreferences:\n- uid: System.Globalization\n  isExternal: false\n  name: System.Globalization\n  fullName: System.Globalization\n  nameWithType: System.Globalization\n  commentId: N:System.Globalization\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  nameWithType: Char\n  commentId: T:System.Char\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n"}