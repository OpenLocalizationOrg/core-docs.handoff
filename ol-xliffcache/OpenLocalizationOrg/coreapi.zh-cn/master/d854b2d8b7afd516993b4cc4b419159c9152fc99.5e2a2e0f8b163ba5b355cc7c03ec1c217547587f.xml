{"nodes":[{"pos":[1372,1383],"content":"SqlBulkCopy","needQuote":true,"nodes":[{"content":"SqlBulkCopy","pos":[0,11]}]},{"pos":[2886,2912],"content":"SqlBulkCopy(SqlConnection)","needQuote":true,"nodes":[{"content":"SqlBulkCopy(SqlConnection)","pos":[0,26]}]},{"pos":[5068,5130],"content":"SqlBulkCopy(SqlConnection, SqlBulkCopyOptions, SqlTransaction)","needQuote":true,"nodes":[{"content":"SqlBulkCopy(SqlConnection, SqlBulkCopyOptions, SqlTransaction)","pos":[0,62]}]},{"pos":[8209,8228],"content":"SqlBulkCopy(String)","needQuote":true,"nodes":[{"content":"SqlBulkCopy(String)","pos":[0,19]}]},{"pos":[10691,10730],"content":"SqlBulkCopy(String, SqlBulkCopyOptions)","needQuote":true,"nodes":[{"content":"SqlBulkCopy(String, SqlBulkCopyOptions)","pos":[0,39]}]},{"pos":[13681,13690],"content":"BatchSize","needQuote":true,"nodes":[{"content":"BatchSize","pos":[0,9]}]},{"pos":[14957,14972],"content":"BulkCopyTimeout","needQuote":true,"nodes":[{"content":"BulkCopyTimeout","pos":[0,15]}]},{"pos":[16303,16317],"content":"ColumnMappings","needQuote":true,"nodes":[{"content":"ColumnMappings","pos":[0,14]}]},{"content":"\\n&lt;p&gt;A collection of column mappings.","pos":[17334,17371],"source":"\\n<p>A collection of column mappings."},{"content":"By default, it is an empty collection.&lt;/p&gt;\\n","pos":[17372,17416],"source":" By default, it is an empty collection.</p>\\n"},{"pos":[17910,17930],"content":"DestinationTableName","needQuote":true,"nodes":[{"content":"DestinationTableName","pos":[0,20]}]},{"pos":[19209,19224],"content":"EnableStreaming","needQuote":true,"nodes":[{"content":"EnableStreaming","pos":[0,15]}]},{"pos":[20777,20788],"content":"NotifyAfter","needQuote":true,"nodes":[{"content":"NotifyAfter","pos":[0,11]}]},{"pos":[22050,22063],"content":"SqlRowsCopied","needQuote":true,"nodes":[{"content":"SqlRowsCopied","pos":[0,13]}]},{"pos":[23234,23241],"content":"Close()","needQuote":true,"nodes":[{"content":"Close()","pos":[0,7]}]},{"pos":[24246,24267],"content":"IDisposable.Dispose()","needQuote":true,"nodes":[{"content":"IDisposable.Dispose()","pos":[0,21]}]},{"pos":[25558,25592],"content":"WriteToServer(Common.DbDataReader)","needQuote":true,"nodes":[{"content":"WriteToServer(Common.DbDataReader)","pos":[0,34]}]},{"pos":[27326,27365],"content":"WriteToServerAsync(Common.DbDataReader)","needQuote":true,"nodes":[{"content":"WriteToServerAsync(Common.DbDataReader)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;A task representing the asynchronous operation.&lt;/p&gt;\\n","pos":[28928,28986],"source":"\\n<p>A task representing the asynchronous operation.</p>\\n"},{"pos":[29550,29608],"content":"WriteToServerAsync(Common.DbDataReader, CancellationToken)","needQuote":true,"nodes":[{"content":"WriteToServerAsync(Common.DbDataReader, CancellationToken)","pos":[0,58]}]},{"pos":[32049,32070],"content":"System.Data.SqlClient","needQuote":true,"nodes":[{"content":"System.Data.SqlClient","pos":[0,21]}]},{"pos":[32246,32252],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32402,32413],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[32588,32598],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[32693,32701],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[32770,32771],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32798,32799],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32869,32877],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[32946,32947],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32974,32975],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33158,33172],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[33291,33297],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[33364,33365],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33415,33421],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33481,33482],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33565,33571],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[33638,33639],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33689,33695],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33755,33756],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33970,33992],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[34140,34146],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[34213,34214],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34264,34270],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[34331,34332]},{"pos":[34387,34393],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34453,34454],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34551,34557],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[34624,34625],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34675,34681],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[34742,34743]},{"pos":[34798,34804],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34864,34865],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35110,35141],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[35307,35322],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[35398,35399],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35449,35455],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[35516,35517]},{"pos":[35572,35578],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[35638,35639],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35745,35760],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[35836,35837],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35887,35893],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[35954,35955]},{"pos":[36010,36016],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[36076,36077],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36307,36320],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[36421,36432],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[36504,36505],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36532,36533],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36606,36617],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[36689,36690],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36717,36718],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36893,36902],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[36995,37002],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[37070,37071],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37098,37099],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37168,37175],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[37243,37244],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37271,37272],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37447,37464],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[37573,37588],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[37664,37665],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37692,37693],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37770,37785],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[37861,37862],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37889,37890],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38035,38041],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[38209,38222],"content":"SqlConnection","needQuote":true,"nodes":[{"content":"SqlConnection","pos":[0,13]}]},{"pos":[38460,38478],"content":"SqlBulkCopyOptions","needQuote":true,"nodes":[{"content":"SqlBulkCopyOptions","pos":[0,18]}]},{"pos":[38727,38741],"content":"SqlTransaction","needQuote":true,"nodes":[{"content":"SqlTransaction","pos":[0,14]}]},{"pos":[38940,38946],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[39090,39095],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[39295,39329],"content":"SqlBulkCopyColumnMappingCollection","needQuote":true,"nodes":[{"content":"SqlBulkCopyColumnMappingCollection","pos":[0,34]}]},{"pos":[39589,39596],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[39793,39818],"content":"SqlRowsCopiedEventHandler","needQuote":true,"nodes":[{"content":"SqlRowsCopiedEventHandler","pos":[0,25]}]},{"pos":[40075,40084],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[40187,40194],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[40246,40247],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40274,40275],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40349,40356],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[40408,40409],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40436,40437],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40630,40642],"content":"DbDataReader","needQuote":true,"nodes":[{"content":"DbDataReader","pos":[0,12]}]},{"pos":[40817,40835],"content":"System.Data.Common","needQuote":true,"nodes":[{"content":"System.Data.Common","pos":[0,18]}]},{"pos":[41032,41036],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[41199,41221],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[41431,41448],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[41632,41648],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]}],"content":"items:\n- uid: System.Data.SqlClient.SqlBulkCopy\n  commentId: T:System.Data.SqlClient.SqlBulkCopy\n  id: SqlBulkCopy\n  parent: System.Data.SqlClient\n  children:\n  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)\n  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)\n  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)\n  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)\n  - System.Data.SqlClient.SqlBulkCopy.BatchSize\n  - System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout\n  - System.Data.SqlClient.SqlBulkCopy.Close\n  - System.Data.SqlClient.SqlBulkCopy.ColumnMappings\n  - System.Data.SqlClient.SqlBulkCopy.DestinationTableName\n  - System.Data.SqlClient.SqlBulkCopy.EnableStreaming\n  - System.Data.SqlClient.SqlBulkCopy.NotifyAfter\n  - System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied\n  - System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose\n  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)\n  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)\n  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)\n  langs:\n  - csharp\n  - vb\n  name: SqlBulkCopy\n  fullName: System.Data.SqlClient.SqlBulkCopy\n  type: Class\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SqlBulkCopy\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\n    startLine: 135\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Lets you efficiently bulk load a SQL Server table with data from another source.</p>\\n\"\n  syntax:\n    content: 'public sealed class SqlBulkCopy : IDisposable'\n    content.vb: >-\n      Public NotInheritable Class SqlBulkCopy\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: SqlBulkCopy\n- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)\n  commentId: M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)\n  id: '#ctor(System.Data.SqlClient.SqlConnection)'\n  parent: System.Data.SqlClient.SqlBulkCopy\n  langs:\n  - csharp\n  - vb\n  name: SqlBulkCopy(SqlConnection)\n  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(System.Data.SqlClient.SqlConnection)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\n    startLine: 232\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Data.SqlClient.SqlBulkCopy\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified open instance of <xref href=\\\"System.Data.SqlClient.SqlConnection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: public SqlBulkCopy(SqlConnection connection)\n    content.vb: Public Sub New(connection As SqlConnection)\n    parameters:\n    - id: connection\n      type: System.Data.SqlClient.SqlConnection\n      description: \"\\n<p>The already open <xref href=\\\"System.Data.SqlClient.SqlConnection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance that will be used to perform the bulk copy operation. If your connection string does not use <strong>Integrated Security = true</strong>, you can use <xref href=\\\"System.Data.SqlClient.SqlCredential\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection)\n- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)\n  commentId: M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)\n  id: '#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)'\n  parent: System.Data.SqlClient.SqlBulkCopy\n  langs:\n  - csharp\n  - vb\n  name: SqlBulkCopy(SqlConnection, SqlBulkCopyOptions, SqlTransaction)\n  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(System.Data.SqlClient.SqlConnection, System.Data.SqlClient.SqlBulkCopyOptions, System.Data.SqlClient.SqlTransaction)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\n    startLine: 242\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Data.SqlClient.SqlBulkCopy\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the supplied existing open instance of <xref href=\\\"System.Data.SqlClient.SqlConnection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The <xref href=\\\"System.Data.SqlClient.SqlBulkCopy\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance behaves according to options supplied in the <em>copyOptions</em> parameter. If a non-null <xref href=\\\"System.Data.SqlClient.SqlTransaction\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is supplied, the copy operations will be performed within that transaction.</p>\\n\"\n  syntax:\n    content: public SqlBulkCopy(SqlConnection connection, SqlBulkCopyOptions copyOptions, SqlTransaction externalTransaction)\n    content.vb: Public Sub New(connection As SqlConnection, copyOptions As SqlBulkCopyOptions, externalTransaction As SqlTransaction)\n    parameters:\n    - id: connection\n      type: System.Data.SqlClient.SqlConnection\n      description: \"\\n<p>The already open <xref href=\\\"System.Data.SqlClient.SqlConnection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance that will be used to perform the bulk copy. If your connection string does not use <strong>Integrated Security = true</strong>, you can use <xref href=\\\"System.Data.SqlClient.SqlCredential\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.</p>\\n\"\n    - id: copyOptions\n      type: System.Data.SqlClient.SqlBulkCopyOptions\n      description: \"\\n<p>A combination of values from the <xref href=\\\"System.Data.SqlClient.SqlBulkCopyOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  enumeration that determines which data source rows are copied to the destination table.</p>\\n\"\n    - id: externalTransaction\n      type: System.Data.SqlClient.SqlTransaction\n      description: \"\\n<p>An existing <xref href=\\\"System.Data.SqlClient.SqlTransaction\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance under which the bulk copy will occur.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection, SqlBulkCopyOptions, SqlTransaction)\n- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)\n  commentId: M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Data.SqlClient.SqlBulkCopy\n  langs:\n  - csharp\n  - vb\n  name: SqlBulkCopy(String)\n  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\n    startLine: 257\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Initializes and opens a new instance of <xref href=\\\"System.Data.SqlClient.SqlConnection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> based on the supplied <em>connectionString</em>. The constructor uses the <xref href=\\\"System.Data.SqlClient.SqlConnection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to initialize a new instance of the <xref href=\\\"System.Data.SqlClient.SqlBulkCopy\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public SqlBulkCopy(string connectionString)\n    content.vb: Public Sub New(connectionString As String)\n    parameters:\n    - id: connectionString\n      type: System.String\n      description: \"\\n<p>The string defining the connection that will be opened for use by the <xref href=\\\"System.Data.SqlClient.SqlBulkCopy\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance. If your connection string does not use <strong>Integrated Security = true</strong>, you can use <xref href=\\\"System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Data.SqlClient.SqlCredential\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBulkCopy.SqlBulkCopy(String)\n- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)\n  commentId: M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)\n  id: '#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)'\n  parent: System.Data.SqlClient.SqlBulkCopy\n  langs:\n  - csharp\n  - vb\n  name: SqlBulkCopy(String, SqlBulkCopyOptions)\n  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(System.String, System.Data.SqlClient.SqlBulkCopyOptions)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\n    startLine: 268\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Initializes and opens a new instance of <xref href=\\\"System.Data.SqlClient.SqlConnection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> based on the supplied <em>connectionString</em>. The constructor uses that <xref href=\\\"System.Data.SqlClient.SqlConnection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to initialize a new instance of the <xref href=\\\"System.Data.SqlClient.SqlBulkCopy\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. The <xref href=\\\"System.Data.SqlClient.SqlConnection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance behaves according to options supplied in the <em>copyOptions</em> parameter.</p>\\n\"\n  syntax:\n    content: public SqlBulkCopy(string connectionString, SqlBulkCopyOptions copyOptions)\n    content.vb: Public Sub New(connectionString As String, copyOptions As SqlBulkCopyOptions)\n    parameters:\n    - id: connectionString\n      type: System.String\n      description: \"\\n<p>The string defining the connection that will be opened for use by the <xref href=\\\"System.Data.SqlClient.SqlBulkCopy\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance. If your connection string does not use <strong>Integrated Security = true</strong>, you can use <xref href=\\\"System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Data.SqlClient.SqlCredential\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.</p>\\n\"\n    - id: copyOptions\n      type: System.Data.SqlClient.SqlBulkCopyOptions\n      description: \"\\n<p>A combination of values from the <xref href=\\\"System.Data.SqlClient.SqlBulkCopyOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  enumeration that determines which data source rows are copied to the destination table.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBulkCopy.SqlBulkCopy(String, SqlBulkCopyOptions)\n- uid: System.Data.SqlClient.SqlBulkCopy.BatchSize\n  commentId: P:System.Data.SqlClient.SqlBulkCopy.BatchSize\n  id: BatchSize\n  parent: System.Data.SqlClient.SqlBulkCopy\n  langs:\n  - csharp\n  - vb\n  name: BatchSize\n  fullName: System.Data.SqlClient.SqlBulkCopy.BatchSize\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BatchSize\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\n    startLine: 274\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Number of rows in each batch. At the end of each batch, the rows in the batch are sent to the server.</p>\\n\"\n  syntax:\n    content: public int BatchSize { get; set; }\n    content.vb: Public Property BatchSize As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The integer value of the <xref href=\\\"System.Data.SqlClient.SqlBulkCopy.BatchSize\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property, or zero if no value has been set.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBulkCopy.BatchSize\n- uid: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout\n  commentId: P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout\n  id: BulkCopyTimeout\n  parent: System.Data.SqlClient.SqlBulkCopy\n  langs:\n  - csharp\n  - vb\n  name: BulkCopyTimeout\n  fullName: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BulkCopyTimeout\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\n    startLine: 293\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Number of seconds for the operation to complete before it times out.</p>\\n\"\n  syntax:\n    content: public int BulkCopyTimeout { get; set; }\n    content.vb: Public Property BulkCopyTimeout As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The integer value of the <xref href=\\\"System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property. The default is 30 seconds. A value of 0 indicates no limit; the bulk copy will wait indefinitely.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBulkCopy.BulkCopyTimeout\n- uid: System.Data.SqlClient.SqlBulkCopy.ColumnMappings\n  commentId: P:System.Data.SqlClient.SqlBulkCopy.ColumnMappings\n  id: ColumnMappings\n  parent: System.Data.SqlClient.SqlBulkCopy\n  langs:\n  - csharp\n  - vb\n  name: ColumnMappings\n  fullName: System.Data.SqlClient.SqlBulkCopy.ColumnMappings\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ColumnMappings\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\n    startLine: 321\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Returns a collection of <xref href=\\\"System.Data.SqlClient.SqlBulkCopyColumnMapping\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> items. Column mappings define the relationships between columns in the data source and columns in the destination.</p>\\n\"\n  syntax:\n    content: public SqlBulkCopyColumnMappingCollection ColumnMappings { get; }\n    content.vb: Public ReadOnly Property ColumnMappings As SqlBulkCopyColumnMappingCollection\n    parameters: []\n    return:\n      type: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection\n      description: \"\\n<p>A collection of column mappings. By default, it is an empty collection.</p>\\n\"\n  seealso:\n  - type: System.Data.SqlClient.SqlBulkCopyColumnMapping\n    commentId: T:System.Data.SqlClient.SqlBulkCopyColumnMapping\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SqlBulkCopy.ColumnMappings\n- uid: System.Data.SqlClient.SqlBulkCopy.DestinationTableName\n  commentId: P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName\n  id: DestinationTableName\n  parent: System.Data.SqlClient.SqlBulkCopy\n  langs:\n  - csharp\n  - vb\n  name: DestinationTableName\n  fullName: System.Data.SqlClient.SqlBulkCopy.DestinationTableName\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DestinationTableName\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\n    startLine: 329\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Name of the destination table on the server. </p>\\n\"\n  syntax:\n    content: public string DestinationTableName { get; set; }\n    content.vb: Public Property DestinationTableName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The string value of the <xref href=\\\"System.Data.SqlClient.SqlBulkCopy.DestinationTableName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property, or null if none as been supplied.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBulkCopy.DestinationTableName\n- uid: System.Data.SqlClient.SqlBulkCopy.EnableStreaming\n  commentId: P:System.Data.SqlClient.SqlBulkCopy.EnableStreaming\n  id: EnableStreaming\n  parent: System.Data.SqlClient.SqlBulkCopy\n  langs:\n  - csharp\n  - vb\n  name: EnableStreaming\n  fullName: System.Data.SqlClient.SqlBulkCopy.EnableStreaming\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EnableStreaming\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\n    startLine: 309\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Enables or disables a <xref href=\\\"System.Data.SqlClient.SqlBulkCopy\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to stream data from an <xref href=\\\"System.Data.IDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object</p>\\n\"\n  syntax:\n    content: public bool EnableStreaming { get; set; }\n    content.vb: Public Property EnableStreaming As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if a <xref href=\\\"System.Data.SqlClient.SqlBulkCopy\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object can stream data from an <xref href=\\\"System.Data.IDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object; otherwise, false. The default is <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBulkCopy.EnableStreaming\n- uid: System.Data.SqlClient.SqlBulkCopy.NotifyAfter\n  commentId: P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter\n  id: NotifyAfter\n  parent: System.Data.SqlClient.SqlBulkCopy\n  langs:\n  - csharp\n  - vb\n  name: NotifyAfter\n  fullName: System.Data.SqlClient.SqlBulkCopy.NotifyAfter\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NotifyAfter\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\n    startLine: 349\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Defines the number of rows to be processed before generating a notification event.</p>\\n\"\n  syntax:\n    content: public int NotifyAfter { get; set; }\n    content.vb: Public Property NotifyAfter As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The integer value of the <xref href=\\\"System.Data.SqlClient.SqlBulkCopy.NotifyAfter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property, or zero if the property has not been set.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBulkCopy.NotifyAfter\n- uid: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied\n  commentId: E:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied\n  id: SqlRowsCopied\n  parent: System.Data.SqlClient.SqlBulkCopy\n  langs:\n  - csharp\n  - vb\n  name: SqlRowsCopied\n  fullName: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied\n  type: Event\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SqlRowsCopied\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\n    startLine: 369\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Occurs every time that the number of rows specified by the <xref href=\\\"System.Data.SqlClient.SqlBulkCopy.NotifyAfter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property have been processed.</p>\\n\"\n  syntax:\n    content: public event SqlRowsCopiedEventHandler SqlRowsCopied\n    content.vb: Public Event SqlRowsCopied As SqlRowsCopiedEventHandler\n    return:\n      type: System.Data.SqlClient.SqlRowsCopiedEventHandler\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBulkCopy.SqlRowsCopied\n- uid: System.Data.SqlClient.SqlBulkCopy.Close\n  commentId: M:System.Data.SqlClient.SqlBulkCopy.Close\n  id: Close\n  parent: System.Data.SqlClient.SqlBulkCopy\n  langs:\n  - csharp\n  - vb\n  name: Close()\n  fullName: System.Data.SqlClient.SqlBulkCopy.Close()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Close\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\n    startLine: 779\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Closes the <xref href=\\\"System.Data.SqlClient.SqlBulkCopy\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public void Close()\n    content.vb: Public Sub Close\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBulkCopy.Close()\n- uid: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose\n  commentId: M:System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose\n  id: System#IDisposable#Dispose\n  isEii: true\n  parent: System.Data.SqlClient.SqlBulkCopy\n  langs:\n  - csharp\n  - vb\n  name: IDisposable.Dispose()\n  fullName: System.Data.SqlClient.SqlBulkCopy.System.IDisposable.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.IDisposable.Dispose\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\n    startLine: 399\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Releases all resources used by the current instance of the <xref href=\\\"System.Data.SqlClient.SqlBulkCopy\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: void IDisposable.Dispose()\n    content.vb: Sub System.IDisposable.Dispose Implements IDisposable.Dispose\n  implements:\n  - System.IDisposable.Dispose\n  name.vb: System.IDisposable.Dispose()\n  nameWithType: SqlBulkCopy.IDisposable.Dispose()\n  nameWithType.vb: SqlBulkCopy.System.IDisposable.Dispose()\n- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)\n  commentId: M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)\n  id: WriteToServer(System.Data.Common.DbDataReader)\n  parent: System.Data.SqlClient.SqlBulkCopy\n  langs:\n  - csharp\n  - vb\n  name: WriteToServer(Common.DbDataReader)\n  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteToServer\n    path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs\n    startLine: 233\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Copies all rows from the supplied <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array to a destination table specified by the <xref href=\\\"System.Data.SqlClient.SqlBulkCopy.DestinationTableName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the <xref href=\\\"System.Data.SqlClient.SqlBulkCopy\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public void WriteToServer(Common.DbDataReader reader)\n    content.vb: Public Sub WriteToServer(reader As Common.DbDataReader)\n    parameters:\n    - id: reader\n      type: System.Data.Common.DbDataReader\n      description: \"\\n<p>A <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose rows will be copied to the destination table.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBulkCopy.WriteToServer(Common.DbDataReader)\n- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)\n  commentId: M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)\n  id: WriteToServerAsync(System.Data.Common.DbDataReader)\n  parent: System.Data.SqlClient.SqlBulkCopy\n  langs:\n  - csharp\n  - vb\n  name: WriteToServerAsync(Common.DbDataReader)\n  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteToServerAsync\n    path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs\n    startLine: 234\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>The asynchronous version of <xref href=\\\"System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, which copies all rows from the supplied <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array to a destination table specified by the <xref href=\\\"System.Data.SqlClient.SqlBulkCopy.DestinationTableName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the <xref href=\\\"System.Data.SqlClient.SqlBulkCopy\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public Task WriteToServerAsync(Common.DbDataReader reader)\n    content.vb: Public Function WriteToServerAsync(reader As Common.DbDataReader) As Task\n    parameters:\n    - id: reader\n      type: System.Data.Common.DbDataReader\n      description: \"\\n<p>A <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose rows will be copied to the destination table.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task representing the asynchronous operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBulkCopy.WriteToServerAsync(Common.DbDataReader)\n- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)\n  commentId: M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)\n  id: WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)\n  parent: System.Data.SqlClient.SqlBulkCopy\n  langs:\n  - csharp\n  - vb\n  name: WriteToServerAsync(Common.DbDataReader, CancellationToken)\n  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteToServerAsync\n    path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs\n    startLine: 235\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>The asynchronous version of <xref href=\\\"System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, which copies all rows from the supplied <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array to a destination table specified by the <xref href=\\\"System.Data.SqlClient.SqlBulkCopy.DestinationTableName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the <xref href=\\\"System.Data.SqlClient.SqlBulkCopy\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public Task WriteToServerAsync(Common.DbDataReader reader, CancellationToken cancellationToken)\n    content.vb: Public Function WriteToServerAsync(reader As Common.DbDataReader, cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: reader\n      type: System.Data.Common.DbDataReader\n      description: \"\\n<p>A <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose rows will be copied to the destination table.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation instruction. A <xref href=\\\"System.Threading.CancellationToken.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value in this parameter makes this method equivalent to <xref href=\\\"System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBulkCopy.WriteToServerAsync(Common.DbDataReader, CancellationToken)\nreferences:\n- uid: System.Data.SqlClient\n  isExternal: false\n  name: System.Data.SqlClient\n  fullName: System.Data.SqlClient\n  nameWithType: System.Data.SqlClient\n  commentId: N:System.Data.SqlClient\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Data.SqlClient.SqlConnection\n  parent: System.Data.SqlClient\n  isExternal: false\n  name: SqlConnection\n  fullName: System.Data.SqlClient.SqlConnection\n  nameWithType: SqlConnection\n  commentId: T:System.Data.SqlClient.SqlConnection\n- uid: System.Data.SqlClient.SqlBulkCopyOptions\n  parent: System.Data.SqlClient\n  isExternal: false\n  name: SqlBulkCopyOptions\n  fullName: System.Data.SqlClient.SqlBulkCopyOptions\n  nameWithType: SqlBulkCopyOptions\n  commentId: T:System.Data.SqlClient.SqlBulkCopyOptions\n- uid: System.Data.SqlClient.SqlTransaction\n  parent: System.Data.SqlClient\n  isExternal: false\n  name: SqlTransaction\n  fullName: System.Data.SqlClient.SqlTransaction\n  nameWithType: SqlTransaction\n  commentId: T:System.Data.SqlClient.SqlTransaction\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection\n  parent: System.Data.SqlClient\n  isExternal: false\n  name: SqlBulkCopyColumnMappingCollection\n  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection\n  nameWithType: SqlBulkCopyColumnMappingCollection\n  commentId: T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Data.SqlClient.SqlRowsCopiedEventHandler\n  parent: System.Data.SqlClient\n  isExternal: false\n  name: SqlRowsCopiedEventHandler\n  fullName: System.Data.SqlClient.SqlRowsCopiedEventHandler\n  nameWithType: SqlRowsCopiedEventHandler\n  commentId: T:System.Data.SqlClient.SqlRowsCopiedEventHandler\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDisposable.Dispose()\n  commentId: M:System.IDisposable.Dispose\n- uid: System.Data.Common.DbDataReader\n  parent: System.Data.Common\n  isExternal: false\n  name: DbDataReader\n  fullName: System.Data.Common.DbDataReader\n  nameWithType: DbDataReader\n  commentId: T:System.Data.Common.DbDataReader\n- uid: System.Data.Common\n  isExternal: false\n  name: System.Data.Common\n  fullName: System.Data.Common\n  nameWithType: System.Data.Common\n  commentId: N:System.Data.Common\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  fullName: System.Threading.Tasks.Task\n  nameWithType: Task\n  commentId: T:System.Threading.Tasks.Task\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  fullName: System.Threading.CancellationToken\n  nameWithType: CancellationToken\n  commentId: T:System.Threading.CancellationToken\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n"}