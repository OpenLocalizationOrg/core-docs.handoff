{"nodes":[{"pos":[649,666],"content":"RuntimeTypeHandle","needQuote":true,"nodes":[{"content":"RuntimeTypeHandle","pos":[0,17]}]},{"pos":[2159,2173],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;An object to compare to the current instance.&lt;/p&gt;\\n","pos":[3099,3155],"source":"\\n<p>An object to compare to the current instance.</p>\\n"},{"pos":[3881,3906],"content":"Equals(RuntimeTypeHandle)","needQuote":true,"nodes":[{"content":"Equals(RuntimeTypeHandle)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the value of &lt;em&gt;handle&lt;/em&gt; is equal to the value of this instance; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[5160,5301],"source":"\\n<p>\\n<strong>true</strong> if the value of <em>handle</em> is equal to the value of this instance; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[5605,5618],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[6227,6272],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[6754,6789],"content":"Equality(Object, RuntimeTypeHandle)","needQuote":true,"nodes":[{"content":"Equality(Object, RuntimeTypeHandle)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;An object to compare to &lt;em&gt;right&lt;/em&gt;.&lt;/p&gt;\\n","pos":[7613,7663],"source":"\\n<p>An object to compare to <em>right</em>.</p>\\n"},{"pos":[8609,8644],"content":"Equality(RuntimeTypeHandle, Object)","needQuote":true,"nodes":[{"content":"Equality(RuntimeTypeHandle, Object)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;An object to compare to &lt;em&gt;left&lt;/em&gt;.&lt;/p&gt;\\n","pos":[9678,9727],"source":"\\n<p>An object to compare to <em>left</em>.</p>\\n"},{"pos":[10458,10495],"content":"Inequality(Object, RuntimeTypeHandle)","needQuote":true,"nodes":[{"content":"Inequality(Object, RuntimeTypeHandle)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;An object to compare to &lt;em&gt;right&lt;/em&gt;.&lt;/p&gt;\\n","pos":[11328,11378],"source":"\\n<p>An object to compare to <em>right</em>.</p>\\n"},{"pos":[12326,12363],"content":"Inequality(RuntimeTypeHandle, Object)","needQuote":true,"nodes":[{"content":"Inequality(RuntimeTypeHandle, Object)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;An object to compare to &lt;em&gt;left&lt;/em&gt;.&lt;/p&gt;\\n","pos":[13406,13455],"source":"\\n<p>An object to compare to <em>left</em>.</p>\\n"},{"pos":[13946,13952],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[14105,14115],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[14216,14224],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[14275,14276],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14303,14304],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14377,14385],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[14436,14437],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14464,14465],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14668,14690],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[14838,14844],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14911,14912],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14962,14968],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15029,15030]},{"pos":[15085,15091],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15151,15152],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15249,15255],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15322,15323],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15373,15379],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15440,15441]},{"pos":[15496,15502],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15562,15563],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15808,15839],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[16005,16020],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[16096,16097],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16147,16153],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16214,16215]},{"pos":[16270,16276],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16336,16337],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16443,16458],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[16534,16535],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16585,16591],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16652,16653]},{"pos":[16708,16714],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16774,16775],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17001,17010],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[17103,17110],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[17178,17179],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17206,17207],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17276,17283],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[17351,17352],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17379,17380],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17536,17545],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[17699,17705],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17884,17898],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[18023,18029],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[18078,18079],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18129,18135],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18195,18196],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18282,18288],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[18337,18338],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18388,18394],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18454,18455],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18634,18641],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[18800,18817],"content":"RuntimeTypeHandle","needQuote":true,"nodes":[{"content":"RuntimeTypeHandle","pos":[0,17]}]},{"pos":[19020,19033],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[19140,19151],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[19205,19206],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19233,19234],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19310,19321],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[19375,19376],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19403,19404],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19570,19575],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]}],"content":"items:\n- uid: System.RuntimeTypeHandle\n  commentId: T:System.RuntimeTypeHandle\n  id: RuntimeTypeHandle\n  parent: System\n  children:\n  - System.RuntimeTypeHandle.Equals(System.Object)\n  - System.RuntimeTypeHandle.Equals(System.RuntimeTypeHandle)\n  - System.RuntimeTypeHandle.GetHashCode\n  - System.RuntimeTypeHandle.op_Equality(System.Object,System.RuntimeTypeHandle)\n  - System.RuntimeTypeHandle.op_Equality(System.RuntimeTypeHandle,System.Object)\n  - System.RuntimeTypeHandle.op_Inequality(System.Object,System.RuntimeTypeHandle)\n  - System.RuntimeTypeHandle.op_Inequality(System.RuntimeTypeHandle,System.Object)\n  langs:\n  - csharp\n  - vb\n  name: RuntimeTypeHandle\n  fullName: System.RuntimeTypeHandle\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/RuntimeHandles.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RuntimeTypeHandle\n    path: src/mscorlib/src/System/RuntimeHandles.cs\n    startLine: 26\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents a type using an internal metadata token.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public struct RuntimeTypeHandle : ISerializable\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public Structure RuntimeTypeHandle\n          Implements ISerializable\n  inheritedMembers:\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: RuntimeTypeHandle\n- uid: System.RuntimeTypeHandle.Equals(System.Object)\n  commentId: M:System.RuntimeTypeHandle.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.RuntimeTypeHandle\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.RuntimeTypeHandle.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/RuntimeHandles.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/RuntimeHandles.cs\n    startLine: 111\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the specified object is equal to the current <xref href=\\\"System.RuntimeTypeHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public override bool Equals(object obj)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>An object to compare to the current instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>obj</em> is a <xref href=\\\"System.RuntimeTypeHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure and is equal to the value of this instance; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: RuntimeTypeHandle.Equals(Object)\n- uid: System.RuntimeTypeHandle.Equals(System.RuntimeTypeHandle)\n  commentId: M:System.RuntimeTypeHandle.Equals(System.RuntimeTypeHandle)\n  id: Equals(System.RuntimeTypeHandle)\n  parent: System.RuntimeTypeHandle\n  langs:\n  - csharp\n  - vb\n  name: Equals(RuntimeTypeHandle)\n  fullName: System.RuntimeTypeHandle.Equals(System.RuntimeTypeHandle)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/RuntimeHandles.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/RuntimeHandles.cs\n    startLine: 121\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether the specified <xref href=\\\"System.RuntimeTypeHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure is equal to the current <xref href=\\\"System.RuntimeTypeHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public bool Equals(RuntimeTypeHandle handle)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Function Equals(handle As RuntimeTypeHandle) As Boolean\n    parameters:\n    - id: handle\n      type: System.RuntimeTypeHandle\n      description: \"\\n<p>The <xref href=\\\"System.RuntimeTypeHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to compare to the current instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the value of <em>handle</em> is equal to the value of this instance; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RuntimeTypeHandle.Equals(RuntimeTypeHandle)\n- uid: System.RuntimeTypeHandle.GetHashCode\n  commentId: M:System.RuntimeTypeHandle.GetHashCode\n  id: GetHashCode\n  parent: System.RuntimeTypeHandle\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.RuntimeTypeHandle.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/RuntimeHandles.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/RuntimeHandles.cs\n    startLine: 106\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the hash code for the current instance.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: RuntimeTypeHandle.GetHashCode()\n- uid: System.RuntimeTypeHandle.op_Equality(System.Object,System.RuntimeTypeHandle)\n  commentId: M:System.RuntimeTypeHandle.op_Equality(System.Object,System.RuntimeTypeHandle)\n  id: op_Equality(System.Object,System.RuntimeTypeHandle)\n  parent: System.RuntimeTypeHandle\n  langs:\n  - csharp\n  - vb\n  name: Equality(Object, RuntimeTypeHandle)\n  fullName: System.RuntimeTypeHandle.Equality(System.Object, System.RuntimeTypeHandle)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/RuntimeHandles.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Equality\n    path: src/mscorlib/src/System/RuntimeHandles.cs\n    startLine: 88\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether an object and a <xref href=\\\"System.RuntimeTypeHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure are equal.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(object left, RuntimeTypeHandle right)\n    content.vb: Public Shared Operator =(left As Object, right As RuntimeTypeHandle) As Boolean\n    parameters:\n    - id: left\n      type: System.Object\n      description: \"\\n<p>An object to compare to <em>right</em>.</p>\\n\"\n    - id: right\n      type: System.RuntimeTypeHandle\n      description: \"\\n<p>A <xref href=\\\"System.RuntimeTypeHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to compare to <em>left</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is a <xref href=\\\"System.RuntimeTypeHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure and is equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: RuntimeTypeHandle.Equality(Object, RuntimeTypeHandle)\n- uid: System.RuntimeTypeHandle.op_Equality(System.RuntimeTypeHandle,System.Object)\n  commentId: M:System.RuntimeTypeHandle.op_Equality(System.RuntimeTypeHandle,System.Object)\n  id: op_Equality(System.RuntimeTypeHandle,System.Object)\n  parent: System.RuntimeTypeHandle\n  langs:\n  - csharp\n  - vb\n  name: Equality(RuntimeTypeHandle, Object)\n  fullName: System.RuntimeTypeHandle.Equality(System.RuntimeTypeHandle, System.Object)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/RuntimeHandles.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Equality\n    path: src/mscorlib/src/System/RuntimeHandles.cs\n    startLine: 86\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether a <xref href=\\\"System.RuntimeTypeHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure is equal to an object.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(RuntimeTypeHandle left, object right)\n    content.vb: Public Shared Operator =(left As RuntimeTypeHandle, right As Object) As Boolean\n    parameters:\n    - id: left\n      type: System.RuntimeTypeHandle\n      description: \"\\n<p>A <xref href=\\\"System.RuntimeTypeHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to compare to <em>right</em>.</p>\\n\"\n    - id: right\n      type: System.Object\n      description: \"\\n<p>An object to compare to <em>left</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>right</em> is a <xref href=\\\"System.RuntimeTypeHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and is equal to <em>left</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: RuntimeTypeHandle.Equality(RuntimeTypeHandle, Object)\n- uid: System.RuntimeTypeHandle.op_Inequality(System.Object,System.RuntimeTypeHandle)\n  commentId: M:System.RuntimeTypeHandle.op_Inequality(System.Object,System.RuntimeTypeHandle)\n  id: op_Inequality(System.Object,System.RuntimeTypeHandle)\n  parent: System.RuntimeTypeHandle\n  langs:\n  - csharp\n  - vb\n  name: Inequality(Object, RuntimeTypeHandle)\n  fullName: System.RuntimeTypeHandle.Inequality(System.Object, System.RuntimeTypeHandle)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/RuntimeHandles.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Inequality\n    path: src/mscorlib/src/System/RuntimeHandles.cs\n    startLine: 92\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether an object and a <xref href=\\\"System.RuntimeTypeHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure are not equal.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(object left, RuntimeTypeHandle right)\n    content.vb: Public Shared Operator <>(left As Object, right As RuntimeTypeHandle) As Boolean\n    parameters:\n    - id: left\n      type: System.Object\n      description: \"\\n<p>An object to compare to <em>right</em>.</p>\\n\"\n    - id: right\n      type: System.RuntimeTypeHandle\n      description: \"\\n<p>A <xref href=\\\"System.RuntimeTypeHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to compare to <em>left</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is a <xref href=\\\"System.RuntimeTypeHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and is not equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: RuntimeTypeHandle.Inequality(Object, RuntimeTypeHandle)\n- uid: System.RuntimeTypeHandle.op_Inequality(System.RuntimeTypeHandle,System.Object)\n  commentId: M:System.RuntimeTypeHandle.op_Inequality(System.RuntimeTypeHandle,System.Object)\n  id: op_Inequality(System.RuntimeTypeHandle,System.Object)\n  parent: System.RuntimeTypeHandle\n  langs:\n  - csharp\n  - vb\n  name: Inequality(RuntimeTypeHandle, Object)\n  fullName: System.RuntimeTypeHandle.Inequality(System.RuntimeTypeHandle, System.Object)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/RuntimeHandles.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Inequality\n    path: src/mscorlib/src/System/RuntimeHandles.cs\n    startLine: 90\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether a <xref href=\\\"System.RuntimeTypeHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure is not equal to an object.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(RuntimeTypeHandle left, object right)\n    content.vb: Public Shared Operator <>(left As RuntimeTypeHandle, right As Object) As Boolean\n    parameters:\n    - id: left\n      type: System.RuntimeTypeHandle\n      description: \"\\n<p>A <xref href=\\\"System.RuntimeTypeHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to compare to <em>right</em>.</p>\\n\"\n    - id: right\n      type: System.Object\n      description: \"\\n<p>An object to compare to <em>left</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>right</em> is a <xref href=\\\"System.RuntimeTypeHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure and is not equal to <em>left</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: RuntimeTypeHandle.Inequality(RuntimeTypeHandle, Object)\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.RuntimeTypeHandle\n  parent: System\n  isExternal: false\n  name: RuntimeTypeHandle\n  fullName: System.RuntimeTypeHandle\n  nameWithType: RuntimeTypeHandle\n  commentId: T:System.RuntimeTypeHandle\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n"}