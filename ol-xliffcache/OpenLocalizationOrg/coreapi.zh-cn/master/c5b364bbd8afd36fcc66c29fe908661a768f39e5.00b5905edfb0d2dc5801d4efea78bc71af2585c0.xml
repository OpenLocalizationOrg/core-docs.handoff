{"nodes":[{"pos":[445,462],"content":"LocalVariableInfo","needQuote":true,"nodes":[{"content":"LocalVariableInfo","pos":[0,17]}]},{"pos":[1877,1896],"content":"LocalVariableInfo()","needQuote":true,"nodes":[{"content":"LocalVariableInfo()","pos":[0,19]}]},{"pos":[2872,2880],"content":"IsPinned","needQuote":true,"nodes":[{"content":"IsPinned","pos":[0,8]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the object referred to by the variable is pinned in memory; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[3684,3816],"source":"\\n<p>\\n<strong>true</strong> if the object referred to by the variable is pinned in memory; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[4182,4192],"content":"LocalIndex","needQuote":true,"nodes":[{"content":"LocalIndex","pos":[0,10]}]},{"content":"\\n&lt;p&gt;An integer value that represents the order of declaration of the local variable within the method body.&lt;/p&gt;\\n","pos":[4885,4999],"source":"\\n<p>An integer value that represents the order of declaration of the local variable within the method body.</p>\\n"},{"pos":[5364,5373],"content":"LocalType","needQuote":true,"nodes":[{"content":"LocalType","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The type of the local variable.&lt;/p&gt;\\n","pos":[6035,6077],"source":"\\n<p>The type of the local variable.</p>\\n"},{"pos":[6438,6448],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;A string that displays information about the local variable, including the type name, index, and pinned status.&lt;/p&gt;\\n","pos":[7105,7227],"source":"\\n<p>A string that displays information about the local variable, including the type name, index, and pinned status.</p>\\n"},{"pos":[7461,7478],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[7642,7648],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7821,7835],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[7954,7960],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8027,8028],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8078,8084],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8144,8145],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8228,8234],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8301,8302],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8352,8358],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8418,8419],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8633,8655],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[8803,8809],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8876,8877],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8927,8933],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8994,8995]},{"pos":[9050,9056],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9116,9117],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9214,9220],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9287,9288],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9338,9344],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9405,9406]},{"pos":[9461,9467],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9527,9528],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9773,9804],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[9970,9985],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10061,10062],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10112,10118],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10179,10180]},{"pos":[10235,10241],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10301,10302],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10408,10423],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10499,10500],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10550,10556],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10617,10618]},{"pos":[10673,10679],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10739,10740],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10970,10983],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[11084,11095],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[11167,11168],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11195,11196],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11269,11280],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[11352,11353],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11380,11381],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11556,11565],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[11658,11665],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11733,11734],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11761,11762],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11831,11838],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11906,11907],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11934,11935],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12110,12127],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[12236,12251],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12327,12328],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12355,12356],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12433,12448],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12524,12525],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12552,12553],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12698,12704],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[12836,12843],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[12990,12995],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[13135,13139],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[13293,13303],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[13398,13406],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[13475,13476],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13503,13504],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13574,13582],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[13651,13652],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13679,13680],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13835,13841],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]}],"content":"items:\n- uid: System.Reflection.LocalVariableInfo\n  commentId: T:System.Reflection.LocalVariableInfo\n  id: LocalVariableInfo\n  parent: System.Reflection\n  children:\n  - System.Reflection.LocalVariableInfo.#ctor\n  - System.Reflection.LocalVariableInfo.IsPinned\n  - System.Reflection.LocalVariableInfo.LocalIndex\n  - System.Reflection.LocalVariableInfo.LocalType\n  - System.Reflection.LocalVariableInfo.ToString\n  langs:\n  - csharp\n  - vb\n  name: LocalVariableInfo\n  fullName: System.Reflection.LocalVariableInfo\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBody.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LocalVariableInfo\n    path: src/mscorlib/src/System/Reflection/MethodBody.cs\n    startLine: 136\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Discovers the attributes of a local variable and provides access to local variable metadata.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public class LocalVariableInfo\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Class LocalVariableInfo\n  seealso:\n  - type: System.Reflection.MethodBody.LocalVariables\n    commentId: P:System.Reflection.MethodBody.LocalVariables\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: LocalVariableInfo\n- uid: System.Reflection.LocalVariableInfo.#ctor\n  commentId: M:System.Reflection.LocalVariableInfo.#ctor\n  id: '#ctor'\n  parent: System.Reflection.LocalVariableInfo\n  langs:\n  - csharp\n  - vb\n  name: LocalVariableInfo()\n  fullName: System.Reflection.LocalVariableInfo.LocalVariableInfo()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBody.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Reflection/MethodBody.cs\n    startLine: 146\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Reflection.LocalVariableInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected LocalVariableInfo()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: LocalVariableInfo.LocalVariableInfo()\n- uid: System.Reflection.LocalVariableInfo.IsPinned\n  commentId: P:System.Reflection.LocalVariableInfo.IsPinned\n  id: IsPinned\n  parent: System.Reflection.LocalVariableInfo\n  langs:\n  - csharp\n  - vb\n  name: IsPinned\n  fullName: System.Reflection.LocalVariableInfo.IsPinned\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBody.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsPinned\n    path: src/mscorlib/src/System/Reflection/MethodBody.cs\n    startLine: 163\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that indicates whether the object referred to by the local variable is pinned in memory.</p>\\n\"\n  syntax:\n    content: public virtual bool IsPinned { get; }\n    content.vb: Public Overridable ReadOnly Property IsPinned As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the object referred to by the variable is pinned in memory; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: LocalVariableInfo.IsPinned\n- uid: System.Reflection.LocalVariableInfo.LocalIndex\n  commentId: P:System.Reflection.LocalVariableInfo.LocalIndex\n  id: LocalIndex\n  parent: System.Reflection.LocalVariableInfo\n  langs:\n  - csharp\n  - vb\n  name: LocalIndex\n  fullName: System.Reflection.LocalVariableInfo.LocalIndex\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBody.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LocalIndex\n    path: src/mscorlib/src/System/Reflection/MethodBody.cs\n    startLine: 164\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the index of the local variable within the method body.</p>\\n\"\n  syntax:\n    content: public virtual int LocalIndex { get; }\n    content.vb: Public Overridable ReadOnly Property LocalIndex As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer value that represents the order of declaration of the local variable within the method body.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: LocalVariableInfo.LocalIndex\n- uid: System.Reflection.LocalVariableInfo.LocalType\n  commentId: P:System.Reflection.LocalVariableInfo.LocalType\n  id: LocalType\n  parent: System.Reflection.LocalVariableInfo\n  langs:\n  - csharp\n  - vb\n  name: LocalType\n  fullName: System.Reflection.LocalVariableInfo.LocalType\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBody.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LocalType\n    path: src/mscorlib/src/System/Reflection/MethodBody.cs\n    startLine: 162\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the type of the local variable.</p>\\n\"\n  syntax:\n    content: public virtual Type LocalType { get; }\n    content.vb: Public Overridable ReadOnly Property LocalType As Type\n    parameters: []\n    return:\n      type: System.Type\n      description: \"\\n<p>The type of the local variable.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: LocalVariableInfo.LocalType\n- uid: System.Reflection.LocalVariableInfo.ToString\n  commentId: M:System.Reflection.LocalVariableInfo.ToString\n  id: ToString\n  parent: System.Reflection.LocalVariableInfo\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Reflection.LocalVariableInfo.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBody.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Reflection/MethodBody.cs\n    startLine: 150\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns a user-readable string that describes the local variable.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string that displays information about the local variable, including the type name, index, and pinned status.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: LocalVariableInfo.ToString()\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n"}