{"nodes":[{"pos":[923,943],"content":"EntityTagHeaderValue","needQuote":true,"nodes":[{"content":"EntityTagHeaderValue","pos":[0,20]}]},{"pos":[2122,2150],"content":"EntityTagHeaderValue(String)","needQuote":true,"nodes":[{"content":"EntityTagHeaderValue(String)","pos":[0,28]}]},{"pos":[3509,3546],"content":"EntityTagHeaderValue(String, Boolean)","needQuote":true,"nodes":[{"content":"EntityTagHeaderValue(String, Boolean)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;A value that indicates if this entity-tag header is a weak validator.","pos":[4576,4650],"source":"\\n<p>A value that indicates if this entity-tag header is a weak validator."},{"content":"If the entity-tag header is weak validator, then &lt;em&gt;isWeak&lt;/em&gt; should be set to &lt;strong&gt;true&lt;/strong&gt;.","pos":[4651,4755],"source":" If the entity-tag header is weak validator, then <em>isWeak</em> should be set to <strong>true</strong>."},{"content":"If the entity-tag header is a strong validator, then &lt;em&gt;isWeak&lt;/em&gt; should be set to &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[4756,4871],"source":" If the entity-tag header is a strong validator, then <em>isWeak</em> should be set to <strong>false</strong>.</p>\\n"},{"pos":[5226,5229],"content":"Any","needQuote":true,"nodes":[{"content":"Any","pos":[0,3]}]},{"pos":[6420,6426],"content":"IsWeak","needQuote":true,"nodes":[{"content":"IsWeak","pos":[0,6]}]},{"pos":[7651,7654],"content":"Tag","needQuote":true,"nodes":[{"content":"Tag","pos":[0,3]}]},{"pos":[8795,8809],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare with the current object.&lt;/p&gt;\\n","pos":[9691,9748],"source":"\\n<p>The object to compare with the current object.</p>\\n"},{"pos":[10526,10539],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[11870,11883],"content":"Parse(String)","needQuote":true,"nodes":[{"content":"Parse(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A string that represents entity tag header value information.&lt;/p&gt;\\n","pos":[12686,12758],"source":"\\n<p>A string that represents entity tag header value information.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is a &lt;strong&gt;null&lt;/strong&gt; reference.&lt;/p&gt;\\n","pos":[13218,13283],"source":"\\n<p>\\n<em>input</em> is a <strong>null</strong> reference.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is not valid entity tag header value information.&lt;/p&gt;\\n","pos":[13376,13453],"source":"\\n<p>\\n<em>input</em> is not valid entity tag header value information.</p>\\n"},{"pos":[13821,13831],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[15316,15358],"content":"TryParse(String, out EntityTagHeaderValue)","needQuote":true,"nodes":[{"content":"TryParse(String, out EntityTagHeaderValue)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;The string to validate.&lt;/p&gt;\\n","pos":[16291,16325],"source":"\\n<p>The string to validate.</p>\\n"},{"pos":[17445,17468],"content":"System.Net.Http.Headers","needQuote":true,"nodes":[{"content":"System.Net.Http.Headers","pos":[0,23]}]},{"pos":[17650,17656],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17843,17865],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[18013,18019],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[18086,18087],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18137,18143],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18204,18205]},{"pos":[18260,18266],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18326,18327],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18424,18430],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[18497,18498],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18548,18554],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18615,18616]},{"pos":[18671,18677],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18737,18738],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18983,19014],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[19180,19195],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[19271,19272],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19322,19328],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19389,19390]},{"pos":[19445,19451],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19511,19512],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19618,19633],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[19709,19710],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19760,19766],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19827,19828]},{"pos":[19883,19889],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19949,19950],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20176,20185],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[20278,20285],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[20353,20354],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20381,20382],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20451,20458],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[20526,20527],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20554,20555],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20730,20747],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[20856,20871],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[20947,20948],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20975,20976],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21053,21068],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[21144,21145],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21172,21173],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21318,21324],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[21455,21461],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[21607,21614],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[21810,21830],"content":"EntityTagHeaderValue","needQuote":true,"nodes":[{"content":"EntityTagHeaderValue","pos":[0,20]}]},{"pos":[22079,22093],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[22212,22218],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22285,22286],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22336,22342],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22402,22403],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22486,22492],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22559,22560],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22610,22616],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22676,22677],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22867,22880],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[22981,22992],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[23064,23065],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23092,23093],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23166,23177],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[23249,23250],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23277,23278],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23438,23443],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[23600,23610],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[23705,23713],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[23782,23783],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23810,23811],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23881,23889],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[23958,23959],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23986,23987],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24140,24161],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[24360,24375],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]}],"content":"items:\n- uid: System.Net.Http.Headers.EntityTagHeaderValue\n  commentId: T:System.Net.Http.Headers.EntityTagHeaderValue\n  id: EntityTagHeaderValue\n  parent: System.Net.Http.Headers\n  children:\n  - System.Net.Http.Headers.EntityTagHeaderValue.#ctor(System.String)\n  - System.Net.Http.Headers.EntityTagHeaderValue.#ctor(System.String,System.Boolean)\n  - System.Net.Http.Headers.EntityTagHeaderValue.Any\n  - System.Net.Http.Headers.EntityTagHeaderValue.Equals(System.Object)\n  - System.Net.Http.Headers.EntityTagHeaderValue.GetHashCode\n  - System.Net.Http.Headers.EntityTagHeaderValue.IsWeak\n  - System.Net.Http.Headers.EntityTagHeaderValue.Parse(System.String)\n  - System.Net.Http.Headers.EntityTagHeaderValue.Tag\n  - System.Net.Http.Headers.EntityTagHeaderValue.ToString\n  - System.Net.Http.Headers.EntityTagHeaderValue.TryParse(System.String,System.Net.Http.Headers.EntityTagHeaderValue@)\n  langs:\n  - csharp\n  - vb\n  name: EntityTagHeaderValue\n  fullName: System.Net.Http.Headers.EntityTagHeaderValue\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EntityTagHeaderValue\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 317\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Represents an entity-tag header value.</p>\\n\"\n  syntax:\n    content: public class EntityTagHeaderValue\n    content.vb: Public Class EntityTagHeaderValue\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: EntityTagHeaderValue\n- uid: System.Net.Http.Headers.EntityTagHeaderValue.#ctor(System.String)\n  commentId: M:System.Net.Http.Headers.EntityTagHeaderValue.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Net.Http.Headers.EntityTagHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: EntityTagHeaderValue(String)\n  fullName: System.Net.Http.Headers.EntityTagHeaderValue.EntityTagHeaderValue(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 319\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Http.Headers.EntityTagHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public EntityTagHeaderValue(string tag)\n    content.vb: Public Sub New(tag As String)\n    parameters:\n    - id: tag\n      type: System.String\n      description: \"\\n<p>A string that contains an <xref href=\\\"System.Net.Http.Headers.EntityTagHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EntityTagHeaderValue.EntityTagHeaderValue(String)\n- uid: System.Net.Http.Headers.EntityTagHeaderValue.#ctor(System.String,System.Boolean)\n  commentId: M:System.Net.Http.Headers.EntityTagHeaderValue.#ctor(System.String,System.Boolean)\n  id: '#ctor(System.String,System.Boolean)'\n  parent: System.Net.Http.Headers.EntityTagHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: EntityTagHeaderValue(String, Boolean)\n  fullName: System.Net.Http.Headers.EntityTagHeaderValue.EntityTagHeaderValue(System.String, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 320\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Http.Headers.EntityTagHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public EntityTagHeaderValue(string tag, bool isWeak)\n    content.vb: Public Sub New(tag As String, isWeak As Boolean)\n    parameters:\n    - id: tag\n      type: System.String\n      description: \"\\n<p>A string that contains an  <xref href=\\\"System.Net.Http.Headers.EntityTagHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: isWeak\n      type: System.Boolean\n      description: \"\\n<p>A value that indicates if this entity-tag header is a weak validator. If the entity-tag header is weak validator, then <em>isWeak</em> should be set to <strong>true</strong>. If the entity-tag header is a strong validator, then <em>isWeak</em> should be set to <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EntityTagHeaderValue.EntityTagHeaderValue(String, Boolean)\n- uid: System.Net.Http.Headers.EntityTagHeaderValue.Any\n  commentId: P:System.Net.Http.Headers.EntityTagHeaderValue.Any\n  id: Any\n  parent: System.Net.Http.Headers.EntityTagHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Any\n  fullName: System.Net.Http.Headers.EntityTagHeaderValue.Any\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Any\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 321\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Gets the entity-tag header value.</p>\\n\"\n  syntax:\n    content: public static EntityTagHeaderValue Any { get; }\n    content.vb: Public Shared ReadOnly Property Any As EntityTagHeaderValue\n    parameters: []\n    return:\n      type: System.Net.Http.Headers.EntityTagHeaderValue\n      description: \"\\n<p>Returns <xref href=\\\"System.Net.Http.Headers.EntityTagHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: EntityTagHeaderValue.Any\n- uid: System.Net.Http.Headers.EntityTagHeaderValue.IsWeak\n  commentId: P:System.Net.Http.Headers.EntityTagHeaderValue.IsWeak\n  id: IsWeak\n  parent: System.Net.Http.Headers.EntityTagHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: IsWeak\n  fullName: System.Net.Http.Headers.EntityTagHeaderValue.IsWeak\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsWeak\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 322\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Gets whether the entity-tag is prefaced by a weakness indicator.</p>\\n\"\n  syntax:\n    content: public bool IsWeak { get; }\n    content.vb: Public ReadOnly Property IsWeak As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if the entity-tag is prefaced by a weakness indicator; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: EntityTagHeaderValue.IsWeak\n- uid: System.Net.Http.Headers.EntityTagHeaderValue.Tag\n  commentId: P:System.Net.Http.Headers.EntityTagHeaderValue.Tag\n  id: Tag\n  parent: System.Net.Http.Headers.EntityTagHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Tag\n  fullName: System.Net.Http.Headers.EntityTagHeaderValue.Tag\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Tag\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 323\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Gets the opaque quoted string. </p>\\n\"\n  syntax:\n    content: public string Tag { get; }\n    content.vb: Public ReadOnly Property Tag As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>Returns <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>An opaque quoted string.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: EntityTagHeaderValue.Tag\n- uid: System.Net.Http.Headers.EntityTagHeaderValue.Equals(System.Object)\n  commentId: M:System.Net.Http.Headers.EntityTagHeaderValue.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Net.Http.Headers.EntityTagHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Net.Http.Headers.EntityTagHeaderValue.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 324\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Determines whether the specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the current <xref href=\\\"System.Net.Http.Headers.EntityTagHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare with the current object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if the specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the current object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: EntityTagHeaderValue.Equals(Object)\n- uid: System.Net.Http.Headers.EntityTagHeaderValue.GetHashCode\n  commentId: M:System.Net.Http.Headers.EntityTagHeaderValue.GetHashCode\n  id: GetHashCode\n  parent: System.Net.Http.Headers.EntityTagHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Net.Http.Headers.EntityTagHeaderValue.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 325\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Serves as a hash function for an <xref href=\\\"System.Net.Http.Headers.EntityTagHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>Returns <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>A hash code for the current object.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: EntityTagHeaderValue.GetHashCode()\n- uid: System.Net.Http.Headers.EntityTagHeaderValue.Parse(System.String)\n  commentId: M:System.Net.Http.Headers.EntityTagHeaderValue.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Net.Http.Headers.EntityTagHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Parse(String)\n  fullName: System.Net.Http.Headers.EntityTagHeaderValue.Parse(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Parse\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 326\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Converts a string to an <xref href=\\\"System.Net.Http.Headers.EntityTagHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public static EntityTagHeaderValue Parse(string input)\n    content.vb: Public Shared Function Parse(input As String) As EntityTagHeaderValue\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>A string that represents entity tag header value information.</p>\\n\"\n    return:\n      type: System.Net.Http.Headers.EntityTagHeaderValue\n      description: \"\\n<p>Returns <xref href=\\\"System.Net.Http.Headers.EntityTagHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>An <xref href=\\\"System.Net.Http.Headers.EntityTagHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> is a <strong>null</strong> reference.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>input</em> is not valid entity tag header value information.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: EntityTagHeaderValue.Parse(String)\n- uid: System.Net.Http.Headers.EntityTagHeaderValue.ToString\n  commentId: M:System.Net.Http.Headers.EntityTagHeaderValue.ToString\n  id: ToString\n  parent: System.Net.Http.Headers.EntityTagHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Net.Http.Headers.EntityTagHeaderValue.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 327\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Returns a string that represents the current <xref href=\\\"System.Net.Http.Headers.EntityTagHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>Returns <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>A string that represents the current object.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: EntityTagHeaderValue.ToString()\n- uid: System.Net.Http.Headers.EntityTagHeaderValue.TryParse(System.String,System.Net.Http.Headers.EntityTagHeaderValue@)\n  commentId: M:System.Net.Http.Headers.EntityTagHeaderValue.TryParse(System.String,System.Net.Http.Headers.EntityTagHeaderValue@)\n  id: TryParse(System.String,System.Net.Http.Headers.EntityTagHeaderValue@)\n  parent: System.Net.Http.Headers.EntityTagHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: TryParse(String, out EntityTagHeaderValue)\n  fullName: System.Net.Http.Headers.EntityTagHeaderValue.TryParse(System.String, out System.Net.Http.Headers.EntityTagHeaderValue)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryParse\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 328\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Determines whether a string is valid <xref href=\\\"System.Net.Http.Headers.EntityTagHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> information.</p>\\n\"\n  syntax:\n    content: public static bool TryParse(string input, out EntityTagHeaderValue parsedValue)\n    content.vb: Public Shared Function TryParse(input As String, ByRef parsedValue As EntityTagHeaderValue) As Boolean\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to validate.</p>\\n\"\n    - id: parsedValue\n      type: System.Net.Http.Headers.EntityTagHeaderValue\n      description: \"\\n<p>The <xref href=\\\"System.Net.Http.Headers.EntityTagHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> version of the string.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if <em>input</em> is valid <xref href=\\\"System.Net.Http.Headers.EntityTagHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> information; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Net.Http.Headers.EntityTagHeaderValue.TryParse(System.String, ByRef System.Net.Http.Headers.EntityTagHeaderValue)\n  name.vb: TryParse(String, ByRef EntityTagHeaderValue)\n  nameWithType: EntityTagHeaderValue.TryParse(String, out EntityTagHeaderValue)\n  nameWithType.vb: EntityTagHeaderValue.TryParse(String, ByRef EntityTagHeaderValue)\nreferences:\n- uid: System.Net.Http.Headers\n  isExternal: false\n  name: System.Net.Http.Headers\n  fullName: System.Net.Http.Headers\n  commentId: N:System.Net.Http.Headers\n  nameWithType: System.Net.Http.Headers\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Net.Http.Headers.EntityTagHeaderValue\n  parent: System.Net.Http.Headers\n  isExternal: false\n  name: EntityTagHeaderValue\n  fullName: System.Net.Http.Headers.EntityTagHeaderValue\n  commentId: T:System.Net.Http.Headers.EntityTagHeaderValue\n  nameWithType: EntityTagHeaderValue\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n"}