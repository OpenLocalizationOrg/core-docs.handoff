{"nodes":[{"pos":[2114,2124],"content":"XmlElement","needQuote":true,"nodes":[{"content":"XmlElement","pos":[0,10]}]},{"pos":[5376,5423],"content":"XmlElement(String, String, String, XmlDocument)","needQuote":true,"nodes":[{"content":"XmlElement(String, String, String, XmlDocument)","pos":[0,47]}]},{"content":"\\n&lt;p&gt;The parent XML document.&lt;/p&gt;\\n","pos":[6969,7004],"source":"\\n<p>The parent XML document.</p>\\n"},{"pos":[7317,7327],"content":"Attributes","needQuote":true,"nodes":[{"content":"Attributes","pos":[0,10]}]},{"pos":[8689,8702],"content":"HasAttributes","needQuote":true,"nodes":[{"content":"HasAttributes","pos":[0,13]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current node has attributes; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9442,9547],"source":"\\n<p>\\n<strong>true</strong> if the current node has attributes; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[9866,9875],"content":"InnerText","needQuote":true,"nodes":[{"content":"InnerText","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The concatenated values of the node and all its children.&lt;/p&gt;\\n","pos":[10571,10639],"source":"\\n<p>The concatenated values of the node and all its children.</p>\\n"},{"pos":[10988,10996],"content":"InnerXml","needQuote":true,"nodes":[{"content":"InnerXml","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The markup of the children of this node.&lt;/p&gt;\\n","pos":[11686,11737],"source":"\\n<p>The markup of the children of this node.</p>\\n"},{"content":"\\n&lt;p&gt;The XML specified when setting this property is not well-formed.","pos":[11888,11957],"source":"\\n<p>The XML specified when setting this property is not well-formed."},{"content":"&lt;/p&gt;\\n","pos":[11958,11964],"source":" </p>\\n"},{"pos":[12266,12273],"content":"IsEmpty","needQuote":true,"nodes":[{"content":"IsEmpty","pos":[0,7]}]},{"pos":[13805,13814],"content":"LocalName","needQuote":true,"nodes":[{"content":"LocalName","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The name of the current node with the prefix removed.","pos":[14484,14542],"source":"\\n<p>The name of the current node with the prefix removed."},{"content":"For example, &lt;strong&gt;LocalName&lt;/strong&gt; is book for the element &lt;bk:book&gt;.&lt;/p&gt;\\n","pos":[14543,14623],"source":" For example, <strong>LocalName</strong> is book for the element <bk:book>.</p>\\n"},{"pos":[14965,14969],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"content":"\\n&lt;p&gt;The qualified name of the node.","pos":[15615,15651],"source":"\\n<p>The qualified name of the node."},{"content":"For &lt;strong&gt;XmlElement&lt;/strong&gt; nodes, this is the tag name of the element.&lt;/p&gt;\\n","pos":[15652,15733],"source":" For <strong>XmlElement</strong> nodes, this is the tag name of the element.</p>\\n"},{"pos":[16191,16203],"content":"NamespaceURI","needQuote":true,"nodes":[{"content":"NamespaceURI","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The namespace URI of this node.","pos":[16881,16917],"source":"\\n<p>The namespace URI of this node."},{"content":"If there is no namespace URI, this property returns String.Empty.&lt;/p&gt;\\n","pos":[16918,16989],"source":" If there is no namespace URI, this property returns String.Empty.</p>\\n"},{"pos":[17358,17369],"content":"NextSibling","needQuote":true,"nodes":[{"content":"NextSibling","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlNode&lt;/strong&gt; immediately following this element.&lt;/p&gt;\\n","pos":[18137,18212],"source":"\\n<p>The <strong>XmlNode</strong> immediately following this element.</p>\\n"},{"pos":[18576,18584],"content":"NodeType","needQuote":true,"nodes":[{"content":"NodeType","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The node type.","pos":[19263,19282],"source":"\\n<p>The node type."},{"content":"For &lt;strong&gt;XmlElement&lt;/strong&gt; nodes, this value is XmlNodeType.Element.&lt;/p&gt;\\n","pos":[19283,19362],"source":" For <strong>XmlElement</strong> nodes, this value is XmlNodeType.Element.</p>\\n"},{"pos":[19813,19826],"content":"OwnerDocument","needQuote":true,"nodes":[{"content":"OwnerDocument","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlDocument&lt;/strong&gt; to which this element belongs.&lt;/p&gt;\\n","pos":[20610,20684],"source":"\\n<p>The <strong>XmlDocument</strong> to which this element belongs.</p>\\n"},{"pos":[21052,21062],"content":"ParentNode","needQuote":true,"nodes":[{"content":"ParentNode","pos":[0,10]}]},{"pos":[22595,22601],"content":"Prefix","needQuote":true,"nodes":[{"content":"Prefix","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The namespace prefix of this node.","pos":[23262,23301],"source":"\\n<p>The namespace prefix of this node."},{"content":"If there is no prefix, this property returns String.Empty.&lt;/p&gt;\\n","pos":[23302,23366],"source":" If there is no prefix, this property returns String.Empty.</p>\\n"},{"content":"\\n&lt;p&gt;This node is read-only &lt;/p&gt;\\n","pos":[23517,23551],"source":"\\n<p>This node is read-only </p>\\n"},{"pos":[24300,24318],"content":"CloneNode(Boolean)","needQuote":true,"nodes":[{"content":"CloneNode(Boolean)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to recursively clone the subtree under the specified node; &lt;strong&gt;false&lt;/strong&gt; to clone only the node itself (and its attributes if the node is an &lt;strong&gt;XmlElement&lt;/strong&gt;).","pos":[25008,25216],"source":"\\n<p>\\n<strong>true</strong> to recursively clone the subtree under the specified node; <strong>false</strong> to clone only the node itself (and its attributes if the node is an <strong>XmlElement</strong>)."},{"content":"&lt;/p&gt;\\n","pos":[25217,25223],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The cloned node.&lt;/p&gt;\\n","pos":[25288,25315],"source":"\\n<p>The cloned node.</p>\\n"},{"pos":[25730,25750],"content":"GetAttribute(String)","needQuote":true,"nodes":[{"content":"GetAttribute(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The name of the attribute to retrieve.","pos":[26477,26520],"source":"\\n<p>The name of the attribute to retrieve."},{"content":"This is a qualified name.","pos":[26521,26546]},{"content":"It is matched against the &lt;strong&gt;Name&lt;/strong&gt; property of the matching node.","pos":[26547,26625],"source":" It is matched against the <strong>Name</strong> property of the matching node."},{"content":"&lt;/p&gt;\\n","pos":[26626,26632],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified attribute.","pos":[26692,26734],"source":"\\n<p>The value of the specified attribute."},{"content":"An empty string is returned if a matching attribute is not found or if the attribute does not have a specified or default value.&lt;/p&gt;\\n","pos":[26735,26869],"source":" An empty string is returned if a matching attribute is not found or if the attribute does not have a specified or default value.</p>\\n"},{"pos":[27270,27298],"content":"GetAttribute(String, String)","needQuote":true,"nodes":[{"content":"GetAttribute(String, String)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The local name of the attribute to retrieve.","pos":[28124,28173],"source":"\\n<p>The local name of the attribute to retrieve."},{"content":"&lt;/p&gt;\\n","pos":[28174,28180],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the attribute to retrieve.","pos":[28251,28303],"source":"\\n<p>The namespace URI of the attribute to retrieve."},{"content":"&lt;/p&gt;\\n","pos":[28304,28310],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified attribute.","pos":[28370,28412],"source":"\\n<p>The value of the specified attribute."},{"content":"An empty string is returned if a matching attribute is not found or if the attribute does not have a specified or default value.&lt;/p&gt;\\n","pos":[28413,28547],"source":" An empty string is returned if a matching attribute is not found or if the attribute does not have a specified or default value.</p>\\n"},{"pos":[28926,28950],"content":"GetAttributeNode(String)","needQuote":true,"nodes":[{"content":"GetAttributeNode(String)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The name of the attribute to retrieve.","pos":[29711,29754],"source":"\\n<p>The name of the attribute to retrieve."},{"content":"This is a qualified name.","pos":[29755,29780]},{"content":"It is matched against the &lt;strong&gt;Name&lt;/strong&gt; property of the matching node.","pos":[29781,29859],"source":" It is matched against the <strong>Name</strong> property of the matching node."},{"content":"&lt;/p&gt;\\n","pos":[29860,29866],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The specified &lt;strong&gt;XmlAttribute&lt;/strong&gt; or &lt;strong&gt;null&lt;/strong&gt; if a matching attribute was not found.&lt;/p&gt;\\n","pos":[29936,30054],"source":"\\n<p>The specified <strong>XmlAttribute</strong> or <strong>null</strong> if a matching attribute was not found.</p>\\n"},{"pos":[30471,30503],"content":"GetAttributeNode(String, String)","needQuote":true,"nodes":[{"content":"GetAttributeNode(String, String)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The local name of the attribute.","pos":[31417,31454],"source":"\\n<p>The local name of the attribute."},{"content":"&lt;/p&gt;\\n","pos":[31455,31461],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the attribute.","pos":[31532,31572],"source":"\\n<p>The namespace URI of the attribute."},{"content":"&lt;/p&gt;\\n","pos":[31573,31579],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The specified &lt;strong&gt;XmlAttribute&lt;/strong&gt; or &lt;strong&gt;null&lt;/strong&gt; if a matching attribute was not found.&lt;/p&gt;\\n","pos":[31649,31767],"source":"\\n<p>The specified <strong>XmlAttribute</strong> or <strong>null</strong> if a matching attribute was not found.</p>\\n"},{"pos":[32162,32190],"content":"GetElementsByTagName(String)","needQuote":true,"nodes":[{"content":"GetElementsByTagName(String)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The name tag to match.","pos":[33150,33177],"source":"\\n<p>The name tag to match."},{"content":"This is a qualified name.","pos":[33178,33203]},{"content":"It is matched against the &lt;strong&gt;Name&lt;/strong&gt; property of the matching node.","pos":[33204,33282],"source":" It is matched against the <strong>Name</strong> property of the matching node."},{"content":"The asterisk (*) is a special value that matches all tags.","pos":[33283,33341]},{"content":"&lt;/p&gt;\\n","pos":[33342,33348],"source":" </p>\\n"},{"pos":[34037,34073],"content":"GetElementsByTagName(String, String)","needQuote":true,"nodes":[{"content":"GetElementsByTagName(String, String)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The local name to match.","pos":[35212,35241],"source":"\\n<p>The local name to match."},{"content":"The asterisk (*) is a special value that matches all tags.","pos":[35242,35300]},{"content":"&lt;/p&gt;\\n","pos":[35301,35307],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI to match.","pos":[35378,35410],"source":"\\n<p>The namespace URI to match."},{"content":"&lt;/p&gt;\\n","pos":[35411,35417],"source":" </p>\\n"},{"pos":[36048,36068],"content":"HasAttribute(String)","needQuote":true,"nodes":[{"content":"HasAttribute(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The name of the attribute to find.","pos":[36811,36850],"source":"\\n<p>The name of the attribute to find."},{"content":"This is a qualified name.","pos":[36851,36876]},{"content":"It is matched against the &lt;strong&gt;Name&lt;/strong&gt; property of the matching node.","pos":[36877,36955],"source":" It is matched against the <strong>Name</strong> property of the matching node."},{"content":"&lt;/p&gt;\\n","pos":[36956,36962],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current node has the specified attribute; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[37023,37141],"source":"\\n<p>\\n<strong>true</strong> if the current node has the specified attribute; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[37542,37570],"content":"HasAttribute(String, String)","needQuote":true,"nodes":[{"content":"HasAttribute(String, String)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The local name of the attribute to find.","pos":[38412,38457],"source":"\\n<p>The local name of the attribute to find."},{"content":"&lt;/p&gt;\\n","pos":[38458,38464],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the attribute to find.","pos":[38535,38583],"source":"\\n<p>The namespace URI of the attribute to find."},{"content":"&lt;/p&gt;\\n","pos":[38584,38590],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current node has the specified attribute; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[38651,38769],"source":"\\n<p>\\n<strong>true</strong> if the current node has the specified attribute; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[39082,39093],"content":"RemoveAll()","needQuote":true,"nodes":[{"content":"RemoveAll()","pos":[0,11]}]},{"pos":[40081,40102],"content":"RemoveAllAttributes()","needQuote":true,"nodes":[{"content":"RemoveAllAttributes()","pos":[0,21]}]},{"pos":[41116,41139],"content":"RemoveAttribute(String)","needQuote":true,"nodes":[{"content":"RemoveAttribute(String)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The name of the attribute to remove.This is a qualified name.","pos":[41830,41896],"source":"\\n<p>The name of the attribute to remove.This is a qualified name."},{"content":"It is matched against the &lt;strong&gt;Name&lt;/strong&gt; property of the matching node.","pos":[41897,41975],"source":" It is matched against the <strong>Name</strong> property of the matching node."},{"content":"&lt;/p&gt;\\n","pos":[41976,41982],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The node is read-only.","pos":[42093,42120],"source":"\\n<p>The node is read-only."},{"content":"&lt;/p&gt;\\n","pos":[42121,42127],"source":" </p>\\n"},{"pos":[42540,42571],"content":"RemoveAttribute(String, String)","needQuote":true,"nodes":[{"content":"RemoveAttribute(String, String)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The local name of the attribute to remove.","pos":[43453,43500],"source":"\\n<p>The local name of the attribute to remove."},{"content":"&lt;/p&gt;\\n","pos":[43501,43507],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the attribute to remove.","pos":[43578,43628],"source":"\\n<p>The namespace URI of the attribute to remove."},{"content":"&lt;/p&gt;\\n","pos":[43629,43635],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The node is read-only.","pos":[43746,43773],"source":"\\n<p>The node is read-only."},{"content":"&lt;/p&gt;\\n","pos":[43774,43780],"source":" </p>\\n"},{"pos":[44162,44186],"content":"RemoveAttributeAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAttributeAt(Int32)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The index of the node to remove.","pos":[45007,45044],"source":"\\n<p>The index of the node to remove."},{"content":"The first node has index 0.","pos":[45045,45072]},{"content":"&lt;/p&gt;\\n","pos":[45073,45079],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The attribute node removed or &lt;strong&gt;null&lt;/strong&gt; if there is no node at the given index.&lt;/p&gt;\\n","pos":[45144,45246],"source":"\\n<p>The attribute node removed or <strong>null</strong> if there is no node at the given index.</p>\\n"},{"pos":[45672,45707],"content":"RemoveAttributeNode(String, String)","needQuote":true,"nodes":[{"content":"RemoveAttributeNode(String, String)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The local name of the attribute.","pos":[46707,46744],"source":"\\n<p>The local name of the attribute."},{"content":"&lt;/p&gt;\\n","pos":[46745,46751],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the attribute.","pos":[46822,46862],"source":"\\n<p>The namespace URI of the attribute."},{"content":"&lt;/p&gt;\\n","pos":[46863,46869],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The removed &lt;strong&gt;XmlAttribute&lt;/strong&gt; or &lt;strong&gt;null&lt;/strong&gt; if the &lt;strong&gt;XmlElement&lt;/strong&gt; does not have a matching attribute node.&lt;/p&gt;\\n","pos":[46939,47092],"source":"\\n<p>The removed <strong>XmlAttribute</strong> or <strong>null</strong> if the <strong>XmlElement</strong> does not have a matching attribute node.</p>\\n"},{"content":"\\n&lt;p&gt;This node is read-only.","pos":[47203,47231],"source":"\\n<p>This node is read-only."},{"content":"&lt;/p&gt;\\n","pos":[47232,47238],"source":" </p>\\n"},{"pos":[47663,47696],"content":"RemoveAttributeNode(XmlAttribute)","needQuote":true,"nodes":[{"content":"RemoveAttributeNode(XmlAttribute)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlAttribute&lt;/strong&gt; node to remove.","pos":[48550,48604],"source":"\\n<p>The <strong>XmlAttribute</strong> node to remove."},{"content":"If the removed attribute has a default value, it is immediately replaced.","pos":[48605,48678]},{"content":"&lt;/p&gt;\\n","pos":[48679,48685],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The removed &lt;strong&gt;XmlAttribute&lt;/strong&gt; or &lt;strong&gt;null&lt;/strong&gt; if &lt;em&gt;oldAttr&lt;/em&gt; is not an attribute node of the &lt;strong&gt;XmlElement&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[48755,48913],"source":"\\n<p>The removed <strong>XmlAttribute</strong> or <strong>null</strong> if <em>oldAttr</em> is not an attribute node of the <strong>XmlElement</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;This node is read-only.","pos":[49024,49052],"source":"\\n<p>This node is read-only."},{"content":"&lt;/p&gt;\\n","pos":[49053,49059],"source":" </p>\\n"},{"pos":[49473,49501],"content":"SetAttribute(String, String)","needQuote":true,"nodes":[{"content":"SetAttribute(String, String)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The name of the attribute to create or alter.","pos":[50253,50303],"source":"\\n<p>The name of the attribute to create or alter."},{"content":"This is a qualified name.","pos":[50304,50329]},{"content":"If the name contains a colon it is parsed into prefix and local name components.","pos":[50330,50410]},{"content":"&lt;/p&gt;\\n","pos":[50411,50417],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value to set for the attribute.","pos":[50481,50521],"source":"\\n<p>The value to set for the attribute."},{"content":"&lt;/p&gt;\\n","pos":[50522,50528],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The specified name contains an invalid character.","pos":[50637,50691],"source":"\\n<p>The specified name contains an invalid character."},{"content":"&lt;/p&gt;\\n","pos":[50692,50698],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The node is read-only.","pos":[50795,50822],"source":"\\n<p>The node is read-only."},{"content":"&lt;/p&gt;\\n","pos":[50823,50829],"source":" </p>\\n"},{"pos":[51280,51316],"content":"SetAttribute(String, String, String)","needQuote":true,"nodes":[{"content":"SetAttribute(String, String, String)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The local name of the attribute.","pos":[52184,52221],"source":"\\n<p>The local name of the attribute."},{"content":"&lt;/p&gt;\\n","pos":[52222,52228],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the attribute.","pos":[52299,52339],"source":"\\n<p>The namespace URI of the attribute."},{"content":"&lt;/p&gt;\\n","pos":[52340,52346],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value to set for the attribute.","pos":[52410,52450],"source":"\\n<p>The value to set for the attribute."},{"content":"&lt;/p&gt;\\n","pos":[52451,52457],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The attribute value.&lt;/p&gt;\\n","pos":[52517,52548],"source":"\\n<p>The attribute value.</p>\\n"},{"pos":[52977,53009],"content":"SetAttributeNode(String, String)","needQuote":true,"nodes":[{"content":"SetAttributeNode(String, String)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The local name of the attribute.","pos":[53882,53919],"source":"\\n<p>The local name of the attribute."},{"content":"&lt;/p&gt;\\n","pos":[53920,53926],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the attribute.","pos":[53997,54037],"source":"\\n<p>The namespace URI of the attribute."},{"content":"&lt;/p&gt;\\n","pos":[54038,54044],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlAttribute&lt;/strong&gt; to add.&lt;/p&gt;\\n","pos":[54114,54166],"source":"\\n<p>The <strong>XmlAttribute</strong> to add.</p>\\n"},{"pos":[54579,54609],"content":"SetAttributeNode(XmlAttribute)","needQuote":true,"nodes":[{"content":"SetAttributeNode(XmlAttribute)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlAttribute&lt;/strong&gt; node to add to the attribute collection for this element.","pos":[55448,55544],"source":"\\n<p>The <strong>XmlAttribute</strong> node to add to the attribute collection for this element."},{"content":"&lt;/p&gt;\\n","pos":[55545,55551],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;If the attribute replaces an existing attribute with the same name, the old &lt;strong&gt;XmlAttribute&lt;/strong&gt; is returned; otherwise, &lt;strong&gt;null&lt;/strong&gt; is returned.&lt;/p&gt;\\n","pos":[55621,55796],"source":"\\n<p>If the attribute replaces an existing attribute with the same name, the old <strong>XmlAttribute</strong> is returned; otherwise, <strong>null</strong> is returned.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;newAttr&lt;/em&gt; was created from a different document than the one that created this node.","pos":[55907,56007],"source":"\\n<p>The <em>newAttr</em> was created from a different document than the one that created this node."},{"content":"Or this node is read-only.","pos":[56008,56034]},{"content":"&lt;/p&gt;\\n","pos":[56035,56041],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;newAttr&lt;/em&gt; is already an attribute of another &lt;strong&gt;XmlElement&lt;/strong&gt; object.","pos":[56154,56250],"source":"\\n<p>The <em>newAttr</em> is already an attribute of another <strong>XmlElement</strong> object."},{"content":"You must explicitly clone &lt;strong&gt;XmlAttribute&lt;/strong&gt; nodes to re-use them in other &lt;strong&gt;XmlElement&lt;/strong&gt; objects.","pos":[56251,56373],"source":" You must explicitly clone <strong>XmlAttribute</strong> nodes to re-use them in other <strong>XmlElement</strong> objects."},{"content":"&lt;/p&gt;\\n","pos":[56374,56380],"source":" </p>\\n"},{"pos":[56776,56801],"content":"WriteContentTo(XmlWriter)","needQuote":true,"nodes":[{"content":"WriteContentTo(XmlWriter)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlWriter&lt;/strong&gt; to which you want to save.","pos":[57602,57664],"source":"\\n<p>The <strong>XmlWriter</strong> to which you want to save."},{"content":"&lt;/p&gt;\\n","pos":[57665,57671],"source":" </p>\\n"},{"pos":[58252,58270],"content":"WriteTo(XmlWriter)","needQuote":true,"nodes":[{"content":"WriteTo(XmlWriter)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlWriter&lt;/strong&gt; to which you want to save.","pos":[59031,59093],"source":"\\n<p>The <strong>XmlWriter</strong> to which you want to save."},{"content":"&lt;/p&gt;\\n","pos":[59094,59100],"source":" </p>\\n"},{"pos":[59354,59364],"content":"System.Xml","needQuote":true,"nodes":[{"content":"System.Xml","pos":[0,10]}]},{"pos":[59507,59513],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[59667,59674],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[59845,59858],"content":"XmlLinkedNode","needQuote":true,"nodes":[{"content":"XmlLinkedNode","pos":[0,13]}]},{"pos":[60061,60072],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[60301,60316],"content":"PreviousSibling","needQuote":true,"nodes":[{"content":"PreviousSibling","pos":[0,15]}]},{"pos":[60563,60570],"content":"BaseURI","needQuote":true,"nodes":[{"content":"BaseURI","pos":[0,7]}]},{"pos":[60778,60788],"content":"ChildNodes","needQuote":true,"nodes":[{"content":"ChildNodes","pos":[0,10]}]},{"pos":[61005,61015],"content":"FirstChild","needQuote":true,"nodes":[{"content":"FirstChild","pos":[0,10]}]},{"pos":[61235,61248],"content":"HasChildNodes","needQuote":true,"nodes":[{"content":"HasChildNodes","pos":[0,13]}]},{"pos":[61474,61484],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[61709,61721],"content":"Item[String]","needQuote":true,"nodes":[{"content":"Item[String]","pos":[0,12]}]},{"pos":[61924,61928],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[61978,61979]},{"pos":[62032,62038],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"]","pos":[62099,62100]},{"pos":[62189,62193],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[62242,62243],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62293,62299],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[62359,62360],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62624,62644],"content":"Item[String, String]","needQuote":true,"nodes":[{"content":"Item[String, String]","pos":[0,20]}]},{"pos":[62899,62903],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[62953,62954]},{"pos":[63007,63013],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[63074,63075]},{"pos":[63130,63136],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"]","pos":[63197,63198]},{"pos":[63301,63305],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[63354,63355],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63405,63411],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[63472,63473]},{"pos":[63528,63534],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[63594,63595],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63866,63875],"content":"LastChild","needQuote":true,"nodes":[{"content":"LastChild","pos":[0,9]}]},{"pos":[64087,64095],"content":"OuterXml","needQuote":true,"nodes":[{"content":"OuterXml","pos":[0,8]}]},{"pos":[64308,64320],"content":"PreviousText","needQuote":true,"nodes":[{"content":"PreviousText","pos":[0,12]}]},{"pos":[64538,64543],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[64766,64786],"content":"AppendChild(XmlNode)","needQuote":true,"nodes":[{"content":"AppendChild(XmlNode)","pos":[0,20]}]},{"pos":[64935,64946],"content":"AppendChild","needQuote":true,"nodes":[{"content":"AppendChild","pos":[0,11]}]},{"pos":[65002,65003],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65058,65065],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[65109,65110],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65208,65219],"content":"AppendChild","needQuote":true,"nodes":[{"content":"AppendChild","pos":[0,11]}]},{"pos":[65275,65276],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65331,65338],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[65382,65383],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65608,65623],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[65738,65751],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[65809,65810],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65837,65838],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65918,65931],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[65989,65990],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66017,66018],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66241,66269],"content":"GetNamespaceOfPrefix(String)","needQuote":true,"nodes":[{"content":"GetNamespaceOfPrefix(String)","pos":[0,28]}]},{"pos":[66426,66446],"content":"GetNamespaceOfPrefix","needQuote":true,"nodes":[{"content":"GetNamespaceOfPrefix","pos":[0,20]}]},{"pos":[66511,66512],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66562,66568],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[66628,66629],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66731,66751],"content":"GetNamespaceOfPrefix","needQuote":true,"nodes":[{"content":"GetNamespaceOfPrefix","pos":[0,20]}]},{"pos":[66816,66817],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66867,66873],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[66933,66934],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67192,67220],"content":"GetPrefixOfNamespace(String)","needQuote":true,"nodes":[{"content":"GetPrefixOfNamespace(String)","pos":[0,28]}]},{"pos":[67377,67397],"content":"GetPrefixOfNamespace","needQuote":true,"nodes":[{"content":"GetPrefixOfNamespace","pos":[0,20]}]},{"pos":[67462,67463],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67513,67519],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[67579,67580],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67682,67702],"content":"GetPrefixOfNamespace","needQuote":true,"nodes":[{"content":"GetPrefixOfNamespace","pos":[0,20]}]},{"pos":[67767,67768],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67818,67824],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[67884,67885],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68159,68188],"content":"InsertAfter(XmlNode, XmlNode)","needQuote":true,"nodes":[{"content":"InsertAfter(XmlNode, XmlNode)","pos":[0,29]}]},{"pos":[68376,68387],"content":"InsertAfter","needQuote":true,"nodes":[{"content":"InsertAfter","pos":[0,11]}]},{"pos":[68443,68444],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68499,68506],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"content":",","pos":[68551,68552]},{"pos":[68612,68619],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[68663,68664],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68781,68792],"content":"InsertAfter","needQuote":true,"nodes":[{"content":"InsertAfter","pos":[0,11]}]},{"pos":[68848,68849],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68904,68911],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"content":",","pos":[68956,68957]},{"pos":[69017,69024],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[69068,69069],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69360,69390],"content":"InsertBefore(XmlNode, XmlNode)","needQuote":true,"nodes":[{"content":"InsertBefore(XmlNode, XmlNode)","pos":[0,30]}]},{"pos":[69580,69592],"content":"InsertBefore","needQuote":true,"nodes":[{"content":"InsertBefore","pos":[0,12]}]},{"pos":[69649,69650],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69705,69712],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"content":",","pos":[69757,69758]},{"pos":[69818,69825],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[69869,69870],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69988,70000],"content":"InsertBefore","needQuote":true,"nodes":[{"content":"InsertBefore","pos":[0,12]}]},{"pos":[70057,70058],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70113,70120],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"content":",","pos":[70165,70166]},{"pos":[70226,70233],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[70277,70278],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70529,70540],"content":"Normalize()","needQuote":true,"nodes":[{"content":"Normalize()","pos":[0,11]}]},{"pos":[70647,70656],"content":"Normalize","needQuote":true,"nodes":[{"content":"Normalize","pos":[0,9]}]},{"pos":[70710,70711],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70738,70739],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70815,70824],"content":"Normalize","needQuote":true,"nodes":[{"content":"Normalize","pos":[0,9]}]},{"pos":[70878,70879],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70906,70907],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71120,71141],"content":"PrependChild(XmlNode)","needQuote":true,"nodes":[{"content":"PrependChild(XmlNode)","pos":[0,21]}]},{"pos":[71292,71304],"content":"PrependChild","needQuote":true,"nodes":[{"content":"PrependChild","pos":[0,12]}]},{"pos":[71361,71362],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71417,71424],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[71468,71469],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71568,71580],"content":"PrependChild","needQuote":true,"nodes":[{"content":"PrependChild","pos":[0,12]}]},{"pos":[71637,71638],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71693,71700],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[71744,71745],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71990,72010],"content":"RemoveChild(XmlNode)","needQuote":true,"nodes":[{"content":"RemoveChild(XmlNode)","pos":[0,20]}]},{"pos":[72159,72170],"content":"RemoveChild","needQuote":true,"nodes":[{"content":"RemoveChild","pos":[0,11]}]},{"pos":[72226,72227],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72282,72289],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[72333,72334],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72432,72443],"content":"RemoveChild","needQuote":true,"nodes":[{"content":"RemoveChild","pos":[0,11]}]},{"pos":[72499,72500],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72555,72562],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[72606,72607],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72870,72900],"content":"ReplaceChild(XmlNode, XmlNode)","needQuote":true,"nodes":[{"content":"ReplaceChild(XmlNode, XmlNode)","pos":[0,30]}]},{"pos":[73090,73102],"content":"ReplaceChild","needQuote":true,"nodes":[{"content":"ReplaceChild","pos":[0,12]}]},{"pos":[73159,73160],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73215,73222],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"content":",","pos":[73267,73268]},{"pos":[73328,73335],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[73379,73380],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73498,73510],"content":"ReplaceChild","needQuote":true,"nodes":[{"content":"ReplaceChild","pos":[0,12]}]},{"pos":[73567,73568],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73623,73630],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"content":",","pos":[73675,73676]},{"pos":[73736,73743],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[73787,73788],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74066,74090],"content":"Supports(String, String)","needQuote":true,"nodes":[{"content":"Supports(String, String)","pos":[0,24]}]},{"pos":[74252,74260],"content":"Supports","needQuote":true,"nodes":[{"content":"Supports","pos":[0,8]}]},{"pos":[74313,74314],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74364,74370],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[74431,74432]},{"pos":[74487,74493],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[74553,74554],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74658,74666],"content":"Supports","needQuote":true,"nodes":[{"content":"Supports","pos":[0,8]}]},{"pos":[74719,74720],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74770,74776],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[74837,74838]},{"pos":[74893,74899],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[74959,74960],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75226,75253],"content":"IEnumerable.GetEnumerator()","needQuote":true,"nodes":[{"content":"IEnumerable.GetEnumerator()","pos":[0,27]}]},{"pos":[75488,75513],"content":"IEnumerable.GetEnumerator","needQuote":true,"nodes":[{"content":"IEnumerable.GetEnumerator","pos":[0,25]}]},{"pos":[75602,75603],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75630,75631],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75742,75786],"content":"System.Collections.IEnumerable.GetEnumerator","needQuote":true,"nodes":[{"content":"System.Collections.IEnumerable.GetEnumerator","pos":[0,44]}]},{"pos":[75875,75876],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75903,75904],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76207,76217],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[76312,76320],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[76389,76390],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76417,76418],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76488,76496],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[76565,76566],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76593,76594],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76777,76791],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[76910,76916],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[76983,76984],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77034,77040],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[77100,77101],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77184,77190],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[77257,77258],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77308,77314],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[77374,77375],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77589,77611],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[77759,77765],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[77832,77833],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77883,77889],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[77950,77951]},{"pos":[78006,78012],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[78072,78073],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78170,78176],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[78243,78244],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78294,78300],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[78361,78362]},{"pos":[78417,78423],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[78483,78484],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78729,78760],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[78926,78941],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[79017,79018],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79068,79074],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[79135,79136]},{"pos":[79191,79197],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[79257,79258],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79364,79379],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[79455,79456],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79506,79512],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[79573,79574]},{"pos":[79629,79635],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[79695,79696],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79926,79939],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[80040,80051],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[80123,80124],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80151,80152],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80225,80236],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[80308,80309],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80336,80337],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80512,80521],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[80614,80621],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[80689,80690],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80717,80718],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80787,80794],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[80862,80863],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80890,80891],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81066,81083],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[81192,81207],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[81283,81284],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81311,81312],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81389,81404],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[81480,81481],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81508,81509],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81804,81817],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[81934,81945],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[82004,82005],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82032,82033],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82114,82125],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[82184,82185],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82212,82213],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82568,82580],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[82713,82723],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[82790,82791],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82818,82819],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82908,82918],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[82985,82986],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83013,83014],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83355,83370],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[83574,83587],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[83649,83650],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83677,83678],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83756,83772],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[83837,83838],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83865,83866],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84244,84261],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[84473,84488],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[84552,84553],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84580,84581],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84661,84679],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[84746,84747],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84774,84775],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85010,85016],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[85135,85153],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[85354,85378],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[85557,85568],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[85627,85628],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85695,85706],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[85783,85784],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85897,85908],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[85967,85968],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86035,86046],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[86123,86124],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86352,86361],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[86567,86590],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[86785,86795],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[86862,86863],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86930,86941],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[87018,87019],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87140,87150],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[87217,87218],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87285,87296],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[87373,87374],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87627,87645],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[87867,87893],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[88200,88213],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[88275,88276],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88343,88354],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[88431,88432],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88542,88558],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[88623,88624],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88691,88702],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[88779,88780],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89069,89079],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[89279,89307],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[89622,89637],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[89701,89702],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89769,89780],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[89857,89858],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89970,89988],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[90055,90056],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90123,90134],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[90211,90212],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90474,90485],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[90631,90637],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[90795,90806],"content":"XmlDocument","needQuote":true,"nodes":[{"content":"XmlDocument","pos":[0,11]}]},{"pos":[91002,91012],"content":"Attributes","needQuote":true,"nodes":[{"content":"Attributes","pos":[0,10]}]},{"pos":[91225,91247],"content":"XmlAttributeCollection","needQuote":true,"nodes":[{"content":"XmlAttributeCollection","pos":[0,22]}]},{"pos":[91449,91456],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[91631,91640],"content":"InnerText","needQuote":true,"nodes":[{"content":"InnerText","pos":[0,9]}]},{"pos":[91852,91860],"content":"InnerXml","needQuote":true,"nodes":[{"content":"InnerXml","pos":[0,8]}]},{"pos":[92070,92079],"content":"LocalName","needQuote":true,"nodes":[{"content":"LocalName","pos":[0,9]}]},{"pos":[92287,92291],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[92492,92504],"content":"NamespaceURI","needQuote":true,"nodes":[{"content":"NamespaceURI","pos":[0,12]}]},{"pos":[92740,92751],"content":"NextSibling","needQuote":true,"nodes":[{"content":"NextSibling","pos":[0,11]}]},{"pos":[92987,92995],"content":"NodeType","needQuote":true,"nodes":[{"content":"NodeType","pos":[0,8]}]},{"pos":[93191,93202],"content":"XmlNodeType","needQuote":true,"nodes":[{"content":"XmlNodeType","pos":[0,11]}]},{"pos":[93401,93414],"content":"OwnerDocument","needQuote":true,"nodes":[{"content":"OwnerDocument","pos":[0,13]}]},{"pos":[93640,93650],"content":"ParentNode","needQuote":true,"nodes":[{"content":"ParentNode","pos":[0,10]}]},{"pos":[93863,93869],"content":"Prefix","needQuote":true,"nodes":[{"content":"Prefix","pos":[0,6]}]},{"pos":[94088,94106],"content":"CloneNode(Boolean)","needQuote":true,"nodes":[{"content":"CloneNode(Boolean)","pos":[0,18]}]},{"pos":[94243,94252],"content":"CloneNode","needQuote":true,"nodes":[{"content":"CloneNode","pos":[0,9]}]},{"pos":[94306,94307],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94358,94365],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[94426,94427],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94519,94528],"content":"CloneNode","needQuote":true,"nodes":[{"content":"CloneNode","pos":[0,9]}]},{"pos":[94582,94583],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94634,94641],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[94702,94703],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94903,94915],"content":"XmlAttribute","needQuote":true,"nodes":[{"content":"XmlAttribute","pos":[0,12]}]},{"pos":[95099,95110],"content":"XmlNodeList","needQuote":true,"nodes":[{"content":"XmlNodeList","pos":[0,11]}]},{"pos":[95305,95316],"content":"RemoveAll()","needQuote":true,"nodes":[{"content":"RemoveAll()","pos":[0,11]}]},{"pos":[95423,95432],"content":"RemoveAll","needQuote":true,"nodes":[{"content":"RemoveAll","pos":[0,9]}]},{"pos":[95486,95487],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95514,95515],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95591,95600],"content":"RemoveAll","needQuote":true,"nodes":[{"content":"RemoveAll","pos":[0,9]}]},{"pos":[95654,95655],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95682,95683],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95845,95850],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[96045,96070],"content":"WriteContentTo(XmlWriter)","needQuote":true,"nodes":[{"content":"WriteContentTo(XmlWriter)","pos":[0,25]}]},{"pos":[96229,96243],"content":"WriteContentTo","needQuote":true,"nodes":[{"content":"WriteContentTo","pos":[0,14]}]},{"pos":[96302,96303],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96360,96369],"content":"XmlWriter","needQuote":true,"nodes":[{"content":"XmlWriter","pos":[0,9]}]},{"pos":[96436,96437],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96540,96554],"content":"WriteContentTo","needQuote":true,"nodes":[{"content":"WriteContentTo","pos":[0,14]}]},{"pos":[96613,96614],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96671,96680],"content":"XmlWriter","needQuote":true,"nodes":[{"content":"XmlWriter","pos":[0,9]}]},{"pos":[96747,96748],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96963,96972],"content":"XmlWriter","needQuote":true,"nodes":[{"content":"XmlWriter","pos":[0,9]}]},{"pos":[97180,97198],"content":"WriteTo(XmlWriter)","needQuote":true,"nodes":[{"content":"WriteTo(XmlWriter)","pos":[0,18]}]},{"pos":[97343,97350],"content":"WriteTo","needQuote":true,"nodes":[{"content":"WriteTo","pos":[0,7]}]},{"pos":[97402,97403],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97460,97469],"content":"XmlWriter","needQuote":true,"nodes":[{"content":"XmlWriter","pos":[0,9]}]},{"pos":[97536,97537],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97633,97640],"content":"WriteTo","needQuote":true,"nodes":[{"content":"WriteTo","pos":[0,7]}]},{"pos":[97692,97693],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97750,97759],"content":"XmlWriter","needQuote":true,"nodes":[{"content":"XmlWriter","pos":[0,9]}]},{"pos":[97826,97827],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98010,98022],"content":"XmlException","needQuote":true,"nodes":[{"content":"XmlException","pos":[0,12]}]},{"pos":[98204,98221],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[98418,98443],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]}],"content":"items:\n- uid: System.Xml.XmlElement\n  commentId: T:System.Xml.XmlElement\n  id: XmlElement\n  parent: System.Xml\n  children:\n  - System.Xml.XmlElement.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)\n  - System.Xml.XmlElement.Attributes\n  - System.Xml.XmlElement.CloneNode(System.Boolean)\n  - System.Xml.XmlElement.GetAttribute(System.String)\n  - System.Xml.XmlElement.GetAttribute(System.String,System.String)\n  - System.Xml.XmlElement.GetAttributeNode(System.String)\n  - System.Xml.XmlElement.GetAttributeNode(System.String,System.String)\n  - System.Xml.XmlElement.GetElementsByTagName(System.String)\n  - System.Xml.XmlElement.GetElementsByTagName(System.String,System.String)\n  - System.Xml.XmlElement.HasAttribute(System.String)\n  - System.Xml.XmlElement.HasAttribute(System.String,System.String)\n  - System.Xml.XmlElement.HasAttributes\n  - System.Xml.XmlElement.InnerText\n  - System.Xml.XmlElement.InnerXml\n  - System.Xml.XmlElement.IsEmpty\n  - System.Xml.XmlElement.LocalName\n  - System.Xml.XmlElement.Name\n  - System.Xml.XmlElement.NamespaceURI\n  - System.Xml.XmlElement.NextSibling\n  - System.Xml.XmlElement.NodeType\n  - System.Xml.XmlElement.OwnerDocument\n  - System.Xml.XmlElement.ParentNode\n  - System.Xml.XmlElement.Prefix\n  - System.Xml.XmlElement.RemoveAll\n  - System.Xml.XmlElement.RemoveAllAttributes\n  - System.Xml.XmlElement.RemoveAttribute(System.String)\n  - System.Xml.XmlElement.RemoveAttribute(System.String,System.String)\n  - System.Xml.XmlElement.RemoveAttributeAt(System.Int32)\n  - System.Xml.XmlElement.RemoveAttributeNode(System.String,System.String)\n  - System.Xml.XmlElement.RemoveAttributeNode(System.Xml.XmlAttribute)\n  - System.Xml.XmlElement.SetAttribute(System.String,System.String)\n  - System.Xml.XmlElement.SetAttribute(System.String,System.String,System.String)\n  - System.Xml.XmlElement.SetAttributeNode(System.String,System.String)\n  - System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)\n  - System.Xml.XmlElement.WriteContentTo(System.Xml.XmlWriter)\n  - System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)\n  langs:\n  - csharp\n  - vb\n  name: XmlElement\n  fullName: System.Xml.XmlElement\n  type: Class\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XmlElement\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 177\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Represents an element.</p>\\n\"\n  syntax:\n    content: 'public class XmlElement : XmlLinkedNode, IEnumerable'\n    content.vb: >-\n      Public Class XmlElement\n          Inherits XmlLinkedNode\n          Implements IEnumerable\n  seealso:\n  - type: System.Xml.XmlDocument.CreateElement(System.String)\n    commentId: M:System.Xml.XmlDocument.CreateElement(System.String)\n  - type: System.Xml.XmlAttribute\n    commentId: T:System.Xml.XmlAttribute\n  - type: System.Xml.XmlDocument\n    commentId: T:System.Xml.XmlDocument\n  inheritance:\n  - System.Object\n  - System.Xml.XmlNode\n  - System.Xml.XmlLinkedNode\n  implements:\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Xml.XmlLinkedNode.PreviousSibling\n  - System.Xml.XmlNode.BaseURI\n  - System.Xml.XmlNode.ChildNodes\n  - System.Xml.XmlNode.FirstChild\n  - System.Xml.XmlNode.HasChildNodes\n  - System.Xml.XmlNode.IsReadOnly\n  - System.Xml.XmlNode.Item(System.String)\n  - System.Xml.XmlNode.Item(System.String,System.String)\n  - System.Xml.XmlNode.LastChild\n  - System.Xml.XmlNode.OuterXml\n  - System.Xml.XmlNode.PreviousText\n  - System.Xml.XmlNode.Value\n  - System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)\n  - System.Xml.XmlNode.GetEnumerator\n  - System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)\n  - System.Xml.XmlNode.GetPrefixOfNamespace(System.String)\n  - System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)\n  - System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)\n  - System.Xml.XmlNode.Normalize\n  - System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)\n  - System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)\n  - System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)\n  - System.Xml.XmlNode.Supports(System.String,System.String)\n  - System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: XmlElement\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Xml.XmlElement.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)\n  commentId: M:System.Xml.XmlElement.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)\n  id: '#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)'\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: XmlElement(String, String, String, XmlDocument)\n  fullName: System.Xml.XmlElement.XmlElement(System.String, System.String, System.String, System.Xml.XmlDocument)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 179\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Xml.XmlElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected XmlElement(string prefix, string localName, string namespaceURI, XmlDocument doc)\n    content.vb: Protected Sub New(prefix As String, localName As String, namespaceURI As String, doc As XmlDocument)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix; see the <xref href=\\\"System.Xml.XmlElement.Prefix\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property.</p>\\n\"\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name; see the <xref href=\\\"System.Xml.XmlElement.LocalName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property.</p>\\n\"\n    - id: namespaceURI\n      type: System.String\n      description: \"\\n<p>The namespace URI; see the <xref href=\\\"System.Xml.XmlElement.NamespaceURI\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property.</p>\\n\"\n    - id: doc\n      type: System.Xml.XmlDocument\n      description: \"\\n<p>The parent XML document.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: XmlElement.XmlElement(String, String, String, XmlDocument)\n- uid: System.Xml.XmlElement.Attributes\n  commentId: P:System.Xml.XmlElement.Attributes\n  id: Attributes\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: Attributes\n  fullName: System.Xml.XmlElement.Attributes\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Attributes\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 180\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets an <xref href=\\\"System.Xml.XmlAttributeCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the list of attributes for this node.</p>\\n\"\n  syntax:\n    content: public override XmlAttributeCollection Attributes { get; }\n    content.vb: Public Overrides ReadOnly Property Attributes As XmlAttributeCollection\n    parameters: []\n    return:\n      type: System.Xml.XmlAttributeCollection\n      description: \"\\n<p>\\n<xref href=\\\"System.Xml.XmlAttributeCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the list of attributes for this node.</p>\\n\"\n  overridden: System.Xml.XmlNode.Attributes\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: XmlElement.Attributes\n- uid: System.Xml.XmlElement.HasAttributes\n  commentId: P:System.Xml.XmlElement.HasAttributes\n  id: HasAttributes\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: HasAttributes\n  fullName: System.Xml.XmlElement.HasAttributes\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HasAttributes\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 181\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets a <strong>boolean</strong> value indicating whether the current node has any attributes.</p>\\n\"\n  syntax:\n    content: public virtual bool HasAttributes { get; }\n    content.vb: Public Overridable ReadOnly Property HasAttributes As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current node has attributes; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: XmlElement.HasAttributes\n- uid: System.Xml.XmlElement.InnerText\n  commentId: P:System.Xml.XmlElement.InnerText\n  id: InnerText\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: InnerText\n  fullName: System.Xml.XmlElement.InnerText\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InnerText\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 182\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets the concatenated values of the node and all its children.</p>\\n\"\n  syntax:\n    content: public override string InnerText { get; set; }\n    content.vb: Public Overrides Property InnerText As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The concatenated values of the node and all its children.</p>\\n\"\n  overridden: System.Xml.XmlNode.InnerText\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlElement.InnerText\n- uid: System.Xml.XmlElement.InnerXml\n  commentId: P:System.Xml.XmlElement.InnerXml\n  id: InnerXml\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: InnerXml\n  fullName: System.Xml.XmlElement.InnerXml\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InnerXml\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 183\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets the markup representing just the children of this node.</p>\\n\"\n  syntax:\n    content: public override string InnerXml { get; set; }\n    content.vb: Public Overrides Property InnerXml As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The markup of the children of this node.</p>\\n\"\n  overridden: System.Xml.XmlNode.InnerXml\n  exceptions:\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: \"\\n<p>The XML specified when setting this property is not well-formed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlElement.InnerXml\n- uid: System.Xml.XmlElement.IsEmpty\n  commentId: P:System.Xml.XmlElement.IsEmpty\n  id: IsEmpty\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: IsEmpty\n  fullName: System.Xml.XmlElement.IsEmpty\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsEmpty\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 184\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets the tag format of the element.</p>\\n\"\n  syntax:\n    content: public bool IsEmpty { get; set; }\n    content.vb: Public Property IsEmpty As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <strong>true</strong> if the element is to be serialized in the short tag format \\\"<item/>\\\"; <strong>false</strong> for the long format \\\"<item></item>\\\".</p>\\n<p>When setting this property, if set to <strong>true</strong>, the children of the element are removed and the element is serialized in the short tag format. If set to <strong>false</strong>, the value of the property is changed (regardless of whether or not the element has content); if the element is empty, it is serialized in the long format.</p>\\n<p>This property is a Microsoft extension to the Document Object Model (DOM).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: XmlElement.IsEmpty\n- uid: System.Xml.XmlElement.LocalName\n  commentId: P:System.Xml.XmlElement.LocalName\n  id: LocalName\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: LocalName\n  fullName: System.Xml.XmlElement.LocalName\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LocalName\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 185\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the local name of the current node.</p>\\n\"\n  syntax:\n    content: public override string LocalName { get; }\n    content.vb: Public Overrides ReadOnly Property LocalName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the current node with the prefix removed. For example, <strong>LocalName</strong> is book for the element <bk:book>.</p>\\n\"\n  overridden: System.Xml.XmlNode.LocalName\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: XmlElement.LocalName\n- uid: System.Xml.XmlElement.Name\n  commentId: P:System.Xml.XmlElement.Name\n  id: Name\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: Name\n  fullName: System.Xml.XmlElement.Name\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Name\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 186\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the qualified name of the node.</p>\\n\"\n  syntax:\n    content: public override string Name { get; }\n    content.vb: Public Overrides ReadOnly Property Name As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The qualified name of the node. For <strong>XmlElement</strong> nodes, this is the tag name of the element.</p>\\n\"\n  overridden: System.Xml.XmlNode.Name\n  seealso:\n  - type: System.Xml.XmlElement.LocalName\n    commentId: P:System.Xml.XmlElement.LocalName\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: XmlElement.Name\n- uid: System.Xml.XmlElement.NamespaceURI\n  commentId: P:System.Xml.XmlElement.NamespaceURI\n  id: NamespaceURI\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: NamespaceURI\n  fullName: System.Xml.XmlElement.NamespaceURI\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NamespaceURI\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 187\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the namespace URI of this node.</p>\\n\"\n  syntax:\n    content: public override string NamespaceURI { get; }\n    content.vb: Public Overrides ReadOnly Property NamespaceURI As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The namespace URI of this node. If there is no namespace URI, this property returns String.Empty.</p>\\n\"\n  overridden: System.Xml.XmlNode.NamespaceURI\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: XmlElement.NamespaceURI\n- uid: System.Xml.XmlElement.NextSibling\n  commentId: P:System.Xml.XmlElement.NextSibling\n  id: NextSibling\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: NextSibling\n  fullName: System.Xml.XmlElement.NextSibling\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NextSibling\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 188\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> immediately following this element.</p>\\n\"\n  syntax:\n    content: public override XmlNode NextSibling { get; }\n    content.vb: Public Overrides ReadOnly Property NextSibling As XmlNode\n    parameters: []\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The <strong>XmlNode</strong> immediately following this element.</p>\\n\"\n  overridden: System.Xml.XmlLinkedNode.NextSibling\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: XmlElement.NextSibling\n- uid: System.Xml.XmlElement.NodeType\n  commentId: P:System.Xml.XmlElement.NodeType\n  id: NodeType\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: NodeType\n  fullName: System.Xml.XmlElement.NodeType\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NodeType\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 189\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the type of the current node.</p>\\n\"\n  syntax:\n    content: public override XmlNodeType NodeType { get; }\n    content.vb: Public Overrides ReadOnly Property NodeType As XmlNodeType\n    parameters: []\n    return:\n      type: System.Xml.XmlNodeType\n      description: \"\\n<p>The node type. For <strong>XmlElement</strong> nodes, this value is XmlNodeType.Element.</p>\\n\"\n  overridden: System.Xml.XmlNode.NodeType\n  seealso:\n  - type: System.Xml.XmlNodeType\n    commentId: T:System.Xml.XmlNodeType\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: XmlElement.NodeType\n- uid: System.Xml.XmlElement.OwnerDocument\n  commentId: P:System.Xml.XmlElement.OwnerDocument\n  id: OwnerDocument\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: OwnerDocument\n  fullName: System.Xml.XmlElement.OwnerDocument\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OwnerDocument\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 190\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Xml.XmlDocument\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which this node belongs.</p>\\n\"\n  syntax:\n    content: public override XmlDocument OwnerDocument { get; }\n    content.vb: Public Overrides ReadOnly Property OwnerDocument As XmlDocument\n    parameters: []\n    return:\n      type: System.Xml.XmlDocument\n      description: \"\\n<p>The <strong>XmlDocument</strong> to which this element belongs.</p>\\n\"\n  overridden: System.Xml.XmlNode.OwnerDocument\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: XmlElement.OwnerDocument\n- uid: System.Xml.XmlElement.ParentNode\n  commentId: P:System.Xml.XmlElement.ParentNode\n  id: ParentNode\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: ParentNode\n  fullName: System.Xml.XmlElement.ParentNode\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ParentNode\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 191\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the parent of this node (for nodes that can have parents).</p>\\n\"\n  syntax:\n    content: public override XmlNode ParentNode { get; }\n    content.vb: Public Overrides ReadOnly Property ParentNode As XmlNode\n    parameters: []\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The <strong>XmlNode</strong> that is the parent of the current node. If a node has just been created and not yet added to the tree, or if it has been removed from the tree, the parent is <strong>null</strong>. For all other nodes, the value returned depends on the <xref href=\\\"System.Xml.XmlNode.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the node. The following table describes the possible return values for the <strong>ParentNode</strong> property.</p>\\n\"\n  overridden: System.Xml.XmlNode.ParentNode\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: XmlElement.ParentNode\n- uid: System.Xml.XmlElement.Prefix\n  commentId: P:System.Xml.XmlElement.Prefix\n  id: Prefix\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: Prefix\n  fullName: System.Xml.XmlElement.Prefix\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Prefix\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 192\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets the namespace prefix of this node.</p>\\n\"\n  syntax:\n    content: public override string Prefix { get; set; }\n    content.vb: Public Overrides Property Prefix As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The namespace prefix of this node. If there is no prefix, this property returns String.Empty.</p>\\n\"\n  overridden: System.Xml.XmlNode.Prefix\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>This node is read-only </p>\\n\"\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: \"\\n<p>The specified prefix contains an invalid character.</p>\\n<p>The specified prefix is malformed.</p>\\n<p>The namespaceURI of this node is <strong>null</strong>.</p>\\n<p>The specified prefix is \\\"xml\\\" and the namespaceURI of this node is different from http://www.w3.org/XML/1998/namespace. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlElement.Prefix\n- uid: System.Xml.XmlElement.CloneNode(System.Boolean)\n  commentId: M:System.Xml.XmlElement.CloneNode(System.Boolean)\n  id: CloneNode(System.Boolean)\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: CloneNode(Boolean)\n  fullName: System.Xml.XmlElement.CloneNode(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CloneNode\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 193\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Creates a duplicate of this node.</p>\\n\"\n  syntax:\n    content: public override XmlNode CloneNode(bool deep)\n    content.vb: Public Overrides Function CloneNode(deep As Boolean) As XmlNode\n    parameters:\n    - id: deep\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to recursively clone the subtree under the specified node; <strong>false</strong> to clone only the node itself (and its attributes if the node is an <strong>XmlElement</strong>). </p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The cloned node.</p>\\n\"\n  overridden: System.Xml.XmlNode.CloneNode(System.Boolean)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlElement.CloneNode(Boolean)\n- uid: System.Xml.XmlElement.GetAttribute(System.String)\n  commentId: M:System.Xml.XmlElement.GetAttribute(System.String)\n  id: GetAttribute(System.String)\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: GetAttribute(String)\n  fullName: System.Xml.XmlElement.GetAttribute(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetAttribute\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 194\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Returns the value for the attribute with the specified name.</p>\\n\"\n  syntax:\n    content: public virtual string GetAttribute(string name)\n    content.vb: Public Overridable Function GetAttribute(name As String) As String\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the attribute to retrieve. This is a qualified name. It is matched against the <strong>Name</strong> property of the matching node. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The value of the specified attribute. An empty string is returned if a matching attribute is not found or if the attribute does not have a specified or default value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlElement.GetAttribute(String)\n- uid: System.Xml.XmlElement.GetAttribute(System.String,System.String)\n  commentId: M:System.Xml.XmlElement.GetAttribute(System.String,System.String)\n  id: GetAttribute(System.String,System.String)\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: GetAttribute(String, String)\n  fullName: System.Xml.XmlElement.GetAttribute(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetAttribute\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 195\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Returns the value for the attribute with the specified local name and namespace URI.</p>\\n\"\n  syntax:\n    content: public virtual string GetAttribute(string localName, string namespaceURI)\n    content.vb: Public Overridable Function GetAttribute(localName As String, namespaceURI As String) As String\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the attribute to retrieve. </p>\\n\"\n    - id: namespaceURI\n      type: System.String\n      description: \"\\n<p>The namespace URI of the attribute to retrieve. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The value of the specified attribute. An empty string is returned if a matching attribute is not found or if the attribute does not have a specified or default value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlElement.GetAttribute(String, String)\n- uid: System.Xml.XmlElement.GetAttributeNode(System.String)\n  commentId: M:System.Xml.XmlElement.GetAttributeNode(System.String)\n  id: GetAttributeNode(System.String)\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: GetAttributeNode(String)\n  fullName: System.Xml.XmlElement.GetAttributeNode(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetAttributeNode\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 196\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Returns the <strong>XmlAttribute</strong> with the specified name.</p>\\n\"\n  syntax:\n    content: public virtual XmlAttribute GetAttributeNode(string name)\n    content.vb: Public Overridable Function GetAttributeNode(name As String) As XmlAttribute\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the attribute to retrieve. This is a qualified name. It is matched against the <strong>Name</strong> property of the matching node. </p>\\n\"\n    return:\n      type: System.Xml.XmlAttribute\n      description: \"\\n<p>The specified <strong>XmlAttribute</strong> or <strong>null</strong> if a matching attribute was not found.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlElement.GetAttributeNode(String)\n- uid: System.Xml.XmlElement.GetAttributeNode(System.String,System.String)\n  commentId: M:System.Xml.XmlElement.GetAttributeNode(System.String,System.String)\n  id: GetAttributeNode(System.String,System.String)\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: GetAttributeNode(String, String)\n  fullName: System.Xml.XmlElement.GetAttributeNode(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetAttributeNode\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 197\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Returns the <xref href=\\\"System.Xml.XmlAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified local name and namespace URI.</p>\\n\"\n  syntax:\n    content: public virtual XmlAttribute GetAttributeNode(string localName, string namespaceURI)\n    content.vb: Public Overridable Function GetAttributeNode(localName As String, namespaceURI As String) As XmlAttribute\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the attribute. </p>\\n\"\n    - id: namespaceURI\n      type: System.String\n      description: \"\\n<p>The namespace URI of the attribute. </p>\\n\"\n    return:\n      type: System.Xml.XmlAttribute\n      description: \"\\n<p>The specified <strong>XmlAttribute</strong> or <strong>null</strong> if a matching attribute was not found.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlElement.GetAttributeNode(String, String)\n- uid: System.Xml.XmlElement.GetElementsByTagName(System.String)\n  commentId: M:System.Xml.XmlElement.GetElementsByTagName(System.String)\n  id: GetElementsByTagName(System.String)\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: GetElementsByTagName(String)\n  fullName: System.Xml.XmlElement.GetElementsByTagName(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetElementsByTagName\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 198\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Xml.XmlNodeList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing a list of all descendant elements that match the specified <xref href=\\\"System.Xml.XmlElement.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual XmlNodeList GetElementsByTagName(string name)\n    content.vb: Public Overridable Function GetElementsByTagName(name As String) As XmlNodeList\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name tag to match. This is a qualified name. It is matched against the <strong>Name</strong> property of the matching node. The asterisk (*) is a special value that matches all tags. </p>\\n\"\n    return:\n      type: System.Xml.XmlNodeList\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XmlNodeList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing a list of all matching nodes. The list is empty if there are no matching nodes.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlElement.GetElementsByTagName(String)\n- uid: System.Xml.XmlElement.GetElementsByTagName(System.String,System.String)\n  commentId: M:System.Xml.XmlElement.GetElementsByTagName(System.String,System.String)\n  id: GetElementsByTagName(System.String,System.String)\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: GetElementsByTagName(String, String)\n  fullName: System.Xml.XmlElement.GetElementsByTagName(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetElementsByTagName\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 199\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Xml.XmlNodeList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing a list of all descendant elements that match the specified <xref href=\\\"System.Xml.XmlElement.LocalName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Xml.XmlElement.NamespaceURI\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual XmlNodeList GetElementsByTagName(string localName, string namespaceURI)\n    content.vb: Public Overridable Function GetElementsByTagName(localName As String, namespaceURI As String) As XmlNodeList\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name to match. The asterisk (*) is a special value that matches all tags. </p>\\n\"\n    - id: namespaceURI\n      type: System.String\n      description: \"\\n<p>The namespace URI to match. </p>\\n\"\n    return:\n      type: System.Xml.XmlNodeList\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XmlNodeList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing a list of all matching nodes. The list is empty if there are no matching nodes.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlElement.GetElementsByTagName(String, String)\n- uid: System.Xml.XmlElement.HasAttribute(System.String)\n  commentId: M:System.Xml.XmlElement.HasAttribute(System.String)\n  id: HasAttribute(System.String)\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: HasAttribute(String)\n  fullName: System.Xml.XmlElement.HasAttribute(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HasAttribute\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 200\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Determines whether the current node has an attribute with the specified name.</p>\\n\"\n  syntax:\n    content: public virtual bool HasAttribute(string name)\n    content.vb: Public Overridable Function HasAttribute(name As String) As Boolean\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the attribute to find. This is a qualified name. It is matched against the <strong>Name</strong> property of the matching node. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current node has the specified attribute; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlElement.HasAttribute(String)\n- uid: System.Xml.XmlElement.HasAttribute(System.String,System.String)\n  commentId: M:System.Xml.XmlElement.HasAttribute(System.String,System.String)\n  id: HasAttribute(System.String,System.String)\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: HasAttribute(String, String)\n  fullName: System.Xml.XmlElement.HasAttribute(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HasAttribute\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 201\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Determines whether the current node has an attribute with the specified local name and namespace URI.</p>\\n\"\n  syntax:\n    content: public virtual bool HasAttribute(string localName, string namespaceURI)\n    content.vb: Public Overridable Function HasAttribute(localName As String, namespaceURI As String) As Boolean\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the attribute to find. </p>\\n\"\n    - id: namespaceURI\n      type: System.String\n      description: \"\\n<p>The namespace URI of the attribute to find. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current node has the specified attribute; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlElement.HasAttribute(String, String)\n- uid: System.Xml.XmlElement.RemoveAll\n  commentId: M:System.Xml.XmlElement.RemoveAll\n  id: RemoveAll\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: RemoveAll()\n  fullName: System.Xml.XmlElement.RemoveAll()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveAll\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 202\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Removes all specified attributes and children of the current node. Default attributes are not removed.</p>\\n\"\n  syntax:\n    content: public override void RemoveAll()\n    content.vb: Public Overrides Sub RemoveAll\n  overridden: System.Xml.XmlNode.RemoveAll\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlElement.RemoveAll()\n- uid: System.Xml.XmlElement.RemoveAllAttributes\n  commentId: M:System.Xml.XmlElement.RemoveAllAttributes\n  id: RemoveAllAttributes\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: RemoveAllAttributes()\n  fullName: System.Xml.XmlElement.RemoveAllAttributes()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveAllAttributes\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 203\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Removes all specified attributes from the element. Default attributes are not removed.</p>\\n\"\n  syntax:\n    content: public virtual void RemoveAllAttributes()\n    content.vb: Public Overridable Sub RemoveAllAttributes\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlElement.RemoveAllAttributes()\n- uid: System.Xml.XmlElement.RemoveAttribute(System.String)\n  commentId: M:System.Xml.XmlElement.RemoveAttribute(System.String)\n  id: RemoveAttribute(System.String)\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: RemoveAttribute(String)\n  fullName: System.Xml.XmlElement.RemoveAttribute(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveAttribute\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 204\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Removes an attribute by name.</p>\\n\"\n  syntax:\n    content: public virtual void RemoveAttribute(string name)\n    content.vb: Public Overridable Sub RemoveAttribute(name As String)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the attribute to remove.This is a qualified name. It is matched against the <strong>Name</strong> property of the matching node. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The node is read-only. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlElement.RemoveAttribute(String)\n- uid: System.Xml.XmlElement.RemoveAttribute(System.String,System.String)\n  commentId: M:System.Xml.XmlElement.RemoveAttribute(System.String,System.String)\n  id: RemoveAttribute(System.String,System.String)\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: RemoveAttribute(String, String)\n  fullName: System.Xml.XmlElement.RemoveAttribute(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveAttribute\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 205\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Removes an attribute with the specified local name and namespace URI. (If the removed attribute has a default value, it is immediately replaced).</p>\\n\"\n  syntax:\n    content: public virtual void RemoveAttribute(string localName, string namespaceURI)\n    content.vb: Public Overridable Sub RemoveAttribute(localName As String, namespaceURI As String)\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the attribute to remove. </p>\\n\"\n    - id: namespaceURI\n      type: System.String\n      description: \"\\n<p>The namespace URI of the attribute to remove. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The node is read-only. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlElement.RemoveAttribute(String, String)\n- uid: System.Xml.XmlElement.RemoveAttributeAt(System.Int32)\n  commentId: M:System.Xml.XmlElement.RemoveAttributeAt(System.Int32)\n  id: RemoveAttributeAt(System.Int32)\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: RemoveAttributeAt(Int32)\n  fullName: System.Xml.XmlElement.RemoveAttributeAt(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveAttributeAt\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 206\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Removes the attribute node with the specified index from the element. (If the removed attribute has a default value, it is immediately replaced).</p>\\n\"\n  syntax:\n    content: public virtual XmlNode RemoveAttributeAt(int i)\n    content.vb: Public Overridable Function RemoveAttributeAt(i As Integer) As XmlNode\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The index of the node to remove. The first node has index 0. </p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The attribute node removed or <strong>null</strong> if there is no node at the given index.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlElement.RemoveAttributeAt(Int32)\n- uid: System.Xml.XmlElement.RemoveAttributeNode(System.String,System.String)\n  commentId: M:System.Xml.XmlElement.RemoveAttributeNode(System.String,System.String)\n  id: RemoveAttributeNode(System.String,System.String)\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: RemoveAttributeNode(String, String)\n  fullName: System.Xml.XmlElement.RemoveAttributeNode(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveAttributeNode\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 207\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Removes the <xref href=\\\"System.Xml.XmlAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> specified by the local name and namespace URI. (If the removed attribute has a default value, it is immediately replaced).</p>\\n\"\n  syntax:\n    content: public virtual XmlAttribute RemoveAttributeNode(string localName, string namespaceURI)\n    content.vb: Public Overridable Function RemoveAttributeNode(localName As String, namespaceURI As String) As XmlAttribute\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the attribute. </p>\\n\"\n    - id: namespaceURI\n      type: System.String\n      description: \"\\n<p>The namespace URI of the attribute. </p>\\n\"\n    return:\n      type: System.Xml.XmlAttribute\n      description: \"\\n<p>The removed <strong>XmlAttribute</strong> or <strong>null</strong> if the <strong>XmlElement</strong> does not have a matching attribute node.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>This node is read-only. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlElement.RemoveAttributeNode(String, String)\n- uid: System.Xml.XmlElement.RemoveAttributeNode(System.Xml.XmlAttribute)\n  commentId: M:System.Xml.XmlElement.RemoveAttributeNode(System.Xml.XmlAttribute)\n  id: RemoveAttributeNode(System.Xml.XmlAttribute)\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: RemoveAttributeNode(XmlAttribute)\n  fullName: System.Xml.XmlElement.RemoveAttributeNode(System.Xml.XmlAttribute)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveAttributeNode\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 208\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Removes the specified <xref href=\\\"System.Xml.XmlAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual XmlAttribute RemoveAttributeNode(XmlAttribute oldAttr)\n    content.vb: Public Overridable Function RemoveAttributeNode(oldAttr As XmlAttribute) As XmlAttribute\n    parameters:\n    - id: oldAttr\n      type: System.Xml.XmlAttribute\n      description: \"\\n<p>The <strong>XmlAttribute</strong> node to remove. If the removed attribute has a default value, it is immediately replaced. </p>\\n\"\n    return:\n      type: System.Xml.XmlAttribute\n      description: \"\\n<p>The removed <strong>XmlAttribute</strong> or <strong>null</strong> if <em>oldAttr</em> is not an attribute node of the <strong>XmlElement</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>This node is read-only. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlElement.RemoveAttributeNode(XmlAttribute)\n- uid: System.Xml.XmlElement.SetAttribute(System.String,System.String)\n  commentId: M:System.Xml.XmlElement.SetAttribute(System.String,System.String)\n  id: SetAttribute(System.String,System.String)\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: SetAttribute(String, String)\n  fullName: System.Xml.XmlElement.SetAttribute(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetAttribute\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 209\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Sets the value of the attribute with the specified name.</p>\\n\"\n  syntax:\n    content: public virtual void SetAttribute(string name, string value)\n    content.vb: Public Overridable Sub SetAttribute(name As String, value As String)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the attribute to create or alter. This is a qualified name. If the name contains a colon it is parsed into prefix and local name components. </p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The value to set for the attribute. </p>\\n\"\n  exceptions:\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: \"\\n<p>The specified name contains an invalid character. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The node is read-only. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlElement.SetAttribute(String, String)\n- uid: System.Xml.XmlElement.SetAttribute(System.String,System.String,System.String)\n  commentId: M:System.Xml.XmlElement.SetAttribute(System.String,System.String,System.String)\n  id: SetAttribute(System.String,System.String,System.String)\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: SetAttribute(String, String, String)\n  fullName: System.Xml.XmlElement.SetAttribute(System.String, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetAttribute\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 210\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Sets the value of the attribute with the specified local name and namespace URI.</p>\\n\"\n  syntax:\n    content: public virtual string SetAttribute(string localName, string namespaceURI, string value)\n    content.vb: Public Overridable Function SetAttribute(localName As String, namespaceURI As String, value As String) As String\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the attribute. </p>\\n\"\n    - id: namespaceURI\n      type: System.String\n      description: \"\\n<p>The namespace URI of the attribute. </p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The value to set for the attribute. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The attribute value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlElement.SetAttribute(String, String, String)\n- uid: System.Xml.XmlElement.SetAttributeNode(System.String,System.String)\n  commentId: M:System.Xml.XmlElement.SetAttributeNode(System.String,System.String)\n  id: SetAttributeNode(System.String,System.String)\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: SetAttributeNode(String, String)\n  fullName: System.Xml.XmlElement.SetAttributeNode(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetAttributeNode\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 211\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Adds the specified <xref href=\\\"System.Xml.XmlAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual XmlAttribute SetAttributeNode(string localName, string namespaceURI)\n    content.vb: Public Overridable Function SetAttributeNode(localName As String, namespaceURI As String) As XmlAttribute\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the attribute. </p>\\n\"\n    - id: namespaceURI\n      type: System.String\n      description: \"\\n<p>The namespace URI of the attribute. </p>\\n\"\n    return:\n      type: System.Xml.XmlAttribute\n      description: \"\\n<p>The <strong>XmlAttribute</strong> to add.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlElement.SetAttributeNode(String, String)\n- uid: System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)\n  commentId: M:System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)\n  id: SetAttributeNode(System.Xml.XmlAttribute)\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: SetAttributeNode(XmlAttribute)\n  fullName: System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetAttributeNode\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 212\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Adds the specified <xref href=\\\"System.Xml.XmlAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual XmlAttribute SetAttributeNode(XmlAttribute newAttr)\n    content.vb: Public Overridable Function SetAttributeNode(newAttr As XmlAttribute) As XmlAttribute\n    parameters:\n    - id: newAttr\n      type: System.Xml.XmlAttribute\n      description: \"\\n<p>The <strong>XmlAttribute</strong> node to add to the attribute collection for this element. </p>\\n\"\n    return:\n      type: System.Xml.XmlAttribute\n      description: \"\\n<p>If the attribute replaces an existing attribute with the same name, the old <strong>XmlAttribute</strong> is returned; otherwise, <strong>null</strong> is returned.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>newAttr</em> was created from a different document than the one that created this node. Or this node is read-only. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <em>newAttr</em> is already an attribute of another <strong>XmlElement</strong> object. You must explicitly clone <strong>XmlAttribute</strong> nodes to re-use them in other <strong>XmlElement</strong> objects. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlElement.SetAttributeNode(XmlAttribute)\n- uid: System.Xml.XmlElement.WriteContentTo(System.Xml.XmlWriter)\n  commentId: M:System.Xml.XmlElement.WriteContentTo(System.Xml.XmlWriter)\n  id: WriteContentTo(System.Xml.XmlWriter)\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: WriteContentTo(XmlWriter)\n  fullName: System.Xml.XmlElement.WriteContentTo(System.Xml.XmlWriter)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteContentTo\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 213\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Saves all the children of the node to the specified <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override void WriteContentTo(XmlWriter w)\n    content.vb: Public Overrides Sub WriteContentTo(w As XmlWriter)\n    parameters:\n    - id: w\n      type: System.Xml.XmlWriter\n      description: \"\\n<p>The <strong>XmlWriter</strong> to which you want to save. </p>\\n\"\n  overridden: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)\n  seealso:\n  - type: System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)\n    commentId: M:System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlElement.WriteContentTo(XmlWriter)\n- uid: System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)\n  commentId: M:System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)\n  id: WriteTo(System.Xml.XmlWriter)\n  parent: System.Xml.XmlElement\n  langs:\n  - csharp\n  - vb\n  name: WriteTo(XmlWriter)\n  fullName: System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteTo\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 214\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Saves the current node to the specified <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override void WriteTo(XmlWriter w)\n    content.vb: Public Overrides Sub WriteTo(w As XmlWriter)\n    parameters:\n    - id: w\n      type: System.Xml.XmlWriter\n      description: \"\\n<p>The <strong>XmlWriter</strong> to which you want to save. </p>\\n\"\n  overridden: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlElement.WriteTo(XmlWriter)\nreferences:\n- uid: System.Xml\n  isExternal: false\n  name: System.Xml\n  fullName: System.Xml\n  commentId: N:System.Xml\n  nameWithType: System.Xml\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Xml.XmlNode\n  parent: System.Xml\n  isExternal: false\n  name: XmlNode\n  fullName: System.Xml.XmlNode\n  commentId: T:System.Xml.XmlNode\n  nameWithType: XmlNode\n- uid: System.Xml.XmlLinkedNode\n  parent: System.Xml\n  isExternal: false\n  name: XmlLinkedNode\n  fullName: System.Xml.XmlLinkedNode\n  commentId: T:System.Xml.XmlLinkedNode\n  nameWithType: XmlLinkedNode\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  commentId: T:System.Collections.IEnumerable\n  nameWithType: IEnumerable\n- uid: System.Xml.XmlLinkedNode.PreviousSibling\n  parent: System.Xml.XmlLinkedNode\n  isExternal: false\n  name: PreviousSibling\n  fullName: System.Xml.XmlLinkedNode.PreviousSibling\n  commentId: P:System.Xml.XmlLinkedNode.PreviousSibling\n  nameWithType: XmlLinkedNode.PreviousSibling\n- uid: System.Xml.XmlNode.BaseURI\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: BaseURI\n  fullName: System.Xml.XmlNode.BaseURI\n  commentId: P:System.Xml.XmlNode.BaseURI\n  nameWithType: XmlNode.BaseURI\n- uid: System.Xml.XmlNode.ChildNodes\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: ChildNodes\n  fullName: System.Xml.XmlNode.ChildNodes\n  commentId: P:System.Xml.XmlNode.ChildNodes\n  nameWithType: XmlNode.ChildNodes\n- uid: System.Xml.XmlNode.FirstChild\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: FirstChild\n  fullName: System.Xml.XmlNode.FirstChild\n  commentId: P:System.Xml.XmlNode.FirstChild\n  nameWithType: XmlNode.FirstChild\n- uid: System.Xml.XmlNode.HasChildNodes\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: HasChildNodes\n  fullName: System.Xml.XmlNode.HasChildNodes\n  commentId: P:System.Xml.XmlNode.HasChildNodes\n  nameWithType: XmlNode.HasChildNodes\n- uid: System.Xml.XmlNode.IsReadOnly\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: IsReadOnly\n  fullName: System.Xml.XmlNode.IsReadOnly\n  commentId: P:System.Xml.XmlNode.IsReadOnly\n  nameWithType: XmlNode.IsReadOnly\n- uid: System.Xml.XmlNode.Item(System.String)\n  parent: System.Xml.XmlNode\n  isExternal: true\n  name: Item[String]\n  fullName: System.Xml.XmlNode.Item[System.String]\n  fullname.vb: System.Xml.XmlNode.Item(System.String)\n  name.vb: Item(String)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.Item(System.String)\n    name: Item\n    fullName: System.Xml.XmlNode.Item\n  - name: '['\n    fullName: '['\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Xml.XmlNode.Item(System.String)\n    name: Item\n    fullName: System.Xml.XmlNode.Item\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: P:System.Xml.XmlNode.Item(System.String)\n  nameWithType: XmlNode.Item[String]\n  nameWithType.vb: XmlNode.Item(String)\n- uid: System.Xml.XmlNode.Item(System.String,System.String)\n  parent: System.Xml.XmlNode\n  isExternal: true\n  name: Item[String, String]\n  fullName: System.Xml.XmlNode.Item[System.String, System.String]\n  fullname.vb: System.Xml.XmlNode.Item(System.String, System.String)\n  name.vb: Item(String, String)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.Item(System.String,System.String)\n    name: Item\n    fullName: System.Xml.XmlNode.Item\n  - name: '['\n    fullName: '['\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Xml.XmlNode.Item(System.String,System.String)\n    name: Item\n    fullName: System.Xml.XmlNode.Item\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: P:System.Xml.XmlNode.Item(System.String,System.String)\n  nameWithType: XmlNode.Item[String, String]\n  nameWithType.vb: XmlNode.Item(String, String)\n- uid: System.Xml.XmlNode.LastChild\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: LastChild\n  fullName: System.Xml.XmlNode.LastChild\n  commentId: P:System.Xml.XmlNode.LastChild\n  nameWithType: XmlNode.LastChild\n- uid: System.Xml.XmlNode.OuterXml\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: OuterXml\n  fullName: System.Xml.XmlNode.OuterXml\n  commentId: P:System.Xml.XmlNode.OuterXml\n  nameWithType: XmlNode.OuterXml\n- uid: System.Xml.XmlNode.PreviousText\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: PreviousText\n  fullName: System.Xml.XmlNode.PreviousText\n  commentId: P:System.Xml.XmlNode.PreviousText\n  nameWithType: XmlNode.PreviousText\n- uid: System.Xml.XmlNode.Value\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: Value\n  fullName: System.Xml.XmlNode.Value\n  commentId: P:System.Xml.XmlNode.Value\n  nameWithType: XmlNode.Value\n- uid: System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: AppendChild(XmlNode)\n  fullName: System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)\n    name: AppendChild\n    fullName: System.Xml.XmlNode.AppendChild\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)\n    name: AppendChild\n    fullName: System.Xml.XmlNode.AppendChild\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)\n  nameWithType: XmlNode.AppendChild(XmlNode)\n- uid: System.Xml.XmlNode.GetEnumerator\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Xml.XmlNode.GetEnumerator()\n  spec.csharp:\n  - uid: System.Xml.XmlNode.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Xml.XmlNode.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Xml.XmlNode.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.GetEnumerator\n  nameWithType: XmlNode.GetEnumerator()\n- uid: System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)\n  parent: System.Xml.XmlNode\n  isExternal: true\n  name: GetNamespaceOfPrefix(String)\n  fullName: System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)\n    name: GetNamespaceOfPrefix\n    fullName: System.Xml.XmlNode.GetNamespaceOfPrefix\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)\n    name: GetNamespaceOfPrefix\n    fullName: System.Xml.XmlNode.GetNamespaceOfPrefix\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)\n  nameWithType: XmlNode.GetNamespaceOfPrefix(String)\n- uid: System.Xml.XmlNode.GetPrefixOfNamespace(System.String)\n  parent: System.Xml.XmlNode\n  isExternal: true\n  name: GetPrefixOfNamespace(String)\n  fullName: System.Xml.XmlNode.GetPrefixOfNamespace(System.String)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.GetPrefixOfNamespace(System.String)\n    name: GetPrefixOfNamespace\n    fullName: System.Xml.XmlNode.GetPrefixOfNamespace\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.GetPrefixOfNamespace(System.String)\n    name: GetPrefixOfNamespace\n    fullName: System.Xml.XmlNode.GetPrefixOfNamespace\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.GetPrefixOfNamespace(System.String)\n  nameWithType: XmlNode.GetPrefixOfNamespace(String)\n- uid: System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: InsertAfter(XmlNode, XmlNode)\n  fullName: System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode, System.Xml.XmlNode)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)\n    name: InsertAfter\n    fullName: System.Xml.XmlNode.InsertAfter\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: ', '\n    fullName: ', '\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)\n    name: InsertAfter\n    fullName: System.Xml.XmlNode.InsertAfter\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: ', '\n    fullName: ', '\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)\n  nameWithType: XmlNode.InsertAfter(XmlNode, XmlNode)\n- uid: System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: InsertBefore(XmlNode, XmlNode)\n  fullName: System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode, System.Xml.XmlNode)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)\n    name: InsertBefore\n    fullName: System.Xml.XmlNode.InsertBefore\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: ', '\n    fullName: ', '\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)\n    name: InsertBefore\n    fullName: System.Xml.XmlNode.InsertBefore\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: ', '\n    fullName: ', '\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)\n  nameWithType: XmlNode.InsertBefore(XmlNode, XmlNode)\n- uid: System.Xml.XmlNode.Normalize\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: Normalize()\n  fullName: System.Xml.XmlNode.Normalize()\n  spec.csharp:\n  - uid: System.Xml.XmlNode.Normalize\n    name: Normalize\n    fullName: System.Xml.XmlNode.Normalize\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.Normalize\n    name: Normalize\n    fullName: System.Xml.XmlNode.Normalize\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.Normalize\n  nameWithType: XmlNode.Normalize()\n- uid: System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: PrependChild(XmlNode)\n  fullName: System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)\n    name: PrependChild\n    fullName: System.Xml.XmlNode.PrependChild\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)\n    name: PrependChild\n    fullName: System.Xml.XmlNode.PrependChild\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)\n  nameWithType: XmlNode.PrependChild(XmlNode)\n- uid: System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: RemoveChild(XmlNode)\n  fullName: System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)\n    name: RemoveChild\n    fullName: System.Xml.XmlNode.RemoveChild\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)\n    name: RemoveChild\n    fullName: System.Xml.XmlNode.RemoveChild\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)\n  nameWithType: XmlNode.RemoveChild(XmlNode)\n- uid: System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: ReplaceChild(XmlNode, XmlNode)\n  fullName: System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode, System.Xml.XmlNode)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)\n    name: ReplaceChild\n    fullName: System.Xml.XmlNode.ReplaceChild\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: ', '\n    fullName: ', '\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)\n    name: ReplaceChild\n    fullName: System.Xml.XmlNode.ReplaceChild\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: ', '\n    fullName: ', '\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)\n  nameWithType: XmlNode.ReplaceChild(XmlNode, XmlNode)\n- uid: System.Xml.XmlNode.Supports(System.String,System.String)\n  parent: System.Xml.XmlNode\n  isExternal: true\n  name: Supports(String, String)\n  fullName: System.Xml.XmlNode.Supports(System.String, System.String)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.Supports(System.String,System.String)\n    name: Supports\n    fullName: System.Xml.XmlNode.Supports\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.Supports(System.String,System.String)\n    name: Supports\n    fullName: System.Xml.XmlNode.Supports\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.Supports(System.String,System.String)\n  nameWithType: XmlNode.Supports(String, String)\n- uid: System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: IEnumerable.GetEnumerator()\n  fullName: System.Xml.XmlNode.System.Collections.IEnumerable.GetEnumerator()\n  name.vb: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator\n    name: IEnumerable.GetEnumerator\n    fullName: System.Xml.XmlNode.System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator\n    name: System.Collections.IEnumerable.GetEnumerator\n    fullName: System.Xml.XmlNode.System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator\n  nameWithType: XmlNode.IEnumerable.GetEnumerator()\n  nameWithType.vb: XmlNode.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  nameWithType: Queryable.AsQueryable()\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel()\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  commentId: N:System.Collections\n  nameWithType: System.Collections\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  commentId: T:System.Linq.Queryable\n  nameWithType: Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  commentId: T:System.Linq.Enumerable\n  nameWithType: Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  commentId: N:System.Linq\n  nameWithType: System.Linq\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Xml.XmlDocument\n  parent: System.Xml\n  isExternal: false\n  name: XmlDocument\n  fullName: System.Xml.XmlDocument\n  commentId: T:System.Xml.XmlDocument\n  nameWithType: XmlDocument\n- uid: System.Xml.XmlNode.Attributes\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: Attributes\n  fullName: System.Xml.XmlNode.Attributes\n  commentId: P:System.Xml.XmlNode.Attributes\n  nameWithType: XmlNode.Attributes\n- uid: System.Xml.XmlAttributeCollection\n  parent: System.Xml\n  isExternal: false\n  name: XmlAttributeCollection\n  fullName: System.Xml.XmlAttributeCollection\n  commentId: T:System.Xml.XmlAttributeCollection\n  nameWithType: XmlAttributeCollection\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Xml.XmlNode.InnerText\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: InnerText\n  fullName: System.Xml.XmlNode.InnerText\n  commentId: P:System.Xml.XmlNode.InnerText\n  nameWithType: XmlNode.InnerText\n- uid: System.Xml.XmlNode.InnerXml\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: InnerXml\n  fullName: System.Xml.XmlNode.InnerXml\n  commentId: P:System.Xml.XmlNode.InnerXml\n  nameWithType: XmlNode.InnerXml\n- uid: System.Xml.XmlNode.LocalName\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: LocalName\n  fullName: System.Xml.XmlNode.LocalName\n  commentId: P:System.Xml.XmlNode.LocalName\n  nameWithType: XmlNode.LocalName\n- uid: System.Xml.XmlNode.Name\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: Name\n  fullName: System.Xml.XmlNode.Name\n  commentId: P:System.Xml.XmlNode.Name\n  nameWithType: XmlNode.Name\n- uid: System.Xml.XmlNode.NamespaceURI\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: NamespaceURI\n  fullName: System.Xml.XmlNode.NamespaceURI\n  commentId: P:System.Xml.XmlNode.NamespaceURI\n  nameWithType: XmlNode.NamespaceURI\n- uid: System.Xml.XmlLinkedNode.NextSibling\n  parent: System.Xml.XmlLinkedNode\n  isExternal: false\n  name: NextSibling\n  fullName: System.Xml.XmlLinkedNode.NextSibling\n  commentId: P:System.Xml.XmlLinkedNode.NextSibling\n  nameWithType: XmlLinkedNode.NextSibling\n- uid: System.Xml.XmlNode.NodeType\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: NodeType\n  fullName: System.Xml.XmlNode.NodeType\n  commentId: P:System.Xml.XmlNode.NodeType\n  nameWithType: XmlNode.NodeType\n- uid: System.Xml.XmlNodeType\n  parent: System.Xml\n  isExternal: false\n  name: XmlNodeType\n  fullName: System.Xml.XmlNodeType\n  commentId: T:System.Xml.XmlNodeType\n  nameWithType: XmlNodeType\n- uid: System.Xml.XmlNode.OwnerDocument\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: OwnerDocument\n  fullName: System.Xml.XmlNode.OwnerDocument\n  commentId: P:System.Xml.XmlNode.OwnerDocument\n  nameWithType: XmlNode.OwnerDocument\n- uid: System.Xml.XmlNode.ParentNode\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: ParentNode\n  fullName: System.Xml.XmlNode.ParentNode\n  commentId: P:System.Xml.XmlNode.ParentNode\n  nameWithType: XmlNode.ParentNode\n- uid: System.Xml.XmlNode.Prefix\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: Prefix\n  fullName: System.Xml.XmlNode.Prefix\n  commentId: P:System.Xml.XmlNode.Prefix\n  nameWithType: XmlNode.Prefix\n- uid: System.Xml.XmlNode.CloneNode(System.Boolean)\n  parent: System.Xml.XmlNode\n  isExternal: true\n  name: CloneNode(Boolean)\n  fullName: System.Xml.XmlNode.CloneNode(System.Boolean)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.CloneNode(System.Boolean)\n    name: CloneNode\n    fullName: System.Xml.XmlNode.CloneNode\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.CloneNode(System.Boolean)\n    name: CloneNode\n    fullName: System.Xml.XmlNode.CloneNode\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.CloneNode(System.Boolean)\n  nameWithType: XmlNode.CloneNode(Boolean)\n- uid: System.Xml.XmlAttribute\n  parent: System.Xml\n  isExternal: false\n  name: XmlAttribute\n  fullName: System.Xml.XmlAttribute\n  commentId: T:System.Xml.XmlAttribute\n  nameWithType: XmlAttribute\n- uid: System.Xml.XmlNodeList\n  parent: System.Xml\n  isExternal: false\n  name: XmlNodeList\n  fullName: System.Xml.XmlNodeList\n  commentId: T:System.Xml.XmlNodeList\n  nameWithType: XmlNodeList\n- uid: System.Xml.XmlNode.RemoveAll\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: RemoveAll()\n  fullName: System.Xml.XmlNode.RemoveAll()\n  spec.csharp:\n  - uid: System.Xml.XmlNode.RemoveAll\n    name: RemoveAll\n    fullName: System.Xml.XmlNode.RemoveAll\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.RemoveAll\n    name: RemoveAll\n    fullName: System.Xml.XmlNode.RemoveAll\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.RemoveAll\n  nameWithType: XmlNode.RemoveAll()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)\n  parent: System.Xml.XmlNode\n  isExternal: true\n  name: WriteContentTo(XmlWriter)\n  fullName: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)\n    name: WriteContentTo\n    fullName: System.Xml.XmlNode.WriteContentTo\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlWriter\n    name: XmlWriter\n    fullName: System.Xml.XmlWriter\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)\n    name: WriteContentTo\n    fullName: System.Xml.XmlNode.WriteContentTo\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlWriter\n    name: XmlWriter\n    fullName: System.Xml.XmlWriter\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)\n  nameWithType: XmlNode.WriteContentTo(XmlWriter)\n- uid: System.Xml.XmlWriter\n  parent: System.Xml\n  isExternal: false\n  name: XmlWriter\n  fullName: System.Xml.XmlWriter\n  commentId: T:System.Xml.XmlWriter\n  nameWithType: XmlWriter\n- uid: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)\n  parent: System.Xml.XmlNode\n  isExternal: true\n  name: WriteTo(XmlWriter)\n  fullName: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)\n    name: WriteTo\n    fullName: System.Xml.XmlNode.WriteTo\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlWriter\n    name: XmlWriter\n    fullName: System.Xml.XmlWriter\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)\n    name: WriteTo\n    fullName: System.Xml.XmlNode.WriteTo\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlWriter\n    name: XmlWriter\n    fullName: System.Xml.XmlWriter\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)\n  nameWithType: XmlNode.WriteTo(XmlWriter)\n- uid: System.Xml.XmlException\n  isExternal: false\n  name: XmlException\n  fullName: System.Xml.XmlException\n  commentId: T:System.Xml.XmlException\n  nameWithType: XmlException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n"}