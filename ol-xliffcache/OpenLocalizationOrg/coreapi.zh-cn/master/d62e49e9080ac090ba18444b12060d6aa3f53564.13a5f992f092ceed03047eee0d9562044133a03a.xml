{"nodes":[{"pos":[1720,1736],"content":"FileSystemRights","needQuote":true,"nodes":[{"content":"FileSystemRights","pos":[0,16]}]},{"pos":[3103,3113],"content":"AppendData","needQuote":true,"nodes":[{"content":"AppendData","pos":[0,10]}]},{"pos":[4187,4204],"content":"ChangePermissions","needQuote":true,"nodes":[{"content":"ChangePermissions","pos":[0,17]}]},{"pos":[5347,5364],"content":"CreateDirectories","needQuote":true,"nodes":[{"content":"CreateDirectories","pos":[0,17]}]},{"pos":[6433,6444],"content":"CreateFiles","needQuote":true,"nodes":[{"content":"CreateFiles","pos":[0,11]}]},{"pos":[7472,7478],"content":"Delete","needQuote":true,"nodes":[{"content":"Delete","pos":[0,6]}]},{"pos":[8565,8593],"content":"DeleteSubdirectoriesAndFiles","needQuote":true,"nodes":[{"content":"DeleteSubdirectoriesAndFiles","pos":[0,28]}]},{"pos":[9748,9759],"content":"ExecuteFile","needQuote":true,"nodes":[{"content":"ExecuteFile","pos":[0,11]}]},{"pos":[10811,10822],"content":"FullControl","needQuote":true,"nodes":[{"content":"FullControl","pos":[0,11]}]},{"pos":[12066,12079],"content":"ListDirectory","needQuote":true,"nodes":[{"content":"ListDirectory","pos":[0,13]}]},{"pos":[13132,13138],"content":"Modify","needQuote":true,"nodes":[{"content":"Modify","pos":[0,6]}]},{"pos":[14623,14627],"content":"Read","needQuote":true,"nodes":[{"content":"Read","pos":[0,4]}]},{"pos":[16232,16246],"content":"ReadAndExecute","needQuote":true,"nodes":[{"content":"ReadAndExecute","pos":[0,14]}]},{"pos":[17650,17664],"content":"ReadAttributes","needQuote":true,"nodes":[{"content":"ReadAttributes","pos":[0,14]}]},{"pos":[18951,18959],"content":"ReadData","needQuote":true,"nodes":[{"content":"ReadData","pos":[0,8]}]},{"pos":[20163,20185],"content":"ReadExtendedAttributes","needQuote":true,"nodes":[{"content":"ReadExtendedAttributes","pos":[0,22]}]},{"pos":[21519,21534],"content":"ReadPermissions","needQuote":true,"nodes":[{"content":"ReadPermissions","pos":[0,15]}]},{"pos":[22750,22761],"content":"Synchronize","needQuote":true,"nodes":[{"content":"Synchronize","pos":[0,11]}]},{"pos":[23893,23906],"content":"TakeOwnership","needQuote":true,"nodes":[{"content":"TakeOwnership","pos":[0,13]}]},{"pos":[25041,25049],"content":"Traverse","needQuote":true,"nodes":[{"content":"Traverse","pos":[0,8]}]},{"pos":[26131,26136],"content":"Write","needQuote":true,"nodes":[{"content":"Write","pos":[0,5]}]},{"pos":[27764,27779],"content":"WriteAttributes","needQuote":true,"nodes":[{"content":"WriteAttributes","pos":[0,15]}]},{"pos":[28974,28983],"content":"WriteData","needQuote":true,"nodes":[{"content":"WriteData","pos":[0,9]}]},{"pos":[30209,30232],"content":"WriteExtendedAttributes","needQuote":true,"nodes":[{"content":"WriteExtendedAttributes","pos":[0,23]}]},{"pos":[31292,31321],"content":"System.Security.AccessControl","needQuote":true,"nodes":[{"content":"System.Security.AccessControl","pos":[0,29]}]},{"pos":[31577,31593],"content":"FileSystemRights","needQuote":true,"nodes":[{"content":"FileSystemRights","pos":[0,16]}]}],"content":"items:\n- uid: System.Security.AccessControl.FileSystemRights\n  commentId: T:System.Security.AccessControl.FileSystemRights\n  id: FileSystemRights\n  parent: System.Security.AccessControl\n  children:\n  - System.Security.AccessControl.FileSystemRights.AppendData\n  - System.Security.AccessControl.FileSystemRights.ChangePermissions\n  - System.Security.AccessControl.FileSystemRights.CreateDirectories\n  - System.Security.AccessControl.FileSystemRights.CreateFiles\n  - System.Security.AccessControl.FileSystemRights.Delete\n  - System.Security.AccessControl.FileSystemRights.DeleteSubdirectoriesAndFiles\n  - System.Security.AccessControl.FileSystemRights.ExecuteFile\n  - System.Security.AccessControl.FileSystemRights.FullControl\n  - System.Security.AccessControl.FileSystemRights.ListDirectory\n  - System.Security.AccessControl.FileSystemRights.Modify\n  - System.Security.AccessControl.FileSystemRights.Read\n  - System.Security.AccessControl.FileSystemRights.ReadAndExecute\n  - System.Security.AccessControl.FileSystemRights.ReadAttributes\n  - System.Security.AccessControl.FileSystemRights.ReadData\n  - System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes\n  - System.Security.AccessControl.FileSystemRights.ReadPermissions\n  - System.Security.AccessControl.FileSystemRights.Synchronize\n  - System.Security.AccessControl.FileSystemRights.TakeOwnership\n  - System.Security.AccessControl.FileSystemRights.Traverse\n  - System.Security.AccessControl.FileSystemRights.Write\n  - System.Security.AccessControl.FileSystemRights.WriteAttributes\n  - System.Security.AccessControl.FileSystemRights.WriteData\n  - System.Security.AccessControl.FileSystemRights.WriteExtendedAttributes\n  langs:\n  - csharp\n  - vb\n  name: FileSystemRights\n  fullName: System.Security.AccessControl.FileSystemRights\n  type: Enum\n  source:\n    remote:\n      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FileSystemRights\n    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n    startLine: 78\n  assemblies:\n  - System.IO.FileSystem.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Defines the access rights to use when creating access and audit rules. </p>\\n\"\n  syntax:\n    content: >-\n      [Flags]\n\n      [SecurityCritical]\n\n      public enum FileSystemRights\n    content.vb: >-\n      <Flags>\n\n      <SecurityCritical>\n\n      Public Enum FileSystemRights\n  attributes:\n  - type: System.FlagsAttribute\n    ctor: System.FlagsAttribute.#ctor\n    arguments: []\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - enum\n  modifiers.vb:\n  - Public\n  - Enum\n  nameWithType: FileSystemRights\n- uid: System.Security.AccessControl.FileSystemRights.AppendData\n  commentId: F:System.Security.AccessControl.FileSystemRights.AppendData\n  id: AppendData\n  parent: System.Security.AccessControl.FileSystemRights\n  langs:\n  - csharp\n  - vb\n  name: AppendData\n  fullName: System.Security.AccessControl.FileSystemRights.AppendData\n  type: Field\n  source:\n    remote:\n      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AppendData\n    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n    startLine: 82\n  assemblies:\n  - System.IO.FileSystem.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Specifies the right to append data to the end of a file.</p>\\n\"\n  syntax:\n    content: AppendData = 4\n    return:\n      type: System.Security.AccessControl.FileSystemRights\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileSystemRights.AppendData\n- uid: System.Security.AccessControl.FileSystemRights.ChangePermissions\n  commentId: F:System.Security.AccessControl.FileSystemRights.ChangePermissions\n  id: ChangePermissions\n  parent: System.Security.AccessControl.FileSystemRights\n  langs:\n  - csharp\n  - vb\n  name: ChangePermissions\n  fullName: System.Security.AccessControl.FileSystemRights.ChangePermissions\n  type: Field\n  source:\n    remote:\n      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ChangePermissions\n    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n    startLine: 83\n  assemblies:\n  - System.IO.FileSystem.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Specifies the right to change the security and audit rules associated with a file or folder.</p>\\n\"\n  syntax:\n    content: ChangePermissions = 262144\n    return:\n      type: System.Security.AccessControl.FileSystemRights\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileSystemRights.ChangePermissions\n- uid: System.Security.AccessControl.FileSystemRights.CreateDirectories\n  commentId: F:System.Security.AccessControl.FileSystemRights.CreateDirectories\n  id: CreateDirectories\n  parent: System.Security.AccessControl.FileSystemRights\n  langs:\n  - csharp\n  - vb\n  name: CreateDirectories\n  fullName: System.Security.AccessControl.FileSystemRights.CreateDirectories\n  type: Field\n  source:\n    remote:\n      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateDirectories\n    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n    startLine: 84\n  assemblies:\n  - System.IO.FileSystem.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Specifies the right to create a folder.  </p>\\n\"\n  syntax:\n    content: CreateDirectories = 4\n    return:\n      type: System.Security.AccessControl.FileSystemRights\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileSystemRights.CreateDirectories\n- uid: System.Security.AccessControl.FileSystemRights.CreateFiles\n  commentId: F:System.Security.AccessControl.FileSystemRights.CreateFiles\n  id: CreateFiles\n  parent: System.Security.AccessControl.FileSystemRights\n  langs:\n  - csharp\n  - vb\n  name: CreateFiles\n  fullName: System.Security.AccessControl.FileSystemRights.CreateFiles\n  type: Field\n  source:\n    remote:\n      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateFiles\n    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n    startLine: 85\n  assemblies:\n  - System.IO.FileSystem.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Specifies the right to create a file.  </p>\\n\"\n  syntax:\n    content: CreateFiles = 2\n    return:\n      type: System.Security.AccessControl.FileSystemRights\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileSystemRights.CreateFiles\n- uid: System.Security.AccessControl.FileSystemRights.Delete\n  commentId: F:System.Security.AccessControl.FileSystemRights.Delete\n  id: Delete\n  parent: System.Security.AccessControl.FileSystemRights\n  langs:\n  - csharp\n  - vb\n  name: Delete\n  fullName: System.Security.AccessControl.FileSystemRights.Delete\n  type: Field\n  source:\n    remote:\n      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Delete\n    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n    startLine: 86\n  assemblies:\n  - System.IO.FileSystem.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Specifies the right to delete a folder or file. </p>\\n\"\n  syntax:\n    content: Delete = 65536\n    return:\n      type: System.Security.AccessControl.FileSystemRights\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileSystemRights.Delete\n- uid: System.Security.AccessControl.FileSystemRights.DeleteSubdirectoriesAndFiles\n  commentId: F:System.Security.AccessControl.FileSystemRights.DeleteSubdirectoriesAndFiles\n  id: DeleteSubdirectoriesAndFiles\n  parent: System.Security.AccessControl.FileSystemRights\n  langs:\n  - csharp\n  - vb\n  name: DeleteSubdirectoriesAndFiles\n  fullName: System.Security.AccessControl.FileSystemRights.DeleteSubdirectoriesAndFiles\n  type: Field\n  source:\n    remote:\n      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DeleteSubdirectoriesAndFiles\n    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n    startLine: 87\n  assemblies:\n  - System.IO.FileSystem.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Specifies the right to delete a folder and any files contained within that folder.</p>\\n\"\n  syntax:\n    content: DeleteSubdirectoriesAndFiles = 64\n    return:\n      type: System.Security.AccessControl.FileSystemRights\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileSystemRights.DeleteSubdirectoriesAndFiles\n- uid: System.Security.AccessControl.FileSystemRights.ExecuteFile\n  commentId: F:System.Security.AccessControl.FileSystemRights.ExecuteFile\n  id: ExecuteFile\n  parent: System.Security.AccessControl.FileSystemRights\n  langs:\n  - csharp\n  - vb\n  name: ExecuteFile\n  fullName: System.Security.AccessControl.FileSystemRights.ExecuteFile\n  type: Field\n  source:\n    remote:\n      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExecuteFile\n    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n    startLine: 88\n  assemblies:\n  - System.IO.FileSystem.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Specifies the right to run an application file.</p>\\n\"\n  syntax:\n    content: ExecuteFile = 32\n    return:\n      type: System.Security.AccessControl.FileSystemRights\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileSystemRights.ExecuteFile\n- uid: System.Security.AccessControl.FileSystemRights.FullControl\n  commentId: F:System.Security.AccessControl.FileSystemRights.FullControl\n  id: FullControl\n  parent: System.Security.AccessControl.FileSystemRights\n  langs:\n  - csharp\n  - vb\n  name: FullControl\n  fullName: System.Security.AccessControl.FileSystemRights.FullControl\n  type: Field\n  source:\n    remote:\n      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FullControl\n    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n    startLine: 89\n  assemblies:\n  - System.IO.FileSystem.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Specifies the right to exert full control over a folder or file, and to modify access control and audit rules.  This value represents the right to do anything with a file and is the combination of all rights in this enumeration.</p>\\n\"\n  syntax:\n    content: FullControl = 2032127\n    return:\n      type: System.Security.AccessControl.FileSystemRights\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileSystemRights.FullControl\n- uid: System.Security.AccessControl.FileSystemRights.ListDirectory\n  commentId: F:System.Security.AccessControl.FileSystemRights.ListDirectory\n  id: ListDirectory\n  parent: System.Security.AccessControl.FileSystemRights\n  langs:\n  - csharp\n  - vb\n  name: ListDirectory\n  fullName: System.Security.AccessControl.FileSystemRights.ListDirectory\n  type: Field\n  source:\n    remote:\n      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ListDirectory\n    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n    startLine: 90\n  assemblies:\n  - System.IO.FileSystem.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Specifies the right to read the contents of a directory.</p>\\n\"\n  syntax:\n    content: ListDirectory = 1\n    return:\n      type: System.Security.AccessControl.FileSystemRights\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileSystemRights.ListDirectory\n- uid: System.Security.AccessControl.FileSystemRights.Modify\n  commentId: F:System.Security.AccessControl.FileSystemRights.Modify\n  id: Modify\n  parent: System.Security.AccessControl.FileSystemRights\n  langs:\n  - csharp\n  - vb\n  name: Modify\n  fullName: System.Security.AccessControl.FileSystemRights.Modify\n  type: Field\n  source:\n    remote:\n      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Modify\n    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n    startLine: 91\n  assemblies:\n  - System.IO.FileSystem.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Specifies the right to read, write, list folder contents, delete folders and files, and run application files.  This right includes the <xref href=\\\"System.Security.AccessControl.FileSystemRights.ReadAndExecute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> right, the <xref href=\\\"System.Security.AccessControl.FileSystemRights.Write\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> right, and the <xref href=\\\"System.Security.AccessControl.FileSystemRights.Delete\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> right.</p>\\n\"\n  syntax:\n    content: Modify = 197055\n    return:\n      type: System.Security.AccessControl.FileSystemRights\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileSystemRights.Modify\n- uid: System.Security.AccessControl.FileSystemRights.Read\n  commentId: F:System.Security.AccessControl.FileSystemRights.Read\n  id: Read\n  parent: System.Security.AccessControl.FileSystemRights\n  langs:\n  - csharp\n  - vb\n  name: Read\n  fullName: System.Security.AccessControl.FileSystemRights.Read\n  type: Field\n  source:\n    remote:\n      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Read\n    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n    startLine: 92\n  assemblies:\n  - System.IO.FileSystem.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Specifies the right to open and copy folders or files as read-only.  This right includes the <xref href=\\\"System.Security.AccessControl.FileSystemRights.ReadData\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> right, <xref href=\\\"System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> right, <xref href=\\\"System.Security.AccessControl.FileSystemRights.ReadAttributes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> right, and <xref href=\\\"System.Security.AccessControl.FileSystemRights.ReadPermissions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> right.</p>\\n\"\n  syntax:\n    content: Read = 131209\n    return:\n      type: System.Security.AccessControl.FileSystemRights\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileSystemRights.Read\n- uid: System.Security.AccessControl.FileSystemRights.ReadAndExecute\n  commentId: F:System.Security.AccessControl.FileSystemRights.ReadAndExecute\n  id: ReadAndExecute\n  parent: System.Security.AccessControl.FileSystemRights\n  langs:\n  - csharp\n  - vb\n  name: ReadAndExecute\n  fullName: System.Security.AccessControl.FileSystemRights.ReadAndExecute\n  type: Field\n  source:\n    remote:\n      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadAndExecute\n    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n    startLine: 93\n  assemblies:\n  - System.IO.FileSystem.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Specifies the right to open and copy folders or files as read-only, and to run application files.  This right includes the <xref href=\\\"System.Security.AccessControl.FileSystemRights.Read\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> right and the <xref href=\\\"System.Security.AccessControl.FileSystemRights.ExecuteFile\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> right.</p>\\n\"\n  syntax:\n    content: ReadAndExecute = 131241\n    return:\n      type: System.Security.AccessControl.FileSystemRights\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileSystemRights.ReadAndExecute\n- uid: System.Security.AccessControl.FileSystemRights.ReadAttributes\n  commentId: F:System.Security.AccessControl.FileSystemRights.ReadAttributes\n  id: ReadAttributes\n  parent: System.Security.AccessControl.FileSystemRights\n  langs:\n  - csharp\n  - vb\n  name: ReadAttributes\n  fullName: System.Security.AccessControl.FileSystemRights.ReadAttributes\n  type: Field\n  source:\n    remote:\n      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadAttributes\n    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n    startLine: 94\n  assemblies:\n  - System.IO.FileSystem.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Specifies the right to open and copy file system attributes from a folder or file.  For example, this value specifies the right to view the file creation or modified date.  This does not include the right to read data, extended file system attributes, or access and audit rules.</p>\\n\"\n  syntax:\n    content: ReadAttributes = 128\n    return:\n      type: System.Security.AccessControl.FileSystemRights\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileSystemRights.ReadAttributes\n- uid: System.Security.AccessControl.FileSystemRights.ReadData\n  commentId: F:System.Security.AccessControl.FileSystemRights.ReadData\n  id: ReadData\n  parent: System.Security.AccessControl.FileSystemRights\n  langs:\n  - csharp\n  - vb\n  name: ReadData\n  fullName: System.Security.AccessControl.FileSystemRights.ReadData\n  type: Field\n  source:\n    remote:\n      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadData\n    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n    startLine: 95\n  assemblies:\n  - System.IO.FileSystem.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Specifies the right to open and copy a file or folder.  This does not include the right to read file system attributes, extended file system attributes, or access and audit rules.</p>\\n\"\n  syntax:\n    content: ReadData = 1\n    return:\n      type: System.Security.AccessControl.FileSystemRights\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileSystemRights.ReadData\n- uid: System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes\n  commentId: F:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes\n  id: ReadExtendedAttributes\n  parent: System.Security.AccessControl.FileSystemRights\n  langs:\n  - csharp\n  - vb\n  name: ReadExtendedAttributes\n  fullName: System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes\n  type: Field\n  source:\n    remote:\n      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadExtendedAttributes\n    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n    startLine: 96\n  assemblies:\n  - System.IO.FileSystem.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Specifies the right to open and copy extended file system attributes from a folder or file.  For example, this value specifies the right to view author and content information.  This does not include the right to read data, file system attributes, or access and audit rules.</p>\\n\"\n  syntax:\n    content: ReadExtendedAttributes = 8\n    return:\n      type: System.Security.AccessControl.FileSystemRights\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileSystemRights.ReadExtendedAttributes\n- uid: System.Security.AccessControl.FileSystemRights.ReadPermissions\n  commentId: F:System.Security.AccessControl.FileSystemRights.ReadPermissions\n  id: ReadPermissions\n  parent: System.Security.AccessControl.FileSystemRights\n  langs:\n  - csharp\n  - vb\n  name: ReadPermissions\n  fullName: System.Security.AccessControl.FileSystemRights.ReadPermissions\n  type: Field\n  source:\n    remote:\n      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadPermissions\n    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n    startLine: 97\n  assemblies:\n  - System.IO.FileSystem.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Specifies the right to open and copy access and audit rules from a folder or file.  This does not include the right to read data, file system attributes, and extended file system attributes. </p>\\n\"\n  syntax:\n    content: ReadPermissions = 131072\n    return:\n      type: System.Security.AccessControl.FileSystemRights\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileSystemRights.ReadPermissions\n- uid: System.Security.AccessControl.FileSystemRights.Synchronize\n  commentId: F:System.Security.AccessControl.FileSystemRights.Synchronize\n  id: Synchronize\n  parent: System.Security.AccessControl.FileSystemRights\n  langs:\n  - csharp\n  - vb\n  name: Synchronize\n  fullName: System.Security.AccessControl.FileSystemRights.Synchronize\n  type: Field\n  source:\n    remote:\n      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Synchronize\n    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n    startLine: 98\n  assemblies:\n  - System.IO.FileSystem.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Specifies whether the application can wait for a file handle to synchronize with the completion of an I/O operation.</p>\\n\"\n  syntax:\n    content: Synchronize = 1048576\n    return:\n      type: System.Security.AccessControl.FileSystemRights\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileSystemRights.Synchronize\n- uid: System.Security.AccessControl.FileSystemRights.TakeOwnership\n  commentId: F:System.Security.AccessControl.FileSystemRights.TakeOwnership\n  id: TakeOwnership\n  parent: System.Security.AccessControl.FileSystemRights\n  langs:\n  - csharp\n  - vb\n  name: TakeOwnership\n  fullName: System.Security.AccessControl.FileSystemRights.TakeOwnership\n  type: Field\n  source:\n    remote:\n      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TakeOwnership\n    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n    startLine: 99\n  assemblies:\n  - System.IO.FileSystem.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Specifies the right to change the owner of a folder or file.  Note that owners of a resource have full access to that resource.</p>\\n\"\n  syntax:\n    content: TakeOwnership = 524288\n    return:\n      type: System.Security.AccessControl.FileSystemRights\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileSystemRights.TakeOwnership\n- uid: System.Security.AccessControl.FileSystemRights.Traverse\n  commentId: F:System.Security.AccessControl.FileSystemRights.Traverse\n  id: Traverse\n  parent: System.Security.AccessControl.FileSystemRights\n  langs:\n  - csharp\n  - vb\n  name: Traverse\n  fullName: System.Security.AccessControl.FileSystemRights.Traverse\n  type: Field\n  source:\n    remote:\n      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Traverse\n    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n    startLine: 100\n  assemblies:\n  - System.IO.FileSystem.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Specifies the right to list the contents of a folder and to run applications contained within that folder.</p>\\n\"\n  syntax:\n    content: Traverse = 32\n    return:\n      type: System.Security.AccessControl.FileSystemRights\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileSystemRights.Traverse\n- uid: System.Security.AccessControl.FileSystemRights.Write\n  commentId: F:System.Security.AccessControl.FileSystemRights.Write\n  id: Write\n  parent: System.Security.AccessControl.FileSystemRights\n  langs:\n  - csharp\n  - vb\n  name: Write\n  fullName: System.Security.AccessControl.FileSystemRights.Write\n  type: Field\n  source:\n    remote:\n      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Write\n    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n    startLine: 101\n  assemblies:\n  - System.IO.FileSystem.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Specifies the right to create folders and files, and to add or remove data from files.  This right includes the <xref href=\\\"System.Security.AccessControl.FileSystemRights.WriteData\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> right, <xref href=\\\"System.Security.AccessControl.FileSystemRights.AppendData\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> right, <xref href=\\\"System.Security.AccessControl.FileSystemRights.WriteExtendedAttributes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> right, and <xref href=\\\"System.Security.AccessControl.FileSystemRights.WriteAttributes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> right. </p>\\n\"\n  syntax:\n    content: Write = 278\n    return:\n      type: System.Security.AccessControl.FileSystemRights\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileSystemRights.Write\n- uid: System.Security.AccessControl.FileSystemRights.WriteAttributes\n  commentId: F:System.Security.AccessControl.FileSystemRights.WriteAttributes\n  id: WriteAttributes\n  parent: System.Security.AccessControl.FileSystemRights\n  langs:\n  - csharp\n  - vb\n  name: WriteAttributes\n  fullName: System.Security.AccessControl.FileSystemRights.WriteAttributes\n  type: Field\n  source:\n    remote:\n      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteAttributes\n    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n    startLine: 102\n  assemblies:\n  - System.IO.FileSystem.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Specifies the right to open and write file system attributes to a folder or file. This does not include the ability to write data, extended attributes, or access and audit rules.</p>\\n\"\n  syntax:\n    content: WriteAttributes = 256\n    return:\n      type: System.Security.AccessControl.FileSystemRights\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileSystemRights.WriteAttributes\n- uid: System.Security.AccessControl.FileSystemRights.WriteData\n  commentId: F:System.Security.AccessControl.FileSystemRights.WriteData\n  id: WriteData\n  parent: System.Security.AccessControl.FileSystemRights\n  langs:\n  - csharp\n  - vb\n  name: WriteData\n  fullName: System.Security.AccessControl.FileSystemRights.WriteData\n  type: Field\n  source:\n    remote:\n      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteData\n    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n    startLine: 103\n  assemblies:\n  - System.IO.FileSystem.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Specifies the right to open and write to a file or folder.  This does not include the right to open and write file system attributes, extended file system attributes, or access and audit rules.</p>\\n\"\n  syntax:\n    content: WriteData = 2\n    return:\n      type: System.Security.AccessControl.FileSystemRights\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileSystemRights.WriteData\n- uid: System.Security.AccessControl.FileSystemRights.WriteExtendedAttributes\n  commentId: F:System.Security.AccessControl.FileSystemRights.WriteExtendedAttributes\n  id: WriteExtendedAttributes\n  parent: System.Security.AccessControl.FileSystemRights\n  langs:\n  - csharp\n  - vb\n  name: WriteExtendedAttributes\n  fullName: System.Security.AccessControl.FileSystemRights.WriteExtendedAttributes\n  type: Field\n  source:\n    remote:\n      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteExtendedAttributes\n    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs\n    startLine: 104\n  assemblies:\n  - System.IO.FileSystem.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Specifies the right to open and write extended file system attributes to a folder or file.  This does not include the ability to write data, attributes, or access and audit rules.</p>\\n\"\n  syntax:\n    content: WriteExtendedAttributes = 16\n    return:\n      type: System.Security.AccessControl.FileSystemRights\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileSystemRights.WriteExtendedAttributes\nreferences:\n- uid: System.Security.AccessControl\n  isExternal: false\n  name: System.Security.AccessControl\n  fullName: System.Security.AccessControl\n  commentId: N:System.Security.AccessControl\n  nameWithType: System.Security.AccessControl\n- uid: System.Security.AccessControl.FileSystemRights\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: FileSystemRights\n  fullName: System.Security.AccessControl.FileSystemRights\n  commentId: T:System.Security.AccessControl.FileSystemRights\n  nameWithType: FileSystemRights\n"}