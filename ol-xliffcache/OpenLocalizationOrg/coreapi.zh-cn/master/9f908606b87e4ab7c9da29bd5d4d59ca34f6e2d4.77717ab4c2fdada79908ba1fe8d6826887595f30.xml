{"nodes":[{"pos":[362,383],"content":"EventSource.EventData","needQuote":true,"nodes":[{"content":"EventSource.EventData","pos":[0,21]}]},{"pos":[2251,2262],"content":"DataPointer","needQuote":true,"nodes":[{"content":"DataPointer","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The pointer to the data.&lt;/p&gt;\\n","pos":[3114,3149],"source":"\\n<p>The pointer to the data.</p>\\n"},{"pos":[3510,3514],"content":"Size","needQuote":true,"nodes":[{"content":"Size","pos":[0,4]}]},{"content":"\\n&lt;p&gt;The number of payload items in the new overload.&lt;/p&gt;\\n","pos":[4338,4397],"source":"\\n<p>The number of payload items in the new overload.</p>\\n"},{"pos":[4590,4616],"content":"System.Diagnostics.Tracing","needQuote":true,"nodes":[{"content":"System.Diagnostics.Tracing","pos":[0,26]}]},{"pos":[4841,4855],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[4980,4986],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[5035,5036],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[5086,5092],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5152,5153],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[5239,5245],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[5294,5295],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[5345,5351],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5411,5412],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[5615,5628],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[5735,5746],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[5800,5801],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[5828,5829],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[5905,5916],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[5970,5971],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[5998,5999],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6188,6198],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[6299,6307],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[6358,6359],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6386,6387],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6460,6468],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[6519,6520],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6547,6548],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6751,6773],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[6921,6927],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[6994,6995],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7045,7051],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[7112,7113]},{"pos":[7168,7174],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7234,7235],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7332,7338],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7405,7406],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7456,7462],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[7523,7524]},{"pos":[7579,7585],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7645,7646],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7891,7922],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[8088,8103],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[8179,8180],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8230,8236],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8297,8298]},{"pos":[8353,8359],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8419,8420],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8526,8541],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[8617,8618],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8668,8674],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8735,8736]},{"pos":[8791,8797],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8857,8858],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9084,9093],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[9186,9193],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[9261,9262],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9289,9290],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9359,9366],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[9434,9435],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9462,9463],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9619,9628],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[9782,9788],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9909,9915],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[10046,10052],"content":"IntPtr","needQuote":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"pos":[10196,10201],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]}],"content":"items:\n- uid: System.Diagnostics.Tracing.EventSource.EventData\n  commentId: T:System.Diagnostics.Tracing.EventSource.EventData\n  id: EventSource.EventData\n  parent: System.Diagnostics.Tracing\n  children:\n  - System.Diagnostics.Tracing.EventSource.EventData.DataPointer\n  - System.Diagnostics.Tracing.EventSource.EventData.Size\n  langs:\n  - csharp\n  - vb\n  name: EventSource.EventData\n  fullName: System.Diagnostics.Tracing.EventSource.EventData\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EventData\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 1049\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Provides the event data for creating fast <xref href=\\\"System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> overloads by using the <xref href=\\\"System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: protected struct EventData\n    content.vb: Protected Structure EventData\n  inheritedMembers:\n  - System.ValueType.Equals(System.Object)\n  - System.ValueType.GetHashCode\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - protected\n  - struct\n  modifiers.vb:\n  - Protected\n  - Structure\n  nameWithType: EventSource.EventData\n- uid: System.Diagnostics.Tracing.EventSource.EventData.DataPointer\n  commentId: P:System.Diagnostics.Tracing.EventSource.EventData.DataPointer\n  id: DataPointer\n  parent: System.Diagnostics.Tracing.EventSource.EventData\n  langs:\n  - csharp\n  - vb\n  name: DataPointer\n  fullName: System.Diagnostics.Tracing.EventSource.EventData.DataPointer\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DataPointer\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 1055\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Gets or sets the pointer to the data for the new <xref href=\\\"System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> overload.</p>\\n\"\n  syntax:\n    content: public IntPtr DataPointer { get; set; }\n    content.vb: Public Property DataPointer As IntPtr\n    parameters: []\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>The pointer to the data.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: EventSource.EventData.DataPointer\n- uid: System.Diagnostics.Tracing.EventSource.EventData.Size\n  commentId: P:System.Diagnostics.Tracing.EventSource.EventData.Size\n  id: Size\n  parent: System.Diagnostics.Tracing.EventSource.EventData\n  langs:\n  - csharp\n  - vb\n  name: Size\n  fullName: System.Diagnostics.Tracing.EventSource.EventData.Size\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Size\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 1059\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Gets or sets the number of payload items in the new <xref href=\\\"System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> overload.</p>\\n\"\n  syntax:\n    content: public int Size { get; set; }\n    content.vb: Public Property Size As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of payload items in the new overload.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: EventSource.EventData.Size\nreferences:\n- uid: System.Diagnostics.Tracing\n  isExternal: false\n  name: System.Diagnostics.Tracing\n  fullName: System.Diagnostics.Tracing\n  nameWithType: System.Diagnostics.Tracing\n  commentId: N:System.Diagnostics.Tracing\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  fullName: System.IntPtr\n  nameWithType: IntPtr\n  commentId: T:System.IntPtr\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n"}