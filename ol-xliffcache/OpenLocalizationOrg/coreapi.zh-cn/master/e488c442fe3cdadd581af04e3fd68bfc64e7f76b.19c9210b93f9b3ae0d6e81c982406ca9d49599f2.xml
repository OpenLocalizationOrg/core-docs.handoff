{"nodes":[{"pos":[407,431],"content":"DynamicExpressionVisitor","needQuote":true,"nodes":[{"content":"DynamicExpressionVisitor","pos":[0,24]}]},{"pos":[1607,1633],"content":"DynamicExpressionVisitor()","needQuote":true,"nodes":[{"content":"DynamicExpressionVisitor()","pos":[0,26]}]},{"pos":[2859,2890],"content":"VisitDynamic(DynamicExpression)","needQuote":true,"nodes":[{"content":"VisitDynamic(DynamicExpression)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[3869,3904],"source":"\\n<p>The expression to visit.</p>\\n"},{"pos":[4422,4445],"content":"System.Linq.Expressions","needQuote":true,"nodes":[{"content":"System.Linq.Expressions","pos":[0,23]}]},{"pos":[4627,4633],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[4754,4760],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[4936,4953],"content":"DynamicExpression","needQuote":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[5144,5154],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]}],"content":"items:\n- uid: System.Linq.Expressions.DynamicExpressionVisitor\n  commentId: T:System.Linq.Expressions.DynamicExpressionVisitor\n  id: DynamicExpressionVisitor\n  parent: System.Linq.Expressions\n  children:\n  - System.Linq.Expressions.DynamicExpressionVisitor.#ctor\n  - System.Linq.Expressions.DynamicExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)\n  langs:\n  - csharp\n  - vb\n  name: DynamicExpressionVisitor\n  fullName: System.Linq.Expressions.DynamicExpressionVisitor\n  type: Class\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpressionVisitor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DynamicExpressionVisitor\n    path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpressionVisitor.cs\n    startLine: 12\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Represents a visitor or rewriter for dynamic expression trees.</p>\\n\"\n  syntax:\n    content: 'public class DynamicExpressionVisitor : ExpressionVisitor'\n    content.vb: >-\n      Public Class DynamicExpressionVisitor\n          Inherits ExpressionVisitor\n  inheritance:\n  - System.Object\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: DynamicExpressionVisitor\n- uid: System.Linq.Expressions.DynamicExpressionVisitor.#ctor\n  commentId: M:System.Linq.Expressions.DynamicExpressionVisitor.#ctor\n  id: '#ctor'\n  parent: System.Linq.Expressions.DynamicExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: DynamicExpressionVisitor()\n  fullName: System.Linq.Expressions.DynamicExpressionVisitor.DynamicExpressionVisitor()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n    startLine: 261\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Initializes a new instance of <xref href=\\\"System.Linq.Expressions.DynamicExpressionVisitor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected DynamicExpressionVisitor()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: DynamicExpressionVisitor.DynamicExpressionVisitor()\n- uid: System.Linq.Expressions.DynamicExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)\n  commentId: M:System.Linq.Expressions.DynamicExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)\n  id: VisitDynamic(System.Linq.Expressions.DynamicExpression)\n  parent: System.Linq.Expressions.DynamicExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitDynamic(DynamicExpression)\n  fullName: System.Linq.Expressions.DynamicExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpressionVisitor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitDynamic\n    path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpressionVisitor.cs\n    startLine: 20\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the <xref href=\\\"System.Linq.Expressions.DynamicExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual Expression VisitDynamic(DynamicExpression node)\n    content.vb: Protected Overridable Function VisitDynamic(node As DynamicExpression) As Expression\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.DynamicExpression\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: Expression\n      description: \"\\n<p>Returns <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the modified expression, if it or any subexpression is modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: DynamicExpressionVisitor.VisitDynamic(DynamicExpression)\nreferences:\n- uid: System.Linq.Expressions\n  isExternal: false\n  name: System.Linq.Expressions\n  fullName: System.Linq.Expressions\n  nameWithType: System.Linq.Expressions\n  commentId: N:System.Linq.Expressions\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n  nameWithType: DynamicExpression\n  commentId: T:System.Linq.Expressions.DynamicExpression\n- uid: Expression\n  isExternal: true\n  name: Expression\n  fullName: Expression\n  nameWithType: Expression\n  commentId: '!:Expression'\n"}