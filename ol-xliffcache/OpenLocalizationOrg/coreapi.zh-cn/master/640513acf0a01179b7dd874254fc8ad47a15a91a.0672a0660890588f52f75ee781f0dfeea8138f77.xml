{"nodes":[{"pos":[750,766],"content":"ICryptoTransform","needQuote":true,"nodes":[{"content":"ICryptoTransform","pos":[0,16]}]},{"pos":[1967,1984],"content":"CanReuseTransform","needQuote":true,"nodes":[{"content":"CanReuseTransform","pos":[0,17]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current transform can be reused; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[2808,2917],"source":"\\n<p>\\n<strong>true</strong> if the current transform can be reused; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[3319,3345],"content":"CanTransformMultipleBlocks","needQuote":true,"nodes":[{"content":"CanTransformMultipleBlocks","pos":[0,26]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if multiple blocks can be transformed; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[4204,4312],"source":"\\n<p>\\n<strong>true</strong> if multiple blocks can be transformed; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[4687,4701],"content":"InputBlockSize","needQuote":true,"nodes":[{"content":"InputBlockSize","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The size of the input data blocks in bytes.&lt;/p&gt;\\n","pos":[5468,5522],"source":"\\n<p>The size of the input data blocks in bytes.</p>\\n"},{"pos":[5888,5903],"content":"OutputBlockSize","needQuote":true,"nodes":[{"content":"OutputBlockSize","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The size of the output data blocks in bytes.&lt;/p&gt;\\n","pos":[6675,6730],"source":"\\n<p>The size of the output data blocks in bytes.</p>\\n"},{"pos":[7298,7349],"content":"TransformBlock(Byte[], Int32, Int32, Byte[], Int32)","needQuote":true,"nodes":[{"content":"TransformBlock(Byte[], Int32, Int32, Byte[], Int32)","pos":[0,51]}]},{"content":"\\n&lt;p&gt;The input for which to compute the transform.","pos":[8501,8551],"source":"\\n<p>The input for which to compute the transform."},{"content":"&lt;/p&gt;\\n","pos":[8552,8558],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The offset into the input byte array from which to begin using data.","pos":[8627,8700],"source":"\\n<p>The offset into the input byte array from which to begin using data."},{"content":"&lt;/p&gt;\\n","pos":[8701,8707],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes in the input byte array to use as data.","pos":[8775,8839],"source":"\\n<p>The number of bytes in the input byte array to use as data."},{"content":"&lt;/p&gt;\\n","pos":[8840,8846],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The output to which to write the transform.","pos":[8917,8965],"source":"\\n<p>The output to which to write the transform."},{"content":"&lt;/p&gt;\\n","pos":[8966,8972],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The offset into the output byte array from which to begin writing data.","pos":[9042,9118],"source":"\\n<p>The offset into the output byte array from which to begin writing data."},{"content":"&lt;/p&gt;\\n","pos":[9119,9125],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes written.&lt;/p&gt;\\n","pos":[9184,9223],"source":"\\n<p>The number of bytes written.</p>\\n"},{"pos":[10003,10044],"content":"TransformFinalBlock(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"TransformFinalBlock(Byte[], Int32, Int32)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;The input for which to compute the transform.","pos":[11021,11071],"source":"\\n<p>The input for which to compute the transform."},{"content":"&lt;/p&gt;\\n","pos":[11072,11078],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The offset into the byte array from which to begin using data.","pos":[11147,11214],"source":"\\n<p>The offset into the byte array from which to begin using data."},{"content":"&lt;/p&gt;\\n","pos":[11215,11221],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes in the byte array to use as data.","pos":[11289,11347],"source":"\\n<p>The number of bytes in the byte array to use as data."},{"content":"&lt;/p&gt;\\n","pos":[11348,11354],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The computed transform.&lt;/p&gt;\\n","pos":[11414,11448],"source":"\\n<p>The computed transform.</p>\\n"},{"pos":[11856,11884],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[12106,12115],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[12218,12225],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[12277,12278],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12305,12306],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12380,12387],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[12439,12440],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12467,12468],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12636,12647],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[12783,12789],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[12921,12928],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[13075,13080],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[13185,13191],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[13311,13315],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[13374,13376]},{"pos":[13439,13443],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[13501,13503],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]}],"content":"items:\n- uid: System.Security.Cryptography.ICryptoTransform\n  commentId: T:System.Security.Cryptography.ICryptoTransform\n  id: ICryptoTransform\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.ICryptoTransform.CanReuseTransform\n  - System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks\n  - System.Security.Cryptography.ICryptoTransform.InputBlockSize\n  - System.Security.Cryptography.ICryptoTransform.OutputBlockSize\n  - System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  - vb\n  name: ICryptoTransform\n  fullName: System.Security.Cryptography.ICryptoTransform\n  type: Interface\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ICryptoTransform\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 99\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Defines the basic operations of cryptographic transformations.</p>\\n\"\n  syntax:\n    content: 'public interface ICryptoTransform : IDisposable'\n    content.vb: >-\n      Public Interface ICryptoTransform\n          Inherits IDisposable\n  inheritedMembers:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  - interface\n  modifiers.vb:\n  - Public\n  - Interface\n  nameWithType: ICryptoTransform\n- uid: System.Security.Cryptography.ICryptoTransform.CanReuseTransform\n  commentId: P:System.Security.Cryptography.ICryptoTransform.CanReuseTransform\n  id: CanReuseTransform\n  parent: System.Security.Cryptography.ICryptoTransform\n  langs:\n  - csharp\n  - vb\n  name: CanReuseTransform\n  fullName: System.Security.Cryptography.ICryptoTransform.CanReuseTransform\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CanReuseTransform\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 101\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a value indicating whether the current transform can be reused.</p>\\n\"\n  syntax:\n    content: bool CanReuseTransform { get; }\n    content.vb: ReadOnly Property CanReuseTransform As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current transform can be reused; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  nameWithType: ICryptoTransform.CanReuseTransform\n- uid: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks\n  commentId: P:System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks\n  id: CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.ICryptoTransform\n  langs:\n  - csharp\n  - vb\n  name: CanTransformMultipleBlocks\n  fullName: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CanTransformMultipleBlocks\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 102\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a value indicating whether multiple blocks can be transformed.</p>\\n\"\n  syntax:\n    content: bool CanTransformMultipleBlocks { get; }\n    content.vb: ReadOnly Property CanTransformMultipleBlocks As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if multiple blocks can be transformed; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  nameWithType: ICryptoTransform.CanTransformMultipleBlocks\n- uid: System.Security.Cryptography.ICryptoTransform.InputBlockSize\n  commentId: P:System.Security.Cryptography.ICryptoTransform.InputBlockSize\n  id: InputBlockSize\n  parent: System.Security.Cryptography.ICryptoTransform\n  langs:\n  - csharp\n  - vb\n  name: InputBlockSize\n  fullName: System.Security.Cryptography.ICryptoTransform.InputBlockSize\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InputBlockSize\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 103\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the input block size.</p>\\n\"\n  syntax:\n    content: int InputBlockSize { get; }\n    content.vb: ReadOnly Property InputBlockSize As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The size of the input data blocks in bytes.</p>\\n\"\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  nameWithType: ICryptoTransform.InputBlockSize\n- uid: System.Security.Cryptography.ICryptoTransform.OutputBlockSize\n  commentId: P:System.Security.Cryptography.ICryptoTransform.OutputBlockSize\n  id: OutputBlockSize\n  parent: System.Security.Cryptography.ICryptoTransform\n  langs:\n  - csharp\n  - vb\n  name: OutputBlockSize\n  fullName: System.Security.Cryptography.ICryptoTransform.OutputBlockSize\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OutputBlockSize\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 104\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the output block size.</p>\\n\"\n  syntax:\n    content: int OutputBlockSize { get; }\n    content.vb: ReadOnly Property OutputBlockSize As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The size of the output data blocks in bytes.</p>\\n\"\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  nameWithType: ICryptoTransform.OutputBlockSize\n- uid: System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  commentId: M:System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.ICryptoTransform\n  langs:\n  - csharp\n  - vb\n  name: TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  fullName: System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[], System.Int32, System.Int32, System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TransformBlock\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 105\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Transforms the specified region of the input byte array and copies the resulting transform to the specified region of the output byte array.</p>\\n\"\n  syntax:\n    content: int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset)\n    content.vb: Function TransformBlock(inputBuffer As Byte(), inputOffset As Integer, inputCount As Integer, outputBuffer As Byte(), outputOffset As Integer) As Integer\n    parameters:\n    - id: inputBuffer\n      type: System.Byte[]\n      description: \"\\n<p>The input for which to compute the transform. </p>\\n\"\n    - id: inputOffset\n      type: System.Int32\n      description: \"\\n<p>The offset into the input byte array from which to begin using data. </p>\\n\"\n    - id: inputCount\n      type: System.Int32\n      description: \"\\n<p>The number of bytes in the input byte array to use as data. </p>\\n\"\n    - id: outputBuffer\n      type: System.Byte[]\n      description: \"\\n<p>The output to which to write the transform. </p>\\n\"\n    - id: outputOffset\n      type: System.Int32\n      description: \"\\n<p>The offset into the output byte array from which to begin writing data. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of bytes written.</p>\\n\"\n  fullName.vb: System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte(), System.Int32, System.Int32, System.Byte(), System.Int32)\n  name.vb: TransformBlock(Byte(), Int32, Int32, Byte(), Int32)\n  nameWithType: ICryptoTransform.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  nameWithType.vb: ICryptoTransform.TransformBlock(Byte(), Int32, Int32, Byte(), Int32)\n- uid: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.ICryptoTransform\n  langs:\n  - csharp\n  - vb\n  name: TransformFinalBlock(Byte[], Int32, Int32)\n  fullName: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TransformFinalBlock\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 106\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Transforms the specified region of the specified byte array.</p>\\n\"\n  syntax:\n    content: byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount)\n    content.vb: Function TransformFinalBlock(inputBuffer As Byte(), inputOffset As Integer, inputCount As Integer) As Byte()\n    parameters:\n    - id: inputBuffer\n      type: System.Byte[]\n      description: \"\\n<p>The input for which to compute the transform. </p>\\n\"\n    - id: inputOffset\n      type: System.Int32\n      description: \"\\n<p>The offset into the byte array from which to begin using data. </p>\\n\"\n    - id: inputCount\n      type: System.Int32\n      description: \"\\n<p>The number of bytes in the byte array to use as data. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The computed transform.</p>\\n\"\n  fullName.vb: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte(), System.Int32, System.Int32)\n  name.vb: TransformFinalBlock(Byte(), Int32, Int32)\n  nameWithType: ICryptoTransform.TransformFinalBlock(Byte[], Int32, Int32)\n  nameWithType.vb: ICryptoTransform.TransformFinalBlock(Byte(), Int32, Int32)\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.IDisposable.Dispose\n  nameWithType: IDisposable.Dispose()\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n"}