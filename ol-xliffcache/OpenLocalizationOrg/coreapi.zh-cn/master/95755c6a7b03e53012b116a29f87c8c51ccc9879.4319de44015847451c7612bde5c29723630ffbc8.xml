{"nodes":[{"pos":[998,1006],"content":"FileInfo","needQuote":true,"nodes":[{"content":"FileInfo","pos":[0,8]}]},{"pos":[3263,3279],"content":"FileInfo(String)","needQuote":true,"nodes":[{"content":"FileInfo(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The fully qualified name of the new file, or the relative file name.","pos":[4093,4166],"source":"\\n<p>The fully qualified name of the new file, or the relative file name."},{"content":"Do not end the path with the directory separator character.&lt;/p&gt;\\n","pos":[4167,4232],"source":" Do not end the path with the directory separator character.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;fileName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[4351,4401],"source":"\\n<p>\\n<em>fileName</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[4402,4408],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[4523,4577],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[4578,4584],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The file name is empty, contains only white spaces, or contains invalid characters.","pos":[4681,4769],"source":"\\n<p>The file name is empty, contains only white spaces, or contains invalid characters."},{"content":"&lt;/p&gt;\\n","pos":[4770,4776],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Access to &lt;em&gt;fileName&lt;/em&gt; is denied.","pos":[4893,4936],"source":"\\n<p>Access to <em>fileName</em> is denied."},{"content":"&lt;/p&gt;\\n","pos":[4937,4943],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The specified path, file name, or both exceed the system-defined maximum length.","pos":[5052,5137],"source":"\\n<p>The specified path, file name, or both exceed the system-defined maximum length."},{"content":"For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[5138,5267]},{"content":"&lt;/p&gt;\\n","pos":[5268,5274],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;fileName&lt;/em&gt; contains a colon (:) in the middle of the string.","pos":[5379,5453],"source":"\\n<p>\\n<em>fileName</em> contains a colon (:) in the middle of the string."},{"content":"&lt;/p&gt;\\n","pos":[5454,5460],"source":" </p>\\n"},{"pos":[5846,5855],"content":"Directory","needQuote":true,"nodes":[{"content":"Directory","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The specified path is invalid, such as being on an unmapped drive.","pos":[6776,6847],"source":"\\n<p>The specified path is invalid, such as being on an unmapped drive."},{"content":"&lt;/p&gt;\\n","pos":[6848,6854],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[6969,7023],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[7024,7030],"source":" </p>\\n"},{"pos":[7442,7455],"content":"DirectoryName","needQuote":true,"nodes":[{"content":"DirectoryName","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A string representing the directory's full path.&lt;/p&gt;\\n","pos":[8159,8218],"source":"\\n<p>A string representing the directory's full path.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;null&lt;/strong&gt; was passed in for the directory name.","pos":[8337,8403],"source":"\\n<p>\\n<strong>null</strong> was passed in for the directory name."},{"content":"&lt;/p&gt;\\n","pos":[8404,8410],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The fully qualified path is 260 or more characters.&lt;/p&gt;\\n","pos":[8519,8581],"source":"\\n<p>The fully qualified path is 260 or more characters.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[8696,8750],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[8751,8757],"source":" </p>\\n"},{"pos":[9152,9158],"content":"Exists","needQuote":true,"nodes":[{"content":"Exists","pos":[0,6]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the file exists; &lt;strong&gt;false&lt;/strong&gt; if the file does not exist or if the file is a directory.&lt;/p&gt;\\n","pos":[9846,9981],"source":"\\n<p>\\n<strong>true</strong> if the file exists; <strong>false</strong> if the file does not exist or if the file is a directory.</p>\\n"},{"pos":[10330,10340],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current file is read only; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10980,11083],"source":"\\n<p>\\n<strong>true</strong> if the current file is read only; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurred while opening the file.&lt;/p&gt;\\n","pos":[11449,11505],"source":"\\n<p>An I/O error occurred while opening the file.</p>\\n"},{"content":"\\n&lt;p&gt;This operation is not supported on the current platform.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The caller does not have the required permission.&lt;/p&gt;\\n","pos":[11622,11761],"source":"\\n<p>This operation is not supported on the current platform.</p>\\n<p>-or- </p>\\n<p>The caller does not have the required permission.</p>\\n"},{"content":"\\n&lt;p&gt;The user does not have write permission, but attempted to set this property to &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[11858,11971],"source":"\\n<p>The user does not have write permission, but attempted to set this property to <strong>false</strong>.</p>\\n"},{"pos":[12358,12364],"content":"Length","needQuote":true,"nodes":[{"content":"Length","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The size of the current file in bytes.&lt;/p&gt;\\n","pos":[13027,13076],"source":"\\n<p>The size of the current file in bytes.</p>\\n"},{"content":"\\n&lt;p&gt;The file does not exist.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The &lt;strong&gt;Length&lt;/strong&gt; property is called for a directory.","pos":[13448,13563],"source":"\\n<p>The file does not exist.</p>\\n<p>-or- </p>\\n<p>The <strong>Length</strong> property is called for a directory."},{"content":"&lt;/p&gt;\\n","pos":[13564,13570],"source":" </p>\\n"},{"pos":[13828,13832],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"content":"\\n&lt;p&gt;The name of the file.&lt;/p&gt;\\n","pos":[14427,14459],"source":"\\n<p>The name of the file.</p>\\n"},{"pos":[14804,14816],"content":"AppendText()","needQuote":true,"nodes":[{"content":"AppendText()","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A new &lt;strong&gt;StreamWriter&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[15614,15661],"source":"\\n<p>A new <strong>StreamWriter</strong>.</p>\\n"},{"pos":[16163,16177],"content":"CopyTo(String)","needQuote":true,"nodes":[{"content":"CopyTo(String)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The name of the new file to copy to.","pos":[16874,16915],"source":"\\n<p>The name of the new file to copy to."},{"content":"&lt;/p&gt;\\n","pos":[16916,16922],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A new file with a fully qualified path.&lt;/p&gt;\\n","pos":[16987,17037],"source":"\\n<p>A new file with a fully qualified path.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;destFileName&lt;/em&gt; is empty, contains only white spaces, or contains invalid characters.","pos":[17148,17246],"source":"\\n<p>\\n<em>destFileName</em> is empty, contains only white spaces, or contains invalid characters."},{"content":"&lt;/p&gt;\\n","pos":[17247,17253],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An error occurs, or the destination file already exists.","pos":[17344,17405],"source":"\\n<p>An error occurs, or the destination file already exists."},{"content":"&lt;/p&gt;\\n","pos":[17406,17412],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[17527,17581],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[17582,17588],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;destFileName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[17693,17747],"source":"\\n<p>\\n<em>destFileName</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[17748,17754],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A directory path is passed in, or the file is being moved to a different drive.","pos":[17871,17955],"source":"\\n<p>A directory path is passed in, or the file is being moved to a different drive."},{"content":"&lt;/p&gt;\\n","pos":[17956,17962],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The directory specified in &lt;em&gt;destFileName&lt;/em&gt; does not exist.&lt;/p&gt;\\n","pos":[18083,18158],"source":"\\n<p>The directory specified in <em>destFileName</em> does not exist.</p>\\n"},{"content":"\\n&lt;p&gt;The specified path, file name, or both exceed the system-defined maximum length.","pos":[18267,18352],"source":"\\n<p>The specified path, file name, or both exceed the system-defined maximum length."},{"content":"For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[18353,18482]},{"content":"&lt;/p&gt;\\n","pos":[18483,18489],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;destFileName&lt;/em&gt; contains a colon (:) within the string but does not specify the volume.","pos":[18594,18694],"source":"\\n<p>\\n<em>destFileName</em> contains a colon (:) within the string but does not specify the volume."},{"content":"&lt;/p&gt;\\n","pos":[18695,18701],"source":" </p>\\n"},{"pos":[19166,19189],"content":"CopyTo(String, Boolean)","needQuote":true,"nodes":[{"content":"CopyTo(String, Boolean)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The name of the new file to copy to.","pos":[19937,19978],"source":"\\n<p>The name of the new file to copy to."},{"content":"&lt;/p&gt;\\n","pos":[19979,19985],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to allow an existing file to be overwritten; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[20054,20162],"source":"\\n<p>\\n<strong>true</strong> to allow an existing file to be overwritten; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[20163,20169],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;destFileName&lt;/em&gt; is empty, contains only white spaces, or contains invalid characters.","pos":[20616,20714],"source":"\\n<p>\\n<em>destFileName</em> is empty, contains only white spaces, or contains invalid characters."},{"content":"&lt;/p&gt;\\n","pos":[20715,20721],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An error occurs, or the destination file already exists and &lt;em&gt;overwrite&lt;/em&gt; is &lt;strong&gt;false&lt;/strong&gt;.","pos":[20812,20922],"source":"\\n<p>An error occurs, or the destination file already exists and <em>overwrite</em> is <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[20923,20929],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[21044,21098],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[21099,21105],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;destFileName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[21210,21264],"source":"\\n<p>\\n<em>destFileName</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[21265,21271],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The directory specified in &lt;em&gt;destFileName&lt;/em&gt; does not exist.&lt;/p&gt;\\n","pos":[21392,21467],"source":"\\n<p>The directory specified in <em>destFileName</em> does not exist.</p>\\n"},{"content":"\\n&lt;p&gt;A directory path is passed in, or the file is being moved to a different drive.","pos":[21584,21668],"source":"\\n<p>A directory path is passed in, or the file is being moved to a different drive."},{"content":"&lt;/p&gt;\\n","pos":[21669,21675],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The specified path, file name, or both exceed the system-defined maximum length.","pos":[21784,21869],"source":"\\n<p>The specified path, file name, or both exceed the system-defined maximum length."},{"content":"For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[21870,21999]},{"content":"&lt;/p&gt;\\n","pos":[22000,22006],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;destFileName&lt;/em&gt; contains a colon (:) in the middle of the string.","pos":[22111,22189],"source":"\\n<p>\\n<em>destFileName</em> contains a colon (:) in the middle of the string."},{"content":"&lt;/p&gt;\\n","pos":[22190,22196],"source":" </p>\\n"},{"pos":[22580,22588],"content":"Create()","needQuote":true,"nodes":[{"content":"Create()","pos":[0,8]}]},{"content":"\\n&lt;p&gt;A new file.&lt;/p&gt;\\n","pos":[23141,23163],"source":"\\n<p>A new file.</p>\\n"},{"pos":[23544,23556],"content":"CreateText()","needQuote":true,"nodes":[{"content":"CreateText()","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A new &lt;strong&gt;StreamWriter&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[24237,24284],"source":"\\n<p>A new <strong>StreamWriter</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The file name is a directory.","pos":[24415,24449],"source":"\\n<p>The file name is a directory."},{"content":"&lt;/p&gt;\\n","pos":[24450,24456],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The disk is read-only.","pos":[24547,24574],"source":"\\n<p>The disk is read-only."},{"content":"&lt;/p&gt;\\n","pos":[24575,24581],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[24696,24750],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[24751,24757],"source":" </p>\\n"},{"pos":[25214,25222],"content":"Delete()","needQuote":true,"nodes":[{"content":"Delete()","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The target file is open or memory-mapped on a computer running Microsoft Windows NT.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;There is an open handle on the file, and the operating system is Windows XP or earlier.","pos":[25943,26141],"source":"\\n<p>The target file is open or memory-mapped on a computer running Microsoft Windows NT.</p>\\n<p>-or-</p>\\n<p>There is an open handle on the file, and the operating system is Windows XP or earlier."},{"content":"This open handle can result from enumerating directories and files.","pos":[26142,26209]},{"content":"For more information, see How to: Enumerate Directories and Files.","pos":[26210,26276]},{"content":"&lt;/p&gt;\\n","pos":[26277,26283],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[26398,26452],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[26453,26459],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The path is a directory.","pos":[26576,26605],"source":"\\n<p>The path is a directory."},{"content":"&lt;/p&gt;\\n","pos":[26606,26612],"source":" </p>\\n"},{"pos":[27053,27067],"content":"MoveTo(String)","needQuote":true,"nodes":[{"content":"MoveTo(String)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The path to move the file to, which can specify a different file name.","pos":[27824,27899],"source":"\\n<p>The path to move the file to, which can specify a different file name."},{"content":"&lt;/p&gt;\\n","pos":[27900,27906],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs, such as the destination file already exists or the destination device is not ready.","pos":[28011,28120],"source":"\\n<p>An I/O error occurs, such as the destination file already exists or the destination device is not ready."},{"content":"&lt;/p&gt;\\n","pos":[28121,28127],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;destFileName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[28232,28286],"source":"\\n<p>\\n<em>destFileName</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[28287,28293],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;destFileName&lt;/em&gt; is empty, contains only white spaces, or contains invalid characters.","pos":[28390,28488],"source":"\\n<p>\\n<em>destFileName</em> is empty, contains only white spaces, or contains invalid characters."},{"content":"&lt;/p&gt;\\n","pos":[28489,28495],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[28610,28664],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[28665,28671],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;destFileName&lt;/em&gt; is read-only or is a directory.","pos":[28788,28848],"source":"\\n<p>\\n<em>destFileName</em> is read-only or is a directory."},{"content":"&lt;/p&gt;\\n","pos":[28849,28855],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The file is not found.","pos":[28966,28993],"source":"\\n<p>The file is not found."},{"content":"&lt;/p&gt;\\n","pos":[28994,29000],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The specified path is invalid, such as being on an unmapped drive.","pos":[29121,29192],"source":"\\n<p>The specified path is invalid, such as being on an unmapped drive."},{"content":"&lt;/p&gt;\\n","pos":[29193,29199],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The specified path, file name, or both exceed the system-defined maximum length.","pos":[29308,29393],"source":"\\n<p>The specified path, file name, or both exceed the system-defined maximum length."},{"content":"For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[29394,29523]},{"content":"&lt;/p&gt;\\n","pos":[29524,29530],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;destFileName&lt;/em&gt; contains a colon (:) in the middle of the string.","pos":[29635,29713],"source":"\\n<p>\\n<em>destFileName</em> contains a colon (:) in the middle of the string."},{"content":"&lt;/p&gt;\\n","pos":[29714,29720],"source":" </p>\\n"},{"pos":[30149,30163],"content":"Open(FileMode)","needQuote":true,"nodes":[{"content":"Open(FileMode)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;A file opened in the specified mode, with read/write access and unshared.&lt;/p&gt;\\n","pos":[31073,31157],"source":"\\n<p>A file opened in the specified mode, with read/write access and unshared.</p>\\n"},{"content":"\\n&lt;p&gt;The file is not found.","pos":[31282,31309],"source":"\\n<p>The file is not found."},{"content":"&lt;/p&gt;\\n","pos":[31310,31316],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The file is read-only or is a directory.","pos":[31433,31478],"source":"\\n<p>The file is read-only or is a directory."},{"content":"&lt;/p&gt;\\n","pos":[31479,31485],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The specified path is invalid, such as being on an unmapped drive.","pos":[31606,31677],"source":"\\n<p>The specified path is invalid, such as being on an unmapped drive."},{"content":"&lt;/p&gt;\\n","pos":[31678,31684],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The file is already open.","pos":[31775,31805],"source":"\\n<p>The file is already open."},{"content":"&lt;/p&gt;\\n","pos":[31806,31812],"source":" </p>\\n"},{"pos":[32304,32330],"content":"Open(FileMode, FileAccess)","needQuote":true,"nodes":[{"content":"Open(FileMode, FileAccess)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[33932,33986],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[33987,33993],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The file is not found.","pos":[34104,34131],"source":"\\n<p>The file is not found."},{"content":"&lt;/p&gt;\\n","pos":[34132,34138],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;path&lt;/em&gt; is read-only or is a directory.","pos":[34255,34307],"source":"\\n<p>\\n<em>path</em> is read-only or is a directory."},{"content":"&lt;/p&gt;\\n","pos":[34308,34314],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The specified path is invalid, such as being on an unmapped drive.","pos":[34435,34506],"source":"\\n<p>The specified path is invalid, such as being on an unmapped drive."},{"content":"&lt;/p&gt;\\n","pos":[34507,34513],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The file is already open.","pos":[34604,34634],"source":"\\n<p>The file is already open."},{"content":"&lt;/p&gt;\\n","pos":[34635,34641],"source":" </p>\\n"},{"pos":[35205,35242],"content":"Open(FileMode, FileAccess, FileShare)","needQuote":true,"nodes":[{"content":"Open(FileMode, FileAccess, FileShare)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[37204,37258],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[37259,37265],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The file is not found.","pos":[37376,37403],"source":"\\n<p>The file is not found."},{"content":"&lt;/p&gt;\\n","pos":[37404,37410],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;path&lt;/em&gt; is read-only or is a directory.","pos":[37527,37579],"source":"\\n<p>\\n<em>path</em> is read-only or is a directory."},{"content":"&lt;/p&gt;\\n","pos":[37580,37586],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The specified path is invalid, such as being on an unmapped drive.","pos":[37707,37778],"source":"\\n<p>The specified path is invalid, such as being on an unmapped drive."},{"content":"&lt;/p&gt;\\n","pos":[37779,37785],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The file is already open.","pos":[37876,37906],"source":"\\n<p>The file is already open."},{"content":"&lt;/p&gt;\\n","pos":[37907,37913],"source":" </p>\\n"},{"pos":[38317,38327],"content":"OpenRead()","needQuote":true,"nodes":[{"content":"OpenRead()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;path&lt;/em&gt; is read-only or is a directory.","pos":[39298,39350],"source":"\\n<p>\\n<em>path</em> is read-only or is a directory."},{"content":"&lt;/p&gt;\\n","pos":[39351,39357],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The specified path is invalid, such as being on an unmapped drive.","pos":[39478,39549],"source":"\\n<p>The specified path is invalid, such as being on an unmapped drive."},{"content":"&lt;/p&gt;\\n","pos":[39550,39556],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The file is already open.","pos":[39647,39677],"source":"\\n<p>The file is already open."},{"content":"&lt;/p&gt;\\n","pos":[39678,39684],"source":" </p>\\n"},{"pos":[40061,40071],"content":"OpenText()","needQuote":true,"nodes":[{"content":"OpenText()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;A new &lt;strong&gt;StreamReader&lt;/strong&gt; with UTF8 encoding.&lt;/p&gt;\\n","pos":[40851,40917],"source":"\\n<p>A new <strong>StreamReader</strong> with UTF8 encoding.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[41046,41100],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[41101,41107],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The file is not found.","pos":[41218,41245],"source":"\\n<p>The file is not found."},{"content":"&lt;/p&gt;\\n","pos":[41246,41252],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;path&lt;/em&gt; is read-only or is a directory.","pos":[41369,41421],"source":"\\n<p>\\n<em>path</em> is read-only or is a directory."},{"content":"&lt;/p&gt;\\n","pos":[41422,41428],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The specified path is invalid, such as being on an unmapped drive.","pos":[41549,41620],"source":"\\n<p>The specified path is invalid, such as being on an unmapped drive."},{"content":"&lt;/p&gt;\\n","pos":[41621,41627],"source":" </p>\\n"},{"pos":[42170,42181],"content":"OpenWrite()","needQuote":true,"nodes":[{"content":"OpenWrite()","pos":[0,11]}]},{"pos":[43990,44000],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;A string representing the path.&lt;/p&gt;\\n","pos":[44579,44621],"source":"\\n<p>A string representing the path.</p>\\n"},{"pos":[44838,44847],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[44987,44993],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[45152,45166],"content":"FileSystemInfo","needQuote":true,"nodes":[{"content":"FileSystemInfo","pos":[0,14]}]},{"pos":[45379,45387],"content":"FullPath","needQuote":true,"nodes":[{"content":"FullPath","pos":[0,8]}]},{"pos":[45631,45643],"content":"OriginalPath","needQuote":true,"nodes":[{"content":"OriginalPath","pos":[0,12]}]},{"pos":[45897,45907],"content":"Attributes","needQuote":true,"nodes":[{"content":"Attributes","pos":[0,10]}]},{"pos":[46157,46169],"content":"CreationTime","needQuote":true,"nodes":[{"content":"CreationTime","pos":[0,12]}]},{"pos":[46428,46443],"content":"CreationTimeUtc","needQuote":true,"nodes":[{"content":"CreationTimeUtc","pos":[0,15]}]},{"pos":[46705,46714],"content":"Extension","needQuote":true,"nodes":[{"content":"Extension","pos":[0,9]}]},{"pos":[46957,46965],"content":"FullName","needQuote":true,"nodes":[{"content":"FullName","pos":[0,8]}]},{"pos":[47211,47225],"content":"LastAccessTime","needQuote":true,"nodes":[{"content":"LastAccessTime","pos":[0,14]}]},{"pos":[47492,47509],"content":"LastAccessTimeUtc","needQuote":true,"nodes":[{"content":"LastAccessTimeUtc","pos":[0,17]}]},{"pos":[47781,47794],"content":"LastWriteTime","needQuote":true,"nodes":[{"content":"LastWriteTime","pos":[0,13]}]},{"pos":[48057,48073],"content":"LastWriteTimeUtc","needQuote":true,"nodes":[{"content":"LastWriteTimeUtc","pos":[0,16]}]},{"pos":[48336,48345],"content":"Refresh()","needQuote":true,"nodes":[{"content":"Refresh()","pos":[0,9]}]},{"pos":[48460,48467],"content":"Refresh","needQuote":true,"nodes":[{"content":"Refresh","pos":[0,7]}]},{"pos":[48525,48526],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48553,48554],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48634,48641],"content":"Refresh","needQuote":true,"nodes":[{"content":"Refresh","pos":[0,7]}]},{"pos":[48699,48700],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48727,48728],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48928,48942],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[49061,49067],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[49134,49135],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49185,49191],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[49251,49252],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49335,49341],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[49408,49409],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49459,49465],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[49525,49526],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49740,49762],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[49910,49916],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[49983,49984],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50034,50040],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[50101,50102]},{"pos":[50157,50163],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[50223,50224],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50321,50327],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[50394,50395],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50445,50451],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[50512,50513]},{"pos":[50568,50574],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[50634,50635],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50880,50911],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[51077,51092],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[51168,51169],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51219,51225],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[51286,51287]},{"pos":[51342,51348],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[51408,51409],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51515,51530],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[51606,51607],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51657,51663],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[51724,51725]},{"pos":[51780,51786],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[51846,51847],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52077,52090],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[52191,52202],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[52274,52275],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52302,52303],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52376,52387],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[52459,52460],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52487,52488],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52663,52672],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[52765,52772],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[52840,52841],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52868,52869],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52938,52945],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[53013,53014],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53041,53042],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53217,53234],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[53343,53358],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[53434,53435],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53462,53463],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53540,53555],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[53631,53632],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53659,53660],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53805,53811],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[53942,53948],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[54106,54119],"content":"DirectoryInfo","needQuote":true,"nodes":[{"content":"DirectoryInfo","pos":[0,13]}]},{"pos":[54327,54333],"content":"Exists","needQuote":true,"nodes":[{"content":"Exists","pos":[0,6]}]},{"pos":[54530,54537],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[54684,54689],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[54865,54869],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[55071,55083],"content":"StreamWriter","needQuote":true,"nodes":[{"content":"StreamWriter","pos":[0,12]}]},{"pos":[55260,55268],"content":"FileInfo","needQuote":true,"nodes":[{"content":"FileInfo","pos":[0,8]}]},{"pos":[55435,55445],"content":"FileStream","needQuote":true,"nodes":[{"content":"FileStream","pos":[0,10]}]},{"pos":[55644,55652],"content":"Delete()","needQuote":true,"nodes":[{"content":"Delete()","pos":[0,8]}]},{"pos":[55765,55771],"content":"Delete","needQuote":true,"nodes":[{"content":"Delete","pos":[0,6]}]},{"pos":[55828,55829],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55856,55857],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55936,55942],"content":"Delete","needQuote":true,"nodes":[{"content":"Delete","pos":[0,6]}]},{"pos":[55999,56000],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56027,56028],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56206,56214],"content":"FileMode","needQuote":true,"nodes":[{"content":"FileMode","pos":[0,8]}]},{"pos":[56381,56391],"content":"FileAccess","needQuote":true,"nodes":[{"content":"FileAccess","pos":[0,10]}]},{"pos":[56563,56572],"content":"FileShare","needQuote":true,"nodes":[{"content":"FileShare","pos":[0,9]}]},{"pos":[56744,56756],"content":"StreamReader","needQuote":true,"nodes":[{"content":"StreamReader","pos":[0,12]}]},{"pos":[56940,56950],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[57045,57053],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[57122,57123],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57150,57151],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57221,57229],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[57298,57299],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57326,57327],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57480,57501],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[57694,57711],"content":"SecurityException","needQuote":true,"nodes":[{"content":"SecurityException","pos":[0,17]}]},{"pos":[57918,57935],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[58134,58161],"content":"UnauthorizedAccessException","needQuote":true,"nodes":[{"content":"UnauthorizedAccessException","pos":[0,27]}]},{"pos":[58369,58389],"content":"PathTooLongException","needQuote":true,"nodes":[{"content":"PathTooLongException","pos":[0,20]}]},{"pos":[58597,58618],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[58814,58840],"content":"DirectoryNotFoundException","needQuote":true,"nodes":[{"content":"DirectoryNotFoundException","pos":[0,26]}]},{"pos":[59052,59073],"content":"FileNotFoundException","needQuote":true,"nodes":[{"content":"FileNotFoundException","pos":[0,21]}]},{"pos":[59280,59291],"content":"IOException","needQuote":true,"nodes":[{"content":"IOException","pos":[0,11]}]}],"content":"items:\n- uid: System.IO.FileInfo\n  commentId: T:System.IO.FileInfo\n  id: FileInfo\n  parent: System.IO\n  children:\n  - System.IO.FileInfo.#ctor(System.String)\n  - System.IO.FileInfo.AppendText\n  - System.IO.FileInfo.CopyTo(System.String)\n  - System.IO.FileInfo.CopyTo(System.String,System.Boolean)\n  - System.IO.FileInfo.Create\n  - System.IO.FileInfo.CreateText\n  - System.IO.FileInfo.Delete\n  - System.IO.FileInfo.Directory\n  - System.IO.FileInfo.DirectoryName\n  - System.IO.FileInfo.Exists\n  - System.IO.FileInfo.IsReadOnly\n  - System.IO.FileInfo.Length\n  - System.IO.FileInfo.MoveTo(System.String)\n  - System.IO.FileInfo.Name\n  - System.IO.FileInfo.Open(System.IO.FileMode)\n  - System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess)\n  - System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)\n  - System.IO.FileInfo.OpenRead\n  - System.IO.FileInfo.OpenText\n  - System.IO.FileInfo.OpenWrite\n  - System.IO.FileInfo.ToString\n  langs:\n  - csharp\n  - vb\n  name: FileInfo\n  fullName: System.IO.FileInfo\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FileInfo\n    path: src/mscorlib/src/System/IO/FileInfo.cs\n    startLine: 33\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Provides properties and instance methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <xref href=\\\"System.IO.FileStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects. This class cannot be inherited.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public sealed class FileInfo : FileSystemInfo, ISerializable\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public NotInheritable Class FileInfo\n          Inherits FileSystemInfo\n          Implements ISerializable\n  seealso:\n  - type: System.IO.FileSystemWatcher\n    commentId: T:System.IO.FileSystemWatcher\n  - type: System.IO.DriveInfo\n    commentId: T:System.IO.DriveInfo\n  inheritance:\n  - System.Object\n  - System.IO.FileSystemInfo\n  inheritedMembers:\n  - System.IO.FileSystemInfo.FullPath\n  - System.IO.FileSystemInfo.OriginalPath\n  - System.IO.FileSystemInfo.Attributes\n  - System.IO.FileSystemInfo.CreationTime\n  - System.IO.FileSystemInfo.CreationTimeUtc\n  - System.IO.FileSystemInfo.Extension\n  - System.IO.FileSystemInfo.FullName\n  - System.IO.FileSystemInfo.LastAccessTime\n  - System.IO.FileSystemInfo.LastAccessTimeUtc\n  - System.IO.FileSystemInfo.LastWriteTime\n  - System.IO.FileSystemInfo.LastWriteTimeUtc\n  - System.IO.FileSystemInfo.Refresh\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: FileInfo\n- uid: System.IO.FileInfo.#ctor(System.String)\n  commentId: M:System.IO.FileInfo.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.IO.FileInfo\n  langs:\n  - csharp\n  - vb\n  name: FileInfo(String)\n  fullName: System.IO.FileInfo.FileInfo(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IO/FileInfo.cs\n    startLine: 61\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.IO.FileInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, which acts as a wrapper for a file path.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public FileInfo(string fileName)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Sub New(fileName As String)\n    parameters:\n    - id: fileName\n      type: System.String\n      description: \"\\n<p>The fully qualified name of the new file, or the relative file name. Do not end the path with the directory separator character.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>fileName</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The file name is empty, contains only white spaces, or contains invalid characters. </p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>Access to <em>fileName</em> is denied. </p>\\n\"\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: \"\\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>fileName</em> contains a colon (:) in the middle of the string. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: FileInfo.FileInfo(String)\n- uid: System.IO.FileInfo.Directory\n  commentId: P:System.IO.FileInfo.Directory\n  id: Directory\n  parent: System.IO.FileInfo\n  langs:\n  - csharp\n  - vb\n  name: Directory\n  fullName: System.IO.FileInfo.Directory\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Directory\n    path: src/mscorlib/src/System/IO/FileInfo.cs\n    startLine: 166\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Gets an instance of the parent directory.</p>\\n\"\n  syntax:\n    content: public DirectoryInfo Directory { get; }\n    content.vb: Public ReadOnly Property Directory As DirectoryInfo\n    parameters: []\n    return:\n      type: System.IO.DirectoryInfo\n      description: \"\\n<p>A <xref href=\\\"System.IO.DirectoryInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object representing the parent directory of this file.</p>\\n\"\n  exceptions:\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileInfo.Directory\n- uid: System.IO.FileInfo.DirectoryName\n  commentId: P:System.IO.FileInfo.DirectoryName\n  id: DirectoryName\n  parent: System.IO.FileInfo\n  langs:\n  - csharp\n  - vb\n  name: DirectoryName\n  fullName: System.IO.FileInfo.DirectoryName\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DirectoryName\n    path: src/mscorlib/src/System/IO/FileInfo.cs\n    startLine: 146\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Gets a string representing the directory's full path.</p>\\n\"\n  syntax:\n    content: >-\n      public string DirectoryName\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public ReadOnly Property DirectoryName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>A string representing the directory's full path.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<strong>null</strong> was passed in for the directory name. </p>\\n\"\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: \"\\n<p>The fully qualified path is 260 or more characters.</p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileInfo.DirectoryName\n- uid: System.IO.FileInfo.Exists\n  commentId: P:System.IO.FileInfo.Exists\n  id: Exists\n  parent: System.IO.FileInfo\n  langs:\n  - csharp\n  - vb\n  name: Exists\n  fullName: System.IO.FileInfo.Exists\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Exists\n    path: src/mscorlib/src/System/IO/FileInfo.cs\n    startLine: 316\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Gets a value indicating whether a file exists.</p>\\n\"\n  syntax:\n    content: >-\n      public override bool Exists\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public Overrides ReadOnly Property Exists As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the file exists; <strong>false</strong> if the file does not exist or if the file is a directory.</p>\\n\"\n  overridden: System.IO.FileSystemInfo.Exists\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: FileInfo.Exists\n- uid: System.IO.FileInfo.IsReadOnly\n  commentId: P:System.IO.FileInfo.IsReadOnly\n  id: IsReadOnly\n  parent: System.IO.FileInfo\n  langs:\n  - csharp\n  - vb\n  name: IsReadOnly\n  fullName: System.IO.FileInfo.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsReadOnly\n    path: src/mscorlib/src/System/IO/FileInfo.cs\n    startLine: 177\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Gets or sets a value that determines if the current file is read only.</p>\\n\"\n  syntax:\n    content: public bool IsReadOnly { get; set; }\n    content.vb: Public Property IsReadOnly As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current file is read only; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: \"\\n<p>The file described by the current <xref href=\\\"System.IO.FileInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object could not be found.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurred while opening the file.</p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>This operation is not supported on the current platform.</p>\\n<p>-or- </p>\\n<p>The caller does not have the required permission.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The user does not have write permission, but attempted to set this property to <strong>false</strong>.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: FileInfo.IsReadOnly\n- uid: System.IO.FileInfo.Length\n  commentId: P:System.IO.FileInfo.Length\n  id: Length\n  parent: System.IO.FileInfo\n  langs:\n  - csharp\n  - vb\n  name: Length\n  fullName: System.IO.FileInfo.Length\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Length\n    path: src/mscorlib/src/System/IO/FileInfo.cs\n    startLine: 129\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Gets the size, in bytes, of the current file.</p>\\n\"\n  syntax:\n    content: >-\n      public long Length\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public ReadOnly Property Length As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>The size of the current file in bytes.</p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>\\n<xref href=\\\"System.IO.FileSystemInfo.Refresh\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> cannot update the state of the file or directory. </p>\\n\"\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: \"\\n<p>The file does not exist.</p>\\n<p>-or- </p>\\n<p>The <strong>Length</strong> property is called for a directory. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileInfo.Length\n- uid: System.IO.FileInfo.Name\n  commentId: P:System.IO.FileInfo.Name\n  id: Name\n  parent: System.IO.FileInfo\n  langs:\n  - csharp\n  - vb\n  name: Name\n  fullName: System.IO.FileInfo.Name\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Name\n    path: src/mscorlib/src/System/IO/FileInfo.cs\n    startLine: 124\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Gets the name of the file.</p>\\n\"\n  syntax:\n    content: public override string Name { get; }\n    content.vb: Public Overrides ReadOnly Property Name As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the file.</p>\\n\"\n  overridden: System.IO.FileSystemInfo.Name\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: FileInfo.Name\n- uid: System.IO.FileInfo.AppendText\n  commentId: M:System.IO.FileInfo.AppendText\n  id: AppendText\n  parent: System.IO.FileInfo\n  langs:\n  - csharp\n  - vb\n  name: AppendText()\n  fullName: System.IO.FileInfo.AppendText()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AppendText\n    path: src/mscorlib/src/System/IO/FileInfo.cs\n    startLine: 217\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Creates a <xref href=\\\"System.IO.StreamWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that appends text to the file represented by this instance of the <xref href=\\\"System.IO.FileInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public StreamWriter AppendText()\n    content.vb: Public Function AppendText As StreamWriter\n    return:\n      type: System.IO.StreamWriter\n      description: \"\\n<p>A new <strong>StreamWriter</strong>.</p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: FileInfo.AppendText()\n- uid: System.IO.FileInfo.CopyTo(System.String)\n  commentId: M:System.IO.FileInfo.CopyTo(System.String)\n  id: CopyTo(System.String)\n  parent: System.IO.FileInfo\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(String)\n  fullName: System.IO.FileInfo.CopyTo(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CopyTo\n    path: src/mscorlib/src/System/IO/FileInfo.cs\n    startLine: 232\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Copies an existing file to a new file, disallowing the overwriting of an existing file.</p>\\n\"\n  syntax:\n    content: public FileInfo CopyTo(string destFileName)\n    content.vb: Public Function CopyTo(destFileName As String) As FileInfo\n    parameters:\n    - id: destFileName\n      type: System.String\n      description: \"\\n<p>The name of the new file to copy to. </p>\\n\"\n    return:\n      type: System.IO.FileInfo\n      description: \"\\n<p>A new file with a fully qualified path.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>destFileName</em> is empty, contains only white spaces, or contains invalid characters. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An error occurs, or the destination file already exists. </p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>destFileName</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>A directory path is passed in, or the file is being moved to a different drive. </p>\\n\"\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The directory specified in <em>destFileName</em> does not exist.</p>\\n\"\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: \"\\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>destFileName</em> contains a colon (:) within the string but does not specify the volume. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: FileInfo.CopyTo(String)\n- uid: System.IO.FileInfo.CopyTo(System.String,System.Boolean)\n  commentId: M:System.IO.FileInfo.CopyTo(System.String,System.Boolean)\n  id: CopyTo(System.String,System.Boolean)\n  parent: System.IO.FileInfo\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(String, Boolean)\n  fullName: System.IO.FileInfo.CopyTo(System.String, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CopyTo\n    path: src/mscorlib/src/System/IO/FileInfo.cs\n    startLine: 253\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Copies an existing file to a new file, allowing the overwriting of an existing file.</p>\\n\"\n  syntax:\n    content: public FileInfo CopyTo(string destFileName, bool overwrite)\n    content.vb: Public Function CopyTo(destFileName As String, overwrite As Boolean) As FileInfo\n    parameters:\n    - id: destFileName\n      type: System.String\n      description: \"\\n<p>The name of the new file to copy to. </p>\\n\"\n    - id: overwrite\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to allow an existing file to be overwritten; otherwise, <strong>false</strong>. </p>\\n\"\n    return:\n      type: System.IO.FileInfo\n      description: \"\\n<p>A new file, or an overwrite of an existing file if <em>overwrite</em> is <strong>true</strong>. If the file exists and <em>overwrite</em> is <strong>false</strong>, an <xref href=\\\"System.IO.IOException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>destFileName</em> is empty, contains only white spaces, or contains invalid characters. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An error occurs, or the destination file already exists and <em>overwrite</em> is <strong>false</strong>. </p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>destFileName</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The directory specified in <em>destFileName</em> does not exist.</p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>A directory path is passed in, or the file is being moved to a different drive. </p>\\n\"\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: \"\\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>destFileName</em> contains a colon (:) in the middle of the string. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: FileInfo.CopyTo(String, Boolean)\n- uid: System.IO.FileInfo.Create\n  commentId: M:System.IO.FileInfo.Create\n  id: Create\n  parent: System.IO.FileInfo\n  langs:\n  - csharp\n  - vb\n  name: Create()\n  fullName: System.IO.FileInfo.Create()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Create\n    path: src/mscorlib/src/System/IO/FileInfo.cs\n    startLine: 264\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Creates a file.</p>\\n\"\n  syntax:\n    content: public FileStream Create()\n    content.vb: Public Function Create As FileStream\n    return:\n      type: System.IO.FileStream\n      description: \"\\n<p>A new file.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: FileInfo.Create()\n- uid: System.IO.FileInfo.CreateText\n  commentId: M:System.IO.FileInfo.CreateText\n  id: CreateText\n  parent: System.IO.FileInfo\n  langs:\n  - csharp\n  - vb\n  name: CreateText()\n  fullName: System.IO.FileInfo.CreateText()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CreateText\n    path: src/mscorlib/src/System/IO/FileInfo.cs\n    startLine: 212\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Creates a <xref href=\\\"System.IO.StreamWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that writes a new text file.</p>\\n\"\n  syntax:\n    content: public StreamWriter CreateText()\n    content.vb: Public Function CreateText As StreamWriter\n    return:\n      type: System.IO.StreamWriter\n      description: \"\\n<p>A new <strong>StreamWriter</strong>.</p>\\n\"\n  exceptions:\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>The file name is a directory. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>The disk is read-only. </p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: FileInfo.CreateText()\n- uid: System.IO.FileInfo.Delete\n  commentId: M:System.IO.FileInfo.Delete\n  id: Delete\n  parent: System.IO.FileInfo\n  langs:\n  - csharp\n  - vb\n  name: Delete()\n  fullName: System.IO.FileInfo.Delete()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Delete\n    path: src/mscorlib/src/System/IO/FileInfo.cs\n    startLine: 278\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Permanently deletes a file.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override void Delete()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Sub Delete\n  overridden: System.IO.FileSystemInfo.Delete\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>The target file is open or memory-mapped on a computer running Microsoft Windows NT.</p>\\n<p>-or-</p>\\n<p>There is an open handle on the file, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files. </p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>The path is a directory. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: FileInfo.Delete()\n- uid: System.IO.FileInfo.MoveTo(System.String)\n  commentId: M:System.IO.FileInfo.MoveTo(System.String)\n  id: MoveTo(System.String)\n  parent: System.IO.FileInfo\n  langs:\n  - csharp\n  - vb\n  name: MoveTo(String)\n  fullName: System.IO.FileInfo.MoveTo(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MoveTo\n    path: src/mscorlib/src/System/IO/FileInfo.cs\n    startLine: 382\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Moves a specified file to a new location, providing the option to specify a new file name.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public void MoveTo(string destFileName)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Sub MoveTo(destFileName As String)\n    parameters:\n    - id: destFileName\n      type: System.String\n      description: \"\\n<p>The path to move the file to, which can specify a different file name. </p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs, such as the destination file already exists or the destination device is not ready. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>destFileName</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>destFileName</em> is empty, contains only white spaces, or contains invalid characters. </p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>\\n<em>destFileName</em> is read-only or is a directory. </p>\\n\"\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: \"\\n<p>The file is not found. </p>\\n\"\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\\n\"\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: \"\\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>destFileName</em> contains a colon (:) in the middle of the string. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: FileInfo.MoveTo(String)\n- uid: System.IO.FileInfo.Open(System.IO.FileMode)\n  commentId: M:System.IO.FileInfo.Open(System.IO.FileMode)\n  id: Open(System.IO.FileMode)\n  parent: System.IO.FileInfo\n  langs:\n  - csharp\n  - vb\n  name: Open(FileMode)\n  fullName: System.IO.FileInfo.Open(System.IO.FileMode)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Open\n    path: src/mscorlib/src/System/IO/FileInfo.cs\n    startLine: 341\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Opens a file in the specified mode.</p>\\n\"\n  syntax:\n    content: public FileStream Open(FileMode mode)\n    content.vb: Public Function Open(mode As FileMode) As FileStream\n    parameters:\n    - id: mode\n      type: System.IO.FileMode\n      description: \"\\n<p>A <xref href=\\\"System.IO.FileMode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> constant specifying the mode (for example, <strong>Open</strong> or <strong>Append</strong>) in which to open the file. </p>\\n\"\n    return:\n      type: System.IO.FileStream\n      description: \"\\n<p>A file opened in the specified mode, with read/write access and unshared.</p>\\n\"\n  exceptions:\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: \"\\n<p>The file is not found. </p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>The file is read-only or is a directory. </p>\\n\"\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>The file is already open. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: FileInfo.Open(FileMode)\n- uid: System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess)\n  commentId: M:System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess)\n  id: Open(System.IO.FileMode,System.IO.FileAccess)\n  parent: System.IO.FileInfo\n  langs:\n  - csharp\n  - vb\n  name: Open(FileMode, FileAccess)\n  fullName: System.IO.FileInfo.Open(System.IO.FileMode, System.IO.FileAccess)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Open\n    path: src/mscorlib/src/System/IO/FileInfo.cs\n    startLine: 345\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Opens a file in the specified mode with read, write, or read/write access.</p>\\n\"\n  syntax:\n    content: public FileStream Open(FileMode mode, FileAccess access)\n    content.vb: Public Function Open(mode As FileMode, access As FileAccess) As FileStream\n    parameters:\n    - id: mode\n      type: System.IO.FileMode\n      description: \"\\n<p>A <xref href=\\\"System.IO.FileMode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> constant specifying the mode (for example, <strong>Open</strong> or <strong>Append</strong>) in which to open the file. </p>\\n\"\n    - id: access\n      type: System.IO.FileAccess\n      description: \"\\n<p>A <xref href=\\\"System.IO.FileAccess\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> constant specifying whether to open the file with <strong>Read</strong>, <strong>Write</strong>, or <strong>ReadWrite</strong> file access. </p>\\n\"\n    return:\n      type: System.IO.FileStream\n      description: \"\\n<p>A <xref href=\\\"System.IO.FileStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object opened in the specified mode and access, and unshared.</p>\\n\"\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: \"\\n<p>The file is not found. </p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>\\n<em>path</em> is read-only or is a directory. </p>\\n\"\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>The file is already open. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: FileInfo.Open(FileMode, FileAccess)\n- uid: System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)\n  commentId: M:System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)\n  id: Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)\n  parent: System.IO.FileInfo\n  langs:\n  - csharp\n  - vb\n  name: Open(FileMode, FileAccess, FileShare)\n  fullName: System.IO.FileInfo.Open(System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Open\n    path: src/mscorlib/src/System/IO/FileInfo.cs\n    startLine: 349\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.</p>\\n\"\n  syntax:\n    content: public FileStream Open(FileMode mode, FileAccess access, FileShare share)\n    content.vb: Public Function Open(mode As FileMode, access As FileAccess, share As FileShare) As FileStream\n    parameters:\n    - id: mode\n      type: System.IO.FileMode\n      description: \"\\n<p>A <xref href=\\\"System.IO.FileMode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> constant specifying the mode (for example, <strong>Open</strong> or <strong>Append</strong>) in which to open the file. </p>\\n\"\n    - id: access\n      type: System.IO.FileAccess\n      description: \"\\n<p>A <xref href=\\\"System.IO.FileAccess\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> constant specifying whether to open the file with <strong>Read</strong>, <strong>Write</strong>, or <strong>ReadWrite</strong> file access. </p>\\n\"\n    - id: share\n      type: System.IO.FileShare\n      description: \"\\n<p>A <xref href=\\\"System.IO.FileShare\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> constant specifying the type of access other <strong>FileStream</strong> objects have to this file. </p>\\n\"\n    return:\n      type: System.IO.FileStream\n      description: \"\\n<p>A <xref href=\\\"System.IO.FileStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object opened with the specified mode, access, and sharing options.</p>\\n\"\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: \"\\n<p>The file is not found. </p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>\\n<em>path</em> is read-only or is a directory. </p>\\n\"\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>The file is already open. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: FileInfo.Open(FileMode, FileAccess, FileShare)\n- uid: System.IO.FileInfo.OpenRead\n  commentId: M:System.IO.FileInfo.OpenRead\n  id: OpenRead\n  parent: System.IO.FileInfo\n  langs:\n  - csharp\n  - vb\n  name: OpenRead()\n  fullName: System.IO.FileInfo.OpenRead()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OpenRead\n    path: src/mscorlib/src/System/IO/FileInfo.cs\n    startLine: 355\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Creates a read-only <xref href=\\\"System.IO.FileStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public FileStream OpenRead()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function OpenRead As FileStream\n    return:\n      type: System.IO.FileStream\n      description: \"\\n<p>A new read-only <xref href=\\\"System.IO.FileStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>\\n<em>path</em> is read-only or is a directory. </p>\\n\"\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>The file is already open. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: FileInfo.OpenRead()\n- uid: System.IO.FileInfo.OpenText\n  commentId: M:System.IO.FileInfo.OpenText\n  id: OpenText\n  parent: System.IO.FileInfo\n  langs:\n  - csharp\n  - vb\n  name: OpenText()\n  fullName: System.IO.FileInfo.OpenText()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OpenText\n    path: src/mscorlib/src/System/IO/FileInfo.cs\n    startLine: 206\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Creates a <xref href=\\\"System.IO.StreamReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with UTF8 encoding that reads from an existing text file.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public StreamReader OpenText()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function OpenText As StreamReader\n    return:\n      type: System.IO.StreamReader\n      description: \"\\n<p>A new <strong>StreamReader</strong> with UTF8 encoding.</p>\\n\"\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: \"\\n<p>The file is not found. </p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>\\n<em>path</em> is read-only or is a directory. </p>\\n\"\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.UTF8\n    commentId: P:System.Text.Encoding.UTF8\n  - type: System.IO.StreamReader\n    commentId: T:System.IO.StreamReader\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: FileInfo.OpenText()\n- uid: System.IO.FileInfo.OpenWrite\n  commentId: M:System.IO.FileInfo.OpenWrite\n  id: OpenWrite\n  parent: System.IO.FileInfo\n  langs:\n  - csharp\n  - vb\n  name: OpenWrite()\n  fullName: System.IO.FileInfo.OpenWrite()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OpenWrite\n    path: src/mscorlib/src/System/IO/FileInfo.cs\n    startLine: 364\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Creates a write-only <xref href=\\\"System.IO.FileStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public FileStream OpenWrite()\n    content.vb: Public Function OpenWrite As FileStream\n    return:\n      type: System.IO.FileStream\n      description: \"\\n<p>A write-only unshared <xref href=\\\"System.IO.FileStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for a new or existing file.</p>\\n\"\n  exceptions:\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>The path specified when creating an instance of the <xref href=\\\"System.IO.FileInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is read-only or is a directory.  </p>\\n\"\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: \"\\n<p>The path specified when creating an instance of the <xref href=\\\"System.IO.FileInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is invalid, such as being on an unmapped drive. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: FileInfo.OpenWrite()\n- uid: System.IO.FileInfo.ToString\n  commentId: M:System.IO.FileInfo.ToString\n  id: ToString\n  parent: System.IO.FileInfo\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.IO.FileInfo.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/IO/FileInfo.cs\n    startLine: 425\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Returns the path as a string.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string representing the path.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: FileInfo.ToString()\nreferences:\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  nameWithType: System.IO\n  commentId: N:System.IO\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IO.FileSystemInfo\n  parent: System.IO\n  isExternal: false\n  name: FileSystemInfo\n  fullName: System.IO.FileSystemInfo\n  nameWithType: FileSystemInfo\n  commentId: T:System.IO.FileSystemInfo\n- uid: System.IO.FileSystemInfo.FullPath\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: FullPath\n  fullName: System.IO.FileSystemInfo.FullPath\n  nameWithType: FileSystemInfo.FullPath\n  commentId: F:System.IO.FileSystemInfo.FullPath\n- uid: System.IO.FileSystemInfo.OriginalPath\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: OriginalPath\n  fullName: System.IO.FileSystemInfo.OriginalPath\n  nameWithType: FileSystemInfo.OriginalPath\n  commentId: F:System.IO.FileSystemInfo.OriginalPath\n- uid: System.IO.FileSystemInfo.Attributes\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: Attributes\n  fullName: System.IO.FileSystemInfo.Attributes\n  nameWithType: FileSystemInfo.Attributes\n  commentId: P:System.IO.FileSystemInfo.Attributes\n- uid: System.IO.FileSystemInfo.CreationTime\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: CreationTime\n  fullName: System.IO.FileSystemInfo.CreationTime\n  nameWithType: FileSystemInfo.CreationTime\n  commentId: P:System.IO.FileSystemInfo.CreationTime\n- uid: System.IO.FileSystemInfo.CreationTimeUtc\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: CreationTimeUtc\n  fullName: System.IO.FileSystemInfo.CreationTimeUtc\n  nameWithType: FileSystemInfo.CreationTimeUtc\n  commentId: P:System.IO.FileSystemInfo.CreationTimeUtc\n- uid: System.IO.FileSystemInfo.Extension\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: Extension\n  fullName: System.IO.FileSystemInfo.Extension\n  nameWithType: FileSystemInfo.Extension\n  commentId: P:System.IO.FileSystemInfo.Extension\n- uid: System.IO.FileSystemInfo.FullName\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: FullName\n  fullName: System.IO.FileSystemInfo.FullName\n  nameWithType: FileSystemInfo.FullName\n  commentId: P:System.IO.FileSystemInfo.FullName\n- uid: System.IO.FileSystemInfo.LastAccessTime\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: LastAccessTime\n  fullName: System.IO.FileSystemInfo.LastAccessTime\n  nameWithType: FileSystemInfo.LastAccessTime\n  commentId: P:System.IO.FileSystemInfo.LastAccessTime\n- uid: System.IO.FileSystemInfo.LastAccessTimeUtc\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: LastAccessTimeUtc\n  fullName: System.IO.FileSystemInfo.LastAccessTimeUtc\n  nameWithType: FileSystemInfo.LastAccessTimeUtc\n  commentId: P:System.IO.FileSystemInfo.LastAccessTimeUtc\n- uid: System.IO.FileSystemInfo.LastWriteTime\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: LastWriteTime\n  fullName: System.IO.FileSystemInfo.LastWriteTime\n  nameWithType: FileSystemInfo.LastWriteTime\n  commentId: P:System.IO.FileSystemInfo.LastWriteTime\n- uid: System.IO.FileSystemInfo.LastWriteTimeUtc\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: LastWriteTimeUtc\n  fullName: System.IO.FileSystemInfo.LastWriteTimeUtc\n  nameWithType: FileSystemInfo.LastWriteTimeUtc\n  commentId: P:System.IO.FileSystemInfo.LastWriteTimeUtc\n- uid: System.IO.FileSystemInfo.Refresh\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: Refresh()\n  fullName: System.IO.FileSystemInfo.Refresh()\n  spec.csharp:\n  - uid: System.IO.FileSystemInfo.Refresh\n    name: Refresh\n    fullName: System.IO.FileSystemInfo.Refresh\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.FileSystemInfo.Refresh\n    name: Refresh\n    fullName: System.IO.FileSystemInfo.Refresh\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: FileSystemInfo.Refresh()\n  commentId: M:System.IO.FileSystemInfo.Refresh\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.IO.DirectoryInfo\n  parent: System.IO\n  isExternal: false\n  name: DirectoryInfo\n  fullName: System.IO.DirectoryInfo\n  nameWithType: DirectoryInfo\n  commentId: T:System.IO.DirectoryInfo\n- uid: System.IO.FileSystemInfo.Exists\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: Exists\n  fullName: System.IO.FileSystemInfo.Exists\n  nameWithType: FileSystemInfo.Exists\n  commentId: P:System.IO.FileSystemInfo.Exists\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.IO.FileSystemInfo.Name\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: Name\n  fullName: System.IO.FileSystemInfo.Name\n  nameWithType: FileSystemInfo.Name\n  commentId: P:System.IO.FileSystemInfo.Name\n- uid: System.IO.StreamWriter\n  parent: System.IO\n  isExternal: false\n  name: StreamWriter\n  fullName: System.IO.StreamWriter\n  nameWithType: StreamWriter\n  commentId: T:System.IO.StreamWriter\n- uid: System.IO.FileInfo\n  parent: System.IO\n  isExternal: false\n  name: FileInfo\n  fullName: System.IO.FileInfo\n  nameWithType: FileInfo\n  commentId: T:System.IO.FileInfo\n- uid: System.IO.FileStream\n  parent: System.IO\n  isExternal: false\n  name: FileStream\n  fullName: System.IO.FileStream\n  nameWithType: FileStream\n  commentId: T:System.IO.FileStream\n- uid: System.IO.FileSystemInfo.Delete\n  parent: System.IO.FileSystemInfo\n  isExternal: false\n  name: Delete()\n  fullName: System.IO.FileSystemInfo.Delete()\n  spec.csharp:\n  - uid: System.IO.FileSystemInfo.Delete\n    name: Delete\n    fullName: System.IO.FileSystemInfo.Delete\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.FileSystemInfo.Delete\n    name: Delete\n    fullName: System.IO.FileSystemInfo.Delete\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: FileSystemInfo.Delete()\n  commentId: M:System.IO.FileSystemInfo.Delete\n- uid: System.IO.FileMode\n  parent: System.IO\n  isExternal: false\n  name: FileMode\n  fullName: System.IO.FileMode\n  nameWithType: FileMode\n  commentId: T:System.IO.FileMode\n- uid: System.IO.FileAccess\n  parent: System.IO\n  isExternal: false\n  name: FileAccess\n  fullName: System.IO.FileAccess\n  nameWithType: FileAccess\n  commentId: T:System.IO.FileAccess\n- uid: System.IO.FileShare\n  parent: System.IO\n  isExternal: false\n  name: FileShare\n  fullName: System.IO.FileShare\n  nameWithType: FileShare\n  commentId: T:System.IO.FileShare\n- uid: System.IO.StreamReader\n  parent: System.IO\n  isExternal: false\n  name: StreamReader\n  fullName: System.IO.StreamReader\n  nameWithType: StreamReader\n  commentId: T:System.IO.StreamReader\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.Security.SecurityException\n  isExternal: false\n  name: SecurityException\n  fullName: System.Security.SecurityException\n  nameWithType: SecurityException\n  commentId: T:System.Security.SecurityException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.UnauthorizedAccessException\n  parent: System\n  isExternal: false\n  name: UnauthorizedAccessException\n  fullName: System.UnauthorizedAccessException\n  nameWithType: UnauthorizedAccessException\n  commentId: T:System.UnauthorizedAccessException\n- uid: System.IO.PathTooLongException\n  isExternal: false\n  name: PathTooLongException\n  fullName: System.IO.PathTooLongException\n  nameWithType: PathTooLongException\n  commentId: T:System.IO.PathTooLongException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.IO.DirectoryNotFoundException\n  isExternal: false\n  name: DirectoryNotFoundException\n  fullName: System.IO.DirectoryNotFoundException\n  nameWithType: DirectoryNotFoundException\n  commentId: T:System.IO.DirectoryNotFoundException\n- uid: System.IO.FileNotFoundException\n  isExternal: false\n  name: FileNotFoundException\n  fullName: System.IO.FileNotFoundException\n  nameWithType: FileNotFoundException\n  commentId: T:System.IO.FileNotFoundException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  fullName: System.IO.IOException\n  nameWithType: IOException\n  commentId: T:System.IO.IOException\n"}