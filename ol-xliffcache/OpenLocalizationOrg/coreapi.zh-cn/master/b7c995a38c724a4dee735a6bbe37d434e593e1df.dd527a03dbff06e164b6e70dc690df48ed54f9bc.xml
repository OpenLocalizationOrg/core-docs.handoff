{"nodes":[{"pos":[1843,1853],"content":"RSAOpenSsl","needQuote":true,"nodes":[{"content":"RSAOpenSsl","pos":[0,10]}]},{"pos":[5119,5131],"content":"RSAOpenSsl()","needQuote":true,"nodes":[{"content":"RSAOpenSsl()","pos":[0,12]}]},{"pos":[6057,6074],"content":"RSAOpenSsl(Int32)","needQuote":true,"nodes":[{"content":"RSAOpenSsl(Int32)","pos":[0,17]}]},{"pos":[7110,7128],"content":"RSAOpenSsl(IntPtr)","needQuote":true,"nodes":[{"content":"RSAOpenSsl(IntPtr)","pos":[0,18]}]},{"pos":[8253,8278],"content":"RSAOpenSsl(RSAParameters)","needQuote":true,"nodes":[{"content":"RSAOpenSsl(RSAParameters)","pos":[0,25]}]},{"pos":[9506,9535],"content":"RSAOpenSsl(SafeEvpPKeyHandle)","needQuote":true,"nodes":[{"content":"RSAOpenSsl(SafeEvpPKeyHandle)","pos":[0,29]}]},{"pos":[10643,10650],"content":"KeySize","needQuote":true,"nodes":[{"content":"KeySize","pos":[0,7]}]},{"pos":[11778,11791],"content":"LegalKeySizes","needQuote":true,"nodes":[{"content":"LegalKeySizes","pos":[0,13]}]},{"pos":[13167,13204],"content":"Decrypt(Byte[], RSAEncryptionPadding)","needQuote":true,"nodes":[{"content":"Decrypt(Byte[], RSAEncryptionPadding)","pos":[0,37]}]},{"pos":[14923,14939],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[16122,16142],"content":"DuplicateKeyHandle()","needQuote":true,"nodes":[{"content":"DuplicateKeyHandle()","pos":[0,20]}]},{"pos":[17387,17424],"content":"Encrypt(Byte[], RSAEncryptionPadding)","needQuote":true,"nodes":[{"content":"Encrypt(Byte[], RSAEncryptionPadding)","pos":[0,37]}]},{"pos":[19170,19195],"content":"ExportParameters(Boolean)","needQuote":true,"nodes":[{"content":"ExportParameters(Boolean)","pos":[0,25]}]},{"pos":[20781,20830],"content":"HashData(Byte[], Int32, Int32, HashAlgorithmName)","needQuote":true,"nodes":[{"content":"HashData(Byte[], Int32, Int32, HashAlgorithmName)","pos":[0,49]}]},{"pos":[22978,23013],"content":"HashData(Stream, HashAlgorithmName)","needQuote":true,"nodes":[{"content":"HashData(Stream, HashAlgorithmName)","pos":[0,35]}]},{"pos":[24624,24655],"content":"ImportParameters(RSAParameters)","needQuote":true,"nodes":[{"content":"ImportParameters(RSAParameters)","pos":[0,31]}]},{"pos":[26275,26331],"content":"SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,56]}]},{"pos":[28738,28804],"content":"VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,66]}]},{"pos":[30901,30929],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[31111,31117],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31354,31373],"content":"AsymmetricAlgorithm","needQuote":true,"nodes":[{"content":"AsymmetricAlgorithm","pos":[0,19]}]},{"pos":[31626,31629],"content":"RSA","needQuote":true,"nodes":[{"content":"RSA","pos":[0,3]}]},{"pos":[31800,31811],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[32043,32051],"content":"Create()","needQuote":true,"nodes":[{"content":"Create()","pos":[0,8]}]},{"pos":[32209,32215],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[32330,32331],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32378,32379],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32486,32492],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[32607,32608],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32655,32656],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32895,32909],"content":"Create(String)","needQuote":true,"nodes":[{"content":"Create(String)","pos":[0,14]}]},{"pos":[33101,33107],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[33222,33223],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33293,33299],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[33384,33385],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33507,33513],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[33628,33629],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33699,33705],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[33790,33791],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34226,34282],"content":"SignData(Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"SignData(Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,56]}]},{"pos":[35032,35040],"content":"SignData","needQuote":true,"nodes":[{"content":"SignData","pos":[0,8]}]},{"pos":[35159,35160],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35228,35232],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[35314,35316]},{"content":",","pos":[35371,35372]},{"pos":[35483,35500],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[35630,35631]},{"pos":[35744,35763],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[35896,35897],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36117,36125],"content":"SignData","needQuote":true,"nodes":[{"content":"SignData","pos":[0,8]}]},{"pos":[36244,36245],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36313,36317],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[36398,36400],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[36450,36451]},{"pos":[36562,36579],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[36709,36710]},{"pos":[36823,36842],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[36975,36976],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37463,37533],"content":"SignData(Byte[], Int32, Int32, HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"SignData(Byte[], Int32, Int32, HashAlgorithmName, RSASignaturePadding)","pos":[0,70]}]},{"pos":[38407,38415],"content":"SignData","needQuote":true,"nodes":[{"content":"SignData","pos":[0,8]}]},{"pos":[38534,38535],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38603,38607],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[38689,38691]},{"content":",","pos":[38746,38747]},{"pos":[38824,38829],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[38913,38914]},{"pos":[38991,38996],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[39080,39081]},{"pos":[39192,39209],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[39339,39340]},{"pos":[39453,39472],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[39605,39606],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39852,39860],"content":"SignData","needQuote":true,"nodes":[{"content":"SignData","pos":[0,8]}]},{"pos":[39979,39980],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40048,40052],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[40133,40135],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[40185,40186]},{"pos":[40263,40268],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[40352,40353]},{"pos":[40430,40435],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[40519,40520]},{"pos":[40631,40648],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[40778,40779]},{"pos":[40892,40911],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[41044,41045],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41486,41542],"content":"SignData(Stream, HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"SignData(Stream, HashAlgorithmName, RSASignaturePadding)","pos":[0,56]}]},{"pos":[41980,41988],"content":"SignData","needQuote":true,"nodes":[{"content":"SignData","pos":[0,8]}]},{"pos":[42107,42108],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42181,42187],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[42276,42277]},{"pos":[42388,42405],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[42535,42536]},{"pos":[42649,42668],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[42801,42802],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43025,43033],"content":"SignData","needQuote":true,"nodes":[{"content":"SignData","pos":[0,8]}]},{"pos":[43152,43153],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43226,43232],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[43321,43322]},{"pos":[43433,43450],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[43580,43581]},{"pos":[43694,43713],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[43846,43847],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44314,44380],"content":"VerifyData(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"VerifyData(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,66]}]},{"pos":[45210,45220],"content":"VerifyData","needQuote":true,"nodes":[{"content":"VerifyData","pos":[0,10]}]},{"pos":[45343,45344],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45412,45416],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[45498,45500]},{"content":",","pos":[45555,45556]},{"pos":[45632,45636],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[45718,45720]},{"content":",","pos":[45775,45776]},{"pos":[45887,45904],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[46034,46035]},{"pos":[46148,46167],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[46300,46301],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46537,46547],"content":"VerifyData","needQuote":true,"nodes":[{"content":"VerifyData","pos":[0,10]}]},{"pos":[46670,46671],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46739,46743],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[46824,46826],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[46876,46877]},{"pos":[46953,46957],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[47038,47040],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[47090,47091]},{"pos":[47202,47219],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[47349,47350]},{"pos":[47463,47482],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[47615,47616],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48135,48215],"content":"VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,80]}]},{"pos":[49169,49179],"content":"VerifyData","needQuote":true,"nodes":[{"content":"VerifyData","pos":[0,10]}]},{"pos":[49302,49303],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49371,49375],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[49457,49459]},{"content":",","pos":[49514,49515]},{"pos":[49592,49597],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[49681,49682]},{"pos":[49759,49764],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[49848,49849]},{"pos":[49925,49929],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[50011,50013]},{"content":",","pos":[50068,50069]},{"pos":[50180,50197],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[50327,50328]},{"pos":[50441,50460],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[50593,50594],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50856,50866],"content":"VerifyData","needQuote":true,"nodes":[{"content":"VerifyData","pos":[0,10]}]},{"pos":[50989,50990],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51058,51062],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[51143,51145],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[51195,51196]},{"pos":[51273,51278],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[51362,51363]},{"pos":[51440,51445],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[51529,51530]},{"pos":[51606,51610],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[51691,51693],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[51743,51744]},{"pos":[51855,51872],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[52002,52003]},{"pos":[52116,52135],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[52268,52269],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52742,52808],"content":"VerifyData(Stream, Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"VerifyData(Stream, Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,66]}]},{"pos":[53647,53657],"content":"VerifyData","needQuote":true,"nodes":[{"content":"VerifyData","pos":[0,10]}]},{"pos":[53780,53781],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53854,53860],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[53949,53950]},{"pos":[54026,54030],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[54112,54114]},{"content":",","pos":[54169,54170]},{"pos":[54281,54298],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[54428,54429]},{"pos":[54542,54561],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[54694,54695],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54934,54944],"content":"VerifyData","needQuote":true,"nodes":[{"content":"VerifyData","pos":[0,10]}]},{"pos":[55067,55068],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55141,55147],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[55236,55237]},{"pos":[55313,55317],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[55398,55400],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[55450,55451]},{"pos":[55562,55579],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[55709,55710]},{"pos":[55823,55842],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[55975,55976],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56227,56247],"content":"DecryptValue(Byte[])","needQuote":true,"nodes":[{"content":"DecryptValue(Byte[])","pos":[0,20]}]},{"pos":[56609,56621],"content":"DecryptValue","needQuote":true,"nodes":[{"content":"DecryptValue","pos":[0,12]}]},{"pos":[56748,56749],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56817,56821],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[56903,56905]},{"pos":[56959,56960],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57088,57100],"content":"DecryptValue","needQuote":true,"nodes":[{"content":"DecryptValue","pos":[0,12]}]},{"pos":[57227,57228],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57296,57300],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[57381,57383],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[57432,57433],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57684,57704],"content":"EncryptValue(Byte[])","needQuote":true,"nodes":[{"content":"EncryptValue(Byte[])","pos":[0,20]}]},{"pos":[58066,58078],"content":"EncryptValue","needQuote":true,"nodes":[{"content":"EncryptValue","pos":[0,12]}]},{"pos":[58205,58206],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58274,58278],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[58360,58362]},{"pos":[58416,58417],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58545,58557],"content":"EncryptValue","needQuote":true,"nodes":[{"content":"EncryptValue","pos":[0,12]}]},{"pos":[58684,58685],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58753,58757],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[58838,58840],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[58889,58890],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59143,59164],"content":"FromXmlString(String)","needQuote":true,"nodes":[{"content":"FromXmlString(String)","pos":[0,21]}]},{"pos":[59377,59390],"content":"FromXmlString","needQuote":true,"nodes":[{"content":"FromXmlString","pos":[0,13]}]},{"pos":[59519,59520],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59590,59596],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[59681,59682],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59811,59824],"content":"FromXmlString","needQuote":true,"nodes":[{"content":"FromXmlString","pos":[0,13]}]},{"pos":[59953,59954],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60024,60030],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[60115,60116],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60367,60387],"content":"ToXmlString(Boolean)","needQuote":true,"nodes":[{"content":"ToXmlString(Boolean)","pos":[0,20]}]},{"pos":[60597,60608],"content":"ToXmlString","needQuote":true,"nodes":[{"content":"ToXmlString","pos":[0,11]}]},{"pos":[60733,60734],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60805,60812],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[60899,60900],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61028,61039],"content":"ToXmlString","needQuote":true,"nodes":[{"content":"ToXmlString","pos":[0,11]}]},{"pos":[61164,61165],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61236,61243],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[61330,61331],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61568,61588],"content":"KeyExchangeAlgorithm","needQuote":true,"nodes":[{"content":"KeyExchangeAlgorithm","pos":[0,20]}]},{"pos":[61892,61910],"content":"SignatureAlgorithm","needQuote":true,"nodes":[{"content":"SignatureAlgorithm","pos":[0,18]}]},{"pos":[62246,62258],"content":"KeySizeValue","needQuote":true,"nodes":[{"content":"KeySizeValue","pos":[0,12]}]},{"pos":[62626,62644],"content":"LegalKeySizesValue","needQuote":true,"nodes":[{"content":"LegalKeySizesValue","pos":[0,18]}]},{"pos":[63002,63011],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[63220,63227],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[63376,63377],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63424,63425],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63549,63556],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[63705,63706],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63753,63754],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64009,64016],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[64219,64224],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[64369,64370],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64417,64418],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64540,64545],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[64690,64691],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64738,64739],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64895,64905],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[65034,65042],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[65145,65146],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65193,65194],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65284,65292],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[65395,65396],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65443,65444],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65626,65640],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[65797,65803],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[65902,65903],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65973,65979],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[66064,66065],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66168,66174],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[66273,66274],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66344,66350],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[66435,66436],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66646,66668],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[66862,66868],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[66967,66968],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67038,67044],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[67130,67131]},{"pos":[67209,67215],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[67300,67301],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67418,67424],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[67523,67524],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67594,67600],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[67686,67687]},{"pos":[67765,67771],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[67856,67857],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68085,68116],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[68337,68352],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[68469,68470],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68540,68546],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[68632,68633]},{"pos":[68711,68717],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[68802,68803],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68929,68944],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[69061,69062],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69132,69138],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[69224,69225]},{"pos":[69303,69309],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[69394,69395],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69557,69570],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[69708,69719],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[69828,69829],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69876,69877],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69970,69981],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[70090,70091],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70138,70139],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70293,70302],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[70428,70435],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[70536,70537],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70584,70585],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70674,70681],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[70782,70783],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70830,70831],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71001,71018],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[71168,71183],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[71300,71301],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71348,71349],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71446,71461],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[71578,71579],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71626,71627],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71728,71734],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[71870,71875],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[72018,72024],"content":"IntPtr","needQuote":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"pos":[72249,72262],"content":"RSAParameters","needQuote":true,"nodes":[{"content":"RSAParameters","pos":[0,13]}]},{"pos":[72531,72548],"content":"SafeEvpPKeyHandle","needQuote":true,"nodes":[{"content":"SafeEvpPKeyHandle","pos":[0,17]}]},{"pos":[72864,72871],"content":"KeySize","needQuote":true,"nodes":[{"content":"KeySize","pos":[0,7]}]},{"pos":[73219,73232],"content":"LegalKeySizes","needQuote":true,"nodes":[{"content":"LegalKeySizes","pos":[0,13]}]},{"pos":[73413,73423],"content":"KeySizes[]","needQuote":true,"nodes":[{"content":"KeySizes[]","pos":[0,10]}]},{"pos":[73682,73690],"content":"KeySizes","needQuote":true,"nodes":[{"content":"KeySizes","pos":[0,8]}]},{"content":"[]","pos":[73781,73783]},{"pos":[73895,73903],"content":"KeySizes","needQuote":true,"nodes":[{"content":"KeySizes","pos":[0,8]}]},{"pos":[73993,73995],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[74338,74375],"content":"Decrypt(Byte[], RSAEncryptionPadding)","needQuote":true,"nodes":[{"content":"Decrypt(Byte[], RSAEncryptionPadding)","pos":[0,37]}]},{"pos":[74925,74932],"content":"Decrypt","needQuote":true,"nodes":[{"content":"Decrypt","pos":[0,7]}]},{"pos":[75049,75050],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75118,75122],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[75204,75206]},{"content":",","pos":[75261,75262]},{"pos":[75376,75396],"content":"RSAEncryptionPadding","needQuote":true,"nodes":[{"content":"RSAEncryptionPadding","pos":[0,20]}]},{"pos":[75531,75532],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75705,75712],"content":"Decrypt","needQuote":true,"nodes":[{"content":"Decrypt","pos":[0,7]}]},{"pos":[75829,75830],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75898,75902],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[75983,75985],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[76035,76036]},{"pos":[76150,76170],"content":"RSAEncryptionPadding","needQuote":true,"nodes":[{"content":"RSAEncryptionPadding","pos":[0,20]}]},{"pos":[76305,76306],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76372,76378],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[76547,76551],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[76633,76635]},{"pos":[76721,76725],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[76806,76808],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[77036,77056],"content":"RSAEncryptionPadding","needQuote":true,"nodes":[{"content":"RSAEncryptionPadding","pos":[0,20]}]},{"pos":[77410,77426],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[77672,77679],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[77828,77829],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77900,77907],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[77994,77995],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78135,78142],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[78291,78292],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78363,78370],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[78457,78458],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78592,78599],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[78955,78992],"content":"Encrypt(Byte[], RSAEncryptionPadding)","needQuote":true,"nodes":[{"content":"Encrypt(Byte[], RSAEncryptionPadding)","pos":[0,37]}]},{"pos":[79542,79549],"content":"Encrypt","needQuote":true,"nodes":[{"content":"Encrypt","pos":[0,7]}]},{"pos":[79666,79667],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79735,79739],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[79821,79823]},{"content":",","pos":[79878,79879]},{"pos":[79993,80013],"content":"RSAEncryptionPadding","needQuote":true,"nodes":[{"content":"RSAEncryptionPadding","pos":[0,20]}]},{"pos":[80148,80149],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80322,80329],"content":"Encrypt","needQuote":true,"nodes":[{"content":"Encrypt","pos":[0,7]}]},{"pos":[80446,80447],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80515,80519],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[80600,80602],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[80652,80653]},{"pos":[80767,80787],"content":"RSAEncryptionPadding","needQuote":true,"nodes":[{"content":"RSAEncryptionPadding","pos":[0,20]}]},{"pos":[80922,80923],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81184,81209],"content":"ExportParameters(Boolean)","needQuote":true,"nodes":[{"content":"ExportParameters(Boolean)","pos":[0,25]}]},{"pos":[81434,81450],"content":"ExportParameters","needQuote":true,"nodes":[{"content":"ExportParameters","pos":[0,16]}]},{"pos":[81585,81586],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81657,81664],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[81751,81752],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81885,81901],"content":"ExportParameters","needQuote":true,"nodes":[{"content":"ExportParameters","pos":[0,16]}]},{"pos":[82036,82037],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82108,82115],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[82202,82203],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82592,82641],"content":"HashData(Byte[], Int32, Int32, HashAlgorithmName)","needQuote":true,"nodes":[{"content":"HashData(Byte[], Int32, Int32, HashAlgorithmName)","pos":[0,49]}]},{"pos":[83303,83311],"content":"HashData","needQuote":true,"nodes":[{"content":"HashData","pos":[0,8]}]},{"pos":[83430,83431],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83499,83503],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[83585,83587]},{"content":",","pos":[83642,83643]},{"pos":[83720,83725],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[83809,83810]},{"pos":[83887,83892],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[83976,83977]},{"pos":[84088,84105],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[84234,84235],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84432,84440],"content":"HashData","needQuote":true,"nodes":[{"content":"HashData","pos":[0,8]}]},{"pos":[84559,84560],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84628,84632],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[84713,84715],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[84765,84766]},{"pos":[84843,84848],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[84932,84933]},{"pos":[85010,85015],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[85099,85100]},{"pos":[85211,85228],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[85357,85358],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85578,85595],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[85995,86030],"content":"HashData(Stream, HashAlgorithmName)","needQuote":true,"nodes":[{"content":"HashData(Stream, HashAlgorithmName)","pos":[0,35]}]},{"pos":[86348,86356],"content":"HashData","needQuote":true,"nodes":[{"content":"HashData","pos":[0,8]}]},{"pos":[86475,86476],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86549,86555],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[86644,86645]},{"pos":[86756,86773],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[86902,86903],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87077,87085],"content":"HashData","needQuote":true,"nodes":[{"content":"HashData","pos":[0,8]}]},{"pos":[87204,87205],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87278,87284],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[87373,87374]},{"pos":[87485,87502],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[87631,87632],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87773,87779],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[87902,87911],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[88240,88271],"content":"ImportParameters(RSAParameters)","needQuote":true,"nodes":[{"content":"ImportParameters(RSAParameters)","pos":[0,31]}]},{"pos":[88558,88574],"content":"ImportParameters","needQuote":true,"nodes":[{"content":"ImportParameters","pos":[0,16]}]},{"pos":[88709,88710],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88809,88822],"content":"RSAParameters","needQuote":true,"nodes":[{"content":"RSAParameters","pos":[0,13]}]},{"pos":[88943,88944],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89105,89121],"content":"ImportParameters","needQuote":true,"nodes":[{"content":"ImportParameters","pos":[0,16]}]},{"pos":[89256,89257],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89356,89369],"content":"RSAParameters","needQuote":true,"nodes":[{"content":"RSAParameters","pos":[0,13]}]},{"pos":[89490,89491],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89926,89982],"content":"SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,56]}]},{"pos":[90732,90740],"content":"SignHash","needQuote":true,"nodes":[{"content":"SignHash","pos":[0,8]}]},{"pos":[90859,90860],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90928,90932],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[91014,91016]},{"content":",","pos":[91071,91072]},{"pos":[91183,91200],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[91330,91331]},{"pos":[91444,91463],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[91596,91597],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91817,91825],"content":"SignHash","needQuote":true,"nodes":[{"content":"SignHash","pos":[0,8]}]},{"pos":[91944,91945],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92013,92017],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[92098,92100],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[92150,92151]},{"pos":[92262,92279],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[92409,92410]},{"pos":[92523,92542],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[92675,92676],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92900,92919],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[93447,93513],"content":"VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,66]}]},{"pos":[94343,94353],"content":"VerifyHash","needQuote":true,"nodes":[{"content":"VerifyHash","pos":[0,10]}]},{"pos":[94476,94477],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94545,94549],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[94631,94633]},{"content":",","pos":[94688,94689]},{"pos":[94765,94769],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[94851,94853]},{"content":",","pos":[94908,94909]},{"pos":[95020,95037],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[95167,95168]},{"pos":[95281,95300],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[95433,95434],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95670,95680],"content":"VerifyHash","needQuote":true,"nodes":[{"content":"VerifyHash","pos":[0,10]}]},{"pos":[95803,95804],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95872,95876],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[95957,95959],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[96009,96010]},{"pos":[96086,96090],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[96171,96173],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[96223,96224]},{"pos":[96335,96352],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[96482,96483]},{"pos":[96596,96615],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[96748,96749],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]}],"content":"items:\n- uid: System.Security.Cryptography.RSAOpenSsl\n  commentId: T:System.Security.Cryptography.RSAOpenSsl\n  id: RSAOpenSsl\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.RSAOpenSsl.#ctor\n  - System.Security.Cryptography.RSAOpenSsl.#ctor(System.Int32)\n  - System.Security.Cryptography.RSAOpenSsl.#ctor(System.IntPtr)\n  - System.Security.Cryptography.RSAOpenSsl.#ctor(System.Security.Cryptography.RSAParameters)\n  - System.Security.Cryptography.RSAOpenSsl.#ctor(System.Security.Cryptography.SafeEvpPKeyHandle)\n  - System.Security.Cryptography.RSAOpenSsl.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  - System.Security.Cryptography.RSAOpenSsl.Dispose(System.Boolean)\n  - System.Security.Cryptography.RSAOpenSsl.DuplicateKeyHandle\n  - System.Security.Cryptography.RSAOpenSsl.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  - System.Security.Cryptography.RSAOpenSsl.ExportParameters(System.Boolean)\n  - System.Security.Cryptography.RSAOpenSsl.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.RSAOpenSsl.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.RSAOpenSsl.ImportParameters(System.Security.Cryptography.RSAParameters)\n  - System.Security.Cryptography.RSAOpenSsl.KeySize\n  - System.Security.Cryptography.RSAOpenSsl.LegalKeySizes\n  - System.Security.Cryptography.RSAOpenSsl.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSAOpenSsl.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  langs:\n  - csharp\n  - vb\n  name: RSAOpenSsl\n  nameWithType: RSAOpenSsl\n  fullName: System.Security.Cryptography.RSAOpenSsl\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RSAOpenSsl\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 29\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: 'public sealed class RSAOpenSsl : RSA, IDisposable'\n    content.vb: >-\n      Public NotInheritable Class RSAOpenSsl\n          Inherits RSA\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.AsymmetricAlgorithm\n  - System.Security.Cryptography.RSA\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Security.Cryptography.RSA.Create\n  - System.Security.Cryptography.RSA.Create(System.String)\n  - System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.DecryptValue(System.Byte[])\n  - System.Security.Cryptography.RSA.EncryptValue(System.Byte[])\n  - System.Security.Cryptography.RSA.FromXmlString(System.String)\n  - System.Security.Cryptography.RSA.ToXmlString(System.Boolean)\n  - System.Security.Cryptography.RSA.KeyExchangeAlgorithm\n  - System.Security.Cryptography.RSA.SignatureAlgorithm\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n- uid: System.Security.Cryptography.RSAOpenSsl.#ctor\n  commentId: M:System.Security.Cryptography.RSAOpenSsl.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.RSAOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: RSAOpenSsl()\n  nameWithType: RSAOpenSsl.RSAOpenSsl()\n  fullName: System.Security.Cryptography.RSAOpenSsl.RSAOpenSsl()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 31\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public RSAOpenSsl()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Security.Cryptography.RSAOpenSsl.#ctor(System.Int32)\n  commentId: M:System.Security.Cryptography.RSAOpenSsl.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Security.Cryptography.RSAOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: RSAOpenSsl(Int32)\n  nameWithType: RSAOpenSsl.RSAOpenSsl(Int32)\n  fullName: System.Security.Cryptography.RSAOpenSsl.RSAOpenSsl(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 32\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public RSAOpenSsl(int keySize)\n    content.vb: Public Sub New(keySize As Integer)\n    parameters:\n    - id: keySize\n      type: System.Int32\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Security.Cryptography.RSAOpenSsl.#ctor(System.IntPtr)\n  commentId: M:System.Security.Cryptography.RSAOpenSsl.#ctor(System.IntPtr)\n  id: '#ctor(System.IntPtr)'\n  parent: System.Security.Cryptography.RSAOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: RSAOpenSsl(IntPtr)\n  nameWithType: RSAOpenSsl.RSAOpenSsl(IntPtr)\n  fullName: System.Security.Cryptography.RSAOpenSsl.RSAOpenSsl(System.IntPtr)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 33\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public RSAOpenSsl(IntPtr handle)\n    content.vb: Public Sub New(handle As IntPtr)\n    parameters:\n    - id: handle\n      type: System.IntPtr\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Security.Cryptography.RSAOpenSsl.#ctor(System.Security.Cryptography.RSAParameters)\n  commentId: M:System.Security.Cryptography.RSAOpenSsl.#ctor(System.Security.Cryptography.RSAParameters)\n  id: '#ctor(System.Security.Cryptography.RSAParameters)'\n  parent: System.Security.Cryptography.RSAOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: RSAOpenSsl(RSAParameters)\n  nameWithType: RSAOpenSsl.RSAOpenSsl(RSAParameters)\n  fullName: System.Security.Cryptography.RSAOpenSsl.RSAOpenSsl(System.Security.Cryptography.RSAParameters)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 34\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public RSAOpenSsl(RSAParameters parameters)\n    content.vb: Public Sub New(parameters As RSAParameters)\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.RSAParameters\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Security.Cryptography.RSAOpenSsl.#ctor(System.Security.Cryptography.SafeEvpPKeyHandle)\n  commentId: M:System.Security.Cryptography.RSAOpenSsl.#ctor(System.Security.Cryptography.SafeEvpPKeyHandle)\n  id: '#ctor(System.Security.Cryptography.SafeEvpPKeyHandle)'\n  parent: System.Security.Cryptography.RSAOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: RSAOpenSsl(SafeEvpPKeyHandle)\n  nameWithType: RSAOpenSsl.RSAOpenSsl(SafeEvpPKeyHandle)\n  fullName: System.Security.Cryptography.RSAOpenSsl.RSAOpenSsl(System.Security.Cryptography.SafeEvpPKeyHandle)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 35\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public RSAOpenSsl(SafeEvpPKeyHandle pkeyHandle)\n    content.vb: Public Sub New(pkeyHandle As SafeEvpPKeyHandle)\n    parameters:\n    - id: pkeyHandle\n      type: System.Security.Cryptography.SafeEvpPKeyHandle\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Security.Cryptography.RSAOpenSsl.KeySize\n  commentId: P:System.Security.Cryptography.RSAOpenSsl.KeySize\n  id: KeySize\n  parent: System.Security.Cryptography.RSAOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: KeySize\n  nameWithType: RSAOpenSsl.KeySize\n  fullName: System.Security.Cryptography.RSAOpenSsl.KeySize\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: KeySize\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 36\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override int KeySize { set; }\n    content.vb: Public Overrides WriteOnly Property KeySize As Integer\n    parameters: []\n    return:\n      type: System.Int32\n  overridden: System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  modifiers.csharp:\n  - public\n  - override\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  - WriteOnly\n- uid: System.Security.Cryptography.RSAOpenSsl.LegalKeySizes\n  commentId: P:System.Security.Cryptography.RSAOpenSsl.LegalKeySizes\n  id: LegalKeySizes\n  parent: System.Security.Cryptography.RSAOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: LegalKeySizes\n  nameWithType: RSAOpenSsl.LegalKeySizes\n  fullName: System.Security.Cryptography.RSAOpenSsl.LegalKeySizes\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LegalKeySizes\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 37\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override KeySizes[] LegalKeySizes { get; }\n    content.vb: Public Overrides ReadOnly Property LegalKeySizes As KeySizes()\n    parameters: []\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n  overridden: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n- uid: System.Security.Cryptography.RSAOpenSsl.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  commentId: M:System.Security.Cryptography.RSAOpenSsl.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  id: Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  parent: System.Security.Cryptography.RSAOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: Decrypt(Byte[], RSAEncryptionPadding)\n  nameWithType: RSAOpenSsl.Decrypt(Byte[], RSAEncryptionPadding)\n  fullName: System.Security.Cryptography.RSAOpenSsl.Decrypt(System.Byte[], System.Security.Cryptography.RSAEncryptionPadding)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Decrypt\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 38\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override byte[] Decrypt(byte[] data, RSAEncryptionPadding padding)\n    content.vb: Public Overrides Function Decrypt(data As Byte(), padding As RSAEncryptionPadding) As Byte()\n    parameters:\n    - id: data\n      type: System.Byte[]\n    - id: padding\n      type: System.Security.Cryptography.RSAEncryptionPadding\n    return:\n      type: System.Byte[]\n  overridden: System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  nameWithType.vb: RSAOpenSsl.Decrypt(Byte(), RSAEncryptionPadding)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Security.Cryptography.RSAOpenSsl.Decrypt(System.Byte(), System.Security.Cryptography.RSAEncryptionPadding)\n  name.vb: Decrypt(Byte(), RSAEncryptionPadding)\n- uid: System.Security.Cryptography.RSAOpenSsl.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.RSAOpenSsl.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.RSAOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  nameWithType: RSAOpenSsl.Dispose(Boolean)\n  fullName: System.Security.Cryptography.RSAOpenSsl.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 39\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void Dispose(bool disposing)\n    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n  overridden: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n- uid: System.Security.Cryptography.RSAOpenSsl.DuplicateKeyHandle\n  commentId: M:System.Security.Cryptography.RSAOpenSsl.DuplicateKeyHandle\n  id: DuplicateKeyHandle\n  parent: System.Security.Cryptography.RSAOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: DuplicateKeyHandle()\n  nameWithType: RSAOpenSsl.DuplicateKeyHandle()\n  fullName: System.Security.Cryptography.RSAOpenSsl.DuplicateKeyHandle()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DuplicateKeyHandle\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 40\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public SafeEvpPKeyHandle DuplicateKeyHandle()\n    content.vb: Public Function DuplicateKeyHandle As SafeEvpPKeyHandle\n    return:\n      type: System.Security.Cryptography.SafeEvpPKeyHandle\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Security.Cryptography.RSAOpenSsl.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  commentId: M:System.Security.Cryptography.RSAOpenSsl.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  id: Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  parent: System.Security.Cryptography.RSAOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: Encrypt(Byte[], RSAEncryptionPadding)\n  nameWithType: RSAOpenSsl.Encrypt(Byte[], RSAEncryptionPadding)\n  fullName: System.Security.Cryptography.RSAOpenSsl.Encrypt(System.Byte[], System.Security.Cryptography.RSAEncryptionPadding)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Encrypt\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 41\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override byte[] Encrypt(byte[] data, RSAEncryptionPadding padding)\n    content.vb: Public Overrides Function Encrypt(data As Byte(), padding As RSAEncryptionPadding) As Byte()\n    parameters:\n    - id: data\n      type: System.Byte[]\n    - id: padding\n      type: System.Security.Cryptography.RSAEncryptionPadding\n    return:\n      type: System.Byte[]\n  overridden: System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  nameWithType.vb: RSAOpenSsl.Encrypt(Byte(), RSAEncryptionPadding)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Security.Cryptography.RSAOpenSsl.Encrypt(System.Byte(), System.Security.Cryptography.RSAEncryptionPadding)\n  name.vb: Encrypt(Byte(), RSAEncryptionPadding)\n- uid: System.Security.Cryptography.RSAOpenSsl.ExportParameters(System.Boolean)\n  commentId: M:System.Security.Cryptography.RSAOpenSsl.ExportParameters(System.Boolean)\n  id: ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.RSAOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: ExportParameters(Boolean)\n  nameWithType: RSAOpenSsl.ExportParameters(Boolean)\n  fullName: System.Security.Cryptography.RSAOpenSsl.ExportParameters(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExportParameters\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 42\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override RSAParameters ExportParameters(bool includePrivateParameters)\n    content.vb: Public Overrides Function ExportParameters(includePrivateParameters As Boolean) As RSAParameters\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n    return:\n      type: System.Security.Cryptography.RSAParameters\n  overridden: System.Security.Cryptography.RSA.ExportParameters(System.Boolean)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n- uid: System.Security.Cryptography.RSAOpenSsl.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.RSAOpenSsl.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.RSAOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType: RSAOpenSsl.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: System.Security.Cryptography.RSAOpenSsl.HashData(System.Byte[], System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HashData\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 43\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm)\n    content.vb: Protected Overrides Function HashData(data As Byte(), offset As Integer, count As Integer, hashAlgorithm As HashAlgorithmName) As Byte()\n    parameters:\n    - id: data\n      type: System.Byte[]\n    - id: offset\n      type: System.Int32\n    - id: count\n      type: System.Int32\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n    return:\n      type: System.Byte[]\n  overridden: System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  nameWithType.vb: RSAOpenSsl.HashData(Byte(), Int32, Int32, HashAlgorithmName)\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  fullName.vb: System.Security.Cryptography.RSAOpenSsl.HashData(System.Byte(), System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)\n  name.vb: HashData(Byte(), Int32, Int32, HashAlgorithmName)\n- uid: System.Security.Cryptography.RSAOpenSsl.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.RSAOpenSsl.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.RSAOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: HashData(Stream, HashAlgorithmName)\n  nameWithType: RSAOpenSsl.HashData(Stream, HashAlgorithmName)\n  fullName: System.Security.Cryptography.RSAOpenSsl.HashData(System.IO.Stream, System.Security.Cryptography.HashAlgorithmName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HashData\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 44\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm)\n    content.vb: Protected Overrides Function HashData(data As Stream, hashAlgorithm As HashAlgorithmName) As Byte()\n    parameters:\n    - id: data\n      type: System.IO.Stream\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n    return:\n      type: System.Byte[]\n  overridden: System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n- uid: System.Security.Cryptography.RSAOpenSsl.ImportParameters(System.Security.Cryptography.RSAParameters)\n  commentId: M:System.Security.Cryptography.RSAOpenSsl.ImportParameters(System.Security.Cryptography.RSAParameters)\n  id: ImportParameters(System.Security.Cryptography.RSAParameters)\n  parent: System.Security.Cryptography.RSAOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: ImportParameters(RSAParameters)\n  nameWithType: RSAOpenSsl.ImportParameters(RSAParameters)\n  fullName: System.Security.Cryptography.RSAOpenSsl.ImportParameters(System.Security.Cryptography.RSAParameters)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ImportParameters\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 45\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override void ImportParameters(RSAParameters parameters)\n    content.vb: Public Overrides Sub ImportParameters(parameters As RSAParameters)\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.RSAParameters\n  overridden: System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n- uid: System.Security.Cryptography.RSAOpenSsl.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  commentId: M:System.Security.Cryptography.RSAOpenSsl.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  id: SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSAOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSAOpenSsl.SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSAOpenSsl.SignHash(System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SignHash\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 46\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override byte[] SignHash(byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\n    content.vb: Public Overrides Function SignHash(hash As Byte(), hashAlgorithm As HashAlgorithmName, padding As RSASignaturePadding) As Byte()\n    parameters:\n    - id: hash\n      type: System.Byte[]\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n    - id: padding\n      type: System.Security.Cryptography.RSASignaturePadding\n    return:\n      type: System.Byte[]\n  overridden: System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  nameWithType.vb: RSAOpenSsl.SignHash(Byte(), HashAlgorithmName, RSASignaturePadding)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Security.Cryptography.RSAOpenSsl.SignHash(System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: SignHash(Byte(), HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSAOpenSsl.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  commentId: M:System.Security.Cryptography.RSAOpenSsl.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  id: VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSAOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSAOpenSsl.VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSAOpenSsl.VerifyHash(System.Byte[], System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VerifyHash\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 47\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override bool VerifyHash(byte[] hash, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\n    content.vb: Public Overrides Function VerifyHash(hash As Byte(), signature As Byte(), hashAlgorithm As HashAlgorithmName, padding As RSASignaturePadding) As Boolean\n    parameters:\n    - id: hash\n      type: System.Byte[]\n    - id: signature\n      type: System.Byte[]\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n    - id: padding\n      type: System.Security.Cryptography.RSASignaturePadding\n    return:\n      type: System.Boolean\n  overridden: System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  nameWithType.vb: RSAOpenSsl.VerifyHash(Byte(), Byte(), HashAlgorithmName, RSASignaturePadding)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Security.Cryptography.RSAOpenSsl.VerifyHash(System.Byte(), System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: VerifyHash(Byte(), Byte(), HashAlgorithmName, RSASignaturePadding)\nreferences:\n- uid: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n- uid: System.Object\n  commentId: T:System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Security.Cryptography.AsymmetricAlgorithm\n  commentId: T:System.Security.Cryptography.AsymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsymmetricAlgorithm\n  nameWithType: AsymmetricAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm\n- uid: System.Security.Cryptography.RSA\n  commentId: T:System.Security.Cryptography.RSA\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RSA\n  nameWithType: RSA\n  fullName: System.Security.Cryptography.RSA\n- uid: System.IDisposable\n  commentId: T:System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n- uid: System.Security.Cryptography.RSA.Create\n  commentId: M:System.Security.Cryptography.RSA.Create\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: Create()\n  nameWithType: RSA.Create()\n  fullName: System.Security.Cryptography.RSA.Create()\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.Create\n    name: Create\n    nameWithType: RSA.Create\n    fullName: System.Security.Cryptography.RSA.Create\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.Create\n    name: Create\n    nameWithType: RSA.Create\n    fullName: System.Security.Cryptography.RSA.Create\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Security.Cryptography.RSA.Create(System.String)\n  commentId: M:System.Security.Cryptography.RSA.Create(System.String)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: Create(String)\n  nameWithType: RSA.Create(String)\n  fullName: System.Security.Cryptography.RSA.Create(System.String)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.Create(System.String)\n    name: Create\n    nameWithType: RSA.Create\n    fullName: System.Security.Cryptography.RSA.Create\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.Create(System.String)\n    name: Create\n    nameWithType: RSA.Create\n    fullName: System.Security.Cryptography.RSA.Create\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  commentId: M:System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: SignData(Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSA.SignData(Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.SignData(System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  nameWithType.vb: RSA.SignData(Byte(), HashAlgorithmName, RSASignaturePadding)\n  fullname.vb: System.Security.Cryptography.RSA.SignData(System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: SignData(Byte(), HashAlgorithmName, RSASignaturePadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: SignData\n    nameWithType: RSA.SignData\n    fullName: System.Security.Cryptography.RSA.SignData\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    nameWithType: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    nameWithType: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: SignData\n    nameWithType: RSA.SignData\n    fullName: System.Security.Cryptography.RSA.SignData\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    nameWithType: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    nameWithType: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  commentId: M:System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: SignData(Byte[], Int32, Int32, HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSA.SignData(Byte[], Int32, Int32, HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.SignData(System.Byte[], System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  nameWithType.vb: RSA.SignData(Byte(), Int32, Int32, HashAlgorithmName, RSASignaturePadding)\n  fullname.vb: System.Security.Cryptography.RSA.SignData(System.Byte(), System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: SignData(Byte(), Int32, Int32, HashAlgorithmName, RSASignaturePadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: SignData\n    nameWithType: RSA.SignData\n    fullName: System.Security.Cryptography.RSA.SignData\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    nameWithType: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    nameWithType: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: SignData\n    nameWithType: RSA.SignData\n    fullName: System.Security.Cryptography.RSA.SignData\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    nameWithType: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    nameWithType: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  commentId: M:System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: SignData(Stream, HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSA.SignData(Stream, HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.SignData(System.IO.Stream, System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: SignData\n    nameWithType: RSA.SignData\n    fullName: System.Security.Cryptography.RSA.SignData\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    nameWithType: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    nameWithType: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    nameWithType: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: SignData\n    nameWithType: RSA.SignData\n    fullName: System.Security.Cryptography.RSA.SignData\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    nameWithType: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    nameWithType: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    nameWithType: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  commentId: M:System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: VerifyData(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSA.VerifyData(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.VerifyData(System.Byte[], System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  nameWithType.vb: RSA.VerifyData(Byte(), Byte(), HashAlgorithmName, RSASignaturePadding)\n  fullname.vb: System.Security.Cryptography.RSA.VerifyData(System.Byte(), System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: VerifyData(Byte(), Byte(), HashAlgorithmName, RSASignaturePadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: VerifyData\n    nameWithType: RSA.VerifyData\n    fullName: System.Security.Cryptography.RSA.VerifyData\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    nameWithType: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    nameWithType: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: VerifyData\n    nameWithType: RSA.VerifyData\n    fullName: System.Security.Cryptography.RSA.VerifyData\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    nameWithType: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    nameWithType: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  commentId: M:System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSA.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.VerifyData(System.Byte[], System.Int32, System.Int32, System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  nameWithType.vb: RSA.VerifyData(Byte(), Int32, Int32, Byte(), HashAlgorithmName, RSASignaturePadding)\n  fullname.vb: System.Security.Cryptography.RSA.VerifyData(System.Byte(), System.Int32, System.Int32, System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: VerifyData(Byte(), Int32, Int32, Byte(), HashAlgorithmName, RSASignaturePadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: VerifyData\n    nameWithType: RSA.VerifyData\n    fullName: System.Security.Cryptography.RSA.VerifyData\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    nameWithType: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    nameWithType: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: VerifyData\n    nameWithType: RSA.VerifyData\n    fullName: System.Security.Cryptography.RSA.VerifyData\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    nameWithType: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    nameWithType: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  commentId: M:System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: VerifyData(Stream, Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSA.VerifyData(Stream, Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.VerifyData(System.IO.Stream, System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  nameWithType.vb: RSA.VerifyData(Stream, Byte(), HashAlgorithmName, RSASignaturePadding)\n  fullname.vb: System.Security.Cryptography.RSA.VerifyData(System.IO.Stream, System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: VerifyData(Stream, Byte(), HashAlgorithmName, RSASignaturePadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: VerifyData\n    nameWithType: RSA.VerifyData\n    fullName: System.Security.Cryptography.RSA.VerifyData\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    nameWithType: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    nameWithType: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    nameWithType: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: VerifyData\n    nameWithType: RSA.VerifyData\n    fullName: System.Security.Cryptography.RSA.VerifyData\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    nameWithType: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    nameWithType: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    nameWithType: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Security.Cryptography.RSA.DecryptValue(System.Byte[])\n  commentId: M:System.Security.Cryptography.RSA.DecryptValue(System.Byte[])\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: DecryptValue(Byte[])\n  nameWithType: RSA.DecryptValue(Byte[])\n  fullName: System.Security.Cryptography.RSA.DecryptValue(System.Byte[])\n  nameWithType.vb: RSA.DecryptValue(Byte())\n  fullname.vb: System.Security.Cryptography.RSA.DecryptValue(System.Byte())\n  name.vb: DecryptValue(Byte())\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.DecryptValue(System.Byte[])\n    name: DecryptValue\n    nameWithType: RSA.DecryptValue\n    fullName: System.Security.Cryptography.RSA.DecryptValue\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.DecryptValue(System.Byte[])\n    name: DecryptValue\n    nameWithType: RSA.DecryptValue\n    fullName: System.Security.Cryptography.RSA.DecryptValue\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Security.Cryptography.RSA.EncryptValue(System.Byte[])\n  commentId: M:System.Security.Cryptography.RSA.EncryptValue(System.Byte[])\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: EncryptValue(Byte[])\n  nameWithType: RSA.EncryptValue(Byte[])\n  fullName: System.Security.Cryptography.RSA.EncryptValue(System.Byte[])\n  nameWithType.vb: RSA.EncryptValue(Byte())\n  fullname.vb: System.Security.Cryptography.RSA.EncryptValue(System.Byte())\n  name.vb: EncryptValue(Byte())\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.EncryptValue(System.Byte[])\n    name: EncryptValue\n    nameWithType: RSA.EncryptValue\n    fullName: System.Security.Cryptography.RSA.EncryptValue\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.EncryptValue(System.Byte[])\n    name: EncryptValue\n    nameWithType: RSA.EncryptValue\n    fullName: System.Security.Cryptography.RSA.EncryptValue\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Security.Cryptography.RSA.FromXmlString(System.String)\n  commentId: M:System.Security.Cryptography.RSA.FromXmlString(System.String)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: FromXmlString(String)\n  nameWithType: RSA.FromXmlString(String)\n  fullName: System.Security.Cryptography.RSA.FromXmlString(System.String)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.FromXmlString(System.String)\n    name: FromXmlString\n    nameWithType: RSA.FromXmlString\n    fullName: System.Security.Cryptography.RSA.FromXmlString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.FromXmlString(System.String)\n    name: FromXmlString\n    nameWithType: RSA.FromXmlString\n    fullName: System.Security.Cryptography.RSA.FromXmlString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Security.Cryptography.RSA.ToXmlString(System.Boolean)\n  commentId: M:System.Security.Cryptography.RSA.ToXmlString(System.Boolean)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: ToXmlString(Boolean)\n  nameWithType: RSA.ToXmlString(Boolean)\n  fullName: System.Security.Cryptography.RSA.ToXmlString(System.Boolean)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.ToXmlString(System.Boolean)\n    name: ToXmlString\n    nameWithType: RSA.ToXmlString\n    fullName: System.Security.Cryptography.RSA.ToXmlString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    nameWithType: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.ToXmlString(System.Boolean)\n    name: ToXmlString\n    nameWithType: RSA.ToXmlString\n    fullName: System.Security.Cryptography.RSA.ToXmlString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    nameWithType: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Security.Cryptography.RSA.KeyExchangeAlgorithm\n  commentId: P:System.Security.Cryptography.RSA.KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: KeyExchangeAlgorithm\n  nameWithType: RSA.KeyExchangeAlgorithm\n  fullName: System.Security.Cryptography.RSA.KeyExchangeAlgorithm\n- uid: System.Security.Cryptography.RSA.SignatureAlgorithm\n  commentId: P:System.Security.Cryptography.RSA.SignatureAlgorithm\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: SignatureAlgorithm\n  nameWithType: RSA.SignatureAlgorithm\n  fullName: System.Security.Cryptography.RSA.SignatureAlgorithm\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  commentId: F:System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: KeySizeValue\n  nameWithType: AsymmetricAlgorithm.KeySizeValue\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  commentId: F:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: LegalKeySizesValue\n  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: Dispose()\n  nameWithType: AsymmetricAlgorithm.Dispose()\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose()\n  spec.csharp:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    name: Dispose\n    nameWithType: AsymmetricAlgorithm.Dispose\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    name: Dispose\n    nameWithType: AsymmetricAlgorithm.Dispose\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: Clear()\n  nameWithType: AsymmetricAlgorithm.Clear()\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Clear()\n  spec.csharp:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n    name: Clear\n    nameWithType: AsymmetricAlgorithm.Clear\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n    name: Clear\n    nameWithType: AsymmetricAlgorithm.Clear\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.ToString\n  commentId: M:System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.Equals(System.Object)\n  commentId: M:System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.Equals(System.Object,System.Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.GetHashCode\n  commentId: M:System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.GetType\n  commentId: M:System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.MemberwiseClone\n  commentId: M:System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System\n  commentId: N:System\n  isExternal: false\n  name: System\n  nameWithType: System\n  fullName: System\n- uid: System.Int32\n  commentId: T:System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.IntPtr\n  commentId: T:System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Security.Cryptography.RSAParameters\n  commentId: T:System.Security.Cryptography.RSAParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RSAParameters\n  nameWithType: RSAParameters\n  fullName: System.Security.Cryptography.RSAParameters\n- uid: System.Security.Cryptography.SafeEvpPKeyHandle\n  commentId: T:System.Security.Cryptography.SafeEvpPKeyHandle\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: SafeEvpPKeyHandle\n  nameWithType: SafeEvpPKeyHandle\n  fullName: System.Security.Cryptography.SafeEvpPKeyHandle\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  commentId: P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: KeySize\n  nameWithType: AsymmetricAlgorithm.KeySize\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  commentId: P:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: LegalKeySizes\n  nameWithType: AsymmetricAlgorithm.LegalKeySizes\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n- uid: System.Security.Cryptography.KeySizes[]\n  name: KeySizes[]\n  nameWithType: KeySizes[]\n  fullName: System.Security.Cryptography.KeySizes[]\n  nameWithType.vb: KeySizes()\n  fullname.vb: System.Security.Cryptography.KeySizes()\n  name.vb: KeySizes()\n  spec.csharp:\n  - uid: System.Security.Cryptography.KeySizes\n    name: KeySizes\n    nameWithType: KeySizes\n    fullName: System.Security.Cryptography.KeySizes\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Security.Cryptography.KeySizes\n    name: KeySizes\n    nameWithType: KeySizes\n    fullName: System.Security.Cryptography.KeySizes\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n- uid: System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  commentId: M:System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: Decrypt(Byte[], RSAEncryptionPadding)\n  nameWithType: RSA.Decrypt(Byte[], RSAEncryptionPadding)\n  fullName: System.Security.Cryptography.RSA.Decrypt(System.Byte[], System.Security.Cryptography.RSAEncryptionPadding)\n  nameWithType.vb: RSA.Decrypt(Byte(), RSAEncryptionPadding)\n  fullname.vb: System.Security.Cryptography.RSA.Decrypt(System.Byte(), System.Security.Cryptography.RSAEncryptionPadding)\n  name.vb: Decrypt(Byte(), RSAEncryptionPadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n    name: Decrypt\n    nameWithType: RSA.Decrypt\n    fullName: System.Security.Cryptography.RSA.Decrypt\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSAEncryptionPadding\n    name: RSAEncryptionPadding\n    nameWithType: RSAEncryptionPadding\n    fullName: System.Security.Cryptography.RSAEncryptionPadding\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n    name: Decrypt\n    nameWithType: RSA.Decrypt\n    fullName: System.Security.Cryptography.RSA.Decrypt\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSAEncryptionPadding\n    name: RSAEncryptionPadding\n    nameWithType: RSAEncryptionPadding\n    fullName: System.Security.Cryptography.RSAEncryptionPadding\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Byte[]\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  nameWithType.vb: Byte()\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n- uid: System.Security.Cryptography.RSAEncryptionPadding\n  commentId: T:System.Security.Cryptography.RSAEncryptionPadding\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RSAEncryptionPadding\n  nameWithType: RSAEncryptionPadding\n  fullName: System.Security.Cryptography.RSAEncryptionPadding\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: Dispose(Boolean)\n  nameWithType: AsymmetricAlgorithm.Dispose(Boolean)\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  spec.csharp:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n    name: Dispose\n    nameWithType: AsymmetricAlgorithm.Dispose\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    nameWithType: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n    name: Dispose\n    nameWithType: AsymmetricAlgorithm.Dispose\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    nameWithType: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Boolean\n  commentId: T:System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  commentId: M:System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: Encrypt(Byte[], RSAEncryptionPadding)\n  nameWithType: RSA.Encrypt(Byte[], RSAEncryptionPadding)\n  fullName: System.Security.Cryptography.RSA.Encrypt(System.Byte[], System.Security.Cryptography.RSAEncryptionPadding)\n  nameWithType.vb: RSA.Encrypt(Byte(), RSAEncryptionPadding)\n  fullname.vb: System.Security.Cryptography.RSA.Encrypt(System.Byte(), System.Security.Cryptography.RSAEncryptionPadding)\n  name.vb: Encrypt(Byte(), RSAEncryptionPadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n    name: Encrypt\n    nameWithType: RSA.Encrypt\n    fullName: System.Security.Cryptography.RSA.Encrypt\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSAEncryptionPadding\n    name: RSAEncryptionPadding\n    nameWithType: RSAEncryptionPadding\n    fullName: System.Security.Cryptography.RSAEncryptionPadding\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n    name: Encrypt\n    nameWithType: RSA.Encrypt\n    fullName: System.Security.Cryptography.RSA.Encrypt\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSAEncryptionPadding\n    name: RSAEncryptionPadding\n    nameWithType: RSAEncryptionPadding\n    fullName: System.Security.Cryptography.RSAEncryptionPadding\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Security.Cryptography.RSA.ExportParameters(System.Boolean)\n  commentId: M:System.Security.Cryptography.RSA.ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: ExportParameters(Boolean)\n  nameWithType: RSA.ExportParameters(Boolean)\n  fullName: System.Security.Cryptography.RSA.ExportParameters(System.Boolean)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.ExportParameters(System.Boolean)\n    name: ExportParameters\n    nameWithType: RSA.ExportParameters\n    fullName: System.Security.Cryptography.RSA.ExportParameters\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    nameWithType: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.ExportParameters(System.Boolean)\n    name: ExportParameters\n    nameWithType: RSA.ExportParameters\n    fullName: System.Security.Cryptography.RSA.ExportParameters\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    nameWithType: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType: RSA.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: System.Security.Cryptography.RSA.HashData(System.Byte[], System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)\n  nameWithType.vb: RSA.HashData(Byte(), Int32, Int32, HashAlgorithmName)\n  fullname.vb: System.Security.Cryptography.RSA.HashData(System.Byte(), System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)\n  name.vb: HashData(Byte(), Int32, Int32, HashAlgorithmName)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n    name: HashData\n    nameWithType: RSA.HashData\n    fullName: System.Security.Cryptography.RSA.HashData\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    nameWithType: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n    name: HashData\n    nameWithType: RSA.HashData\n    fullName: System.Security.Cryptography.RSA.HashData\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    nameWithType: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Security.Cryptography.HashAlgorithmName\n  commentId: T:System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: HashData(Stream, HashAlgorithmName)\n  nameWithType: RSA.HashData(Stream, HashAlgorithmName)\n  fullName: System.Security.Cryptography.RSA.HashData(System.IO.Stream, System.Security.Cryptography.HashAlgorithmName)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n    name: HashData\n    nameWithType: RSA.HashData\n    fullName: System.Security.Cryptography.RSA.HashData\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    nameWithType: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    nameWithType: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n    name: HashData\n    nameWithType: RSA.HashData\n    fullName: System.Security.Cryptography.RSA.HashData\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    nameWithType: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    nameWithType: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.IO.Stream\n  commentId: T:System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.IO\n  commentId: N:System.IO\n  isExternal: false\n  name: System.IO\n  nameWithType: System.IO\n  fullName: System.IO\n- uid: System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)\n  commentId: M:System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: ImportParameters(RSAParameters)\n  nameWithType: RSA.ImportParameters(RSAParameters)\n  fullName: System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)\n    name: ImportParameters\n    nameWithType: RSA.ImportParameters\n    fullName: System.Security.Cryptography.RSA.ImportParameters\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Security.Cryptography.RSAParameters\n    name: RSAParameters\n    nameWithType: RSAParameters\n    fullName: System.Security.Cryptography.RSAParameters\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)\n    name: ImportParameters\n    nameWithType: RSA.ImportParameters\n    fullName: System.Security.Cryptography.RSA.ImportParameters\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Security.Cryptography.RSAParameters\n    name: RSAParameters\n    nameWithType: RSAParameters\n    fullName: System.Security.Cryptography.RSAParameters\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  commentId: M:System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSA.SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.SignHash(System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  nameWithType.vb: RSA.SignHash(Byte(), HashAlgorithmName, RSASignaturePadding)\n  fullname.vb: System.Security.Cryptography.RSA.SignHash(System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: SignHash(Byte(), HashAlgorithmName, RSASignaturePadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: SignHash\n    nameWithType: RSA.SignHash\n    fullName: System.Security.Cryptography.RSA.SignHash\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    nameWithType: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    nameWithType: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: SignHash\n    nameWithType: RSA.SignHash\n    fullName: System.Security.Cryptography.RSA.SignHash\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    nameWithType: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    nameWithType: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Security.Cryptography.RSASignaturePadding\n  commentId: T:System.Security.Cryptography.RSASignaturePadding\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RSASignaturePadding\n  nameWithType: RSASignaturePadding\n  fullName: System.Security.Cryptography.RSASignaturePadding\n- uid: System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  commentId: M:System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSA.VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.VerifyHash(System.Byte[], System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  nameWithType.vb: RSA.VerifyHash(Byte(), Byte(), HashAlgorithmName, RSASignaturePadding)\n  fullname.vb: System.Security.Cryptography.RSA.VerifyHash(System.Byte(), System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: VerifyHash(Byte(), Byte(), HashAlgorithmName, RSASignaturePadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: VerifyHash\n    nameWithType: RSA.VerifyHash\n    fullName: System.Security.Cryptography.RSA.VerifyHash\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    nameWithType: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    nameWithType: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: VerifyHash\n    nameWithType: RSA.VerifyHash\n    fullName: System.Security.Cryptography.RSA.VerifyHash\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    nameWithType: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    nameWithType: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n"}