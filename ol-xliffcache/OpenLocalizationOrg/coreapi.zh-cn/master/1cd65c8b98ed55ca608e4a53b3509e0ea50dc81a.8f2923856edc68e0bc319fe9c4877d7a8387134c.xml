{"nodes":[{"pos":[4100,4128],"content":"PropertyDescriptorCollection","needQuote":true,"nodes":[{"content":"PropertyDescriptorCollection","pos":[0,28]}]},{"pos":[6431,6436],"content":"Empty","needQuote":true,"nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[8084,8134],"content":"PropertyDescriptorCollection(PropertyDescriptor[])","needQuote":true,"nodes":[{"content":"PropertyDescriptorCollection(PropertyDescriptor[])","pos":[0,50]}]},{"pos":[10448,10507],"content":"PropertyDescriptorCollection(PropertyDescriptor[], Boolean)","needQuote":true,"nodes":[{"content":"PropertyDescriptorCollection(PropertyDescriptor[], Boolean)","pos":[0,59]}]},{"content":"\\n&lt;p&gt;If &lt;strong&gt;true&lt;/strong&gt;, specifies that the collection cannot be modified.&lt;/p&gt;\\n","pos":[11871,11957],"source":"\\n<p>If <strong>true</strong>, specifies that the collection cannot be modified.</p>\\n"},{"pos":[12921,12926],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The number of property descriptors in the collection.&lt;/p&gt;\\n","pos":[13710,13774],"source":"\\n<p>The number of property descriptors in the collection.</p>\\n"},{"pos":[14560,14586],"content":"ICollection.IsSynchronized","needQuote":true,"nodes":[{"content":"ICollection.IsSynchronized","pos":[0,26]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if access to the collection is synchronized (thread safe); otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[15578,15706],"source":"\\n<p>\\n<strong>true</strong> if access to the collection is synchronized (thread safe); otherwise, <strong>false</strong>.</p>\\n"},{"pos":[16412,16432],"content":"ICollection.SyncRoot","needQuote":true,"nodes":[{"content":"ICollection.SyncRoot","pos":[0,20]}]},{"content":"\\n&lt;p&gt;An object that can be used to synchronize access to the collection.&lt;/p&gt;\\n","pos":[17379,17457],"source":"\\n<p>An object that can be used to synchronize access to the collection.</p>\\n"},{"pos":[18148,18171],"content":"IDictionary.IsFixedSize","needQuote":true,"nodes":[{"content":"IDictionary.IsFixedSize","pos":[0,23]}]},{"pos":[20156,20187],"content":"IDictionary.Add(Object, Object)","needQuote":true,"nodes":[{"content":"IDictionary.Add(Object, Object)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The collection is read-only.&lt;/p&gt;\\n","pos":[21666,21705],"source":"\\n<p>The collection is read-only.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[21802,21855],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n"},{"pos":[22582,22610],"content":"IDictionary.Contains(Object)","needQuote":true,"nodes":[{"content":"IDictionary.Contains(Object)","pos":[0,28]}]},{"pos":[24738,24762],"content":"IDictionary.Item[Object]","needQuote":true,"nodes":[{"content":"IDictionary.Item[Object]","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The key of the element to get or set.","pos":[25714,25756],"source":"\\n<p>The key of the element to get or set."},{"content":"&lt;/p&gt;\\n","pos":[25757,25763],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The element with the specified key.&lt;/p&gt;\\n","pos":[25823,25869],"source":"\\n<p>The element with the specified key.</p>\\n"},{"pos":[26709,26735],"content":"IDictionary.Remove(Object)","needQuote":true,"nodes":[{"content":"IDictionary.Remove(Object)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The key of the element to remove.&lt;/p&gt;\\n","pos":[27738,27782],"source":"\\n<p>The key of the element to remove.</p>\\n"},{"pos":[28444,28466],"content":"IDictionary.IsReadOnly","needQuote":true,"nodes":[{"content":"IDictionary.IsReadOnly","pos":[0,22]}]},{"pos":[30377,30404],"content":"IDictionary.GetEnumerator()","needQuote":true,"nodes":[{"content":"IDictionary.GetEnumerator()","pos":[0,27]}]},{"pos":[32426,32442],"content":"IDictionary.Keys","needQuote":true,"nodes":[{"content":"IDictionary.Keys","pos":[0,16]}]},{"pos":[34424,34442],"content":"IDictionary.Values","needQuote":true,"nodes":[{"content":"IDictionary.Values","pos":[0,18]}]},{"pos":[36443,36460],"content":"IList.IsFixedSize","needQuote":true,"nodes":[{"content":"IList.IsFixedSize","pos":[0,17]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the collection has a fixed size; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[37384,37489],"source":"\\n<p>\\n<strong>true</strong> if the collection has a fixed size; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[38147,38163],"content":"IList.IsReadOnly","needQuote":true,"nodes":[{"content":"IList.IsReadOnly","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the collection is read-only; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[39078,39179],"source":"\\n<p>\\n<strong>true</strong> if the collection is read-only; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[39857,39874],"content":"IList.Add(Object)","needQuote":true,"nodes":[{"content":"IList.Add(Object)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The item to add to the collection.&lt;/p&gt;\\n","pos":[40814,40859],"source":"\\n<p>The item to add to the collection.</p>\\n"},{"content":"\\n&lt;p&gt;The position into which the new element was inserted.&lt;/p&gt;\\n","pos":[40918,40982],"source":"\\n<p>The position into which the new element was inserted.</p>\\n"},{"pos":[41623,41643],"content":"IList.Remove(Object)","needQuote":true,"nodes":[{"content":"IList.Remove(Object)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The item to remove from the collection.&lt;/p&gt;\\n","pos":[42548,42598],"source":"\\n<p>The item to remove from the collection.</p>\\n"},{"content":"\\n&lt;p&gt;The collection is read-only.&lt;/p&gt;\\n","pos":[42717,42756],"source":"\\n<p>The collection is read-only.</p>\\n"},{"pos":[43415,43437],"content":"IList.Contains(Object)","needQuote":true,"nodes":[{"content":"IList.Contains(Object)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The item to locate in the collection.&lt;/p&gt;\\n","pos":[44358,44406],"source":"\\n<p>The item to locate in the collection.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the item is found in the collection; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[44467,44576],"source":"\\n<p>\\n<strong>true</strong> if the item is found in the collection; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[45240,45261],"content":"IList.IndexOf(Object)","needQuote":true,"nodes":[{"content":"IList.IndexOf(Object)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The item to locate in the collection.&lt;/p&gt;\\n","pos":[46175,46223],"source":"\\n<p>The item to locate in the collection.</p>\\n"},{"content":"\\n&lt;p&gt;The index of &lt;em&gt;value&lt;/em&gt; if found in the list, otherwise -1.&lt;/p&gt;\\n","pos":[46282,46356],"source":"\\n<p>The index of <em>value</em> if found in the list, otherwise -1.</p>\\n"},{"pos":[47052,47079],"content":"IList.Insert(Int32, Object)","needQuote":true,"nodes":[{"content":"IList.Insert(Int32, Object)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The zero-based index at which &lt;em&gt;value&lt;/em&gt; should be inserted.&lt;/p&gt;\\n","pos":[48013,48088],"source":"\\n<p>The zero-based index at which <em>value</em> should be inserted.</p>\\n"},{"content":"\\n&lt;p&gt;The item to insert into the collection.&lt;/p&gt;\\n","pos":[48152,48202],"source":"\\n<p>The item to insert into the collection.</p>\\n"},{"content":"\\n&lt;p&gt;The collection is read-only.&lt;/p&gt;\\n","pos":[48321,48360],"source":"\\n<p>The collection is read-only.</p>\\n"},{"pos":[49038,49055],"content":"IList.Item[Int32]","needQuote":true,"nodes":[{"content":"IList.Item[Int32]","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The zero-based index of the item to get or set.&lt;/p&gt;\\n","pos":[49992,50050],"source":"\\n<p>The zero-based index of the item to get or set.</p>\\n"},{"content":"\\n&lt;p&gt;The element at the specified index.&lt;/p&gt;\\n","pos":[50110,50156],"source":"\\n<p>The element at the specified index.</p>\\n"},{"content":"\\n&lt;p&gt;The collection is read-only.&lt;/p&gt;\\n","pos":[50275,50314],"source":"\\n<p>The collection is read-only.</p>\\n"},{"pos":[51574,51585],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[54100,54112],"content":"Item[String]","needQuote":true,"nodes":[{"content":"Item[String]","pos":[0,12]}]},{"pos":[56433,56456],"content":"Add(PropertyDescriptor)","needQuote":true,"nodes":[{"content":"Add(PropertyDescriptor)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The collection is read-only.&lt;/p&gt;\\n","pos":[57901,57940],"source":"\\n<p>The collection is read-only.</p>\\n"},{"pos":[58313,58320],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The collection is read-only.&lt;/p&gt;\\n","pos":[59198,59237],"source":"\\n<p>The collection is read-only.</p>\\n"},{"pos":[59819,59847],"content":"Contains(PropertyDescriptor)","needQuote":true,"nodes":[{"content":"Contains(PropertyDescriptor)","pos":[0,28]}]},{"pos":[61718,61738],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The index of the &lt;em&gt;array&lt;/em&gt; parameter at which copying begins.","pos":[62836,62907],"source":"\\n<p>The index of the <em>array</em> parameter at which copying begins."},{"content":"&lt;/p&gt;\\n","pos":[62908,62914],"source":" </p>\\n"},{"pos":[63454,63475],"content":"Find(String, Boolean)","needQuote":true,"nodes":[{"content":"Find(String, Boolean)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if you want to ignore the case of the property name; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[64743,64859],"source":"\\n<p>\\n<strong>true</strong> if you want to ignore the case of the property name; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[64860,64866],"source":" </p>\\n"},{"pos":[65792,65807],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[67640,67667],"content":"IndexOf(PropertyDescriptor)","needQuote":true,"nodes":[{"content":"IndexOf(PropertyDescriptor)","pos":[0,27]}]},{"pos":[69519,69552],"content":"Insert(Int32, PropertyDescriptor)","needQuote":true,"nodes":[{"content":"Insert(Int32, PropertyDescriptor)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The index at which to add the &lt;em&gt;value&lt;/em&gt; parameter to the collection.","pos":[70547,70625],"source":"\\n<p>The index at which to add the <em>value</em> parameter to the collection."},{"content":"&lt;/p&gt;\\n","pos":[70626,70632],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The collection is read-only.&lt;/p&gt;\\n","pos":[70984,71023],"source":"\\n<p>The collection is read-only.</p>\\n"},{"pos":[71517,71540],"content":"InternalSort(IComparer)","needQuote":true,"nodes":[{"content":"InternalSort(IComparer)","pos":[0,23]}]},{"pos":[73217,73239],"content":"InternalSort(String[])","needQuote":true,"nodes":[{"content":"InternalSort(String[])","pos":[0,22]}]},{"pos":[75183,75209],"content":"Remove(PropertyDescriptor)","needQuote":true,"nodes":[{"content":"Remove(PropertyDescriptor)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The collection is read-only.&lt;/p&gt;\\n","pos":[76440,76479],"source":"\\n<p>The collection is read-only.</p>\\n"},{"pos":[76906,76921],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The collection is read-only.&lt;/p&gt;\\n","pos":[78104,78143],"source":"\\n<p>The collection is read-only.</p>\\n"},{"pos":[78571,78577],"content":"Sort()","needQuote":true,"nodes":[{"content":"Sort()","pos":[0,6]}]},{"pos":[80214,80229],"content":"Sort(IComparer)","needQuote":true,"nodes":[{"content":"Sort(IComparer)","pos":[0,15]}]},{"pos":[82304,82318],"content":"Sort(String[])","needQuote":true,"nodes":[{"content":"Sort(String[])","pos":[0,14]}]},{"pos":[84660,84685],"content":"Sort(String[], IComparer)","needQuote":true,"nodes":[{"content":"Sort(String[], IComparer)","pos":[0,25]}]},{"pos":[87155,87176],"content":"System.ComponentModel","needQuote":true,"nodes":[{"content":"System.ComponentModel","pos":[0,21]}]},{"pos":[87352,87358],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[87532,87543],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[87750,87755],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[87950,87961],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[88174,88185],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[88384,88394],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[88489,88497],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[88566,88567],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88594,88595],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88665,88673],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[88742,88743],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88770,88771],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88954,88968],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[89087,89093],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[89160,89161],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89211,89217],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[89277,89278],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89361,89367],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[89434,89435],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89485,89491],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[89551,89552],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89766,89788],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[89936,89942],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[90009,90010],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90060,90066],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[90127,90128]},{"pos":[90183,90189],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[90249,90250],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90347,90353],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[90420,90421],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90471,90477],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[90538,90539]},{"pos":[90594,90600],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[90660,90661],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90906,90937],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[91103,91118],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[91194,91195],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91245,91251],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[91312,91313]},{"pos":[91368,91374],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[91434,91435],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91541,91556],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[91632,91633],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91683,91689],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[91750,91751]},{"pos":[91806,91812],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[91872,91873],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92103,92116],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[92217,92228],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[92300,92301],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92328,92329],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92402,92413],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[92485,92486],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92513,92514],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92689,92698],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[92791,92798],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[92866,92867],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92894,92895],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92964,92971],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[93039,93040],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93067,93068],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93243,93260],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[93369,93384],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[93460,93461],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93488,93489],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93566,93581],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[93657,93658],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93685,93686],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93981,93994],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[94111,94122],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[94181,94182],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94209,94210],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94291,94302],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[94361,94362],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94389,94390],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94745,94757],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[94890,94900],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[94967,94968],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94995,94996],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95085,95095],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[95162,95163],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95190,95191],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95532,95547],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[95751,95764],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[95826,95827],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95854,95855],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95933,95949],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[96014,96015],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96042,96043],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96421,96438],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[96650,96665],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[96729,96730],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96757,96758],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96838,96856],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[96923,96924],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96951,96952],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97187,97193],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[97312,97330],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[97531,97555],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[97734,97745],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[97804,97805],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97872,97883],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[97960,97961],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98074,98085],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[98144,98145],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98212,98223],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[98300,98301],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98529,98538],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[98744,98767],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[98962,98972],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[99039,99040],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99107,99118],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[99195,99196],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[99317,99327],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[99394,99395],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99462,99473],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[99550,99551],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[99804,99822],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[100044,100070],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[100377,100390],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[100452,100453],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100520,100531],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[100608,100609],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100719,100735],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[100800,100801],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100868,100879],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[100956,100957],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101246,101256],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[101456,101484],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[101799,101814],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[101878,101879],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101946,101957],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[102034,102035],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102147,102165],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[102232,102233],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102300,102311],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[102388,102389],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102651,102662],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[102860,102888],"content":"PropertyDescriptorCollection","needQuote":true,"nodes":[{"content":"PropertyDescriptorCollection","pos":[0,28]}]},{"pos":[103121,103141],"content":"PropertyDescriptor[]","needQuote":true,"nodes":[{"content":"PropertyDescriptor[]","pos":[0,20]}]},{"pos":[103362,103380],"content":"PropertyDescriptor","needQuote":true,"nodes":[{"content":"PropertyDescriptor","pos":[0,18]}]},{"content":"[]","pos":[103447,103449]},{"pos":[103541,103559],"content":"PropertyDescriptor","needQuote":true,"nodes":[{"content":"PropertyDescriptor","pos":[0,18]}]},{"pos":[103625,103627],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[103789,103796],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[103991,103996],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[104197,104202],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[104400,104414],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[104693,104701],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[104964,104975],"content":"IsFixedSize","needQuote":true,"nodes":[{"content":"IsFixedSize","pos":[0,11]}]},{"pos":[105268,105287],"content":"Add(Object, Object)","needQuote":true,"nodes":[{"content":"Add(Object, Object)","pos":[0,19]}]},{"pos":[105463,105466],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[105547,105548],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105598,105604],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[105665,105666]},{"pos":[105721,105727],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[105787,105788],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105899,105902],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[105983,105984],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106034,106040],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[106101,106102]},{"pos":[106157,106163],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[106223,106224],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106498,106514],"content":"Contains(Object)","needQuote":true,"nodes":[{"content":"Contains(Object)","pos":[0,16]}]},{"pos":[106671,106679],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[106765,106766],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106816,106822],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[106882,106883],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106985,106993],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[107079,107080],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[107130,107136],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[107196,107197],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[107455,107467],"content":"Item[Object]","needQuote":true,"nodes":[{"content":"Item[Object]","pos":[0,12]}]},{"pos":[107706,107710],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[107793,107794]},{"pos":[107847,107853],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"]","pos":[107914,107915]},{"pos":[108016,108020],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[108102,108103],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[108153,108159],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[108219,108220],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[108516,108530],"content":"Remove(Object)","needQuote":true,"nodes":[{"content":"Remove(Object)","pos":[0,14]}]},{"pos":[108683,108689],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[108773,108774],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[108824,108830],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[108890,108891],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[108991,108997],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[109081,109082],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109132,109138],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[109198,109199],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109444,109454],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[109725,109740],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[109879,109892],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[109983,109984],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[110011,110012],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110104,110117],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[110208,110209],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[110236,110237],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110463,110484],"content":"IDictionaryEnumerator","needQuote":true,"nodes":[{"content":"IDictionaryEnumerator","pos":[0,21]}]},{"pos":[110743,110747],"content":"Keys","needQuote":true,"nodes":[{"content":"Keys","pos":[0,4]}]},{"pos":[110993,110999],"content":"Values","needQuote":true,"nodes":[{"content":"Values","pos":[0,6]}]},{"pos":[111245,111256],"content":"IsFixedSize","needQuote":true,"nodes":[{"content":"IsFixedSize","pos":[0,11]}]},{"pos":[111498,111508],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[111754,111765],"content":"Add(Object)","needQuote":true,"nodes":[{"content":"Add(Object)","pos":[0,11]}]},{"pos":[111900,111903],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[111957,111958],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112008,112014],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[112074,112075],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112166,112169],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[112223,112224],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112274,112280],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[112340,112341],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112567,112581],"content":"Remove(Object)","needQuote":true,"nodes":[{"content":"Remove(Object)","pos":[0,14]}]},{"pos":[112722,112728],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[112785,112786],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112836,112842],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[112902,112903],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112997,113003],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[113060,113061],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113111,113117],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[113177,113178],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113412,113428],"content":"Contains(Object)","needQuote":true,"nodes":[{"content":"Contains(Object)","pos":[0,16]}]},{"pos":[113573,113581],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[113640,113641],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113691,113697],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[113757,113758],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113854,113862],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[113921,113922],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113972,113978],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[114038,114039],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[114276,114291],"content":"IndexOf(Object)","needQuote":true,"nodes":[{"content":"IndexOf(Object)","pos":[0,15]}]},{"pos":[114434,114441],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[114499,114500],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114550,114556],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[114616,114617],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[114712,114719],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[114777,114778],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114828,114834],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[114894,114895],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115142,115163],"content":"Insert(Int32, Object)","needQuote":true,"nodes":[{"content":"Insert(Int32, Object)","pos":[0,21]}]},{"pos":[115331,115337],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[115394,115395],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115444,115449],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[115509,115510]},{"pos":[115565,115571],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[115631,115632],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115739,115745],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[115802,115803],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115852,115857],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[115917,115918]},{"pos":[115973,115979],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[116039,116040],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[116289,116300],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[116517,116521],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[116577,116578]},{"pos":[116630,116635],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"]","pos":[116695,116696]},{"pos":[116790,116794],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[116849,116850],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116899,116904],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[116963,116964],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117219,117237],"content":"PropertyDescriptor","needQuote":true,"nodes":[{"content":"PropertyDescriptor","pos":[0,18]}]},{"pos":[117448,117454],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[117645,117652],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[117775,117780],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[117863,117864],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[117891,117892],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117976,117981],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[118064,118065],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118092,118093],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118299,118306],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[118417,118422],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[118478,118479],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118506,118507],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118585,118590],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[118646,118647],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118674,118675],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118908,118928],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"pos":[119106,119112],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[119175,119176],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119225,119230],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[119269,119270]},{"pos":[119324,119329],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[119388,119389],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119501,119507],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[119570,119571],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119620,119625],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[119664,119665]},{"pos":[119719,119724],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[119783,119784],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119995,120000],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[120197,120212],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[120351,120364],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[120434,120435],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[120462,120463],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[120555,120568],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[120638,120639],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[120666,120667],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[120883,120894],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[121105,121114],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[121257,121265],"content":"String[]","needQuote":true,"nodes":[{"content":"String[]","pos":[0,8]}]},{"pos":[121393,121399],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"[]","pos":[121460,121462]},{"pos":[121527,121533],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[121593,121595],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[121783,121798],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"pos":[121941,121949],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[122008,122009],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[122058,122063],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[122122,122123],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122218,122226],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[122285,122286],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[122335,122340],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[122399,122400],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122599,122620],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[122821,122838],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[123017,123041],"content":"IndexOutOfRangeException","needQuote":true,"nodes":[{"content":"IndexOutOfRangeException","pos":[0,24]}]}],"content":"items:\n- uid: System.ComponentModel.PropertyDescriptorCollection\n  commentId: T:System.ComponentModel.PropertyDescriptorCollection\n  id: PropertyDescriptorCollection\n  parent: System.ComponentModel\n  children:\n  - System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])\n  - System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)\n  - System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)\n  - System.ComponentModel.PropertyDescriptorCollection.Clear\n  - System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)\n  - System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)\n  - System.ComponentModel.PropertyDescriptorCollection.Count\n  - System.ComponentModel.PropertyDescriptorCollection.Empty\n  - System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)\n  - System.ComponentModel.PropertyDescriptorCollection.GetEnumerator\n  - System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)\n  - System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)\n  - System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)\n  - System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])\n  - System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)\n  - System.ComponentModel.PropertyDescriptorCollection.Item(System.String)\n  - System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)\n  - System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)\n  - System.ComponentModel.PropertyDescriptorCollection.Sort\n  - System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)\n  - System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])\n  - System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)\n  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)\n  langs:\n  - csharp\n  - vb\n  name: PropertyDescriptorCollection\n  fullName: System.ComponentModel.PropertyDescriptorCollection\n  type: Class\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PropertyDescriptorCollection\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 19\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Represents a collection of <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  syntax:\n    content: 'public class PropertyDescriptorCollection : IList, IDictionary, ICollection, IEnumerable'\n    content.vb: >-\n      Public Class PropertyDescriptorCollection\n          Implements IList, IDictionary, ICollection, IEnumerable\n  seealso:\n  - type: System.ComponentModel.PropertyDescriptor\n    commentId: T:System.ComponentModel.PropertyDescriptor\n  - type: System.ComponentModel.TypeDescriptor\n    commentId: T:System.ComponentModel.TypeDescriptor\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IDictionary\n  - System.Collections.IList\n  - System.Collections.ICollection\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: PropertyDescriptorCollection\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.ComponentModel.PropertyDescriptorCollection.Empty\n  commentId: F:System.ComponentModel.PropertyDescriptorCollection.Empty\n  id: Empty\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: Empty\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Empty\n  type: Field\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Empty\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 25\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Specifies an empty collection that you can use instead of creating a new one with no items. This <strong>static</strong> field is read-only.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Security\", \"CA2112:SecuredTypesShouldNotExposeFields\")]\n\n      public static readonly PropertyDescriptorCollection Empty\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Security\", \"CA2112:SecuredTypesShouldNotExposeFields\")>\n\n      Public Shared ReadOnly Empty As PropertyDescriptorCollection\n    return:\n      type: System.ComponentModel.PropertyDescriptorCollection\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: PropertyDescriptorCollection.Empty\n- uid: System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])\n  commentId: M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])\n  id: '#ctor(System.ComponentModel.PropertyDescriptor[])'\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: PropertyDescriptorCollection(PropertyDescriptor[])\n  fullName: System.ComponentModel.PropertyDescriptorCollection.PropertyDescriptorCollection(System.ComponentModel.PropertyDescriptor[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 45\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ComponentModel.PropertyDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public PropertyDescriptorCollection(PropertyDescriptor[] properties)\n    content.vb: Public Sub New(properties As PropertyDescriptor())\n    parameters:\n    - id: properties\n      type: System.ComponentModel.PropertyDescriptor[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides the properties for this collection. </p>\\n\"\n  seealso:\n  - type: System.ComponentModel.PropertyDescriptor\n    commentId: T:System.ComponentModel.PropertyDescriptor\n  - type: System.ComponentModel.TypeDescriptor\n    commentId: T:System.ComponentModel.TypeDescriptor\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.ComponentModel.PropertyDescriptorCollection.PropertyDescriptorCollection(System.ComponentModel.PropertyDescriptor())\n  name.vb: PropertyDescriptorCollection(PropertyDescriptor())\n  nameWithType: PropertyDescriptorCollection.PropertyDescriptorCollection(PropertyDescriptor[])\n  nameWithType.vb: PropertyDescriptorCollection.PropertyDescriptorCollection(PropertyDescriptor())\n- uid: System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)\n  commentId: M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)\n  id: '#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)'\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: PropertyDescriptorCollection(PropertyDescriptor[], Boolean)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.PropertyDescriptorCollection(System.ComponentModel.PropertyDescriptor[], System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 64\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ComponentModel.PropertyDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, which is optionally read-only.</p>\\n\"\n  syntax:\n    content: public PropertyDescriptorCollection(PropertyDescriptor[] properties, bool readOnly)\n    content.vb: Public Sub New(properties As PropertyDescriptor(), readOnly As Boolean)\n    parameters:\n    - id: properties\n      type: System.ComponentModel.PropertyDescriptor[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides the properties for this collection.</p>\\n\"\n    - id: readOnly\n      type: System.Boolean\n      description: \"\\n<p>If <strong>true</strong>, specifies that the collection cannot be modified.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.PropertyDescriptor\n    commentId: T:System.ComponentModel.PropertyDescriptor\n  - type: System.ComponentModel.TypeDescriptor\n    commentId: T:System.ComponentModel.TypeDescriptor\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.ComponentModel.PropertyDescriptorCollection.PropertyDescriptorCollection(System.ComponentModel.PropertyDescriptor(), System.Boolean)\n  name.vb: PropertyDescriptorCollection(PropertyDescriptor(), Boolean)\n  nameWithType: PropertyDescriptorCollection.PropertyDescriptorCollection(PropertyDescriptor[], Boolean)\n  nameWithType.vb: PropertyDescriptorCollection.PropertyDescriptorCollection(PropertyDescriptor(), Boolean)\n- uid: System.ComponentModel.PropertyDescriptorCollection.Count\n  commentId: P:System.ComponentModel.PropertyDescriptorCollection.Count\n  id: Count\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Count\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 90\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets the number of property descriptors in the collection.</p>\\n\"\n  syntax:\n    content: public int Count { get; }\n    content.vb: Public ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of property descriptors in the collection.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.PropertyDescriptor\n    commentId: T:System.ComponentModel.PropertyDescriptor\n  - type: System.ComponentModel.TypeDescriptor\n    commentId: T:System.ComponentModel.TypeDescriptor\n  implements:\n  - System.Collections.ICollection.Count\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: PropertyDescriptorCollection.Count\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: ICollection.IsSynchronized\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.ICollection.IsSynchronized\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.IsSynchronized\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 474\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets a value indicating whether access to the collection is synchronized (thread safe).</p>\\n\"\n  syntax:\n    content: bool ICollection.IsSynchronized { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if access to the collection is synchronized (thread safe); otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.IsSynchronized\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.IsSynchronized\n  nameWithType: PropertyDescriptorCollection.ICollection.IsSynchronized\n  nameWithType.vb: PropertyDescriptorCollection.System.Collections.ICollection.IsSynchronized\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot\n  commentId: P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: ICollection.SyncRoot\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.ICollection.SyncRoot\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.SyncRoot\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 483\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets an object that can be used to synchronize access to the collection.</p>\\n\"\n  syntax:\n    content: object ICollection.SyncRoot { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>An object that can be used to synchronize access to the collection.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.SyncRoot\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.SyncRoot\n  nameWithType: PropertyDescriptorCollection.ICollection.SyncRoot\n  nameWithType.vb: PropertyDescriptorCollection.System.Collections.ICollection.SyncRoot\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize\n  commentId: P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize\n  id: System#Collections#IDictionary#IsFixedSize\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: IDictionary.IsFixedSize\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.IsFixedSize\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IDictionary.IsFixedSize\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 520\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size.</p>\\n\"\n  syntax:\n    content: bool IDictionary.IsFixedSize { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.IsFixedSize As Boolean Implements IDictionary.IsFixedSize\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.IsFixedSize\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.IDictionary.IsFixedSize\n  nameWithType: PropertyDescriptorCollection.IDictionary.IsFixedSize\n  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IDictionary.IsFixedSize\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)\n  commentId: M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)\n  id: System#Collections#IDictionary#Add(System.Object,System.Object)\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: IDictionary.Add(Object, Object)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.Add(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IDictionary.Add\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 492\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Adds an element with the provided key and value to the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: void IDictionary.Add(object key, object value)\n    content.vb: Sub System.Collections.IDictionary.Add(key As Object, value As Object) Implements IDictionary.Add\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use as the key of the element to add.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use as the value of the element to add.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.Add(System.Object,System.Object)\n  name.vb: System.Collections.IDictionary.Add(Object, Object)\n  nameWithType: PropertyDescriptorCollection.IDictionary.Add(Object, Object)\n  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IDictionary.Add(Object, Object)\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)\n  commentId: M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)\n  id: System#Collections#IDictionary#Contains(System.Object)\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: IDictionary.Contains(Object)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.Contains(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IDictionary.Contains\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 504\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Determines whether the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains an element with the specified key.</p>\\n\"\n  syntax:\n    content: bool IDictionary.Contains(object key)\n    content.vb: Function System.Collections.IDictionary.Contains(key As Object) As Boolean Implements IDictionary.Contains\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key to locate in the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains an element with the key; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.Contains(System.Object)\n  name.vb: System.Collections.IDictionary.Contains(Object)\n  nameWithType: PropertyDescriptorCollection.IDictionary.Contains(Object)\n  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IDictionary.Contains(Object)\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)\n  commentId: P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)\n  id: System#Collections#IDictionary#Item(System.Object)\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: IDictionary.Item[Object]\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.Item[System.Object]\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IDictionary.this[]\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 538\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets or sets the element with the specified key. </p>\\n\"\n  syntax:\n    content: object IDictionary.this[object key] { get; set; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.Item(key As Object) As Object Implements IDictionary.this\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key of the element to get or set. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The element with the specified key.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.Item(System.Object)\n  modifiers.csharp:\n  - get\n  - set\n  fullName.vb: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.Item(System.Object)\n  name.vb: System.Collections.IDictionary.Item(Object)\n  nameWithType: PropertyDescriptorCollection.IDictionary.Item[Object]\n  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IDictionary.Item(Object)\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)\n  commentId: M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)\n  id: System#Collections#IDictionary#Remove(System.Object)\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: IDictionary.Remove(Object)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.Remove(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IDictionary.Remove\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 639\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Removes the element with the specified key from the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: void IDictionary.Remove(object key)\n    content.vb: Sub System.Collections.IDictionary.Remove(key As Object) Implements IDictionary.Remove\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key of the element to remove.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.Remove(System.Object)\n  name.vb: System.Collections.IDictionary.Remove(Object)\n  nameWithType: PropertyDescriptorCollection.IDictionary.Remove(Object)\n  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IDictionary.Remove(Object)\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly\n  commentId: P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly\n  id: System#Collections#IDictionary#IsReadOnly\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: IDictionary.IsReadOnly\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IDictionary.IsReadOnly\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 529\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n\"\n  syntax:\n    content: bool IDictionary.IsReadOnly { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.IsReadOnly As Boolean Implements IDictionary.IsReadOnly\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.IsReadOnly\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.IDictionary.IsReadOnly\n  nameWithType: PropertyDescriptorCollection.IDictionary.IsReadOnly\n  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IDictionary.IsReadOnly\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator\n  commentId: M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator\n  id: System#Collections#IDictionary#GetEnumerator\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: IDictionary.GetEnumerator()\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IDictionary.GetEnumerator\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 514\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns an enumerator for this class.</p>\\n\"\n  syntax:\n    content: IDictionaryEnumerator IDictionary.GetEnumerator()\n    content.vb: Function System.Collections.IDictionary.GetEnumerator As IDictionaryEnumerator Implements IDictionary.GetEnumerator\n    return:\n      type: System.Collections.IDictionaryEnumerator\n      description: \"\\n<p>An enumerator of type <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.PropertyDescriptor\n    commentId: T:System.ComponentModel.PropertyDescriptor\n  - type: System.ComponentModel.TypeDescriptor\n    commentId: T:System.ComponentModel.TypeDescriptor\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IDictionary.GetEnumerator\n  name.vb: System.Collections.IDictionary.GetEnumerator()\n  nameWithType: PropertyDescriptorCollection.IDictionary.GetEnumerator()\n  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IDictionary.GetEnumerator()\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys\n  commentId: P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys\n  id: System#Collections#IDictionary#Keys\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: IDictionary.Keys\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.Keys\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IDictionary.Keys\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 605\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets an <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the keys of the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: ICollection IDictionary.Keys { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.Keys As ICollection Implements IDictionary.Keys\n    parameters: []\n    return:\n      type: System.Collections.ICollection\n      description: \"\\n<p>An <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the keys of the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.Keys\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.IDictionary.Keys\n  nameWithType: PropertyDescriptorCollection.IDictionary.Keys\n  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IDictionary.Keys\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values\n  commentId: P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values\n  id: System#Collections#IDictionary#Values\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: IDictionary.Values\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.Values\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IDictionary.Values\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 619\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets an <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the values in the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: ICollection IDictionary.Values { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.Values As ICollection Implements IDictionary.Values\n    parameters: []\n    return:\n      type: System.Collections.ICollection\n      description: \"\\n<p>An <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the values in the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.Values\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.IDictionary.Values\n  nameWithType: PropertyDescriptorCollection.IDictionary.Values\n  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IDictionary.Values\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize\n  commentId: P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize\n  id: System#Collections#IList#IsFixedSize\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.IsFixedSize\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.IsFixedSize\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.IsFixedSize\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 685\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets a value indicating whether the collection has a fixed size.</p>\\n\"\n  syntax:\n    content: bool IList.IsFixedSize { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsFixedSize As Boolean Implements IList.IsFixedSize\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the collection has a fixed size; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IList.IsFixedSize\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.IList.IsFixedSize\n  nameWithType: PropertyDescriptorCollection.IList.IsFixedSize\n  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IList.IsFixedSize\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly\n  commentId: P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly\n  id: System#Collections#IList#IsReadOnly\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.IsReadOnly\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.IsReadOnly\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 676\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets a value indicating whether the collection is read-only.</p>\\n\"\n  syntax:\n    content: bool IList.IsReadOnly { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsReadOnly As Boolean Implements IList.IsReadOnly\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the collection is read-only; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IList.IsReadOnly\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.IList.IsReadOnly\n  nameWithType: PropertyDescriptorCollection.IList.IsReadOnly\n  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IList.IsReadOnly\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)\n  commentId: M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)\n  id: System#Collections#IList#Add(System.Object)\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.Add(Object)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.Add(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.Add\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 652\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Adds an item to the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: int IList.Add(object value)\n    content.vb: Function System.Collections.IList.Add(value As Object) As Integer Implements IList.Add\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The item to add to the collection.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The position into which the new element was inserted.</p>\\n\"\n  implements:\n  - System.Collections.IList.Add(System.Object)\n  name.vb: System.Collections.IList.Add(Object)\n  nameWithType: PropertyDescriptorCollection.IList.Add(Object)\n  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IList.Add(Object)\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)\n  commentId: M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)\n  id: System#Collections#IList#Remove(System.Object)\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.Remove(Object)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.Remove(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.Remove\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 694\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Removes the first occurrence of a specified value from the collection.</p>\\n\"\n  syntax:\n    content: void IList.Remove(object value)\n    content.vb: Sub System.Collections.IList.Remove(value As Object) Implements IList.Remove\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The item to remove from the collection.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only.</p>\\n\"\n  implements:\n  - System.Collections.IList.Remove(System.Object)\n  name.vb: System.Collections.IList.Remove(Object)\n  nameWithType: PropertyDescriptorCollection.IList.Remove(Object)\n  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IList.Remove(Object)\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)\n  commentId: M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)\n  id: System#Collections#IList#Contains(System.Object)\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.Contains(Object)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.Contains(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.Contains\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 658\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Determines whether the collection contains a specific value.</p>\\n\"\n  syntax:\n    content: bool IList.Contains(object value)\n    content.vb: Function System.Collections.IList.Contains(value As Object) As Boolean Implements IList.Contains\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The item to locate in the collection.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the item is found in the collection; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IList.Contains(System.Object)\n  name.vb: System.Collections.IList.Contains(Object)\n  nameWithType: PropertyDescriptorCollection.IList.Contains(Object)\n  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IList.Contains(Object)\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)\n  commentId: M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)\n  id: System#Collections#IList#IndexOf(System.Object)\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.IndexOf(Object)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.IndexOf(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.IndexOf\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 664\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Determines the index of a specified item in the collection.</p>\\n\"\n  syntax:\n    content: int IList.IndexOf(object value)\n    content.vb: Function System.Collections.IList.IndexOf(value As Object) As Integer Implements IList.IndexOf\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The item to locate in the collection.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of <em>value</em> if found in the list, otherwise -1.</p>\\n\"\n  implements:\n  - System.Collections.IList.IndexOf(System.Object)\n  name.vb: System.Collections.IList.IndexOf(Object)\n  nameWithType: PropertyDescriptorCollection.IList.IndexOf(Object)\n  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IList.IndexOf(Object)\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  commentId: M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  id: System#Collections#IList#Insert(System.Int32,System.Object)\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.Insert(Int32, Object)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.Insert(System.Int32, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.Insert\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 670\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Inserts an item into the collection at a specified index.</p>\\n\"\n  syntax:\n    content: void IList.Insert(int index, object value)\n    content.vb: Sub System.Collections.IList.Insert(index As Integer, value As Object) Implements IList.Insert\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index at which <em>value</em> should be inserted.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The item to insert into the collection.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only.</p>\\n\"\n  implements:\n  - System.Collections.IList.Insert(System.Int32,System.Object)\n  name.vb: System.Collections.IList.Insert(Int32, Object)\n  nameWithType: PropertyDescriptorCollection.IList.Insert(Int32, Object)\n  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IList.Insert(Int32, Object)\n- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)\n  commentId: P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)\n  id: System#Collections#IList#Item(System.Int32)\n  isEii: true\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.Item[Int32]\n  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.this[]\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 700\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets or sets an item from the collection at a specified index.</p>\\n\"\n  syntax:\n    content: object IList.this[int index] { get; set; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IList.Item(index As Integer) As Object Implements IList.this\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the item to get or set.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The element at the specified index.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>value</em> is not a <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than 0. </p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is equal to or greater than <xref href=\\\"System.ComponentModel.EventDescriptorCollection.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.IList.Item(System.Int32)\n  modifiers.csharp:\n  - get\n  - set\n  fullName.vb: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.Item(System.Int32)\n  name.vb: System.Collections.IList.Item(Int32)\n  nameWithType: PropertyDescriptorCollection.IList.Item[Int32]\n  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IList.Item(Int32)\n- uid: System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)\n  commentId: P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: Item[Int32]\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 102\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets or sets the <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the specified index number.</p>\\n\"\n  syntax:\n    content: public virtual PropertyDescriptor this[int index] { get; }\n    content.vb: Public Overridable ReadOnly Property Item(index As Integer) As PropertyDescriptor\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to get or set. </p>\\n\"\n    return:\n      type: System.ComponentModel.PropertyDescriptor\n      description: \"\\n<p>The <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified index number.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The <em>index</em> parameter is not a valid index for <xref href=\\\"System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.ComponentModel.PropertyDescriptor\n    commentId: T:System.ComponentModel.PropertyDescriptor\n  - type: System.ComponentModel.TypeDescriptor\n    commentId: T:System.ComponentModel.TypeDescriptor\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  fullName.vb: System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)\n  name.vb: Item(Int32)\n  nameWithType: PropertyDescriptorCollection.Item[Int32]\n  nameWithType.vb: PropertyDescriptorCollection.Item(Int32)\n- uid: System.ComponentModel.PropertyDescriptorCollection.Item(System.String)\n  commentId: P:System.ComponentModel.PropertyDescriptorCollection.Item(System.String)\n  id: Item(System.String)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: Item[String]\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Item[System.String]\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 118\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets or sets the <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified name.</p>\\n\"\n  syntax:\n    content: public virtual PropertyDescriptor this[string name] { get; }\n    content.vb: Public Overridable ReadOnly Property Item(name As String) As PropertyDescriptor\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to get from the collection. </p>\\n\"\n    return:\n      type: System.ComponentModel.PropertyDescriptor\n      description: \"\\n<p>The <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified name, or <strong>null</strong> if the property does not exist.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.PropertyDescriptor\n    commentId: T:System.ComponentModel.PropertyDescriptor\n  - type: System.ComponentModel.TypeDescriptor\n    commentId: T:System.ComponentModel.TypeDescriptor\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  fullName.vb: System.ComponentModel.PropertyDescriptorCollection.Item(System.String)\n  name.vb: Item(String)\n  nameWithType: PropertyDescriptorCollection.Item[String]\n  nameWithType.vb: PropertyDescriptorCollection.Item(String)\n- uid: System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)\n  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)\n  id: Add(System.ComponentModel.PropertyDescriptor)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: Add(PropertyDescriptor)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 129\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Adds the specified <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the collection.</p>\\n\"\n  syntax:\n    content: public int Add(PropertyDescriptor value)\n    content.vb: Public Function Add(value As PropertyDescriptor) As Integer\n    parameters:\n    - id: value\n      type: System.ComponentModel.PropertyDescriptor\n      description: \"\\n<p>The <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to add to the collection. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that was added to the collection.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: PropertyDescriptorCollection.Add(PropertyDescriptor)\n- uid: System.ComponentModel.PropertyDescriptorCollection.Clear\n  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Clear\n  id: Clear\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: Clear()\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Clear()\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Clear\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 144\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Removes all <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects from the collection.</p>\\n\"\n  syntax:\n    content: public void Clear()\n    content.vb: Public Sub Clear\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.Clear\n  - System.Collections.IList.Clear\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: PropertyDescriptorCollection.Clear()\n- uid: System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)\n  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)\n  id: Contains(System.ComponentModel.PropertyDescriptor)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: Contains(PropertyDescriptor)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Contains\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 158\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns whether the collection contains the given <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool Contains(PropertyDescriptor value)\n    content.vb: Public Function Contains(value As PropertyDescriptor) As Boolean\n    parameters:\n    - id: value\n      type: System.ComponentModel.PropertyDescriptor\n      description: \"\\n<p>The <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to find in the collection. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the collection contains the given <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: PropertyDescriptorCollection.Contains(PropertyDescriptor)\n- uid: System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)\n  commentId: M:System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(Array, Int32)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CopyTo\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 166\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Copies the entire collection to an array, starting at the specified index number.</p>\\n\"\n  syntax:\n    content: public void CopyTo(Array array, int index)\n    content.vb: Public Sub CopyTo(array As Array, index As Integer)\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>An array of <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to copy elements of the collection to. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the <em>array</em> parameter at which copying begins. </p>\\n\"\n  implements:\n  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: PropertyDescriptorCollection.CopyTo(Array, Int32)\n- uid: System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)\n  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)\n  id: Find(System.String,System.Boolean)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: Find(String, Boolean)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Find(System.String, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Find\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 217\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns the <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified name, using a Boolean to indicate whether to ignore case.</p>\\n\"\n  syntax:\n    content: public virtual PropertyDescriptor Find(string name, bool ignoreCase)\n    content.vb: Public Overridable Function Find(name As String, ignoreCase As Boolean) As PropertyDescriptor\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return from the collection. </p>\\n\"\n    - id: ignoreCase\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if you want to ignore the case of the property name; otherwise, <strong>false</strong>. </p>\\n\"\n    return:\n      type: System.ComponentModel.PropertyDescriptor\n      description: \"\\n<p>A <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified name, or <strong>null</strong> if the property does not exist.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.PropertyDescriptor\n    commentId: T:System.ComponentModel.PropertyDescriptor\n  - type: System.ComponentModel.TypeDescriptor\n    commentId: T:System.ComponentModel.TypeDescriptor\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: PropertyDescriptorCollection.Find(String, Boolean)\n- uid: System.ComponentModel.PropertyDescriptorCollection.GetEnumerator\n  commentId: M:System.ComponentModel.PropertyDescriptorCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.ComponentModel.PropertyDescriptorCollection.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEnumerator\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 460\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns an enumerator for this class.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerator GetEnumerator()\n    content.vb: Public Overridable Function GetEnumerator As IEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An enumerator of type <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.PropertyDescriptor\n    commentId: T:System.ComponentModel.PropertyDescriptor\n  - type: System.ComponentModel.TypeDescriptor\n    commentId: T:System.ComponentModel.TypeDescriptor\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: PropertyDescriptorCollection.GetEnumerator()\n- uid: System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)\n  commentId: M:System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)\n  id: IndexOf(System.ComponentModel.PropertyDescriptor)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(PropertyDescriptor)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IndexOf\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 277\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns the index of the given <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public int IndexOf(PropertyDescriptor value)\n    content.vb: Public Function IndexOf(value As PropertyDescriptor) As Integer\n    parameters:\n    - id: value\n      type: System.ComponentModel.PropertyDescriptor\n      description: \"\\n<p>The <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return the index of. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the given <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: PropertyDescriptorCollection.IndexOf(PropertyDescriptor)\n- uid: System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)\n  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)\n  id: Insert(System.Int32,System.ComponentModel.PropertyDescriptor)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, PropertyDescriptor)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32, System.ComponentModel.PropertyDescriptor)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Insert\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 285\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Adds the <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the collection at the specified index number.</p>\\n\"\n  syntax:\n    content: public void Insert(int index, PropertyDescriptor value)\n    content.vb: Public Sub Insert(index As Integer, value As PropertyDescriptor)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index at which to add the <em>value</em> parameter to the collection. </p>\\n\"\n    - id: value\n      type: System.ComponentModel.PropertyDescriptor\n      description: \"\\n<p>The <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to add to the collection. </p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: PropertyDescriptorCollection.Insert(Int32, PropertyDescriptor)\n- uid: System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)\n  commentId: M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)\n  id: InternalSort(System.Collections.IComparer)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: InternalSort(IComparer)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InternalSort\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 443\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Sorts the members of this collection, using the specified <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected void InternalSort(IComparer sorter)\n    content.vb: Protected Sub InternalSort(sorter As IComparer)\n    parameters:\n    - id: sorter\n      type: System.Collections.IComparer\n      description: \"\\n<p>A comparer to use to sort the <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects in this collection. </p>\\n\"\n  seealso:\n  - type: System.Collections.IComparer\n    commentId: T:System.Collections.IComparer\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: PropertyDescriptorCollection.InternalSort(IComparer)\n- uid: System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])\n  commentId: M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])\n  id: InternalSort(System.String[])\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: InternalSort(String[])\n  fullName: System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InternalSort\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 388\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.</p>\\n\"\n  syntax:\n    content: protected void InternalSort(string[] names)\n    content.vb: Protected Sub InternalSort(names As String())\n    parameters:\n    - id: names\n      type: System.String[]\n      description: \"\\n<p>An array of strings describing the order in which to sort the <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects in this collection. </p>\\n\"\n  seealso:\n  - type: System.Collections.IComparer\n    commentId: T:System.Collections.IComparer\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  fullName.vb: System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String())\n  name.vb: InternalSort(String())\n  nameWithType: PropertyDescriptorCollection.InternalSort(String[])\n  nameWithType.vb: PropertyDescriptorCollection.InternalSort(String())\n- uid: System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)\n  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)\n  id: Remove(System.ComponentModel.PropertyDescriptor)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: Remove(PropertyDescriptor)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Remove\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 304\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Removes the specified <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from the collection.</p>\\n\"\n  syntax:\n    content: public void Remove(PropertyDescriptor value)\n    content.vb: Public Sub Remove(value As PropertyDescriptor)\n    parameters:\n    - id: value\n      type: System.ComponentModel.PropertyDescriptor\n      description: \"\\n<p>The <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to remove from the collection. </p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: PropertyDescriptorCollection.Remove(PropertyDescriptor)\n- uid: System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)\n  commentId: M:System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: RemoveAt(Int32)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveAt\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 322\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Removes the <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the specified index from the collection.</p>\\n\"\n  syntax:\n    content: public void RemoveAt(int index)\n    content.vb: Public Sub RemoveAt(index As Integer)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to remove from the collection. </p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only.</p>\\n\"\n  implements:\n  - System.Collections.IList.RemoveAt(System.Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: PropertyDescriptorCollection.RemoveAt(Int32)\n- uid: System.ComponentModel.PropertyDescriptorCollection.Sort\n  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Sort\n  id: Sort\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: Sort()\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Sort()\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sort\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 343\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Sorts the members of this collection, using the default sort for this collection, which is usually alphabetical.</p>\\n\"\n  syntax:\n    content: public virtual PropertyDescriptorCollection Sort()\n    content.vb: Public Overridable Function Sort As PropertyDescriptorCollection\n    return:\n      type: System.ComponentModel.PropertyDescriptorCollection\n      description: \"\\n<p>A new <xref href=\\\"System.ComponentModel.PropertyDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the sorted <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: PropertyDescriptorCollection.Sort()\n- uid: System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)\n  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)\n  id: Sort(System.Collections.IComparer)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: Sort(IComparer)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sort\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 377\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Sorts the members of this collection, using the specified <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual PropertyDescriptorCollection Sort(IComparer comparer)\n    content.vb: Public Overridable Function Sort(comparer As IComparer) As PropertyDescriptorCollection\n    parameters:\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"\\n<p>A comparer to use to sort the <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects in this collection. </p>\\n\"\n    return:\n      type: System.ComponentModel.PropertyDescriptorCollection\n      description: \"\\n<p>A new <xref href=\\\"System.ComponentModel.PropertyDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the sorted <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  seealso:\n  - type: System.Collections.IComparer\n    commentId: T:System.Collections.IComparer\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: PropertyDescriptorCollection.Sort(IComparer)\n- uid: System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])\n  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])\n  id: Sort(System.String[])\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: Sort(String[])\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sort\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 355\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.</p>\\n\"\n  syntax:\n    content: public virtual PropertyDescriptorCollection Sort(string[] names)\n    content.vb: Public Overridable Function Sort(names As String()) As PropertyDescriptorCollection\n    parameters:\n    - id: names\n      type: System.String[]\n      description: \"\\n<p>An array of strings describing the order in which to sort the <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects in this collection. </p>\\n\"\n    return:\n      type: System.ComponentModel.PropertyDescriptorCollection\n      description: \"\\n<p>A new <xref href=\\\"System.ComponentModel.PropertyDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the sorted <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  seealso:\n  - type: System.Collections.IComparer\n    commentId: T:System.Collections.IComparer\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.ComponentModel.PropertyDescriptorCollection.Sort(System.String())\n  name.vb: Sort(String())\n  nameWithType: PropertyDescriptorCollection.Sort(String[])\n  nameWithType.vb: PropertyDescriptorCollection.Sort(String())\n- uid: System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)\n  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)\n  id: Sort(System.String[],System.Collections.IComparer)\n  parent: System.ComponentModel.PropertyDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: Sort(String[], IComparer)\n  fullName: System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[], System.Collections.IComparer)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sort\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs\n    startLine: 366\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Sorts the members of this collection. The specified order is applied first, followed by the sort using the specified <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual PropertyDescriptorCollection Sort(string[] names, IComparer comparer)\n    content.vb: Public Overridable Function Sort(names As String(), comparer As IComparer) As PropertyDescriptorCollection\n    parameters:\n    - id: names\n      type: System.String[]\n      description: \"\\n<p>An array of strings describing the order in which to sort the <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects in this collection. </p>\\n\"\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"\\n<p>A comparer to use to sort the <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects in this collection. </p>\\n\"\n    return:\n      type: System.ComponentModel.PropertyDescriptorCollection\n      description: \"\\n<p>A new <xref href=\\\"System.ComponentModel.PropertyDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the sorted <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  seealso:\n  - type: System.Collections.IComparer\n    commentId: T:System.Collections.IComparer\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.ComponentModel.PropertyDescriptorCollection.Sort(System.String(), System.Collections.IComparer)\n  name.vb: Sort(String(), IComparer)\n  nameWithType: PropertyDescriptorCollection.Sort(String[], IComparer)\n  nameWithType.vb: PropertyDescriptorCollection.Sort(String(), IComparer)\nreferences:\n- uid: System.ComponentModel\n  isExternal: false\n  name: System.ComponentModel\n  fullName: System.ComponentModel\n  nameWithType: System.ComponentModel\n  commentId: N:System.ComponentModel\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: false\n  name: IDictionary\n  fullName: System.Collections.IDictionary\n  nameWithType: IDictionary\n  commentId: T:System.Collections.IDictionary\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: false\n  name: IList\n  fullName: System.Collections.IList\n  nameWithType: IList\n  commentId: T:System.Collections.IList\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  nameWithType: ICollection\n  commentId: T:System.Collections.ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable()\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel()\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  nameWithType: Queryable\n  commentId: T:System.Linq.Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  nameWithType: Enumerable\n  commentId: T:System.Linq.Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  nameWithType: System.Linq\n  commentId: N:System.Linq\n- uid: System.ComponentModel.PropertyDescriptorCollection\n  parent: System.ComponentModel\n  isExternal: false\n  name: PropertyDescriptorCollection\n  fullName: System.ComponentModel.PropertyDescriptorCollection\n  nameWithType: PropertyDescriptorCollection\n  commentId: T:System.ComponentModel.PropertyDescriptorCollection\n- uid: System.ComponentModel.PropertyDescriptor[]\n  name: PropertyDescriptor[]\n  fullName: System.ComponentModel.PropertyDescriptor[]\n  fullname.vb: System.ComponentModel.PropertyDescriptor()\n  name.vb: PropertyDescriptor()\n  spec.csharp:\n  - uid: System.ComponentModel.PropertyDescriptor\n    name: PropertyDescriptor\n    fullName: System.ComponentModel.PropertyDescriptor\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.ComponentModel.PropertyDescriptor\n    name: PropertyDescriptor\n    fullName: System.ComponentModel.PropertyDescriptor\n  - name: ()\n    fullName: ()\n  nameWithType: PropertyDescriptor[]\n  nameWithType.vb: PropertyDescriptor()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.ICollection.Count\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: Count\n  fullName: System.Collections.ICollection.Count\n  nameWithType: ICollection.Count\n  commentId: P:System.Collections.ICollection.Count\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Collections.ICollection.IsSynchronized\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Collections.ICollection.IsSynchronized\n  nameWithType: ICollection.IsSynchronized\n  commentId: P:System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.ICollection.SyncRoot\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Collections.ICollection.SyncRoot\n  nameWithType: ICollection.SyncRoot\n  commentId: P:System.Collections.ICollection.SyncRoot\n- uid: System.Collections.IDictionary.IsFixedSize\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: IsFixedSize\n  fullName: System.Collections.IDictionary.IsFixedSize\n  nameWithType: IDictionary.IsFixedSize\n  commentId: P:System.Collections.IDictionary.IsFixedSize\n- uid: System.Collections.IDictionary.Add(System.Object,System.Object)\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Add(Object, Object)\n  fullName: System.Collections.IDictionary.Add(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)\n    name: Add\n    fullName: System.Collections.IDictionary.Add\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)\n    name: Add\n    fullName: System.Collections.IDictionary.Add\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Add(Object, Object)\n  commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)\n- uid: System.Collections.IDictionary.Contains(System.Object)\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Contains(Object)\n  fullName: System.Collections.IDictionary.Contains(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IDictionary.Contains\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IDictionary.Contains\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Contains(Object)\n  commentId: M:System.Collections.IDictionary.Contains(System.Object)\n- uid: System.Collections.IDictionary.Item(System.Object)\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Item[Object]\n  fullName: System.Collections.IDictionary.Item[System.Object]\n  fullname.vb: System.Collections.IDictionary.Item(System.Object)\n  name.vb: Item(Object)\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Item(System.Object)\n    name: Item\n    fullName: System.Collections.IDictionary.Item\n    isExternal: true\n  - name: '['\n    fullName: '['\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.IDictionary.Item(System.Object)\n    name: Item\n    fullName: System.Collections.IDictionary.Item\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Item[Object]\n  nameWithType.vb: IDictionary.Item(Object)\n  commentId: P:System.Collections.IDictionary.Item(System.Object)\n- uid: System.Collections.IDictionary.Remove(System.Object)\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Remove(Object)\n  fullName: System.Collections.IDictionary.Remove(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IDictionary.Remove\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IDictionary.Remove\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Remove(Object)\n  commentId: M:System.Collections.IDictionary.Remove(System.Object)\n- uid: System.Collections.IDictionary.IsReadOnly\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: IsReadOnly\n  fullName: System.Collections.IDictionary.IsReadOnly\n  nameWithType: IDictionary.IsReadOnly\n  commentId: P:System.Collections.IDictionary.IsReadOnly\n- uid: System.Collections.IDictionary.GetEnumerator\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: GetEnumerator()\n  fullName: System.Collections.IDictionary.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IDictionary.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IDictionary.GetEnumerator\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IDictionary.GetEnumerator\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.GetEnumerator()\n  commentId: M:System.Collections.IDictionary.GetEnumerator\n- uid: System.Collections.IDictionaryEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IDictionaryEnumerator\n  fullName: System.Collections.IDictionaryEnumerator\n  nameWithType: IDictionaryEnumerator\n  commentId: T:System.Collections.IDictionaryEnumerator\n- uid: System.Collections.IDictionary.Keys\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Keys\n  fullName: System.Collections.IDictionary.Keys\n  nameWithType: IDictionary.Keys\n  commentId: P:System.Collections.IDictionary.Keys\n- uid: System.Collections.IDictionary.Values\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Values\n  fullName: System.Collections.IDictionary.Values\n  nameWithType: IDictionary.Values\n  commentId: P:System.Collections.IDictionary.Values\n- uid: System.Collections.IList.IsFixedSize\n  parent: System.Collections.IList\n  isExternal: false\n  name: IsFixedSize\n  fullName: System.Collections.IList.IsFixedSize\n  nameWithType: IList.IsFixedSize\n  commentId: P:System.Collections.IList.IsFixedSize\n- uid: System.Collections.IList.IsReadOnly\n  parent: System.Collections.IList\n  isExternal: false\n  name: IsReadOnly\n  fullName: System.Collections.IList.IsReadOnly\n  nameWithType: IList.IsReadOnly\n  commentId: P:System.Collections.IList.IsReadOnly\n- uid: System.Collections.IList.Add(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Add(Object)\n  fullName: System.Collections.IList.Add(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Add(System.Object)\n    name: Add\n    fullName: System.Collections.IList.Add\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Add(System.Object)\n    name: Add\n    fullName: System.Collections.IList.Add\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Add(Object)\n  commentId: M:System.Collections.IList.Add(System.Object)\n- uid: System.Collections.IList.Remove(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Remove(Object)\n  fullName: System.Collections.IList.Remove(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IList.Remove\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IList.Remove\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Remove(Object)\n  commentId: M:System.Collections.IList.Remove(System.Object)\n- uid: System.Collections.IList.Contains(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Contains(Object)\n  fullName: System.Collections.IList.Contains(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IList.Contains\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IList.Contains\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Contains(Object)\n  commentId: M:System.Collections.IList.Contains(System.Object)\n- uid: System.Collections.IList.IndexOf(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: IndexOf(Object)\n  fullName: System.Collections.IList.IndexOf(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.IndexOf(System.Object)\n    name: IndexOf\n    fullName: System.Collections.IList.IndexOf\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.IndexOf(System.Object)\n    name: IndexOf\n    fullName: System.Collections.IList.IndexOf\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.IndexOf(Object)\n  commentId: M:System.Collections.IList.IndexOf(System.Object)\n- uid: System.Collections.IList.Insert(System.Int32,System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Insert(Int32, Object)\n  fullName: System.Collections.IList.Insert(System.Int32, System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Insert(System.Int32,System.Object)\n    name: Insert\n    fullName: System.Collections.IList.Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Insert(System.Int32,System.Object)\n    name: Insert\n    fullName: System.Collections.IList.Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Insert(Int32, Object)\n  commentId: M:System.Collections.IList.Insert(System.Int32,System.Object)\n- uid: System.Collections.IList.Item(System.Int32)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Item[Int32]\n  fullName: System.Collections.IList.Item[System.Int32]\n  fullname.vb: System.Collections.IList.Item(System.Int32)\n  name.vb: Item(Int32)\n  spec.csharp:\n  - uid: System.Collections.IList.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.IList.Item\n  - name: '['\n    fullName: '['\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.IList.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.IList.Item\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Item[Int32]\n  nameWithType.vb: IList.Item(Int32)\n  commentId: P:System.Collections.IList.Item(System.Int32)\n- uid: System.ComponentModel.PropertyDescriptor\n  parent: System.ComponentModel\n  isExternal: false\n  name: PropertyDescriptor\n  fullName: System.ComponentModel.PropertyDescriptor\n  nameWithType: PropertyDescriptor\n  commentId: T:System.ComponentModel.PropertyDescriptor\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Collections.IDictionary.Clear\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Clear()\n  fullName: System.Collections.IDictionary.Clear()\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Clear\n    name: Clear\n    fullName: System.Collections.IDictionary.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.Clear\n    name: Clear\n    fullName: System.Collections.IDictionary.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Clear()\n  commentId: M:System.Collections.IDictionary.Clear\n- uid: System.Collections.IList.Clear\n  parent: System.Collections.IList\n  isExternal: false\n  name: Clear()\n  fullName: System.Collections.IList.Clear()\n  spec.csharp:\n  - uid: System.Collections.IList.Clear\n    name: Clear\n    fullName: System.Collections.IList.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Clear\n    name: Clear\n    fullName: System.Collections.IList.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IList.Clear()\n  commentId: M:System.Collections.IList.Clear\n- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ICollection\n  isExternal: true\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  spec.csharp:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection.CopyTo(Array, Int32)\n  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  nameWithType: Array\n  commentId: T:System.Array\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable.GetEnumerator()\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.Collections.IComparer\n  parent: System.Collections\n  isExternal: false\n  name: IComparer\n  fullName: System.Collections.IComparer\n  nameWithType: IComparer\n  commentId: T:System.Collections.IComparer\n- uid: System.String[]\n  name: String[]\n  fullName: System.String[]\n  fullname.vb: System.String()\n  name.vb: String()\n  spec.csharp:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: String[]\n  nameWithType.vb: String()\n- uid: System.Collections.IList.RemoveAt(System.Int32)\n  parent: System.Collections.IList\n  isExternal: true\n  name: RemoveAt(Int32)\n  fullName: System.Collections.IList.RemoveAt(System.Int32)\n  spec.csharp:\n  - uid: System.Collections.IList.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.IList.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.IList.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.RemoveAt(Int32)\n  commentId: M:System.Collections.IList.RemoveAt(System.Int32)\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.IndexOutOfRangeException\n  isExternal: false\n  name: IndexOutOfRangeException\n  fullName: System.IndexOutOfRangeException\n  nameWithType: IndexOutOfRangeException\n  commentId: T:System.IndexOutOfRangeException\n"}