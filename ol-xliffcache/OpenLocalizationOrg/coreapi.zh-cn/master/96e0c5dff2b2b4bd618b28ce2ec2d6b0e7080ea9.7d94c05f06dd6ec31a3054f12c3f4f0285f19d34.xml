{"nodes":[{"pos":[293,299],"content":"SHA256","needQuote":true,"nodes":[{"content":"SHA256","pos":[0,6]}]},{"pos":[3477,3485],"content":"SHA256()","needQuote":true,"nodes":[{"content":"SHA256()","pos":[0,8]}]},{"pos":[4517,4525],"content":"Create()","needQuote":true,"nodes":[{"content":"Create()","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The algorithm was used with Federal Information Processing Standards (FIPS) mode enabled, but is not FIPS compatible.&lt;/p&gt;\\n","pos":[5665,5793],"source":"\\n<p>The algorithm was used with Federal Information Processing Standards (FIPS) mode enabled, but is not FIPS compatible.</p>\\n"},{"pos":[5983,6011],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[6208,6214],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6410,6423],"content":"HashAlgorithm","needQuote":true,"nodes":[{"content":"HashAlgorithm","pos":[0,13]}]},{"pos":[6687,6703],"content":"ICryptoTransform","needQuote":true,"nodes":[{"content":"ICryptoTransform","pos":[0,16]}]},{"pos":[6927,6938],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[7176,7189],"content":"HashSizeValue","needQuote":true,"nodes":[{"content":"HashSizeValue","pos":[0,13]}]},{"pos":[7515,7524],"content":"HashValue","needQuote":true,"nodes":[{"content":"HashValue","pos":[0,9]}]},{"pos":[7834,7839],"content":"State","needQuote":true,"nodes":[{"content":"State","pos":[0,5]}]},{"pos":[8153,8167],"content":"Create(String)","needQuote":true,"nodes":[{"content":"Create(String)","pos":[0,14]}]},{"pos":[8344,8350],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[8446,8447],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8497,8503],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[8563,8564],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8676,8682],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[8778,8779],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8829,8835],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[8895,8896],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9198,9217],"content":"ComputeHash(Stream)","needQuote":true,"nodes":[{"content":"ComputeHash(Stream)","pos":[0,19]}]},{"pos":[9410,9421],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[9501,9502],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9555,9561],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[9624,9625],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9745,9756],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[9836,9837],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9890,9896],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[9959,9960],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10272,10291],"content":"ComputeHash(Byte[])","needQuote":true,"nodes":[{"content":"ComputeHash(Byte[])","pos":[0,19]}]},{"pos":[10594,10605],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[10685,10686],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10734,10738],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[10797,10799]},{"pos":[10830,10831],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10948,10959],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[11039,11040],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11088,11092],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[11150,11152],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[11180,11181],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11569,11602],"content":"ComputeHash(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ComputeHash(Byte[], Int32, Int32)","pos":[0,33]}]},{"pos":[12001,12012],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[12092,12093],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12141,12145],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[12204,12206]},{"content":",","pos":[12238,12239]},{"pos":[12293,12298],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[12358,12359]},{"pos":[12413,12418],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[12477,12478],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12621,12632],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[12712,12713],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12761,12765],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[12823,12825],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[12854,12855]},{"pos":[12909,12914],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[12974,12975]},{"pos":[13029,13034],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[13093,13094],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13566,13617],"content":"TransformBlock(Byte[], Int32, Int32, Byte[], Int32)","needQuote":true,"nodes":[{"content":"TransformBlock(Byte[], Int32, Int32, Byte[], Int32)","pos":[0,51]}]},{"pos":[14128,14142],"content":"TransformBlock","needQuote":true,"nodes":[{"content":"TransformBlock","pos":[0,14]}]},{"pos":[14246,14247],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14295,14299],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[14358,14360]},{"content":",","pos":[14392,14393]},{"pos":[14447,14452],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[14512,14513]},{"pos":[14567,14572],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[14632,14633]},{"pos":[14686,14690],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[14749,14751]},{"content":",","pos":[14783,14784]},{"pos":[14838,14843],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[14902,14903],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15076,15090],"content":"TransformBlock","needQuote":true,"nodes":[{"content":"TransformBlock","pos":[0,14]}]},{"pos":[15194,15195],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15243,15247],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[15305,15307],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[15336,15337]},{"pos":[15391,15396],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[15456,15457]},{"pos":[15511,15516],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[15576,15577]},{"pos":[15630,15634],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[15692,15694],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[15723,15724]},{"pos":[15778,15783],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[15842,15843],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16359,16400],"content":"TransformFinalBlock(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"TransformFinalBlock(Byte[], Int32, Int32)","pos":[0,41]}]},{"pos":[16831,16850],"content":"TransformFinalBlock","needQuote":true,"nodes":[{"content":"TransformFinalBlock","pos":[0,19]}]},{"pos":[16959,16960],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17008,17012],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[17071,17073]},{"content":",","pos":[17105,17106]},{"pos":[17160,17165],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[17225,17226]},{"pos":[17280,17285],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[17344,17345],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17496,17515],"content":"TransformFinalBlock","needQuote":true,"nodes":[{"content":"TransformFinalBlock","pos":[0,19]}]},{"pos":[17624,17625],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17673,17677],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[17735,17737],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[17766,17767]},{"pos":[17821,17826],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[17886,17887]},{"pos":[17941,17946],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[18005,18006],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18428,18437],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[18588,18595],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[18671,18672],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18699,18700],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18798,18805],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[18881,18882],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18909,18910],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19169,19176],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[19323,19328],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[19423,19424],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19451,19452],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19548,19553],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[19648,19649],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19676,19677],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19950,19966],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[20147,20154],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[20230,20231],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20282,20289],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[20350,20351],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20465,20472],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[20548,20549],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20600,20607],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[20668,20669],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20957,20969],"content":"Initialize()","needQuote":true,"nodes":[{"content":"Initialize()","pos":[0,12]}]},{"pos":[21126,21136],"content":"Initialize","needQuote":true,"nodes":[{"content":"Initialize","pos":[0,10]}]},{"pos":[21215,21216],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21243,21244],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21345,21355],"content":"Initialize","needQuote":true,"nodes":[{"content":"Initialize","pos":[0,10]}]},{"pos":[21434,21435],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21462,21463],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21772,21802],"content":"HashCore(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"HashCore(Byte[], Int32, Int32)","pos":[0,30]}]},{"pos":[22189,22197],"content":"HashCore","needQuote":true,"nodes":[{"content":"HashCore","pos":[0,8]}]},{"pos":[22274,22275],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22323,22327],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[22386,22388]},{"content":",","pos":[22420,22421]},{"pos":[22475,22480],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[22540,22541]},{"pos":[22595,22600],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[22659,22660],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22800,22808],"content":"HashCore","needQuote":true,"nodes":[{"content":"HashCore","pos":[0,8]}]},{"pos":[22885,22886],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22934,22938],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[22996,22998],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[23027,23028]},{"pos":[23082,23087],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[23147,23148]},{"pos":[23202,23207],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[23266,23267],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23658,23669],"content":"HashFinal()","needQuote":true,"nodes":[{"content":"HashFinal()","pos":[0,11]}]},{"pos":[23824,23833],"content":"HashFinal","needQuote":true,"nodes":[{"content":"HashFinal","pos":[0,9]}]},{"pos":[23911,23912],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23939,23940],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24040,24049],"content":"HashFinal","needQuote":true,"nodes":[{"content":"HashFinal","pos":[0,9]}]},{"pos":[24127,24128],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24155,24156],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24423,24431],"content":"HashSize","needQuote":true,"nodes":[{"content":"HashSize","pos":[0,8]}]},{"pos":[24737,24741],"content":"Hash","needQuote":true,"nodes":[{"content":"Hash","pos":[0,4]}]},{"pos":[25045,25059],"content":"InputBlockSize","needQuote":true,"nodes":[{"content":"InputBlockSize","pos":[0,14]}]},{"pos":[25394,25409],"content":"OutputBlockSize","needQuote":true,"nodes":[{"content":"OutputBlockSize","pos":[0,15]}]},{"pos":[25758,25784],"content":"CanTransformMultipleBlocks","needQuote":true,"nodes":[{"content":"CanTransformMultipleBlocks","pos":[0,26]}]},{"pos":[26157,26174],"content":"CanReuseTransform","needQuote":true,"nodes":[{"content":"CanReuseTransform","pos":[0,17]}]},{"pos":[26453,26463],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[26558,26566],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[26635,26636],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26663,26664],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26734,26742],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[26811,26812],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26839,26840],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27023,27037],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[27156,27162],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27229,27230],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27280,27286],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27346,27347],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27430,27436],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27503,27504],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27554,27560],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27620,27621],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27835,27857],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[28005,28011],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28078,28079],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28129,28135],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28196,28197]},{"pos":[28252,28258],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28318,28319],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28416,28422],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28489,28490],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28540,28546],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28607,28608]},{"pos":[28663,28669],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28729,28730],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28975,29006],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[29172,29187],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[29263,29264],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29314,29320],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29381,29382]},{"pos":[29437,29443],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29503,29504],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29610,29625],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[29701,29702],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29752,29758],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29819,29820]},{"pos":[29875,29881],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29941,29942],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30172,30185],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[30286,30297],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[30369,30370],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30397,30398],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30471,30482],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[30554,30555],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30582,30583],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30758,30767],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[30860,30867],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[30935,30936],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30963,30964],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31033,31040],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[31108,31109],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31136,31137],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31312,31329],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[31438,31453],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[31529,31530],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31557,31558],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31635,31650],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[31726,31727],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31754,31755],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31900,31906],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[32081,32087],"content":"SHA256","needQuote":true,"nodes":[{"content":"SHA256","pos":[0,6]}]},{"pos":[32289,32314],"content":"TargetInvocationException","needQuote":true,"nodes":[{"content":"TargetInvocationException","pos":[0,25]}]}],"content":"items:\n- uid: System.Security.Cryptography.SHA256\n  commentId: T:System.Security.Cryptography.SHA256\n  id: SHA256\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.SHA256.#ctor\n  - System.Security.Cryptography.SHA256.Create\n  langs:\n  - csharp\n  - vb\n  name: SHA256\n  fullName: System.Security.Cryptography.SHA256\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SHA256\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 281\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Computes the <xref href=\\\"System.Security.Cryptography.SHA256\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> hash for the input data. </p>\\n\"\n  syntax:\n    content: 'public abstract class SHA256 : HashAlgorithm, ICryptoTransform, IDisposable'\n    content.vb: >-\n      Public MustInherit Class SHA256\n          Inherits HashAlgorithm\n          Implements ICryptoTransform, IDisposable\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.HashAlgorithm\n  implements:\n  - System.Security.Cryptography.ICryptoTransform\n  - System.IDisposable\n  inheritedMembers:\n  - System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  - System.Security.Cryptography.HashAlgorithm.HashValue\n  - System.Security.Cryptography.HashAlgorithm.State\n  - System.Security.Cryptography.HashAlgorithm.Create(System.String)\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.Dispose\n  - System.Security.Cryptography.HashAlgorithm.Clear\n  - System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)\n  - System.Security.Cryptography.HashAlgorithm.Initialize\n  - System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.HashFinal\n  - System.Security.Cryptography.HashAlgorithm.HashSize\n  - System.Security.Cryptography.HashAlgorithm.Hash\n  - System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: SHA256\n- uid: System.Security.Cryptography.SHA256.#ctor\n  commentId: M:System.Security.Cryptography.SHA256.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.SHA256\n  langs:\n  - csharp\n  - vb\n  name: SHA256()\n  fullName: System.Security.Cryptography.SHA256.SHA256()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 283\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of <xref href=\\\"System.Security.Cryptography.SHA256\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected SHA256()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: SHA256.SHA256()\n- uid: System.Security.Cryptography.SHA256.Create\n  commentId: M:System.Security.Cryptography.SHA256.Create\n  id: Create\n  parent: System.Security.Cryptography.SHA256\n  langs:\n  - csharp\n  - vb\n  name: Create()\n  fullName: System.Security.Cryptography.SHA256.Create()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Create\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 284\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Creates an instance of the default implementation of <xref href=\\\"System.Security.Cryptography.SHA256\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static SHA256 Create()\n    content.vb: Public Shared Function Create As SHA256\n    return:\n      type: System.Security.Cryptography.SHA256\n      description: \"\\n<p>A new instance of <xref href=\\\"System.Security.Cryptography.SHA256\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: \"\\n<p>The algorithm was used with Federal Information Processing Standards (FIPS) mode enabled, but is not FIPS compatible.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SHA256.Create()\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.Cryptography.HashAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithm\n  fullName: System.Security.Cryptography.HashAlgorithm\n  commentId: T:System.Security.Cryptography.HashAlgorithm\n  nameWithType: HashAlgorithm\n- uid: System.Security.Cryptography.ICryptoTransform\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ICryptoTransform\n  fullName: System.Security.Cryptography.ICryptoTransform\n  commentId: T:System.Security.Cryptography.ICryptoTransform\n  nameWithType: ICryptoTransform\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: HashSizeValue\n  fullName: System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  commentId: F:System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  nameWithType: HashAlgorithm.HashSizeValue\n- uid: System.Security.Cryptography.HashAlgorithm.HashValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: HashValue\n  fullName: System.Security.Cryptography.HashAlgorithm.HashValue\n  commentId: F:System.Security.Cryptography.HashAlgorithm.HashValue\n  nameWithType: HashAlgorithm.HashValue\n- uid: System.Security.Cryptography.HashAlgorithm.State\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: State\n  fullName: System.Security.Cryptography.HashAlgorithm.State\n  commentId: F:System.Security.Cryptography.HashAlgorithm.State\n  nameWithType: HashAlgorithm.State\n- uid: System.Security.Cryptography.HashAlgorithm.Create(System.String)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: Create(String)\n  fullName: System.Security.Cryptography.HashAlgorithm.Create(System.String)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.Create(System.String)\n    name: Create\n    fullName: System.Security.Cryptography.HashAlgorithm.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.Create(System.String)\n    name: Create\n    fullName: System.Security.Cryptography.HashAlgorithm.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.Create(System.String)\n  nameWithType: HashAlgorithm.Create(String)\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: ComputeHash(Stream)\n  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  nameWithType: HashAlgorithm.ComputeHash(Stream)\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: ComputeHash(Byte[])\n  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  fullname.vb: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte())\n  name.vb: ComputeHash(Byte())\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  nameWithType: HashAlgorithm.ComputeHash(Byte[])\n  nameWithType.vb: HashAlgorithm.ComputeHash(Byte())\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: ComputeHash(Byte[], Int32, Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte(), System.Int32, System.Int32)\n  name.vb: ComputeHash(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  nameWithType: HashAlgorithm.ComputeHash(Byte[], Int32, Int32)\n  nameWithType.vb: HashAlgorithm.ComputeHash(Byte(), Int32, Int32)\n- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[], System.Int32, System.Int32, System.Byte[], System.Int32)\n  fullname.vb: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte(), System.Int32, System.Int32, System.Byte(), System.Int32)\n  name.vb: TransformBlock(Byte(), Int32, Int32, Byte(), Int32)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n    name: TransformBlock\n    fullName: System.Security.Cryptography.HashAlgorithm.TransformBlock\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n    name: TransformBlock\n    fullName: System.Security.Cryptography.HashAlgorithm.TransformBlock\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  nameWithType: HashAlgorithm.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  nameWithType.vb: HashAlgorithm.TransformBlock(Byte(), Int32, Int32, Byte(), Int32)\n- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: TransformFinalBlock(Byte[], Int32, Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte(), System.Int32, System.Int32)\n  name.vb: TransformFinalBlock(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n    name: TransformFinalBlock\n    fullName: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n    name: TransformFinalBlock\n    fullName: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  nameWithType: HashAlgorithm.TransformFinalBlock(Byte[], Int32, Int32)\n  nameWithType.vb: HashAlgorithm.TransformFinalBlock(Byte(), Int32, Int32)\n- uid: System.Security.Cryptography.HashAlgorithm.Dispose\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Dispose()\n  fullName: System.Security.Cryptography.HashAlgorithm.Dispose()\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.HashAlgorithm.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.HashAlgorithm.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.Dispose\n  nameWithType: HashAlgorithm.Dispose()\n- uid: System.Security.Cryptography.HashAlgorithm.Clear\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: Clear()\n  fullName: System.Security.Cryptography.HashAlgorithm.Clear()\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.Clear\n    name: Clear\n    fullName: System.Security.Cryptography.HashAlgorithm.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.Clear\n    name: Clear\n    fullName: System.Security.Cryptography.HashAlgorithm.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.Clear\n  nameWithType: HashAlgorithm.Clear()\n- uid: System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: Dispose(Boolean)\n  fullName: System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.HashAlgorithm.Dispose\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.HashAlgorithm.Dispose\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)\n  nameWithType: HashAlgorithm.Dispose(Boolean)\n- uid: System.Security.Cryptography.HashAlgorithm.Initialize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Initialize()\n  fullName: System.Security.Cryptography.HashAlgorithm.Initialize()\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.Initialize\n    name: Initialize\n    fullName: System.Security.Cryptography.HashAlgorithm.Initialize\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.Initialize\n    name: Initialize\n    fullName: System.Security.Cryptography.HashAlgorithm.Initialize\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.Initialize\n  nameWithType: HashAlgorithm.Initialize()\n- uid: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: HashCore(Byte[], Int32, Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte(), System.Int32, System.Int32)\n  name.vb: HashCore(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)\n    name: HashCore\n    fullName: System.Security.Cryptography.HashAlgorithm.HashCore\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)\n    name: HashCore\n    fullName: System.Security.Cryptography.HashAlgorithm.HashCore\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)\n  nameWithType: HashAlgorithm.HashCore(Byte[], Int32, Int32)\n  nameWithType.vb: HashAlgorithm.HashCore(Byte(), Int32, Int32)\n- uid: System.Security.Cryptography.HashAlgorithm.HashFinal\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashFinal()\n  fullName: System.Security.Cryptography.HashAlgorithm.HashFinal()\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.HashFinal\n    name: HashFinal\n    fullName: System.Security.Cryptography.HashAlgorithm.HashFinal\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.HashFinal\n    name: HashFinal\n    fullName: System.Security.Cryptography.HashAlgorithm.HashFinal\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.HashFinal\n  nameWithType: HashAlgorithm.HashFinal()\n- uid: System.Security.Cryptography.HashAlgorithm.HashSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashSize\n  fullName: System.Security.Cryptography.HashAlgorithm.HashSize\n  commentId: P:System.Security.Cryptography.HashAlgorithm.HashSize\n  nameWithType: HashAlgorithm.HashSize\n- uid: System.Security.Cryptography.HashAlgorithm.Hash\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: Hash\n  fullName: System.Security.Cryptography.HashAlgorithm.Hash\n  commentId: P:System.Security.Cryptography.HashAlgorithm.Hash\n  nameWithType: HashAlgorithm.Hash\n- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: InputBlockSize\n  fullName: System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  commentId: P:System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  nameWithType: HashAlgorithm.InputBlockSize\n- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: OutputBlockSize\n  fullName: System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  commentId: P:System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  nameWithType: HashAlgorithm.OutputBlockSize\n- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: CanTransformMultipleBlocks\n  fullName: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  commentId: P:System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  nameWithType: HashAlgorithm.CanTransformMultipleBlocks\n- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: CanReuseTransform\n  fullName: System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  commentId: P:System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  nameWithType: HashAlgorithm.CanReuseTransform\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.Cryptography.SHA256\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: SHA256\n  fullName: System.Security.Cryptography.SHA256\n  commentId: T:System.Security.Cryptography.SHA256\n  nameWithType: SHA256\n- uid: System.Reflection.TargetInvocationException\n  isExternal: false\n  name: TargetInvocationException\n  fullName: System.Reflection.TargetInvocationException\n  nameWithType: TargetInvocationException\n  commentId: T:System.Reflection.TargetInvocationException\n"}