{"nodes":[{"pos":[1272,1276],"content":"Size","needQuote":true,"nodes":[{"content":"Size","pos":[0,4]}]},{"pos":[2407,2412],"content":"Empty","needQuote":true,"nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[3939,3950],"content":"Size(Point)","needQuote":true,"nodes":[{"content":"Size(Point)","pos":[0,11]}]},{"pos":[5346,5364],"content":"Size(Int32, Int32)","needQuote":true,"nodes":[{"content":"Size(Int32, Int32)","pos":[0,18]}]},{"pos":[6729,6735],"content":"Height","needQuote":true,"nodes":[{"content":"Height","pos":[0,6]}]},{"pos":[7889,7896],"content":"IsEmpty","needQuote":true,"nodes":[{"content":"IsEmpty","pos":[0,7]}]},{"pos":[9123,9128],"content":"Width","needQuote":true,"nodes":[{"content":"Width","pos":[0,5]}]},{"pos":[10392,10407],"content":"Add(Size, Size)","needQuote":true,"nodes":[{"content":"Add(Size, Size)","pos":[0,15]}]},{"pos":[12375,12389],"content":"Ceiling(SizeF)","needQuote":true,"nodes":[{"content":"Ceiling(SizeF)","pos":[0,14]}]},{"pos":[14039,14053],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[15753,15766],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[17102,17122],"content":"Addition(Size, Size)","needQuote":true,"nodes":[{"content":"Addition(Size, Size)","pos":[0,20]}]},{"pos":[18981,19001],"content":"Equality(Size, Size)","needQuote":true,"nodes":[{"content":"Equality(Size, Size)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;sz1&lt;/em&gt; and &lt;em&gt;sz2&lt;/em&gt; have equal width and height; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[20239,20370],"source":"\\n<p>\\n<strong>true</strong> if <em>sz1</em> and <em>sz2</em> have equal width and height; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[20789,20812],"content":"Explicit(Size to Point)","needQuote":true,"nodes":[{"content":"Explicit(Size to Point)","pos":[0,23]}]},{"pos":[22641,22664],"content":"Implicit(Size to SizeF)","needQuote":true,"nodes":[{"content":"Implicit(Size to SizeF)","pos":[0,23]}]},{"pos":[24482,24504],"content":"Inequality(Size, Size)","needQuote":true,"nodes":[{"content":"Inequality(Size, Size)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;sz1&lt;/em&gt; and &lt;em&gt;sz2&lt;/em&gt; differ either in width or height; &lt;strong&gt;false&lt;/strong&gt; if &lt;em&gt;sz1&lt;/em&gt; and &lt;em&gt;sz2&lt;/em&gt; are equal.&lt;/p&gt;\\n","pos":[25750,25918],"source":"\\n<p>\\n<strong>true</strong> if <em>sz1</em> and <em>sz2</em> differ either in width or height; <strong>false</strong> if <em>sz1</em> and <em>sz2</em> are equal.</p>\\n"},{"pos":[26345,26368],"content":"Subtraction(Size, Size)","needQuote":true,"nodes":[{"content":"Subtraction(Size, Size)","pos":[0,23]}]},{"pos":[28255,28267],"content":"Round(SizeF)","needQuote":true,"nodes":[{"content":"Round(SizeF)","pos":[0,12]}]},{"pos":[29988,30008],"content":"Subtract(Size, Size)","needQuote":true,"nodes":[{"content":"Subtract(Size, Size)","pos":[0,20]}]},{"pos":[32018,32028],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[33273,33288],"content":"Truncate(SizeF)","needQuote":true,"nodes":[{"content":"Truncate(SizeF)","pos":[0,15]}]},{"pos":[34808,34822],"content":"System.Drawing","needQuote":true,"nodes":[{"content":"System.Drawing","pos":[0,14]}]},{"pos":[35019,35041],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[35189,35195],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[35262,35263],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35313,35319],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[35380,35381]},{"pos":[35436,35442],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[35502,35503],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35600,35606],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[35673,35674],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35724,35730],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[35791,35792]},{"pos":[35847,35853],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[35913,35914],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36159,36190],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[36356,36371],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[36447,36448],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36498,36504],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[36565,36566]},{"pos":[36621,36627],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[36687,36688],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36794,36809],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[36885,36886],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36936,36942],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[37003,37004]},{"pos":[37059,37065],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[37125,37126],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37352,37361],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[37454,37461],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[37529,37530],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37557,37558],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37627,37634],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[37702,37703],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37730,37731],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37884,37890],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[38011,38017],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[38162,38166],"content":"Size","needQuote":true,"nodes":[{"content":"Size","pos":[0,4]}]},{"pos":[38336,38341],"content":"Point","needQuote":true,"nodes":[{"content":"Point","pos":[0,5]}]},{"pos":[38498,38503],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[38646,38653],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[38816,38821],"content":"SizeF","needQuote":true,"nodes":[{"content":"SizeF","pos":[0,5]}]},{"pos":[39013,39027],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[39152,39158],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[39207,39208],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39258,39264],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[39324,39325],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39411,39417],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[39466,39467],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39517,39523],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[39583,39584],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39765,39774],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[39953,39966],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[40073,40084],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[40138,40139],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40166,40167],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40243,40254],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[40308,40309],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40336,40337],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40526,40536],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[40637,40645],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[40696,40697],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40724,40725],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40798,40806],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[40857,40858],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40885,40886],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41047,41053],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]}],"content":"items:\n- uid: System.Drawing.Size\n  commentId: T:System.Drawing.Size\n  id: Size\n  parent: System.Drawing\n  children:\n  - System.Drawing.Size.#ctor(System.Drawing.Point)\n  - System.Drawing.Size.#ctor(System.Int32,System.Int32)\n  - System.Drawing.Size.Add(System.Drawing.Size,System.Drawing.Size)\n  - System.Drawing.Size.Ceiling(System.Drawing.SizeF)\n  - System.Drawing.Size.Empty\n  - System.Drawing.Size.Equals(System.Object)\n  - System.Drawing.Size.GetHashCode\n  - System.Drawing.Size.Height\n  - System.Drawing.Size.IsEmpty\n  - System.Drawing.Size.op_Addition(System.Drawing.Size,System.Drawing.Size)\n  - System.Drawing.Size.op_Equality(System.Drawing.Size,System.Drawing.Size)\n  - System.Drawing.Size.op_Explicit(System.Drawing.Size)~System.Drawing.Point\n  - System.Drawing.Size.op_Implicit(System.Drawing.Size)~System.Drawing.SizeF\n  - System.Drawing.Size.op_Inequality(System.Drawing.Size,System.Drawing.Size)\n  - System.Drawing.Size.op_Subtraction(System.Drawing.Size,System.Drawing.Size)\n  - System.Drawing.Size.Round(System.Drawing.SizeF)\n  - System.Drawing.Size.Subtract(System.Drawing.Size,System.Drawing.Size)\n  - System.Drawing.Size.ToString\n  - System.Drawing.Size.Truncate(System.Drawing.SizeF)\n  - System.Drawing.Size.Width\n  langs:\n  - csharp\n  - vb\n  name: Size\n  fullName: System.Drawing.Size\n  type: Struct\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Size\n    path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n    startLine: 13\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Stores an ordered pair of integers, which specify a <xref href=\\\"System.Drawing.Size.Height\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Drawing.Size.Width\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public struct Size\n    content.vb: Public Structure Size\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: Size\n- uid: System.Drawing.Size.Empty\n  commentId: F:System.Drawing.Size.Empty\n  id: Empty\n  parent: System.Drawing.Size\n  langs:\n  - csharp\n  - vb\n  name: Empty\n  fullName: System.Drawing.Size.Empty\n  type: Field\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Empty\n    path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n    startLine: 18\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that has a <xref href=\\\"System.Drawing.Size.Height\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Drawing.Size.Width\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value of 0. </p>\\n\"\n  syntax:\n    content: public static readonly Size Empty\n    content.vb: Public Shared ReadOnly Empty As Size\n    return:\n      type: System.Drawing.Size\n      description: \"\\n<p>A <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has a <xref href=\\\"System.Drawing.Size.Height\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Drawing.Size.Width\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value of 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Size.Empty\n- uid: System.Drawing.Size.#ctor(System.Drawing.Point)\n  commentId: M:System.Drawing.Size.#ctor(System.Drawing.Point)\n  id: '#ctor(System.Drawing.Point)'\n  parent: System.Drawing.Size\n  langs:\n  - csharp\n  - vb\n  name: Size(Point)\n  fullName: System.Drawing.Size.Size(System.Drawing.Point)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n    startLine: 32\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure from the specified <xref href=\\\"System.Drawing.Point\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public Size(Point pt)\n    content.vb: Public Sub New(pt As Point)\n    parameters:\n    - id: pt\n      type: System.Drawing.Point\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.Point\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure from which to initialize this <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Size.Size(Point)\n- uid: System.Drawing.Size.#ctor(System.Int32,System.Int32)\n  commentId: M:System.Drawing.Size.#ctor(System.Int32,System.Int32)\n  id: '#ctor(System.Int32,System.Int32)'\n  parent: System.Drawing.Size\n  langs:\n  - csharp\n  - vb\n  name: Size(Int32, Int32)\n  fullName: System.Drawing.Size.Size(System.Int32, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n    startLine: 45\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure from the specified dimensions.</p>\\n\"\n  syntax:\n    content: public Size(int width, int height)\n    content.vb: Public Sub New(width As Integer, height As Integer)\n    parameters:\n    - id: width\n      type: System.Int32\n      description: \"\\n<p>The width component of the new <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: height\n      type: System.Int32\n      description: \"\\n<p>The height component of the new <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Size.Size(Int32, Int32)\n- uid: System.Drawing.Size.Height\n  commentId: P:System.Drawing.Size.Height\n  id: Height\n  parent: System.Drawing.Size\n  langs:\n  - csharp\n  - vb\n  name: Height\n  fullName: System.Drawing.Size.Height\n  type: Property\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Height\n    path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n    startLine: 148\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Gets or sets the vertical component of this <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public int Height { get; set; }\n    content.vb: Public Property Height As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The vertical component of this <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure, typically measured in pixels.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: Size.Height\n- uid: System.Drawing.Size.IsEmpty\n  commentId: P:System.Drawing.Size.IsEmpty\n  id: IsEmpty\n  parent: System.Drawing.Size\n  langs:\n  - csharp\n  - vb\n  name: IsEmpty\n  fullName: System.Drawing.Size.IsEmpty\n  type: Property\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsEmpty\n    path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n    startLine: 112\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Tests whether this <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure has width and height of 0.</p>\\n\"\n  syntax:\n    content: public bool IsEmpty { get; }\n    content.vb: Public ReadOnly Property IsEmpty As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>This property returns <strong>true</strong> when this <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure has both a width and height of 0; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Size.IsEmpty\n- uid: System.Drawing.Size.Width\n  commentId: P:System.Drawing.Size.Width\n  id: Width\n  parent: System.Drawing.Size\n  langs:\n  - csharp\n  - vb\n  name: Width\n  fullName: System.Drawing.Size.Width\n  type: Property\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Width\n    path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n    startLine: 129\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Gets or sets the horizontal component of this <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public int Width { get; set; }\n    content.vb: Public Property Width As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The horizontal component of this <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure, typically measured in pixels.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: Size.Width\n- uid: System.Drawing.Size.Add(System.Drawing.Size,System.Drawing.Size)\n  commentId: M:System.Drawing.Size.Add(System.Drawing.Size,System.Drawing.Size)\n  id: Add(System.Drawing.Size,System.Drawing.Size)\n  parent: System.Drawing.Size\n  langs:\n  - csharp\n  - vb\n  name: Add(Size, Size)\n  fullName: System.Drawing.Size.Add(System.Drawing.Size, System.Drawing.Size)\n  type: Method\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n    startLine: 165\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Adds the width and height of one <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to the width and height of another <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static Size Add(Size sz1, Size sz2)\n    content.vb: Public Shared Function Add(sz1 As Size, sz2 As Size) As Size\n    parameters:\n    - id: sz1\n      type: System.Drawing.Size\n      description: \"\\n<p>The first <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to add.</p>\\n\"\n    - id: sz2\n      type: System.Drawing.Size\n      description: \"\\n<p>The second <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to add.</p>\\n\"\n    return:\n      type: System.Drawing.Size\n      description: \"\\n<p>A <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that is the result of the addition operation.</p>\\n\"\n  seealso:\n  - type: System.Drawing.Size.op_Addition(System.Drawing.Size,System.Drawing.Size)\n    commentId: M:System.Drawing.Size.op_Addition(System.Drawing.Size,System.Drawing.Size)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Size.Add(Size, Size)\n- uid: System.Drawing.Size.Ceiling(System.Drawing.SizeF)\n  commentId: M:System.Drawing.Size.Ceiling(System.Drawing.SizeF)\n  id: Ceiling(System.Drawing.SizeF)\n  parent: System.Drawing.Size\n  langs:\n  - csharp\n  - vb\n  name: Ceiling(SizeF)\n  fullName: System.Drawing.Size.Ceiling(System.Drawing.SizeF)\n  type: Method\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Ceiling\n    path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n    startLine: 174\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Converts the specified <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to a <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure by rounding the values of the <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to the next higher integer values.</p>\\n\"\n  syntax:\n    content: public static Size Ceiling(SizeF value)\n    content.vb: Public Shared Function Ceiling(value As SizeF) As Size\n    parameters:\n    - id: value\n      type: System.Drawing.SizeF\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to convert. </p>\\n\"\n    return:\n      type: System.Drawing.Size\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure this method converts to.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Size.Ceiling(SizeF)\n- uid: System.Drawing.Size.Equals(System.Object)\n  commentId: M:System.Drawing.Size.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Drawing.Size\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Drawing.Size.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n    startLine: 214\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Tests to see whether the specified object is a <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure with the same dimensions as this <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to test. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>obj</em> is a <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and has the same width and height as this <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Size.Equals(Object)\n- uid: System.Drawing.Size.GetHashCode\n  commentId: M:System.Drawing.Size.GetHashCode\n  id: GetHashCode\n  parent: System.Drawing.Size\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Drawing.Size.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n    startLine: 228\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Returns a hash code for this <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer value that specifies a hash value for this <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Size.GetHashCode()\n- uid: System.Drawing.Size.op_Addition(System.Drawing.Size,System.Drawing.Size)\n  commentId: M:System.Drawing.Size.op_Addition(System.Drawing.Size,System.Drawing.Size)\n  id: op_Addition(System.Drawing.Size,System.Drawing.Size)\n  parent: System.Drawing.Size\n  langs:\n  - csharp\n  - vb\n  name: Addition(Size, Size)\n  fullName: System.Drawing.Size.Addition(System.Drawing.Size, System.Drawing.Size)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Addition\n    path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n    startLine: 65\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Adds the width and height of one <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to the width and height of another <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static Size operator +(Size sz1, Size sz2)\n    content.vb: Public Shared Operator +(sz1 As Size, sz2 As Size) As Size\n    parameters:\n    - id: sz1\n      type: System.Drawing.Size\n      description: \"\\n<p>The first <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to add. </p>\\n\"\n    - id: sz2\n      type: System.Drawing.Size\n      description: \"\\n<p>The second <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to add. </p>\\n\"\n    return:\n      type: System.Drawing.Size\n      description: \"\\n<p>A <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that is the result of the addition operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Size.Addition(Size, Size)\n- uid: System.Drawing.Size.op_Equality(System.Drawing.Size,System.Drawing.Size)\n  commentId: M:System.Drawing.Size.op_Equality(System.Drawing.Size,System.Drawing.Size)\n  id: op_Equality(System.Drawing.Size,System.Drawing.Size)\n  parent: System.Drawing.Size\n  langs:\n  - csharp\n  - vb\n  name: Equality(Size, Size)\n  fullName: System.Drawing.Size.Equality(System.Drawing.Size, System.Drawing.Size)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n    startLine: 84\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Tests whether two <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures are equal.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(Size sz1, Size sz2)\n    content.vb: Public Shared Operator =(sz1 As Size, sz2 As Size) As Boolean\n    parameters:\n    - id: sz1\n      type: System.Drawing.Size\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure on the left side of the equality operator. </p>\\n\"\n    - id: sz2\n      type: System.Drawing.Size\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure on the right of the equality operator. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>sz1</em> and <em>sz2</em> have equal width and height; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Size.Equality(Size, Size)\n- uid: System.Drawing.Size.op_Explicit(System.Drawing.Size)~System.Drawing.Point\n  commentId: M:System.Drawing.Size.op_Explicit(System.Drawing.Size)~System.Drawing.Point\n  id: op_Explicit(System.Drawing.Size)~System.Drawing.Point\n  parent: System.Drawing.Size\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Size to Point)\n  fullName: System.Drawing.Size.Explicit(System.Drawing.Size to System.Drawing.Point)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n    startLine: 103\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Converts the specified <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to a <xref href=\\\"System.Drawing.Point\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static explicit operator Point(Size size)\n    content.vb: Public Shared Narrowing Operator CType(size As Size) As Point\n    parameters:\n    - id: size\n      type: System.Drawing.Size\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to convert. </p>\\n\"\n    return:\n      type: System.Drawing.Point\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.Point\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to which this operator converts.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Drawing.Size.Narrowing(System.Drawing.Size to System.Drawing.Point)\n  name.vb: Narrowing(Size to Point)\n  nameWithType: Size.Explicit(Size to Point)\n  nameWithType.vb: Size.Narrowing(Size to Point)\n- uid: System.Drawing.Size.op_Implicit(System.Drawing.Size)~System.Drawing.SizeF\n  commentId: M:System.Drawing.Size.op_Implicit(System.Drawing.Size)~System.Drawing.SizeF\n  id: op_Implicit(System.Drawing.Size)~System.Drawing.SizeF\n  parent: System.Drawing.Size\n  langs:\n  - csharp\n  - vb\n  name: Implicit(Size to SizeF)\n  fullName: System.Drawing.Size.Implicit(System.Drawing.Size to System.Drawing.SizeF)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n    startLine: 55\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Converts the specified <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to a <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static implicit operator SizeF(Size p)\n    content.vb: Public Shared Widening Operator CType(p As Size) As SizeF\n    parameters:\n    - id: p\n      type: System.Drawing.Size\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to convert. </p>\\n\"\n    return:\n      type: System.Drawing.SizeF\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to which this operator converts.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Drawing.Size.Widening(System.Drawing.Size to System.Drawing.SizeF)\n  name.vb: Widening(Size to SizeF)\n  nameWithType: Size.Implicit(Size to SizeF)\n  nameWithType.vb: Size.Widening(Size to SizeF)\n- uid: System.Drawing.Size.op_Inequality(System.Drawing.Size,System.Drawing.Size)\n  commentId: M:System.Drawing.Size.op_Inequality(System.Drawing.Size,System.Drawing.Size)\n  id: op_Inequality(System.Drawing.Size,System.Drawing.Size)\n  parent: System.Drawing.Size\n  langs:\n  - csharp\n  - vb\n  name: Inequality(Size, Size)\n  fullName: System.Drawing.Size.Inequality(System.Drawing.Size, System.Drawing.Size)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n    startLine: 94\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Tests whether two <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures are different.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(Size sz1, Size sz2)\n    content.vb: Public Shared Operator <>(sz1 As Size, sz2 As Size) As Boolean\n    parameters:\n    - id: sz1\n      type: System.Drawing.Size\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure on the left of the inequality operator. </p>\\n\"\n    - id: sz2\n      type: System.Drawing.Size\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure on the right of the inequality operator. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>sz1</em> and <em>sz2</em> differ either in width or height; <strong>false</strong> if <em>sz1</em> and <em>sz2</em> are equal.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Size.Inequality(Size, Size)\n- uid: System.Drawing.Size.op_Subtraction(System.Drawing.Size,System.Drawing.Size)\n  commentId: M:System.Drawing.Size.op_Subtraction(System.Drawing.Size,System.Drawing.Size)\n  id: op_Subtraction(System.Drawing.Size,System.Drawing.Size)\n  parent: System.Drawing.Size\n  langs:\n  - csharp\n  - vb\n  name: Subtraction(Size, Size)\n  fullName: System.Drawing.Size.Subtraction(System.Drawing.Size, System.Drawing.Size)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Subtraction\n    path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n    startLine: 75\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Subtracts the width and height of one <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure from the width and height of another <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static Size operator -(Size sz1, Size sz2)\n    content.vb: Public Shared Operator -(sz1 As Size, sz2 As Size) As Size\n    parameters:\n    - id: sz1\n      type: System.Drawing.Size\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure on the left side of the subtraction operator. </p>\\n\"\n    - id: sz2\n      type: System.Drawing.Size\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure on the right side of the subtraction operator. </p>\\n\"\n    return:\n      type: System.Drawing.Size\n      description: \"\\n<p>A <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that is the result of the subtraction operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Size.Subtraction(Size, Size)\n- uid: System.Drawing.Size.Round(System.Drawing.SizeF)\n  commentId: M:System.Drawing.Size.Round(System.Drawing.SizeF)\n  id: Round(System.Drawing.SizeF)\n  parent: System.Drawing.Size\n  langs:\n  - csharp\n  - vb\n  name: Round(SizeF)\n  fullName: System.Drawing.Size.Round(System.Drawing.SizeF)\n  type: Method\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Round\n    path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n    startLine: 202\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Converts the specified <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to a <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure by rounding the values of the <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to the nearest integer values.</p>\\n\"\n  syntax:\n    content: public static Size Round(SizeF value)\n    content.vb: Public Shared Function Round(value As SizeF) As Size\n    parameters:\n    - id: value\n      type: System.Drawing.SizeF\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to convert. </p>\\n\"\n    return:\n      type: System.Drawing.Size\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure this method converts to.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Size.Round(SizeF)\n- uid: System.Drawing.Size.Subtract(System.Drawing.Size,System.Drawing.Size)\n  commentId: M:System.Drawing.Size.Subtract(System.Drawing.Size,System.Drawing.Size)\n  id: Subtract(System.Drawing.Size,System.Drawing.Size)\n  parent: System.Drawing.Size\n  langs:\n  - csharp\n  - vb\n  name: Subtract(Size, Size)\n  fullName: System.Drawing.Size.Subtract(System.Drawing.Size, System.Drawing.Size)\n  type: Method\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Subtract\n    path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n    startLine: 184\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Subtracts the width and height of one <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure from the width and height of another <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static Size Subtract(Size sz1, Size sz2)\n    content.vb: Public Shared Function Subtract(sz1 As Size, sz2 As Size) As Size\n    parameters:\n    - id: sz1\n      type: System.Drawing.Size\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure on the left side of the subtraction operator. </p>\\n\"\n    - id: sz2\n      type: System.Drawing.Size\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure on the right side of the subtraction operator. </p>\\n\"\n    return:\n      type: System.Drawing.Size\n      description: \"\\n<p>A <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that is a result of the subtraction operation.</p>\\n\"\n  seealso:\n  - type: System.Drawing.Size.op_Subtraction(System.Drawing.Size,System.Drawing.Size)\n    commentId: M:System.Drawing.Size.op_Subtraction(System.Drawing.Size,System.Drawing.Size)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Size.Subtract(Size, Size)\n- uid: System.Drawing.Size.ToString\n  commentId: M:System.Drawing.Size.ToString\n  id: ToString\n  parent: System.Drawing.Size\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Drawing.Size.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n    startLine: 239\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Creates a human-readable string that represents this <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string that represents this <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.ValueType.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Size.ToString()\n- uid: System.Drawing.Size.Truncate(System.Drawing.SizeF)\n  commentId: M:System.Drawing.Size.Truncate(System.Drawing.SizeF)\n  id: Truncate(System.Drawing.SizeF)\n  parent: System.Drawing.Size\n  langs:\n  - csharp\n  - vb\n  name: Truncate(SizeF)\n  fullName: System.Drawing.Size.Truncate(System.Drawing.SizeF)\n  type: Method\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Truncate\n    path: src/System.Drawing.Primitives/src/System/Drawing/Size.cs\n    startLine: 193\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Converts the specified <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to a <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure by truncating the values of the <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to the next lower integer values.</p>\\n\"\n  syntax:\n    content: public static Size Truncate(SizeF value)\n    content.vb: Public Shared Function Truncate(value As SizeF) As Size\n    parameters:\n    - id: value\n      type: System.Drawing.SizeF\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to convert. </p>\\n\"\n    return:\n      type: System.Drawing.Size\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure this method converts to.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Size.Truncate(SizeF)\nreferences:\n- uid: System.Drawing\n  isExternal: false\n  name: System.Drawing\n  fullName: System.Drawing\n  nameWithType: System.Drawing\n  commentId: N:System.Drawing\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Drawing.Size\n  parent: System.Drawing\n  isExternal: false\n  name: Size\n  fullName: System.Drawing.Size\n  nameWithType: Size\n  commentId: T:System.Drawing.Size\n- uid: System.Drawing.Point\n  parent: System.Drawing\n  isExternal: false\n  name: Point\n  fullName: System.Drawing.Point\n  nameWithType: Point\n  commentId: T:System.Drawing.Point\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Drawing.SizeF\n  parent: System.Drawing\n  isExternal: false\n  name: SizeF\n  fullName: System.Drawing.SizeF\n  nameWithType: SizeF\n  commentId: T:System.Drawing.SizeF\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n"}