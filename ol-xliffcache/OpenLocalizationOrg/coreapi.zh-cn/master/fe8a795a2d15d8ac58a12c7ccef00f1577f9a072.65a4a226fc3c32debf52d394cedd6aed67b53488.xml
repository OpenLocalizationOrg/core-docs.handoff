{"nodes":[{"pos":[803,809],"content":"Thread","needQuote":true,"nodes":[{"content":"Thread","pos":[0,6]}]},{"pos":[2704,2736],"content":"Thread(ParameterizedThreadStart)","needQuote":true,"nodes":[{"content":"Thread(ParameterizedThreadStart)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;A delegate that represents the methods to be invoked when this thread begins executing.","pos":[3718,3810],"source":"\\n<p>A delegate that represents the methods to be invoked when this thread begins executing."},{"content":"&lt;/p&gt;\\n","pos":[3811,3817],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;start&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[3936,3983],"source":"\\n<p>\\n<em>start</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[3984,3990],"source":" </p>\\n"},{"pos":[4631,4650],"content":"Thread(ThreadStart)","needQuote":true,"nodes":[{"content":"Thread(ThreadStart)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;start&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[5788,5847],"source":"\\n<p>The <em>start</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[5848,5854],"source":" </p>\\n"},{"pos":[6327,6340],"content":"CurrentThread","needQuote":true,"nodes":[{"content":"CurrentThread","pos":[0,13]}]},{"pos":[7617,7624],"content":"IsAlive","needQuote":true,"nodes":[{"content":"IsAlive","pos":[0,7]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this thread has been started and has not terminated normally or aborted; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8224,8369],"source":"\\n<p>\\n<strong>true</strong> if this thread has been started and has not terminated normally or aborted; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[8665,8677],"content":"IsBackground","needQuote":true,"nodes":[{"content":"IsBackground","pos":[0,12]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this thread is or is to become a background thread; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9525,9649],"source":"\\n<p>\\n<strong>true</strong> if this thread is or is to become a background thread; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The thread is dead.","pos":[9786,9810],"source":"\\n<p>The thread is dead."},{"content":"&lt;/p&gt;\\n","pos":[9811,9817],"source":" </p>\\n"},{"pos":[10122,10137],"content":"ManagedThreadId","needQuote":true,"nodes":[{"content":"ManagedThreadId","pos":[0,15]}]},{"content":"\\n&lt;p&gt;An integer that represents a unique identifier for this managed thread.&lt;/p&gt;\\n","pos":[10826,10908],"source":"\\n<p>An integer that represents a unique identifier for this managed thread.</p>\\n"},{"pos":[11188,11192],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"content":"\\n&lt;p&gt;A string containing the name of the thread, or &lt;strong&gt;null&lt;/strong&gt; if no name was set.&lt;/p&gt;\\n","pos":[11928,12027],"source":"\\n<p>A string containing the name of the thread, or <strong>null</strong> if no name was set.</p>\\n"},{"content":"\\n&lt;p&gt;A set operation was requested, but the &lt;strong&gt;Name&lt;/strong&gt; property has already been set.","pos":[12154,12250],"source":"\\n<p>A set operation was requested, but the <strong>Name</strong> property has already been set."},{"content":"&lt;/p&gt;\\n","pos":[12251,12257],"source":" </p>\\n"},{"pos":[12542,12553],"content":"ThreadState","needQuote":true,"nodes":[{"content":"ThreadState","pos":[0,11]}]},{"pos":[13789,13795],"content":"Join()","needQuote":true,"nodes":[{"content":"Join()","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The thread is interrupted while waiting.","pos":[15090,15135],"source":"\\n<p>The thread is interrupted while waiting."},{"content":"&lt;/p&gt;\\n","pos":[15136,15142],"source":" </p>\\n"},{"pos":[15434,15445],"content":"Join(Int32)","needQuote":true,"nodes":[{"content":"Join(Int32)","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The number of milliseconds to wait for the thread to terminate.","pos":[16487,16555],"source":"\\n<p>The number of milliseconds to wait for the thread to terminate."},{"content":"&lt;/p&gt;\\n","pos":[16556,16562],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the thread has terminated; &lt;strong&gt;false&lt;/strong&gt; if the thread has not terminated after the amount of time specified by the &lt;em&gt;millisecondsTimeout&lt;/em&gt; parameter has elapsed.&lt;/p&gt;\\n","pos":[16623,16837],"source":"\\n<p>\\n<strong>true</strong> if the thread has terminated; <strong>false</strong> if the thread has not terminated after the amount of time specified by the <em>millisecondsTimeout</em> parameter has elapsed.</p>\\n"},{"content":"\\n&lt;p&gt;The thread has not been started.","pos":[17287,17324],"source":"\\n<p>The thread has not been started."},{"content":"&lt;/p&gt;\\n","pos":[17325,17331],"source":" </p>\\n"},{"pos":[17631,17643],"content":"Sleep(Int32)","needQuote":true,"nodes":[{"content":"Sleep(Int32)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The number of milliseconds for which the thread is suspended.","pos":[18431,18497],"source":"\\n<p>The number of milliseconds for which the thread is suspended."},{"content":"If the value of the &lt;em&gt;millisecondsTimeout&lt;/em&gt; argument is zero, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run.","pos":[18498,18674],"source":" If the value of the <em>millisecondsTimeout</em> argument is zero, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run."},{"content":"If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended.","pos":[18675,18795]},{"content":"&lt;/p&gt;\\n","pos":[18796,18802],"source":" </p>\\n"},{"pos":[19422,19437],"content":"Sleep(TimeSpan)","needQuote":true,"nodes":[{"content":"Sleep(TimeSpan)","pos":[0,15]}]},{"pos":[21268,21275],"content":"Start()","needQuote":true,"nodes":[{"content":"Start()","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The thread has already been started.","pos":[22315,22356],"source":"\\n<p>The thread has already been started."},{"content":"&lt;/p&gt;\\n","pos":[22357,22363],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;There is not enough memory available to start this thread.","pos":[22466,22529],"source":"\\n<p>There is not enough memory available to start this thread."},{"content":"&lt;/p&gt;\\n","pos":[22530,22536],"source":" </p>\\n"},{"pos":[22835,22848],"content":"Start(Object)","needQuote":true,"nodes":[{"content":"Start(Object)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;An object that contains data to be used by the method the thread executes.&lt;/p&gt;\\n","pos":[23981,24066],"source":"\\n<p>An object that contains data to be used by the method the thread executes.</p>\\n"},{"content":"\\n&lt;p&gt;The thread has already been started.","pos":[24203,24244],"source":"\\n<p>The thread has already been started."},{"content":"&lt;/p&gt;\\n","pos":[24245,24251],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;There is not enough memory available to start this thread.","pos":[24354,24417],"source":"\\n<p>There is not enough memory available to start this thread."},{"content":"&lt;/p&gt;\\n","pos":[24418,24424],"source":" </p>\\n"},{"pos":[25146,25162],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[25323,25329],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25489,25499],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[25594,25602],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[25671,25672],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25699,25700],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25770,25778],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[25847,25848],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25875,25876],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26059,26073],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[26192,26198],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26265,26266],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26316,26322],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26382,26383],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26466,26472],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26539,26540],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26590,26596],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26656,26657],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26871,26893],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[27041,27047],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27114,27115],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27165,27171],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27232,27233]},{"pos":[27288,27294],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27354,27355],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27452,27458],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27525,27526],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27576,27582],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27643,27644]},{"pos":[27699,27705],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27765,27766],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28011,28042],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[28208,28223],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[28299,28300],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28350,28356],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28417,28418]},{"pos":[28473,28479],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28539,28540],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28646,28661],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[28737,28738],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28788,28794],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28855,28856]},{"pos":[28911,28917],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28977,28978],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29208,29221],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[29322,29333],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[29405,29406],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29433,29434],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29507,29518],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[29590,29591],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29618,29619],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29794,29803],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[29896,29903],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[29971,29972],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29999,30000],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30069,30076],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[30144,30145],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30172,30173],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30348,30365],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[30474,30489],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[30565,30566],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30593,30594],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30671,30686],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[30762,30763],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30790,30791],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30936,30942],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[31111,31135],"content":"ParameterizedThreadStart","needQuote":true,"nodes":[{"content":"ParameterizedThreadStart","pos":[0,24]}]},{"pos":[31379,31390],"content":"ThreadStart","needQuote":true,"nodes":[{"content":"ThreadStart","pos":[0,11]}]},{"pos":[31590,31596],"content":"Thread","needQuote":true,"nodes":[{"content":"Thread","pos":[0,6]}]},{"pos":[31762,31769],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[31916,31921],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[32063,32069],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[32239,32250],"content":"ThreadState","needQuote":true,"nodes":[{"content":"ThreadState","pos":[0,11]}]},{"pos":[32432,32440],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[32589,32610],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[32807,32827],"content":"ThreadStateException","needQuote":true,"nodes":[{"content":"ThreadStateException","pos":[0,20]}]},{"pos":[33053,33078],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[33335,33362],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[33567,33587],"content":"OutOfMemoryException","needQuote":true,"nodes":[{"content":"OutOfMemoryException","pos":[0,20]}]}],"content":"items:\n- uid: System.Threading.Thread\n  commentId: T:System.Threading.Thread\n  id: Thread\n  parent: System.Threading\n  children:\n  - System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)\n  - System.Threading.Thread.#ctor(System.Threading.ThreadStart)\n  - System.Threading.Thread.CurrentThread\n  - System.Threading.Thread.IsAlive\n  - System.Threading.Thread.IsBackground\n  - System.Threading.Thread.Join\n  - System.Threading.Thread.Join(System.Int32)\n  - System.Threading.Thread.ManagedThreadId\n  - System.Threading.Thread.Name\n  - System.Threading.Thread.Sleep(System.Int32)\n  - System.Threading.Thread.Sleep(System.TimeSpan)\n  - System.Threading.Thread.Start\n  - System.Threading.Thread.Start(System.Object)\n  - System.Threading.Thread.ThreadState\n  langs:\n  - csharp\n  - vb\n  name: Thread\n  fullName: System.Threading.Thread\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Thread.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Thread\n    path: src/mscorlib/src/System/Threading/Thread.cs\n    startLine: 121\n  assemblies:\n  - System.Threading.Thread\n  namespace: System.Threading\n  summary: \"\\n<p>Creates and controls a thread, sets its priority, and gets its status.</p>\\n\"\n  syntax:\n    content: >-\n      [ClassInterface(ClassInterfaceType.None)]\n\n      [ComDefaultInterface(typeof (_Thread))]\n\n      [ComVisible(true)]\n\n      public sealed class Thread : CriticalFinalizerObject, _Thread\n    content.vb: >-\n      <ClassInterface(ClassInterfaceType.None)>\n\n      <ComDefaultInterface(GetType(_Thread))>\n\n      <ComVisible(True)>\n\n      Public NotInheritable Class Thread\n          Inherits CriticalFinalizerObject\n          Implements _Thread\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n    ctor: System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: true\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: Thread\n- uid: System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)\n  commentId: M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)\n  id: '#ctor(System.Threading.ParameterizedThreadStart)'\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  - vb\n  name: Thread(ParameterizedThreadStart)\n  fullName: System.Threading.Thread.Thread(System.Threading.ParameterizedThreadStart)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Thread.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Thread.cs\n    startLine: 245\n  assemblies:\n  - System.Threading.Thread\n  namespace: System.Threading\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Threading.Thread\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, specifying a delegate that allows an object to be passed to the thread when the thread is started.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public Thread(ParameterizedThreadStart start)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Sub New(start As ParameterizedThreadStart)\n    parameters:\n    - id: start\n      type: System.Threading.ParameterizedThreadStart\n      description: \"\\n<p>A delegate that represents the methods to be invoked when this thread begins executing. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>start</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Threading.ParameterizedThreadStart\n    commentId: T:System.Threading.ParameterizedThreadStart\n  - type: System.Threading.Thread.Start\n    commentId: M:System.Threading.Thread.Start\n  - type: System.AppDomain\n    commentId: T:System.AppDomain\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Thread.Thread(ParameterizedThreadStart)\n- uid: System.Threading.Thread.#ctor(System.Threading.ThreadStart)\n  commentId: M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)\n  id: '#ctor(System.Threading.ThreadStart)'\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  - vb\n  name: Thread(ThreadStart)\n  fullName: System.Threading.Thread.Thread(System.Threading.ThreadStart)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Thread.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Thread.cs\n    startLine: 226\n  assemblies:\n  - System.Threading.Thread\n  namespace: System.Threading\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Threading.Thread\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public Thread(ThreadStart start)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Sub New(start As ThreadStart)\n    parameters:\n    - id: start\n      type: System.Threading.ThreadStart\n      description: \"\\n<p>A <xref href=\\\"System.Threading.ThreadStart\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> delegate that represents the methods to be invoked when this thread begins executing. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>start</em> parameter is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Threading.ThreadStart\n    commentId: T:System.Threading.ThreadStart\n  - type: System.Threading.Thread.Start\n    commentId: M:System.Threading.Thread.Start\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Thread.Thread(ThreadStart)\n- uid: System.Threading.Thread.CurrentThread\n  commentId: P:System.Threading.Thread.CurrentThread\n  id: CurrentThread\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  - vb\n  name: CurrentThread\n  fullName: System.Threading.Thread.CurrentThread\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Thread.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CurrentThread\n    path: src/mscorlib/src/System/Threading/Thread.cs\n    startLine: 750\n  assemblies:\n  - System.Threading.Thread\n  namespace: System.Threading\n  summary: \"\\n<p>Gets the currently running thread.</p>\\n\"\n  syntax:\n    content: >-\n      public static Thread CurrentThread\n\n      {\n          [SecuritySafeCritical]\n          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n          get;\n      }\n    content.vb: Public Shared ReadOnly Property CurrentThread As Thread\n    parameters: []\n    return:\n      type: System.Threading.Thread\n      description: \"\\n<p>A <xref href=\\\"System.Threading.Thread\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the representation of the currently running thread.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Thread.CurrentThread\n- uid: System.Threading.Thread.IsAlive\n  commentId: P:System.Threading.Thread.IsAlive\n  id: IsAlive\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  - vb\n  name: IsAlive\n  fullName: System.Threading.Thread.IsAlive\n  type: Property\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Threading.Thread\n  namespace: System.Threading\n  summary: \"\\n<p>Gets a value indicating the execution status of the current thread.</p>\\n\"\n  syntax:\n    content: >-\n      public bool IsAlive\n\n      {\n          [SecuritySafeCritical]\n          [MethodImpl(MethodImplOptions.InternalCall)]\n          get;\n      }\n    content.vb: Public ReadOnly Property IsAlive As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this thread has been started and has not terminated normally or aborted; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Thread.IsAlive\n- uid: System.Threading.Thread.IsBackground\n  commentId: P:System.Threading.Thread.IsBackground\n  id: IsBackground\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  - vb\n  name: IsBackground\n  fullName: System.Threading.Thread.IsBackground\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Thread.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsBackground\n    path: src/mscorlib/src/System/Threading/Thread.cs\n    startLine: 838\n  assemblies:\n  - System.Threading.Thread\n  namespace: System.Threading\n  summary: \"\\n<p>Gets or sets a value indicating whether or not a thread is a background thread.</p>\\n\"\n  syntax:\n    content: >-\n      public bool IsBackground\n\n      {\n          [SecuritySafeCritical]\n          get;\n          [SecuritySafeCritical]\n          [HostProtection(SelfAffectingThreading = true)]\n          set;\n      }\n    content.vb: Public Property IsBackground As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this thread is or is to become a background thread; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.Threading.ThreadStateException\n    commentId: T:System.Threading.ThreadStateException\n    description: \"\\n<p>The thread is dead. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: Thread.IsBackground\n- uid: System.Threading.Thread.ManagedThreadId\n  commentId: P:System.Threading.Thread.ManagedThreadId\n  id: ManagedThreadId\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  - vb\n  name: ManagedThreadId\n  fullName: System.Threading.Thread.ManagedThreadId\n  type: Property\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Threading.Thread\n  namespace: System.Threading\n  summary: \"\\n<p>Gets a unique identifier for the current managed thread. </p>\\n\"\n  syntax:\n    content: >-\n      public int ManagedThreadId\n\n      {\n          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n          [MethodImpl(MethodImplOptions.InternalCall)]\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public ReadOnly Property ManagedThreadId As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer that represents a unique identifier for this managed thread.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Thread.ManagedThreadId\n- uid: System.Threading.Thread.Name\n  commentId: P:System.Threading.Thread.Name\n  id: Name\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  - vb\n  name: Name\n  fullName: System.Threading.Thread.Name\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Thread.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Name\n    path: src/mscorlib/src/System/Threading/Thread.cs\n    startLine: 1393\n  assemblies:\n  - System.Threading.Thread\n  namespace: System.Threading\n  summary: \"\\n<p>Gets or sets the name of the thread.</p>\\n\"\n  syntax:\n    content: >-\n      public string Name\n\n      {\n          get;\n          [SecuritySafeCritical]\n          [HostProtection(ExternalThreading = true)]\n          set;\n      }\n    content.vb: Public Property Name As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>A string containing the name of the thread, or <strong>null</strong> if no name was set.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>A set operation was requested, but the <strong>Name</strong> property has already been set. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: Thread.Name\n- uid: System.Threading.Thread.ThreadState\n  commentId: P:System.Threading.Thread.ThreadState\n  id: ThreadState\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  - vb\n  name: ThreadState\n  fullName: System.Threading.Thread.ThreadState\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Thread.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ThreadState\n    path: src/mscorlib/src/System/Threading/Thread.cs\n    startLine: 857\n  assemblies:\n  - System.Threading.Thread\n  namespace: System.Threading\n  summary: \"\\n<p>Gets a value containing the states of the current thread.</p>\\n\"\n  syntax:\n    content: >-\n      public ThreadState ThreadState\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public ReadOnly Property ThreadState As ThreadState\n    parameters: []\n    return:\n      type: System.Threading.ThreadState\n      description: \"\\n<p>One of the <xref href=\\\"System.Threading.ThreadState\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values indicating the state of the current thread. The initial value is <strong>Unstarted</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Thread.ThreadState\n- uid: System.Threading.Thread.Join\n  commentId: M:System.Threading.Thread.Join\n  id: Join\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  - vb\n  name: Join()\n  fullName: System.Threading.Thread.Join()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Thread.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Join\n    path: src/mscorlib/src/System/Threading/Thread.cs\n    startLine: 663\n  assemblies:\n  - System.Threading.Thread\n  namespace: System.Threading\n  summary: \"\\n<p>Blocks the calling thread until the thread represented by this instance terminates, while continuing to perform standard COM and <strong>SendMessage</strong> pumping.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [HostProtection(Synchronization = true, ExternalThreading = true)]\n\n      public void Join()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <HostProtection(Synchronization:=True, ExternalThreading:=True)>\n\n      Public Sub Join\n  exceptions:\n  - type: System.Threading.ThreadStateException\n    commentId: T:System.Threading.ThreadStateException\n    description: \"\\n<p>The caller attempted to join a thread that is in the <xref href=\\\"System.Threading.ThreadState.Unstarted\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> state. </p>\\n\"\n  - type: System.Threading.ThreadInterruptedException\n    commentId: T:System.Threading.ThreadInterruptedException\n    description: \"\\n<p>The thread is interrupted while waiting. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Thread.Join()\n- uid: System.Threading.Thread.Join(System.Int32)\n  commentId: M:System.Threading.Thread.Join(System.Int32)\n  id: Join(System.Int32)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  - vb\n  name: Join(Int32)\n  fullName: System.Threading.Thread.Join(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Thread.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Join\n    path: src/mscorlib/src/System/Threading/Thread.cs\n    startLine: 670\n  assemblies:\n  - System.Threading.Thread\n  namespace: System.Threading\n  summary: \"\\n<p>Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [HostProtection(Synchronization = true, ExternalThreading = true)]\n\n      public bool Join(int millisecondsTimeout)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <HostProtection(Synchronization:=True, ExternalThreading:=True)>\n\n      Public Function Join(millisecondsTimeout As Integer) As Boolean\n    parameters:\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: \"\\n<p>The number of milliseconds to wait for the thread to terminate. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the thread has terminated; <strong>false</strong> if the thread has not terminated after the amount of time specified by the <em>millisecondsTimeout</em> parameter has elapsed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The value of <em>millisecondsTimeout</em> is negative and is not equal to <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in milliseconds. </p>\\n\"\n  - type: System.Threading.ThreadStateException\n    commentId: T:System.Threading.ThreadStateException\n    description: \"\\n<p>The thread has not been started. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Thread.Join(Int32)\n- uid: System.Threading.Thread.Sleep(System.Int32)\n  commentId: M:System.Threading.Thread.Sleep(System.Int32)\n  id: Sleep(System.Int32)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  - vb\n  name: Sleep(Int32)\n  fullName: System.Threading.Thread.Sleep(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Thread.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sleep\n    path: src/mscorlib/src/System/Threading/Thread.cs\n    startLine: 699\n  assemblies:\n  - System.Threading.Thread\n  namespace: System.Threading\n  summary: \"\\n<p>Suspends the current thread for the specified number of milliseconds.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static void Sleep(int millisecondsTimeout)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Sub Sleep(millisecondsTimeout As Integer)\n    parameters:\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: \"\\n<p>The number of milliseconds for which the thread is suspended. If the value of the <em>millisecondsTimeout</em> argument is zero, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run. If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The time-out value is negative and is not equal to <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Thread.Sleep(Int32)\n- uid: System.Threading.Thread.Sleep(System.TimeSpan)\n  commentId: M:System.Threading.Thread.Sleep(System.TimeSpan)\n  id: Sleep(System.TimeSpan)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  - vb\n  name: Sleep(TimeSpan)\n  fullName: System.Threading.Thread.Sleep(System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Thread.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sleep\n    path: src/mscorlib/src/System/Threading/Thread.cs\n    startLine: 708\n  assemblies:\n  - System.Threading.Thread\n  namespace: System.Threading\n  summary: \"\\n<p>Suspends the current thread for the specified amount of time.</p>\\n\"\n  syntax:\n    content: public static void Sleep(TimeSpan timeout)\n    content.vb: Public Shared Sub Sleep(timeout As TimeSpan)\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: \"\\n<p>The amount of time for which the thread is suspended. If the value of the <em>millisecondsTimeout</em> argument is <xref href=\\\"System.TimeSpan.Zero\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run. If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The value of <em>timeout</em> is negative and is not equal to <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in milliseconds, or is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> milliseconds. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Thread.Sleep(TimeSpan)\n- uid: System.Threading.Thread.Start\n  commentId: M:System.Threading.Thread.Start\n  id: Start\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  - vb\n  name: Start()\n  fullName: System.Threading.Thread.Start()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Thread.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Start\n    path: src/mscorlib/src/System/Threading/Thread.cs\n    startLine: 301\n  assemblies:\n  - System.Threading.Thread\n  namespace: System.Threading\n  summary: \"\\n<p>Causes the operating system to change the state of the current instance to <xref href=\\\"System.Threading.ThreadState.Running\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(Synchronization = true, ExternalThreading = true)]\n\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public void Start()\n    content.vb: >-\n      <HostProtection(Synchronization:=True, ExternalThreading:=True)>\n\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Sub Start\n  exceptions:\n  - type: System.Threading.ThreadStateException\n    commentId: T:System.Threading.ThreadStateException\n    description: \"\\n<p>The thread has already been started. </p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>There is not enough memory available to start this thread. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Thread.Start()\n- uid: System.Threading.Thread.Start(System.Object)\n  commentId: M:System.Threading.Thread.Start(System.Object)\n  id: Start(System.Object)\n  parent: System.Threading.Thread\n  langs:\n  - csharp\n  - vb\n  name: Start(Object)\n  fullName: System.Threading.Thread.Start(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Thread.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Start\n    path: src/mscorlib/src/System/Threading/Thread.cs\n    startLine: 309\n  assemblies:\n  - System.Threading.Thread\n  namespace: System.Threading\n  summary: \"\\n<p>Causes the operating system to change the state of the current instance to <xref href=\\\"System.Threading.ThreadState.Running\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and optionally supplies an object containing data to be used by the method the thread executes.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(Synchronization = true, ExternalThreading = true)]\n\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public void Start(object parameter)\n    content.vb: >-\n      <HostProtection(Synchronization:=True, ExternalThreading:=True)>\n\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Sub Start(parameter As Object)\n    parameters:\n    - id: parameter\n      type: System.Object\n      description: \"\\n<p>An object that contains data to be used by the method the thread executes.</p>\\n\"\n  exceptions:\n  - type: System.Threading.ThreadStateException\n    commentId: T:System.Threading.ThreadStateException\n    description: \"\\n<p>The thread has already been started. </p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>There is not enough memory available to start this thread. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>This thread was created using a <xref href=\\\"System.Threading.ThreadStart\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> delegate instead of a <xref href=\\\"System.Threading.ParameterizedThreadStart\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> delegate.</p>\\n\"\n  seealso:\n  - type: System.Threading.ParameterizedThreadStart\n    commentId: T:System.Threading.ParameterizedThreadStart\n  - type: System.AppDomain\n    commentId: T:System.AppDomain\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Thread.Start(Object)\nreferences:\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Threading.ParameterizedThreadStart\n  parent: System.Threading\n  isExternal: false\n  name: ParameterizedThreadStart\n  fullName: System.Threading.ParameterizedThreadStart\n  nameWithType: ParameterizedThreadStart\n  commentId: T:System.Threading.ParameterizedThreadStart\n- uid: System.Threading.ThreadStart\n  parent: System.Threading\n  isExternal: false\n  name: ThreadStart\n  fullName: System.Threading.ThreadStart\n  nameWithType: ThreadStart\n  commentId: T:System.Threading.ThreadStart\n- uid: System.Threading.Thread\n  parent: System.Threading\n  isExternal: false\n  name: Thread\n  fullName: System.Threading.Thread\n  nameWithType: Thread\n  commentId: T:System.Threading.Thread\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Threading.ThreadState\n  parent: System.Threading\n  isExternal: false\n  name: ThreadState\n  fullName: System.Threading.ThreadState\n  nameWithType: ThreadState\n  commentId: T:System.Threading.ThreadState\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  fullName: System.TimeSpan\n  nameWithType: TimeSpan\n  commentId: T:System.TimeSpan\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.Threading.ThreadStateException\n  isExternal: false\n  name: ThreadStateException\n  fullName: System.Threading.ThreadStateException\n  nameWithType: ThreadStateException\n  commentId: T:System.Threading.ThreadStateException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.Threading.ThreadInterruptedException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.OutOfMemoryException\n  isExternal: false\n  name: OutOfMemoryException\n  fullName: System.OutOfMemoryException\n  nameWithType: OutOfMemoryException\n  commentId: T:System.OutOfMemoryException\n"}