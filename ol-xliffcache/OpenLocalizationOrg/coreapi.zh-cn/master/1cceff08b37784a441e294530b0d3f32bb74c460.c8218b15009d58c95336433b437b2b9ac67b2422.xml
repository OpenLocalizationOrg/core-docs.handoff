{"nodes":[{"pos":[726,757],"content":"MediaTypeWithQualityHeaderValue","needQuote":true,"nodes":[{"content":"MediaTypeWithQualityHeaderValue","pos":[0,31]}]},{"pos":[2734,2773],"content":"MediaTypeWithQualityHeaderValue(String)","needQuote":true,"nodes":[{"content":"MediaTypeWithQualityHeaderValue(String)","pos":[0,39]}]},{"pos":[4287,4334],"content":"MediaTypeWithQualityHeaderValue(String, Double)","needQuote":true,"nodes":[{"content":"MediaTypeWithQualityHeaderValue(String, Double)","pos":[0,47]}]},{"content":"\\n&lt;p&gt;The quality associated with this header value.&lt;/p&gt;\\n","pos":[5467,5524],"source":"\\n<p>The quality associated with this header value.</p>\\n"},{"pos":[5945,5952],"content":"Quality","needQuote":true,"nodes":[{"content":"Quality","pos":[0,7]}]},{"pos":[7423,7436],"content":"Parse(String)","needQuote":true,"nodes":[{"content":"Parse(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A string that represents media type with quality header value information.&lt;/p&gt;\\n","pos":[8283,8368],"source":"\\n<p>A string that represents media type with quality header value information.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is a &lt;strong&gt;null&lt;/strong&gt; reference.&lt;/p&gt;\\n","pos":[8861,8926],"source":"\\n<p>\\n<em>input</em> is a <strong>null</strong> reference.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is not valid media type with quality header value information.&lt;/p&gt;\\n","pos":[9019,9109],"source":"\\n<p>\\n<em>input</em> is not valid media type with quality header value information.</p>\\n"},{"pos":[9737,9790],"content":"TryParse(String, out MediaTypeWithQualityHeaderValue)","needQuote":true,"nodes":[{"content":"TryParse(String, out MediaTypeWithQualityHeaderValue)","pos":[0,53]}]},{"content":"\\n&lt;p&gt;The string to validate.&lt;/p&gt;\\n","pos":[10778,10812],"source":"\\n<p>The string to validate.</p>\\n"},{"pos":[12042,12065],"content":"System.Net.Http.Headers","needQuote":true,"nodes":[{"content":"System.Net.Http.Headers","pos":[0,23]}]},{"pos":[12247,12253],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12446,12466],"content":"MediaTypeHeaderValue","needQuote":true,"nodes":[{"content":"MediaTypeHeaderValue","pos":[0,20]}]},{"pos":[12764,12771],"content":"CharSet","needQuote":true,"nodes":[{"content":"CharSet","pos":[0,7]}]},{"pos":[13095,13104],"content":"MediaType","needQuote":true,"nodes":[{"content":"MediaType","pos":[0,9]}]},{"pos":[13435,13445],"content":"Parameters","needQuote":true,"nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[13789,13803],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[13984,13990],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14067,14068],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14118,14124],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14184,14185],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14299,14305],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14382,14383],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14433,14439],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14499,14500],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14798,14811],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[14974,14985],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[15067,15068],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15095,15096],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15200,15211],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[15293,15294],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15321,15322],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15606,15616],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[15773,15781],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[15860,15861],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15888,15889],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15990,15998],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[16077,16078],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16105,16106],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16444,16482],"content":"TryParse(String, MediaTypeHeaderValue)","needQuote":true,"nodes":[{"content":"TryParse(String, MediaTypeHeaderValue)","pos":[0,38]}]},{"pos":[16759,16767],"content":"TryParse","needQuote":true,"nodes":[{"content":"TryParse","pos":[0,8]}]},{"pos":[16846,16847],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16897,16903],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[16964,16965]},{"pos":[17051,17071],"content":"MediaTypeHeaderValue","needQuote":true,"nodes":[{"content":"MediaTypeHeaderValue","pos":[0,20]}]},{"pos":[17141,17142],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17304,17312],"content":"TryParse","needQuote":true,"nodes":[{"content":"TryParse","pos":[0,8]}]},{"pos":[17391,17392],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17442,17448],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[17509,17510]},{"pos":[17596,17616],"content":"MediaTypeHeaderValue","needQuote":true,"nodes":[{"content":"MediaTypeHeaderValue","pos":[0,20]}]},{"pos":[17686,17687],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18018,18040],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[18188,18194],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[18261,18262],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18312,18318],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18379,18380]},{"pos":[18435,18441],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18501,18502],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18599,18605],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[18672,18673],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18723,18729],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18790,18791]},{"pos":[18846,18852],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18912,18913],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19158,19189],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[19355,19370],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[19446,19447],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19497,19503],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19564,19565]},{"pos":[19620,19626],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19686,19687],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19793,19808],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[19884,19885],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19935,19941],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20002,20003]},{"pos":[20058,20064],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20124,20125],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20351,20360],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[20453,20460],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[20528,20529],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20556,20557],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20626,20633],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[20701,20702],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20729,20730],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20905,20922],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[21031,21046],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[21122,21123],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21150,21151],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21228,21243],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[21319,21320],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21347,21348],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21493,21499],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[21630,21636],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[21781,21787],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[21961,21977],"content":"Nullable<Double>","needQuote":true,"nodes":[{"content":"Nullable&lt;Double&gt;","pos":[0,16],"source":"Nullable<Double>"}]},{"pos":[22153,22161],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[22223,22224],"content":"<","needQuote":true,"nodes":[]},{"pos":[22274,22280],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[22410,22418],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[22481,22484]},{"pos":[22541,22547],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[22607,22608],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22813,22824],"content":"Nullable<T>","needQuote":true,"nodes":[{"content":"Nullable&lt;T&gt;","pos":[0,11],"source":"Nullable<T>"}]},{"pos":[22971,22979],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[23020,23021],"content":"<","needQuote":true,"nodes":[]},{"pos":[23048,23049],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[23146,23154],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[23196,23199]},{"pos":[23233,23234],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[23261,23262],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23499,23530],"content":"MediaTypeWithQualityHeaderValue","needQuote":true,"nodes":[{"content":"MediaTypeWithQualityHeaderValue","pos":[0,31]}]},{"pos":[23785,23792],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[23938,23959],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[24158,24173],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]}],"content":"items:\n- uid: System.Net.Http.Headers.MediaTypeWithQualityHeaderValue\n  commentId: T:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue\n  id: MediaTypeWithQualityHeaderValue\n  parent: System.Net.Http.Headers\n  children:\n  - System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.#ctor(System.String)\n  - System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.#ctor(System.String,System.Double)\n  - System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse(System.String)\n  - System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Quality\n  - System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.TryParse(System.String,System.Net.Http.Headers.MediaTypeWithQualityHeaderValue@)\n  langs:\n  - csharp\n  - vb\n  name: MediaTypeWithQualityHeaderValue\n  fullName: System.Net.Http.Headers.MediaTypeWithQualityHeaderValue\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MediaTypeWithQualityHeaderValue\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 449\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Represents a media type with an additional quality factor used in a Content-Type header.</p>\\n\"\n  syntax:\n    content: 'public sealed class MediaTypeWithQualityHeaderValue : MediaTypeHeaderValue'\n    content.vb: >-\n      Public NotInheritable Class MediaTypeWithQualityHeaderValue\n          Inherits MediaTypeHeaderValue\n  inheritance:\n  - System.Object\n  - System.Net.Http.Headers.MediaTypeHeaderValue\n  inheritedMembers:\n  - System.Net.Http.Headers.MediaTypeHeaderValue.CharSet\n  - System.Net.Http.Headers.MediaTypeHeaderValue.MediaType\n  - System.Net.Http.Headers.MediaTypeHeaderValue.Parameters\n  - System.Net.Http.Headers.MediaTypeHeaderValue.Equals(System.Object)\n  - System.Net.Http.Headers.MediaTypeHeaderValue.GetHashCode\n  - System.Net.Http.Headers.MediaTypeHeaderValue.ToString\n  - System.Net.Http.Headers.MediaTypeHeaderValue.TryParse(System.String,System.Net.Http.Headers.MediaTypeHeaderValue@)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: MediaTypeWithQualityHeaderValue\n- uid: System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.#ctor(System.String)\n  commentId: M:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Net.Http.Headers.MediaTypeWithQualityHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: MediaTypeWithQualityHeaderValue(String)\n  fullName: System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.MediaTypeWithQualityHeaderValue(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 451\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Http.Headers.MediaTypeWithQualityHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public MediaTypeWithQualityHeaderValue(string mediaType)\n    content.vb: Public Sub New(mediaType As String)\n    parameters:\n    - id: mediaType\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.Net.Http.Headers.MediaTypeWithQualityHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> represented as string to initialize the new instance. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: MediaTypeWithQualityHeaderValue.MediaTypeWithQualityHeaderValue(String)\n- uid: System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.#ctor(System.String,System.Double)\n  commentId: M:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.#ctor(System.String,System.Double)\n  id: '#ctor(System.String,System.Double)'\n  parent: System.Net.Http.Headers.MediaTypeWithQualityHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: MediaTypeWithQualityHeaderValue(String, Double)\n  fullName: System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.MediaTypeWithQualityHeaderValue(System.String, System.Double)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 452\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Http.Headers.MediaTypeWithQualityHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public MediaTypeWithQualityHeaderValue(string mediaType, double quality)\n    content.vb: Public Sub New(mediaType As String, quality As Double)\n    parameters:\n    - id: mediaType\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.Net.Http.Headers.MediaTypeWithQualityHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> represented as string to initialize the new instance.</p>\\n\"\n    - id: quality\n      type: System.Double\n      description: \"\\n<p>The quality associated with this header value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: MediaTypeWithQualityHeaderValue.MediaTypeWithQualityHeaderValue(String, Double)\n- uid: System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Quality\n  commentId: P:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Quality\n  id: Quality\n  parent: System.Net.Http.Headers.MediaTypeWithQualityHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Quality\n  fullName: System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Quality\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Quality\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 453\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Get or set the quality value for the <xref href=\\\"System.Net.Http.Headers.MediaTypeWithQualityHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public double ? Quality { get; set; }\n    content.vb: Public Property Quality As Double?\n    parameters: []\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>Returns <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The quality value for the <xref href=\\\"System.Net.Http.Headers.MediaTypeWithQualityHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: MediaTypeWithQualityHeaderValue.Quality\n- uid: System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse(System.String)\n  commentId: M:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Net.Http.Headers.MediaTypeWithQualityHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Parse(String)\n  fullName: System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Parse\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 454\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Converts a string to an <xref href=\\\"System.Net.Http.Headers.MediaTypeWithQualityHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public static MediaTypeWithQualityHeaderValue Parse(string input)\n    content.vb: Public Shared Function Parse(input As String) As MediaTypeWithQualityHeaderValue\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>A string that represents media type with quality header value information.</p>\\n\"\n    return:\n      type: System.Net.Http.Headers.MediaTypeWithQualityHeaderValue\n      description: \"\\n<p>Returns <xref href=\\\"System.Net.Http.Headers.MediaTypeWithQualityHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>An <xref href=\\\"System.Net.Http.Headers.MediaTypeWithQualityHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> is a <strong>null</strong> reference.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>input</em> is not valid media type with quality header value information.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: MediaTypeWithQualityHeaderValue.Parse(String)\n- uid: System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.TryParse(System.String,System.Net.Http.Headers.MediaTypeWithQualityHeaderValue@)\n  commentId: M:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.TryParse(System.String,System.Net.Http.Headers.MediaTypeWithQualityHeaderValue@)\n  id: TryParse(System.String,System.Net.Http.Headers.MediaTypeWithQualityHeaderValue@)\n  parent: System.Net.Http.Headers.MediaTypeWithQualityHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: TryParse(String, out MediaTypeWithQualityHeaderValue)\n  fullName: System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.TryParse(System.String, out System.Net.Http.Headers.MediaTypeWithQualityHeaderValue)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryParse\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 455\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Determines whether a string is valid <xref href=\\\"System.Net.Http.Headers.MediaTypeWithQualityHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> information.</p>\\n\"\n  syntax:\n    content: public static bool TryParse(string input, out MediaTypeWithQualityHeaderValue parsedValue)\n    content.vb: Public Shared Function TryParse(input As String, ByRef parsedValue As MediaTypeWithQualityHeaderValue) As Boolean\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to validate.</p>\\n\"\n    - id: parsedValue\n      type: System.Net.Http.Headers.MediaTypeWithQualityHeaderValue\n      description: \"\\n<p>The <xref href=\\\"System.Net.Http.Headers.MediaTypeWithQualityHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> version of the string.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if <em>input</em> is valid <xref href=\\\"System.Net.Http.Headers.MediaTypeWithQualityHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> information; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.TryParse(System.String, ByRef System.Net.Http.Headers.MediaTypeWithQualityHeaderValue)\n  name.vb: TryParse(String, ByRef MediaTypeWithQualityHeaderValue)\n  nameWithType: MediaTypeWithQualityHeaderValue.TryParse(String, out MediaTypeWithQualityHeaderValue)\n  nameWithType.vb: MediaTypeWithQualityHeaderValue.TryParse(String, ByRef MediaTypeWithQualityHeaderValue)\nreferences:\n- uid: System.Net.Http.Headers\n  isExternal: false\n  name: System.Net.Http.Headers\n  fullName: System.Net.Http.Headers\n  commentId: N:System.Net.Http.Headers\n  nameWithType: System.Net.Http.Headers\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Net.Http.Headers.MediaTypeHeaderValue\n  parent: System.Net.Http.Headers\n  isExternal: false\n  name: MediaTypeHeaderValue\n  fullName: System.Net.Http.Headers.MediaTypeHeaderValue\n  commentId: T:System.Net.Http.Headers.MediaTypeHeaderValue\n  nameWithType: MediaTypeHeaderValue\n- uid: System.Net.Http.Headers.MediaTypeHeaderValue.CharSet\n  parent: System.Net.Http.Headers.MediaTypeHeaderValue\n  isExternal: false\n  name: CharSet\n  fullName: System.Net.Http.Headers.MediaTypeHeaderValue.CharSet\n  commentId: P:System.Net.Http.Headers.MediaTypeHeaderValue.CharSet\n  nameWithType: MediaTypeHeaderValue.CharSet\n- uid: System.Net.Http.Headers.MediaTypeHeaderValue.MediaType\n  parent: System.Net.Http.Headers.MediaTypeHeaderValue\n  isExternal: false\n  name: MediaType\n  fullName: System.Net.Http.Headers.MediaTypeHeaderValue.MediaType\n  commentId: P:System.Net.Http.Headers.MediaTypeHeaderValue.MediaType\n  nameWithType: MediaTypeHeaderValue.MediaType\n- uid: System.Net.Http.Headers.MediaTypeHeaderValue.Parameters\n  parent: System.Net.Http.Headers.MediaTypeHeaderValue\n  isExternal: false\n  name: Parameters\n  fullName: System.Net.Http.Headers.MediaTypeHeaderValue.Parameters\n  commentId: P:System.Net.Http.Headers.MediaTypeHeaderValue.Parameters\n  nameWithType: MediaTypeHeaderValue.Parameters\n- uid: System.Net.Http.Headers.MediaTypeHeaderValue.Equals(System.Object)\n  parent: System.Net.Http.Headers.MediaTypeHeaderValue\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Net.Http.Headers.MediaTypeHeaderValue.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Net.Http.Headers.MediaTypeHeaderValue.Equals(System.Object)\n    name: Equals\n    fullName: System.Net.Http.Headers.MediaTypeHeaderValue.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Net.Http.Headers.MediaTypeHeaderValue.Equals(System.Object)\n    name: Equals\n    fullName: System.Net.Http.Headers.MediaTypeHeaderValue.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Net.Http.Headers.MediaTypeHeaderValue.Equals(System.Object)\n  nameWithType: MediaTypeHeaderValue.Equals(Object)\n- uid: System.Net.Http.Headers.MediaTypeHeaderValue.GetHashCode\n  parent: System.Net.Http.Headers.MediaTypeHeaderValue\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.Net.Http.Headers.MediaTypeHeaderValue.GetHashCode()\n  spec.csharp:\n  - uid: System.Net.Http.Headers.MediaTypeHeaderValue.GetHashCode\n    name: GetHashCode\n    fullName: System.Net.Http.Headers.MediaTypeHeaderValue.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Net.Http.Headers.MediaTypeHeaderValue.GetHashCode\n    name: GetHashCode\n    fullName: System.Net.Http.Headers.MediaTypeHeaderValue.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Net.Http.Headers.MediaTypeHeaderValue.GetHashCode\n  nameWithType: MediaTypeHeaderValue.GetHashCode()\n- uid: System.Net.Http.Headers.MediaTypeHeaderValue.ToString\n  parent: System.Net.Http.Headers.MediaTypeHeaderValue\n  isExternal: false\n  name: ToString()\n  fullName: System.Net.Http.Headers.MediaTypeHeaderValue.ToString()\n  spec.csharp:\n  - uid: System.Net.Http.Headers.MediaTypeHeaderValue.ToString\n    name: ToString\n    fullName: System.Net.Http.Headers.MediaTypeHeaderValue.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Net.Http.Headers.MediaTypeHeaderValue.ToString\n    name: ToString\n    fullName: System.Net.Http.Headers.MediaTypeHeaderValue.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Net.Http.Headers.MediaTypeHeaderValue.ToString\n  nameWithType: MediaTypeHeaderValue.ToString()\n- uid: System.Net.Http.Headers.MediaTypeHeaderValue.TryParse(System.String,System.Net.Http.Headers.MediaTypeHeaderValue@)\n  parent: System.Net.Http.Headers.MediaTypeHeaderValue\n  isExternal: true\n  name: TryParse(String, MediaTypeHeaderValue)\n  fullName: System.Net.Http.Headers.MediaTypeHeaderValue.TryParse(System.String, System.Net.Http.Headers.MediaTypeHeaderValue)\n  spec.csharp:\n  - uid: System.Net.Http.Headers.MediaTypeHeaderValue.TryParse(System.String,System.Net.Http.Headers.MediaTypeHeaderValue@)\n    name: TryParse\n    fullName: System.Net.Http.Headers.MediaTypeHeaderValue.TryParse\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Net.Http.Headers.MediaTypeHeaderValue\n    name: MediaTypeHeaderValue\n    fullName: System.Net.Http.Headers.MediaTypeHeaderValue\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Net.Http.Headers.MediaTypeHeaderValue.TryParse(System.String,System.Net.Http.Headers.MediaTypeHeaderValue@)\n    name: TryParse\n    fullName: System.Net.Http.Headers.MediaTypeHeaderValue.TryParse\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Net.Http.Headers.MediaTypeHeaderValue\n    name: MediaTypeHeaderValue\n    fullName: System.Net.Http.Headers.MediaTypeHeaderValue\n  - name: )\n    fullName: )\n  commentId: M:System.Net.Http.Headers.MediaTypeHeaderValue.TryParse(System.String,System.Net.Http.Headers.MediaTypeHeaderValue@)\n  nameWithType: MediaTypeHeaderValue.TryParse(String, MediaTypeHeaderValue)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  commentId: T:System.Double\n  nameWithType: Double\n- uid: System.Nullable{System.Double}\n  parent: System\n  definition: System.Nullable`1\n  name: Nullable<Double>\n  fullName: System.Nullable<System.Double>\n  fullname.vb: System.Nullable(Of System.Double)\n  name.vb: Nullable(Of Double)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Nullable{System.Double}\n  nameWithType: Nullable<Double>\n  nameWithType.vb: Nullable(Of Double)\n- uid: System.Nullable`1\n  parent: System\n  isExternal: false\n  name: Nullable<T>\n  fullName: System.Nullable<T>\n  fullname.vb: System.Nullable(Of T)\n  name.vb: Nullable(Of T)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Nullable`1\n  nameWithType: Nullable<T>\n  nameWithType.vb: Nullable(Of T)\n- uid: System.Net.Http.Headers.MediaTypeWithQualityHeaderValue\n  parent: System.Net.Http.Headers\n  isExternal: false\n  name: MediaTypeWithQualityHeaderValue\n  fullName: System.Net.Http.Headers.MediaTypeWithQualityHeaderValue\n  commentId: T:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue\n  nameWithType: MediaTypeWithQualityHeaderValue\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n"}