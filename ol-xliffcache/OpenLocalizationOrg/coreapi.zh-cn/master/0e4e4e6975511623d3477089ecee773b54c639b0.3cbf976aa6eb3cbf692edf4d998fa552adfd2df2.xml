{"nodes":[{"pos":[6678,6684],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"pos":[7786,7807],"content":"IsHardwareAccelerated","needQuote":true,"nodes":[{"content":"IsHardwareAccelerated","pos":[0,21]}]},{"pos":[8842,8859],"content":"Abs<T>(Vector<T>)","needQuote":true,"nodes":[{"content":"Abs&lt;T&gt;(Vector&lt;T&gt;)","pos":[0,17],"source":"Abs<T>(Vector<T>)"}]},{"pos":[10242,10270],"content":"Add<T>(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"Add&lt;T&gt;(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,28],"source":"Add<T>(Vector<T>, Vector<T>)"}]},{"pos":[11851,11882],"content":"AndNot<T>(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"AndNot&lt;T&gt;(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,31],"source":"AndNot<T>(Vector<T>, Vector<T>)"}]},{"pos":[13421,13447],"content":"AsVectorByte<T>(Vector<T>)","needQuote":true,"nodes":[{"content":"AsVectorByte&lt;T&gt;(Vector&lt;T&gt;)","pos":[0,26],"source":"AsVectorByte<T>(Vector<T>)"}]},{"pos":[14865,14893],"content":"AsVectorDouble<T>(Vector<T>)","needQuote":true,"nodes":[{"content":"AsVectorDouble&lt;T&gt;(Vector&lt;T&gt;)","pos":[0,28],"source":"AsVectorDouble<T>(Vector<T>)"}]},{"pos":[16330,16357],"content":"AsVectorInt16<T>(Vector<T>)","needQuote":true,"nodes":[{"content":"AsVectorInt16&lt;T&gt;(Vector&lt;T&gt;)","pos":[0,27],"source":"AsVectorInt16<T>(Vector<T>)"}]},{"pos":[17783,17810],"content":"AsVectorInt32<T>(Vector<T>)","needQuote":true,"nodes":[{"content":"AsVectorInt32&lt;T&gt;(Vector&lt;T&gt;)","pos":[0,27],"source":"AsVectorInt32<T>(Vector<T>)"}]},{"pos":[19236,19263],"content":"AsVectorInt64<T>(Vector<T>)","needQuote":true,"nodes":[{"content":"AsVectorInt64&lt;T&gt;(Vector&lt;T&gt;)","pos":[0,27],"source":"AsVectorInt64<T>(Vector<T>)"}]},{"pos":[20687,20714],"content":"AsVectorSByte<T>(Vector<T>)","needQuote":true,"nodes":[{"content":"AsVectorSByte&lt;T&gt;(Vector&lt;T&gt;)","pos":[0,27],"source":"AsVectorSByte<T>(Vector<T>)"}]},{"pos":[22392,22420],"content":"AsVectorSingle<T>(Vector<T>)","needQuote":true,"nodes":[{"content":"AsVectorSingle&lt;T&gt;(Vector&lt;T&gt;)","pos":[0,28],"source":"AsVectorSingle<T>(Vector<T>)"}]},{"pos":[23859,23887],"content":"AsVectorUInt16<T>(Vector<T>)","needQuote":true,"nodes":[{"content":"AsVectorUInt16&lt;T&gt;(Vector&lt;T&gt;)","pos":[0,28],"source":"AsVectorUInt16<T>(Vector<T>)"}]},{"pos":[25576,25604],"content":"AsVectorUInt32<T>(Vector<T>)","needQuote":true,"nodes":[{"content":"AsVectorUInt32&lt;T&gt;(Vector&lt;T&gt;)","pos":[0,28],"source":"AsVectorUInt32<T>(Vector<T>)"}]},{"pos":[27293,27321],"content":"AsVectorUInt64<T>(Vector<T>)","needQuote":true,"nodes":[{"content":"AsVectorUInt64&lt;T&gt;(Vector&lt;T&gt;)","pos":[0,28],"source":"AsVectorUInt64<T>(Vector<T>)"}]},{"pos":[29080,29115],"content":"BitwiseAnd<T>(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"BitwiseAnd&lt;T&gt;(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,35],"source":"BitwiseAnd<T>(Vector<T>, Vector<T>)"}]},{"pos":[30761,30795],"content":"BitwiseOr<T>(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"BitwiseOr&lt;T&gt;(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,34],"source":"BitwiseOr<T>(Vector<T>, Vector<T>)"}]},{"pos":[32619,32683],"content":"ConditionalSelect(Vector<Int32>, Vector<Single>, Vector<Single>)","needQuote":true,"nodes":[{"content":"ConditionalSelect(Vector&lt;Int32&gt;, Vector&lt;Single&gt;, Vector&lt;Single&gt;)","pos":[0,64],"source":"ConditionalSelect(Vector<Int32>, Vector<Single>, Vector<Single>)"}]},{"pos":[34865,34929],"content":"ConditionalSelect(Vector<Int64>, Vector<Double>, Vector<Double>)","needQuote":true,"nodes":[{"content":"ConditionalSelect(Vector&lt;Int64&gt;, Vector&lt;Double&gt;, Vector&lt;Double&gt;)","pos":[0,64],"source":"ConditionalSelect(Vector<Int64>, Vector<Double>, Vector<Double>)"}]},{"pos":[37034,37087],"content":"ConditionalSelect<T>(Vector<T>, Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"ConditionalSelect&lt;T&gt;(Vector&lt;T&gt;, Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,53],"source":"ConditionalSelect<T>(Vector<T>, Vector<T>, Vector<T>)"}]},{"pos":[38984,39015],"content":"Divide<T>(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"Divide&lt;T&gt;(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,31],"source":"Divide<T>(Vector<T>, Vector<T>)"}]},{"pos":[40611,40639],"content":"Dot<T>(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"Dot&lt;T&gt;(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,28],"source":"Dot<T>(Vector<T>, Vector<T>)"}]},{"pos":[42230,42268],"content":"Equals(Vector<Double>, Vector<Double>)","needQuote":true,"nodes":[{"content":"Equals(Vector&lt;Double&gt;, Vector&lt;Double&gt;)","pos":[0,38],"source":"Equals(Vector<Double>, Vector<Double>)"}]},{"pos":[43955,43991],"content":"Equals(Vector<Int32>, Vector<Int32>)","needQuote":true,"nodes":[{"content":"Equals(Vector&lt;Int32&gt;, Vector&lt;Int32&gt;)","pos":[0,36],"source":"Equals(Vector<Int32>, Vector<Int32>)"}]},{"pos":[45664,45700],"content":"Equals(Vector<Int64>, Vector<Int64>)","needQuote":true,"nodes":[{"content":"Equals(Vector&lt;Int64&gt;, Vector&lt;Int64&gt;)","pos":[0,36],"source":"Equals(Vector<Int64>, Vector<Int64>)"}]},{"pos":[47373,47411],"content":"Equals(Vector<Single>, Vector<Single>)","needQuote":true,"nodes":[{"content":"Equals(Vector&lt;Single&gt;, Vector&lt;Single&gt;)","pos":[0,38],"source":"Equals(Vector<Single>, Vector<Single>)"}]},{"pos":[49053,49084],"content":"Equals<T>(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"Equals&lt;T&gt;(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,31],"source":"Equals<T>(Vector<T>, Vector<T>)"}]},{"pos":[50698,50732],"content":"EqualsAll<T>(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"EqualsAll&lt;T&gt;(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,34],"source":"EqualsAll<T>(Vector<T>, Vector<T>)"}]},{"pos":[52347,52381],"content":"EqualsAny<T>(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"EqualsAny&lt;T&gt;(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,34],"source":"EqualsAny<T>(Vector<T>, Vector<T>)"}]},{"pos":[54053,54096],"content":"GreaterThan(Vector<Double>, Vector<Double>)","needQuote":true,"nodes":[{"content":"GreaterThan(Vector&lt;Double&gt;, Vector&lt;Double&gt;)","pos":[0,43],"source":"GreaterThan(Vector<Double>, Vector<Double>)"}]},{"pos":[55838,55879],"content":"GreaterThan(Vector<Int32>, Vector<Int32>)","needQuote":true,"nodes":[{"content":"GreaterThan(Vector&lt;Int32&gt;, Vector&lt;Int32&gt;)","pos":[0,41],"source":"GreaterThan(Vector<Int32>, Vector<Int32>)"}]},{"pos":[57607,57648],"content":"GreaterThan(Vector<Int64>, Vector<Int64>)","needQuote":true,"nodes":[{"content":"GreaterThan(Vector&lt;Int64&gt;, Vector&lt;Int64&gt;)","pos":[0,41],"source":"GreaterThan(Vector<Int64>, Vector<Int64>)"}]},{"pos":[59376,59419],"content":"GreaterThan(Vector<Single>, Vector<Single>)","needQuote":true,"nodes":[{"content":"GreaterThan(Vector&lt;Single&gt;, Vector&lt;Single&gt;)","pos":[0,43],"source":"GreaterThan(Vector<Single>, Vector<Single>)"}]},{"pos":[61116,61152],"content":"GreaterThan<T>(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"GreaterThan&lt;T&gt;(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,36],"source":"GreaterThan<T>(Vector<T>, Vector<T>)"}]},{"pos":[62821,62860],"content":"GreaterThanAll<T>(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"GreaterThanAll&lt;T&gt;(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,39],"source":"GreaterThanAll<T>(Vector<T>, Vector<T>)"}]},{"pos":[64530,64569],"content":"GreaterThanAny<T>(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"GreaterThanAny&lt;T&gt;(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,39],"source":"GreaterThanAny<T>(Vector<T>, Vector<T>)"}]},{"pos":[66302,66352],"content":"GreaterThanOrEqual(Vector<Double>, Vector<Double>)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual(Vector&lt;Double&gt;, Vector&lt;Double&gt;)","pos":[0,50],"source":"GreaterThanOrEqual(Vector<Double>, Vector<Double>)"}]},{"pos":[68171,68219],"content":"GreaterThanOrEqual(Vector<Int32>, Vector<Int32>)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual(Vector&lt;Int32&gt;, Vector&lt;Int32&gt;)","pos":[0,48],"source":"GreaterThanOrEqual(Vector<Int32>, Vector<Int32>)"}]},{"pos":[70024,70072],"content":"GreaterThanOrEqual(Vector<Int64>, Vector<Int64>)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual(Vector&lt;Int64&gt;, Vector&lt;Int64&gt;)","pos":[0,48],"source":"GreaterThanOrEqual(Vector<Int64>, Vector<Int64>)"}]},{"pos":[71877,71927],"content":"GreaterThanOrEqual(Vector<Single>, Vector<Single>)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual(Vector&lt;Single&gt;, Vector&lt;Single&gt;)","pos":[0,50],"source":"GreaterThanOrEqual(Vector<Single>, Vector<Single>)"}]},{"pos":[73701,73744],"content":"GreaterThanOrEqual<T>(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual&lt;T&gt;(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,43],"source":"GreaterThanOrEqual<T>(Vector<T>, Vector<T>)"}]},{"pos":[75490,75536],"content":"GreaterThanOrEqualAll<T>(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqualAll&lt;T&gt;(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,46],"source":"GreaterThanOrEqualAll<T>(Vector<T>, Vector<T>)"}]},{"pos":[77283,77329],"content":"GreaterThanOrEqualAny<T>(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqualAny&lt;T&gt;(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,46],"source":"GreaterThanOrEqualAny<T>(Vector<T>, Vector<T>)"}]},{"pos":[79088,79128],"content":"LessThan(Vector<Double>, Vector<Double>)","needQuote":true,"nodes":[{"content":"LessThan(Vector&lt;Double&gt;, Vector&lt;Double&gt;)","pos":[0,40],"source":"LessThan(Vector<Double>, Vector<Double>)"}]},{"pos":[80837,80875],"content":"LessThan(Vector<Int32>, Vector<Int32>)","needQuote":true,"nodes":[{"content":"LessThan(Vector&lt;Int32&gt;, Vector&lt;Int32&gt;)","pos":[0,38],"source":"LessThan(Vector<Int32>, Vector<Int32>)"}]},{"pos":[82570,82608],"content":"LessThan(Vector<Int64>, Vector<Int64>)","needQuote":true,"nodes":[{"content":"LessThan(Vector&lt;Int64&gt;, Vector&lt;Int64&gt;)","pos":[0,38],"source":"LessThan(Vector<Int64>, Vector<Int64>)"}]},{"pos":[84303,84343],"content":"LessThan(Vector<Single>, Vector<Single>)","needQuote":true,"nodes":[{"content":"LessThan(Vector&lt;Single&gt;, Vector&lt;Single&gt;)","pos":[0,40],"source":"LessThan(Vector<Single>, Vector<Single>)"}]},{"pos":[86007,86040],"content":"LessThan<T>(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"LessThan&lt;T&gt;(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,33],"source":"LessThan<T>(Vector<T>, Vector<T>)"}]},{"pos":[87676,87712],"content":"LessThanAll<T>(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"LessThanAll&lt;T&gt;(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,36],"source":"LessThanAll<T>(Vector<T>, Vector<T>)"}]},{"pos":[89349,89385],"content":"LessThanAny<T>(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"LessThanAny&lt;T&gt;(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,36],"source":"LessThanAny<T>(Vector<T>, Vector<T>)"}]},{"pos":[91085,91132],"content":"LessThanOrEqual(Vector<Double>, Vector<Double>)","needQuote":true,"nodes":[{"content":"LessThanOrEqual(Vector&lt;Double&gt;, Vector&lt;Double&gt;)","pos":[0,47],"source":"LessThanOrEqual(Vector<Double>, Vector<Double>)"}]},{"pos":[92918,92963],"content":"LessThanOrEqual(Vector<Int32>, Vector<Int32>)","needQuote":true,"nodes":[{"content":"LessThanOrEqual(Vector&lt;Int32&gt;, Vector&lt;Int32&gt;)","pos":[0,45],"source":"LessThanOrEqual(Vector<Int32>, Vector<Int32>)"}]},{"pos":[94735,94780],"content":"LessThanOrEqual(Vector<Int64>, Vector<Int64>)","needQuote":true,"nodes":[{"content":"LessThanOrEqual(Vector&lt;Int64&gt;, Vector&lt;Int64&gt;)","pos":[0,45],"source":"LessThanOrEqual(Vector<Int64>, Vector<Int64>)"}]},{"pos":[96552,96599],"content":"LessThanOrEqual(Vector<Single>, Vector<Single>)","needQuote":true,"nodes":[{"content":"LessThanOrEqual(Vector&lt;Single&gt;, Vector&lt;Single&gt;)","pos":[0,47],"source":"LessThanOrEqual(Vector<Single>, Vector<Single>)"}]},{"pos":[98340,98380],"content":"LessThanOrEqual<T>(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"LessThanOrEqual&lt;T&gt;(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,40],"source":"LessThanOrEqual<T>(Vector<T>, Vector<T>)"}]},{"pos":[100093,100136],"content":"LessThanOrEqualAll<T>(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"LessThanOrEqualAll&lt;T&gt;(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,43],"source":"LessThanOrEqualAll<T>(Vector<T>, Vector<T>)"}]},{"pos":[101850,101893],"content":"LessThanOrEqualAny<T>(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"LessThanOrEqualAny&lt;T&gt;(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,43],"source":"LessThanOrEqualAny<T>(Vector<T>, Vector<T>)"}]},{"pos":[103562,103590],"content":"Max<T>(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"Max&lt;T&gt;(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,28],"source":"Max<T>(Vector<T>, Vector<T>)"}]},{"pos":[105162,105190],"content":"Min<T>(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"Min&lt;T&gt;(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,28],"source":"Min<T>(Vector<T>, Vector<T>)"}]},{"pos":[106705,106730],"content":"Multiply<T>(T, Vector<T>)","needQuote":true,"nodes":[{"content":"Multiply&lt;T&gt;(T, Vector&lt;T&gt;)","pos":[0,25],"source":"Multiply<T>(T, Vector<T>)"}]},{"pos":[108163,108188],"content":"Multiply<T>(Vector<T>, T)","needQuote":true,"nodes":[{"content":"Multiply&lt;T&gt;(Vector&lt;T&gt;, T)","pos":[0,25],"source":"Multiply<T>(Vector<T>, T)"}]},{"pos":[109693,109726],"content":"Multiply<T>(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"Multiply&lt;T&gt;(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,33],"source":"Multiply<T>(Vector<T>, Vector<T>)"}]},{"pos":[111263,111283],"content":"Negate<T>(Vector<T>)","needQuote":true,"nodes":[{"content":"Negate&lt;T&gt;(Vector&lt;T&gt;)","pos":[0,20],"source":"Negate<T>(Vector<T>)"}]},{"pos":[112639,112667],"content":"OnesComplement<T>(Vector<T>)","needQuote":true,"nodes":[{"content":"OnesComplement&lt;T&gt;(Vector&lt;T&gt;)","pos":[0,28],"source":"OnesComplement<T>(Vector<T>)"}]},{"pos":[114075,114099],"content":"SquareRoot<T>(Vector<T>)","needQuote":true,"nodes":[{"content":"SquareRoot&lt;T&gt;(Vector&lt;T&gt;)","pos":[0,24],"source":"SquareRoot<T>(Vector<T>)"}]},{"pos":[115553,115586],"content":"Subtract<T>(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"Subtract&lt;T&gt;(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,33],"source":"Subtract<T>(Vector<T>, Vector<T>)"}]},{"pos":[117198,117226],"content":"Xor<T>(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"Xor&lt;T&gt;(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,28],"source":"Xor<T>(Vector<T>, Vector<T>)"}]},{"pos":[118558,118573],"content":"System.Numerics","needQuote":true,"nodes":[{"content":"System.Numerics","pos":[0,15]}]},{"pos":[118729,118735],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[118904,118914],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[119043,119051],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[119154,119155],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119202,119203],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119293,119301],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[119404,119405],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119452,119453],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119635,119649],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[119806,119812],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[119911,119912],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119982,119988],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[120073,120074],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[120177,120183],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[120282,120283],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[120353,120359],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[120444,120445],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[120655,120677],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[120871,120877],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[120976,120977],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[121047,121053],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[121139,121140]},{"pos":[121218,121224],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[121309,121310],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[121427,121433],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[121532,121533],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[121603,121609],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[121695,121696]},{"pos":[121774,121780],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[121865,121866],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122094,122125],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[122346,122361],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[122478,122479],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[122549,122555],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[122641,122642]},{"pos":[122720,122726],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[122811,122812],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122938,122953],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[123070,123071],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123141,123147],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[123233,123234]},{"pos":[123312,123318],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[123403,123404],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123566,123579],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[123717,123728],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[123837,123838],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123885,123886],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123979,123990],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[124099,124100],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[124147,124148],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[124302,124311],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[124437,124444],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[124545,124546],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[124593,124594],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[124683,124690],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[124791,124792],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[124839,124840],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[125010,125027],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[125177,125192],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[125309,125310],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125357,125358],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[125455,125470],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[125587,125588],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125635,125636],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[125737,125743],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[125883,125890],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[126093,126102],"content":"Vector<T>","needQuote":true,"nodes":[{"content":"Vector&lt;T&gt;","pos":[0,9],"source":"Vector<T>"}]},{"pos":[126326,126332],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"pos":[126405,126406],"content":"<","needQuote":true,"nodes":[]},{"pos":[126453,126454],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[126600,126606],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"content":"(Of","pos":[126680,126683]},{"pos":[126742,126743],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[126790,126791],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126954,126963],"content":"Vector<T>","needQuote":true,"nodes":[{"content":"Vector&lt;T&gt;","pos":[0,9],"source":"Vector<T>"}]},{"pos":[127187,127193],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"pos":[127266,127267],"content":"<","needQuote":true,"nodes":[]},{"pos":[127314,127315],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[127461,127467],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"content":"(Of","pos":[127541,127544]},{"pos":[127603,127604],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[127651,127652],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127856,127868],"content":"Vector<Byte>","needQuote":true,"nodes":[{"content":"Vector&lt;Byte&gt;","pos":[0,12],"source":"Vector<Byte>"}]},{"pos":[128121,128127],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"pos":[128200,128201],"content":"<","needQuote":true,"nodes":[]},{"pos":[128269,128273],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[128453,128459],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"content":"(Of","pos":[128533,128536]},{"pos":[128616,128620],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[128701,128702],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[128910,128924],"content":"Vector<Double>","needQuote":true,"nodes":[{"content":"Vector&lt;Double&gt;","pos":[0,14],"source":"Vector<Double>"}]},{"pos":[129187,129193],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"pos":[129266,129267],"content":"<","needQuote":true,"nodes":[]},{"pos":[129337,129343],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[129527,129533],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"content":"(Of","pos":[129607,129610]},{"pos":[129692,129698],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[129783,129784],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[129990,130003],"content":"Vector<Int16>","needQuote":true,"nodes":[{"content":"Vector&lt;Int16&gt;","pos":[0,13],"source":"Vector<Int16>"}]},{"pos":[130261,130267],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"pos":[130340,130341],"content":"<","needQuote":true,"nodes":[]},{"pos":[130410,130415],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[130597,130603],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"content":"(Of","pos":[130677,130680]},{"pos":[130761,130766],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[130849,130850],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[131056,131069],"content":"Vector<Int32>","needQuote":true,"nodes":[{"content":"Vector&lt;Int32&gt;","pos":[0,13],"source":"Vector<Int32>"}]},{"pos":[131327,131333],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"pos":[131406,131407],"content":"<","needQuote":true,"nodes":[]},{"pos":[131476,131481],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[131663,131669],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"content":"(Of","pos":[131743,131746]},{"pos":[131827,131832],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[131915,131916],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[132122,132135],"content":"Vector<Int64>","needQuote":true,"nodes":[{"content":"Vector&lt;Int64&gt;","pos":[0,13],"source":"Vector<Int64>"}]},{"pos":[132393,132399],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"pos":[132472,132473],"content":"<","needQuote":true,"nodes":[]},{"pos":[132542,132547],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[132729,132735],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"content":"(Of","pos":[132809,132812]},{"pos":[132893,132898],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[132981,132982],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[133188,133201],"content":"Vector<SByte>","needQuote":true,"nodes":[{"content":"Vector&lt;SByte&gt;","pos":[0,13],"source":"Vector<SByte>"}]},{"pos":[133459,133465],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"pos":[133538,133539],"content":"<","needQuote":true,"nodes":[]},{"pos":[133608,133613],"content":"SByte","needQuote":true,"nodes":[{"content":"SByte","pos":[0,5]}]},{"pos":[133795,133801],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"content":"(Of","pos":[133875,133878]},{"pos":[133959,133964],"content":"SByte","needQuote":true,"nodes":[{"content":"SByte","pos":[0,5]}]},{"pos":[134047,134048],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[134256,134270],"content":"Vector<Single>","needQuote":true,"nodes":[{"content":"Vector&lt;Single&gt;","pos":[0,14],"source":"Vector<Single>"}]},{"pos":[134533,134539],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"pos":[134612,134613],"content":"<","needQuote":true,"nodes":[]},{"pos":[134683,134689],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[134873,134879],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"content":"(Of","pos":[134953,134956]},{"pos":[135038,135044],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[135129,135130],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[135338,135352],"content":"Vector<UInt16>","needQuote":true,"nodes":[{"content":"Vector&lt;UInt16&gt;","pos":[0,14],"source":"Vector<UInt16>"}]},{"pos":[135615,135621],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"pos":[135694,135695],"content":"<","needQuote":true,"nodes":[]},{"pos":[135765,135771],"content":"UInt16","needQuote":true,"nodes":[{"content":"UInt16","pos":[0,6]}]},{"pos":[135955,135961],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"content":"(Of","pos":[136035,136038]},{"pos":[136120,136126],"content":"UInt16","needQuote":true,"nodes":[{"content":"UInt16","pos":[0,6]}]},{"pos":[136211,136212],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[136420,136434],"content":"Vector<UInt32>","needQuote":true,"nodes":[{"content":"Vector&lt;UInt32&gt;","pos":[0,14],"source":"Vector<UInt32>"}]},{"pos":[136697,136703],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"pos":[136776,136777],"content":"<","needQuote":true,"nodes":[]},{"pos":[136847,136853],"content":"UInt32","needQuote":true,"nodes":[{"content":"UInt32","pos":[0,6]}]},{"pos":[137037,137043],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"content":"(Of","pos":[137117,137120]},{"pos":[137202,137208],"content":"UInt32","needQuote":true,"nodes":[{"content":"UInt32","pos":[0,6]}]},{"pos":[137293,137294],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[137502,137516],"content":"Vector<UInt64>","needQuote":true,"nodes":[{"content":"Vector&lt;UInt64&gt;","pos":[0,14],"source":"Vector<UInt64>"}]},{"pos":[137779,137785],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"pos":[137858,137859],"content":"<","needQuote":true,"nodes":[]},{"pos":[137929,137935],"content":"UInt64","needQuote":true,"nodes":[{"content":"UInt64","pos":[0,6]}]},{"pos":[138119,138125],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"content":"(Of","pos":[138199,138202]},{"pos":[138284,138290],"content":"UInt64","needQuote":true,"nodes":[{"content":"UInt64","pos":[0,6]}]},{"pos":[138375,138376],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[138469,138470],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[138540,138541],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]}],"content":"items:\n- uid: System.Numerics.Vector\n  commentId: T:System.Numerics.Vector\n  id: Vector\n  parent: System.Numerics\n  children:\n  - System.Numerics.Vector.Abs``1(System.Numerics.Vector{``0})\n  - System.Numerics.Vector.Add``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  - System.Numerics.Vector.AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  - System.Numerics.Vector.AsVectorByte``1(System.Numerics.Vector{``0})\n  - System.Numerics.Vector.AsVectorDouble``1(System.Numerics.Vector{``0})\n  - System.Numerics.Vector.AsVectorInt16``1(System.Numerics.Vector{``0})\n  - System.Numerics.Vector.AsVectorInt32``1(System.Numerics.Vector{``0})\n  - System.Numerics.Vector.AsVectorInt64``1(System.Numerics.Vector{``0})\n  - System.Numerics.Vector.AsVectorSByte``1(System.Numerics.Vector{``0})\n  - System.Numerics.Vector.AsVectorSingle``1(System.Numerics.Vector{``0})\n  - System.Numerics.Vector.AsVectorUInt16``1(System.Numerics.Vector{``0})\n  - System.Numerics.Vector.AsVectorUInt32``1(System.Numerics.Vector{``0})\n  - System.Numerics.Vector.AsVectorUInt64``1(System.Numerics.Vector{``0})\n  - System.Numerics.Vector.BitwiseAnd``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  - System.Numerics.Vector.BitwiseOr``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  - System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})\n  - System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})\n  - System.Numerics.Vector.ConditionalSelect``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  - System.Numerics.Vector.Divide``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  - System.Numerics.Vector.Dot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  - System.Numerics.Vector.Equals(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})\n  - System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})\n  - System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})\n  - System.Numerics.Vector.Equals(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})\n  - System.Numerics.Vector.Equals``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  - System.Numerics.Vector.EqualsAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  - System.Numerics.Vector.EqualsAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  - System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})\n  - System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})\n  - System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})\n  - System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})\n  - System.Numerics.Vector.GreaterThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  - System.Numerics.Vector.GreaterThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  - System.Numerics.Vector.GreaterThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  - System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})\n  - System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})\n  - System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})\n  - System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})\n  - System.Numerics.Vector.GreaterThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  - System.Numerics.Vector.GreaterThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  - System.Numerics.Vector.GreaterThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  - System.Numerics.Vector.IsHardwareAccelerated\n  - System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})\n  - System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})\n  - System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})\n  - System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})\n  - System.Numerics.Vector.LessThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  - System.Numerics.Vector.LessThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  - System.Numerics.Vector.LessThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  - System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})\n  - System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})\n  - System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})\n  - System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})\n  - System.Numerics.Vector.LessThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  - System.Numerics.Vector.LessThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  - System.Numerics.Vector.LessThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  - System.Numerics.Vector.Max``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  - System.Numerics.Vector.Min``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  - System.Numerics.Vector.Multiply``1(``0,System.Numerics.Vector{``0})\n  - System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},``0)\n  - System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  - System.Numerics.Vector.Negate``1(System.Numerics.Vector{``0})\n  - System.Numerics.Vector.OnesComplement``1(System.Numerics.Vector{``0})\n  - System.Numerics.Vector.SquareRoot``1(System.Numerics.Vector{``0})\n  - System.Numerics.Vector.Subtract``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  - System.Numerics.Vector.Xor``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  langs:\n  - csharp\n  - vb\n  name: Vector\n  nameWithType: Vector\n  fullName: System.Numerics.Vector\n  type: Class\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Vector\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 194\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public class Vector\n    content.vb: Public Class Vector\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n- uid: System.Numerics.Vector.IsHardwareAccelerated\n  commentId: P:System.Numerics.Vector.IsHardwareAccelerated\n  id: IsHardwareAccelerated\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: IsHardwareAccelerated\n  nameWithType: Vector.IsHardwareAccelerated\n  fullName: System.Numerics.Vector.IsHardwareAccelerated\n  type: Property\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsHardwareAccelerated\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 196\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static bool IsHardwareAccelerated { get; }\n    content.vb: Public Shared ReadOnly Property IsHardwareAccelerated As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n- uid: System.Numerics.Vector.Abs``1(System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.Abs``1(System.Numerics.Vector{``0})\n  id: Abs``1(System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: Abs<T>(Vector<T>)\n  nameWithType: Vector.Abs<T>(Vector<T>)\n  fullName: System.Numerics.Vector.Abs<T>(System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Abs\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 197\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static Vector<T> Abs<T>(Vector<T> value)where T : struct'\n    content.vb: Public Shared Function Abs(Of T As Structure)(value As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{{T}}\n  nameWithType.vb: Vector.Abs(Of T)(Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.Abs(Of T)(System.Numerics.Vector(Of T))\n  name.vb: Abs(Of T)(Vector(Of T))\n- uid: System.Numerics.Vector.Add``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.Add``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  id: Add``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: Add<T>(Vector<T>, Vector<T>)\n  nameWithType: Vector.Add<T>(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector.Add<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 198\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static Vector<T> Add<T>(Vector<T> left, Vector<T> right)where T : struct'\n    content.vb: Public Shared Function Add(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{{T}}\n    - id: right\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{{T}}\n  nameWithType.vb: Vector.Add(Of T)(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.Add(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: Add(Of T)(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector.AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  id: AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: AndNot<T>(Vector<T>, Vector<T>)\n  nameWithType: Vector.AndNot<T>(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector.AndNot<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AndNot\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 199\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static Vector<T> AndNot<T>(Vector<T> left, Vector<T> right)where T : struct'\n    content.vb: Public Shared Function AndNot(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{{T}}\n    - id: right\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{{T}}\n  nameWithType.vb: Vector.AndNot(Of T)(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.AndNot(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: AndNot(Of T)(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector.AsVectorByte``1(System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.AsVectorByte``1(System.Numerics.Vector{``0})\n  id: AsVectorByte``1(System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: AsVectorByte<T>(Vector<T>)\n  nameWithType: Vector.AsVectorByte<T>(Vector<T>)\n  fullName: System.Numerics.Vector.AsVectorByte<T>(System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsVectorByte\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 200\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static Vector<byte> AsVectorByte<T>(Vector<T> value)where T : struct'\n    content.vb: Public Shared Function AsVectorByte(Of T As Structure)(value As Vector(Of T)) As Vector(Of Byte)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{System.Byte}\n  nameWithType.vb: Vector.AsVectorByte(Of T)(Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.AsVectorByte(Of T)(System.Numerics.Vector(Of T))\n  name.vb: AsVectorByte(Of T)(Vector(Of T))\n- uid: System.Numerics.Vector.AsVectorDouble``1(System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.AsVectorDouble``1(System.Numerics.Vector{``0})\n  id: AsVectorDouble``1(System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: AsVectorDouble<T>(Vector<T>)\n  nameWithType: Vector.AsVectorDouble<T>(Vector<T>)\n  fullName: System.Numerics.Vector.AsVectorDouble<T>(System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsVectorDouble\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 201\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static Vector<double> AsVectorDouble<T>(Vector<T> value)where T : struct'\n    content.vb: Public Shared Function AsVectorDouble(Of T As Structure)(value As Vector(Of T)) As Vector(Of Double)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{System.Double}\n  nameWithType.vb: Vector.AsVectorDouble(Of T)(Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.AsVectorDouble(Of T)(System.Numerics.Vector(Of T))\n  name.vb: AsVectorDouble(Of T)(Vector(Of T))\n- uid: System.Numerics.Vector.AsVectorInt16``1(System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.AsVectorInt16``1(System.Numerics.Vector{``0})\n  id: AsVectorInt16``1(System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: AsVectorInt16<T>(Vector<T>)\n  nameWithType: Vector.AsVectorInt16<T>(Vector<T>)\n  fullName: System.Numerics.Vector.AsVectorInt16<T>(System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsVectorInt16\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 202\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static Vector<short> AsVectorInt16<T>(Vector<T> value)where T : struct'\n    content.vb: Public Shared Function AsVectorInt16(Of T As Structure)(value As Vector(Of T)) As Vector(Of Short)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{System.Int16}\n  nameWithType.vb: Vector.AsVectorInt16(Of T)(Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.AsVectorInt16(Of T)(System.Numerics.Vector(Of T))\n  name.vb: AsVectorInt16(Of T)(Vector(Of T))\n- uid: System.Numerics.Vector.AsVectorInt32``1(System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.AsVectorInt32``1(System.Numerics.Vector{``0})\n  id: AsVectorInt32``1(System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: AsVectorInt32<T>(Vector<T>)\n  nameWithType: Vector.AsVectorInt32<T>(Vector<T>)\n  fullName: System.Numerics.Vector.AsVectorInt32<T>(System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsVectorInt32\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 203\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static Vector<int> AsVectorInt32<T>(Vector<T> value)where T : struct'\n    content.vb: Public Shared Function AsVectorInt32(Of T As Structure)(value As Vector(Of T)) As Vector(Of Integer)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{System.Int32}\n  nameWithType.vb: Vector.AsVectorInt32(Of T)(Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.AsVectorInt32(Of T)(System.Numerics.Vector(Of T))\n  name.vb: AsVectorInt32(Of T)(Vector(Of T))\n- uid: System.Numerics.Vector.AsVectorInt64``1(System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.AsVectorInt64``1(System.Numerics.Vector{``0})\n  id: AsVectorInt64``1(System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: AsVectorInt64<T>(Vector<T>)\n  nameWithType: Vector.AsVectorInt64<T>(Vector<T>)\n  fullName: System.Numerics.Vector.AsVectorInt64<T>(System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsVectorInt64\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 204\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static Vector<long> AsVectorInt64<T>(Vector<T> value)where T : struct'\n    content.vb: Public Shared Function AsVectorInt64(Of T As Structure)(value As Vector(Of T)) As Vector(Of Long)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{System.Int64}\n  nameWithType.vb: Vector.AsVectorInt64(Of T)(Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.AsVectorInt64(Of T)(System.Numerics.Vector(Of T))\n  name.vb: AsVectorInt64(Of T)(Vector(Of T))\n- uid: System.Numerics.Vector.AsVectorSByte``1(System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.AsVectorSByte``1(System.Numerics.Vector{``0})\n  id: AsVectorSByte``1(System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: AsVectorSByte<T>(Vector<T>)\n  nameWithType: Vector.AsVectorSByte<T>(Vector<T>)\n  fullName: System.Numerics.Vector.AsVectorSByte<T>(System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsVectorSByte\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 205\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static Vector<sbyte> AsVectorSByte<T>(Vector<T> value)where T : struct\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function AsVectorSByte(Of T As Structure)(value As Vector(Of T)) As Vector(Of SByte)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{System.SByte}\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  nameWithType.vb: Vector.AsVectorSByte(Of T)(Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.AsVectorSByte(Of T)(System.Numerics.Vector(Of T))\n  name.vb: AsVectorSByte(Of T)(Vector(Of T))\n- uid: System.Numerics.Vector.AsVectorSingle``1(System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.AsVectorSingle``1(System.Numerics.Vector{``0})\n  id: AsVectorSingle``1(System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: AsVectorSingle<T>(Vector<T>)\n  nameWithType: Vector.AsVectorSingle<T>(Vector<T>)\n  fullName: System.Numerics.Vector.AsVectorSingle<T>(System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsVectorSingle\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 207\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static Vector<float> AsVectorSingle<T>(Vector<T> value)where T : struct'\n    content.vb: Public Shared Function AsVectorSingle(Of T As Structure)(value As Vector(Of T)) As Vector(Of Single)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{System.Single}\n  nameWithType.vb: Vector.AsVectorSingle(Of T)(Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.AsVectorSingle(Of T)(System.Numerics.Vector(Of T))\n  name.vb: AsVectorSingle(Of T)(Vector(Of T))\n- uid: System.Numerics.Vector.AsVectorUInt16``1(System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.AsVectorUInt16``1(System.Numerics.Vector{``0})\n  id: AsVectorUInt16``1(System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: AsVectorUInt16<T>(Vector<T>)\n  nameWithType: Vector.AsVectorUInt16<T>(Vector<T>)\n  fullName: System.Numerics.Vector.AsVectorUInt16<T>(System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsVectorUInt16\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 208\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static Vector<ushort> AsVectorUInt16<T>(Vector<T> value)where T : struct\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function AsVectorUInt16(Of T As Structure)(value As Vector(Of T)) As Vector(Of UShort)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{System.UInt16}\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  nameWithType.vb: Vector.AsVectorUInt16(Of T)(Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.AsVectorUInt16(Of T)(System.Numerics.Vector(Of T))\n  name.vb: AsVectorUInt16(Of T)(Vector(Of T))\n- uid: System.Numerics.Vector.AsVectorUInt32``1(System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.AsVectorUInt32``1(System.Numerics.Vector{``0})\n  id: AsVectorUInt32``1(System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: AsVectorUInt32<T>(Vector<T>)\n  nameWithType: Vector.AsVectorUInt32<T>(Vector<T>)\n  fullName: System.Numerics.Vector.AsVectorUInt32<T>(System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsVectorUInt32\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 210\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static Vector<uint> AsVectorUInt32<T>(Vector<T> value)where T : struct\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function AsVectorUInt32(Of T As Structure)(value As Vector(Of T)) As Vector(Of UInteger)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{System.UInt32}\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  nameWithType.vb: Vector.AsVectorUInt32(Of T)(Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.AsVectorUInt32(Of T)(System.Numerics.Vector(Of T))\n  name.vb: AsVectorUInt32(Of T)(Vector(Of T))\n- uid: System.Numerics.Vector.AsVectorUInt64``1(System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.AsVectorUInt64``1(System.Numerics.Vector{``0})\n  id: AsVectorUInt64``1(System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: AsVectorUInt64<T>(Vector<T>)\n  nameWithType: Vector.AsVectorUInt64<T>(Vector<T>)\n  fullName: System.Numerics.Vector.AsVectorUInt64<T>(System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsVectorUInt64\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 212\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static Vector<ulong> AsVectorUInt64<T>(Vector<T> value)where T : struct\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function AsVectorUInt64(Of T As Structure)(value As Vector(Of T)) As Vector(Of ULong)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{System.UInt64}\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  nameWithType.vb: Vector.AsVectorUInt64(Of T)(Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.AsVectorUInt64(Of T)(System.Numerics.Vector(Of T))\n  name.vb: AsVectorUInt64(Of T)(Vector(Of T))\n- uid: System.Numerics.Vector.BitwiseAnd``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.BitwiseAnd``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  id: BitwiseAnd``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: BitwiseAnd<T>(Vector<T>, Vector<T>)\n  nameWithType: Vector.BitwiseAnd<T>(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector.BitwiseAnd<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BitwiseAnd\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 214\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static Vector<T> BitwiseAnd<T>(Vector<T> left, Vector<T> right)where T : struct'\n    content.vb: Public Shared Function BitwiseAnd(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{{T}}\n    - id: right\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{{T}}\n  nameWithType.vb: Vector.BitwiseAnd(Of T)(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.BitwiseAnd(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: BitwiseAnd(Of T)(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector.BitwiseOr``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.BitwiseOr``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  id: BitwiseOr``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: BitwiseOr<T>(Vector<T>, Vector<T>)\n  nameWithType: Vector.BitwiseOr<T>(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector.BitwiseOr<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BitwiseOr\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 215\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static Vector<T> BitwiseOr<T>(Vector<T> left, Vector<T> right)where T : struct'\n    content.vb: Public Shared Function BitwiseOr(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{{T}}\n    - id: right\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{{T}}\n  nameWithType.vb: Vector.BitwiseOr(Of T)(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.BitwiseOr(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: BitwiseOr(Of T)(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})\n  commentId: M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})\n  id: ConditionalSelect(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: ConditionalSelect(Vector<Int32>, Vector<Single>, Vector<Single>)\n  nameWithType: Vector.ConditionalSelect(Vector<Int32>, Vector<Single>, Vector<Single>)\n  fullName: System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector<System.Int32>, System.Numerics.Vector<System.Single>, System.Numerics.Vector<System.Single>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConditionalSelect\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 216\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<float> ConditionalSelect(Vector<int> condition, Vector<float> left, Vector<float> right)\n    content.vb: Public Shared Function ConditionalSelect(condition As Vector(Of Integer), left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Single)\n    parameters:\n    - id: condition\n      type: System.Numerics.Vector{System.Int32}\n    - id: left\n      type: System.Numerics.Vector{System.Single}\n    - id: right\n      type: System.Numerics.Vector{System.Single}\n    return:\n      type: System.Numerics.Vector{System.Single}\n  nameWithType.vb: Vector.ConditionalSelect(Vector(Of Int32), Vector(Of Single), Vector(Of Single))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector(Of System.Int32), System.Numerics.Vector(Of System.Single), System.Numerics.Vector(Of System.Single))\n  name.vb: ConditionalSelect(Vector(Of Int32), Vector(Of Single), Vector(Of Single))\n- uid: System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})\n  commentId: M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})\n  id: ConditionalSelect(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: ConditionalSelect(Vector<Int64>, Vector<Double>, Vector<Double>)\n  nameWithType: Vector.ConditionalSelect(Vector<Int64>, Vector<Double>, Vector<Double>)\n  fullName: System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector<System.Int64>, System.Numerics.Vector<System.Double>, System.Numerics.Vector<System.Double>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConditionalSelect\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 217\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<double> ConditionalSelect(Vector<long> condition, Vector<double> left, Vector<double> right)\n    content.vb: Public Shared Function ConditionalSelect(condition As Vector(Of Long), left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Double)\n    parameters:\n    - id: condition\n      type: System.Numerics.Vector{System.Int64}\n    - id: left\n      type: System.Numerics.Vector{System.Double}\n    - id: right\n      type: System.Numerics.Vector{System.Double}\n    return:\n      type: System.Numerics.Vector{System.Double}\n  nameWithType.vb: Vector.ConditionalSelect(Vector(Of Int64), Vector(Of Double), Vector(Of Double))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector(Of System.Int64), System.Numerics.Vector(Of System.Double), System.Numerics.Vector(Of System.Double))\n  name.vb: ConditionalSelect(Vector(Of Int64), Vector(Of Double), Vector(Of Double))\n- uid: System.Numerics.Vector.ConditionalSelect``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.ConditionalSelect``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  id: ConditionalSelect``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: ConditionalSelect<T>(Vector<T>, Vector<T>, Vector<T>)\n  nameWithType: Vector.ConditionalSelect<T>(Vector<T>, Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector.ConditionalSelect<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConditionalSelect\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 218\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static Vector<T> ConditionalSelect<T>(Vector<T> condition, Vector<T> left, Vector<T> right)where T : struct'\n    content.vb: Public Shared Function ConditionalSelect(Of T As Structure)(condition As Vector(Of T), left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: condition\n      type: System.Numerics.Vector{{T}}\n    - id: left\n      type: System.Numerics.Vector{{T}}\n    - id: right\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{{T}}\n  nameWithType.vb: Vector.ConditionalSelect(Of T)(Vector(Of T), Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.ConditionalSelect(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: ConditionalSelect(Of T)(Vector(Of T), Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector.Divide``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.Divide``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  id: Divide``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: Divide<T>(Vector<T>, Vector<T>)\n  nameWithType: Vector.Divide<T>(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector.Divide<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Divide\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 219\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static Vector<T> Divide<T>(Vector<T> left, Vector<T> right)where T : struct'\n    content.vb: Public Shared Function Divide(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{{T}}\n    - id: right\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{{T}}\n  nameWithType.vb: Vector.Divide(Of T)(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.Divide(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: Divide(Of T)(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector.Dot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.Dot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  id: Dot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: Dot<T>(Vector<T>, Vector<T>)\n  nameWithType: Vector.Dot<T>(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector.Dot<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dot\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 220\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static T Dot<T>(Vector<T> left, Vector<T> right)where T : struct'\n    content.vb: Public Shared Function Dot(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As T\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{{T}}\n    - id: right\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: '{T}'\n  nameWithType.vb: Vector.Dot(Of T)(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.Dot(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: Dot(Of T)(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector.Equals(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})\n  commentId: M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})\n  id: Equals(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: Equals(Vector<Double>, Vector<Double>)\n  nameWithType: Vector.Equals(Vector<Double>, Vector<Double>)\n  fullName: System.Numerics.Vector.Equals(System.Numerics.Vector<System.Double>, System.Numerics.Vector<System.Double>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 221\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<long> Equals(Vector<double> left, Vector<double> right)\n    content.vb: Public Shared Function Equals(left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Long)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{System.Double}\n    - id: right\n      type: System.Numerics.Vector{System.Double}\n    return:\n      type: System.Numerics.Vector{System.Int64}\n  nameWithType.vb: Vector.Equals(Vector(Of Double), Vector(Of Double))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.Equals(System.Numerics.Vector(Of System.Double), System.Numerics.Vector(Of System.Double))\n  name.vb: Equals(Vector(Of Double), Vector(Of Double))\n- uid: System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})\n  commentId: M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})\n  id: Equals(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: Equals(Vector<Int32>, Vector<Int32>)\n  nameWithType: Vector.Equals(Vector<Int32>, Vector<Int32>)\n  fullName: System.Numerics.Vector.Equals(System.Numerics.Vector<System.Int32>, System.Numerics.Vector<System.Int32>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 222\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<int> Equals(Vector<int> left, Vector<int> right)\n    content.vb: Public Shared Function Equals(left As Vector(Of Integer), right As Vector(Of Integer)) As Vector(Of Integer)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{System.Int32}\n    - id: right\n      type: System.Numerics.Vector{System.Int32}\n    return:\n      type: System.Numerics.Vector{System.Int32}\n  nameWithType.vb: Vector.Equals(Vector(Of Int32), Vector(Of Int32))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.Equals(System.Numerics.Vector(Of System.Int32), System.Numerics.Vector(Of System.Int32))\n  name.vb: Equals(Vector(Of Int32), Vector(Of Int32))\n- uid: System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})\n  commentId: M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})\n  id: Equals(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: Equals(Vector<Int64>, Vector<Int64>)\n  nameWithType: Vector.Equals(Vector<Int64>, Vector<Int64>)\n  fullName: System.Numerics.Vector.Equals(System.Numerics.Vector<System.Int64>, System.Numerics.Vector<System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 223\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<long> Equals(Vector<long> left, Vector<long> right)\n    content.vb: Public Shared Function Equals(left As Vector(Of Long), right As Vector(Of Long)) As Vector(Of Long)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{System.Int64}\n    - id: right\n      type: System.Numerics.Vector{System.Int64}\n    return:\n      type: System.Numerics.Vector{System.Int64}\n  nameWithType.vb: Vector.Equals(Vector(Of Int64), Vector(Of Int64))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.Equals(System.Numerics.Vector(Of System.Int64), System.Numerics.Vector(Of System.Int64))\n  name.vb: Equals(Vector(Of Int64), Vector(Of Int64))\n- uid: System.Numerics.Vector.Equals(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})\n  commentId: M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})\n  id: Equals(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: Equals(Vector<Single>, Vector<Single>)\n  nameWithType: Vector.Equals(Vector<Single>, Vector<Single>)\n  fullName: System.Numerics.Vector.Equals(System.Numerics.Vector<System.Single>, System.Numerics.Vector<System.Single>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 224\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<int> Equals(Vector<float> left, Vector<float> right)\n    content.vb: Public Shared Function Equals(left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Integer)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{System.Single}\n    - id: right\n      type: System.Numerics.Vector{System.Single}\n    return:\n      type: System.Numerics.Vector{System.Int32}\n  nameWithType.vb: Vector.Equals(Vector(Of Single), Vector(Of Single))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.Equals(System.Numerics.Vector(Of System.Single), System.Numerics.Vector(Of System.Single))\n  name.vb: Equals(Vector(Of Single), Vector(Of Single))\n- uid: System.Numerics.Vector.Equals``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.Equals``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  id: Equals``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: Equals<T>(Vector<T>, Vector<T>)\n  nameWithType: Vector.Equals<T>(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector.Equals<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 225\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static Vector<T> Equals<T>(Vector<T> left, Vector<T> right)where T : struct'\n    content.vb: Public Shared Function Equals(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{{T}}\n    - id: right\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{{T}}\n  nameWithType.vb: Vector.Equals(Of T)(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.Equals(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: Equals(Of T)(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector.EqualsAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.EqualsAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  id: EqualsAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: EqualsAll<T>(Vector<T>, Vector<T>)\n  nameWithType: Vector.EqualsAll<T>(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector.EqualsAll<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EqualsAll\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 226\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static bool EqualsAll<T>(Vector<T> left, Vector<T> right)where T : struct'\n    content.vb: Public Shared Function EqualsAll(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{{T}}\n    - id: right\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Boolean\n  nameWithType.vb: Vector.EqualsAll(Of T)(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.EqualsAll(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: EqualsAll(Of T)(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector.EqualsAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.EqualsAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  id: EqualsAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: EqualsAny<T>(Vector<T>, Vector<T>)\n  nameWithType: Vector.EqualsAny<T>(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector.EqualsAny<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EqualsAny\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 227\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static bool EqualsAny<T>(Vector<T> left, Vector<T> right)where T : struct'\n    content.vb: Public Shared Function EqualsAny(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{{T}}\n    - id: right\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Boolean\n  nameWithType.vb: Vector.EqualsAny(Of T)(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.EqualsAny(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: EqualsAny(Of T)(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})\n  commentId: M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})\n  id: GreaterThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(Vector<Double>, Vector<Double>)\n  nameWithType: Vector.GreaterThan(Vector<Double>, Vector<Double>)\n  fullName: System.Numerics.Vector.GreaterThan(System.Numerics.Vector<System.Double>, System.Numerics.Vector<System.Double>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThan\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 228\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<long> GreaterThan(Vector<double> left, Vector<double> right)\n    content.vb: Public Shared Function GreaterThan(left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Long)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{System.Double}\n    - id: right\n      type: System.Numerics.Vector{System.Double}\n    return:\n      type: System.Numerics.Vector{System.Int64}\n  nameWithType.vb: Vector.GreaterThan(Vector(Of Double), Vector(Of Double))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.GreaterThan(System.Numerics.Vector(Of System.Double), System.Numerics.Vector(Of System.Double))\n  name.vb: GreaterThan(Vector(Of Double), Vector(Of Double))\n- uid: System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})\n  commentId: M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})\n  id: GreaterThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(Vector<Int32>, Vector<Int32>)\n  nameWithType: Vector.GreaterThan(Vector<Int32>, Vector<Int32>)\n  fullName: System.Numerics.Vector.GreaterThan(System.Numerics.Vector<System.Int32>, System.Numerics.Vector<System.Int32>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThan\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 229\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<int> GreaterThan(Vector<int> left, Vector<int> right)\n    content.vb: Public Shared Function GreaterThan(left As Vector(Of Integer), right As Vector(Of Integer)) As Vector(Of Integer)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{System.Int32}\n    - id: right\n      type: System.Numerics.Vector{System.Int32}\n    return:\n      type: System.Numerics.Vector{System.Int32}\n  nameWithType.vb: Vector.GreaterThan(Vector(Of Int32), Vector(Of Int32))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.GreaterThan(System.Numerics.Vector(Of System.Int32), System.Numerics.Vector(Of System.Int32))\n  name.vb: GreaterThan(Vector(Of Int32), Vector(Of Int32))\n- uid: System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})\n  commentId: M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})\n  id: GreaterThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(Vector<Int64>, Vector<Int64>)\n  nameWithType: Vector.GreaterThan(Vector<Int64>, Vector<Int64>)\n  fullName: System.Numerics.Vector.GreaterThan(System.Numerics.Vector<System.Int64>, System.Numerics.Vector<System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThan\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 230\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<long> GreaterThan(Vector<long> left, Vector<long> right)\n    content.vb: Public Shared Function GreaterThan(left As Vector(Of Long), right As Vector(Of Long)) As Vector(Of Long)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{System.Int64}\n    - id: right\n      type: System.Numerics.Vector{System.Int64}\n    return:\n      type: System.Numerics.Vector{System.Int64}\n  nameWithType.vb: Vector.GreaterThan(Vector(Of Int64), Vector(Of Int64))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.GreaterThan(System.Numerics.Vector(Of System.Int64), System.Numerics.Vector(Of System.Int64))\n  name.vb: GreaterThan(Vector(Of Int64), Vector(Of Int64))\n- uid: System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})\n  commentId: M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})\n  id: GreaterThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(Vector<Single>, Vector<Single>)\n  nameWithType: Vector.GreaterThan(Vector<Single>, Vector<Single>)\n  fullName: System.Numerics.Vector.GreaterThan(System.Numerics.Vector<System.Single>, System.Numerics.Vector<System.Single>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThan\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 231\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<int> GreaterThan(Vector<float> left, Vector<float> right)\n    content.vb: Public Shared Function GreaterThan(left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Integer)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{System.Single}\n    - id: right\n      type: System.Numerics.Vector{System.Single}\n    return:\n      type: System.Numerics.Vector{System.Int32}\n  nameWithType.vb: Vector.GreaterThan(Vector(Of Single), Vector(Of Single))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.GreaterThan(System.Numerics.Vector(Of System.Single), System.Numerics.Vector(Of System.Single))\n  name.vb: GreaterThan(Vector(Of Single), Vector(Of Single))\n- uid: System.Numerics.Vector.GreaterThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.GreaterThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  id: GreaterThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan<T>(Vector<T>, Vector<T>)\n  nameWithType: Vector.GreaterThan<T>(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector.GreaterThan<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThan\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 232\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static Vector<T> GreaterThan<T>(Vector<T> left, Vector<T> right)where T : struct'\n    content.vb: Public Shared Function GreaterThan(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{{T}}\n    - id: right\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{{T}}\n  nameWithType.vb: Vector.GreaterThan(Of T)(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.GreaterThan(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: GreaterThan(Of T)(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector.GreaterThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.GreaterThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  id: GreaterThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanAll<T>(Vector<T>, Vector<T>)\n  nameWithType: Vector.GreaterThanAll<T>(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector.GreaterThanAll<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThanAll\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 233\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static bool GreaterThanAll<T>(Vector<T> left, Vector<T> right)where T : struct'\n    content.vb: Public Shared Function GreaterThanAll(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{{T}}\n    - id: right\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Boolean\n  nameWithType.vb: Vector.GreaterThanAll(Of T)(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.GreaterThanAll(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: GreaterThanAll(Of T)(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector.GreaterThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.GreaterThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  id: GreaterThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanAny<T>(Vector<T>, Vector<T>)\n  nameWithType: Vector.GreaterThanAny<T>(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector.GreaterThanAny<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThanAny\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 234\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static bool GreaterThanAny<T>(Vector<T> left, Vector<T> right)where T : struct'\n    content.vb: Public Shared Function GreaterThanAny(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{{T}}\n    - id: right\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Boolean\n  nameWithType.vb: Vector.GreaterThanAny(Of T)(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.GreaterThanAny(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: GreaterThanAny(Of T)(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})\n  commentId: M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})\n  id: GreaterThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual(Vector<Double>, Vector<Double>)\n  nameWithType: Vector.GreaterThanOrEqual(Vector<Double>, Vector<Double>)\n  fullName: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector<System.Double>, System.Numerics.Vector<System.Double>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThanOrEqual\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 235\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<long> GreaterThanOrEqual(Vector<double> left, Vector<double> right)\n    content.vb: Public Shared Function GreaterThanOrEqual(left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Long)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{System.Double}\n    - id: right\n      type: System.Numerics.Vector{System.Double}\n    return:\n      type: System.Numerics.Vector{System.Int64}\n  nameWithType.vb: Vector.GreaterThanOrEqual(Vector(Of Double), Vector(Of Double))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector(Of System.Double), System.Numerics.Vector(Of System.Double))\n  name.vb: GreaterThanOrEqual(Vector(Of Double), Vector(Of Double))\n- uid: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})\n  commentId: M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})\n  id: GreaterThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual(Vector<Int32>, Vector<Int32>)\n  nameWithType: Vector.GreaterThanOrEqual(Vector<Int32>, Vector<Int32>)\n  fullName: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector<System.Int32>, System.Numerics.Vector<System.Int32>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThanOrEqual\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 236\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<int> GreaterThanOrEqual(Vector<int> left, Vector<int> right)\n    content.vb: Public Shared Function GreaterThanOrEqual(left As Vector(Of Integer), right As Vector(Of Integer)) As Vector(Of Integer)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{System.Int32}\n    - id: right\n      type: System.Numerics.Vector{System.Int32}\n    return:\n      type: System.Numerics.Vector{System.Int32}\n  nameWithType.vb: Vector.GreaterThanOrEqual(Vector(Of Int32), Vector(Of Int32))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector(Of System.Int32), System.Numerics.Vector(Of System.Int32))\n  name.vb: GreaterThanOrEqual(Vector(Of Int32), Vector(Of Int32))\n- uid: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})\n  commentId: M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})\n  id: GreaterThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual(Vector<Int64>, Vector<Int64>)\n  nameWithType: Vector.GreaterThanOrEqual(Vector<Int64>, Vector<Int64>)\n  fullName: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector<System.Int64>, System.Numerics.Vector<System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThanOrEqual\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 237\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<long> GreaterThanOrEqual(Vector<long> left, Vector<long> right)\n    content.vb: Public Shared Function GreaterThanOrEqual(left As Vector(Of Long), right As Vector(Of Long)) As Vector(Of Long)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{System.Int64}\n    - id: right\n      type: System.Numerics.Vector{System.Int64}\n    return:\n      type: System.Numerics.Vector{System.Int64}\n  nameWithType.vb: Vector.GreaterThanOrEqual(Vector(Of Int64), Vector(Of Int64))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector(Of System.Int64), System.Numerics.Vector(Of System.Int64))\n  name.vb: GreaterThanOrEqual(Vector(Of Int64), Vector(Of Int64))\n- uid: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})\n  commentId: M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})\n  id: GreaterThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual(Vector<Single>, Vector<Single>)\n  nameWithType: Vector.GreaterThanOrEqual(Vector<Single>, Vector<Single>)\n  fullName: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector<System.Single>, System.Numerics.Vector<System.Single>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThanOrEqual\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 238\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<int> GreaterThanOrEqual(Vector<float> left, Vector<float> right)\n    content.vb: Public Shared Function GreaterThanOrEqual(left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Integer)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{System.Single}\n    - id: right\n      type: System.Numerics.Vector{System.Single}\n    return:\n      type: System.Numerics.Vector{System.Int32}\n  nameWithType.vb: Vector.GreaterThanOrEqual(Vector(Of Single), Vector(Of Single))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector(Of System.Single), System.Numerics.Vector(Of System.Single))\n  name.vb: GreaterThanOrEqual(Vector(Of Single), Vector(Of Single))\n- uid: System.Numerics.Vector.GreaterThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.GreaterThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  id: GreaterThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual<T>(Vector<T>, Vector<T>)\n  nameWithType: Vector.GreaterThanOrEqual<T>(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector.GreaterThanOrEqual<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThanOrEqual\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 239\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static Vector<T> GreaterThanOrEqual<T>(Vector<T> left, Vector<T> right)where T : struct'\n    content.vb: Public Shared Function GreaterThanOrEqual(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{{T}}\n    - id: right\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{{T}}\n  nameWithType.vb: Vector.GreaterThanOrEqual(Of T)(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.GreaterThanOrEqual(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: GreaterThanOrEqual(Of T)(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector.GreaterThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.GreaterThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  id: GreaterThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqualAll<T>(Vector<T>, Vector<T>)\n  nameWithType: Vector.GreaterThanOrEqualAll<T>(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector.GreaterThanOrEqualAll<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThanOrEqualAll\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 240\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static bool GreaterThanOrEqualAll<T>(Vector<T> left, Vector<T> right)where T : struct'\n    content.vb: Public Shared Function GreaterThanOrEqualAll(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{{T}}\n    - id: right\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Boolean\n  nameWithType.vb: Vector.GreaterThanOrEqualAll(Of T)(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.GreaterThanOrEqualAll(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: GreaterThanOrEqualAll(Of T)(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector.GreaterThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.GreaterThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  id: GreaterThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqualAny<T>(Vector<T>, Vector<T>)\n  nameWithType: Vector.GreaterThanOrEqualAny<T>(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector.GreaterThanOrEqualAny<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThanOrEqualAny\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 241\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static bool GreaterThanOrEqualAny<T>(Vector<T> left, Vector<T> right)where T : struct'\n    content.vb: Public Shared Function GreaterThanOrEqualAny(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{{T}}\n    - id: right\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Boolean\n  nameWithType.vb: Vector.GreaterThanOrEqualAny(Of T)(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.GreaterThanOrEqualAny(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: GreaterThanOrEqualAny(Of T)(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})\n  commentId: M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})\n  id: LessThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: LessThan(Vector<Double>, Vector<Double>)\n  nameWithType: Vector.LessThan(Vector<Double>, Vector<Double>)\n  fullName: System.Numerics.Vector.LessThan(System.Numerics.Vector<System.Double>, System.Numerics.Vector<System.Double>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThan\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 242\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<long> LessThan(Vector<double> left, Vector<double> right)\n    content.vb: Public Shared Function LessThan(left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Long)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{System.Double}\n    - id: right\n      type: System.Numerics.Vector{System.Double}\n    return:\n      type: System.Numerics.Vector{System.Int64}\n  nameWithType.vb: Vector.LessThan(Vector(Of Double), Vector(Of Double))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.LessThan(System.Numerics.Vector(Of System.Double), System.Numerics.Vector(Of System.Double))\n  name.vb: LessThan(Vector(Of Double), Vector(Of Double))\n- uid: System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})\n  commentId: M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})\n  id: LessThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: LessThan(Vector<Int32>, Vector<Int32>)\n  nameWithType: Vector.LessThan(Vector<Int32>, Vector<Int32>)\n  fullName: System.Numerics.Vector.LessThan(System.Numerics.Vector<System.Int32>, System.Numerics.Vector<System.Int32>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThan\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 243\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<int> LessThan(Vector<int> left, Vector<int> right)\n    content.vb: Public Shared Function LessThan(left As Vector(Of Integer), right As Vector(Of Integer)) As Vector(Of Integer)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{System.Int32}\n    - id: right\n      type: System.Numerics.Vector{System.Int32}\n    return:\n      type: System.Numerics.Vector{System.Int32}\n  nameWithType.vb: Vector.LessThan(Vector(Of Int32), Vector(Of Int32))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.LessThan(System.Numerics.Vector(Of System.Int32), System.Numerics.Vector(Of System.Int32))\n  name.vb: LessThan(Vector(Of Int32), Vector(Of Int32))\n- uid: System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})\n  commentId: M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})\n  id: LessThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: LessThan(Vector<Int64>, Vector<Int64>)\n  nameWithType: Vector.LessThan(Vector<Int64>, Vector<Int64>)\n  fullName: System.Numerics.Vector.LessThan(System.Numerics.Vector<System.Int64>, System.Numerics.Vector<System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThan\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 244\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<long> LessThan(Vector<long> left, Vector<long> right)\n    content.vb: Public Shared Function LessThan(left As Vector(Of Long), right As Vector(Of Long)) As Vector(Of Long)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{System.Int64}\n    - id: right\n      type: System.Numerics.Vector{System.Int64}\n    return:\n      type: System.Numerics.Vector{System.Int64}\n  nameWithType.vb: Vector.LessThan(Vector(Of Int64), Vector(Of Int64))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.LessThan(System.Numerics.Vector(Of System.Int64), System.Numerics.Vector(Of System.Int64))\n  name.vb: LessThan(Vector(Of Int64), Vector(Of Int64))\n- uid: System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})\n  commentId: M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})\n  id: LessThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: LessThan(Vector<Single>, Vector<Single>)\n  nameWithType: Vector.LessThan(Vector<Single>, Vector<Single>)\n  fullName: System.Numerics.Vector.LessThan(System.Numerics.Vector<System.Single>, System.Numerics.Vector<System.Single>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThan\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 245\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<int> LessThan(Vector<float> left, Vector<float> right)\n    content.vb: Public Shared Function LessThan(left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Integer)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{System.Single}\n    - id: right\n      type: System.Numerics.Vector{System.Single}\n    return:\n      type: System.Numerics.Vector{System.Int32}\n  nameWithType.vb: Vector.LessThan(Vector(Of Single), Vector(Of Single))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.LessThan(System.Numerics.Vector(Of System.Single), System.Numerics.Vector(Of System.Single))\n  name.vb: LessThan(Vector(Of Single), Vector(Of Single))\n- uid: System.Numerics.Vector.LessThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.LessThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  id: LessThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: LessThan<T>(Vector<T>, Vector<T>)\n  nameWithType: Vector.LessThan<T>(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector.LessThan<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThan\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 246\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static Vector<T> LessThan<T>(Vector<T> left, Vector<T> right)where T : struct'\n    content.vb: Public Shared Function LessThan(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{{T}}\n    - id: right\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{{T}}\n  nameWithType.vb: Vector.LessThan(Of T)(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.LessThan(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: LessThan(Of T)(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector.LessThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.LessThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  id: LessThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: LessThanAll<T>(Vector<T>, Vector<T>)\n  nameWithType: Vector.LessThanAll<T>(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector.LessThanAll<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThanAll\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 247\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static bool LessThanAll<T>(Vector<T> left, Vector<T> right)where T : struct'\n    content.vb: Public Shared Function LessThanAll(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{{T}}\n    - id: right\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Boolean\n  nameWithType.vb: Vector.LessThanAll(Of T)(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.LessThanAll(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: LessThanAll(Of T)(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector.LessThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.LessThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  id: LessThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: LessThanAny<T>(Vector<T>, Vector<T>)\n  nameWithType: Vector.LessThanAny<T>(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector.LessThanAny<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThanAny\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 248\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static bool LessThanAny<T>(Vector<T> left, Vector<T> right)where T : struct'\n    content.vb: Public Shared Function LessThanAny(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{{T}}\n    - id: right\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Boolean\n  nameWithType.vb: Vector.LessThanAny(Of T)(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.LessThanAny(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: LessThanAny(Of T)(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})\n  commentId: M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})\n  id: LessThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual(Vector<Double>, Vector<Double>)\n  nameWithType: Vector.LessThanOrEqual(Vector<Double>, Vector<Double>)\n  fullName: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector<System.Double>, System.Numerics.Vector<System.Double>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThanOrEqual\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 249\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<long> LessThanOrEqual(Vector<double> left, Vector<double> right)\n    content.vb: Public Shared Function LessThanOrEqual(left As Vector(Of Double), right As Vector(Of Double)) As Vector(Of Long)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{System.Double}\n    - id: right\n      type: System.Numerics.Vector{System.Double}\n    return:\n      type: System.Numerics.Vector{System.Int64}\n  nameWithType.vb: Vector.LessThanOrEqual(Vector(Of Double), Vector(Of Double))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector(Of System.Double), System.Numerics.Vector(Of System.Double))\n  name.vb: LessThanOrEqual(Vector(Of Double), Vector(Of Double))\n- uid: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})\n  commentId: M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})\n  id: LessThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual(Vector<Int32>, Vector<Int32>)\n  nameWithType: Vector.LessThanOrEqual(Vector<Int32>, Vector<Int32>)\n  fullName: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector<System.Int32>, System.Numerics.Vector<System.Int32>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThanOrEqual\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 250\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<int> LessThanOrEqual(Vector<int> left, Vector<int> right)\n    content.vb: Public Shared Function LessThanOrEqual(left As Vector(Of Integer), right As Vector(Of Integer)) As Vector(Of Integer)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{System.Int32}\n    - id: right\n      type: System.Numerics.Vector{System.Int32}\n    return:\n      type: System.Numerics.Vector{System.Int32}\n  nameWithType.vb: Vector.LessThanOrEqual(Vector(Of Int32), Vector(Of Int32))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector(Of System.Int32), System.Numerics.Vector(Of System.Int32))\n  name.vb: LessThanOrEqual(Vector(Of Int32), Vector(Of Int32))\n- uid: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})\n  commentId: M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})\n  id: LessThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual(Vector<Int64>, Vector<Int64>)\n  nameWithType: Vector.LessThanOrEqual(Vector<Int64>, Vector<Int64>)\n  fullName: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector<System.Int64>, System.Numerics.Vector<System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThanOrEqual\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 251\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<long> LessThanOrEqual(Vector<long> left, Vector<long> right)\n    content.vb: Public Shared Function LessThanOrEqual(left As Vector(Of Long), right As Vector(Of Long)) As Vector(Of Long)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{System.Int64}\n    - id: right\n      type: System.Numerics.Vector{System.Int64}\n    return:\n      type: System.Numerics.Vector{System.Int64}\n  nameWithType.vb: Vector.LessThanOrEqual(Vector(Of Int64), Vector(Of Int64))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector(Of System.Int64), System.Numerics.Vector(Of System.Int64))\n  name.vb: LessThanOrEqual(Vector(Of Int64), Vector(Of Int64))\n- uid: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})\n  commentId: M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})\n  id: LessThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual(Vector<Single>, Vector<Single>)\n  nameWithType: Vector.LessThanOrEqual(Vector<Single>, Vector<Single>)\n  fullName: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector<System.Single>, System.Numerics.Vector<System.Single>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThanOrEqual\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 252\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<int> LessThanOrEqual(Vector<float> left, Vector<float> right)\n    content.vb: Public Shared Function LessThanOrEqual(left As Vector(Of Single), right As Vector(Of Single)) As Vector(Of Integer)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{System.Single}\n    - id: right\n      type: System.Numerics.Vector{System.Single}\n    return:\n      type: System.Numerics.Vector{System.Int32}\n  nameWithType.vb: Vector.LessThanOrEqual(Vector(Of Single), Vector(Of Single))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector(Of System.Single), System.Numerics.Vector(Of System.Single))\n  name.vb: LessThanOrEqual(Vector(Of Single), Vector(Of Single))\n- uid: System.Numerics.Vector.LessThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.LessThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  id: LessThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual<T>(Vector<T>, Vector<T>)\n  nameWithType: Vector.LessThanOrEqual<T>(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector.LessThanOrEqual<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThanOrEqual\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 253\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static Vector<T> LessThanOrEqual<T>(Vector<T> left, Vector<T> right)where T : struct'\n    content.vb: Public Shared Function LessThanOrEqual(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{{T}}\n    - id: right\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{{T}}\n  nameWithType.vb: Vector.LessThanOrEqual(Of T)(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.LessThanOrEqual(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: LessThanOrEqual(Of T)(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector.LessThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.LessThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  id: LessThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqualAll<T>(Vector<T>, Vector<T>)\n  nameWithType: Vector.LessThanOrEqualAll<T>(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector.LessThanOrEqualAll<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThanOrEqualAll\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 254\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static bool LessThanOrEqualAll<T>(Vector<T> left, Vector<T> right)where T : struct'\n    content.vb: Public Shared Function LessThanOrEqualAll(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{{T}}\n    - id: right\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Boolean\n  nameWithType.vb: Vector.LessThanOrEqualAll(Of T)(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.LessThanOrEqualAll(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: LessThanOrEqualAll(Of T)(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector.LessThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.LessThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  id: LessThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqualAny<T>(Vector<T>, Vector<T>)\n  nameWithType: Vector.LessThanOrEqualAny<T>(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector.LessThanOrEqualAny<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThanOrEqualAny\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 255\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static bool LessThanOrEqualAny<T>(Vector<T> left, Vector<T> right)where T : struct'\n    content.vb: Public Shared Function LessThanOrEqualAny(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{{T}}\n    - id: right\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Boolean\n  nameWithType.vb: Vector.LessThanOrEqualAny(Of T)(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.LessThanOrEqualAny(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: LessThanOrEqualAny(Of T)(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector.Max``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.Max``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  id: Max``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: Max<T>(Vector<T>, Vector<T>)\n  nameWithType: Vector.Max<T>(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector.Max<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 256\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static Vector<T> Max<T>(Vector<T> left, Vector<T> right)where T : struct'\n    content.vb: Public Shared Function Max(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{{T}}\n    - id: right\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{{T}}\n  nameWithType.vb: Vector.Max(Of T)(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.Max(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: Max(Of T)(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector.Min``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.Min``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  id: Min``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: Min<T>(Vector<T>, Vector<T>)\n  nameWithType: Vector.Min<T>(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector.Min<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 257\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static Vector<T> Min<T>(Vector<T> left, Vector<T> right)where T : struct'\n    content.vb: Public Shared Function Min(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{{T}}\n    - id: right\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{{T}}\n  nameWithType.vb: Vector.Min(Of T)(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.Min(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: Min(Of T)(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector.Multiply``1(``0,System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.Multiply``1(``0,System.Numerics.Vector{``0})\n  id: Multiply``1(``0,System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: Multiply<T>(T, Vector<T>)\n  nameWithType: Vector.Multiply<T>(T, Vector<T>)\n  fullName: System.Numerics.Vector.Multiply<T>(T, System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Multiply\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 258\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static Vector<T> Multiply<T>(T left, Vector<T> right)where T : struct'\n    content.vb: Public Shared Function Multiply(Of T As Structure)(left As T, right As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: left\n      type: '{T}'\n    - id: right\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{{T}}\n  nameWithType.vb: Vector.Multiply(Of T)(T, Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.Multiply(Of T)(T, System.Numerics.Vector(Of T))\n  name.vb: Multiply(Of T)(T, Vector(Of T))\n- uid: System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},``0)\n  commentId: M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},``0)\n  id: Multiply``1(System.Numerics.Vector{``0},``0)\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: Multiply<T>(Vector<T>, T)\n  nameWithType: Vector.Multiply<T>(Vector<T>, T)\n  fullName: System.Numerics.Vector.Multiply<T>(System.Numerics.Vector<T>, T)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Multiply\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 259\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static Vector<T> Multiply<T>(Vector<T> left, T right)where T : struct'\n    content.vb: Public Shared Function Multiply(Of T As Structure)(left As Vector(Of T), right As T) As Vector(Of T)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{{T}}\n    - id: right\n      type: '{T}'\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{{T}}\n  nameWithType.vb: Vector.Multiply(Of T)(Vector(Of T), T)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.Multiply(Of T)(System.Numerics.Vector(Of T), T)\n  name.vb: Multiply(Of T)(Vector(Of T), T)\n- uid: System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  id: Multiply``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: Multiply<T>(Vector<T>, Vector<T>)\n  nameWithType: Vector.Multiply<T>(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector.Multiply<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Multiply\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 260\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static Vector<T> Multiply<T>(Vector<T> left, Vector<T> right)where T : struct'\n    content.vb: Public Shared Function Multiply(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{{T}}\n    - id: right\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{{T}}\n  nameWithType.vb: Vector.Multiply(Of T)(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.Multiply(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: Multiply(Of T)(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector.Negate``1(System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.Negate``1(System.Numerics.Vector{``0})\n  id: Negate``1(System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: Negate<T>(Vector<T>)\n  nameWithType: Vector.Negate<T>(Vector<T>)\n  fullName: System.Numerics.Vector.Negate<T>(System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Negate\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 261\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static Vector<T> Negate<T>(Vector<T> value)where T : struct'\n    content.vb: Public Shared Function Negate(Of T As Structure)(value As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{{T}}\n  nameWithType.vb: Vector.Negate(Of T)(Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.Negate(Of T)(System.Numerics.Vector(Of T))\n  name.vb: Negate(Of T)(Vector(Of T))\n- uid: System.Numerics.Vector.OnesComplement``1(System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.OnesComplement``1(System.Numerics.Vector{``0})\n  id: OnesComplement``1(System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: OnesComplement<T>(Vector<T>)\n  nameWithType: Vector.OnesComplement<T>(Vector<T>)\n  fullName: System.Numerics.Vector.OnesComplement<T>(System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OnesComplement\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 262\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static Vector<T> OnesComplement<T>(Vector<T> value)where T : struct'\n    content.vb: Public Shared Function OnesComplement(Of T As Structure)(value As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{{T}}\n  nameWithType.vb: Vector.OnesComplement(Of T)(Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.OnesComplement(Of T)(System.Numerics.Vector(Of T))\n  name.vb: OnesComplement(Of T)(Vector(Of T))\n- uid: System.Numerics.Vector.SquareRoot``1(System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.SquareRoot``1(System.Numerics.Vector{``0})\n  id: SquareRoot``1(System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: SquareRoot<T>(Vector<T>)\n  nameWithType: Vector.SquareRoot<T>(Vector<T>)\n  fullName: System.Numerics.Vector.SquareRoot<T>(System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SquareRoot\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 263\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static Vector<T> SquareRoot<T>(Vector<T> value)where T : struct'\n    content.vb: Public Shared Function SquareRoot(Of T As Structure)(value As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{{T}}\n  nameWithType.vb: Vector.SquareRoot(Of T)(Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.SquareRoot(Of T)(System.Numerics.Vector(Of T))\n  name.vb: SquareRoot(Of T)(Vector(Of T))\n- uid: System.Numerics.Vector.Subtract``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.Subtract``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  id: Subtract``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: Subtract<T>(Vector<T>, Vector<T>)\n  nameWithType: Vector.Subtract<T>(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector.Subtract<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Subtract\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 264\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static Vector<T> Subtract<T>(Vector<T> left, Vector<T> right)where T : struct'\n    content.vb: Public Shared Function Subtract(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{{T}}\n    - id: right\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{{T}}\n  nameWithType.vb: Vector.Subtract(Of T)(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.Subtract(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: Subtract(Of T)(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector.Xor``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  commentId: M:System.Numerics.Vector.Xor``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  id: Xor``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})\n  parent: System.Numerics.Vector\n  langs:\n  - csharp\n  - vb\n  name: Xor<T>(Vector<T>, Vector<T>)\n  nameWithType: Vector.Xor<T>(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector.Xor<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Xor\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 265\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: 'public static Vector<T> Xor<T>(Vector<T> left, Vector<T> right)where T : struct'\n    content.vb: Public Shared Function Xor(Of T As Structure)(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector{{T}}\n    - id: right\n      type: System.Numerics.Vector{{T}}\n    typeParameters:\n    - id: T\n    return:\n      type: System.Numerics.Vector{{T}}\n  nameWithType.vb: Vector.Xor(Of T)(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector.Xor(Of T)(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: Xor(Of T)(Vector(Of T), Vector(Of T))\nreferences:\n- uid: System.Numerics\n  commentId: N:System.Numerics\n  isExternal: false\n  name: System.Numerics\n  nameWithType: System.Numerics\n  fullName: System.Numerics\n- uid: System.Object\n  commentId: T:System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Object.ToString\n  commentId: M:System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.Equals(System.Object)\n  commentId: M:System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.Equals(System.Object,System.Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.GetHashCode\n  commentId: M:System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.GetType\n  commentId: M:System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.MemberwiseClone\n  commentId: M:System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System\n  commentId: N:System\n  isExternal: false\n  name: System\n  nameWithType: System\n  fullName: System\n- uid: System.Boolean\n  commentId: T:System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Numerics.Vector{{T}}\n  commentId: T:System.Numerics.Vector{``0}\n  parent: System.Numerics\n  definition: System.Numerics.Vector`1\n  name: Vector<T>\n  nameWithType: Vector<T>\n  fullName: System.Numerics.Vector<T>\n  nameWithType.vb: Vector(Of T)\n  fullname.vb: System.Numerics.Vector(Of T)\n  name.vb: Vector(Of T)\n  spec.csharp:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: <\n    nameWithType: <\n    fullName: <\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Numerics.Vector`1\n  commentId: T:System.Numerics.Vector`1\n  parent: System.Numerics\n  isExternal: false\n  name: Vector<T>\n  nameWithType: Vector<T>\n  fullName: System.Numerics.Vector<T>\n  nameWithType.vb: Vector(Of T)\n  fullname.vb: System.Numerics.Vector(Of T)\n  name.vb: Vector(Of T)\n  spec.csharp:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: <\n    nameWithType: <\n    fullName: <\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Numerics.Vector{System.Byte}\n  commentId: T:System.Numerics.Vector{System.Byte}\n  parent: System.Numerics\n  definition: System.Numerics.Vector`1\n  name: Vector<Byte>\n  nameWithType: Vector<Byte>\n  fullName: System.Numerics.Vector<System.Byte>\n  nameWithType.vb: Vector(Of Byte)\n  fullname.vb: System.Numerics.Vector(Of System.Byte)\n  name.vb: Vector(Of Byte)\n  spec.csharp:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Numerics.Vector{System.Double}\n  commentId: T:System.Numerics.Vector{System.Double}\n  parent: System.Numerics\n  definition: System.Numerics.Vector`1\n  name: Vector<Double>\n  nameWithType: Vector<Double>\n  fullName: System.Numerics.Vector<System.Double>\n  nameWithType.vb: Vector(Of Double)\n  fullname.vb: System.Numerics.Vector(Of System.Double)\n  name.vb: Vector(Of Double)\n  spec.csharp:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Double\n    name: Double\n    nameWithType: Double\n    fullName: System.Double\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.Double\n    name: Double\n    nameWithType: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Numerics.Vector{System.Int16}\n  commentId: T:System.Numerics.Vector{System.Int16}\n  parent: System.Numerics\n  definition: System.Numerics.Vector`1\n  name: Vector<Int16>\n  nameWithType: Vector<Int16>\n  fullName: System.Numerics.Vector<System.Int16>\n  nameWithType.vb: Vector(Of Int16)\n  fullname.vb: System.Numerics.Vector(Of System.Int16)\n  name.vb: Vector(Of Int16)\n  spec.csharp:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int16\n    name: Int16\n    nameWithType: Int16\n    fullName: System.Int16\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.Int16\n    name: Int16\n    nameWithType: Int16\n    fullName: System.Int16\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Numerics.Vector{System.Int32}\n  commentId: T:System.Numerics.Vector{System.Int32}\n  parent: System.Numerics\n  definition: System.Numerics.Vector`1\n  name: Vector<Int32>\n  nameWithType: Vector<Int32>\n  fullName: System.Numerics.Vector<System.Int32>\n  nameWithType.vb: Vector(Of Int32)\n  fullname.vb: System.Numerics.Vector(Of System.Int32)\n  name.vb: Vector(Of Int32)\n  spec.csharp:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Numerics.Vector{System.Int64}\n  commentId: T:System.Numerics.Vector{System.Int64}\n  parent: System.Numerics\n  definition: System.Numerics.Vector`1\n  name: Vector<Int64>\n  nameWithType: Vector<Int64>\n  fullName: System.Numerics.Vector<System.Int64>\n  nameWithType.vb: Vector(Of Int64)\n  fullname.vb: System.Numerics.Vector(Of System.Int64)\n  name.vb: Vector(Of Int64)\n  spec.csharp:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Numerics.Vector{System.SByte}\n  commentId: T:System.Numerics.Vector{System.SByte}\n  parent: System.Numerics\n  definition: System.Numerics.Vector`1\n  name: Vector<SByte>\n  nameWithType: Vector<SByte>\n  fullName: System.Numerics.Vector<System.SByte>\n  nameWithType.vb: Vector(Of SByte)\n  fullname.vb: System.Numerics.Vector(Of System.SByte)\n  name.vb: Vector(Of SByte)\n  spec.csharp:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.SByte\n    name: SByte\n    nameWithType: SByte\n    fullName: System.SByte\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.SByte\n    name: SByte\n    nameWithType: SByte\n    fullName: System.SByte\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Numerics.Vector{System.Single}\n  commentId: T:System.Numerics.Vector{System.Single}\n  parent: System.Numerics\n  definition: System.Numerics.Vector`1\n  name: Vector<Single>\n  nameWithType: Vector<Single>\n  fullName: System.Numerics.Vector<System.Single>\n  nameWithType.vb: Vector(Of Single)\n  fullname.vb: System.Numerics.Vector(Of System.Single)\n  name.vb: Vector(Of Single)\n  spec.csharp:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Single\n    name: Single\n    nameWithType: Single\n    fullName: System.Single\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.Single\n    name: Single\n    nameWithType: Single\n    fullName: System.Single\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Numerics.Vector{System.UInt16}\n  commentId: T:System.Numerics.Vector{System.UInt16}\n  parent: System.Numerics\n  definition: System.Numerics.Vector`1\n  name: Vector<UInt16>\n  nameWithType: Vector<UInt16>\n  fullName: System.Numerics.Vector<System.UInt16>\n  nameWithType.vb: Vector(Of UInt16)\n  fullname.vb: System.Numerics.Vector(Of System.UInt16)\n  name.vb: Vector(Of UInt16)\n  spec.csharp:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.UInt16\n    name: UInt16\n    nameWithType: UInt16\n    fullName: System.UInt16\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.UInt16\n    name: UInt16\n    nameWithType: UInt16\n    fullName: System.UInt16\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Numerics.Vector{System.UInt32}\n  commentId: T:System.Numerics.Vector{System.UInt32}\n  parent: System.Numerics\n  definition: System.Numerics.Vector`1\n  name: Vector<UInt32>\n  nameWithType: Vector<UInt32>\n  fullName: System.Numerics.Vector<System.UInt32>\n  nameWithType.vb: Vector(Of UInt32)\n  fullname.vb: System.Numerics.Vector(Of System.UInt32)\n  name.vb: Vector(Of UInt32)\n  spec.csharp:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.UInt32\n    name: UInt32\n    nameWithType: UInt32\n    fullName: System.UInt32\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.UInt32\n    name: UInt32\n    nameWithType: UInt32\n    fullName: System.UInt32\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Numerics.Vector{System.UInt64}\n  commentId: T:System.Numerics.Vector{System.UInt64}\n  parent: System.Numerics\n  definition: System.Numerics.Vector`1\n  name: Vector<UInt64>\n  nameWithType: Vector<UInt64>\n  fullName: System.Numerics.Vector<System.UInt64>\n  nameWithType.vb: Vector(Of UInt64)\n  fullname.vb: System.Numerics.Vector(Of System.UInt64)\n  name.vb: Vector(Of UInt64)\n  spec.csharp:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.UInt64\n    name: UInt64\n    nameWithType: UInt64\n    fullName: System.UInt64\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.UInt64\n    name: UInt64\n    nameWithType: UInt64\n    fullName: System.UInt64\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: '{T}'\n  commentId: '!:T'\n  definition: T\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: T\n  isExternal: false\n  name: T\n  nameWithType: T\n  fullName: T\n"}