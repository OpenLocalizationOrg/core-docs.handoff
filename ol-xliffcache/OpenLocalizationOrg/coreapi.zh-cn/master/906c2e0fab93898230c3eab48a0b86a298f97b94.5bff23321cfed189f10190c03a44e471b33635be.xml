{"nodes":[{"pos":[460,471],"content":"PingOptions","needQuote":true,"nodes":[{"content":"PingOptions","pos":[0,11]}]},{"pos":[1765,1778],"content":"PingOptions()","needQuote":true,"nodes":[{"content":"PingOptions()","pos":[0,13]}]},{"pos":[2824,2851],"content":"PingOptions(Int32, Boolean)","needQuote":true,"nodes":[{"content":"PingOptions(Int32, Boolean)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to prevent data sent to the remote host from being fragmented; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[4064,4196],"source":"\\n<p>\\n<strong>true</strong> to prevent data sent to the remote host from being fragmented; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;ttl &lt;/em&gt;is less than or equal to zero.&lt;/p&gt;\\n","pos":[4327,4383],"source":"\\n<p>\\n<em>ttl </em>is less than or equal to zero.</p>\\n"},{"pos":[4737,4749],"content":"DontFragment","needQuote":true,"nodes":[{"content":"DontFragment","pos":[0,12]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the data cannot be sent in multiple packets; otherwise &lt;strong&gt;false&lt;/strong&gt;.","pos":[5531,5641],"source":"\\n<p>\\n<strong>true</strong> if the data cannot be sent in multiple packets; otherwise <strong>false</strong>."},{"content":"The default is &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[5642,5686],"source":" The default is <strong>false</strong>.</p>\\n"},{"pos":[6014,6017],"content":"Ttl","needQuote":true,"nodes":[{"content":"Ttl","pos":[0,3]}]},{"content":"\\n&lt;p&gt;The value specified for a set operation is less than or equal to zero.&lt;/p&gt;\\n","pos":[7193,7274],"source":"\\n<p>The value specified for a set operation is less than or equal to zero.</p>\\n"},{"pos":[7459,7488],"content":"System.Net.NetworkInformation","needQuote":true,"nodes":[{"content":"System.Net.NetworkInformation","pos":[0,29]}]},{"pos":[7688,7694],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7854,7864],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[7959,7967],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[8036,8037],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8064,8065],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8135,8143],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[8212,8213],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8240,8241],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8424,8438],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[8557,8563],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8630,8631],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8681,8687],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8747,8748],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8831,8837],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8904,8905],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8955,8961],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9021,9022],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9236,9258],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[9406,9412],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9479,9480],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9530,9536],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9597,9598]},{"pos":[9653,9659],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9719,9720],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9817,9823],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9890,9891],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9941,9947],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10008,10009]},{"pos":[10064,10070],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10130,10131],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10376,10407],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[10573,10588],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10664,10665],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10715,10721],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10782,10783]},{"pos":[10838,10844],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10904,10905],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11011,11026],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[11102,11103],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11153,11159],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11220,11221]},{"pos":[11276,11282],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11342,11343],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11573,11586],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[11687,11698],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[11770,11771],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11798,11799],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11872,11883],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[11955,11956],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11983,11984],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12159,12168],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[12261,12268],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[12336,12337],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12364,12365],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12434,12441],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[12509,12510],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12537,12538],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12713,12730],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[12839,12854],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12930,12931],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12958,12959],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13036,13051],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[13127,13128],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13155,13156],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13301,13307],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[13437,13442],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[13585,13592],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[13744,13771],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Net.NetworkInformation.PingOptions\n  commentId: T:System.Net.NetworkInformation.PingOptions\n  id: PingOptions\n  parent: System.Net.NetworkInformation\n  children:\n  - System.Net.NetworkInformation.PingOptions.#ctor\n  - System.Net.NetworkInformation.PingOptions.#ctor(System.Int32,System.Boolean)\n  - System.Net.NetworkInformation.PingOptions.DontFragment\n  - System.Net.NetworkInformation.PingOptions.Ttl\n  langs:\n  - csharp\n  - vb\n  name: PingOptions\n  fullName: System.Net.NetworkInformation.PingOptions\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Ping/ref/System.Net.Ping.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PingOptions\n    path: src/System.Net.Ping/ref/System.Net.Ping.cs\n    startLine: 54\n  assemblies:\n  - System.Net.Ping\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Used to control how <xref href=\\\"System.Net.NetworkInformation.Ping\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> data packets are transmitted.</p>\\n\"\n  syntax:\n    content: public class PingOptions\n    content.vb: Public Class PingOptions\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: PingOptions\n- uid: System.Net.NetworkInformation.PingOptions.#ctor\n  commentId: M:System.Net.NetworkInformation.PingOptions.#ctor\n  id: '#ctor'\n  parent: System.Net.NetworkInformation.PingOptions\n  langs:\n  - csharp\n  - vb\n  name: PingOptions()\n  fullName: System.Net.NetworkInformation.PingOptions.PingOptions()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Ping/ref/System.Net.Ping.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Ping/ref/System.Net.Ping.cs\n    startLine: 56\n  assemblies:\n  - System.Net.Ping\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.NetworkInformation.PingOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public PingOptions()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: PingOptions.PingOptions()\n- uid: System.Net.NetworkInformation.PingOptions.#ctor(System.Int32,System.Boolean)\n  commentId: M:System.Net.NetworkInformation.PingOptions.#ctor(System.Int32,System.Boolean)\n  id: '#ctor(System.Int32,System.Boolean)'\n  parent: System.Net.NetworkInformation.PingOptions\n  langs:\n  - csharp\n  - vb\n  name: PingOptions(Int32, Boolean)\n  fullName: System.Net.NetworkInformation.PingOptions.PingOptions(System.Int32, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Ping/ref/System.Net.Ping.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Ping/ref/System.Net.Ping.cs\n    startLine: 57\n  assemblies:\n  - System.Net.Ping\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.NetworkInformation.PingOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class and sets the Time to Live and fragmentation values.</p>\\n\"\n  syntax:\n    content: public PingOptions(int ttl, bool dontFragment)\n    content.vb: Public Sub New(ttl As Integer, dontFragment As Boolean)\n    parameters:\n    - id: ttl\n      type: System.Int32\n      description: \"\\n<p>An <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value greater than zero that specifies the number of times that the <xref href=\\\"System.Net.NetworkInformation.Ping\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> data packets can be forwarded.</p>\\n\"\n    - id: dontFragment\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to prevent data sent to the remote host from being fragmented; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>ttl </em>is less than or equal to zero.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: PingOptions.PingOptions(Int32, Boolean)\n- uid: System.Net.NetworkInformation.PingOptions.DontFragment\n  commentId: P:System.Net.NetworkInformation.PingOptions.DontFragment\n  id: DontFragment\n  parent: System.Net.NetworkInformation.PingOptions\n  langs:\n  - csharp\n  - vb\n  name: DontFragment\n  fullName: System.Net.NetworkInformation.PingOptions.DontFragment\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Ping/ref/System.Net.Ping.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DontFragment\n    path: src/System.Net.Ping/ref/System.Net.Ping.cs\n    startLine: 58\n  assemblies:\n  - System.Net.Ping\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets or sets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that controls fragmentation of the data sent to the remote host.</p>\\n\"\n  syntax:\n    content: public bool DontFragment { get; set; }\n    content.vb: Public Property DontFragment As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the data cannot be sent in multiple packets; otherwise <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: PingOptions.DontFragment\n- uid: System.Net.NetworkInformation.PingOptions.Ttl\n  commentId: P:System.Net.NetworkInformation.PingOptions.Ttl\n  id: Ttl\n  parent: System.Net.NetworkInformation.PingOptions\n  langs:\n  - csharp\n  - vb\n  name: Ttl\n  fullName: System.Net.NetworkInformation.PingOptions.Ttl\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Ping/ref/System.Net.Ping.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Ttl\n    path: src/System.Net.Ping/ref/System.Net.Ping.cs\n    startLine: 59\n  assemblies:\n  - System.Net.Ping\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets or sets the number of routing nodes that can forward the <xref href=\\\"System.Net.NetworkInformation.Ping\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> data before it is discarded.</p>\\n\"\n  syntax:\n    content: public int Ttl { get; set; }\n    content.vb: Public Property Ttl As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>An <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that specifies the number of times the <xref href=\\\"System.Net.NetworkInformation.Ping\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> data packets can be forwarded. The default is 128.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The value specified for a set operation is less than or equal to zero.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: PingOptions.Ttl\nreferences:\n- uid: System.Net.NetworkInformation\n  isExternal: false\n  name: System.Net.NetworkInformation\n  fullName: System.Net.NetworkInformation\n  commentId: N:System.Net.NetworkInformation\n  nameWithType: System.Net.NetworkInformation\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}