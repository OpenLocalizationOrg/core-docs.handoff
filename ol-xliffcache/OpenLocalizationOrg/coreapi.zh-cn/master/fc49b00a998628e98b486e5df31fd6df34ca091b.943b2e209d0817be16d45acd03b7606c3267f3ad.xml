{"nodes":[{"pos":[449,473],"content":"ProgressChangedEventArgs","needQuote":true,"nodes":[{"content":"ProgressChangedEventArgs","pos":[0,24]}]},{"pos":[2249,2288],"content":"ProgressChangedEventArgs(Int32, Object)","needQuote":true,"nodes":[{"content":"ProgressChangedEventArgs(Int32, Object)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The percentage of an asynchronous task that has been completed.&lt;/p&gt;\\n","pos":[3285,3359],"source":"\\n<p>The percentage of an asynchronous task that has been completed.</p>\\n"},{"content":"\\n&lt;p&gt;A unique user state.&lt;/p&gt;\\n","pos":[3427,3458],"source":"\\n<p>A unique user state.</p>\\n"},{"pos":[3986,4004],"content":"ProgressPercentage","needQuote":true,"nodes":[{"content":"ProgressPercentage","pos":[0,18]}]},{"content":"\\n&lt;p&gt;A percentage value indicating the asynchronous task progress.&lt;/p&gt;\\n","pos":[4815,4887],"source":"\\n<p>A percentage value indicating the asynchronous task progress.</p>\\n"},{"pos":[5388,5397],"content":"UserState","needQuote":true,"nodes":[{"content":"UserState","pos":[0,9]}]},{"pos":[6590,6611],"content":"System.ComponentModel","needQuote":true,"nodes":[{"content":"System.ComponentModel","pos":[0,21]}]},{"pos":[6787,6793],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6941,6950],"content":"EventArgs","needQuote":true,"nodes":[{"content":"EventArgs","pos":[0,9]}]},{"pos":[7122,7127],"content":"Empty","needQuote":true,"nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[7314,7324],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[7419,7427],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7496,7497],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7524,7525],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7595,7603],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7672,7673],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7700,7701],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7884,7898],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[8017,8023],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8090,8091],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8141,8147],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8207,8208],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8291,8297],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8364,8365],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8415,8421],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8481,8482],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8696,8718],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[8866,8872],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8939,8940],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8990,8996],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9057,9058]},{"pos":[9113,9119],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9179,9180],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9277,9283],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9350,9351],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9401,9407],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9468,9469]},{"pos":[9524,9530],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9590,9591],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9836,9867],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[10033,10048],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10124,10125],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10175,10181],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10242,10243]},{"pos":[10298,10304],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10364,10365],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10471,10486],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10562,10563],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10613,10619],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10680,10681]},{"pos":[10736,10742],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10802,10803],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11033,11046],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[11147,11158],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[11230,11231],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11258,11259],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11332,11343],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[11415,11416],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11443,11444],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11619,11628],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[11721,11728],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11796,11797],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11824,11825],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11894,11901],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11969,11970],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11997,11998],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12173,12190],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[12299,12314],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12390,12391],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12418,12419],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12496,12511],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12587,12588],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12615,12616],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12761,12767],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[12897,12902],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]}],"content":"items:\n- uid: System.ComponentModel.ProgressChangedEventArgs\n  commentId: T:System.ComponentModel.ProgressChangedEventArgs\n  id: ProgressChangedEventArgs\n  parent: System.ComponentModel\n  children:\n  - System.ComponentModel.ProgressChangedEventArgs.#ctor(System.Int32,System.Object)\n  - System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage\n  - System.ComponentModel.ProgressChangedEventArgs.UserState\n  langs:\n  - csharp\n  - vb\n  name: ProgressChangedEventArgs\n  fullName: System.ComponentModel.ProgressChangedEventArgs\n  type: Class\n  source:\n    remote:\n      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/ProgressChangedEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ProgressChangedEventArgs\n    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/ProgressChangedEvent.cs\n    startLine: 8\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Provides data for the <xref href=\\\"System.ComponentModel.BackgroundWorker.ProgressChanged\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> event.</p>\\n\"\n  syntax:\n    content: 'public class ProgressChangedEventArgs : EventArgs'\n    content.vb: >-\n      Public Class ProgressChangedEventArgs\n          Inherits EventArgs\n  seealso:\n  - type: System.ComponentModel.BackgroundWorker\n    commentId: T:System.ComponentModel.BackgroundWorker\n  inheritance:\n  - System.Object\n  - System.EventArgs\n  inheritedMembers:\n  - System.EventArgs.Empty\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: ProgressChangedEventArgs\n- uid: System.ComponentModel.ProgressChangedEventArgs.#ctor(System.Int32,System.Object)\n  commentId: M:System.ComponentModel.ProgressChangedEventArgs.#ctor(System.Int32,System.Object)\n  id: '#ctor(System.Int32,System.Object)'\n  parent: System.ComponentModel.ProgressChangedEventArgs\n  langs:\n  - csharp\n  - vb\n  name: ProgressChangedEventArgs(Int32, Object)\n  fullName: System.ComponentModel.ProgressChangedEventArgs.ProgressChangedEventArgs(System.Int32, System.Object)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/ProgressChangedEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/ProgressChangedEvent.cs\n    startLine: 13\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ComponentModel.ProgressChangedEventArgs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public ProgressChangedEventArgs(int progressPercentage, object userState)\n    content.vb: Public Sub New(progressPercentage As Integer, userState As Object)\n    parameters:\n    - id: progressPercentage\n      type: System.Int32\n      description: \"\\n<p>The percentage of an asynchronous task that has been completed.</p>\\n\"\n    - id: userState\n      type: System.Object\n      description: \"\\n<p>A unique user state.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.BackgroundWorker\n    commentId: T:System.ComponentModel.BackgroundWorker\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ProgressChangedEventArgs.ProgressChangedEventArgs(Int32, Object)\n- uid: System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage\n  commentId: P:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage\n  id: ProgressPercentage\n  parent: System.ComponentModel.ProgressChangedEventArgs\n  langs:\n  - csharp\n  - vb\n  name: ProgressPercentage\n  fullName: System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/ProgressChangedEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ProgressPercentage\n    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/ProgressChangedEvent.cs\n    startLine: 19\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets the asynchronous task progress percentage.</p>\\n\"\n  syntax:\n    content: public int ProgressPercentage { get; }\n    content.vb: Public ReadOnly Property ProgressPercentage As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>A percentage value indicating the asynchronous task progress.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.BackgroundWorker\n    commentId: T:System.ComponentModel.BackgroundWorker\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ProgressChangedEventArgs.ProgressPercentage\n- uid: System.ComponentModel.ProgressChangedEventArgs.UserState\n  commentId: P:System.ComponentModel.ProgressChangedEventArgs.UserState\n  id: UserState\n  parent: System.ComponentModel.ProgressChangedEventArgs\n  langs:\n  - csharp\n  - vb\n  name: UserState\n  fullName: System.ComponentModel.ProgressChangedEventArgs.UserState\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/ProgressChangedEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UserState\n    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/ProgressChangedEvent.cs\n    startLine: 27\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets a unique user state.</p>\\n\"\n  syntax:\n    content: public object UserState { get; }\n    content.vb: Public ReadOnly Property UserState As Object\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>A unique <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> indicating the user state.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.BackgroundWorker\n    commentId: T:System.ComponentModel.BackgroundWorker\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ProgressChangedEventArgs.UserState\nreferences:\n- uid: System.ComponentModel\n  isExternal: false\n  name: System.ComponentModel\n  fullName: System.ComponentModel\n  nameWithType: System.ComponentModel\n  commentId: N:System.ComponentModel\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.EventArgs\n  parent: System\n  isExternal: false\n  name: EventArgs\n  fullName: System.EventArgs\n  nameWithType: EventArgs\n  commentId: T:System.EventArgs\n- uid: System.EventArgs.Empty\n  parent: System.EventArgs\n  isExternal: true\n  name: Empty\n  fullName: System.EventArgs.Empty\n  nameWithType: EventArgs.Empty\n  commentId: F:System.EventArgs.Empty\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n"}