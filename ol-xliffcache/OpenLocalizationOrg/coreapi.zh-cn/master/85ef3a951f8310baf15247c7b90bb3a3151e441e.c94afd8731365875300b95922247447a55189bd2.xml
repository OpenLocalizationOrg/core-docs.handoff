{"nodes":[{"pos":[1416,1432],"content":"NetworkInterface","needQuote":true,"nodes":[{"content":"NetworkInterface","pos":[0,16]}]},{"pos":[2946,2964],"content":"NetworkInterface()","needQuote":true,"nodes":[{"content":"NetworkInterface()","pos":[0,18]}]},{"pos":[4067,4078],"content":"Description","needQuote":true,"nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[5328,5330],"content":"Id","needQuote":true,"nodes":[{"content":"Id","pos":[0,2]}]},{"pos":[6611,6637],"content":"IPv6LoopbackInterfaceIndex","needQuote":true,"nodes":[{"content":"IPv6LoopbackInterfaceIndex","pos":[0,26]}]},{"pos":[8192,8205],"content":"IsReceiveOnly","needQuote":true,"nodes":[{"content":"IsReceiveOnly","pos":[0,13]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the interface only receives network traffic; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9100,9217],"source":"\\n<p>\\n<strong>true</strong> if the interface only receives network traffic; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;This property is not valid on computers running operating systems earlier than Windows XP.","pos":[9352,9447],"source":"\\n<p>This property is not valid on computers running operating systems earlier than Windows XP."},{"content":"&lt;/p&gt;\\n","pos":[9448,9454],"source":" </p>\\n"},{"pos":[9893,9915],"content":"LoopbackInterfaceIndex","needQuote":true,"nodes":[{"content":"LoopbackInterfaceIndex","pos":[0,22]}]},{"content":"\\n&lt;p&gt;This property is not valid on computers running only Ipv6.&lt;/p&gt;\\n","pos":[11033,11102],"source":"\\n<p>This property is not valid on computers running only Ipv6.</p>\\n"},{"pos":[11676,11680],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[12949,12969],"content":"NetworkInterfaceType","needQuote":true,"nodes":[{"content":"NetworkInterfaceType","pos":[0,20]}]},{"pos":[14416,14433],"content":"OperationalStatus","needQuote":true,"nodes":[{"content":"OperationalStatus","pos":[0,17]}]},{"pos":[15821,15826],"content":"Speed","needQuote":true,"nodes":[{"content":"Speed","pos":[0,5]}]},{"pos":[17107,17124],"content":"SupportsMulticast","needQuote":true,"nodes":[{"content":"SupportsMulticast","pos":[0,17]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the interface receives multicast packets; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18039,18153],"source":"\\n<p>\\n<strong>true</strong> if the interface receives multicast packets; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;This property is not valid on computers running operating systems earlier than Windows XP.","pos":[18288,18383],"source":"\\n<p>This property is not valid on computers running operating systems earlier than Windows XP."},{"content":"&lt;/p&gt;\\n","pos":[18384,18390],"source":" </p>\\n"},{"pos":[18836,18861],"content":"GetAllNetworkInterfaces()","needQuote":true,"nodes":[{"content":"GetAllNetworkInterfaces()","pos":[0,25]}]},{"content":"\\n&lt;p&gt;A Windows system function call failed.","pos":[20141,20184],"source":"\\n<p>A Windows system function call failed."},{"content":"&lt;/p&gt;\\n","pos":[20185,20191],"source":" </p>\\n"},{"pos":[20594,20611],"content":"GetIPProperties()","needQuote":true,"nodes":[{"content":"GetIPProperties()","pos":[0,17]}]},{"pos":[22027,22044],"content":"GetIPStatistics()","needQuote":true,"nodes":[{"content":"GetIPStatistics()","pos":[0,17]}]},{"pos":[23536,23559],"content":"GetIsNetworkAvailable()","needQuote":true,"nodes":[{"content":"GetIsNetworkAvailable()","pos":[0,23]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if a network connection is available; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[24330,24437],"source":"\\n<p>\\n<strong>true</strong> if a network connection is available; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[24847,24867],"content":"GetPhysicalAddress()","needQuote":true,"nodes":[{"content":"GetPhysicalAddress()","pos":[0,20]}]},{"pos":[26419,26454],"content":"Supports(NetworkInterfaceComponent)","needQuote":true,"nodes":[{"content":"Supports(NetworkInterfaceComponent)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the specified protocol is supported; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[27721,27830],"source":"\\n<p>\\n<strong>true</strong> if the specified protocol is supported; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[28064,28093],"content":"System.Net.NetworkInformation","needQuote":true,"nodes":[{"content":"System.Net.NetworkInformation","pos":[0,29]}]},{"pos":[28293,28299],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28459,28469],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[28564,28572],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[28641,28642],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28669,28670],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28740,28748],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[28817,28818],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28845,28846],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29029,29043],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[29162,29168],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29235,29236],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29286,29292],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29352,29353],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29436,29442],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29509,29510],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29560,29566],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29626,29627],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29841,29863],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[30011,30017],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[30084,30085],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30135,30141],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30202,30203]},{"pos":[30258,30264],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30324,30325],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30422,30428],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[30495,30496],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30546,30552],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30613,30614]},{"pos":[30669,30675],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30735,30736],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30981,31012],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[31178,31193],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[31269,31270],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31320,31326],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[31387,31388]},{"pos":[31443,31449],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31509,31510],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31616,31631],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[31707,31708],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31758,31764],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[31825,31826]},{"pos":[31881,31887],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31947,31948],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32178,32191],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[32292,32303],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[32375,32376],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32403,32404],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32477,32488],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[32560,32561],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32588,32589],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32764,32773],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[32866,32873],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[32941,32942],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32969,32970],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33039,33046],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[33114,33115],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33142,33143],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33318,33335],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[33444,33459],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[33535,33536],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33563,33564],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33641,33656],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[33732,33733],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33760,33761],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33906,33912],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[34043,34049],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[34193,34198],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[34341,34348],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[34556,34576],"content":"NetworkInterfaceType","needQuote":true,"nodes":[{"content":"NetworkInterfaceType","pos":[0,20]}]},{"pos":[34866,34883],"content":"OperationalStatus","needQuote":true,"nodes":[{"content":"OperationalStatus","pos":[0,17]}]},{"pos":[35106,35111],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[35251,35269],"content":"NetworkInterface[]","needQuote":true,"nodes":[{"content":"NetworkInterface[]","pos":[0,18]}]},{"pos":[35506,35522],"content":"NetworkInterface","needQuote":true,"nodes":[{"content":"NetworkInterface","pos":[0,16]}]},{"content":"[]","pos":[35595,35597]},{"pos":[35695,35711],"content":"NetworkInterface","needQuote":true,"nodes":[{"content":"NetworkInterface","pos":[0,16]}]},{"pos":[35783,35785],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[36003,36024],"content":"IPInterfaceProperties","needQuote":true,"nodes":[{"content":"IPInterfaceProperties","pos":[0,21]}]},{"pos":[36321,36342],"content":"IPInterfaceStatistics","needQuote":true,"nodes":[{"content":"IPInterfaceStatistics","pos":[0,21]}]},{"pos":[36633,36648],"content":"PhysicalAddress","needQuote":true,"nodes":[{"content":"PhysicalAddress","pos":[0,15]}]},{"pos":[36931,36956],"content":"NetworkInterfaceComponent","needQuote":true,"nodes":[{"content":"NetworkInterfaceComponent","pos":[0,25]}]},{"pos":[37210,37239],"content":"PlatformNotSupportedException","needQuote":true,"nodes":[{"content":"PlatformNotSupportedException","pos":[0,29]}]},{"pos":[37480,37507],"content":"NetworkInformationException","needQuote":true,"nodes":[{"content":"NetworkInformationException","pos":[0,27]}]}],"content":"items:\n- uid: System.Net.NetworkInformation.NetworkInterface\n  commentId: T:System.Net.NetworkInformation.NetworkInterface\n  id: NetworkInterface\n  parent: System.Net.NetworkInformation\n  children:\n  - System.Net.NetworkInformation.NetworkInterface.#ctor\n  - System.Net.NetworkInformation.NetworkInterface.Description\n  - System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces\n  - System.Net.NetworkInformation.NetworkInterface.GetIPProperties\n  - System.Net.NetworkInformation.NetworkInterface.GetIPStatistics\n  - System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable\n  - System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress\n  - System.Net.NetworkInformation.NetworkInterface.Id\n  - System.Net.NetworkInformation.NetworkInterface.IPv6LoopbackInterfaceIndex\n  - System.Net.NetworkInformation.NetworkInterface.IsReceiveOnly\n  - System.Net.NetworkInformation.NetworkInterface.LoopbackInterfaceIndex\n  - System.Net.NetworkInformation.NetworkInterface.Name\n  - System.Net.NetworkInformation.NetworkInterface.NetworkInterfaceType\n  - System.Net.NetworkInformation.NetworkInterface.OperationalStatus\n  - System.Net.NetworkInformation.NetworkInterface.Speed\n  - System.Net.NetworkInformation.NetworkInterface.Supports(System.Net.NetworkInformation.NetworkInterfaceComponent)\n  - System.Net.NetworkInformation.NetworkInterface.SupportsMulticast\n  langs:\n  - csharp\n  - vb\n  name: NetworkInterface\n  fullName: System.Net.NetworkInformation.NetworkInterface\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NetworkInterface\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 264\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Provides configuration and statistical information for a network interface.</p>\\n\"\n  syntax:\n    content: public abstract class NetworkInterface\n    content.vb: Public MustInherit Class NetworkInterface\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: NetworkInterface\n- uid: System.Net.NetworkInformation.NetworkInterface.#ctor\n  commentId: M:System.Net.NetworkInformation.NetworkInterface.#ctor\n  id: '#ctor'\n  parent: System.Net.NetworkInformation.NetworkInterface\n  langs:\n  - csharp\n  - vb\n  name: NetworkInterface()\n  fullName: System.Net.NetworkInformation.NetworkInterface.NetworkInterface()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 266\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.NetworkInformation.NetworkInterface\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected NetworkInterface()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: NetworkInterface.NetworkInterface()\n- uid: System.Net.NetworkInformation.NetworkInterface.Description\n  commentId: P:System.Net.NetworkInformation.NetworkInterface.Description\n  id: Description\n  parent: System.Net.NetworkInformation.NetworkInterface\n  langs:\n  - csharp\n  - vb\n  name: Description\n  fullName: System.Net.NetworkInformation.NetworkInterface.Description\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Description\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 267\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the description of the interface.</p>\\n\"\n  syntax:\n    content: public virtual string Description { get; }\n    content.vb: Public Overridable ReadOnly Property Description As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that describes this interface.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: NetworkInterface.Description\n- uid: System.Net.NetworkInformation.NetworkInterface.Id\n  commentId: P:System.Net.NetworkInformation.NetworkInterface.Id\n  id: Id\n  parent: System.Net.NetworkInformation.NetworkInterface\n  langs:\n  - csharp\n  - vb\n  name: Id\n  fullName: System.Net.NetworkInformation.NetworkInterface.Id\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Id\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 268\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the identifier of the network adapter.</p>\\n\"\n  syntax:\n    content: public virtual string Id { get; }\n    content.vb: Public Overridable ReadOnly Property Id As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the identifier.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: NetworkInterface.Id\n- uid: System.Net.NetworkInformation.NetworkInterface.IPv6LoopbackInterfaceIndex\n  commentId: P:System.Net.NetworkInformation.NetworkInterface.IPv6LoopbackInterfaceIndex\n  id: IPv6LoopbackInterfaceIndex\n  parent: System.Net.NetworkInformation.NetworkInterface\n  langs:\n  - csharp\n  - vb\n  name: IPv6LoopbackInterfaceIndex\n  fullName: System.Net.NetworkInformation.NetworkInterface.IPv6LoopbackInterfaceIndex\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IPv6LoopbackInterfaceIndex\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 269\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the index of the IPv6 loopback interface.</p>\\n\"\n  syntax:\n    content: public static int IPv6LoopbackInterfaceIndex { get; }\n    content.vb: Public Shared ReadOnly Property IPv6LoopbackInterfaceIndex As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>Returns <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The index for the IPv6 loopback interface.</p>\\n\"\n  seealso:\n  - type: System.Net.NetworkInformation.NetworkInterface.LoopbackInterfaceIndex\n    commentId: P:System.Net.NetworkInformation.NetworkInterface.LoopbackInterfaceIndex\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: NetworkInterface.IPv6LoopbackInterfaceIndex\n- uid: System.Net.NetworkInformation.NetworkInterface.IsReceiveOnly\n  commentId: P:System.Net.NetworkInformation.NetworkInterface.IsReceiveOnly\n  id: IsReceiveOnly\n  parent: System.Net.NetworkInformation.NetworkInterface\n  langs:\n  - csharp\n  - vb\n  name: IsReceiveOnly\n  fullName: System.Net.NetworkInformation.NetworkInterface.IsReceiveOnly\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsReceiveOnly\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 270\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that indicates whether the network interface is set to only receive data packets.</p>\\n\"\n  syntax:\n    content: public virtual bool IsReceiveOnly { get; }\n    content.vb: Public Overridable ReadOnly Property IsReceiveOnly As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the interface only receives network traffic; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>This property is not valid on computers running operating systems earlier than Windows XP. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: NetworkInterface.IsReceiveOnly\n- uid: System.Net.NetworkInformation.NetworkInterface.LoopbackInterfaceIndex\n  commentId: P:System.Net.NetworkInformation.NetworkInterface.LoopbackInterfaceIndex\n  id: LoopbackInterfaceIndex\n  parent: System.Net.NetworkInformation.NetworkInterface\n  langs:\n  - csharp\n  - vb\n  name: LoopbackInterfaceIndex\n  fullName: System.Net.NetworkInformation.NetworkInterface.LoopbackInterfaceIndex\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LoopbackInterfaceIndex\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 271\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the index of the IPv4 loopback interface.</p>\\n\"\n  syntax:\n    content: public static int LoopbackInterfaceIndex { get; }\n    content.vb: Public Shared ReadOnly Property LoopbackInterfaceIndex As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>A <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the index for the IPv4 loopback interface.</p>\\n\"\n  exceptions:\n  - type: System.Net.NetworkInformation.NetworkInformationException\n    commentId: T:System.Net.NetworkInformation.NetworkInformationException\n    description: \"\\n<p>This property is not valid on computers running only Ipv6.</p>\\n\"\n  seealso:\n  - type: System.Net.NetworkInformation.NetworkInterface.IPv6LoopbackInterfaceIndex\n    commentId: P:System.Net.NetworkInformation.NetworkInterface.IPv6LoopbackInterfaceIndex\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: NetworkInterface.LoopbackInterfaceIndex\n- uid: System.Net.NetworkInformation.NetworkInterface.Name\n  commentId: P:System.Net.NetworkInformation.NetworkInterface.Name\n  id: Name\n  parent: System.Net.NetworkInformation.NetworkInterface\n  langs:\n  - csharp\n  - vb\n  name: Name\n  fullName: System.Net.NetworkInformation.NetworkInterface.Name\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Name\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 272\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the name of the network adapter.</p>\\n\"\n  syntax:\n    content: public virtual string Name { get; }\n    content.vb: Public Overridable ReadOnly Property Name As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the adapter name.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: NetworkInterface.Name\n- uid: System.Net.NetworkInformation.NetworkInterface.NetworkInterfaceType\n  commentId: P:System.Net.NetworkInformation.NetworkInterface.NetworkInterfaceType\n  id: NetworkInterfaceType\n  parent: System.Net.NetworkInformation.NetworkInterface\n  langs:\n  - csharp\n  - vb\n  name: NetworkInterfaceType\n  fullName: System.Net.NetworkInformation.NetworkInterface.NetworkInterfaceType\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NetworkInterfaceType\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 273\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the interface type.</p>\\n\"\n  syntax:\n    content: public virtual NetworkInterfaceType NetworkInterfaceType { get; }\n    content.vb: Public Overridable ReadOnly Property NetworkInterfaceType As NetworkInterfaceType\n    parameters: []\n    return:\n      type: System.Net.NetworkInformation.NetworkInterfaceType\n      description: \"\\n<p>An <xref href=\\\"System.Net.NetworkInformation.NetworkInterfaceType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that specifies the network interface type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: NetworkInterface.NetworkInterfaceType\n- uid: System.Net.NetworkInformation.NetworkInterface.OperationalStatus\n  commentId: P:System.Net.NetworkInformation.NetworkInterface.OperationalStatus\n  id: OperationalStatus\n  parent: System.Net.NetworkInformation.NetworkInterface\n  langs:\n  - csharp\n  - vb\n  name: OperationalStatus\n  fullName: System.Net.NetworkInformation.NetworkInterface.OperationalStatus\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OperationalStatus\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 274\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the current operational state of the network connection.</p>\\n\"\n  syntax:\n    content: public virtual OperationalStatus OperationalStatus { get; }\n    content.vb: Public Overridable ReadOnly Property OperationalStatus As OperationalStatus\n    parameters: []\n    return:\n      type: System.Net.NetworkInformation.OperationalStatus\n      description: \"\\n<p>One of the <xref href=\\\"System.Net.NetworkInformation.OperationalStatus\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: NetworkInterface.OperationalStatus\n- uid: System.Net.NetworkInformation.NetworkInterface.Speed\n  commentId: P:System.Net.NetworkInformation.NetworkInterface.Speed\n  id: Speed\n  parent: System.Net.NetworkInformation.NetworkInterface\n  langs:\n  - csharp\n  - vb\n  name: Speed\n  fullName: System.Net.NetworkInformation.NetworkInterface.Speed\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Speed\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 275\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the speed of the network interface.</p>\\n\"\n  syntax:\n    content: public virtual long Speed { get; }\n    content.vb: Public Overridable ReadOnly Property Speed As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>A <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that specifies the speed in bits per second.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: NetworkInterface.Speed\n- uid: System.Net.NetworkInformation.NetworkInterface.SupportsMulticast\n  commentId: P:System.Net.NetworkInformation.NetworkInterface.SupportsMulticast\n  id: SupportsMulticast\n  parent: System.Net.NetworkInformation.NetworkInterface\n  langs:\n  - csharp\n  - vb\n  name: SupportsMulticast\n  fullName: System.Net.NetworkInformation.NetworkInterface.SupportsMulticast\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SupportsMulticast\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 276\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that indicates whether the network interface is enabled to receive multicast packets.</p>\\n\"\n  syntax:\n    content: public virtual bool SupportsMulticast { get; }\n    content.vb: Public Overridable ReadOnly Property SupportsMulticast As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the interface receives multicast packets; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>This property is not valid on computers running operating systems earlier than Windows XP. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: NetworkInterface.SupportsMulticast\n- uid: System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces\n  commentId: M:System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces\n  id: GetAllNetworkInterfaces\n  parent: System.Net.NetworkInformation.NetworkInterface\n  langs:\n  - csharp\n  - vb\n  name: GetAllNetworkInterfaces()\n  fullName: System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetAllNetworkInterfaces\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 277\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Returns objects that describe the network interfaces on the local computer.</p>\\n\"\n  syntax:\n    content: public static NetworkInterface[] GetAllNetworkInterfaces()\n    content.vb: Public Shared Function GetAllNetworkInterfaces As NetworkInterface()\n    return:\n      type: System.Net.NetworkInformation.NetworkInterface[]\n      description: \"\\n<p>A <xref href=\\\"System.Net.NetworkInformation.NetworkInterface\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array that contains objects that describe the available network interfaces, or an empty array if no interfaces are detected.</p>\\n\"\n  exceptions:\n  - type: System.Net.NetworkInformation.NetworkInformationException\n    commentId: T:System.Net.NetworkInformation.NetworkInformationException\n    description: \"\\n<p>A Windows system function call failed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: NetworkInterface.GetAllNetworkInterfaces()\n- uid: System.Net.NetworkInformation.NetworkInterface.GetIPProperties\n  commentId: M:System.Net.NetworkInformation.NetworkInterface.GetIPProperties\n  id: GetIPProperties\n  parent: System.Net.NetworkInformation.NetworkInterface\n  langs:\n  - csharp\n  - vb\n  name: GetIPProperties()\n  fullName: System.Net.NetworkInformation.NetworkInterface.GetIPProperties()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetIPProperties\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 278\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Returns an object that describes the configuration of this network interface.</p>\\n\"\n  syntax:\n    content: public virtual IPInterfaceProperties GetIPProperties()\n    content.vb: Public Overridable Function GetIPProperties As IPInterfaceProperties\n    return:\n      type: System.Net.NetworkInformation.IPInterfaceProperties\n      description: \"\\n<p>An <xref href=\\\"System.Net.NetworkInformation.IPInterfaceProperties\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that describes this network interface.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: NetworkInterface.GetIPProperties()\n- uid: System.Net.NetworkInformation.NetworkInterface.GetIPStatistics\n  commentId: M:System.Net.NetworkInformation.NetworkInterface.GetIPStatistics\n  id: GetIPStatistics\n  parent: System.Net.NetworkInformation.NetworkInterface\n  langs:\n  - csharp\n  - vb\n  name: GetIPStatistics()\n  fullName: System.Net.NetworkInformation.NetworkInterface.GetIPStatistics()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetIPStatistics\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 279\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets the IP statistics for this <xref href=\\\"System.Net.NetworkInformation.NetworkInterface\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public virtual IPInterfaceStatistics GetIPStatistics()\n    content.vb: Public Overridable Function GetIPStatistics As IPInterfaceStatistics\n    return:\n      type: System.Net.NetworkInformation.IPInterfaceStatistics\n      description: \"\\n<p>Returns <xref href=\\\"System.Net.NetworkInformation.IPInterfaceStatistics\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The IP statistics.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: NetworkInterface.GetIPStatistics()\n- uid: System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable\n  commentId: M:System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable\n  id: GetIsNetworkAvailable\n  parent: System.Net.NetworkInformation.NetworkInterface\n  langs:\n  - csharp\n  - vb\n  name: GetIsNetworkAvailable()\n  fullName: System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetIsNetworkAvailable\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 280\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Indicates whether any network connection is available.</p>\\n\"\n  syntax:\n    content: public static bool GetIsNetworkAvailable()\n    content.vb: Public Shared Function GetIsNetworkAvailable As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if a network connection is available; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: NetworkInterface.GetIsNetworkAvailable()\n- uid: System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress\n  commentId: M:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress\n  id: GetPhysicalAddress\n  parent: System.Net.NetworkInformation.NetworkInterface\n  langs:\n  - csharp\n  - vb\n  name: GetPhysicalAddress()\n  fullName: System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetPhysicalAddress\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 281\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Returns the Media Access Control (MAC) or physical address for this adapter.</p>\\n\"\n  syntax:\n    content: public virtual PhysicalAddress GetPhysicalAddress()\n    content.vb: Public Overridable Function GetPhysicalAddress As PhysicalAddress\n    return:\n      type: System.Net.NetworkInformation.PhysicalAddress\n      description: \"\\n<p>A <xref href=\\\"System.Net.NetworkInformation.PhysicalAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that contains the physical address.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: NetworkInterface.GetPhysicalAddress()\n- uid: System.Net.NetworkInformation.NetworkInterface.Supports(System.Net.NetworkInformation.NetworkInterfaceComponent)\n  commentId: M:System.Net.NetworkInformation.NetworkInterface.Supports(System.Net.NetworkInformation.NetworkInterfaceComponent)\n  id: Supports(System.Net.NetworkInformation.NetworkInterfaceComponent)\n  parent: System.Net.NetworkInformation.NetworkInterface\n  langs:\n  - csharp\n  - vb\n  name: Supports(NetworkInterfaceComponent)\n  fullName: System.Net.NetworkInformation.NetworkInterface.Supports(System.Net.NetworkInformation.NetworkInterfaceComponent)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Supports\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 282\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that indicates whether the interface supports the specified protocol.</p>\\n\"\n  syntax:\n    content: public virtual bool Supports(NetworkInterfaceComponent networkInterfaceComponent)\n    content.vb: Public Overridable Function Supports(networkInterfaceComponent As NetworkInterfaceComponent) As Boolean\n    parameters:\n    - id: networkInterfaceComponent\n      type: System.Net.NetworkInformation.NetworkInterfaceComponent\n      description: \"\\n<p>A <xref href=\\\"System.Net.NetworkInformation.NetworkInterfaceComponent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified protocol is supported; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: NetworkInterface.Supports(NetworkInterfaceComponent)\nreferences:\n- uid: System.Net.NetworkInformation\n  isExternal: false\n  name: System.Net.NetworkInformation\n  fullName: System.Net.NetworkInformation\n  commentId: N:System.Net.NetworkInformation\n  nameWithType: System.Net.NetworkInformation\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Net.NetworkInformation.NetworkInterfaceType\n  parent: System.Net.NetworkInformation\n  isExternal: false\n  name: NetworkInterfaceType\n  fullName: System.Net.NetworkInformation.NetworkInterfaceType\n  commentId: T:System.Net.NetworkInformation.NetworkInterfaceType\n  nameWithType: NetworkInterfaceType\n- uid: System.Net.NetworkInformation.OperationalStatus\n  parent: System.Net.NetworkInformation\n  isExternal: false\n  name: OperationalStatus\n  fullName: System.Net.NetworkInformation.OperationalStatus\n  commentId: T:System.Net.NetworkInformation.OperationalStatus\n  nameWithType: OperationalStatus\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  commentId: T:System.Int64\n  nameWithType: Int64\n- uid: System.Net.NetworkInformation.NetworkInterface[]\n  name: NetworkInterface[]\n  fullName: System.Net.NetworkInformation.NetworkInterface[]\n  fullname.vb: System.Net.NetworkInformation.NetworkInterface()\n  name.vb: NetworkInterface()\n  spec.csharp:\n  - uid: System.Net.NetworkInformation.NetworkInterface\n    name: NetworkInterface\n    fullName: System.Net.NetworkInformation.NetworkInterface\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Net.NetworkInformation.NetworkInterface\n    name: NetworkInterface\n    fullName: System.Net.NetworkInformation.NetworkInterface\n  - name: ()\n    fullName: ()\n  nameWithType: NetworkInterface[]\n  nameWithType.vb: NetworkInterface()\n- uid: System.Net.NetworkInformation.IPInterfaceProperties\n  parent: System.Net.NetworkInformation\n  isExternal: false\n  name: IPInterfaceProperties\n  fullName: System.Net.NetworkInformation.IPInterfaceProperties\n  commentId: T:System.Net.NetworkInformation.IPInterfaceProperties\n  nameWithType: IPInterfaceProperties\n- uid: System.Net.NetworkInformation.IPInterfaceStatistics\n  parent: System.Net.NetworkInformation\n  isExternal: false\n  name: IPInterfaceStatistics\n  fullName: System.Net.NetworkInformation.IPInterfaceStatistics\n  commentId: T:System.Net.NetworkInformation.IPInterfaceStatistics\n  nameWithType: IPInterfaceStatistics\n- uid: System.Net.NetworkInformation.PhysicalAddress\n  parent: System.Net.NetworkInformation\n  isExternal: false\n  name: PhysicalAddress\n  fullName: System.Net.NetworkInformation.PhysicalAddress\n  commentId: T:System.Net.NetworkInformation.PhysicalAddress\n  nameWithType: PhysicalAddress\n- uid: System.Net.NetworkInformation.NetworkInterfaceComponent\n  parent: System.Net.NetworkInformation\n  isExternal: false\n  name: NetworkInterfaceComponent\n  fullName: System.Net.NetworkInformation.NetworkInterfaceComponent\n  commentId: T:System.Net.NetworkInformation.NetworkInterfaceComponent\n  nameWithType: NetworkInterfaceComponent\n- uid: System.PlatformNotSupportedException\n  isExternal: false\n  name: PlatformNotSupportedException\n  fullName: System.PlatformNotSupportedException\n  nameWithType: PlatformNotSupportedException\n  commentId: T:System.PlatformNotSupportedException\n- uid: System.Net.NetworkInformation.NetworkInformationException\n  isExternal: false\n  name: NetworkInformationException\n  fullName: System.Net.NetworkInformation.NetworkInformationException\n  commentId: T:System.Net.NetworkInformation.NetworkInformationException\n  nameWithType: NetworkInformationException\n"}