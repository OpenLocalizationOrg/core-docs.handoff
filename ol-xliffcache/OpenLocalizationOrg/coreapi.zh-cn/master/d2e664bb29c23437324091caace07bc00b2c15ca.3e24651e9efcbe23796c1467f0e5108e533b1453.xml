{"nodes":[{"pos":[442,458],"content":"NativeOverlapped","needQuote":true,"nodes":[{"content":"NativeOverlapped","pos":[0,16]}]},{"pos":[2184,2195],"content":"EventHandle","needQuote":true,"nodes":[{"content":"EventHandle","pos":[0,11]}]},{"pos":[3281,3293],"content":"InternalHigh","needQuote":true,"nodes":[{"content":"InternalHigh","pos":[0,12]}]},{"pos":[4247,4258],"content":"InternalLow","needQuote":true,"nodes":[{"content":"InternalLow","pos":[0,11]}]},{"pos":[5195,5205],"content":"OffsetHigh","needQuote":true,"nodes":[{"content":"OffsetHigh","pos":[0,10]}]},{"pos":[6134,6143],"content":"OffsetLow","needQuote":true,"nodes":[{"content":"OffsetLow","pos":[0,9]}]},{"pos":[6909,6925],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[7120,7134],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[7259,7265],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7314,7315],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7365,7371],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7431,7432],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7518,7524],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7573,7574],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7624,7630],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7690,7691],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7894,7907],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[8014,8025],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[8079,8080],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8107,8108],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8184,8195],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[8249,8250],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8277,8278],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8467,8477],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[8578,8586],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[8637,8638],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8665,8666],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8739,8747],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[8798,8799],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8826,8827],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9030,9052],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[9200,9206],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9273,9274],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9324,9330],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9391,9392]},{"pos":[9447,9453],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9513,9514],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9611,9617],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9684,9685],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9735,9741],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9802,9803]},{"pos":[9858,9864],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9924,9925],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10170,10201],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[10367,10382],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10458,10459],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10509,10515],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10576,10577]},{"pos":[10632,10638],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10698,10699],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10805,10820],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10896,10897],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10947,10953],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11014,11015]},{"pos":[11070,11076],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11136,11137],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11363,11372],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[11465,11472],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11540,11541],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11568,11569],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11638,11645],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11713,11714],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11741,11742],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11898,11907],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[12061,12067],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12188,12194],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[12325,12331],"content":"IntPtr","needQuote":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"pos":[12475,12480],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]}],"content":"items:\n- uid: System.Threading.NativeOverlapped\n  commentId: T:System.Threading.NativeOverlapped\n  id: NativeOverlapped\n  parent: System.Threading\n  children:\n  - System.Threading.NativeOverlapped.EventHandle\n  - System.Threading.NativeOverlapped.InternalHigh\n  - System.Threading.NativeOverlapped.InternalLow\n  - System.Threading.NativeOverlapped.OffsetHigh\n  - System.Threading.NativeOverlapped.OffsetLow\n  langs:\n  - csharp\n  - vb\n  name: NativeOverlapped\n  fullName: System.Threading.NativeOverlapped\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Overlapped.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: NativeOverlapped\n    path: src/mscorlib/src/System/Threading/Overlapped.cs\n    startLine: 44\n  assemblies:\n  - System.Threading.Overlapped\n  namespace: System.Threading\n  summary: \"\\n<p>Provides an explicit layout that is visible from unmanaged code and that will have the same layout as the Win32 OVERLAPPED structure with additional reserved fields at the end.</p>\\n\"\n  syntax:\n    content: >-\n      [StructLayout(LayoutKind.Sequential)]\n\n      [ComVisible(true)]\n\n      public struct NativeOverlapped\n    content.vb: >-\n      <StructLayout(LayoutKind.Sequential)>\n\n      <ComVisible(True)>\n\n      Public Structure NativeOverlapped\n  inheritedMembers:\n  - System.ValueType.Equals(System.Object)\n  - System.ValueType.GetHashCode\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: NativeOverlapped\n- uid: System.Threading.NativeOverlapped.EventHandle\n  commentId: F:System.Threading.NativeOverlapped.EventHandle\n  id: EventHandle\n  parent: System.Threading.NativeOverlapped\n  langs:\n  - csharp\n  - vb\n  name: EventHandle\n  fullName: System.Threading.NativeOverlapped.EventHandle\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Overlapped.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EventHandle\n    path: src/mscorlib/src/System/Threading/Overlapped.cs\n    startLine: 52\n  assemblies:\n  - System.Threading.Overlapped\n  namespace: System.Threading\n  summary: \"\\n<p>Specifies the handle to an event set to the signaled state when the operation is complete. The calling process must set this member either to zero or to a valid event handle before calling any overlapped functions.</p>\\n\"\n  syntax:\n    content: public IntPtr EventHandle\n    content.vb: Public EventHandle As IntPtr\n    return:\n      type: System.IntPtr\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NativeOverlapped.EventHandle\n- uid: System.Threading.NativeOverlapped.InternalHigh\n  commentId: F:System.Threading.NativeOverlapped.InternalHigh\n  id: InternalHigh\n  parent: System.Threading.NativeOverlapped\n  langs:\n  - csharp\n  - vb\n  name: InternalHigh\n  fullName: System.Threading.NativeOverlapped.InternalHigh\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Overlapped.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: InternalHigh\n    path: src/mscorlib/src/System/Threading/Overlapped.cs\n    startLine: 49\n  assemblies:\n  - System.Threading.Overlapped\n  namespace: System.Threading\n  summary: \"\\n<p>Specifies the length of the data transferred. Reserved for operating system use.</p>\\n\"\n  syntax:\n    content: public IntPtr InternalHigh\n    content.vb: Public InternalHigh As IntPtr\n    return:\n      type: System.IntPtr\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NativeOverlapped.InternalHigh\n- uid: System.Threading.NativeOverlapped.InternalLow\n  commentId: F:System.Threading.NativeOverlapped.InternalLow\n  id: InternalLow\n  parent: System.Threading.NativeOverlapped\n  langs:\n  - csharp\n  - vb\n  name: InternalLow\n  fullName: System.Threading.NativeOverlapped.InternalLow\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Overlapped.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: InternalLow\n    path: src/mscorlib/src/System/Threading/Overlapped.cs\n    startLine: 48\n  assemblies:\n  - System.Threading.Overlapped\n  namespace: System.Threading\n  summary: \"\\n<p>Specifies a system-dependent status. Reserved for operating system use.</p>\\n\"\n  syntax:\n    content: public IntPtr InternalLow\n    content.vb: Public InternalLow As IntPtr\n    return:\n      type: System.IntPtr\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NativeOverlapped.InternalLow\n- uid: System.Threading.NativeOverlapped.OffsetHigh\n  commentId: F:System.Threading.NativeOverlapped.OffsetHigh\n  id: OffsetHigh\n  parent: System.Threading.NativeOverlapped\n  langs:\n  - csharp\n  - vb\n  name: OffsetHigh\n  fullName: System.Threading.NativeOverlapped.OffsetHigh\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Overlapped.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OffsetHigh\n    path: src/mscorlib/src/System/Threading/Overlapped.cs\n    startLine: 51\n  assemblies:\n  - System.Threading.Overlapped\n  namespace: System.Threading\n  summary: \"\\n<p>Specifies the high word of the byte offset at which to start the transfer.</p>\\n\"\n  syntax:\n    content: public int OffsetHigh\n    content.vb: Public OffsetHigh As Integer\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NativeOverlapped.OffsetHigh\n- uid: System.Threading.NativeOverlapped.OffsetLow\n  commentId: F:System.Threading.NativeOverlapped.OffsetLow\n  id: OffsetLow\n  parent: System.Threading.NativeOverlapped\n  langs:\n  - csharp\n  - vb\n  name: OffsetLow\n  fullName: System.Threading.NativeOverlapped.OffsetLow\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Overlapped.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OffsetLow\n    path: src/mscorlib/src/System/Threading/Overlapped.cs\n    startLine: 50\n  assemblies:\n  - System.Threading.Overlapped\n  namespace: System.Threading\n  summary: \"\\n<p>Specifies a file position at which to start the transfer.</p>\\n\"\n  syntax:\n    content: public int OffsetLow\n    content.vb: Public OffsetLow As Integer\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NativeOverlapped.OffsetLow\nreferences:\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  fullName: System.IntPtr\n  nameWithType: IntPtr\n  commentId: T:System.IntPtr\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n"}