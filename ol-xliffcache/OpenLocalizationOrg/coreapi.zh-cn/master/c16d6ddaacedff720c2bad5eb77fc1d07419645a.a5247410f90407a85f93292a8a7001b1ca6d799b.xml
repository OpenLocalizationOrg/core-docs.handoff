{"nodes":[{"pos":[1239,1249],"content":"GenericAcl","needQuote":true,"nodes":[{"content":"GenericAcl","pos":[0,10]}]},{"pos":[3485,3496],"content":"AclRevision","needQuote":true,"nodes":[{"content":"AclRevision","pos":[0,11]}]},{"pos":[4901,4914],"content":"AclRevisionDS","needQuote":true,"nodes":[{"content":"AclRevisionDS","pos":[0,13]}]},{"pos":[6331,6346],"content":"MaxBinaryLength","needQuote":true,"nodes":[{"content":"MaxBinaryLength","pos":[0,15]}]},{"pos":[7526,7538],"content":"GenericAcl()","needQuote":true,"nodes":[{"content":"GenericAcl()","pos":[0,12]}]},{"pos":[8590,8602],"content":"BinaryLength","needQuote":true,"nodes":[{"content":"BinaryLength","pos":[0,12]}]},{"pos":[10279,10284],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[11736,11750],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"content":"\\n&lt;p&gt;Always &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12686,12727],"source":"\\n<p>Always <strong>false</strong>.</p>\\n"},{"pos":[13167,13178],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[14942,14950],"content":"Revision","needQuote":true,"nodes":[{"content":"Revision","pos":[0,8]}]},{"pos":[16314,16322],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"content":"\\n&lt;p&gt;Always returns &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17251,17299],"source":"\\n<p>Always returns <strong>null</strong>.</p>\\n"},{"pos":[17890,17917],"content":"CopyTo(GenericAce[], Int32)","needQuote":true,"nodes":[{"content":"CopyTo(GenericAce[], Int32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The zero-based index of &lt;em&gt;array&lt;/em&gt; where the copying begins.&lt;/p&gt;\\n","pos":[19321,19396],"source":"\\n<p>The zero-based index of <em>array</em> where the copying begins.</p>\\n"},{"pos":[20051,20079],"content":"GetBinaryForm(Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBinaryForm(Byte[], Int32)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The offset at which to start marshaling.&lt;/p&gt;\\n","pos":[21307,21358],"source":"\\n<p>The offset at which to start marshaling.</p>\\n"},{"pos":[22278,22293],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"content":"\\n&lt;p&gt;An enumerator object.&lt;/p&gt;\\n","pos":[23124,23156],"source":"\\n<p>An enumerator object.</p>\\n"},{"pos":[23664,23696],"content":"ICollection.CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"ICollection.CopyTo(Array, Int32)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The zero-based index of &lt;em&gt;array&lt;/em&gt; where the copying begins.&lt;/p&gt;\\n","pos":[25147,25222],"source":"\\n<p>The zero-based index of <em>array</em> where the copying begins.</p>\\n"},{"pos":[25857,25884],"content":"IEnumerable.GetEnumerator()","needQuote":true,"nodes":[{"content":"IEnumerable.GetEnumerator()","pos":[0,27]}]},{"pos":[27561,27590],"content":"System.Security.AccessControl","needQuote":true,"nodes":[{"content":"System.Security.AccessControl","pos":[0,29]}]},{"pos":[27790,27796],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27970,27981],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[28194,28205],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[28404,28414],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[28509,28517],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[28586,28587],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28614,28615],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28685,28693],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[28762,28763],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28790,28791],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28974,28988],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[29107,29113],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29180,29181],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29231,29237],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29297,29298],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29381,29387],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29454,29455],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29505,29511],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29571,29572],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29786,29808],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[29956,29962],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[30029,30030],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30080,30086],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30147,30148]},{"pos":[30203,30209],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30269,30270],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30367,30373],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[30440,30441],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30491,30497],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30558,30559]},{"pos":[30614,30620],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30680,30681],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30926,30957],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[31123,31138],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[31214,31215],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31265,31271],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[31332,31333]},{"pos":[31388,31394],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31454,31455],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31561,31576],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[31652,31653],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31703,31709],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[31770,31771]},{"pos":[31826,31832],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31892,31893],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32123,32136],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[32237,32248],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[32320,32321],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32348,32349],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32422,32433],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[32505,32506],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32533,32534],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32709,32718],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[32811,32818],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[32886,32887],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32914,32915],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32984,32991],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[33059,33060],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33087,33088],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33263,33280],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[33389,33404],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[33480,33481],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33508,33509],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33586,33601],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[33677,33678],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33705,33706],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34001,34014],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[34131,34142],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[34201,34202],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34229,34230],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34311,34322],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[34381,34382],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34409,34410],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34765,34777],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[34910,34920],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[34987,34988],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35015,35016],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35105,35115],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[35182,35183],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35210,35211],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35552,35567],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[35771,35784],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[35846,35847],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35874,35875],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35953,35969],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[36034,36035],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36062,36063],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36441,36458],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[36670,36685],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[36749,36750],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36777,36778],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36858,36876],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[36943,36944],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36971,36972],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37207,37213],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[37332,37350],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[37551,37575],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[37754,37765],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[37824,37825],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37892,37903],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[37980,37981],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38094,38105],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[38164,38165],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38232,38243],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[38320,38321],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38549,38558],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[38764,38787],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[38982,38992],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[39059,39060],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39127,39138],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[39215,39216],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39337,39347],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[39414,39415],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39482,39493],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[39570,39571],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39824,39842],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[40064,40090],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[40397,40410],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[40472,40473],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40540,40551],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[40628,40629],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40739,40755],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[40820,40821],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40888,40899],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[40976,40977],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41266,41276],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[41476,41504],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[41819,41834],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[41898,41899],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41966,41977],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[42054,42055],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42167,42185],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[42252,42253],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42320,42331],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[42408,42409],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42671,42682],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[42826,42830],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[42968,42973],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[43162,43167],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[43425,43439],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[43669,43676],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[43874,43884],"content":"GenericAce","needQuote":true,"nodes":[{"content":"GenericAce","pos":[0,10]}]},{"pos":[44137,44145],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[44348,44360],"content":"GenericAce[]","needQuote":true,"nodes":[{"content":"GenericAce[]","pos":[0,12]}]},{"pos":[44573,44583],"content":"GenericAce","needQuote":true,"nodes":[{"content":"GenericAce","pos":[0,10]}]},{"content":"[]","pos":[44650,44652]},{"pos":[44744,44754],"content":"GenericAce","needQuote":true,"nodes":[{"content":"GenericAce","pos":[0,10]}]},{"pos":[44820,44822],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[44930,44936],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[45056,45060],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[45119,45121]},{"pos":[45184,45188],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[45246,45248],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[45434,45447],"content":"AceEnumerator","needQuote":true,"nodes":[{"content":"AceEnumerator","pos":[0,13]}]},{"pos":[45733,45753],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"pos":[45931,45937],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[46000,46001],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46050,46055],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[46094,46095]},{"pos":[46149,46154],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[46213,46214],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46326,46332],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[46395,46396],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46445,46450],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[46489,46490]},{"pos":[46544,46549],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[46608,46609],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46820,46825],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[47022,47037],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[47176,47189],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[47259,47260],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47287,47288],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47380,47393],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[47463,47464],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47491,47492],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47708,47719],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[47907,47934],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Security.AccessControl.GenericAcl\n  commentId: T:System.Security.AccessControl.GenericAcl\n  id: GenericAcl\n  parent: System.Security.AccessControl\n  children:\n  - System.Security.AccessControl.GenericAcl.#ctor\n  - System.Security.AccessControl.GenericAcl.AclRevision\n  - System.Security.AccessControl.GenericAcl.AclRevisionDS\n  - System.Security.AccessControl.GenericAcl.BinaryLength\n  - System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)\n  - System.Security.AccessControl.GenericAcl.Count\n  - System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[],System.Int32)\n  - System.Security.AccessControl.GenericAcl.GetEnumerator\n  - System.Security.AccessControl.GenericAcl.IsSynchronized\n  - System.Security.AccessControl.GenericAcl.Item(System.Int32)\n  - System.Security.AccessControl.GenericAcl.MaxBinaryLength\n  - System.Security.AccessControl.GenericAcl.Revision\n  - System.Security.AccessControl.GenericAcl.SyncRoot\n  - System.Security.AccessControl.GenericAcl.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Security.AccessControl.GenericAcl.System#Collections#IEnumerable#GetEnumerator\n  langs:\n  - csharp\n  - vb\n  name: GenericAcl\n  fullName: System.Security.AccessControl.GenericAcl\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GenericAcl\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 280\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Represents an access control list (ACL) and is the base class for the <xref href=\\\"System.Security.AccessControl.CommonAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Security.AccessControl.DiscretionaryAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Security.AccessControl.RawAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Security.AccessControl.SystemAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> classes.</p>\\n\"\n  syntax:\n    content: 'public abstract class GenericAcl : ICollection, IEnumerable'\n    content.vb: >-\n      Public MustInherit Class GenericAcl\n          Implements ICollection, IEnumerable\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.ICollection\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: GenericAcl\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Security.AccessControl.GenericAcl.AclRevision\n  commentId: F:System.Security.AccessControl.GenericAcl.AclRevision\n  id: AclRevision\n  parent: System.Security.AccessControl.GenericAcl\n  langs:\n  - csharp\n  - vb\n  name: AclRevision\n  fullName: System.Security.AccessControl.GenericAcl.AclRevision\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AclRevision\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 282\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>The revision level of the current <xref href=\\\"System.Security.AccessControl.GenericAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This value is returned by the <xref href=\\\"System.Security.AccessControl.GenericAcl.Revision\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property for Access Control Lists (ACLs) that are not associated with Directory Services objects.</p>\\n\"\n  syntax:\n    content: public static readonly byte AclRevision\n    content.vb: Public Shared ReadOnly AclRevision As Byte\n    return:\n      type: System.Byte\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: GenericAcl.AclRevision\n- uid: System.Security.AccessControl.GenericAcl.AclRevisionDS\n  commentId: F:System.Security.AccessControl.GenericAcl.AclRevisionDS\n  id: AclRevisionDS\n  parent: System.Security.AccessControl.GenericAcl\n  langs:\n  - csharp\n  - vb\n  name: AclRevisionDS\n  fullName: System.Security.AccessControl.GenericAcl.AclRevisionDS\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AclRevisionDS\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 283\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>The revision level of the current <xref href=\\\"System.Security.AccessControl.GenericAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This value is returned by the <xref href=\\\"System.Security.AccessControl.GenericAcl.Revision\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property for Access Control Lists (ACLs) that are associated with Directory Services objects.</p>\\n\"\n  syntax:\n    content: public static readonly byte AclRevisionDS\n    content.vb: Public Shared ReadOnly AclRevisionDS As Byte\n    return:\n      type: System.Byte\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: GenericAcl.AclRevisionDS\n- uid: System.Security.AccessControl.GenericAcl.MaxBinaryLength\n  commentId: F:System.Security.AccessControl.GenericAcl.MaxBinaryLength\n  id: MaxBinaryLength\n  parent: System.Security.AccessControl.GenericAcl\n  langs:\n  - csharp\n  - vb\n  name: MaxBinaryLength\n  fullName: System.Security.AccessControl.GenericAcl.MaxBinaryLength\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MaxBinaryLength\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 284\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>The maximum allowed binary length of a <xref href=\\\"System.Security.AccessControl.GenericAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public static readonly int MaxBinaryLength\n    content.vb: Public Shared ReadOnly MaxBinaryLength As Integer\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: GenericAcl.MaxBinaryLength\n- uid: System.Security.AccessControl.GenericAcl.#ctor\n  commentId: M:System.Security.AccessControl.GenericAcl.#ctor\n  id: '#ctor'\n  parent: System.Security.AccessControl.GenericAcl\n  langs:\n  - csharp\n  - vb\n  name: GenericAcl()\n  fullName: System.Security.AccessControl.GenericAcl.GenericAcl()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 285\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.GenericAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected GenericAcl()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: GenericAcl.GenericAcl()\n- uid: System.Security.AccessControl.GenericAcl.BinaryLength\n  commentId: P:System.Security.AccessControl.GenericAcl.BinaryLength\n  id: BinaryLength\n  parent: System.Security.AccessControl.GenericAcl\n  langs:\n  - csharp\n  - vb\n  name: BinaryLength\n  fullName: System.Security.AccessControl.GenericAcl.BinaryLength\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BinaryLength\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 286\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the length, in bytes, of the binary representation of the current <xref href=\\\"System.Security.AccessControl.GenericAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. This length should be used before marshaling the ACL into a binary array with the <xref href=\\\"System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[],System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: public abstract int BinaryLength { get; }\n    content.vb: Public MustOverride ReadOnly Property BinaryLength As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The length, in bytes, of the binary representation of the current <xref href=\\\"System.Security.AccessControl.GenericAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: GenericAcl.BinaryLength\n- uid: System.Security.AccessControl.GenericAcl.Count\n  commentId: P:System.Security.AccessControl.GenericAcl.Count\n  id: Count\n  parent: System.Security.AccessControl.GenericAcl\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Security.AccessControl.GenericAcl.Count\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 287\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the number of access control entries (ACEs) in the current <xref href=\\\"System.Security.AccessControl.GenericAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public abstract int Count { get; }\n    content.vb: Public MustOverride ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of ACEs in the current <xref href=\\\"System.Security.AccessControl.GenericAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.Count\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: GenericAcl.Count\n- uid: System.Security.AccessControl.GenericAcl.IsSynchronized\n  commentId: P:System.Security.AccessControl.GenericAcl.IsSynchronized\n  id: IsSynchronized\n  parent: System.Security.AccessControl.GenericAcl\n  langs:\n  - csharp\n  - vb\n  name: IsSynchronized\n  fullName: System.Security.AccessControl.GenericAcl.IsSynchronized\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsSynchronized\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 288\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>This property is always set to <strong>false</strong>. It is implemented only because it is required for the implementation of the <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n\"\n  syntax:\n    content: public bool IsSynchronized { get; }\n    content.vb: Public ReadOnly Property IsSynchronized As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Always <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.IsSynchronized\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: GenericAcl.IsSynchronized\n- uid: System.Security.AccessControl.GenericAcl.Item(System.Int32)\n  commentId: P:System.Security.AccessControl.GenericAcl.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Security.AccessControl.GenericAcl\n  langs:\n  - csharp\n  - vb\n  name: Item[Int32]\n  fullName: System.Security.AccessControl.GenericAcl.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 289\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets or sets the <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the specified index.</p>\\n\"\n  syntax:\n    content: public abstract GenericAce this[int index] { get; set; }\n    content.vb: Public MustOverride Property Item(index As Integer) As GenericAce\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to get or set.</p>\\n\"\n    return:\n      type: System.Security.AccessControl.GenericAce\n      description: \"\\n<p>The <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the specified index.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Security.AccessControl.GenericAcl.Item(System.Int32)\n  name.vb: Item(Int32)\n  nameWithType: GenericAcl.Item[Int32]\n  nameWithType.vb: GenericAcl.Item(Int32)\n- uid: System.Security.AccessControl.GenericAcl.Revision\n  commentId: P:System.Security.AccessControl.GenericAcl.Revision\n  id: Revision\n  parent: System.Security.AccessControl.GenericAcl\n  langs:\n  - csharp\n  - vb\n  name: Revision\n  fullName: System.Security.AccessControl.GenericAcl.Revision\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Revision\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 290\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the revision level of the <xref href=\\\"System.Security.AccessControl.GenericAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public abstract byte Revision { get; }\n    content.vb: Public MustOverride ReadOnly Property Revision As Byte\n    parameters: []\n    return:\n      type: System.Byte\n      description: \"\\n<p>A byte value that specifies the revision level of the <xref href=\\\"System.Security.AccessControl.GenericAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: GenericAcl.Revision\n- uid: System.Security.AccessControl.GenericAcl.SyncRoot\n  commentId: P:System.Security.AccessControl.GenericAcl.SyncRoot\n  id: SyncRoot\n  parent: System.Security.AccessControl.GenericAcl\n  langs:\n  - csharp\n  - vb\n  name: SyncRoot\n  fullName: System.Security.AccessControl.GenericAcl.SyncRoot\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SyncRoot\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 291\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>This property always returns <strong>null</strong>. It is implemented only because it is required for the implementation of the <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n\"\n  syntax:\n    content: public virtual object SyncRoot { get; }\n    content.vb: Public Overridable ReadOnly Property SyncRoot As Object\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>Always returns <strong>null</strong>.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.SyncRoot\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: GenericAcl.SyncRoot\n- uid: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)\n  commentId: M:System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)\n  id: CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)\n  parent: System.Security.AccessControl.GenericAcl\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(GenericAce[], Int32)\n  fullName: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CopyTo\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 292\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Copies each <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the current <xref href=\\\"System.Security.AccessControl.GenericAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> into the specified array.</p>\\n\"\n  syntax:\n    content: public void CopyTo(GenericAce[] array, int index)\n    content.vb: Public Sub CopyTo(array As GenericAce(), index As Integer)\n    parameters:\n    - id: array\n      type: System.Security.AccessControl.GenericAce[]\n      description: \"\\n<p>The array into which copies of the <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects contained by the current <xref href=\\\"System.Security.AccessControl.GenericAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are placed.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of <em>array</em> where the copying begins.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce(), System.Int32)\n  name.vb: CopyTo(GenericAce(), Int32)\n  nameWithType: GenericAcl.CopyTo(GenericAce[], Int32)\n  nameWithType.vb: GenericAcl.CopyTo(GenericAce(), Int32)\n- uid: System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[],System.Int32)\n  commentId: M:System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[],System.Int32)\n  id: GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.GenericAcl\n  langs:\n  - csharp\n  - vb\n  name: GetBinaryForm(Byte[], Int32)\n  fullName: System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetBinaryForm\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 293\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Marshals the contents of the <xref href=\\\"System.Security.AccessControl.GenericAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object into the specified byte array beginning at the specified offset.</p>\\n\"\n  syntax:\n    content: public abstract void GetBinaryForm(byte[] binaryForm, int offset)\n    content.vb: Public MustOverride Sub GetBinaryForm(binaryForm As Byte(), offset As Integer)\n    parameters:\n    - id: binaryForm\n      type: System.Byte[]\n      description: \"\\n<p>The byte array into which the contents of the <xref href=\\\"System.Security.AccessControl.GenericAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is marshaled.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset at which to start marshaling.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is negative or too high to allow the entire <xref href=\\\"System.Security.AccessControl.GenericAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be copied into <em>array</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte(), System.Int32)\n  name.vb: GetBinaryForm(Byte(), Int32)\n  nameWithType: GenericAcl.GetBinaryForm(Byte[], Int32)\n  nameWithType.vb: GenericAcl.GetBinaryForm(Byte(), Int32)\n- uid: System.Security.AccessControl.GenericAcl.GetEnumerator\n  commentId: M:System.Security.AccessControl.GenericAcl.GetEnumerator\n  id: GetEnumerator\n  parent: System.Security.AccessControl.GenericAcl\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Security.AccessControl.GenericAcl.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEnumerator\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 294\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Retrieves an object that you can use to iterate through the access control entries (ACEs) in an access control list (ACL).</p>\\n\"\n  syntax:\n    content: public AceEnumerator GetEnumerator()\n    content.vb: Public Function GetEnumerator As AceEnumerator\n    return:\n      type: System.Security.AccessControl.AceEnumerator\n      description: \"\\n<p>An enumerator object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: GenericAcl.GetEnumerator()\n- uid: System.Security.AccessControl.GenericAcl.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  commentId: M:System.Security.AccessControl.GenericAcl.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Security.AccessControl.GenericAcl\n  langs:\n  - csharp\n  - vb\n  name: ICollection.CopyTo(Array, Int32)\n  fullName: System.Security.AccessControl.GenericAcl.System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.CopyTo\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 295\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Copies each <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the current <xref href=\\\"System.Security.AccessControl.GenericAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> into the specified array.</p>\\n\"\n  syntax:\n    content: void ICollection.CopyTo(Array array, int index)\n    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The array into which copies of the <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects contained by the current <xref href=\\\"System.Security.AccessControl.GenericAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are placed.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of <em>array</em> where the copying begins.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)\n  nameWithType: GenericAcl.ICollection.CopyTo(Array, Int32)\n  nameWithType.vb: GenericAcl.System.Collections.ICollection.CopyTo(Array, Int32)\n- uid: System.Security.AccessControl.GenericAcl.System#Collections#IEnumerable#GetEnumerator\n  commentId: M:System.Security.AccessControl.GenericAcl.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Security.AccessControl.GenericAcl\n  langs:\n  - csharp\n  - vb\n  name: IEnumerable.GetEnumerator()\n  fullName: System.Security.AccessControl.GenericAcl.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IEnumerable.GetEnumerator\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 296\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Returns a new instance of the <xref href=\\\"System.Security.AccessControl.AceEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class cast as an instance of the <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n\"\n  syntax:\n    content: IEnumerator IEnumerable.GetEnumerator()\n    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>A new <xref href=\\\"System.Security.AccessControl.AceEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, cast as an instance of the <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n\"\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  name.vb: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: GenericAcl.IEnumerable.GetEnumerator()\n  nameWithType.vb: GenericAcl.System.Collections.IEnumerable.GetEnumerator()\nreferences:\n- uid: System.Security.AccessControl\n  isExternal: false\n  name: System.Security.AccessControl\n  fullName: System.Security.AccessControl\n  commentId: N:System.Security.AccessControl\n  nameWithType: System.Security.AccessControl\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  commentId: T:System.Collections.ICollection\n  nameWithType: ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  commentId: T:System.Collections.IEnumerable\n  nameWithType: IEnumerable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  nameWithType: Queryable.AsQueryable()\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel()\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  commentId: N:System.Collections\n  nameWithType: System.Collections\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  commentId: T:System.Linq.Queryable\n  nameWithType: Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  commentId: T:System.Linq.Enumerable\n  nameWithType: Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  commentId: N:System.Linq\n  nameWithType: System.Linq\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  commentId: T:System.Byte\n  nameWithType: Byte\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Collections.ICollection.Count\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: Count\n  fullName: System.Collections.ICollection.Count\n  commentId: P:System.Collections.ICollection.Count\n  nameWithType: ICollection.Count\n- uid: System.Collections.ICollection.IsSynchronized\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Collections.ICollection.IsSynchronized\n  commentId: P:System.Collections.ICollection.IsSynchronized\n  nameWithType: ICollection.IsSynchronized\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Security.AccessControl.GenericAce\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: GenericAce\n  fullName: System.Security.AccessControl.GenericAce\n  commentId: T:System.Security.AccessControl.GenericAce\n  nameWithType: GenericAce\n- uid: System.Collections.ICollection.SyncRoot\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Collections.ICollection.SyncRoot\n  commentId: P:System.Collections.ICollection.SyncRoot\n  nameWithType: ICollection.SyncRoot\n- uid: System.Security.AccessControl.GenericAce[]\n  name: GenericAce[]\n  fullName: System.Security.AccessControl.GenericAce[]\n  fullname.vb: System.Security.AccessControl.GenericAce()\n  name.vb: GenericAce()\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAce\n    name: GenericAce\n    fullName: System.Security.AccessControl.GenericAce\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAce\n    name: GenericAce\n    fullName: System.Security.AccessControl.GenericAce\n  - name: ()\n    fullName: ()\n  nameWithType: GenericAce[]\n  nameWithType.vb: GenericAce()\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Security.AccessControl.AceEnumerator\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AceEnumerator\n  fullName: System.Security.AccessControl.AceEnumerator\n  commentId: T:System.Security.AccessControl.AceEnumerator\n  nameWithType: AceEnumerator\n- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ICollection\n  isExternal: true\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  spec.csharp:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  nameWithType: ICollection.CopyTo(Array, Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  commentId: T:System.Array\n  nameWithType: Array\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n  nameWithType: IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  commentId: T:System.Collections.IEnumerator\n  nameWithType: IEnumerator\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}