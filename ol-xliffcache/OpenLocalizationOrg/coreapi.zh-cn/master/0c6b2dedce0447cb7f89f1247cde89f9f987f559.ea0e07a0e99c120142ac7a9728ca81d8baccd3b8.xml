{"nodes":[{"pos":[397,407],"content":"AppContext","needQuote":true,"nodes":[{"content":"AppContext","pos":[0,10]}]},{"pos":[1551,1564],"content":"BaseDirectory","needQuote":true,"nodes":[{"content":"BaseDirectory","pos":[0,13]}]},{"content":"\\n&lt;p&gt;the pathname of the base directory that the assembly resolver uses to probe for assemblies.","pos":[2338,2434],"source":"\\n<p>the pathname of the base directory that the assembly resolver uses to probe for assemblies."},{"content":"&lt;/p&gt;\\n","pos":[2435,2441],"source":" </p>\\n"},{"pos":[2832,2858],"content":"SetSwitch(String, Boolean)","needQuote":true,"nodes":[{"content":"SetSwitch(String, Boolean)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The name of the switch.","pos":[3562,3590],"source":"\\n<p>The name of the switch."},{"content":"&lt;/p&gt;\\n","pos":[3591,3597],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the switch.","pos":[3666,3695],"source":"\\n<p>The value of the switch."},{"content":"&lt;/p&gt;\\n","pos":[3696,3702],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;switchName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[3821,3873],"source":"\\n<p>\\n<em>switchName</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[3874,3880],"source":" </p>\\n"},{"pos":[4651,4684],"content":"TryGetSwitch(String, out Boolean)","needQuote":true,"nodes":[{"content":"TryGetSwitch(String, out Boolean)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The name of the switch.","pos":[5437,5465],"source":"\\n<p>The name of the switch."},{"content":"&lt;/p&gt;\\n","pos":[5466,5472],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;When this method returns, contains the value of &lt;em&gt;switchName&lt;/em&gt; if &lt;em&gt;switchName&lt;/em&gt; was found, or &lt;strong&gt;false&lt;/strong&gt; if &lt;em&gt;switchName&lt;/em&gt; was not found.","pos":[5541,5711],"source":"\\n<p>When this method returns, contains the value of <em>switchName</em> if <em>switchName</em> was found, or <strong>false</strong> if <em>switchName</em> was not found."},{"content":"This parameter is passed uninitialized.","pos":[5712,5751]},{"content":"&lt;/p&gt;\\n","pos":[5752,5758],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;switchName&lt;/em&gt; was set and the &lt;em&gt;isEnabled&lt;/em&gt; argument contains the value of the switch; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[5819,5983],"source":"\\n<p>\\n<strong>true</strong> if <em>switchName</em> was set and the <em>isEnabled</em> argument contains the value of the switch; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[5984,5990],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;switchName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[6109,6161],"source":"\\n<p>\\n<em>switchName</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[6162,6168],"source":" </p>\\n"},{"pos":[7062,7081],"content":"TargetFrameworkName","needQuote":true,"nodes":[{"content":"TargetFrameworkName","pos":[0,19]}]},{"pos":[8016,8031],"content":"GetData(String)","needQuote":true,"nodes":[{"content":"GetData(String)","pos":[0,15]}]},{"pos":[8891,8897],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[9028,9034],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9194,9204],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[9299,9307],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[9376,9377],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9404,9405],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9475,9483],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[9552,9553],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9580,9581],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9764,9778],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[9897,9903],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9970,9971],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10021,10027],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10087,10088],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10171,10177],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10244,10245],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10295,10301],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10361,10362],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10576,10598],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[10746,10752],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10819,10820],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10870,10876],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10937,10938]},{"pos":[10993,10999],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11059,11060],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11157,11163],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11230,11231],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11281,11287],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11348,11349]},{"pos":[11404,11410],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11470,11471],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11716,11747],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[11913,11928],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[12004,12005],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12055,12061],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12122,12123]},{"pos":[12178,12184],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12244,12245],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12351,12366],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[12442,12443],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12493,12499],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12560,12561]},{"pos":[12616,12622],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12682,12683],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12913,12926],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[13027,13038],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[13110,13111],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13138,13139],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13212,13223],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[13295,13296],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13323,13324],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13499,13508],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[13601,13608],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[13676,13677],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13704,13705],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13774,13781],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[13849,13850],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13877,13878],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14053,14070],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[14179,14194],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[14270,14271],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14298,14299],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14376,14391],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[14467,14468],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14495,14496],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14665,14671],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[14817,14824],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[14970,14991],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[15192,15209],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.AppContext\n  commentId: T:System.AppContext\n  id: AppContext\n  parent: System\n  children:\n  - System.AppContext.BaseDirectory\n  - System.AppContext.GetData(System.String)\n  - System.AppContext.SetSwitch(System.String,System.Boolean)\n  - System.AppContext.TargetFrameworkName\n  - System.AppContext.TryGetSwitch(System.String,System.Boolean@)\n  langs:\n  - csharp\n  - vb\n  name: AppContext\n  fullName: System.AppContext\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/AppContext/AppContext.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AppContext\n    path: src/mscorlib/src/System/AppContext/AppContext.cs\n    startLine: 9\n  assemblies:\n  - System.AppContext\n  namespace: System\n  summary: \"\\n<p>Provides members for setting and retrieving data about an application's context. </p>\\n\"\n  syntax:\n    content: public class AppContext\n    content.vb: Public Class AppContext\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: AppContext\n- uid: System.AppContext.BaseDirectory\n  commentId: P:System.AppContext.BaseDirectory\n  id: BaseDirectory\n  parent: System.AppContext\n  langs:\n  - csharp\n  - vb\n  name: BaseDirectory\n  fullName: System.AppContext.BaseDirectory\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/AppContext/AppContext.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BaseDirectory\n    path: src/mscorlib/src/System/AppContext/AppContext.cs\n    startLine: 21\n  assemblies:\n  - System.AppContext\n  namespace: System\n  summary: \"\\n<p>Gets the pathname of the base directory that the assembly resolver uses to probe for assemblies. </p>\\n\"\n  syntax:\n    content: >-\n      public static string BaseDirectory\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public Shared ReadOnly Property BaseDirectory As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>the pathname of the base directory that the assembly resolver uses to probe for assemblies. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: AppContext.BaseDirectory\n- uid: System.AppContext.SetSwitch(System.String,System.Boolean)\n  commentId: M:System.AppContext.SetSwitch(System.String,System.Boolean)\n  id: SetSwitch(System.String,System.Boolean)\n  parent: System.AppContext\n  langs:\n  - csharp\n  - vb\n  name: SetSwitch(String, Boolean)\n  fullName: System.AppContext.SetSwitch(System.String, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/AppContext/AppContext.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetSwitch\n    path: src/mscorlib/src/System/AppContext/AppContext.cs\n    startLine: 160\n  assemblies:\n  - System.AppContext\n  namespace: System\n  summary: \"\\n<p>Sets the value of a switch. </p>\\n\"\n  syntax:\n    content: public static void SetSwitch(string switchName, bool isEnabled)\n    content.vb: Public Shared Sub SetSwitch(switchName As String, isEnabled As Boolean)\n    parameters:\n    - id: switchName\n      type: System.String\n      description: \"\\n<p>The name of the switch. </p>\\n\"\n    - id: isEnabled\n      type: System.Boolean\n      description: \"\\n<p>The value of the switch. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>switchName</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>switchName</em> is <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.AppContext.TryGetSwitch(System.String,System.Boolean@)\n    commentId: M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: AppContext.SetSwitch(String, Boolean)\n- uid: System.AppContext.TryGetSwitch(System.String,System.Boolean@)\n  commentId: M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)\n  id: TryGetSwitch(System.String,System.Boolean@)\n  parent: System.AppContext\n  langs:\n  - csharp\n  - vb\n  name: TryGetSwitch(String, out Boolean)\n  fullName: System.AppContext.TryGetSwitch(System.String, out System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/AppContext/AppContext.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryGetSwitch\n    path: src/mscorlib/src/System/AppContext/AppContext.cs\n    startLine: 64\n  assemblies:\n  - System.AppContext\n  namespace: System\n  summary: \"\\n<p>Tries to get the value of a switch. </p>\\n\"\n  syntax:\n    content: public static bool TryGetSwitch(string switchName, out bool isEnabled)\n    content.vb: Public Shared Function TryGetSwitch(switchName As String, ByRef isEnabled As Boolean) As Boolean\n    parameters:\n    - id: switchName\n      type: System.String\n      description: \"\\n<p>The name of the switch. </p>\\n\"\n    - id: isEnabled\n      type: System.Boolean\n      description: \"\\n<p>When this method returns, contains the value of <em>switchName</em> if <em>switchName</em> was found, or <strong>false</strong> if <em>switchName</em> was not found. This parameter is passed uninitialized. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>switchName</em> was set and the <em>isEnabled</em> argument contains the value of the switch; otherwise, <strong>false</strong>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>switchName</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>switchName</em> is <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.AppContext.SetSwitch(System.String,System.Boolean)\n    commentId: M:System.AppContext.SetSwitch(System.String,System.Boolean)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.AppContext.TryGetSwitch(System.String, ByRef System.Boolean)\n  name.vb: TryGetSwitch(String, ByRef Boolean)\n  nameWithType: AppContext.TryGetSwitch(String, out Boolean)\n  nameWithType.vb: AppContext.TryGetSwitch(String, ByRef Boolean)\n- uid: System.AppContext.TargetFrameworkName\n  commentId: P:System.AppContext.TargetFrameworkName\n  id: TargetFrameworkName\n  parent: System.AppContext\n  langs:\n  - csharp\n  - vb\n  name: TargetFrameworkName\n  fullName: System.AppContext.TargetFrameworkName\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/AppContext/AppContext.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TargetFrameworkName\n    path: src/mscorlib/src/System/AppContext/AppContext.cs\n    startLine: 34\n  assemblies:\n  - System.AppContext\n  namespace: System\n  syntax:\n    content: public static string TargetFrameworkName { get; }\n    content.vb: Public Shared ReadOnly Property TargetFrameworkName As String\n    parameters: []\n    return:\n      type: System.String\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: AppContext.TargetFrameworkName\n- uid: System.AppContext.GetData(System.String)\n  commentId: M:System.AppContext.GetData(System.String)\n  id: GetData(System.String)\n  parent: System.AppContext\n  langs:\n  - csharp\n  - vb\n  name: GetData(String)\n  fullName: System.AppContext.GetData(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/AppContext/AppContext.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetData\n    path: src/mscorlib/src/System/AppContext/AppContext.cs\n    startLine: 44\n  assemblies:\n  - System.AppContext\n  namespace: System\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static object GetData(string name)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function GetData(name As String) As Object\n    parameters:\n    - id: name\n      type: System.String\n    return:\n      type: System.Object\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: AppContext.GetData(String)\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}