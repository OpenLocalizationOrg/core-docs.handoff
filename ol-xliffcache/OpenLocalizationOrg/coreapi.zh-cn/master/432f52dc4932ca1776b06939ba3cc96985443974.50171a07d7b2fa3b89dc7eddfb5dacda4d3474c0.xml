{"nodes":[{"pos":[565,573],"content":"SpinWait","needQuote":true,"nodes":[{"content":"SpinWait","pos":[0,8]}]},{"pos":[2070,2075],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[3313,3330],"content":"NextSpinWillYield","needQuote":true,"nodes":[{"content":"NextSpinWillYield","pos":[0,17]}]},{"pos":[4627,4634],"content":"Reset()","needQuote":true,"nodes":[{"content":"Reset()","pos":[0,7]}]},{"pos":[5395,5405],"content":"SpinOnce()","needQuote":true,"nodes":[{"content":"SpinOnce()","pos":[0,10]}]},{"pos":[6270,6294],"content":"SpinUntil(Func<Boolean>)","needQuote":true,"nodes":[{"content":"SpinUntil(Func&lt;Boolean&gt;)","pos":[0,24],"source":"SpinUntil(Func<Boolean>)"}]},{"content":"\\n&lt;p&gt;A delegate to be executed over and over until it returns true.&lt;/p&gt;\\n","pos":[7015,7088],"source":"\\n<p>A delegate to be executed over and over until it returns true.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;condition&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[7207,7258],"source":"\\n<p>The <em>condition</em> argument is null.</p>\\n"},{"pos":[7875,7906],"content":"SpinUntil(Func<Boolean>, Int32)","needQuote":true,"nodes":[{"content":"SpinUntil(Func&lt;Boolean&gt;, Int32)","pos":[0,31],"source":"SpinUntil(Func<Boolean>, Int32)"}]},{"content":"\\n&lt;p&gt;A delegate to be executed over and over until it returns true.&lt;/p&gt;\\n","pos":[8756,8829],"source":"\\n<p>A delegate to be executed over and over until it returns true.</p>\\n"},{"content":"\\n&lt;p&gt;True if the condition is satisfied within the timeout; otherwise, false&lt;/p&gt;\\n","pos":[9137,9219],"source":"\\n<p>True if the condition is satisfied within the timeout; otherwise, false</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;condition&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[9338,9389],"source":"\\n<p>The <em>condition</em> argument is null.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;millisecondsTimeout&lt;/em&gt; is a negative number other than -1, which represents an infinite time-out.&lt;/p&gt;\\n","pos":[9506,9622],"source":"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n"},{"pos":[10283,10317],"content":"SpinUntil(Func<Boolean>, TimeSpan)","needQuote":true,"nodes":[{"content":"SpinUntil(Func&lt;Boolean&gt;, TimeSpan)","pos":[0,34],"source":"SpinUntil(Func<Boolean>, TimeSpan)"}]},{"content":"\\n&lt;p&gt;A delegate to be executed over and over until it returns true.&lt;/p&gt;\\n","pos":[11152,11225],"source":"\\n<p>A delegate to be executed over and over until it returns true.</p>\\n"},{"content":"\\n&lt;p&gt;True if the condition is satisfied within the timeout; otherwise, false&lt;/p&gt;\\n","pos":[11562,11644],"source":"\\n<p>True if the condition is satisfied within the timeout; otherwise, false</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;condition&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[11763,11814],"source":"\\n<p>The <em>condition</em> argument is null.</p>\\n"},{"pos":[12580,12596],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[12791,12805],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[12930,12936],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12985,12986],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13036,13042],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13102,13103],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13189,13195],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13244,13245],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13295,13301],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13361,13362],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13565,13578],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[13685,13696],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[13750,13751],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13778,13779],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13855,13866],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[13920,13921],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13948,13949],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14138,14148],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[14249,14257],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[14308,14309],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14336,14337],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14410,14418],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[14469,14470],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14497,14498],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14701,14723],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[14871,14877],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14944,14945],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14995,15001],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15062,15063]},{"pos":[15118,15124],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15184,15185],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15282,15288],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15355,15356],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15406,15412],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15473,15474]},{"pos":[15529,15535],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15595,15596],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15841,15872],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[16038,16053],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[16129,16130],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16180,16186],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16247,16248]},{"pos":[16303,16309],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16369,16370],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16476,16491],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[16567,16568],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16618,16624],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16685,16686]},{"pos":[16741,16747],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16807,16808],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17034,17043],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[17136,17143],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[17211,17212],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17239,17240],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17309,17316],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[17384,17385],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17412,17413],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17569,17578],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[17732,17738],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17859,17865],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[17995,18000],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[18143,18150],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[18320,18333],"content":"Func<Boolean>","needQuote":true,"nodes":[{"content":"Func&lt;Boolean&gt;","pos":[0,13],"source":"Func<Boolean>"}]},{"pos":[18496,18500],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[18558,18559],"content":"<","needQuote":true,"nodes":[]},{"pos":[18610,18617],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[18744,18748],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[18807,18810]},{"pos":[18868,18875],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[18936,18937],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19112,19125],"content":"Func<TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TResult&gt;","pos":[0,13],"source":"Func<TResult>"}]},{"pos":[19274,19278],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[19315,19316],"content":"<","needQuote":true,"nodes":[]},{"pos":[19343,19350],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[19449,19453],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[19491,19494]},{"pos":[19528,19535],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[19568,19569],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19749,19757],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[19906,19927],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[20121,20148],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Threading.SpinWait\n  commentId: T:System.Threading.SpinWait\n  id: SpinWait\n  parent: System.Threading\n  children:\n  - System.Threading.SpinWait.Count\n  - System.Threading.SpinWait.NextSpinWillYield\n  - System.Threading.SpinWait.Reset\n  - System.Threading.SpinWait.SpinOnce\n  - System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean})\n  - System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.Int32)\n  - System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.TimeSpan)\n  langs:\n  - csharp\n  - vb\n  name: SpinWait\n  fullName: System.Threading.SpinWait\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SpinWait.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SpinWait\n    path: src/mscorlib/src/System/Threading/SpinWait.cs\n    startLine: 71\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Provides support for spin-based waiting.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(Synchronization = true, ExternalThreading = true)]\n\n      public struct SpinWait\n    content.vb: >-\n      <HostProtection(Synchronization:=True, ExternalThreading:=True)>\n\n      Public Structure SpinWait\n  inheritedMembers:\n  - System.ValueType.Equals(System.Object)\n  - System.ValueType.GetHashCode\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: SpinWait\n- uid: System.Threading.SpinWait.Count\n  commentId: P:System.Threading.SpinWait.Count\n  id: Count\n  parent: System.Threading.SpinWait\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Threading.SpinWait.Count\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SpinWait.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Count\n    path: src/mscorlib/src/System/Threading/SpinWait.cs\n    startLine: 89\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Gets the number of times <xref href=\\\"System.Threading.SpinWait.SpinOnce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been called on this instance.</p>\\n\"\n  syntax:\n    content: public int Count { get; }\n    content.vb: Public ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>Returns an integer that represents the number of times <xref href=\\\"System.Threading.SpinWait.SpinOnce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been called on this instance.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SpinWait.Count\n- uid: System.Threading.SpinWait.NextSpinWillYield\n  commentId: P:System.Threading.SpinWait.NextSpinWillYield\n  id: NextSpinWillYield\n  parent: System.Threading.SpinWait\n  langs:\n  - csharp\n  - vb\n  name: NextSpinWillYield\n  fullName: System.Threading.SpinWait.NextSpinWillYield\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SpinWait.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: NextSpinWillYield\n    path: src/mscorlib/src/System/Threading/SpinWait.cs\n    startLine: 104\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Gets whether the next call to <xref href=\\\"System.Threading.SpinWait.SpinOnce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will yield the processor, triggering a forced context switch.</p>\\n\"\n  syntax:\n    content: public bool NextSpinWillYield { get; }\n    content.vb: Public ReadOnly Property NextSpinWillYield As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Whether the next call to <xref href=\\\"System.Threading.SpinWait.SpinOnce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will yield the processor, triggering a forced context switch.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SpinWait.NextSpinWillYield\n- uid: System.Threading.SpinWait.Reset\n  commentId: M:System.Threading.SpinWait.Reset\n  id: Reset\n  parent: System.Threading.SpinWait\n  langs:\n  - csharp\n  - vb\n  name: Reset()\n  fullName: System.Threading.SpinWait.Reset()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SpinWait.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Reset\n    path: src/mscorlib/src/System/Threading/SpinWait.cs\n    startLine: 181\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Resets the spin counter.</p>\\n\"\n  syntax:\n    content: public void Reset()\n    content.vb: Public Sub Reset\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SpinWait.Reset()\n- uid: System.Threading.SpinWait.SpinOnce\n  commentId: M:System.Threading.SpinWait.SpinOnce\n  id: SpinOnce\n  parent: System.Threading.SpinWait\n  langs:\n  - csharp\n  - vb\n  name: SpinOnce()\n  fullName: System.Threading.SpinWait.SpinOnce()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SpinWait.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SpinOnce\n    path: src/mscorlib/src/System/Threading/SpinWait.cs\n    startLine: 116\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Performs a single spin.</p>\\n\"\n  syntax:\n    content: public void SpinOnce()\n    content.vb: Public Sub SpinOnce\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SpinWait.SpinOnce()\n- uid: System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean})\n  commentId: M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean})\n  id: SpinUntil(System.Func{System.Boolean})\n  parent: System.Threading.SpinWait\n  langs:\n  - csharp\n  - vb\n  name: SpinUntil(Func<Boolean>)\n  fullName: System.Threading.SpinWait.SpinUntil(System.Func<System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SpinWait.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SpinUntil\n    path: src/mscorlib/src/System/Threading/SpinWait.cs\n    startLine: 192\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Spins until the specified condition is satisfied.</p>\\n\"\n  syntax:\n    content: public static void SpinUntil(Func<bool> condition)\n    content.vb: Public Shared Sub SpinUntil(condition As Func(Of Boolean))\n    parameters:\n    - id: condition\n      type: System.Func{System.Boolean}\n      description: \"\\n<p>A delegate to be executed over and over until it returns true.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>condition</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.SpinWait.SpinUntil(System.Func(Of System.Boolean))\n  name.vb: SpinUntil(Func(Of Boolean))\n  nameWithType: SpinWait.SpinUntil(Func<Boolean>)\n  nameWithType.vb: SpinWait.SpinUntil(Func(Of Boolean))\n- uid: System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.Int32)\n  commentId: M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.Int32)\n  id: SpinUntil(System.Func{System.Boolean},System.Int32)\n  parent: System.Threading.SpinWait\n  langs:\n  - csharp\n  - vb\n  name: SpinUntil(Func<Boolean>, Int32)\n  fullName: System.Threading.SpinWait.SpinUntil(System.Func<System.Boolean>, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SpinWait.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SpinUntil\n    path: src/mscorlib/src/System/Threading/SpinWait.cs\n    startLine: 239\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Spins until the specified condition is satisfied or until the specified timeout is expired.</p>\\n\"\n  syntax:\n    content: public static bool SpinUntil(Func<bool> condition, int millisecondsTimeout)\n    content.vb: Public Shared Function SpinUntil(condition As Func(Of Boolean), millisecondsTimeout As Integer) As Boolean\n    parameters:\n    - id: condition\n      type: System.Func{System.Boolean}\n      description: \"\\n<p>A delegate to be executed over and over until it returns true.</p>\\n\"\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: \"\\n<p>The number of milliseconds to wait, or <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> (-1) to wait indefinitely.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>True if the condition is satisfied within the timeout; otherwise, false</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>condition</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.SpinWait.SpinUntil(System.Func(Of System.Boolean), System.Int32)\n  name.vb: SpinUntil(Func(Of Boolean), Int32)\n  nameWithType: SpinWait.SpinUntil(Func<Boolean>, Int32)\n  nameWithType.vb: SpinWait.SpinUntil(Func(Of Boolean), Int32)\n- uid: System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.TimeSpan)\n  commentId: M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.TimeSpan)\n  id: SpinUntil(System.Func{System.Boolean},System.TimeSpan)\n  parent: System.Threading.SpinWait\n  langs:\n  - csharp\n  - vb\n  name: SpinUntil(Func<Boolean>, TimeSpan)\n  fullName: System.Threading.SpinWait.SpinUntil(System.Func<System.Boolean>, System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SpinWait.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SpinUntil\n    path: src/mscorlib/src/System/Threading/SpinWait.cs\n    startLine: 215\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Spins until the specified condition is satisfied or until the specified timeout is expired.</p>\\n\"\n  syntax:\n    content: public static bool SpinUntil(Func<bool> condition, TimeSpan timeout)\n    content.vb: Public Shared Function SpinUntil(condition As Func(Of Boolean), timeout As TimeSpan) As Boolean\n    parameters:\n    - id: condition\n      type: System.Func{System.Boolean}\n      description: \"\\n<p>A delegate to be executed over and over until it returns true.</p>\\n\"\n    - id: timeout\n      type: System.TimeSpan\n      description: \"\\n<p>A <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>True if the condition is satisfied within the timeout; otherwise, false</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>condition</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.SpinWait.SpinUntil(System.Func(Of System.Boolean), System.TimeSpan)\n  name.vb: SpinUntil(Func(Of Boolean), TimeSpan)\n  nameWithType: SpinWait.SpinUntil(Func<Boolean>, TimeSpan)\n  nameWithType.vb: SpinWait.SpinUntil(Func(Of Boolean), TimeSpan)\nreferences:\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Func{System.Boolean}\n  parent: System\n  definition: System.Func`1\n  name: Func<Boolean>\n  fullName: System.Func<System.Boolean>\n  fullname.vb: System.Func(Of System.Boolean)\n  name.vb: Func(Of Boolean)\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Func<Boolean>\n  nameWithType.vb: Func(Of Boolean)\n  commentId: T:System.Func{System.Boolean}\n- uid: System.Func`1\n  isExternal: false\n  name: Func<TResult>\n  fullName: System.Func<TResult>\n  fullname.vb: System.Func(Of TResult)\n  name.vb: Func(Of TResult)\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<TResult>\n  nameWithType.vb: Func(Of TResult)\n  commentId: T:System.Func`1\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  fullName: System.TimeSpan\n  nameWithType: TimeSpan\n  commentId: T:System.TimeSpan\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}