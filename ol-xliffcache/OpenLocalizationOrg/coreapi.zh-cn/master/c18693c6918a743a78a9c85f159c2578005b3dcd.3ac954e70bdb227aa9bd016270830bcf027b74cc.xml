{"nodes":[{"pos":[3033,3050],"content":"DynamicExpression","needQuote":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[4259,4268],"content":"Arguments","needQuote":true,"nodes":[{"content":"Arguments","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The read-only collections containing the arguments to the dynamic operation.&lt;/p&gt;\\n","pos":[5093,5180],"source":"\\n<p>The read-only collections containing the arguments to the dynamic operation.</p>\\n"},{"pos":[5525,5531],"content":"Binder","needQuote":true,"nodes":[{"content":"Binder","pos":[0,6]}]},{"pos":[6968,6980],"content":"DelegateType","needQuote":true,"nodes":[{"content":"DelegateType","pos":[0,12]}]},{"pos":[8410,8418],"content":"NodeType","needQuote":true,"nodes":[{"content":"NodeType","pos":[0,8]}]},{"pos":[9890,9894],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[11392,11417],"content":"Accept(ExpressionVisitor)","needQuote":true,"nodes":[{"content":"Accept(ExpressionVisitor)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The visitor to visit this node with.&lt;/p&gt;\\n","pos":[12545,12592],"source":"\\n<p>The visitor to visit this node with.</p>\\n"},{"content":"\\n&lt;p&gt;The result of visiting this node.&lt;/p&gt;\\n","pos":[12673,12717],"source":"\\n<p>The result of visiting this node.</p>\\n"},{"pos":[13498,13552],"content":"Dynamic(CallSiteBinder, Type, IEnumerable<Expression>)","needQuote":true,"nodes":[{"content":"Dynamic(CallSiteBinder, Type, IEnumerable&lt;Expression&gt;)","pos":[0,54],"source":"Dynamic(CallSiteBinder, Type, IEnumerable<Expression>)"}]},{"content":"\\n&lt;p&gt;The runtime binder for the dynamic operation.&lt;/p&gt;\\n","pos":[14815,14871],"source":"\\n<p>The runtime binder for the dynamic operation.</p>\\n"},{"content":"\\n&lt;p&gt;The result type of the dynamic expression.&lt;/p&gt;\\n","pos":[14938,14991],"source":"\\n<p>The result type of the dynamic expression.</p>\\n"},{"content":"\\n&lt;p&gt;The arguments to the dynamic operation.&lt;/p&gt;\\n","pos":[15120,15170],"source":"\\n<p>The arguments to the dynamic operation.</p>\\n"},{"pos":[16924,16965],"content":"Dynamic(CallSiteBinder, Type, Expression)","needQuote":true,"nodes":[{"content":"Dynamic(CallSiteBinder, Type, Expression)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;The runtime binder for the dynamic operation.&lt;/p&gt;\\n","pos":[18149,18205],"source":"\\n<p>The runtime binder for the dynamic operation.</p>\\n"},{"content":"\\n&lt;p&gt;The result type of the dynamic expression.&lt;/p&gt;\\n","pos":[18272,18325],"source":"\\n<p>The result type of the dynamic expression.</p>\\n"},{"content":"\\n&lt;p&gt;The first argument to the dynamic operation.&lt;/p&gt;\\n","pos":[18409,18464],"source":"\\n<p>The first argument to the dynamic operation.</p>\\n"},{"pos":[19941,19994],"content":"Dynamic(CallSiteBinder, Type, Expression, Expression)","needQuote":true,"nodes":[{"content":"Dynamic(CallSiteBinder, Type, Expression, Expression)","pos":[0,53]}]},{"content":"\\n&lt;p&gt;The runtime binder for the dynamic operation.&lt;/p&gt;\\n","pos":[21251,21307],"source":"\\n<p>The runtime binder for the dynamic operation.</p>\\n"},{"content":"\\n&lt;p&gt;The result type of the dynamic expression.&lt;/p&gt;\\n","pos":[21374,21427],"source":"\\n<p>The result type of the dynamic expression.</p>\\n"},{"content":"\\n&lt;p&gt;The first argument to the dynamic operation.&lt;/p&gt;\\n","pos":[21511,21566],"source":"\\n<p>The first argument to the dynamic operation.</p>\\n"},{"content":"\\n&lt;p&gt;The second argument to the dynamic operation.&lt;/p&gt;\\n","pos":[21650,21706],"source":"\\n<p>The second argument to the dynamic operation.</p>\\n"},{"pos":[23299,23364],"content":"Dynamic(CallSiteBinder, Type, Expression, Expression, Expression)","needQuote":true,"nodes":[{"content":"Dynamic(CallSiteBinder, Type, Expression, Expression, Expression)","pos":[0,65]}]},{"content":"\\n&lt;p&gt;The runtime binder for the dynamic operation.&lt;/p&gt;\\n","pos":[24694,24750],"source":"\\n<p>The runtime binder for the dynamic operation.</p>\\n"},{"content":"\\n&lt;p&gt;The result type of the dynamic expression.&lt;/p&gt;\\n","pos":[24817,24870],"source":"\\n<p>The result type of the dynamic expression.</p>\\n"},{"content":"\\n&lt;p&gt;The first argument to the dynamic operation.&lt;/p&gt;\\n","pos":[24954,25009],"source":"\\n<p>The first argument to the dynamic operation.</p>\\n"},{"content":"\\n&lt;p&gt;The second argument to the dynamic operation.&lt;/p&gt;\\n","pos":[25093,25149],"source":"\\n<p>The second argument to the dynamic operation.</p>\\n"},{"content":"\\n&lt;p&gt;The third argument to the dynamic operation.&lt;/p&gt;\\n","pos":[25233,25288],"source":"\\n<p>The third argument to the dynamic operation.</p>\\n"},{"pos":[26998,27075],"content":"Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression)","needQuote":true,"nodes":[{"content":"Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression)","pos":[0,77]}]},{"content":"\\n&lt;p&gt;The runtime binder for the dynamic operation.&lt;/p&gt;\\n","pos":[28478,28534],"source":"\\n<p>The runtime binder for the dynamic operation.</p>\\n"},{"content":"\\n&lt;p&gt;The result type of the dynamic expression.&lt;/p&gt;\\n","pos":[28601,28654],"source":"\\n<p>The result type of the dynamic expression.</p>\\n"},{"content":"\\n&lt;p&gt;The first argument to the dynamic operation.&lt;/p&gt;\\n","pos":[28738,28793],"source":"\\n<p>The first argument to the dynamic operation.</p>\\n"},{"content":"\\n&lt;p&gt;The second argument to the dynamic operation.&lt;/p&gt;\\n","pos":[28877,28933],"source":"\\n<p>The second argument to the dynamic operation.</p>\\n"},{"content":"\\n&lt;p&gt;The third argument to the dynamic operation.&lt;/p&gt;\\n","pos":[29017,29072],"source":"\\n<p>The third argument to the dynamic operation.</p>\\n"},{"content":"\\n&lt;p&gt;The fourth argument to the dynamic operation.&lt;/p&gt;\\n","pos":[29156,29212],"source":"\\n<p>The fourth argument to the dynamic operation.</p>\\n"},{"pos":[30625,30668],"content":"Dynamic(CallSiteBinder, Type, Expression[])","needQuote":true,"nodes":[{"content":"Dynamic(CallSiteBinder, Type, Expression[])","pos":[0,43]}]},{"content":"\\n&lt;p&gt;The runtime binder for the dynamic operation.&lt;/p&gt;\\n","pos":[31886,31942],"source":"\\n<p>The runtime binder for the dynamic operation.</p>\\n"},{"content":"\\n&lt;p&gt;The result type of the dynamic expression.&lt;/p&gt;\\n","pos":[32009,32062],"source":"\\n<p>The result type of the dynamic expression.</p>\\n"},{"content":"\\n&lt;p&gt;The arguments to the dynamic operation.&lt;/p&gt;\\n","pos":[32153,32203],"source":"\\n<p>The arguments to the dynamic operation.</p>\\n"},{"pos":[34008,34066],"content":"MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>)","needQuote":true,"nodes":[{"content":"MakeDynamic(Type, CallSiteBinder, IEnumerable&lt;Expression&gt;)","pos":[0,58],"source":"MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>)"}]},{"content":"\\n&lt;p&gt;The runtime binder for the dynamic operation.&lt;/p&gt;\\n","pos":[35567,35623],"source":"\\n<p>The runtime binder for the dynamic operation.</p>\\n"},{"content":"\\n&lt;p&gt;The arguments to the dynamic operation.&lt;/p&gt;\\n","pos":[35752,35802],"source":"\\n<p>The arguments to the dynamic operation.</p>\\n"},{"pos":[37700,37745],"content":"MakeDynamic(Type, CallSiteBinder, Expression)","needQuote":true,"nodes":[{"content":"MakeDynamic(Type, CallSiteBinder, Expression)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The runtime binder for the dynamic operation.&lt;/p&gt;\\n","pos":[39184,39240],"source":"\\n<p>The runtime binder for the dynamic operation.</p>\\n"},{"content":"\\n&lt;p&gt;The argument to the dynamic operation.&lt;/p&gt;\\n","pos":[39324,39373],"source":"\\n<p>The argument to the dynamic operation.</p>\\n"},{"pos":[40982,41039],"content":"MakeDynamic(Type, CallSiteBinder, Expression, Expression)","needQuote":true,"nodes":[{"content":"MakeDynamic(Type, CallSiteBinder, Expression, Expression)","pos":[0,57]}]},{"content":"\\n&lt;p&gt;The runtime binder for the dynamic operation.&lt;/p&gt;\\n","pos":[42552,42608],"source":"\\n<p>The runtime binder for the dynamic operation.</p>\\n"},{"content":"\\n&lt;p&gt;The first argument to the dynamic operation.&lt;/p&gt;\\n","pos":[42692,42747],"source":"\\n<p>The first argument to the dynamic operation.</p>\\n"},{"content":"\\n&lt;p&gt;The second argument to the dynamic operation.&lt;/p&gt;\\n","pos":[42831,42887],"source":"\\n<p>The second argument to the dynamic operation.</p>\\n"},{"pos":[44613,44682],"content":"MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression)","needQuote":true,"nodes":[{"content":"MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression)","pos":[0,69]}]},{"content":"\\n&lt;p&gt;The runtime binder for the dynamic operation.&lt;/p&gt;\\n","pos":[46270,46326],"source":"\\n<p>The runtime binder for the dynamic operation.</p>\\n"},{"content":"\\n&lt;p&gt;The first argument to the dynamic operation.&lt;/p&gt;\\n","pos":[46410,46465],"source":"\\n<p>The first argument to the dynamic operation.</p>\\n"},{"content":"\\n&lt;p&gt;The second argument to the dynamic operation.&lt;/p&gt;\\n","pos":[46549,46605],"source":"\\n<p>The second argument to the dynamic operation.</p>\\n"},{"content":"\\n&lt;p&gt;The third argument to the dynamic operation.&lt;/p&gt;\\n","pos":[46689,46744],"source":"\\n<p>The third argument to the dynamic operation.</p>\\n"},{"pos":[48587,48668],"content":"MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression)","needQuote":true,"nodes":[{"content":"MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression)","pos":[0,81]}]},{"content":"\\n&lt;p&gt;The runtime binder for the dynamic operation.&lt;/p&gt;\\n","pos":[50328,50384],"source":"\\n<p>The runtime binder for the dynamic operation.</p>\\n"},{"content":"\\n&lt;p&gt;The first argument to the dynamic operation.&lt;/p&gt;\\n","pos":[50468,50523],"source":"\\n<p>The first argument to the dynamic operation.</p>\\n"},{"content":"\\n&lt;p&gt;The second argument to the dynamic operation.&lt;/p&gt;\\n","pos":[50607,50663],"source":"\\n<p>The second argument to the dynamic operation.</p>\\n"},{"content":"\\n&lt;p&gt;The third argument to the dynamic operation.&lt;/p&gt;\\n","pos":[50747,50802],"source":"\\n<p>The third argument to the dynamic operation.</p>\\n"},{"content":"\\n&lt;p&gt;The fourth argument to the dynamic operation.&lt;/p&gt;\\n","pos":[50886,50942],"source":"\\n<p>The fourth argument to the dynamic operation.</p>\\n"},{"pos":[52488,52535],"content":"MakeDynamic(Type, CallSiteBinder, Expression[])","needQuote":true,"nodes":[{"content":"MakeDynamic(Type, CallSiteBinder, Expression[])","pos":[0,47]}]},{"content":"\\n&lt;p&gt;The runtime binder for the dynamic operation.&lt;/p&gt;\\n","pos":[53991,54047],"source":"\\n<p>The runtime binder for the dynamic operation.</p>\\n"},{"content":"\\n&lt;p&gt;The arguments to the dynamic operation.&lt;/p&gt;\\n","pos":[54138,54188],"source":"\\n<p>The arguments to the dynamic operation.</p>\\n"},{"pos":[55934,55965],"content":"Update(IEnumerable<Expression>)","needQuote":true,"nodes":[{"content":"Update(IEnumerable&lt;Expression&gt;)","pos":[0,31],"source":"Update(IEnumerable<Expression>)"}]},{"content":"\\n&lt;p&gt;This expression if no children are changed or an expression with the updated children.&lt;/p&gt;\\n","pos":[57556,57653],"source":"\\n<p>This expression if no children are changed or an expression with the updated children.</p>\\n"},{"pos":[58111,58134],"content":"System.Linq.Expressions","needQuote":true,"nodes":[{"content":"System.Linq.Expressions","pos":[0,23]}]},{"pos":[58316,58322],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[58512,58529],"content":"IArgumentProvider","needQuote":true,"nodes":[{"content":"IArgumentProvider","pos":[0,17]}]},{"pos":[58753,58771],"content":"IDynamicExpression","needQuote":true,"nodes":[{"content":"IDynamicExpression","pos":[0,18]}]},{"pos":[58962,58968],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[59241,59271],"content":"ReadOnlyCollection<Expression>","needQuote":true,"nodes":[{"content":"ReadOnlyCollection&lt;Expression&gt;","pos":[0,30],"source":"ReadOnlyCollection<Expression>"}]},{"pos":[59605,59623],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"pos":[59719,59720],"content":"<","needQuote":true,"nodes":[]},{"pos":[59791,59801],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[59965,59983],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"content":"(Of","pos":[60080,60083]},{"pos":[60161,60171],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[60231,60232],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60537,60558],"content":"ReadOnlyCollection<T>","needQuote":true,"nodes":[{"content":"ReadOnlyCollection&lt;T&gt;","pos":[0,21],"source":"ReadOnlyCollection<T>"}]},{"pos":[60817,60835],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"pos":[60910,60911],"content":"<","needQuote":true,"nodes":[]},{"pos":[60938,60939],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[61070,61088],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"content":"(Of","pos":[61164,61167]},{"pos":[61201,61202],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[61229,61230],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61462,61492],"content":"System.Collections.ObjectModel","needQuote":true,"nodes":[{"content":"System.Collections.ObjectModel","pos":[0,30]}]},{"pos":[61753,61767],"content":"CallSiteBinder","needQuote":true,"nodes":[{"content":"CallSiteBinder","pos":[0,14]}]},{"pos":[61987,62018],"content":"System.Runtime.CompilerServices","needQuote":true,"nodes":[{"content":"System.Runtime.CompilerServices","pos":[0,31]}]},{"pos":[62222,62226],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[62407,62421],"content":"ExpressionType","needQuote":true,"nodes":[{"content":"ExpressionType","pos":[0,14]}]},{"pos":[62669,62686],"content":"ExpressionVisitor","needQuote":true,"nodes":[{"content":"ExpressionVisitor","pos":[0,17]}]},{"pos":[62936,62946],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[63253,63276],"content":"IEnumerable<Expression>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;Expression&gt;","pos":[0,23],"source":"IEnumerable<Expression>"}]},{"pos":[63570,63581],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[63666,63667],"content":"<","needQuote":true,"nodes":[]},{"pos":[63738,63748],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[63901,63912],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[63998,64001]},{"pos":[64079,64089],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[64149,64150],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64454,64471],"content":"DynamicExpression","needQuote":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[64693,64707],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[64926,64937],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[65001,65002],"content":"<","needQuote":true,"nodes":[]},{"pos":[65029,65030],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[65150,65161],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[65226,65229]},{"pos":[65263,65264],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[65291,65292],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65495,65521],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[65698,65710],"content":"Expression[]","needQuote":true,"nodes":[{"content":"Expression[]","pos":[0,12]}]},{"pos":[65905,65915],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"content":"[]","pos":[65976,65978]},{"pos":[66064,66074],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[66134,66136],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]}],"content":"items:\n- uid: System.Linq.Expressions.DynamicExpression\n  commentId: T:System.Linq.Expressions.DynamicExpression\n  id: DynamicExpression\n  parent: System.Linq.Expressions\n  children:\n  - System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)\n  - System.Linq.Expressions.DynamicExpression.Arguments\n  - System.Linq.Expressions.DynamicExpression.Binder\n  - System.Linq.Expressions.DynamicExpression.DelegateType\n  - System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.DynamicExpression.NodeType\n  - System.Linq.Expressions.DynamicExpression.Type\n  - System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  langs:\n  - csharp\n  - vb\n  name: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n  type: Class\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpression.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DynamicExpression\n    path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpression.cs\n    startLine: 21\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Represents a dynamic operation.</p>\\n\"\n  syntax:\n    content: 'public class DynamicExpression : Expression, IDynamicExpression'\n    content.vb: >-\n      Public Class DynamicExpression\n          Inherits Expression\n          Implements IDynamicExpression\n  inheritance:\n  - System.Object\n  implements:\n  - System.Linq.Expressions.IArgumentProvider\n  - System.Linq.Expressions.IDynamicExpression\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: DynamicExpression\n- uid: System.Linq.Expressions.DynamicExpression.Arguments\n  commentId: P:System.Linq.Expressions.DynamicExpression.Arguments\n  id: Arguments\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  - vb\n  name: Arguments\n  fullName: System.Linq.Expressions.DynamicExpression.Arguments\n  type: Property\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpression.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Arguments\n    path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpression.cs\n    startLine: 150\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Gets the arguments to the dynamic operation.</p>\\n\"\n  syntax:\n    content: public ReadOnlyCollection<Expression> Arguments { get; }\n    content.vb: Public ReadOnly Property Arguments As ReadOnlyCollection(Of Expression)\n    parameters: []\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{Expression}\n      description: \"\\n<p>The read-only collections containing the arguments to the dynamic operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DynamicExpression.Arguments\n- uid: System.Linq.Expressions.DynamicExpression.Binder\n  commentId: P:System.Linq.Expressions.DynamicExpression.Binder\n  id: Binder\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  - vb\n  name: Binder\n  fullName: System.Linq.Expressions.DynamicExpression.Binder\n  type: Property\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpression.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Binder\n    path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpression.cs\n    startLine: 134\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Runtime.CompilerServices.CallSiteBinder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, which determines the run-time behavior of the dynamic site.</p>\\n\"\n  syntax:\n    content: public CallSiteBinder Binder { get; }\n    content.vb: Public ReadOnly Property Binder As CallSiteBinder\n    parameters: []\n    return:\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: \"\\n<p>The <xref href=\\\"System.Runtime.CompilerServices.CallSiteBinder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, which determines the run-time behavior of the dynamic site.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DynamicExpression.Binder\n- uid: System.Linq.Expressions.DynamicExpression.DelegateType\n  commentId: P:System.Linq.Expressions.DynamicExpression.DelegateType\n  id: DelegateType\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  - vb\n  name: DelegateType\n  fullName: System.Linq.Expressions.DynamicExpression.DelegateType\n  type: Property\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpression.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DelegateType\n    path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpression.cs\n    startLine: 142\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Gets the type of the delegate used by the <xref href=\\\"System.Runtime.CompilerServices.CallSite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public Type DelegateType { get; }\n    content.vb: Public ReadOnly Property DelegateType As Type\n    parameters: []\n    return:\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object representing the type of the delegate used by the <xref href=\\\"System.Runtime.CompilerServices.CallSite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DynamicExpression.DelegateType\n- uid: System.Linq.Expressions.DynamicExpression.NodeType\n  commentId: P:System.Linq.Expressions.DynamicExpression.NodeType\n  id: NodeType\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  - vb\n  name: NodeType\n  fullName: System.Linq.Expressions.DynamicExpression.NodeType\n  type: Property\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpression.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NodeType\n    path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpression.cs\n    startLine: 125\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Returns the node type of this expression. Extension nodes should return <xref href=\\\"System.Linq.Expressions.ExpressionType.Extension\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> when overriding this method.</p>\\n\"\n  syntax:\n    content: public override sealed ExpressionType NodeType { get; }\n    content.vb: Public NotOverridable Overrides ReadOnly Property NodeType As ExpressionType\n    parameters: []\n    return:\n      type: ExpressionType\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.ExpressionType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the expression.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - sealed\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - NotOverridable\n  - ReadOnly\n  nameWithType: DynamicExpression.NodeType\n- uid: System.Linq.Expressions.DynamicExpression.Type\n  commentId: P:System.Linq.Expressions.DynamicExpression.Type\n  id: Type\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  - vb\n  name: Type\n  fullName: System.Linq.Expressions.DynamicExpression.Type\n  type: Property\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpression.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Type\n    path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpression.cs\n    startLine: 115\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Gets the static type of the expression that this <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> represents.</p>\\n\"\n  syntax:\n    content: public override Type Type { get; }\n    content.vb: Public Overrides ReadOnly Property Type As Type\n    parameters: []\n    return:\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.DynamicExpression.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the static type of the expression.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: DynamicExpression.Type\n- uid: System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)\n  commentId: M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)\n  id: Accept(System.Linq.Expressions.ExpressionVisitor)\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  - vb\n  name: Accept(ExpressionVisitor)\n  fullName: System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Accept\n    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n    startLine: 241\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Dispatches to the specific visit method for this node type. For example, <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> calls the <xref href=\\\"System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected override Expression Accept(ExpressionVisitor visitor)\n    content.vb: Protected Overrides Function Accept(visitor As ExpressionVisitor) As Expression\n    parameters:\n    - id: visitor\n      type: System.Linq.Expressions.ExpressionVisitor\n      description: \"\\n<p>The visitor to visit this node with.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The result of visiting this node.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  nameWithType: DynamicExpression.Accept(ExpressionVisitor)\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  - vb\n  name: Dynamic(CallSiteBinder, Type, IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dynamic\n    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n    startLine: 242\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.DynamicExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a dynamic operation bound by the provided <xref href=\\\"System.Runtime.CompilerServices.CallSiteBinder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, IEnumerable<Expression> arguments)\n    content.vb: Public Shared Function Dynamic(binder As CallSiteBinder, returnType As Type, arguments As IEnumerable(Of Expression)) As DynamicExpression\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: \"\\n<p>The runtime binder for the dynamic operation.</p>\\n\"\n    - id: returnType\n      type: System.Type\n      description: \"\\n<p>The result type of the dynamic expression.</p>\\n\"\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: \"\\n<p>The arguments to the dynamic operation.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.DynamicExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has <xref href=\\\"System.Linq.Expressions.DynamicExpression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Dynamic\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>,  and has the <xref href=\\\"System.Linq.Expressions.DynamicExpression.Binder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.DynamicExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))\n  name.vb: Dynamic(CallSiteBinder, Type, IEnumerable(Of Expression))\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>)\n  nameWithType.vb: DynamicExpression.Dynamic(CallSiteBinder, Type, IEnumerable(Of Expression))\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  - vb\n  name: Dynamic(CallSiteBinder, Type, Expression)\n  fullName: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dynamic\n    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n    startLine: 243\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.DynamicExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a dynamic operation bound by the provided <xref href=\\\"System.Runtime.CompilerServices.CallSiteBinder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, Expression arg0)\n    content.vb: Public Shared Function Dynamic(binder As CallSiteBinder, returnType As Type, arg0 As Expression) As DynamicExpression\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: \"\\n<p>The runtime binder for the dynamic operation.</p>\\n\"\n    - id: returnType\n      type: System.Type\n      description: \"\\n<p>The result type of the dynamic expression.</p>\\n\"\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The first argument to the dynamic operation.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.DynamicExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has <xref href=\\\"System.Linq.Expressions.DynamicExpression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Dynamic\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>,  and has the <xref href=\\\"System.Linq.Expressions.DynamicExpression.Binder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.DynamicExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder, Type, Expression)\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  - vb\n  name: Dynamic(CallSiteBinder, Type, Expression, Expression)\n  fullName: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dynamic\n    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n    startLine: 244\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.DynamicExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a dynamic operation bound by the provided <xref href=\\\"System.Runtime.CompilerServices.CallSiteBinder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, Expression arg0, Expression arg1)\n    content.vb: Public Shared Function Dynamic(binder As CallSiteBinder, returnType As Type, arg0 As Expression, arg1 As Expression) As DynamicExpression\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: \"\\n<p>The runtime binder for the dynamic operation.</p>\\n\"\n    - id: returnType\n      type: System.Type\n      description: \"\\n<p>The result type of the dynamic expression.</p>\\n\"\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The first argument to the dynamic operation.</p>\\n\"\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The second argument to the dynamic operation.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.DynamicExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has <xref href=\\\"System.Linq.Expressions.DynamicExpression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Dynamic\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and has the <xref href=\\\"System.Linq.Expressions.DynamicExpression.Binder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.DynamicExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder, Type, Expression, Expression)\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  - vb\n  name: Dynamic(CallSiteBinder, Type, Expression, Expression, Expression)\n  fullName: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dynamic\n    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n    startLine: 245\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.DynamicExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a dynamic operation bound by the provided <xref href=\\\"System.Runtime.CompilerServices.CallSiteBinder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, Expression arg0, Expression arg1, Expression arg2)\n    content.vb: Public Shared Function Dynamic(binder As CallSiteBinder, returnType As Type, arg0 As Expression, arg1 As Expression, arg2 As Expression) As DynamicExpression\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: \"\\n<p>The runtime binder for the dynamic operation.</p>\\n\"\n    - id: returnType\n      type: System.Type\n      description: \"\\n<p>The result type of the dynamic expression.</p>\\n\"\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The first argument to the dynamic operation.</p>\\n\"\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The second argument to the dynamic operation.</p>\\n\"\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The third argument to the dynamic operation.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.DynamicExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has <xref href=\\\"System.Linq.Expressions.DynamicExpression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Dynamic\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and has the <xref href=\\\"System.Linq.Expressions.DynamicExpression.Binder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.DynamicExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  - vb\n  name: Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression)\n  fullName: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dynamic\n    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n    startLine: 246\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.DynamicExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a dynamic operation bound by the provided <xref href=\\\"System.Runtime.CompilerServices.CallSiteBinder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, Expression arg0, Expression arg1, Expression arg2, Expression arg3)\n    content.vb: Public Shared Function Dynamic(binder As CallSiteBinder, returnType As Type, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As DynamicExpression\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: \"\\n<p>The runtime binder for the dynamic operation.</p>\\n\"\n    - id: returnType\n      type: System.Type\n      description: \"\\n<p>The result type of the dynamic expression.</p>\\n\"\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The first argument to the dynamic operation.</p>\\n\"\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The second argument to the dynamic operation.</p>\\n\"\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The third argument to the dynamic operation.</p>\\n\"\n    - id: arg3\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The fourth argument to the dynamic operation.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.DynamicExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has <xref href=\\\"System.Linq.Expressions.DynamicExpression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Dynamic\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and has the <xref href=\\\"System.Linq.Expressions.DynamicExpression.Binder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.DynamicExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  - vb\n  name: Dynamic(CallSiteBinder, Type, Expression[])\n  fullName: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dynamic\n    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n    startLine: 247\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.DynamicExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a dynamic operation bound by the provided <xref href=\\\"System.Runtime.CompilerServices.CallSiteBinder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, params Expression[] arguments)\n    content.vb: Public Shared Function Dynamic(binder As CallSiteBinder, returnType As Type, ParamArray arguments As Expression()) As DynamicExpression\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: \"\\n<p>The runtime binder for the dynamic operation.</p>\\n\"\n    - id: returnType\n      type: System.Type\n      description: \"\\n<p>The result type of the dynamic expression.</p>\\n\"\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: \"\\n<p>The arguments to the dynamic operation.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.DynamicExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has <xref href=\\\"System.Linq.Expressions.DynamicExpression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Dynamic\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and has the <xref href=\\\"System.Linq.Expressions.DynamicExpression.Binder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Linq.Expressions.DynamicExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression())\n  name.vb: Dynamic(CallSiteBinder, Type, Expression())\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder, Type, Expression[])\n  nameWithType.vb: DynamicExpression.Dynamic(CallSiteBinder, Type, Expression())\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  - vb\n  name: MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MakeDynamic\n    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n    startLine: 248\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.DynamicExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a dynamic operation bound by the provided <xref href=\\\"System.Runtime.CompilerServices.CallSiteBinder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, IEnumerable<Expression> arguments)\n    content.vb: Public Shared Function MakeDynamic(delegateType As Type, binder As CallSiteBinder, arguments As IEnumerable(Of Expression)) As DynamicExpression\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: \"\\n<p>The type of the delegate used by the <xref href=\\\"System.Runtime.CompilerServices.CallSite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: \"\\n<p>The runtime binder for the dynamic operation.</p>\\n\"\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: \"\\n<p>The arguments to the dynamic operation.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.DynamicExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has <xref href=\\\"System.Linq.Expressions.DynamicExpression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Dynamic\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and has the <xref href=\\\"System.Linq.Expressions.DynamicExpression.DelegateType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.DynamicExpression.Binder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.DynamicExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))\n  name.vb: MakeDynamic(Type, CallSiteBinder, IEnumerable(Of Expression))\n  nameWithType: DynamicExpression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>)\n  nameWithType.vb: DynamicExpression.MakeDynamic(Type, CallSiteBinder, IEnumerable(Of Expression))\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  - vb\n  name: MakeDynamic(Type, CallSiteBinder, Expression)\n  fullName: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MakeDynamic\n    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n    startLine: 249\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.DynamicExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a dynamic operation bound by the provided <xref href=\\\"System.Runtime.CompilerServices.CallSiteBinder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and one argument.</p>\\n\"\n  syntax:\n    content: public static DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, Expression arg0)\n    content.vb: Public Shared Function MakeDynamic(delegateType As Type, binder As CallSiteBinder, arg0 As Expression) As DynamicExpression\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: \"\\n<p>The type of the delegate used by the <xref href=\\\"System.Runtime.CompilerServices.CallSite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: \"\\n<p>The runtime binder for the dynamic operation.</p>\\n\"\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The argument to the dynamic operation.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.DynamicExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has <xref href=\\\"System.Linq.Expressions.DynamicExpression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Dynamic\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and has the <xref href=\\\"System.Linq.Expressions.DynamicExpression.DelegateType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.DynamicExpression.Binder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.DynamicExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DynamicExpression.MakeDynamic(Type, CallSiteBinder, Expression)\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  - vb\n  name: MakeDynamic(Type, CallSiteBinder, Expression, Expression)\n  fullName: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MakeDynamic\n    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n    startLine: 250\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.DynamicExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a dynamic operation bound by the provided <xref href=\\\"System.Runtime.CompilerServices.CallSiteBinder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and two arguments.</p>\\n\"\n  syntax:\n    content: public static DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, Expression arg0, Expression arg1)\n    content.vb: Public Shared Function MakeDynamic(delegateType As Type, binder As CallSiteBinder, arg0 As Expression, arg1 As Expression) As DynamicExpression\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: \"\\n<p>The type of the delegate used by the <xref href=\\\"System.Runtime.CompilerServices.CallSite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: \"\\n<p>The runtime binder for the dynamic operation.</p>\\n\"\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The first argument to the dynamic operation.</p>\\n\"\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The second argument to the dynamic operation.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.DynamicExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has <xref href=\\\"System.Linq.Expressions.DynamicExpression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Dynamic\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and has the <xref href=\\\"System.Linq.Expressions.DynamicExpression.DelegateType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.DynamicExpression.Binder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.DynamicExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DynamicExpression.MakeDynamic(Type, CallSiteBinder, Expression, Expression)\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  - vb\n  name: MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression)\n  fullName: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MakeDynamic\n    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n    startLine: 251\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.DynamicExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a dynamic operation bound by the provided <xref href=\\\"System.Runtime.CompilerServices.CallSiteBinder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and three arguments.</p>\\n\"\n  syntax:\n    content: public static DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, Expression arg0, Expression arg1, Expression arg2)\n    content.vb: Public Shared Function MakeDynamic(delegateType As Type, binder As CallSiteBinder, arg0 As Expression, arg1 As Expression, arg2 As Expression) As DynamicExpression\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: \"\\n<p>The type of the delegate used by the <xref href=\\\"System.Runtime.CompilerServices.CallSite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: \"\\n<p>The runtime binder for the dynamic operation.</p>\\n\"\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The first argument to the dynamic operation.</p>\\n\"\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The second argument to the dynamic operation.</p>\\n\"\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The third argument to the dynamic operation.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.DynamicExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has <xref href=\\\"System.Linq.Expressions.DynamicExpression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Dynamic\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and has the <xref href=\\\"System.Linq.Expressions.DynamicExpression.DelegateType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.DynamicExpression.Binder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.DynamicExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DynamicExpression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  - vb\n  name: MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression)\n  fullName: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MakeDynamic\n    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n    startLine: 252\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.DynamicExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a dynamic operation bound by the provided <xref href=\\\"System.Runtime.CompilerServices.CallSiteBinder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and four arguments.</p>\\n\"\n  syntax:\n    content: public static DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, Expression arg0, Expression arg1, Expression arg2, Expression arg3)\n    content.vb: Public Shared Function MakeDynamic(delegateType As Type, binder As CallSiteBinder, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As DynamicExpression\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: \"\\n<p>The type of the delegate used by the <xref href=\\\"System.Runtime.CompilerServices.CallSite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: \"\\n<p>The runtime binder for the dynamic operation.</p>\\n\"\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The first argument to the dynamic operation.</p>\\n\"\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The second argument to the dynamic operation.</p>\\n\"\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The third argument to the dynamic operation.</p>\\n\"\n    - id: arg3\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The fourth argument to the dynamic operation.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.DynamicExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has <xref href=\\\"System.Linq.Expressions.DynamicExpression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Dynamic\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and has the <xref href=\\\"System.Linq.Expressions.DynamicExpression.DelegateType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.DynamicExpression.Binder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.DynamicExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DynamicExpression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  - vb\n  name: MakeDynamic(Type, CallSiteBinder, Expression[])\n  fullName: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MakeDynamic\n    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n    startLine: 253\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Expressions.DynamicExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a dynamic operation bound by the provided <xref href=\\\"System.Runtime.CompilerServices.CallSiteBinder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, params Expression[] arguments)\n    content.vb: Public Shared Function MakeDynamic(delegateType As Type, binder As CallSiteBinder, ParamArray arguments As Expression()) As DynamicExpression\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: \"\\n<p>The type of the delegate used by the <xref href=\\\"System.Runtime.CompilerServices.CallSite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: \"\\n<p>The runtime binder for the dynamic operation.</p>\\n\"\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: \"\\n<p>The arguments to the dynamic operation.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Expressions.DynamicExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has <xref href=\\\"System.Linq.Expressions.DynamicExpression.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to <xref href=\\\"System.Linq.Expressions.ExpressionType.Dynamic\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and has the <xref href=\\\"System.Linq.Expressions.DynamicExpression.DelegateType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.Expressions.DynamicExpression.Binder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Linq.Expressions.DynamicExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> set to the specified values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression())\n  name.vb: MakeDynamic(Type, CallSiteBinder, Expression())\n  nameWithType: DynamicExpression.MakeDynamic(Type, CallSiteBinder, Expression[])\n  nameWithType.vb: DynamicExpression.MakeDynamic(Type, CallSiteBinder, Expression())\n- uid: System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  - vb\n  name: Update(IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Update\n    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n    startLine: 257\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Compares the value sent to the parameter, <code>arguments</code>, to the <strong>Arguments</strong> property of the current instance of <strong>DynamicExpression</strong>. If the values of the parameter and the property are equal, the current instance is returned. If they are not equal, a new <strong>DynamicExpression</strong> instance is returned that is identical to the current instance except that the <strong>Arguments</strong> property is set to the value of parameter <code>arguments</code>. </p>\\n\"\n  syntax:\n    content: public DynamicExpression Update(IEnumerable<Expression> arguments)\n    content.vb: Public Function Update(arguments As IEnumerable(Of Expression)) As DynamicExpression\n    parameters:\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.DynamicExpression.Arguments\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the result.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: \"\\n<p>This expression if no children are changed or an expression with the updated children.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))\n  name.vb: Update(IEnumerable(Of Expression))\n  nameWithType: DynamicExpression.Update(IEnumerable<Expression>)\n  nameWithType.vb: DynamicExpression.Update(IEnumerable(Of Expression))\nreferences:\n- uid: System.Linq.Expressions\n  isExternal: false\n  name: System.Linq.Expressions\n  fullName: System.Linq.Expressions\n  nameWithType: System.Linq.Expressions\n  commentId: N:System.Linq.Expressions\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Linq.Expressions.IArgumentProvider\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: IArgumentProvider\n  fullName: System.Linq.Expressions.IArgumentProvider\n  nameWithType: IArgumentProvider\n  commentId: T:System.Linq.Expressions.IArgumentProvider\n- uid: System.Linq.Expressions.IDynamicExpression\n  isExternal: false\n  name: IDynamicExpression\n  fullName: System.Linq.Expressions.IDynamicExpression\n  nameWithType: IDynamicExpression\n  commentId: T:System.Linq.Expressions.IDynamicExpression\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression}\n  parent: System.Collections.ObjectModel\n  definition: System.Collections.ObjectModel.ReadOnlyCollection`1\n  name: ReadOnlyCollection<Expression>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>\n  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.Linq.Expressions.Expression)\n  name.vb: ReadOnlyCollection(Of Expression)\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Linq.Expressions.Expression\n    name: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Linq.Expressions.Expression\n    name: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: )\n    fullName: )\n  nameWithType: ReadOnlyCollection<Expression>\n  nameWithType.vb: ReadOnlyCollection(Of Expression)\n  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression}\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n  isExternal: false\n  name: ReadOnlyCollection<T>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>\n  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)\n  name.vb: ReadOnlyCollection(Of T)\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ReadOnlyCollection<T>\n  nameWithType.vb: ReadOnlyCollection(Of T)\n  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1\n- uid: System.Collections.ObjectModel\n  isExternal: false\n  name: System.Collections.ObjectModel\n  fullName: System.Collections.ObjectModel\n  nameWithType: System.Collections.ObjectModel\n  commentId: N:System.Collections.ObjectModel\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n  nameWithType: CallSiteBinder\n  commentId: T:System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Runtime.CompilerServices\n  isExternal: false\n  name: System.Runtime.CompilerServices\n  fullName: System.Runtime.CompilerServices\n  nameWithType: System.Runtime.CompilerServices\n  commentId: N:System.Runtime.CompilerServices\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Linq.Expressions.ExpressionType\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ExpressionType\n  fullName: System.Linq.Expressions.ExpressionType\n  nameWithType: ExpressionType\n  commentId: T:System.Linq.Expressions.ExpressionType\n- uid: System.Linq.Expressions.ExpressionVisitor\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ExpressionVisitor\n  fullName: System.Linq.Expressions.ExpressionVisitor\n  nameWithType: ExpressionVisitor\n  commentId: T:System.Linq.Expressions.ExpressionVisitor\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  fullName: System.Linq.Expressions.Expression\n  nameWithType: Expression\n  commentId: T:System.Linq.Expressions.Expression\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression)\n  name.vb: IEnumerable(Of Expression)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Linq.Expressions.Expression\n    name: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Linq.Expressions.Expression\n    name: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<Expression>\n  nameWithType.vb: IEnumerable(Of Expression)\n  commentId: T:System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n  nameWithType: DynamicExpression\n  commentId: T:System.Linq.Expressions.DynamicExpression\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable`1\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Linq.Expressions.Expression[]\n  name: Expression[]\n  fullName: System.Linq.Expressions.Expression[]\n  fullname.vb: System.Linq.Expressions.Expression()\n  name.vb: Expression()\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression\n    name: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression\n    name: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: ()\n    fullName: ()\n  nameWithType: Expression[]\n  nameWithType.vb: Expression()\n"}