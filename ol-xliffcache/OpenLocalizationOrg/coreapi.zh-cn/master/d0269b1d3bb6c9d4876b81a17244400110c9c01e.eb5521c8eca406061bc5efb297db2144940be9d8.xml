{"nodes":[{"pos":[925,960],"content":"Dictionary<TKey, TValue>.Enumerator","needQuote":true,"nodes":[{"content":"Dictionary&lt;TKey, TValue&gt;.Enumerator","pos":[0,35],"source":"Dictionary<TKey, TValue>.Enumerator"}]},{"pos":[3793,3800],"content":"Current","needQuote":true,"nodes":[{"content":"Current","pos":[0,7]}]},{"pos":[5734,5761],"content":"IDictionaryEnumerator.Entry","needQuote":true,"nodes":[{"content":"IDictionaryEnumerator.Entry","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The enumerator is positioned before the first element of the collection or after the last element.","pos":[7001,7104],"source":"\\n<p>The enumerator is positioned before the first element of the collection or after the last element."},{"content":"&lt;/p&gt;\\n","pos":[7105,7111],"source":" </p>\\n"},{"pos":[8482,8507],"content":"IDictionaryEnumerator.Key","needQuote":true,"nodes":[{"content":"IDictionaryEnumerator.Key","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The key of the element in the dictionary at the current position of the enumerator.&lt;/p&gt;\\n","pos":[9398,9492],"source":"\\n<p>The key of the element in the dictionary at the current position of the enumerator.</p>\\n"},{"content":"\\n&lt;p&gt;The enumerator is positioned before the first element of the collection or after the last element.","pos":[9619,9722],"source":"\\n<p>The enumerator is positioned before the first element of the collection or after the last element."},{"content":"&lt;/p&gt;\\n","pos":[9723,9729],"source":" </p>\\n"},{"pos":[11096,11123],"content":"IDictionaryEnumerator.Value","needQuote":true,"nodes":[{"content":"IDictionaryEnumerator.Value","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The value of the element in the dictionary at the current position of the enumerator.&lt;/p&gt;\\n","pos":[12026,12122],"source":"\\n<p>The value of the element in the dictionary at the current position of the enumerator.</p>\\n"},{"content":"\\n&lt;p&gt;The enumerator is positioned before the first element of the collection or after the last element.","pos":[12249,12352],"source":"\\n<p>The enumerator is positioned before the first element of the collection or after the last element."},{"content":"&lt;/p&gt;\\n","pos":[12353,12359],"source":" </p>\\n"},{"pos":[13712,13731],"content":"IEnumerator.Current","needQuote":true,"nodes":[{"content":"IEnumerator.Current","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The enumerator is positioned before the first element of the collection or after the last element.","pos":[14872,14975],"source":"\\n<p>The enumerator is positioned before the first element of the collection or after the last element."},{"content":"&lt;/p&gt;\\n","pos":[14976,14982],"source":" </p>\\n"},{"pos":[16079,16088],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[17360,17370],"content":"MoveNext()","needQuote":true,"nodes":[{"content":"MoveNext()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the enumerator was successfully advanced to the next element; &lt;strong&gt;false&lt;/strong&gt; if the enumerator has passed the end of the collection.&lt;/p&gt;\\n","pos":[18149,18327],"source":"\\n<p>\\n<strong>true</strong> if the enumerator was successfully advanced to the next element; <strong>false</strong> if the enumerator has passed the end of the collection.</p>\\n"},{"content":"\\n&lt;p&gt;The collection was modified after the enumerator was created.","pos":[18454,18520],"source":"\\n<p>The collection was modified after the enumerator was created."},{"content":"&lt;/p&gt;\\n","pos":[18521,18527],"source":" </p>\\n"},{"pos":[19376,19395],"content":"IEnumerator.Reset()","needQuote":true,"nodes":[{"content":"IEnumerator.Reset()","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The collection was modified after the enumerator was created.","pos":[20278,20344],"source":"\\n<p>The collection was modified after the enumerator was created."},{"content":"&lt;/p&gt;\\n","pos":[20345,20351],"source":" </p>\\n"},{"pos":[21213,21239],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[21568,21607],"content":"IEnumerator<KeyValuePair<TKey, TValue>>","needQuote":true,"nodes":[{"content":"IEnumerator&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;","pos":[0,39],"source":"IEnumerator<KeyValuePair<TKey, TValue>>"}]},{"pos":[21961,21972],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[22057,22058],"content":"<","needQuote":true,"nodes":[]},{"pos":[22136,22148],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"pos":[22234,22235],"content":"<","needQuote":true,"nodes":[]},{"pos":[22262,22266],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[22297,22298]},{"pos":[22330,22336],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[22493,22504],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"content":"(Of","pos":[22590,22593]},{"pos":[22678,22690],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"content":"(Of","pos":[22777,22780]},{"pos":[22814,22818],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[22849,22850]},{"pos":[22882,22888],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[22920,22921],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22948,22949],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23294,23315],"content":"IDictionaryEnumerator","needQuote":true,"nodes":[{"content":"IDictionaryEnumerator","pos":[0,21]}]},{"pos":[23558,23569],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[23758,23769],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[23963,23977],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[24102,24108],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24157,24158],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24208,24214],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24274,24275],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24361,24367],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24416,24417],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24467,24473],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24533,24534],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24737,24750],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[24857,24868],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[24922,24923],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24950,24951],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25027,25038],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[25092,25093],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25120,25121],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25310,25320],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[25421,25429],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[25480,25481],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25508,25509],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25582,25590],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[25641,25642],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25669,25670],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25873,25895],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[26043,26049],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26116,26117],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26167,26173],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26234,26235]},{"pos":[26290,26296],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26356,26357],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26454,26460],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26527,26528],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26578,26584],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26645,26646]},{"pos":[26701,26707],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26767,26768],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27013,27044],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[27210,27225],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[27301,27302],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27352,27358],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27419,27420]},{"pos":[27475,27481],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27541,27542],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27648,27663],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[27739,27740],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27790,27796],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27857,27858]},{"pos":[27913,27919],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27979,27980],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28206,28215],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[28308,28315],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[28383,28384],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28411,28412],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28481,28488],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[28556,28557],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28584,28585],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28748,28762],"content":"IEnumerator<T>","needQuote":true,"nodes":[{"content":"IEnumerator&lt;T&gt;","pos":[0,14],"source":"IEnumerator<T>"}]},{"pos":[28981,28992],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[29056,29057],"content":"<","needQuote":true,"nodes":[]},{"pos":[29084,29085],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[29205,29216],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"content":"(Of","pos":[29281,29284]},{"pos":[29318,29319],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[29346,29347],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29542,29560],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[29703,29709],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[29843,29852],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[30006,30012],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30381,30388],"content":"Current","needQuote":true,"nodes":[{"content":"Current","pos":[0,7]}]},{"pos":[31038,31064],"content":"KeyValuePair<TKey, TValue>","needQuote":true,"nodes":[{"content":"KeyValuePair&lt;TKey, TValue&gt;","pos":[0,26],"source":"KeyValuePair<TKey, TValue>"}]},{"pos":[31320,31332],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"pos":[31418,31419],"content":"<","needQuote":true,"nodes":[]},{"pos":[31446,31450],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[31481,31482]},{"pos":[31514,31520],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[31646,31658],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"content":"(Of","pos":[31745,31748]},{"pos":[31782,31786],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[31817,31818]},{"pos":[31850,31856],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[31888,31889],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32143,32150],"content":"Current","needQuote":true,"nodes":[{"content":"Current","pos":[0,7]}]},{"pos":[32506,32532],"content":"KeyValuePair<TKey, TValue>","needQuote":true,"nodes":[{"content":"KeyValuePair&lt;TKey, TValue&gt;","pos":[0,26],"source":"KeyValuePair<TKey, TValue>"}]},{"pos":[32788,32800],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"pos":[32865,32866],"content":"<","needQuote":true,"nodes":[]},{"pos":[32893,32897],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[32928,32929]},{"pos":[32961,32967],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[33093,33105],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"content":"(Of","pos":[33171,33174]},{"pos":[33208,33212],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[33243,33244]},{"pos":[33276,33282],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[33314,33315],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33613,33618],"content":"Entry","needQuote":true,"nodes":[{"content":"Entry","pos":[0,5]}]},{"pos":[33883,33898],"content":"DictionaryEntry","needQuote":true,"nodes":[{"content":"DictionaryEntry","pos":[0,15]}]},{"pos":[34158,34161],"content":"Key","needQuote":true,"nodes":[{"content":"Key","pos":[0,3]}]},{"pos":[34453,34458],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[34739,34746],"content":"Current","needQuote":true,"nodes":[{"content":"Current","pos":[0,7]}]},{"pos":[34979,34988],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[35091,35098],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[35150,35151],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35178,35179],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35253,35260],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[35312,35313],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35340,35341],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35554,35564],"content":"MoveNext()","needQuote":true,"nodes":[{"content":"MoveNext()","pos":[0,10]}]},{"pos":[35693,35701],"content":"MoveNext","needQuote":true,"nodes":[{"content":"MoveNext","pos":[0,8]}]},{"pos":[35766,35767],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35794,35795],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35882,35890],"content":"MoveNext","needQuote":true,"nodes":[{"content":"MoveNext","pos":[0,8]}]},{"pos":[35955,35956],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35983,35984],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36162,36169],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[36364,36371],"content":"Reset()","needQuote":true,"nodes":[{"content":"Reset()","pos":[0,7]}]},{"pos":[36494,36499],"content":"Reset","needQuote":true,"nodes":[{"content":"Reset","pos":[0,5]}]},{"pos":[36561,36562],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36589,36590],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36674,36679],"content":"Reset","needQuote":true,"nodes":[{"content":"Reset","pos":[0,5]}]},{"pos":[36741,36742],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36769,36770],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36960,36985],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]}],"content":"items:\n- uid: System.Collections.Generic.Dictionary`2.Enumerator\n  commentId: T:System.Collections.Generic.Dictionary`2.Enumerator\n  id: Dictionary`2.Enumerator\n  parent: System.Collections.Generic\n  children:\n  - System.Collections.Generic.Dictionary`2.Enumerator.Current\n  - System.Collections.Generic.Dictionary`2.Enumerator.Dispose\n  - System.Collections.Generic.Dictionary`2.Enumerator.MoveNext\n  - System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry\n  - System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key\n  - System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value\n  - System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Current\n  - System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Reset\n  langs:\n  - csharp\n  - vb\n  name: Dictionary<TKey, TValue>.Enumerator\n  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Enumerator\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Enumerator\n    path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n    startLine: 712\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Enumerates the elements of a <xref href=\\\"System.Collections.Generic.Dictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      public struct Enumerator : IEnumerator<KeyValuePair<TKey, TValue>>, IDisposable, IDictionaryEnumerator, IEnumerator\n    content.vb: >-\n      <Serializable>\n\n      Public Structure Enumerator\n          Implements IEnumerator(Of KeyValuePair(Of TKey, TValue)), IDisposable, IDictionaryEnumerator, IEnumerator\n  seealso:\n  - type: System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator\n    commentId: T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator\n  - type: System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator\n    commentId: T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator\n  - type: System.Collections.Generic.IEnumerable`1\n    commentId: T:System.Collections.Generic.IEnumerable`1\n  - type: System.Collections.Generic.IEnumerator`1\n    commentId: T:System.Collections.Generic.IEnumerator`1\n  implements:\n  - System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}\n  - System.Collections.IDictionaryEnumerator\n  - System.Collections.IEnumerator\n  - System.IDisposable\n  inheritedMembers:\n  - System.ValueType.Equals(System.Object)\n  - System.ValueType.GetHashCode\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Enumerator\n  name.vb: Dictionary(Of TKey, TValue).Enumerator\n  nameWithType: Dictionary<TKey, TValue>.Enumerator\n  nameWithType.vb: Dictionary(Of TKey, TValue).Enumerator\n- uid: System.Collections.Generic.Dictionary`2.Enumerator.Current\n  commentId: P:System.Collections.Generic.Dictionary`2.Enumerator.Current\n  id: Current\n  parent: System.Collections.Generic.Dictionary`2.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: Current\n  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Enumerator.Current\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Current\n    path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n    startLine: 754\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Gets the element at the current position of the enumerator.</p>\\n\"\n  syntax:\n    content: public KeyValuePair<TKey, TValue> Current { get; }\n    content.vb: Public ReadOnly Property Current As KeyValuePair(Of TKey, TValue)\n    parameters: []\n    return:\n      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}\n      description: \"\\n<p>The element in the <xref href=\\\"System.Collections.Generic.Dictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the current position of the enumerator.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.Dictionary`2.Enumerator.MoveNext\n    commentId: M:System.Collections.Generic.Dictionary`2.Enumerator.MoveNext\n  implements:\n  - System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Current\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Enumerator.Current\n  nameWithType: Dictionary<TKey, TValue>.Enumerator.Current\n  nameWithType.vb: Dictionary(Of TKey, TValue).Enumerator.Current\n- uid: System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry\n  commentId: P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry\n  id: System#Collections#IDictionaryEnumerator#Entry\n  isEii: true\n  parent: System.Collections.Generic.Dictionary`2.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: IDictionaryEnumerator.Entry\n  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Enumerator.System.Collections.IDictionaryEnumerator.Entry\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IDictionaryEnumerator.Entry\n    path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n    startLine: 784\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Gets the element at the current position of the enumerator.</p>\\n\"\n  syntax:\n    content: DictionaryEntry IDictionaryEnumerator.Entry { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionaryEnumerator.Entry As DictionaryEntry Implements IDictionaryEnumerator.Entry\n    parameters: []\n    return:\n      type: System.Collections.DictionaryEntry\n      description: \"\\n<p>The element in the dictionary at the current position of the enumerator, as a <xref href=\\\"System.Collections.DictionaryEntry\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The enumerator is positioned before the first element of the collection or after the last element. </p>\\n\"\n  seealso:\n  - type: System.Collections.IDictionaryEnumerator\n    commentId: T:System.Collections.IDictionaryEnumerator\n  - type: System.Collections.Generic.Dictionary`2.Enumerator.Current\n    commentId: P:System.Collections.Generic.Dictionary`2.Enumerator.Current\n  - type: System.Collections.Generic.Dictionary`2.Enumerator.MoveNext\n    commentId: M:System.Collections.Generic.Dictionary`2.Enumerator.MoveNext\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IDictionaryEnumerator.Entry\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Enumerator.System.Collections.IDictionaryEnumerator.Entry\n  name.vb: System.Collections.IDictionaryEnumerator.Entry\n  nameWithType: Dictionary<TKey, TValue>.Enumerator.IDictionaryEnumerator.Entry\n  nameWithType.vb: Dictionary(Of TKey, TValue).Enumerator.System.Collections.IDictionaryEnumerator.Entry\n- uid: System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key\n  commentId: P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key\n  id: System#Collections#IDictionaryEnumerator#Key\n  isEii: true\n  parent: System.Collections.Generic.Dictionary`2.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: IDictionaryEnumerator.Key\n  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Enumerator.System.Collections.IDictionaryEnumerator.Key\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IDictionaryEnumerator.Key\n    path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n    startLine: 794\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Gets the key of the element at the current position of the enumerator.</p>\\n\"\n  syntax:\n    content: object IDictionaryEnumerator.Key { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionaryEnumerator.Key As Object Implements IDictionaryEnumerator.Key\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>The key of the element in the dictionary at the current position of the enumerator.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The enumerator is positioned before the first element of the collection or after the last element. </p>\\n\"\n  seealso:\n  - type: System.Collections.IDictionaryEnumerator\n    commentId: T:System.Collections.IDictionaryEnumerator\n  - type: System.Collections.Generic.Dictionary`2.Enumerator.Current\n    commentId: P:System.Collections.Generic.Dictionary`2.Enumerator.Current\n  - type: System.Collections.Generic.Dictionary`2.Enumerator.MoveNext\n    commentId: M:System.Collections.Generic.Dictionary`2.Enumerator.MoveNext\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IDictionaryEnumerator.Key\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Enumerator.System.Collections.IDictionaryEnumerator.Key\n  name.vb: System.Collections.IDictionaryEnumerator.Key\n  nameWithType: Dictionary<TKey, TValue>.Enumerator.IDictionaryEnumerator.Key\n  nameWithType.vb: Dictionary(Of TKey, TValue).Enumerator.System.Collections.IDictionaryEnumerator.Key\n- uid: System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value\n  commentId: P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value\n  id: System#Collections#IDictionaryEnumerator#Value\n  isEii: true\n  parent: System.Collections.Generic.Dictionary`2.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: IDictionaryEnumerator.Value\n  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Enumerator.System.Collections.IDictionaryEnumerator.Value\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IDictionaryEnumerator.Value\n    path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n    startLine: 804\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Gets the value of the element at the current position of the enumerator.</p>\\n\"\n  syntax:\n    content: object IDictionaryEnumerator.Value { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionaryEnumerator.Value As Object Implements IDictionaryEnumerator.Value\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>The value of the element in the dictionary at the current position of the enumerator.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The enumerator is positioned before the first element of the collection or after the last element. </p>\\n\"\n  seealso:\n  - type: System.Collections.IDictionaryEnumerator\n    commentId: T:System.Collections.IDictionaryEnumerator\n  - type: System.Collections.Generic.Dictionary`2.Enumerator.Current\n    commentId: P:System.Collections.Generic.Dictionary`2.Enumerator.Current\n  - type: System.Collections.Generic.Dictionary`2.Enumerator.MoveNext\n    commentId: M:System.Collections.Generic.Dictionary`2.Enumerator.MoveNext\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IDictionaryEnumerator.Value\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Enumerator.System.Collections.IDictionaryEnumerator.Value\n  name.vb: System.Collections.IDictionaryEnumerator.Value\n  nameWithType: Dictionary<TKey, TValue>.Enumerator.IDictionaryEnumerator.Value\n  nameWithType.vb: Dictionary(Of TKey, TValue).Enumerator.System.Collections.IDictionaryEnumerator.Value\n- uid: System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Current\n  commentId: P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Current\n  id: System#Collections#IEnumerator#Current\n  isEii: true\n  parent: System.Collections.Generic.Dictionary`2.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: IEnumerator.Current\n  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Enumerator.System.Collections.IEnumerator.Current\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IEnumerator.Current\n    path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n    startLine: 761\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Gets the element at the current position of the enumerator.</p>\\n\"\n  syntax:\n    content: object IEnumerator.Current { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IEnumerator.Current As Object Implements IEnumerator.Current\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>The element in the collection at the current position of the enumerator, as an <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The enumerator is positioned before the first element of the collection or after the last element. </p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.Dictionary`2.Enumerator.Current\n    commentId: P:System.Collections.Generic.Dictionary`2.Enumerator.Current\n  - type: System.Collections.Generic.Dictionary`2.Enumerator.MoveNext\n    commentId: M:System.Collections.Generic.Dictionary`2.Enumerator.MoveNext\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IEnumerator.Current\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Enumerator.System.Collections.IEnumerator.Current\n  name.vb: System.Collections.IEnumerator.Current\n  nameWithType: Dictionary<TKey, TValue>.Enumerator.IEnumerator.Current\n  nameWithType.vb: Dictionary(Of TKey, TValue).Enumerator.System.Collections.IEnumerator.Current\n- uid: System.Collections.Generic.Dictionary`2.Enumerator.Dispose\n  commentId: M:System.Collections.Generic.Dictionary`2.Enumerator.Dispose\n  id: Dispose\n  parent: System.Collections.Generic.Dictionary`2.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Enumerator.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n    startLine: 758\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Releases all resources used by the <xref href=\\\"System.Collections.Generic.Dictionary`2.Enumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Enumerator.Dispose()\n  nameWithType: Dictionary<TKey, TValue>.Enumerator.Dispose()\n  nameWithType.vb: Dictionary(Of TKey, TValue).Enumerator.Dispose()\n- uid: System.Collections.Generic.Dictionary`2.Enumerator.MoveNext\n  commentId: M:System.Collections.Generic.Dictionary`2.Enumerator.MoveNext\n  id: MoveNext\n  parent: System.Collections.Generic.Dictionary`2.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: MoveNext()\n  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Enumerator.MoveNext()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MoveNext\n    path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n    startLine: 733\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Advances the enumerator to the next element of the <xref href=\\\"System.Collections.Generic.Dictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool MoveNext()\n    content.vb: Public Function MoveNext As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the enumerator was successfully advanced to the next element; <strong>false</strong> if the enumerator has passed the end of the collection.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The collection was modified after the enumerator was created. </p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.Dictionary`2.Enumerator.Current\n    commentId: P:System.Collections.Generic.Dictionary`2.Enumerator.Current\n  implements:\n  - System.Collections.IEnumerator.MoveNext\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Enumerator.MoveNext()\n  nameWithType: Dictionary<TKey, TValue>.Enumerator.MoveNext()\n  nameWithType.vb: Dictionary(Of TKey, TValue).Enumerator.MoveNext()\n- uid: System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Reset\n  commentId: M:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Reset\n  id: System#Collections#IEnumerator#Reset\n  isEii: true\n  parent: System.Collections.Generic.Dictionary`2.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: IEnumerator.Reset()\n  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Enumerator.System.Collections.IEnumerator.Reset()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IEnumerator.Reset\n    path: src/mscorlib/src/System/Collections/Generic/Dictionary.cs\n    startLine: 775\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Sets the enumerator to its initial position, which is before the first element in the collection.</p>\\n\"\n  syntax:\n    content: void IEnumerator.Reset()\n    content.vb: Sub System.Collections.IEnumerator.Reset Implements IEnumerator.Reset\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The collection was modified after the enumerator was created. </p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.Dictionary`2.Enumerator.Current\n    commentId: P:System.Collections.Generic.Dictionary`2.Enumerator.Current\n  - type: System.Collections.Generic.Dictionary`2.Enumerator.MoveNext\n    commentId: M:System.Collections.Generic.Dictionary`2.Enumerator.MoveNext\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IEnumerator.Reset\n  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Enumerator.System.Collections.IEnumerator.Reset()\n  name.vb: System.Collections.IEnumerator.Reset()\n  nameWithType: Dictionary<TKey, TValue>.Enumerator.IEnumerator.Reset()\n  nameWithType.vb: Dictionary(Of TKey, TValue).Enumerator.System.Collections.IEnumerator.Reset()\nreferences:\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerator`1\n  name: IEnumerator<KeyValuePair<TKey, TValue>>\n  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>\n  fullname.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))\n  name.vb: IEnumerator(Of KeyValuePair(Of TKey, TValue))\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  nameWithType: IEnumerator<KeyValuePair<TKey, TValue>>\n  nameWithType.vb: IEnumerator(Of KeyValuePair(Of TKey, TValue))\n  commentId: T:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}}\n- uid: System.Collections.IDictionaryEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IDictionaryEnumerator\n  fullName: System.Collections.IDictionaryEnumerator\n  nameWithType: IDictionaryEnumerator\n  commentId: T:System.Collections.IDictionaryEnumerator\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Collections.Generic.IEnumerator`1\n  isExternal: false\n  name: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n  fullname.vb: System.Collections.Generic.IEnumerator(Of T)\n  name.vb: IEnumerator(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerator<T>\n  nameWithType.vb: IEnumerator(Of T)\n  commentId: T:System.Collections.Generic.IEnumerator`1\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Current\n  parent: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}\n  definition: System.Collections.Generic.IEnumerator`1.Current\n  name: Current\n  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Current\n  fullname.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Current\n  nameWithType: IEnumerator<KeyValuePair<TKey, TValue>>.Current\n  nameWithType.vb: IEnumerator(Of KeyValuePair(Of TKey, TValue)).Current\n  commentId: P:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}}.Current\n- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.KeyValuePair`2\n  name: KeyValuePair<TKey, TValue>\n  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>\n  fullname.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)\n  name.vb: KeyValuePair(Of TKey, TValue)\n  spec.csharp:\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: )\n    fullName: )\n  nameWithType: KeyValuePair<TKey, TValue>\n  nameWithType.vb: KeyValuePair(Of TKey, TValue)\n  commentId: T:System.Collections.Generic.KeyValuePair{`0,`1}\n- uid: System.Collections.Generic.IEnumerator`1.Current\n  isExternal: true\n  name: Current\n  fullName: System.Collections.Generic.IEnumerator<T>.Current\n  fullname.vb: System.Collections.Generic.IEnumerator(Of T).Current\n  nameWithType: IEnumerator<T>.Current\n  nameWithType.vb: IEnumerator(Of T).Current\n  commentId: P:System.Collections.Generic.IEnumerator`1.Current\n- uid: System.Collections.Generic.KeyValuePair`2\n  isExternal: false\n  name: KeyValuePair<TKey, TValue>\n  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>\n  fullname.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)\n  name.vb: KeyValuePair(Of TKey, TValue)\n  spec.csharp:\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: )\n    fullName: )\n  nameWithType: KeyValuePair<TKey, TValue>\n  nameWithType.vb: KeyValuePair(Of TKey, TValue)\n  commentId: T:System.Collections.Generic.KeyValuePair`2\n- uid: System.Collections.IDictionaryEnumerator.Entry\n  parent: System.Collections.IDictionaryEnumerator\n  isExternal: true\n  name: Entry\n  fullName: System.Collections.IDictionaryEnumerator.Entry\n  nameWithType: IDictionaryEnumerator.Entry\n  commentId: P:System.Collections.IDictionaryEnumerator.Entry\n- uid: System.Collections.DictionaryEntry\n  parent: System.Collections\n  isExternal: false\n  name: DictionaryEntry\n  fullName: System.Collections.DictionaryEntry\n  nameWithType: DictionaryEntry\n  commentId: T:System.Collections.DictionaryEntry\n- uid: System.Collections.IDictionaryEnumerator.Key\n  parent: System.Collections.IDictionaryEnumerator\n  isExternal: true\n  name: Key\n  fullName: System.Collections.IDictionaryEnumerator.Key\n  nameWithType: IDictionaryEnumerator.Key\n  commentId: P:System.Collections.IDictionaryEnumerator.Key\n- uid: System.Collections.IDictionaryEnumerator.Value\n  parent: System.Collections.IDictionaryEnumerator\n  isExternal: true\n  name: Value\n  fullName: System.Collections.IDictionaryEnumerator.Value\n  nameWithType: IDictionaryEnumerator.Value\n  commentId: P:System.Collections.IDictionaryEnumerator.Value\n- uid: System.Collections.IEnumerator.Current\n  parent: System.Collections.IEnumerator\n  isExternal: false\n  name: Current\n  fullName: System.Collections.IEnumerator.Current\n  nameWithType: IEnumerator.Current\n  commentId: P:System.Collections.IEnumerator.Current\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDisposable.Dispose()\n  commentId: M:System.IDisposable.Dispose\n- uid: System.Collections.IEnumerator.MoveNext\n  parent: System.Collections.IEnumerator\n  isExternal: false\n  name: MoveNext()\n  fullName: System.Collections.IEnumerator.MoveNext()\n  spec.csharp:\n  - uid: System.Collections.IEnumerator.MoveNext\n    name: MoveNext\n    fullName: System.Collections.IEnumerator.MoveNext\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerator.MoveNext\n    name: MoveNext\n    fullName: System.Collections.IEnumerator.MoveNext\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerator.MoveNext()\n  commentId: M:System.Collections.IEnumerator.MoveNext\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.IEnumerator.Reset\n  parent: System.Collections.IEnumerator\n  isExternal: false\n  name: Reset()\n  fullName: System.Collections.IEnumerator.Reset()\n  spec.csharp:\n  - uid: System.Collections.IEnumerator.Reset\n    name: Reset\n    fullName: System.Collections.IEnumerator.Reset\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerator.Reset\n    name: Reset\n    fullName: System.Collections.IEnumerator.Reset\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerator.Reset()\n  commentId: M:System.Collections.IEnumerator.Reset\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n"}