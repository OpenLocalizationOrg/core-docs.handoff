{"nodes":[{"pos":[885,890],"content":"Stack","needQuote":true,"nodes":[{"content":"Stack","pos":[0,5]}]},{"pos":[2942,2949],"content":"Stack()","needQuote":true,"nodes":[{"content":"Stack()","pos":[0,7]}]},{"pos":[3954,3972],"content":"Stack(ICollection)","needQuote":true,"nodes":[{"content":"Stack(ICollection)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;col&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[5107,5152],"source":"\\n<p>\\n<em>col</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[5153,5159],"source":" </p>\\n"},{"pos":[5659,5671],"content":"Stack(Int32)","needQuote":true,"nodes":[{"content":"Stack(Int32)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;initialCapacity&lt;/em&gt; is less than zero.","pos":[6806,6856],"source":"\\n<p>\\n<em>initialCapacity</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[6857,6863],"source":" </p>\\n"},{"pos":[7124,7129],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[8386,8400],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[9833,9841],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[11191,11198],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[12093,12100],"content":"Clone()","needQuote":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[13245,13261],"content":"Contains(Object)","needQuote":true,"nodes":[{"content":"Contains(Object)","pos":[0,16]}]},{"pos":[14819,14839],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The zero-based index in &lt;em&gt;array&lt;/em&gt; at which copying begins.","pos":[16154,16222],"source":"\\n<p>The zero-based index in <em>array</em> at which copying begins."},{"content":"&lt;/p&gt;\\n","pos":[16223,16229],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[16348,16395],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[16396,16402],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero.","pos":[16519,16559],"source":"\\n<p>\\n<em>index</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[16560,16566],"source":" </p>\\n"},{"pos":[17764,17779],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[19258,19264],"content":"Peek()","needQuote":true,"nodes":[{"content":"Peek()","pos":[0,6]}]},{"pos":[20896,20901],"content":"Pop()","needQuote":true,"nodes":[{"content":"Pop()","pos":[0,5]}]},{"pos":[22580,22592],"content":"Push(Object)","needQuote":true,"nodes":[{"content":"Push(Object)","pos":[0,12]}]},{"pos":[24126,24145],"content":"Synchronized(Stack)","needQuote":true,"nodes":[{"content":"Synchronized(Stack)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;stack&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[25509,25556],"source":"\\n<p>\\n<em>stack</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[25557,25563],"source":" </p>\\n"},{"pos":[25859,25868],"content":"ToArray()","needQuote":true,"nodes":[{"content":"ToArray()","pos":[0,9]}]},{"pos":[27144,27162],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[27329,27335],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27509,27520],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[27733,27744],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[27943,27953],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[28048,28056],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[28125,28126],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28153,28154],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28224,28232],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[28301,28302],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28329,28330],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28513,28527],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[28646,28652],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28719,28720],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28770,28776],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28836,28837],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28920,28926],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28993,28994],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29044,29050],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29110,29111],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29325,29347],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[29495,29501],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29568,29569],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29619,29625],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29686,29687]},{"pos":[29742,29748],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29808,29809],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29906,29912],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29979,29980],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30030,30036],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30097,30098]},{"pos":[30153,30159],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30219,30220],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30465,30496],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[30662,30677],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[30753,30754],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30804,30810],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30871,30872]},{"pos":[30927,30933],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30993,30994],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31100,31115],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[31191,31192],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31242,31248],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[31309,31310]},{"pos":[31365,31371],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31431,31432],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31662,31675],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[31776,31787],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[31859,31860],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31887,31888],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31961,31972],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[32044,32045],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32072,32073],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32248,32257],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[32350,32357],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[32425,32426],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32453,32454],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32523,32530],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[32598,32599],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32626,32627],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32802,32819],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[32928,32943],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[33019,33020],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33047,33048],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33125,33140],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[33216,33217],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33244,33245],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33540,33553],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[33670,33681],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[33740,33741],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33768,33769],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33850,33861],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[33920,33921],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33948,33949],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34304,34316],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[34449,34459],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[34526,34527],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34554,34555],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34644,34654],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[34721,34722],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34749,34750],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35091,35106],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[35310,35323],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[35385,35386],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35413,35414],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35492,35508],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[35573,35574],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35601,35602],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35980,35997],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[36209,36224],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[36288,36289],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36316,36317],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36397,36415],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[36482,36483],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36510,36511],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36746,36752],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[36917,36941],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[37120,37131],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[37190,37191],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37258,37269],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[37346,37347],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37460,37471],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[37530,37531],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37598,37609],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[37686,37687],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37915,37924],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[38130,38153],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[38348,38358],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[38425,38426],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38493,38504],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[38581,38582],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38703,38713],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[38780,38781],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38848,38859],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[38936,38937],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39190,39208],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[39430,39456],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[39763,39776],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[39838,39839],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39906,39917],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[39994,39995],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40105,40121],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[40186,40187],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40254,40265],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[40342,40343],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40632,40642],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[40842,40870],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[41185,41200],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[41264,41265],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41332,41343],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[41420,41421],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41533,41551],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[41618,41619],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41686,41697],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[41774,41775],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42037,42048],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[42193,42198],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[42387,42392],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[42650,42664],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[42894,42901],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[43099,43107],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[43392,43412],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"pos":[43590,43596],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[43659,43660],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43709,43714],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[43753,43754]},{"pos":[43808,43813],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[43872,43873],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43985,43991],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[44054,44055],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44104,44109],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[44148,44149]},{"pos":[44203,44208],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[44267,44268],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44479,44484],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[44681,44696],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[44835,44848],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[44918,44919],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44946,44947],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45039,45052],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[45122,45123],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45150,45151],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45367,45378],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[45585,45590],"content":"Stack","needQuote":true,"nodes":[{"content":"Stack","pos":[0,5]}]},{"pos":[45721,45729],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[45857,45863],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[45924,45926]},{"pos":[45991,45997],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[46057,46059],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[46194,46215],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[46409,46436],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[46655,46672],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[46847,46867],"content":"InvalidCastException","needQuote":true,"nodes":[{"content":"InvalidCastException","pos":[0,20]}]},{"pos":[47073,47098],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]}],"content":"items:\n- uid: System.Collections.Stack\n  commentId: T:System.Collections.Stack\n  id: Stack\n  parent: System.Collections\n  children:\n  - System.Collections.Stack.#ctor\n  - System.Collections.Stack.#ctor(System.Collections.ICollection)\n  - System.Collections.Stack.#ctor(System.Int32)\n  - System.Collections.Stack.Clear\n  - System.Collections.Stack.Clone\n  - System.Collections.Stack.Contains(System.Object)\n  - System.Collections.Stack.CopyTo(System.Array,System.Int32)\n  - System.Collections.Stack.Count\n  - System.Collections.Stack.GetEnumerator\n  - System.Collections.Stack.IsSynchronized\n  - System.Collections.Stack.Peek\n  - System.Collections.Stack.Pop\n  - System.Collections.Stack.Push(System.Object)\n  - System.Collections.Stack.Synchronized(System.Collections.Stack)\n  - System.Collections.Stack.SyncRoot\n  - System.Collections.Stack.ToArray\n  langs:\n  - csharp\n  - vb\n  name: Stack\n  fullName: System.Collections.Stack\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Stack.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stack\n    path: src/mscorlib/src/System/Collections/Stack.cs\n    startLine: 22\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Represents a simple last-in-first-out (LIFO) non-generic collection of objects.</p>\\n\"\n  syntax:\n    content: >-\n      [DebuggerTypeProxy(typeof (Stack.StackDebugView))]\n\n      [DebuggerDisplay(\"Count = {Count}\")]\n\n      [ComVisible(true)]\n\n      [Serializable]\n\n      public class Stack : ICollection, IEnumerable, ICloneable\n    content.vb: >-\n      <DebuggerTypeProxy(GetType(Stack.StackDebugView))>\n\n      <DebuggerDisplay(\"Count = {Count}\")>\n\n      <ComVisible(True)>\n\n      <Serializable>\n\n      Public Class Stack\n          Implements ICollection, IEnumerable, ICloneable\n  seealso:\n  - type: System.Collections.Generic.Stack`1\n    commentId: T:System.Collections.Generic.Stack`1\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.ICollection\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Stack\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Collections.Stack.#ctor\n  commentId: M:System.Collections.Stack.#ctor\n  id: '#ctor'\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  - vb\n  name: Stack()\n  fullName: System.Collections.Stack.Stack()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Stack.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/Stack.cs\n    startLine: 36\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that is empty and has the default initial capacity.</p>\\n\"\n  syntax:\n    content: public Stack()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Stack.Stack()\n- uid: System.Collections.Stack.#ctor(System.Collections.ICollection)\n  commentId: M:System.Collections.Stack.#ctor(System.Collections.ICollection)\n  id: '#ctor(System.Collections.ICollection)'\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  - vb\n  name: Stack(ICollection)\n  fullName: System.Collections.Stack.Stack(System.Collections.ICollection)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Stack.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/Stack.cs\n    startLine: 58\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that contains elements copied from the specified collection and has the same initial capacity as the number of elements copied.</p>\\n\"\n  syntax:\n    content: public Stack(ICollection col)\n    content.vb: Public Sub New(col As ICollection)\n    parameters:\n    - id: col\n      type: System.Collections.ICollection\n      description: \"\\n<p>The <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to copy elements from. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>col</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Collections.ICollection\n    commentId: T:System.Collections.ICollection\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Stack.Stack(ICollection)\n- uid: System.Collections.Stack.#ctor(System.Int32)\n  commentId: M:System.Collections.Stack.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  - vb\n  name: Stack(Int32)\n  fullName: System.Collections.Stack.Stack(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Stack.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/Stack.cs\n    startLine: 44\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.</p>\\n\"\n  syntax:\n    content: public Stack(int initialCapacity)\n    content.vb: Public Sub New(initialCapacity As Integer)\n    parameters:\n    - id: initialCapacity\n      type: System.Int32\n      description: \"\\n<p>The initial number of elements that the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> can contain. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>initialCapacity</em> is less than zero. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Stack.Stack(Int32)\n- uid: System.Collections.Stack.Count\n  commentId: P:System.Collections.Stack.Count\n  id: Count\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Collections.Stack.Count\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Stack.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Count\n    path: src/mscorlib/src/System/Collections/Stack.cs\n    startLine: 68\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets the number of elements contained in the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual int Count { get; }\n    content.vb: Public Overridable ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of elements contained in the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.Count\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Stack.Count\n- uid: System.Collections.Stack.IsSynchronized\n  commentId: P:System.Collections.Stack.IsSynchronized\n  id: IsSynchronized\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  - vb\n  name: IsSynchronized\n  fullName: System.Collections.Stack.IsSynchronized\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Stack.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsSynchronized\n    path: src/mscorlib/src/System/Collections/Stack.cs\n    startLine: 75\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets a value indicating whether access to the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is synchronized (thread safe).</p>\\n\"\n  syntax:\n    content: public virtual bool IsSynchronized { get; }\n    content.vb: Public Overridable ReadOnly Property IsSynchronized As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong>, if access to the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is synchronized (thread safe); otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.IsSynchronized\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Stack.IsSynchronized\n- uid: System.Collections.Stack.SyncRoot\n  commentId: P:System.Collections.Stack.SyncRoot\n  id: SyncRoot\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  - vb\n  name: SyncRoot\n  fullName: System.Collections.Stack.SyncRoot\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Stack.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SyncRoot\n    path: src/mscorlib/src/System/Collections/Stack.cs\n    startLine: 79\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets an object that can be used to synchronize access to the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual object SyncRoot { get; }\n    content.vb: Public Overridable ReadOnly Property SyncRoot As Object\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can be used to synchronize access to the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.SyncRoot\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Stack.SyncRoot\n- uid: System.Collections.Stack.Clear\n  commentId: M:System.Collections.Stack.Clear\n  id: Clear\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  - vb\n  name: Clear()\n  fullName: System.Collections.Stack.Clear()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Stack.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Clear\n    path: src/mscorlib/src/System/Collections/Stack.cs\n    startLine: 89\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Removes all objects from the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void Clear()\n    content.vb: Public Overridable Sub Clear\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Stack.Clear()\n- uid: System.Collections.Stack.Clone\n  commentId: M:System.Collections.Stack.Clone\n  id: Clone\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  - vb\n  name: Clone()\n  fullName: System.Collections.Stack.Clone()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Stack.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Clone\n    path: src/mscorlib/src/System/Collections/Stack.cs\n    startLine: 95\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Creates a shallow copy of the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual object Clone()\n    content.vb: Public Overridable Function Clone As Object\n    return:\n      type: System.Object\n      description: \"\\n<p>A shallow copy of the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Stack.Clone()\n- uid: System.Collections.Stack.Contains(System.Object)\n  commentId: M:System.Collections.Stack.Contains(System.Object)\n  id: Contains(System.Object)\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  - vb\n  name: Contains(Object)\n  fullName: System.Collections.Stack.Contains(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Stack.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Contains\n    path: src/mscorlib/src/System/Collections/Stack.cs\n    startLine: 105\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Determines whether an element is in the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual bool Contains(object obj)\n    content.vb: Public Overridable Function Contains(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to locate in the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The value can be <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong>, if <em>obj</em> is found in the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Stack.Contains(Object)\n- uid: System.Collections.Stack.CopyTo(System.Array,System.Int32)\n  commentId: M:System.Collections.Stack.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.Stack.CopyTo(System.Array, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Stack.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CopyTo\n    path: src/mscorlib/src/System/Collections/Stack.cs\n    startLine: 121\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Copies the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to an existing one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, starting at the specified array index.</p>\\n\"\n  syntax:\n    content: public virtual void CopyTo(Array array, int index)\n    content.vb: Public Overridable Sub CopyTo(array As Array, index As Integer)\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the destination of the elements copied from <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> must have zero-based indexing. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in <em>array</em> at which copying begins. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n<p>-or- </p>\\n<p>The number of elements in the source <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>array</em>. </p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The type of the source <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> cannot be cast automatically to the type of the destination <em>array</em>. </p>\\n\"\n  seealso:\n  - type: System.Collections.Stack.ToArray\n    commentId: M:System.Collections.Stack.ToArray\n  implements:\n  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Stack.CopyTo(Array, Int32)\n- uid: System.Collections.Stack.GetEnumerator\n  commentId: M:System.Collections.Stack.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Collections.Stack.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Stack.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetEnumerator\n    path: src/mscorlib/src/System/Collections/Stack.cs\n    startLine: 149\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerator GetEnumerator()\n    content.vb: Public Overridable Function GetEnumerator As IEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Stack.GetEnumerator()\n- uid: System.Collections.Stack.Peek\n  commentId: M:System.Collections.Stack.Peek\n  id: Peek\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  - vb\n  name: Peek()\n  fullName: System.Collections.Stack.Peek()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Stack.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Peek\n    path: src/mscorlib/src/System/Collections/Stack.cs\n    startLine: 156\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns the object at the top of the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> without removing it.</p>\\n\"\n  syntax:\n    content: public virtual object Peek()\n    content.vb: Public Overridable Function Peek As Object\n    return:\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the top of the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is empty. </p>\\n\"\n  seealso:\n  - type: System.Collections.Stack.Pop\n    commentId: M:System.Collections.Stack.Pop\n  - type: System.Collections.Stack.Push(System.Object)\n    commentId: M:System.Collections.Stack.Push(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Stack.Peek()\n- uid: System.Collections.Stack.Pop\n  commentId: M:System.Collections.Stack.Pop\n  id: Pop\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  - vb\n  name: Pop()\n  fullName: System.Collections.Stack.Pop()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Stack.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Pop\n    path: src/mscorlib/src/System/Collections/Stack.cs\n    startLine: 165\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Removes and returns the object at the top of the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual object Pop()\n    content.vb: Public Overridable Function Pop As Object\n    return:\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> removed from the top of the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is empty. </p>\\n\"\n  seealso:\n  - type: System.Collections.Stack.Peek\n    commentId: M:System.Collections.Stack.Peek\n  - type: System.Collections.Stack.Push(System.Object)\n    commentId: M:System.Collections.Stack.Push(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Stack.Pop()\n- uid: System.Collections.Stack.Push(System.Object)\n  commentId: M:System.Collections.Stack.Push(System.Object)\n  id: Push(System.Object)\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  - vb\n  name: Push(Object)\n  fullName: System.Collections.Stack.Push(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Stack.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Push\n    path: src/mscorlib/src/System/Collections/Stack.cs\n    startLine: 178\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Inserts an object at the top of the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void Push(object obj)\n    content.vb: Public Overridable Sub Push(obj As Object)\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to push onto the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The value can be <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Collections.Stack.Peek\n    commentId: M:System.Collections.Stack.Peek\n  - type: System.Collections.Stack.Pop\n    commentId: M:System.Collections.Stack.Pop\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Stack.Push(Object)\n- uid: System.Collections.Stack.Synchronized(System.Collections.Stack)\n  commentId: M:System.Collections.Stack.Synchronized(System.Collections.Stack)\n  id: Synchronized(System.Collections.Stack)\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  - vb\n  name: Synchronized(Stack)\n  fullName: System.Collections.Stack.Synchronized(System.Collections.Stack)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Stack.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Synchronized\n    path: src/mscorlib/src/System/Collections/Stack.cs\n    startLine: 191\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns a synchronized (thread safe) wrapper for the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(Synchronization = true)]\n\n      public static Stack Synchronized(Stack stack)\n    content.vb: >-\n      <HostProtection(Synchronization:=True)>\n\n      Public Shared Function Synchronized(stack As Stack) As Stack\n    parameters:\n    - id: stack\n      type: System.Collections.Stack\n      description: \"\\n<p>The <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to synchronize. </p>\\n\"\n    return:\n      type: System.Collections.Stack\n      description: \"\\n<p>A synchronized wrapper around the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>stack</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Stack.Synchronized(Stack)\n- uid: System.Collections.Stack.ToArray\n  commentId: M:System.Collections.Stack.ToArray\n  id: ToArray\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  - vb\n  name: ToArray()\n  fullName: System.Collections.Stack.ToArray()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Stack.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToArray\n    path: src/mscorlib/src/System/Collections/Stack.cs\n    startLine: 202\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Copies the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a new array.</p>\\n\"\n  syntax:\n    content: public virtual object[] ToArray()\n    content.vb: Public Overridable Function ToArray As Object()\n    return:\n      type: System.Object[]\n      description: \"\\n<p>A new array containing copies of the elements of the <xref href=\\\"System.Collections.Stack\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.Stack.CopyTo(System.Array,System.Int32)\n    commentId: M:System.Collections.Stack.CopyTo(System.Array,System.Int32)\n  - type: System.Collections.Stack.Pop\n    commentId: M:System.Collections.Stack.Pop\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Stack.ToArray()\nreferences:\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  nameWithType: ICollection\n  commentId: T:System.Collections.ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable()\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel()\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  nameWithType: Queryable\n  commentId: T:System.Linq.Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  nameWithType: Enumerable\n  commentId: T:System.Linq.Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  nameWithType: System.Linq\n  commentId: N:System.Linq\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Collections.ICollection.Count\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: Count\n  fullName: System.Collections.ICollection.Count\n  nameWithType: ICollection.Count\n  commentId: P:System.Collections.ICollection.Count\n- uid: System.Collections.ICollection.IsSynchronized\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Collections.ICollection.IsSynchronized\n  nameWithType: ICollection.IsSynchronized\n  commentId: P:System.Collections.ICollection.IsSynchronized\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.ICollection.SyncRoot\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Collections.ICollection.SyncRoot\n  nameWithType: ICollection.SyncRoot\n  commentId: P:System.Collections.ICollection.SyncRoot\n- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ICollection\n  isExternal: true\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  spec.csharp:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection.CopyTo(Array, Int32)\n  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  nameWithType: Array\n  commentId: T:System.Array\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable.GetEnumerator()\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.Collections.Stack\n  parent: System.Collections\n  isExternal: false\n  name: Stack\n  fullName: System.Collections.Stack\n  nameWithType: Stack\n  commentId: T:System.Collections.Stack\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.InvalidCastException\n  isExternal: false\n  name: InvalidCastException\n  fullName: System.InvalidCastException\n  nameWithType: InvalidCastException\n  commentId: T:System.InvalidCastException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n"}