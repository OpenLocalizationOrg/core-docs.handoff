{"nodes":[{"pos":[835,840],"content":"XName","needQuote":true,"nodes":[{"content":"XName","pos":[0,5]}]},{"pos":[2045,2054],"content":"LocalName","needQuote":true,"nodes":[{"content":"LocalName","pos":[0,9]}]},{"pos":[3232,3241],"content":"Namespace","needQuote":true,"nodes":[{"content":"Namespace","pos":[0,9]}]},{"pos":[4360,4373],"content":"NamespaceName","needQuote":true,"nodes":[{"content":"NamespaceName","pos":[0,13]}]},{"pos":[5722,5736],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[7493,7504],"content":"Get(String)","needQuote":true,"nodes":[{"content":"Get(String)","pos":[0,11]}]},{"pos":[8995,9014],"content":"Get(String, String)","needQuote":true,"nodes":[{"content":"Get(String, String)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;A local (unqualified) name.&lt;/p&gt;\\n","pos":[9840,9878],"source":"\\n<p>A local (unqualified) name.</p>\\n"},{"content":"\\n&lt;p&gt;An XML namespace.&lt;/p&gt;\\n","pos":[9950,9978],"source":"\\n<p>An XML namespace.</p>\\n"},{"pos":[10500,10513],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[11894,11916],"content":"Equality(XName, XName)","needQuote":true,"nodes":[{"content":"Equality(XName, XName)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; are equal; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[13128,13243],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are equal; otherwise <strong>false</strong>.</p>\\n"},{"pos":[13656,13681],"content":"Implicit(String to XName)","needQuote":true,"nodes":[{"content":"Implicit(String to XName)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;A string that contains an expanded XML name in the format &lt;code&gt;{namespace}localname&lt;/code&gt;.&lt;/p&gt;\\n","pos":[14655,14758],"source":"\\n<p>A string that contains an expanded XML name in the format <code>{namespace}localname</code>.</p>\\n"},{"pos":[15759,15783],"content":"Inequality(XName, XName)","needQuote":true,"nodes":[{"content":"Inequality(XName, XName)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; are not equal; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17004,17123],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise <strong>false</strong>.</p>\\n"},{"pos":[17618,17649],"content":"IEquatable<XName>.Equals(XName)","needQuote":true,"nodes":[{"content":"IEquatable&lt;XName&gt;.Equals(XName)","pos":[0,31],"source":"IEquatable<XName>.Equals(XName)"}]},{"pos":[19654,19664],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[20719,20734],"content":"System.Xml.Linq","needQuote":true,"nodes":[{"content":"System.Xml.Linq","pos":[0,15]}]},{"pos":[20892,20898],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21084,21101],"content":"IEquatable<XName>","needQuote":true,"nodes":[{"content":"IEquatable&lt;XName&gt;","pos":[0,17],"source":"IEquatable<XName>"}]},{"pos":[21300,21310],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[21374,21375],"content":"<","needQuote":true,"nodes":[]},{"pos":[21433,21438],"content":"XName","needQuote":true,"nodes":[{"content":"XName","pos":[0,5]}]},{"pos":[21557,21567],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[21632,21635]},{"pos":[21700,21705],"content":"XName","needQuote":true,"nodes":[{"content":"XName","pos":[0,5]}]},{"pos":[21752,21753],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22008,22030],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[22178,22184],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22251,22252],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22302,22308],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22369,22370]},{"pos":[22425,22431],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22491,22492],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22589,22595],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22662,22663],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22713,22719],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22780,22781]},{"pos":[22836,22842],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22902,22903],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23148,23179],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[23345,23360],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[23436,23437],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23487,23493],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23554,23555]},{"pos":[23610,23616],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23676,23677],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23783,23798],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[23874,23875],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23925,23931],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23992,23993]},{"pos":[24048,24054],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24114,24115],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24341,24350],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[24443,24450],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[24518,24519],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24546,24547],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24616,24623],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[24691,24692],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24719,24720],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24895,24912],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[25021,25036],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[25112,25113],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25140,25141],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25218,25233],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[25309,25310],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25337,25338],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25483,25489],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[25609,25622],"content":"IEquatable<T>","needQuote":true,"nodes":[{"content":"IEquatable&lt;T&gt;","pos":[0,13],"source":"IEquatable<T>"}]},{"pos":[25777,25787],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[25830,25831],"content":"<","needQuote":true,"nodes":[]},{"pos":[25858,25859],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[25958,25968],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[26012,26015]},{"pos":[26049,26050],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[26077,26078],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26262,26268],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[26435,26445],"content":"XNamespace","needQuote":true,"nodes":[{"content":"XNamespace","pos":[0,10]}]},{"pos":[26648,26662],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[26781,26787],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26854,26855],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26905,26911],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26971,26972],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27055,27061],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27128,27129],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27179,27185],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27245,27246],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27419,27426],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[27591,27596],"content":"XName","needQuote":true,"nodes":[{"content":"XName","pos":[0,5]}]},{"pos":[27774,27787],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[27888,27899],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[27971,27972],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27999,28000],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28073,28084],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[28156,28157],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28184,28185],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28345,28350],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28608,28621],"content":"Equals(XName)","needQuote":true,"nodes":[{"content":"Equals(XName)","pos":[0,13]}]},{"pos":[28859,28865],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28959,28960],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29018,29023],"content":"XName","needQuote":true,"nodes":[{"content":"XName","pos":[0,5]}]},{"pos":[29070,29071],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29149,29155],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29252,29253],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29311,29316],"content":"XName","needQuote":true,"nodes":[{"content":"XName","pos":[0,5]}]},{"pos":[29363,29364],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29635,29644],"content":"Equals(T)","needQuote":true,"nodes":[{"content":"Equals(T)","pos":[0,9]}]},{"pos":[29802,29808],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29861,29862],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29889,29890],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[29917,29918],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29996,30002],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[30058,30059],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30086,30087],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[30114,30115],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30345,30355],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[30450,30458],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[30527,30528],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30555,30556],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30626,30634],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[30703,30704],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30731,30732],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]}],"content":"items:\n- uid: System.Xml.Linq.XName\n  commentId: T:System.Xml.Linq.XName\n  id: XName\n  parent: System.Xml.Linq\n  children:\n  - System.Xml.Linq.XName.Equals(System.Object)\n  - System.Xml.Linq.XName.Get(System.String)\n  - System.Xml.Linq.XName.Get(System.String,System.String)\n  - System.Xml.Linq.XName.GetHashCode\n  - System.Xml.Linq.XName.LocalName\n  - System.Xml.Linq.XName.Namespace\n  - System.Xml.Linq.XName.NamespaceName\n  - System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)\n  - System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName\n  - System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)\n  - System.Xml.Linq.XName.System#IEquatable{System#Xml#Linq#XName}#Equals(System.Xml.Linq.XName)\n  - System.Xml.Linq.XName.ToString\n  langs:\n  - csharp\n  - vb\n  name: XName\n  fullName: System.Xml.Linq.XName\n  type: Class\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XName\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 306\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Represents a name of an XML element or attribute. </p>\\n\"\n  syntax:\n    content: 'public sealed class XName : IEquatable<XName>'\n    content.vb: >-\n      Public NotInheritable Class XName\n          Implements IEquatable(Of XName)\n  inheritance:\n  - System.Object\n  implements:\n  - System.IEquatable{System.Xml.Linq.XName}\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: XName\n- uid: System.Xml.Linq.XName.LocalName\n  commentId: P:System.Xml.Linq.XName.LocalName\n  id: LocalName\n  parent: System.Xml.Linq.XName\n  langs:\n  - csharp\n  - vb\n  name: LocalName\n  fullName: System.Xml.Linq.XName.LocalName\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LocalName\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 309\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Gets the local (unqualified) part of the name.</p>\\n\"\n  syntax:\n    content: public string LocalName { get; }\n    content.vb: Public ReadOnly Property LocalName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the local (unqualified) part of the name.</p>\\n\"\n  seealso:\n  - type: System.Xml.Linq.XName.Namespace\n    commentId: P:System.Xml.Linq.XName.Namespace\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: XName.LocalName\n- uid: System.Xml.Linq.XName.Namespace\n  commentId: P:System.Xml.Linq.XName.Namespace\n  id: Namespace\n  parent: System.Xml.Linq.XName\n  langs:\n  - csharp\n  - vb\n  name: Namespace\n  fullName: System.Xml.Linq.XName.Namespace\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Namespace\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 310\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Gets the namespace part of the fully qualified name.</p>\\n\"\n  syntax:\n    content: public XNamespace Namespace { get; }\n    content.vb: Public ReadOnly Property Namespace As XNamespace\n    parameters: []\n    return:\n      type: System.Xml.Linq.XNamespace\n      description: \"\\n<p>An <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the namespace part of the name.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: XName.Namespace\n- uid: System.Xml.Linq.XName.NamespaceName\n  commentId: P:System.Xml.Linq.XName.NamespaceName\n  id: NamespaceName\n  parent: System.Xml.Linq.XName\n  langs:\n  - csharp\n  - vb\n  name: NamespaceName\n  fullName: System.Xml.Linq.XName.NamespaceName\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NamespaceName\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 311\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns the URI of the <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for this <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public string NamespaceName { get; }\n    content.vb: Public ReadOnly Property NamespaceName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The URI of the <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for this <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: XName.NamespaceName\n- uid: System.Xml.Linq.XName.Equals(System.Object)\n  commentId: M:System.Xml.Linq.XName.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Xml.Linq.XName\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Xml.Linq.XName.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 312\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Determines whether the specified <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to this <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare to the current <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the current <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XName.Equals(Object)\n- uid: System.Xml.Linq.XName.Get(System.String)\n  commentId: M:System.Xml.Linq.XName.Get(System.String)\n  id: Get(System.String)\n  parent: System.Xml.Linq.XName\n  langs:\n  - csharp\n  - vb\n  name: Get(String)\n  fullName: System.Xml.Linq.XName.Get(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Get\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 313\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Gets an <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object from an expanded name.</p>\\n\"\n  syntax:\n    content: public static XName Get(string expandedName)\n    content.vb: Public Shared Function Get(expandedName As String) As XName\n    parameters:\n    - id: expandedName\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains an expanded XML name in the format <code>{namespace}localname</code>.</p>\\n\"\n    return:\n      type: System.Xml.Linq.XName\n      description: \"\\n<p>An <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object constructed from the expanded name.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XName.Get(String)\n- uid: System.Xml.Linq.XName.Get(System.String,System.String)\n  commentId: M:System.Xml.Linq.XName.Get(System.String,System.String)\n  id: Get(System.String,System.String)\n  parent: System.Xml.Linq.XName\n  langs:\n  - csharp\n  - vb\n  name: Get(String, String)\n  fullName: System.Xml.Linq.XName.Get(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Get\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 314\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Gets an <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object from a local name and a namespace.</p>\\n\"\n  syntax:\n    content: public static XName Get(string localName, string namespaceName)\n    content.vb: Public Shared Function Get(localName As String, namespaceName As String) As XName\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>A local (unqualified) name.</p>\\n\"\n    - id: namespaceName\n      type: System.String\n      description: \"\\n<p>An XML namespace.</p>\\n\"\n    return:\n      type: System.Xml.Linq.XName\n      description: \"\\n<p>An <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object created from the specified local name and namespace.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XName.Get(String, String)\n- uid: System.Xml.Linq.XName.GetHashCode\n  commentId: M:System.Xml.Linq.XName.GetHashCode\n  id: GetHashCode\n  parent: System.Xml.Linq.XName\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Xml.Linq.XName.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 315\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Gets a hash code for this <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>An <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the hash code for the <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XName.GetHashCode()\n- uid: System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)\n  commentId: M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)\n  id: op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XName\n  langs:\n  - csharp\n  - vb\n  name: Equality(XName, XName)\n  fullName: System.Xml.Linq.XName.Equality(System.Xml.Linq.XName, System.Xml.Linq.XName)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 316\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a value indicating whether two instances of <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are equal.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(XName left, XName right)\n    content.vb: Public Shared Operator =(left As XName, right As XName) As Boolean\n    parameters:\n    - id: left\n      type: System.Xml.Linq.XName\n      description: \"\\n<p>The first <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare.</p>\\n\"\n    - id: right\n      type: System.Xml.Linq.XName\n      description: \"\\n<p>The second <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are equal; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XName.Equality(XName, XName)\n- uid: System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName\n  commentId: M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName\n  id: op_Implicit(System.String)~System.Xml.Linq.XName\n  parent: System.Xml.Linq.XName\n  langs:\n  - csharp\n  - vb\n  name: Implicit(String to XName)\n  fullName: System.Xml.Linq.XName.Implicit(System.String to System.Xml.Linq.XName)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 317\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Converts a string formatted as an expanded XML name (that is,<code>{namespace}localname</code>) to an <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static implicit operator XName(string expandedName)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Widening Operator CType(expandedName As String) As XName\n    parameters:\n    - id: expandedName\n      type: System.String\n      description: \"\\n<p>A string that contains an expanded XML name in the format <code>{namespace}localname</code>.</p>\\n\"\n    return:\n      type: System.Xml.Linq.XName\n      description: \"\\n<p>An <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object constructed from the expanded name.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Xml.Linq.XName.Widening(System.String to System.Xml.Linq.XName)\n  name.vb: Widening(String to XName)\n  nameWithType: XName.Implicit(String to XName)\n  nameWithType.vb: XName.Widening(String to XName)\n- uid: System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)\n  commentId: M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)\n  id: op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XName\n  langs:\n  - csharp\n  - vb\n  name: Inequality(XName, XName)\n  fullName: System.Xml.Linq.XName.Inequality(System.Xml.Linq.XName, System.Xml.Linq.XName)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 319\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a value indicating whether two instances of <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are not equal.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(XName left, XName right)\n    content.vb: Public Shared Operator <>(left As XName, right As XName) As Boolean\n    parameters:\n    - id: left\n      type: System.Xml.Linq.XName\n      description: \"\\n<p>The first <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare.</p>\\n\"\n    - id: right\n      type: System.Xml.Linq.XName\n      description: \"\\n<p>The second <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XName.Inequality(XName, XName)\n- uid: System.Xml.Linq.XName.System#IEquatable{System#Xml#Linq#XName}#Equals(System.Xml.Linq.XName)\n  commentId: M:System.Xml.Linq.XName.System#IEquatable{System#Xml#Linq#XName}#Equals(System.Xml.Linq.XName)\n  id: System#IEquatable{System#Xml#Linq#XName}#Equals(System.Xml.Linq.XName)\n  isEii: true\n  parent: System.Xml.Linq.XName\n  langs:\n  - csharp\n  - vb\n  name: IEquatable<XName>.Equals(XName)\n  fullName: System.Xml.Linq.XName.System.IEquatable<System.Xml.Linq.XName>.Equals(System.Xml.Linq.XName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.IEquatable<System.Xml.Linq.XName>.Equals\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 320\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Indicates whether the current <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the specified <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: bool IEquatable<XName>.Equals(XName other)\n    content.vb: Function System.IEquatable<System.Xml.Linq.XName>.Equals(other As XName) As Boolean Implements IEquatable(Of XName).Equals\n    parameters:\n    - id: other\n      type: System.Xml.Linq.XName\n      description: \"\\n<p>The <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare with this <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the specified <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, otherwise <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.IEquatable{System.Xml.Linq.XName}.Equals(System.Xml.Linq.XName)\n  name.vb: System.IEquatable<System.Xml.Linq.XName>.Equals(XName)\n  nameWithType: XName.IEquatable<XName>.Equals(XName)\n  nameWithType.vb: XName.System.IEquatable<System.Xml.Linq.XName>.Equals(XName)\n- uid: System.Xml.Linq.XName.ToString\n  commentId: M:System.Xml.Linq.XName.ToString\n  id: ToString\n  parent: System.Xml.Linq.XName\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Xml.Linq.XName.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 321\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns the expanded XML name in the format <code>{namespace}localname</code>.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the expanded XML name in the format <code>{namespace}localname</code>.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XName.ToString()\nreferences:\n- uid: System.Xml.Linq\n  isExternal: false\n  name: System.Xml.Linq\n  fullName: System.Xml.Linq\n  commentId: N:System.Xml.Linq\n  nameWithType: System.Xml.Linq\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.IEquatable{System.Xml.Linq.XName}\n  parent: System\n  definition: System.IEquatable`1\n  name: IEquatable<XName>\n  fullName: System.IEquatable<System.Xml.Linq.XName>\n  fullname.vb: System.IEquatable(Of System.Xml.Linq.XName)\n  name.vb: IEquatable(Of XName)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Xml.Linq.XName\n    name: XName\n    fullName: System.Xml.Linq.XName\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Xml.Linq.XName\n    name: XName\n    fullName: System.Xml.Linq.XName\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable{System.Xml.Linq.XName}\n  nameWithType: IEquatable<XName>\n  nameWithType.vb: IEquatable(Of XName)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.IEquatable`1\n  isExternal: false\n  name: IEquatable<T>\n  fullName: System.IEquatable<T>\n  fullname.vb: System.IEquatable(Of T)\n  name.vb: IEquatable(Of T)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable`1\n  nameWithType: IEquatable<T>\n  nameWithType.vb: IEquatable(Of T)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Xml.Linq.XNamespace\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XNamespace\n  fullName: System.Xml.Linq.XNamespace\n  commentId: T:System.Xml.Linq.XNamespace\n  nameWithType: XNamespace\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Xml.Linq.XName\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XName\n  fullName: System.Xml.Linq.XName\n  commentId: T:System.Xml.Linq.XName\n  nameWithType: XName\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.IEquatable{System.Xml.Linq.XName}.Equals(System.Xml.Linq.XName)\n  parent: System.IEquatable{System.Xml.Linq.XName}\n  definition: System.IEquatable`1.Equals(`0)\n  name: Equals(XName)\n  fullName: System.IEquatable<System.Xml.Linq.XName>.Equals(System.Xml.Linq.XName)\n  fullname.vb: System.IEquatable(Of System.Xml.Linq.XName).Equals(System.Xml.Linq.XName)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<System.Xml.Linq.XName>.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Xml.Linq.XName\n    name: XName\n    fullName: System.Xml.Linq.XName\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of System.Xml.Linq.XName).Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Xml.Linq.XName\n    name: XName\n    fullName: System.Xml.Linq.XName\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable{System.Xml.Linq.XName}.Equals(System.Xml.Linq.XName)\n  nameWithType: IEquatable<XName>.Equals(XName)\n  nameWithType.vb: IEquatable(Of XName).Equals(XName)\n- uid: System.IEquatable`1.Equals(`0)\n  isExternal: false\n  name: Equals(T)\n  fullName: System.IEquatable<T>.Equals(T)\n  fullname.vb: System.IEquatable(Of T).Equals(T)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<T>.Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of T).Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable`1.Equals(`0)\n  nameWithType: IEquatable<T>.Equals(T)\n  nameWithType.vb: IEquatable(Of T).Equals(T)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n"}