{"nodes":[{"pos":[835,851],"content":"RangeHeaderValue","needQuote":true,"nodes":[{"content":"RangeHeaderValue","pos":[0,16]}]},{"pos":[1947,1965],"content":"RangeHeaderValue()","needQuote":true,"nodes":[{"content":"RangeHeaderValue()","pos":[0,18]}]},{"pos":[3117,3167],"content":"RangeHeaderValue(Nullable<Int64>, Nullable<Int64>)","needQuote":true,"nodes":[{"content":"RangeHeaderValue(Nullable&lt;Int64&gt;, Nullable&lt;Int64&gt;)","pos":[0,50],"source":"RangeHeaderValue(Nullable<Int64>, Nullable<Int64>)"}]},{"content":"\\n&lt;p&gt;The position at which to start sending data.&lt;/p&gt;\\n","pos":[4031,4086],"source":"\\n<p>The position at which to start sending data.</p>\\n"},{"content":"\\n&lt;p&gt;The position at which to stop sending data.&lt;/p&gt;\\n","pos":[4163,4217],"source":"\\n<p>The position at which to stop sending data.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;from&lt;/em&gt; is greater than &lt;em&gt;to&lt;/em&gt;&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;from&lt;/em&gt; or &lt;em&gt;to&lt;/em&gt; is less than 0.","pos":[4348,4465],"source":"\\n<p>\\n<em>from</em> is greater than <em>to</em></p>\\n<p>-or- </p>\\n<p>\\n<em>from</em> or <em>to</em> is less than 0."},{"content":"&lt;/p&gt;\\n","pos":[4466,4472],"source":" </p>\\n"},{"pos":[5135,5141],"content":"Ranges","needQuote":true,"nodes":[{"content":"Ranges","pos":[0,6]}]},{"pos":[6597,6601],"content":"Unit","needQuote":true,"nodes":[{"content":"Unit","pos":[0,4]}]},{"pos":[7920,7934],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare with the current object.&lt;/p&gt;\\n","pos":[8808,8865],"source":"\\n<p>The object to compare with the current object.</p>\\n"},{"pos":[9627,9640],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[10947,10960],"content":"Parse(String)","needQuote":true,"nodes":[{"content":"Parse(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A string that represents range header value information.&lt;/p&gt;\\n","pos":[11747,11814],"source":"\\n<p>A string that represents range header value information.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is a &lt;strong&gt;null&lt;/strong&gt; reference.&lt;/p&gt;\\n","pos":[12262,12327],"source":"\\n<p>\\n<em>input</em> is a <strong>null</strong> reference.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is not valid range header value information.&lt;/p&gt;\\n","pos":[12420,12492],"source":"\\n<p>\\n<em>input</em> is not valid range header value information.</p>\\n"},{"pos":[12844,12854],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[14303,14341],"content":"TryParse(String, out RangeHeaderValue)","needQuote":true,"nodes":[{"content":"TryParse(String, out RangeHeaderValue)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;he string to validate.&lt;/p&gt;\\n","pos":[15254,15287],"source":"\\n<p>he string to validate.</p>\\n"},{"pos":[16376,16399],"content":"System.Net.Http.Headers","needQuote":true,"nodes":[{"content":"System.Net.Http.Headers","pos":[0,23]}]},{"pos":[16581,16587],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16774,16796],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[16944,16950],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17017,17018],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17068,17074],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17135,17136]},{"pos":[17191,17197],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17257,17258],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17355,17361],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17428,17429],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17479,17485],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17546,17547]},{"pos":[17602,17608],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17668,17669],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17914,17945],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[18111,18126],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[18202,18203],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18253,18259],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18320,18321]},{"pos":[18376,18382],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18442,18443],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18549,18564],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[18640,18641],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18691,18697],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18758,18759]},{"pos":[18814,18820],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18880,18881],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19107,19116],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[19209,19216],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[19284,19285],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19312,19313],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19382,19389],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[19457,19458],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19485,19486],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19661,19678],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[19787,19802],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[19878,19879],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19906,19907],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19984,19999],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[20075,20076],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20103,20104],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20249,20255],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[20414,20429],"content":"Nullable<Int64>","needQuote":true,"nodes":[{"content":"Nullable&lt;Int64&gt;","pos":[0,15],"source":"Nullable<Int64>"}]},{"pos":[20602,20610],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[20672,20673],"content":"<","needQuote":true,"nodes":[]},{"pos":[20722,20727],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[20856,20864],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[20927,20930]},{"pos":[20986,20991],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[21050,21051],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21253,21264],"content":"Nullable<T>","needQuote":true,"nodes":[{"content":"Nullable&lt;T&gt;","pos":[0,11],"source":"Nullable<T>"}]},{"pos":[21411,21419],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[21460,21461],"content":"<","needQuote":true,"nodes":[]},{"pos":[21488,21489],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[21586,21594],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[21636,21639]},{"pos":[21673,21674],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[21701,21702],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22006,22039],"content":"ICollection<RangeItemHeaderValue>","needQuote":true,"nodes":[{"content":"ICollection&lt;RangeItemHeaderValue&gt;","pos":[0,33],"source":"ICollection<RangeItemHeaderValue>"}]},{"pos":[22363,22374],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[22459,22460],"content":"<","needQuote":true,"nodes":[]},{"pos":[22541,22561],"content":"RangeItemHeaderValue","needQuote":true,"nodes":[{"content":"RangeItemHeaderValue","pos":[0,20]}]},{"pos":[22724,22735],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"content":"(Of","pos":[22821,22824]},{"pos":[22912,22932],"content":"RangeItemHeaderValue","needQuote":true,"nodes":[{"content":"RangeItemHeaderValue","pos":[0,20]}]},{"pos":[23002,23003],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23302,23316],"content":"ICollection<T>","needQuote":true,"nodes":[{"content":"ICollection&lt;T&gt;","pos":[0,14],"source":"ICollection<T>"}]},{"pos":[23535,23546],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[23610,23611],"content":"<","needQuote":true,"nodes":[]},{"pos":[23638,23639],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[23759,23770],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"content":"(Of","pos":[23835,23838]},{"pos":[23872,23873],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[23900,23901],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24104,24130],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[24321,24327],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[24500,24514],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[24633,24639],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24706,24707],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24757,24763],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24823,24824],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24907,24913],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24980,24981],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25031,25037],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25097,25098],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25271,25278],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[25444,25457],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[25558,25569],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[25641,25642],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25669,25670],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25743,25754],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[25826,25827],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25854,25855],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26015,26020],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[26206,26222],"content":"RangeHeaderValue","needQuote":true,"nodes":[{"content":"RangeHeaderValue","pos":[0,16]}]},{"pos":[26446,26456],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[26551,26559],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[26628,26629],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26656,26657],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26727,26735],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[26804,26805],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26832,26833],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26992,27019],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[27225,27246],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[27445,27460],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]}],"content":"items:\n- uid: System.Net.Http.Headers.RangeHeaderValue\n  commentId: T:System.Net.Http.Headers.RangeHeaderValue\n  id: RangeHeaderValue\n  parent: System.Net.Http.Headers\n  children:\n  - System.Net.Http.Headers.RangeHeaderValue.#ctor\n  - System.Net.Http.Headers.RangeHeaderValue.#ctor(System.Nullable{System.Int64},System.Nullable{System.Int64})\n  - System.Net.Http.Headers.RangeHeaderValue.Equals(System.Object)\n  - System.Net.Http.Headers.RangeHeaderValue.GetHashCode\n  - System.Net.Http.Headers.RangeHeaderValue.Parse(System.String)\n  - System.Net.Http.Headers.RangeHeaderValue.Ranges\n  - System.Net.Http.Headers.RangeHeaderValue.ToString\n  - System.Net.Http.Headers.RangeHeaderValue.TryParse(System.String,System.Net.Http.Headers.RangeHeaderValue@)\n  - System.Net.Http.Headers.RangeHeaderValue.Unit\n  langs:\n  - csharp\n  - vb\n  name: RangeHeaderValue\n  fullName: System.Net.Http.Headers.RangeHeaderValue\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RangeHeaderValue\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 520\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Represents a Range header value.</p>\\n\"\n  syntax:\n    content: public class RangeHeaderValue\n    content.vb: Public Class RangeHeaderValue\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: RangeHeaderValue\n- uid: System.Net.Http.Headers.RangeHeaderValue.#ctor\n  commentId: M:System.Net.Http.Headers.RangeHeaderValue.#ctor\n  id: '#ctor'\n  parent: System.Net.Http.Headers.RangeHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: RangeHeaderValue()\n  fullName: System.Net.Http.Headers.RangeHeaderValue.RangeHeaderValue()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 522\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Http.Headers.RangeHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public RangeHeaderValue()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RangeHeaderValue.RangeHeaderValue()\n- uid: System.Net.Http.Headers.RangeHeaderValue.#ctor(System.Nullable{System.Int64},System.Nullable{System.Int64})\n  commentId: M:System.Net.Http.Headers.RangeHeaderValue.#ctor(System.Nullable{System.Int64},System.Nullable{System.Int64})\n  id: '#ctor(System.Nullable{System.Int64},System.Nullable{System.Int64})'\n  parent: System.Net.Http.Headers.RangeHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: RangeHeaderValue(Nullable<Int64>, Nullable<Int64>)\n  fullName: System.Net.Http.Headers.RangeHeaderValue.RangeHeaderValue(System.Nullable<System.Int64>, System.Nullable<System.Int64>)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 523\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Http.Headers.RangeHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with a byte range.</p>\\n\"\n  syntax:\n    content: public RangeHeaderValue(long ? from, long ? to)\n    content.vb: Public Sub New(from As Long?, to As Long?)\n    parameters:\n    - id: from\n      type: System.Nullable{System.Int64}\n      description: \"\\n<p>The position at which to start sending data.</p>\\n\"\n    - id: to\n      type: System.Nullable{System.Int64}\n      description: \"\\n<p>The position at which to stop sending data.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>from</em> is greater than <em>to</em></p>\\n<p>-or- </p>\\n<p>\\n<em>from</em> or <em>to</em> is less than 0. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Net.Http.Headers.RangeHeaderValue.RangeHeaderValue(System.Nullable(Of System.Int64), System.Nullable(Of System.Int64))\n  name.vb: RangeHeaderValue(Nullable(Of Int64), Nullable(Of Int64))\n  nameWithType: RangeHeaderValue.RangeHeaderValue(Nullable<Int64>, Nullable<Int64>)\n  nameWithType.vb: RangeHeaderValue.RangeHeaderValue(Nullable(Of Int64), Nullable(Of Int64))\n- uid: System.Net.Http.Headers.RangeHeaderValue.Ranges\n  commentId: P:System.Net.Http.Headers.RangeHeaderValue.Ranges\n  id: Ranges\n  parent: System.Net.Http.Headers.RangeHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Ranges\n  fullName: System.Net.Http.Headers.RangeHeaderValue.Ranges\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Ranges\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 524\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Gets the ranges specified from the <xref href=\\\"System.Net.Http.Headers.RangeHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public ICollection<RangeItemHeaderValue> Ranges { get; }\n    content.vb: Public ReadOnly Property Ranges As ICollection(Of RangeItemHeaderValue)\n    parameters: []\n    return:\n      type: System.Collections.Generic.ICollection{System.Net.Http.Headers.RangeItemHeaderValue}\n      description: \"\\n<p>Returns <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The ranges from the <xref href=\\\"System.Net.Http.Headers.RangeHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: RangeHeaderValue.Ranges\n- uid: System.Net.Http.Headers.RangeHeaderValue.Unit\n  commentId: P:System.Net.Http.Headers.RangeHeaderValue.Unit\n  id: Unit\n  parent: System.Net.Http.Headers.RangeHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Unit\n  fullName: System.Net.Http.Headers.RangeHeaderValue.Unit\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Unit\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 525\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Gets the unit from the <xref href=\\\"System.Net.Http.Headers.RangeHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public string Unit { get; set; }\n    content.vb: Public Property Unit As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>Returns <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The unit from the <xref href=\\\"System.Net.Http.Headers.RangeHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: RangeHeaderValue.Unit\n- uid: System.Net.Http.Headers.RangeHeaderValue.Equals(System.Object)\n  commentId: M:System.Net.Http.Headers.RangeHeaderValue.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Net.Http.Headers.RangeHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Net.Http.Headers.RangeHeaderValue.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 526\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Determines whether the specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the current <xref href=\\\"System.Net.Http.Headers.RangeHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare with the current object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if the specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the current object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: RangeHeaderValue.Equals(Object)\n- uid: System.Net.Http.Headers.RangeHeaderValue.GetHashCode\n  commentId: M:System.Net.Http.Headers.RangeHeaderValue.GetHashCode\n  id: GetHashCode\n  parent: System.Net.Http.Headers.RangeHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Net.Http.Headers.RangeHeaderValue.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 527\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Serves as a hash function for an <xref href=\\\"System.Net.Http.Headers.RangeHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>Returns <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>A hash code for the current object.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: RangeHeaderValue.GetHashCode()\n- uid: System.Net.Http.Headers.RangeHeaderValue.Parse(System.String)\n  commentId: M:System.Net.Http.Headers.RangeHeaderValue.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Net.Http.Headers.RangeHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Parse(String)\n  fullName: System.Net.Http.Headers.RangeHeaderValue.Parse(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Parse\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 528\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Converts a string to an <xref href=\\\"System.Net.Http.Headers.RangeHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public static RangeHeaderValue Parse(string input)\n    content.vb: Public Shared Function Parse(input As String) As RangeHeaderValue\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>A string that represents range header value information.</p>\\n\"\n    return:\n      type: System.Net.Http.Headers.RangeHeaderValue\n      description: \"\\n<p>Returns <xref href=\\\"System.Net.Http.Headers.RangeHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>An <xref href=\\\"System.Net.Http.Headers.RangeHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> is a <strong>null</strong> reference.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>input</em> is not valid range header value information.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: RangeHeaderValue.Parse(String)\n- uid: System.Net.Http.Headers.RangeHeaderValue.ToString\n  commentId: M:System.Net.Http.Headers.RangeHeaderValue.ToString\n  id: ToString\n  parent: System.Net.Http.Headers.RangeHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Net.Http.Headers.RangeHeaderValue.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 529\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Returns a string that represents the current <xref href=\\\"System.Net.Http.Headers.RangeHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>Returns <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>A string that represents the current object.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: RangeHeaderValue.ToString()\n- uid: System.Net.Http.Headers.RangeHeaderValue.TryParse(System.String,System.Net.Http.Headers.RangeHeaderValue@)\n  commentId: M:System.Net.Http.Headers.RangeHeaderValue.TryParse(System.String,System.Net.Http.Headers.RangeHeaderValue@)\n  id: TryParse(System.String,System.Net.Http.Headers.RangeHeaderValue@)\n  parent: System.Net.Http.Headers.RangeHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: TryParse(String, out RangeHeaderValue)\n  fullName: System.Net.Http.Headers.RangeHeaderValue.TryParse(System.String, out System.Net.Http.Headers.RangeHeaderValue)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryParse\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 530\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Determines whether a string is valid <xref href=\\\"System.Net.Http.Headers.RangeHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> information.</p>\\n\"\n  syntax:\n    content: public static bool TryParse(string input, out RangeHeaderValue parsedValue)\n    content.vb: Public Shared Function TryParse(input As String, ByRef parsedValue As RangeHeaderValue) As Boolean\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>he string to validate.</p>\\n\"\n    - id: parsedValue\n      type: System.Net.Http.Headers.RangeHeaderValue\n      description: \"\\n<p>The <xref href=\\\"System.Net.Http.Headers.RangeHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> version of the string.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if <em>input</em> is valid <xref href=\\\"System.Net.Http.Headers.AuthenticationHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> information; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Net.Http.Headers.RangeHeaderValue.TryParse(System.String, ByRef System.Net.Http.Headers.RangeHeaderValue)\n  name.vb: TryParse(String, ByRef RangeHeaderValue)\n  nameWithType: RangeHeaderValue.TryParse(String, out RangeHeaderValue)\n  nameWithType.vb: RangeHeaderValue.TryParse(String, ByRef RangeHeaderValue)\nreferences:\n- uid: System.Net.Http.Headers\n  isExternal: false\n  name: System.Net.Http.Headers\n  fullName: System.Net.Http.Headers\n  commentId: N:System.Net.Http.Headers\n  nameWithType: System.Net.Http.Headers\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Nullable{System.Int64}\n  parent: System\n  definition: System.Nullable`1\n  name: Nullable<Int64>\n  fullName: System.Nullable<System.Int64>\n  fullname.vb: System.Nullable(Of System.Int64)\n  name.vb: Nullable(Of Int64)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Nullable{System.Int64}\n  nameWithType: Nullable<Int64>\n  nameWithType.vb: Nullable(Of Int64)\n- uid: System.Nullable`1\n  parent: System\n  isExternal: false\n  name: Nullable<T>\n  fullName: System.Nullable<T>\n  fullname.vb: System.Nullable(Of T)\n  name.vb: Nullable(Of T)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Nullable`1\n  nameWithType: Nullable<T>\n  nameWithType.vb: Nullable(Of T)\n- uid: System.Collections.Generic.ICollection{System.Net.Http.Headers.RangeItemHeaderValue}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.ICollection`1\n  name: ICollection<RangeItemHeaderValue>\n  fullName: System.Collections.Generic.ICollection<System.Net.Http.Headers.RangeItemHeaderValue>\n  fullname.vb: System.Collections.Generic.ICollection(Of System.Net.Http.Headers.RangeItemHeaderValue)\n  name.vb: ICollection(Of RangeItemHeaderValue)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Net.Http.Headers.RangeItemHeaderValue\n    name: RangeItemHeaderValue\n    fullName: System.Net.Http.Headers.RangeItemHeaderValue\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Net.Http.Headers.RangeItemHeaderValue\n    name: RangeItemHeaderValue\n    fullName: System.Net.Http.Headers.RangeItemHeaderValue\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.ICollection{System.Net.Http.Headers.RangeItemHeaderValue}\n  nameWithType: ICollection<RangeItemHeaderValue>\n  nameWithType.vb: ICollection(Of RangeItemHeaderValue)\n- uid: System.Collections.Generic.ICollection`1\n  isExternal: false\n  name: ICollection<T>\n  fullName: System.Collections.Generic.ICollection<T>\n  fullname.vb: System.Collections.Generic.ICollection(Of T)\n  name.vb: ICollection(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.ICollection`1\n  nameWithType: ICollection<T>\n  nameWithType.vb: ICollection(Of T)\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n  nameWithType: System.Collections.Generic\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Net.Http.Headers.RangeHeaderValue\n  parent: System.Net.Http.Headers\n  isExternal: false\n  name: RangeHeaderValue\n  fullName: System.Net.Http.Headers.RangeHeaderValue\n  commentId: T:System.Net.Http.Headers.RangeHeaderValue\n  nameWithType: RangeHeaderValue\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n"}