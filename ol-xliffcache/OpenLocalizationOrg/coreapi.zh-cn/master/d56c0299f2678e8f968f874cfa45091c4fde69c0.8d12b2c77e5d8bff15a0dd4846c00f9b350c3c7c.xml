{"nodes":[{"pos":[946,963],"content":"XmlReaderSettings","needQuote":true,"nodes":[{"content":"XmlReaderSettings","pos":[0,17]}]},{"pos":[2422,2441],"content":"XmlReaderSettings()","needQuote":true,"nodes":[{"content":"XmlReaderSettings()","pos":[0,19]}]},{"pos":[3572,3577],"content":"Async","needQuote":true,"nodes":[{"content":"Async","pos":[0,5]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if asynchronous methods can be used; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[4421,4527],"source":"\\n<p>\\n<strong>true</strong> if asynchronous methods can be used; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[4851,4866],"content":"CheckCharacters","needQuote":true,"nodes":[{"content":"CheckCharacters","pos":[0,15]}]},{"pos":[6447,6457],"content":"CloseInput","needQuote":true,"nodes":[{"content":"CloseInput","pos":[0,10]}]},{"pos":[7850,7866],"content":"ConformanceLevel","needQuote":true,"nodes":[{"content":"ConformanceLevel","pos":[0,16]}]},{"pos":[9368,9381],"content":"DtdProcessing","needQuote":true,"nodes":[{"content":"DtdProcessing","pos":[0,13]}]},{"pos":[10620,10634],"content":"IgnoreComments","needQuote":true,"nodes":[{"content":"IgnoreComments","pos":[0,14]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to ignore comments; otherwise &lt;strong&gt;false&lt;/strong&gt;.","pos":[11332,11414],"source":"\\n<p>\\n<strong>true</strong> to ignore comments; otherwise <strong>false</strong>."},{"content":"The default is &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[11415,11459],"source":" The default is <strong>false</strong>.</p>\\n"},{"pos":[11955,11983],"content":"IgnoreProcessingInstructions","needQuote":true,"nodes":[{"content":"IgnoreProcessingInstructions","pos":[0,28]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to ignore processing instructions; otherwise &lt;strong&gt;false&lt;/strong&gt;.","pos":[12752,12849],"source":"\\n<p>\\n<strong>true</strong> to ignore processing instructions; otherwise <strong>false</strong>."},{"content":"The default is &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12850,12894],"source":" The default is <strong>false</strong>.</p>\\n"},{"pos":[13368,13384],"content":"IgnoreWhitespace","needQuote":true,"nodes":[{"content":"IgnoreWhitespace","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to ignore white space; otherwise &lt;strong&gt;false&lt;/strong&gt;.","pos":[14107,14192],"source":"\\n<p>\\n<strong>true</strong> to ignore white space; otherwise <strong>false</strong>."},{"content":"The default is &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[14193,14237],"source":" The default is <strong>false</strong>.</p>\\n"},{"pos":[14699,14715],"content":"LineNumberOffset","needQuote":true,"nodes":[{"content":"LineNumberOffset","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The line number offset.","pos":[15486,15514],"source":"\\n<p>The line number offset."},{"content":"The default is 0.&lt;/p&gt;\\n","pos":[15515,15538],"source":" The default is 0.</p>\\n"},{"pos":[16006,16024],"content":"LinePositionOffset","needQuote":true,"nodes":[{"content":"LinePositionOffset","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The line position offset.","pos":[16805,16835],"source":"\\n<p>The line position offset."},{"content":"The default is 0.&lt;/p&gt;\\n","pos":[16836,16859],"source":" The default is 0.</p>\\n"},{"pos":[17350,17375],"content":"MaxCharactersFromEntities","needQuote":true,"nodes":[{"content":"MaxCharactersFromEntities","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The maximum allowable number of characters from expanded entities.","pos":[18178,18249],"source":"\\n<p>The maximum allowable number of characters from expanded entities."},{"content":"The default is 0.&lt;/p&gt;\\n","pos":[18250,18273],"source":" The default is 0.</p>\\n"},{"pos":[18641,18664],"content":"MaxCharactersInDocument","needQuote":true,"nodes":[{"content":"MaxCharactersInDocument","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The maximum allowable number of characters in an XML document.","pos":[19554,19621],"source":"\\n<p>The maximum allowable number of characters in an XML document."},{"content":"The default is 0.&lt;/p&gt;\\n","pos":[19622,19645],"source":" The default is 0.</p>\\n"},{"pos":[19969,19978],"content":"NameTable","needQuote":true,"nodes":[{"content":"NameTable","pos":[0,9]}]},{"pos":[21699,21706],"content":"Clone()","needQuote":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[23026,23033],"content":"Reset()","needQuote":true,"nodes":[{"content":"Reset()","pos":[0,7]}]},{"pos":[23946,23956],"content":"System.Xml","needQuote":true,"nodes":[{"content":"System.Xml","pos":[0,10]}]},{"pos":[24099,24105],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24265,24275],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[24370,24378],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[24447,24448],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24475,24476],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24546,24554],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[24623,24624],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24651,24652],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24835,24849],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[24968,24974],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25041,25042],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25092,25098],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25158,25159],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25242,25248],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25315,25316],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25366,25372],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25432,25433],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25647,25669],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[25817,25823],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25890,25891],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25941,25947],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26008,26009]},{"pos":[26064,26070],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26130,26131],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26228,26234],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26301,26302],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26352,26358],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26419,26420]},{"pos":[26475,26481],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26541,26542],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26787,26818],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[26984,26999],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[27075,27076],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27126,27132],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27193,27194]},{"pos":[27249,27255],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27315,27316],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27422,27437],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[27513,27514],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27564,27570],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27631,27632]},{"pos":[27687,27693],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27753,27754],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27984,27997],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[28098,28109],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[28181,28182],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28209,28210],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28283,28294],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[28366,28367],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28394,28395],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28570,28579],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[28672,28679],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[28747,28748],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28775,28776],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28845,28852],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[28920,28921],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28948,28949],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29124,29141],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[29250,29265],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[29341,29342],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29369,29370],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29447,29462],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[29538,29539],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29566,29567],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29712,29718],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[29850,29857],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[30023,30039],"content":"ConformanceLevel","needQuote":true,"nodes":[{"content":"ConformanceLevel","pos":[0,16]}]},{"pos":[30237,30250],"content":"DtdProcessing","needQuote":true,"nodes":[{"content":"DtdProcessing","pos":[0,13]}]},{"pos":[30423,30428],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[30569,30574],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[30730,30742],"content":"XmlNameTable","needQuote":true,"nodes":[{"content":"XmlNameTable","pos":[0,12]}]},{"pos":[30932,30949],"content":"XmlReaderSettings","needQuote":true,"nodes":[{"content":"XmlReaderSettings","pos":[0,17]}]}],"content":"items:\n- uid: System.Xml.XmlReaderSettings\n  commentId: T:System.Xml.XmlReaderSettings\n  id: XmlReaderSettings\n  parent: System.Xml\n  children:\n  - System.Xml.XmlReaderSettings.#ctor\n  - System.Xml.XmlReaderSettings.Async\n  - System.Xml.XmlReaderSettings.CheckCharacters\n  - System.Xml.XmlReaderSettings.Clone\n  - System.Xml.XmlReaderSettings.CloseInput\n  - System.Xml.XmlReaderSettings.ConformanceLevel\n  - System.Xml.XmlReaderSettings.DtdProcessing\n  - System.Xml.XmlReaderSettings.IgnoreComments\n  - System.Xml.XmlReaderSettings.IgnoreProcessingInstructions\n  - System.Xml.XmlReaderSettings.IgnoreWhitespace\n  - System.Xml.XmlReaderSettings.LineNumberOffset\n  - System.Xml.XmlReaderSettings.LinePositionOffset\n  - System.Xml.XmlReaderSettings.MaxCharactersFromEntities\n  - System.Xml.XmlReaderSettings.MaxCharactersInDocument\n  - System.Xml.XmlReaderSettings.NameTable\n  - System.Xml.XmlReaderSettings.Reset\n  langs:\n  - csharp\n  - vb\n  name: XmlReaderSettings\n  fullName: System.Xml.XmlReaderSettings\n  type: Class\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XmlReaderSettings\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 353\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Specifies a set of features to support on the <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object created by the <xref href=\\\"System.Xml.XmlReader.Create(System.IO.Stream)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: public sealed class XmlReaderSettings\n    content.vb: Public NotInheritable Class XmlReaderSettings\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: XmlReaderSettings\n- uid: System.Xml.XmlReaderSettings.#ctor\n  commentId: M:System.Xml.XmlReaderSettings.#ctor\n  id: '#ctor'\n  parent: System.Xml.XmlReaderSettings\n  langs:\n  - csharp\n  - vb\n  name: XmlReaderSettings()\n  fullName: System.Xml.XmlReaderSettings.XmlReaderSettings()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 355\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Xml.XmlReaderSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public XmlReaderSettings()\n    content.vb: Public Sub New\n  seealso:\n  - type: System.Xml.XmlReader\n    commentId: T:System.Xml.XmlReader\n  - type: System.Xml.XmlReader.Create(System.String)\n    commentId: M:System.Xml.XmlReader.Create(System.String)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlReaderSettings.XmlReaderSettings()\n- uid: System.Xml.XmlReaderSettings.Async\n  commentId: P:System.Xml.XmlReaderSettings.Async\n  id: Async\n  parent: System.Xml.XmlReaderSettings\n  langs:\n  - csharp\n  - vb\n  name: Async\n  fullName: System.Xml.XmlReaderSettings.Async\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Async\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 356\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets whether asynchronous <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> methods can be used on a particular <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public bool Async { get; set; }\n    content.vb: Public Property Async As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if asynchronous methods can be used; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: XmlReaderSettings.Async\n- uid: System.Xml.XmlReaderSettings.CheckCharacters\n  commentId: P:System.Xml.XmlReaderSettings.CheckCharacters\n  id: CheckCharacters\n  parent: System.Xml.XmlReaderSettings\n  langs:\n  - csharp\n  - vb\n  name: CheckCharacters\n  fullName: System.Xml.XmlReaderSettings.CheckCharacters\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CheckCharacters\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 357\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets a value indicating whether to do character checking.</p>\\n\"\n  syntax:\n    content: public bool CheckCharacters { get; set; }\n    content.vb: Public Property CheckCharacters As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to do character checking; otherwise <strong>false</strong>. The default is <strong>true</strong>.</p>\\n<p>If the <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is processing text data, it always checks that the XML names and text content are valid, regardless of the property setting. Setting <xref href=\\\"System.Xml.XmlReaderSettings.CheckCharacters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to <strong>false</strong> turns off character checking for character entity references.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: XmlReaderSettings.CheckCharacters\n- uid: System.Xml.XmlReaderSettings.CloseInput\n  commentId: P:System.Xml.XmlReaderSettings.CloseInput\n  id: CloseInput\n  parent: System.Xml.XmlReaderSettings\n  langs:\n  - csharp\n  - vb\n  name: CloseInput\n  fullName: System.Xml.XmlReaderSettings.CloseInput\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CloseInput\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 358\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets a value indicating whether the underlying stream or <xref href=\\\"System.IO.TextReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> should be closed when the reader is closed.</p>\\n\"\n  syntax:\n    content: public bool CloseInput { get; set; }\n    content.vb: Public Property CloseInput As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to close the underlying stream or <xref href=\\\"System.IO.TextReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> when the reader is closed; otherwise <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: XmlReaderSettings.CloseInput\n- uid: System.Xml.XmlReaderSettings.ConformanceLevel\n  commentId: P:System.Xml.XmlReaderSettings.ConformanceLevel\n  id: ConformanceLevel\n  parent: System.Xml.XmlReaderSettings\n  langs:\n  - csharp\n  - vb\n  name: ConformanceLevel\n  fullName: System.Xml.XmlReaderSettings.ConformanceLevel\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConformanceLevel\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 359\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets the level of conformance which the <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will comply.</p>\\n\"\n  syntax:\n    content: public ConformanceLevel ConformanceLevel { get; set; }\n    content.vb: Public Property ConformanceLevel As ConformanceLevel\n    parameters: []\n    return:\n      type: System.Xml.ConformanceLevel\n      description: \"\\n<p>One of the enumeration values that specifies the level of conformance that the XML reader will enforce. The default is <xref href=\\\"System.Xml.ConformanceLevel.Document\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Xml.XmlReader.Create(System.String)\n    commentId: M:System.Xml.XmlReader.Create(System.String)\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: XmlReaderSettings.ConformanceLevel\n- uid: System.Xml.XmlReaderSettings.DtdProcessing\n  commentId: P:System.Xml.XmlReaderSettings.DtdProcessing\n  id: DtdProcessing\n  parent: System.Xml.XmlReaderSettings\n  langs:\n  - csharp\n  - vb\n  name: DtdProcessing\n  fullName: System.Xml.XmlReaderSettings.DtdProcessing\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DtdProcessing\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 360\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets a value that determines the processing of DTDs.</p>\\n\"\n  syntax:\n    content: public DtdProcessing DtdProcessing { get; set; }\n    content.vb: Public Property DtdProcessing As DtdProcessing\n    parameters: []\n    return:\n      type: System.Xml.DtdProcessing\n      description: \"\\n<p>One of the enumeration values that determines the processing of DTDs. The default is <xref href=\\\"System.Xml.DtdProcessing.Prohibit\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: XmlReaderSettings.DtdProcessing\n- uid: System.Xml.XmlReaderSettings.IgnoreComments\n  commentId: P:System.Xml.XmlReaderSettings.IgnoreComments\n  id: IgnoreComments\n  parent: System.Xml.XmlReaderSettings\n  langs:\n  - csharp\n  - vb\n  name: IgnoreComments\n  fullName: System.Xml.XmlReaderSettings.IgnoreComments\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IgnoreComments\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 361\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets a value indicating whether to ignore comments.</p>\\n\"\n  syntax:\n    content: public bool IgnoreComments { get; set; }\n    content.vb: Public Property IgnoreComments As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to ignore comments; otherwise <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Xml.XmlReader.Create(System.String)\n    commentId: M:System.Xml.XmlReader.Create(System.String)\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: XmlReaderSettings.IgnoreComments\n- uid: System.Xml.XmlReaderSettings.IgnoreProcessingInstructions\n  commentId: P:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions\n  id: IgnoreProcessingInstructions\n  parent: System.Xml.XmlReaderSettings\n  langs:\n  - csharp\n  - vb\n  name: IgnoreProcessingInstructions\n  fullName: System.Xml.XmlReaderSettings.IgnoreProcessingInstructions\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IgnoreProcessingInstructions\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 362\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets a value indicating whether to ignore processing instructions.</p>\\n\"\n  syntax:\n    content: public bool IgnoreProcessingInstructions { get; set; }\n    content.vb: Public Property IgnoreProcessingInstructions As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to ignore processing instructions; otherwise <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Xml.XmlReader.Create(System.String)\n    commentId: M:System.Xml.XmlReader.Create(System.String)\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: XmlReaderSettings.IgnoreProcessingInstructions\n- uid: System.Xml.XmlReaderSettings.IgnoreWhitespace\n  commentId: P:System.Xml.XmlReaderSettings.IgnoreWhitespace\n  id: IgnoreWhitespace\n  parent: System.Xml.XmlReaderSettings\n  langs:\n  - csharp\n  - vb\n  name: IgnoreWhitespace\n  fullName: System.Xml.XmlReaderSettings.IgnoreWhitespace\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IgnoreWhitespace\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 363\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets a value indicating whether to ignore insignificant white space.</p>\\n\"\n  syntax:\n    content: public bool IgnoreWhitespace { get; set; }\n    content.vb: Public Property IgnoreWhitespace As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to ignore white space; otherwise <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Xml.XmlReader.Create(System.String)\n    commentId: M:System.Xml.XmlReader.Create(System.String)\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: XmlReaderSettings.IgnoreWhitespace\n- uid: System.Xml.XmlReaderSettings.LineNumberOffset\n  commentId: P:System.Xml.XmlReaderSettings.LineNumberOffset\n  id: LineNumberOffset\n  parent: System.Xml.XmlReaderSettings\n  langs:\n  - csharp\n  - vb\n  name: LineNumberOffset\n  fullName: System.Xml.XmlReaderSettings.LineNumberOffset\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LineNumberOffset\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 364\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets line number offset of the <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public int LineNumberOffset { get; set; }\n    content.vb: Public Property LineNumberOffset As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The line number offset. The default is 0.</p>\\n\"\n  seealso:\n  - type: System.Xml.XmlReader.Create(System.String)\n    commentId: M:System.Xml.XmlReader.Create(System.String)\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: XmlReaderSettings.LineNumberOffset\n- uid: System.Xml.XmlReaderSettings.LinePositionOffset\n  commentId: P:System.Xml.XmlReaderSettings.LinePositionOffset\n  id: LinePositionOffset\n  parent: System.Xml.XmlReaderSettings\n  langs:\n  - csharp\n  - vb\n  name: LinePositionOffset\n  fullName: System.Xml.XmlReaderSettings.LinePositionOffset\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LinePositionOffset\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 365\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets line position offset of the <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public int LinePositionOffset { get; set; }\n    content.vb: Public Property LinePositionOffset As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The line position offset. The default is 0.</p>\\n\"\n  seealso:\n  - type: System.Xml.XmlReader.Create(System.String)\n    commentId: M:System.Xml.XmlReader.Create(System.String)\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: XmlReaderSettings.LinePositionOffset\n- uid: System.Xml.XmlReaderSettings.MaxCharactersFromEntities\n  commentId: P:System.Xml.XmlReaderSettings.MaxCharactersFromEntities\n  id: MaxCharactersFromEntities\n  parent: System.Xml.XmlReaderSettings\n  langs:\n  - csharp\n  - vb\n  name: MaxCharactersFromEntities\n  fullName: System.Xml.XmlReaderSettings.MaxCharactersFromEntities\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MaxCharactersFromEntities\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 366\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets a value indicating the maximum allowable number of characters in a document that result from expanding entities.</p>\\n\"\n  syntax:\n    content: public long MaxCharactersFromEntities { get; set; }\n    content.vb: Public Property MaxCharactersFromEntities As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>The maximum allowable number of characters from expanded entities. The default is 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: XmlReaderSettings.MaxCharactersFromEntities\n- uid: System.Xml.XmlReaderSettings.MaxCharactersInDocument\n  commentId: P:System.Xml.XmlReaderSettings.MaxCharactersInDocument\n  id: MaxCharactersInDocument\n  parent: System.Xml.XmlReaderSettings\n  langs:\n  - csharp\n  - vb\n  name: MaxCharactersInDocument\n  fullName: System.Xml.XmlReaderSettings.MaxCharactersInDocument\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MaxCharactersInDocument\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 367\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets a value indicating the maximum allowable number of characters in an XML document. A zero (0) value means no limits on the size of the XML document. A non-zero value specifies the maximum size, in characters.</p>\\n\"\n  syntax:\n    content: public long MaxCharactersInDocument { get; set; }\n    content.vb: Public Property MaxCharactersInDocument As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>The maximum allowable number of characters in an XML document. The default is 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: XmlReaderSettings.MaxCharactersInDocument\n- uid: System.Xml.XmlReaderSettings.NameTable\n  commentId: P:System.Xml.XmlReaderSettings.NameTable\n  id: NameTable\n  parent: System.Xml.XmlReaderSettings\n  langs:\n  - csharp\n  - vb\n  name: NameTable\n  fullName: System.Xml.XmlReaderSettings.NameTable\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NameTable\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 368\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets the <xref href=\\\"System.Xml.XmlNameTable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> used for atomized string comparisons.</p>\\n\"\n  syntax:\n    content: public XmlNameTable NameTable { get; set; }\n    content.vb: Public Property NameTable As XmlNameTable\n    parameters: []\n    return:\n      type: System.Xml.XmlNameTable\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlNameTable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that stores all the atomized strings used by all <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances created using this <xref href=\\\"System.Xml.XmlReaderSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n<p>The default is <strong>null</strong>. The created <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance will use a new empty <xref href=\\\"System.Xml.NameTable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if this value is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: XmlReaderSettings.NameTable\n- uid: System.Xml.XmlReaderSettings.Clone\n  commentId: M:System.Xml.XmlReaderSettings.Clone\n  id: Clone\n  parent: System.Xml.XmlReaderSettings\n  langs:\n  - csharp\n  - vb\n  name: Clone()\n  fullName: System.Xml.XmlReaderSettings.Clone()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Clone\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 369\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Creates a copy of the <xref href=\\\"System.Xml.XmlReaderSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public XmlReaderSettings Clone()\n    content.vb: Public Function Clone As XmlReaderSettings\n    return:\n      type: System.Xml.XmlReaderSettings\n      description: \"\\n<p>The cloned <xref href=\\\"System.Xml.XmlReaderSettings\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.Xml.XmlReader\n    commentId: T:System.Xml.XmlReader\n  - type: System.Xml.XmlReader.Create(System.String)\n    commentId: M:System.Xml.XmlReader.Create(System.String)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlReaderSettings.Clone()\n- uid: System.Xml.XmlReaderSettings.Reset\n  commentId: M:System.Xml.XmlReaderSettings.Reset\n  id: Reset\n  parent: System.Xml.XmlReaderSettings\n  langs:\n  - csharp\n  - vb\n  name: Reset()\n  fullName: System.Xml.XmlReaderSettings.Reset()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Reset\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 370\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Resets the members of the settings class to their default values.</p>\\n\"\n  syntax:\n    content: public void Reset()\n    content.vb: Public Sub Reset\n  seealso:\n  - type: System.Xml.XmlReader\n    commentId: T:System.Xml.XmlReader\n  - type: System.Xml.XmlReader.Create(System.String)\n    commentId: M:System.Xml.XmlReader.Create(System.String)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlReaderSettings.Reset()\nreferences:\n- uid: System.Xml\n  isExternal: false\n  name: System.Xml\n  fullName: System.Xml\n  commentId: N:System.Xml\n  nameWithType: System.Xml\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Xml.ConformanceLevel\n  parent: System.Xml\n  isExternal: false\n  name: ConformanceLevel\n  fullName: System.Xml.ConformanceLevel\n  commentId: T:System.Xml.ConformanceLevel\n  nameWithType: ConformanceLevel\n- uid: System.Xml.DtdProcessing\n  parent: System.Xml\n  isExternal: false\n  name: DtdProcessing\n  fullName: System.Xml.DtdProcessing\n  commentId: T:System.Xml.DtdProcessing\n  nameWithType: DtdProcessing\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  commentId: T:System.Int64\n  nameWithType: Int64\n- uid: System.Xml.XmlNameTable\n  parent: System.Xml\n  isExternal: false\n  name: XmlNameTable\n  fullName: System.Xml.XmlNameTable\n  commentId: T:System.Xml.XmlNameTable\n  nameWithType: XmlNameTable\n- uid: System.Xml.XmlReaderSettings\n  parent: System.Xml\n  isExternal: false\n  name: XmlReaderSettings\n  fullName: System.Xml.XmlReaderSettings\n  commentId: T:System.Xml.XmlReaderSettings\n  nameWithType: XmlReaderSettings\n"}