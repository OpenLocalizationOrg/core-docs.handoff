{"nodes":[{"pos":[1358,1374],"content":"MethodAttributes","needQuote":true,"nodes":[{"content":"MethodAttributes","pos":[0,16]}]},{"pos":[2547,2555],"content":"Abstract","needQuote":true,"nodes":[{"content":"Abstract","pos":[0,8]}]},{"pos":[3487,3495],"content":"Assembly","needQuote":true,"nodes":[{"content":"Assembly","pos":[0,8]}]},{"pos":[4458,4479],"content":"CheckAccessOnOverride","needQuote":true,"nodes":[{"content":"CheckAccessOnOverride","pos":[0,21]}]},{"pos":[5472,5483],"content":"FamANDAssem","needQuote":true,"nodes":[{"content":"FamANDAssem","pos":[0,11]}]},{"pos":[6460,6466],"content":"Family","needQuote":true,"nodes":[{"content":"Family","pos":[0,6]}]},{"pos":[7412,7422],"content":"FamORAssem","needQuote":true,"nodes":[{"content":"FamORAssem","pos":[0,10]}]},{"pos":[8384,8389],"content":"Final","needQuote":true,"nodes":[{"content":"Final","pos":[0,5]}]},{"pos":[9288,9299],"content":"HasSecurity","needQuote":true,"nodes":[{"content":"HasSecurity","pos":[0,11]}]},{"pos":[10266,10275],"content":"HideBySig","needQuote":true,"nodes":[{"content":"HideBySig","pos":[0,9]}]},{"pos":[11238,11254],"content":"MemberAccessMask","needQuote":true,"nodes":[{"content":"MemberAccessMask","pos":[0,16]}]},{"pos":[12173,12180],"content":"NewSlot","needQuote":true,"nodes":[{"content":"NewSlot","pos":[0,7]}]},{"pos":[13104,13115],"content":"PinvokeImpl","needQuote":true,"nodes":[{"content":"PinvokeImpl","pos":[0,11]}]},{"pos":[14082,14089],"content":"Private","needQuote":true,"nodes":[{"content":"Private","pos":[0,7]}]},{"pos":[15017,15029],"content":"PrivateScope","needQuote":true,"nodes":[{"content":"PrivateScope","pos":[0,12]}]},{"pos":[15940,15946],"content":"Public","needQuote":true,"nodes":[{"content":"Public","pos":[0,6]}]},{"pos":[16904,16920],"content":"RequireSecObject","needQuote":true,"nodes":[{"content":"RequireSecObject","pos":[0,16]}]},{"pos":[17921,17930],"content":"ReuseSlot","needQuote":true,"nodes":[{"content":"ReuseSlot","pos":[0,9]}]},{"pos":[18901,18914],"content":"RTSpecialName","needQuote":true,"nodes":[{"content":"RTSpecialName","pos":[0,13]}]},{"pos":[19868,19879],"content":"SpecialName","needQuote":true,"nodes":[{"content":"SpecialName","pos":[0,11]}]},{"pos":[20826,20832],"content":"Static","needQuote":true,"nodes":[{"content":"Static","pos":[0,6]}]},{"pos":[21788,21803],"content":"UnmanagedExport","needQuote":true,"nodes":[{"content":"UnmanagedExport","pos":[0,15]}]},{"pos":[22755,22762],"content":"Virtual","needQuote":true,"nodes":[{"content":"Virtual","pos":[0,7]}]},{"pos":[23674,23690],"content":"VtableLayoutMask","needQuote":true,"nodes":[{"content":"VtableLayoutMask","pos":[0,16]}]},{"pos":[24466,24483],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[24679,24695],"content":"MethodAttributes","needQuote":true,"nodes":[{"content":"MethodAttributes","pos":[0,16]}]}],"content":"items:\n- uid: System.Reflection.MethodAttributes\n  commentId: T:System.Reflection.MethodAttributes\n  id: MethodAttributes\n  parent: System.Reflection\n  children:\n  - System.Reflection.MethodAttributes.Abstract\n  - System.Reflection.MethodAttributes.Assembly\n  - System.Reflection.MethodAttributes.CheckAccessOnOverride\n  - System.Reflection.MethodAttributes.FamANDAssem\n  - System.Reflection.MethodAttributes.Family\n  - System.Reflection.MethodAttributes.FamORAssem\n  - System.Reflection.MethodAttributes.Final\n  - System.Reflection.MethodAttributes.HasSecurity\n  - System.Reflection.MethodAttributes.HideBySig\n  - System.Reflection.MethodAttributes.MemberAccessMask\n  - System.Reflection.MethodAttributes.NewSlot\n  - System.Reflection.MethodAttributes.PinvokeImpl\n  - System.Reflection.MethodAttributes.Private\n  - System.Reflection.MethodAttributes.PrivateScope\n  - System.Reflection.MethodAttributes.Public\n  - System.Reflection.MethodAttributes.RequireSecObject\n  - System.Reflection.MethodAttributes.ReuseSlot\n  - System.Reflection.MethodAttributes.RTSpecialName\n  - System.Reflection.MethodAttributes.SpecialName\n  - System.Reflection.MethodAttributes.Static\n  - System.Reflection.MethodAttributes.UnmanagedExport\n  - System.Reflection.MethodAttributes.Virtual\n  - System.Reflection.MethodAttributes.VtableLayoutMask\n  langs:\n  - csharp\n  - vb\n  name: MethodAttributes\n  fullName: System.Reflection.MethodAttributes\n  type: Enum\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MethodAttributes\n    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n    startLine: 10\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies flags for method attributes. These flags are defined in the corhdr.h file.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [Flags]\n\n      [ComVisible(true)]\n\n      public enum MethodAttributes\n    content.vb: >-\n      <Serializable>\n\n      <Flags>\n\n      <ComVisible(True)>\n\n      Public Enum MethodAttributes\n  attributes:\n  - type: System.FlagsAttribute\n    ctor: System.FlagsAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - enum\n  modifiers.vb:\n  - Public\n  - Enum\n  nameWithType: MethodAttributes\n- uid: System.Reflection.MethodAttributes.Abstract\n  commentId: F:System.Reflection.MethodAttributes.Abstract\n  id: Abstract\n  parent: System.Reflection.MethodAttributes\n  langs:\n  - csharp\n  - vb\n  name: Abstract\n  fullName: System.Reflection.MethodAttributes.Abstract\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Abstract\n    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n    startLine: 42\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Indicates that the class does not provide an implementation of this method.</p>\\n\"\n  syntax:\n    content: Abstract = 1024\n    return:\n      type: System.Reflection.MethodAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodAttributes.Abstract\n- uid: System.Reflection.MethodAttributes.Assembly\n  commentId: F:System.Reflection.MethodAttributes.Assembly\n  id: Assembly\n  parent: System.Reflection.MethodAttributes\n  langs:\n  - csharp\n  - vb\n  name: Assembly\n  fullName: System.Reflection.MethodAttributes.Assembly\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Assembly\n    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n    startLine: 22\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Indicates that the method is accessible to any class of this assembly.</p>\\n\"\n  syntax:\n    content: Assembly = 3\n    return:\n      type: System.Reflection.MethodAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodAttributes.Assembly\n- uid: System.Reflection.MethodAttributes.CheckAccessOnOverride\n  commentId: F:System.Reflection.MethodAttributes.CheckAccessOnOverride\n  id: CheckAccessOnOverride\n  parent: System.Reflection.MethodAttributes\n  langs:\n  - csharp\n  - vb\n  name: CheckAccessOnOverride\n  fullName: System.Reflection.MethodAttributes.CheckAccessOnOverride\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CheckAccessOnOverride\n    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n    startLine: 33\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Indicates that the method can only be overridden when it is also accessible.</p>\\n\"\n  syntax:\n    content: CheckAccessOnOverride = 512\n    return:\n      type: System.Reflection.MethodAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodAttributes.CheckAccessOnOverride\n- uid: System.Reflection.MethodAttributes.FamANDAssem\n  commentId: F:System.Reflection.MethodAttributes.FamANDAssem\n  id: FamANDAssem\n  parent: System.Reflection.MethodAttributes\n  langs:\n  - csharp\n  - vb\n  name: FamANDAssem\n  fullName: System.Reflection.MethodAttributes.FamANDAssem\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FamANDAssem\n    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n    startLine: 21\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Indicates that the method is accessible to members of this type and its derived types that are in this assembly only.</p>\\n\"\n  syntax:\n    content: FamANDAssem = 2\n    return:\n      type: System.Reflection.MethodAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodAttributes.FamANDAssem\n- uid: System.Reflection.MethodAttributes.Family\n  commentId: F:System.Reflection.MethodAttributes.Family\n  id: Family\n  parent: System.Reflection.MethodAttributes\n  langs:\n  - csharp\n  - vb\n  name: Family\n  fullName: System.Reflection.MethodAttributes.Family\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Family\n    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n    startLine: 23\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Indicates that the method is accessible only to members of this class and its derived classes.</p>\\n\"\n  syntax:\n    content: Family = 4\n    return:\n      type: System.Reflection.MethodAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodAttributes.Family\n- uid: System.Reflection.MethodAttributes.FamORAssem\n  commentId: F:System.Reflection.MethodAttributes.FamORAssem\n  id: FamORAssem\n  parent: System.Reflection.MethodAttributes\n  langs:\n  - csharp\n  - vb\n  name: FamORAssem\n  fullName: System.Reflection.MethodAttributes.FamORAssem\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FamORAssem\n    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n    startLine: 24\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Indicates that the method is accessible to derived classes anywhere, as well as to any class in the assembly.</p>\\n\"\n  syntax:\n    content: FamORAssem = 5\n    return:\n      type: System.Reflection.MethodAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodAttributes.FamORAssem\n- uid: System.Reflection.MethodAttributes.Final\n  commentId: F:System.Reflection.MethodAttributes.Final\n  id: Final\n  parent: System.Reflection.MethodAttributes\n  langs:\n  - csharp\n  - vb\n  name: Final\n  fullName: System.Reflection.MethodAttributes.Final\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Final\n    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n    startLine: 30\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Indicates that the method cannot be overridden.</p>\\n\"\n  syntax:\n    content: Final = 32\n    return:\n      type: System.Reflection.MethodAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodAttributes.Final\n- uid: System.Reflection.MethodAttributes.HasSecurity\n  commentId: F:System.Reflection.MethodAttributes.HasSecurity\n  id: HasSecurity\n  parent: System.Reflection.MethodAttributes\n  langs:\n  - csharp\n  - vb\n  name: HasSecurity\n  fullName: System.Reflection.MethodAttributes.HasSecurity\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: HasSecurity\n    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n    startLine: 52\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Indicates that the method has security associated with it. Reserved flag for runtime use only.</p>\\n\"\n  syntax:\n    content: HasSecurity = 16384\n    return:\n      type: System.Reflection.MethodAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodAttributes.HasSecurity\n- uid: System.Reflection.MethodAttributes.HideBySig\n  commentId: F:System.Reflection.MethodAttributes.HideBySig\n  id: HideBySig\n  parent: System.Reflection.MethodAttributes\n  langs:\n  - csharp\n  - vb\n  name: HideBySig\n  fullName: System.Reflection.MethodAttributes.HideBySig\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: HideBySig\n    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n    startLine: 32\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Indicates that the method hides by name and signature; otherwise, by name only.</p>\\n\"\n  syntax:\n    content: HideBySig = 128\n    return:\n      type: System.Reflection.MethodAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodAttributes.HideBySig\n- uid: System.Reflection.MethodAttributes.MemberAccessMask\n  commentId: F:System.Reflection.MethodAttributes.MemberAccessMask\n  id: MemberAccessMask\n  parent: System.Reflection.MethodAttributes\n  langs:\n  - csharp\n  - vb\n  name: MemberAccessMask\n  fullName: System.Reflection.MethodAttributes.MemberAccessMask\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MemberAccessMask\n    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n    startLine: 18\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves accessibility information.</p>\\n\"\n  syntax:\n    content: MemberAccessMask = 7\n    return:\n      type: System.Reflection.MethodAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodAttributes.MemberAccessMask\n- uid: System.Reflection.MethodAttributes.NewSlot\n  commentId: F:System.Reflection.MethodAttributes.NewSlot\n  id: NewSlot\n  parent: System.Reflection.MethodAttributes\n  langs:\n  - csharp\n  - vb\n  name: NewSlot\n  fullName: System.Reflection.MethodAttributes.NewSlot\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: NewSlot\n    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n    startLine: 38\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Indicates that the method always gets a new slot in the vtable.</p>\\n\"\n  syntax:\n    content: NewSlot = 256\n    return:\n      type: System.Reflection.MethodAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodAttributes.NewSlot\n- uid: System.Reflection.MethodAttributes.PinvokeImpl\n  commentId: F:System.Reflection.MethodAttributes.PinvokeImpl\n  id: PinvokeImpl\n  parent: System.Reflection.MethodAttributes\n  langs:\n  - csharp\n  - vb\n  name: PinvokeImpl\n  fullName: System.Reflection.MethodAttributes.PinvokeImpl\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PinvokeImpl\n    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n    startLine: 46\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Indicates that the method implementation is forwarded through PInvoke (Platform Invocation Services).</p>\\n\"\n  syntax:\n    content: PinvokeImpl = 8192\n    return:\n      type: System.Reflection.MethodAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodAttributes.PinvokeImpl\n- uid: System.Reflection.MethodAttributes.Private\n  commentId: F:System.Reflection.MethodAttributes.Private\n  id: Private\n  parent: System.Reflection.MethodAttributes\n  langs:\n  - csharp\n  - vb\n  name: Private\n  fullName: System.Reflection.MethodAttributes.Private\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Private\n    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n    startLine: 20\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Indicates that the method is accessible only to the current class.</p>\\n\"\n  syntax:\n    content: Private = 1\n    return:\n      type: System.Reflection.MethodAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodAttributes.Private\n- uid: System.Reflection.MethodAttributes.PrivateScope\n  commentId: F:System.Reflection.MethodAttributes.PrivateScope\n  id: PrivateScope\n  parent: System.Reflection.MethodAttributes\n  langs:\n  - csharp\n  - vb\n  name: PrivateScope\n  fullName: System.Reflection.MethodAttributes.PrivateScope\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PrivateScope\n    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n    startLine: 19\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Indicates that the member cannot be referenced.</p>\\n\"\n  syntax:\n    content: PrivateScope = 0\n    return:\n      type: System.Reflection.MethodAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodAttributes.PrivateScope\n- uid: System.Reflection.MethodAttributes.Public\n  commentId: F:System.Reflection.MethodAttributes.Public\n  id: Public\n  parent: System.Reflection.MethodAttributes\n  langs:\n  - csharp\n  - vb\n  name: Public\n  fullName: System.Reflection.MethodAttributes.Public\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Public\n    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n    startLine: 25\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Indicates that the method is accessible to any object for which this object is in scope.</p>\\n\"\n  syntax:\n    content: Public = 6\n    return:\n      type: System.Reflection.MethodAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodAttributes.Public\n- uid: System.Reflection.MethodAttributes.RequireSecObject\n  commentId: F:System.Reflection.MethodAttributes.RequireSecObject\n  id: RequireSecObject\n  parent: System.Reflection.MethodAttributes\n  langs:\n  - csharp\n  - vb\n  name: RequireSecObject\n  fullName: System.Reflection.MethodAttributes.RequireSecObject\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RequireSecObject\n    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n    startLine: 53\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Indicates that the method calls another method containing security code. Reserved flag for runtime use only.</p>\\n\"\n  syntax:\n    content: RequireSecObject = 32768\n    return:\n      type: System.Reflection.MethodAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodAttributes.RequireSecObject\n- uid: System.Reflection.MethodAttributes.ReuseSlot\n  commentId: F:System.Reflection.MethodAttributes.ReuseSlot\n  id: ReuseSlot\n  parent: System.Reflection.MethodAttributes\n  langs:\n  - csharp\n  - vb\n  name: ReuseSlot\n  fullName: System.Reflection.MethodAttributes.ReuseSlot\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReuseSlot\n    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n    startLine: 37\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Indicates that the method will reuse an existing slot in the vtable. This is the default behavior.</p>\\n\"\n  syntax:\n    content: ReuseSlot = 0\n    return:\n      type: System.Reflection.MethodAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodAttributes.ReuseSlot\n- uid: System.Reflection.MethodAttributes.RTSpecialName\n  commentId: F:System.Reflection.MethodAttributes.RTSpecialName\n  id: RTSpecialName\n  parent: System.Reflection.MethodAttributes\n  langs:\n  - csharp\n  - vb\n  name: RTSpecialName\n  fullName: System.Reflection.MethodAttributes.RTSpecialName\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RTSpecialName\n    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n    startLine: 48\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Indicates that the common language runtime checks the name encoding.</p>\\n\"\n  syntax:\n    content: RTSpecialName = 4096\n    return:\n      type: System.Reflection.MethodAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodAttributes.RTSpecialName\n- uid: System.Reflection.MethodAttributes.SpecialName\n  commentId: F:System.Reflection.MethodAttributes.SpecialName\n  id: SpecialName\n  parent: System.Reflection.MethodAttributes\n  langs:\n  - csharp\n  - vb\n  name: SpecialName\n  fullName: System.Reflection.MethodAttributes.SpecialName\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SpecialName\n    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n    startLine: 43\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Indicates that the method is special. The name describes how this method is special.</p>\\n\"\n  syntax:\n    content: SpecialName = 2048\n    return:\n      type: System.Reflection.MethodAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodAttributes.SpecialName\n- uid: System.Reflection.MethodAttributes.Static\n  commentId: F:System.Reflection.MethodAttributes.Static\n  id: Static\n  parent: System.Reflection.MethodAttributes\n  langs:\n  - csharp\n  - vb\n  name: Static\n  fullName: System.Reflection.MethodAttributes.Static\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Static\n    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n    startLine: 29\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Indicates that the method is defined on the type; otherwise, it is defined per instance.</p>\\n\"\n  syntax:\n    content: Static = 16\n    return:\n      type: System.Reflection.MethodAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodAttributes.Static\n- uid: System.Reflection.MethodAttributes.UnmanagedExport\n  commentId: F:System.Reflection.MethodAttributes.UnmanagedExport\n  id: UnmanagedExport\n  parent: System.Reflection.MethodAttributes\n  langs:\n  - csharp\n  - vb\n  name: UnmanagedExport\n  fullName: System.Reflection.MethodAttributes.UnmanagedExport\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: UnmanagedExport\n    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n    startLine: 47\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Indicates that the managed method is exported by thunk to unmanaged code.</p>\\n\"\n  syntax:\n    content: UnmanagedExport = 8\n    return:\n      type: System.Reflection.MethodAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodAttributes.UnmanagedExport\n- uid: System.Reflection.MethodAttributes.Virtual\n  commentId: F:System.Reflection.MethodAttributes.Virtual\n  id: Virtual\n  parent: System.Reflection.MethodAttributes\n  langs:\n  - csharp\n  - vb\n  name: Virtual\n  fullName: System.Reflection.MethodAttributes.Virtual\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Virtual\n    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n    startLine: 31\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Indicates that the method is virtual.</p>\\n\"\n  syntax:\n    content: Virtual = 64\n    return:\n      type: System.Reflection.MethodAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodAttributes.Virtual\n- uid: System.Reflection.MethodAttributes.VtableLayoutMask\n  commentId: F:System.Reflection.MethodAttributes.VtableLayoutMask\n  id: VtableLayoutMask\n  parent: System.Reflection.MethodAttributes\n  langs:\n  - csharp\n  - vb\n  name: VtableLayoutMask\n  fullName: System.Reflection.MethodAttributes.VtableLayoutMask\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: VtableLayoutMask\n    path: src/mscorlib/src/System/Reflection/MethodAttributes.cs\n    startLine: 36\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Retrieves vtable attributes.</p>\\n\"\n  syntax:\n    content: VtableLayoutMask = 256\n    return:\n      type: System.Reflection.MethodAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodAttributes.VtableLayoutMask\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Reflection.MethodAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: MethodAttributes\n  fullName: System.Reflection.MethodAttributes\n  nameWithType: MethodAttributes\n  commentId: T:System.Reflection.MethodAttributes\n"}