{"nodes":[{"pos":[533,552],"content":"RuntimeMethodHandle","needQuote":true,"nodes":[{"content":"RuntimeMethodHandle","pos":[0,19]}]},{"pos":[2164,2178],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[4020,4047],"content":"Equals(RuntimeMethodHandle)","needQuote":true,"nodes":[{"content":"Equals(RuntimeMethodHandle)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;handle&lt;/em&gt; is equal to the value of this instance; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[5252,5380],"source":"\\n<p>\\n<strong>true</strong> if <em>handle</em> is equal to the value of this instance; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[5798,5811],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[6493,6538],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[7073,7123],"content":"Equality(RuntimeMethodHandle, RuntimeMethodHandle)","needQuote":true,"nodes":[{"content":"Equality(RuntimeMethodHandle, RuntimeMethodHandle)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the value of &lt;em&gt;left&lt;/em&gt; is equal to the value of &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8397,8537],"source":"\\n<p>\\n<strong>true</strong> if the value of <em>left</em> is equal to the value of <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[9067,9119],"content":"Inequality(RuntimeMethodHandle, RuntimeMethodHandle)","needQuote":true,"nodes":[{"content":"Inequality(RuntimeMethodHandle, RuntimeMethodHandle)","pos":[0,52]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the value of &lt;em&gt;left&lt;/em&gt; is unequal to the value of &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10402,10544],"source":"\\n<p>\\n<strong>true</strong> if the value of <em>left</em> is unequal to the value of <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[10769,10775],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[10928,10938],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[11039,11047],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[11098,11099],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11126,11127],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11200,11208],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[11259,11260],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11287,11288],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11491,11513],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[11661,11667],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11734,11735],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11785,11791],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11852,11853]},{"pos":[11908,11914],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11974,11975],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12072,12078],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12145,12146],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12196,12202],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12263,12264]},{"pos":[12319,12325],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12385,12386],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12631,12662],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[12828,12843],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[12919,12920],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12970,12976],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13037,13038]},{"pos":[13093,13099],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13159,13160],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13266,13281],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[13357,13358],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13408,13414],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13475,13476]},{"pos":[13531,13537],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13597,13598],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13824,13833],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[13926,13933],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[14001,14002],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14029,14030],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14099,14106],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[14174,14175],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14202,14203],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14359,14368],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[14522,14528],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14707,14721],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[14846,14852],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14901,14902],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14952,14958],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15018,15019],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15105,15111],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15160,15161],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15211,15217],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15277,15278],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15457,15464],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[15625,15644],"content":"RuntimeMethodHandle","needQuote":true,"nodes":[{"content":"RuntimeMethodHandle","pos":[0,19]}]},{"pos":[15853,15866],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[15973,15984],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[16038,16039],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16066,16067],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16143,16154],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[16208,16209],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16236,16237],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16403,16408],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]}],"content":"items:\n- uid: System.RuntimeMethodHandle\n  commentId: T:System.RuntimeMethodHandle\n  id: RuntimeMethodHandle\n  parent: System\n  children:\n  - System.RuntimeMethodHandle.Equals(System.Object)\n  - System.RuntimeMethodHandle.Equals(System.RuntimeMethodHandle)\n  - System.RuntimeMethodHandle.GetHashCode\n  - System.RuntimeMethodHandle.op_Equality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)\n  - System.RuntimeMethodHandle.op_Inequality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)\n  langs:\n  - csharp\n  - vb\n  name: RuntimeMethodHandle\n  fullName: System.RuntimeMethodHandle\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/RuntimeHandles.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RuntimeMethodHandle\n    path: src/mscorlib/src/System/RuntimeHandles.cs\n    startLine: 920\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>\\n<xref href=\\\"System.RuntimeMethodHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is a handle to the internal metadata representation of a method.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public struct RuntimeMethodHandle : ISerializable\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public Structure RuntimeMethodHandle\n          Implements ISerializable\n  inheritedMembers:\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: RuntimeMethodHandle\n- uid: System.RuntimeMethodHandle.Equals(System.Object)\n  commentId: M:System.RuntimeMethodHandle.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.RuntimeMethodHandle\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.RuntimeMethodHandle.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/RuntimeHandles.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/RuntimeHandles.cs\n    startLine: 1003\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether this instance is equal to a specified object.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [SecuritySafeCritical]\n\n      public override bool Equals(object obj)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <SecuritySafeCritical>\n\n      Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>A <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare to this instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>obj</em> is a <xref href=\\\"System.RuntimeMethodHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and equal to the value of this instance; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  seealso:\n  - type: System.RuntimeMethodHandle.Value\n    commentId: P:System.RuntimeMethodHandle.Value\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: RuntimeMethodHandle.Equals(Object)\n- uid: System.RuntimeMethodHandle.Equals(System.RuntimeMethodHandle)\n  commentId: M:System.RuntimeMethodHandle.Equals(System.RuntimeMethodHandle)\n  id: Equals(System.RuntimeMethodHandle)\n  parent: System.RuntimeMethodHandle\n  langs:\n  - csharp\n  - vb\n  name: Equals(RuntimeMethodHandle)\n  fullName: System.RuntimeMethodHandle.Equals(System.RuntimeMethodHandle)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/RuntimeHandles.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/RuntimeHandles.cs\n    startLine: 1025\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether this instance is equal to a specified <xref href=\\\"System.RuntimeMethodHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [SecuritySafeCritical]\n\n      public bool Equals(RuntimeMethodHandle handle)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <SecuritySafeCritical>\n\n      Public Function Equals(handle As RuntimeMethodHandle) As Boolean\n    parameters:\n    - id: handle\n      type: System.RuntimeMethodHandle\n      description: \"\\n<p>A <xref href=\\\"System.RuntimeMethodHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare to this instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>handle</em> is equal to the value of this instance; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.RuntimeMethodHandle.Value\n    commentId: P:System.RuntimeMethodHandle.Value\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RuntimeMethodHandle.Equals(RuntimeMethodHandle)\n- uid: System.RuntimeMethodHandle.GetHashCode\n  commentId: M:System.RuntimeMethodHandle.GetHashCode\n  id: GetHashCode\n  parent: System.RuntimeMethodHandle\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.RuntimeMethodHandle.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/RuntimeHandles.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/RuntimeHandles.cs\n    startLine: 997\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the hash code for this instance.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetHashCode()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: RuntimeMethodHandle.GetHashCode()\n- uid: System.RuntimeMethodHandle.op_Equality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)\n  commentId: M:System.RuntimeMethodHandle.op_Equality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)\n  id: op_Equality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)\n  parent: System.RuntimeMethodHandle\n  langs:\n  - csharp\n  - vb\n  name: Equality(RuntimeMethodHandle, RuntimeMethodHandle)\n  fullName: System.RuntimeMethodHandle.Equality(System.RuntimeMethodHandle, System.RuntimeMethodHandle)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/RuntimeHandles.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Equality\n    path: src/mscorlib/src/System/RuntimeHandles.cs\n    startLine: 1015\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether two instances of <xref href=\\\"System.RuntimeMethodHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are equal.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(RuntimeMethodHandle left, RuntimeMethodHandle right)\n    content.vb: Public Shared Operator =(left As RuntimeMethodHandle, right As RuntimeMethodHandle) As Boolean\n    parameters:\n    - id: left\n      type: System.RuntimeMethodHandle\n      description: \"\\n<p>A <xref href=\\\"System.RuntimeMethodHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare to <em>right</em>.</p>\\n\"\n    - id: right\n      type: System.RuntimeMethodHandle\n      description: \"\\n<p>A <xref href=\\\"System.RuntimeMethodHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare to <em>left</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the value of <em>left</em> is equal to the value of <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: RuntimeMethodHandle.Equality(RuntimeMethodHandle, RuntimeMethodHandle)\n- uid: System.RuntimeMethodHandle.op_Inequality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)\n  commentId: M:System.RuntimeMethodHandle.op_Inequality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)\n  id: op_Inequality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)\n  parent: System.RuntimeMethodHandle\n  langs:\n  - csharp\n  - vb\n  name: Inequality(RuntimeMethodHandle, RuntimeMethodHandle)\n  fullName: System.RuntimeMethodHandle.Inequality(System.RuntimeMethodHandle, System.RuntimeMethodHandle)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/RuntimeHandles.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Inequality\n    path: src/mscorlib/src/System/RuntimeHandles.cs\n    startLine: 1020\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether two instances of <xref href=\\\"System.RuntimeMethodHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are not equal.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(RuntimeMethodHandle left, RuntimeMethodHandle right)\n    content.vb: Public Shared Operator <>(left As RuntimeMethodHandle, right As RuntimeMethodHandle) As Boolean\n    parameters:\n    - id: left\n      type: System.RuntimeMethodHandle\n      description: \"\\n<p>A <xref href=\\\"System.RuntimeMethodHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare to <em>right</em>.</p>\\n\"\n    - id: right\n      type: System.RuntimeMethodHandle\n      description: \"\\n<p>A <xref href=\\\"System.RuntimeMethodHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare to <em>left</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the value of <em>left</em> is unequal to the value of <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: RuntimeMethodHandle.Inequality(RuntimeMethodHandle, RuntimeMethodHandle)\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.RuntimeMethodHandle\n  parent: System\n  isExternal: false\n  name: RuntimeMethodHandle\n  fullName: System.RuntimeMethodHandle\n  nameWithType: RuntimeMethodHandle\n  commentId: T:System.RuntimeMethodHandle\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n"}