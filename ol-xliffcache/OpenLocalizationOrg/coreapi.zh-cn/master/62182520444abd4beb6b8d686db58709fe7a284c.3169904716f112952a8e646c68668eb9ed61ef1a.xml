{"nodes":[{"pos":[1742,1753],"content":"Interlocked","needQuote":true,"nodes":[{"content":"Interlocked","pos":[0,11]}]},{"pos":[3006,3027],"content":"Add(ref Int32, Int32)","needQuote":true,"nodes":[{"content":"Add(ref Int32, Int32)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;A variable containing the first value to be added.","pos":[3971,4026],"source":"\\n<p>A variable containing the first value to be added."},{"content":"The sum of the two values is stored in &lt;em&gt;location1&lt;/em&gt;.&lt;/p&gt;\\n","pos":[4027,4091],"source":" The sum of the two values is stored in <em>location1</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The value to be added to the integer at &lt;em&gt;location1&lt;/em&gt;.&lt;/p&gt;\\n","pos":[4154,4224],"source":"\\n<p>The value to be added to the integer at <em>location1</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The new value stored at &lt;em&gt;location1&lt;/em&gt;.&lt;/p&gt;\\n","pos":[4283,4337],"source":"\\n<p>The new value stored at <em>location1</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The address of &lt;em&gt;location1&lt;/em&gt; is a null pointer.","pos":[4458,4515],"source":"\\n<p>The address of <em>location1</em> is a null pointer."},{"content":"&lt;/p&gt;\\n","pos":[4516,4522],"source":" </p>\\n"},{"pos":[5082,5103],"content":"Add(ref Int64, Int64)","needQuote":true,"nodes":[{"content":"Add(ref Int64, Int64)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;A variable containing the first value to be added.","pos":[6041,6096],"source":"\\n<p>A variable containing the first value to be added."},{"content":"The sum of the two values is stored in &lt;em&gt;location1&lt;/em&gt;.&lt;/p&gt;\\n","pos":[6097,6161],"source":" The sum of the two values is stored in <em>location1</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The value to be added to the integer at &lt;em&gt;location1&lt;/em&gt;.&lt;/p&gt;\\n","pos":[6224,6294],"source":"\\n<p>The value to be added to the integer at <em>location1</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The new value stored at &lt;em&gt;location1&lt;/em&gt;.&lt;/p&gt;\\n","pos":[6353,6407],"source":"\\n<p>The new value stored at <em>location1</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The address of &lt;em&gt;location1&lt;/em&gt; is a null pointer.","pos":[6528,6585],"source":"\\n<p>The address of <em>location1</em> is a null pointer."},{"content":"&lt;/p&gt;\\n","pos":[6586,6592],"source":" </p>\\n"},{"pos":[7642,7685],"content":"CompareExchange(ref Double, Double, Double)","needQuote":true,"nodes":[{"content":"CompareExchange(ref Double, Double, Double)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;The destination, whose value is compared with &lt;em&gt;comparand&lt;/em&gt; and possibly replaced.","pos":[8584,8676],"source":"\\n<p>The destination, whose value is compared with <em>comparand</em> and possibly replaced."},{"content":"&lt;/p&gt;\\n","pos":[8677,8683],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value that replaces the destination value if the comparison results in equality.","pos":[8747,8836],"source":"\\n<p>The value that replaces the destination value if the comparison results in equality."},{"content":"&lt;/p&gt;\\n","pos":[8837,8843],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value that is compared to the value at &lt;em&gt;location1&lt;/em&gt;.","pos":[8911,8978],"source":"\\n<p>The value that is compared to the value at <em>location1</em>."},{"content":"&lt;/p&gt;\\n","pos":[8979,8985],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The original value in &lt;em&gt;location1&lt;/em&gt;.&lt;/p&gt;\\n","pos":[9045,9097],"source":"\\n<p>The original value in <em>location1</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The address of &lt;em&gt;location1&lt;/em&gt; is a null pointer.","pos":[9218,9275],"source":"\\n<p>The address of <em>location1</em> is a null pointer."},{"content":"&lt;/p&gt;\\n","pos":[9276,9282],"source":" </p>\\n"},{"pos":[10012,10052],"content":"CompareExchange(ref Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"CompareExchange(ref Int32, Int32, Int32)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The destination, whose value is compared with &lt;em&gt;comparand&lt;/em&gt; and possibly replaced.","pos":[11072,11164],"source":"\\n<p>The destination, whose value is compared with <em>comparand</em> and possibly replaced."},{"content":"&lt;/p&gt;\\n","pos":[11165,11171],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value that replaces the destination value if the comparison results in equality.","pos":[11234,11323],"source":"\\n<p>The value that replaces the destination value if the comparison results in equality."},{"content":"&lt;/p&gt;\\n","pos":[11324,11330],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value that is compared to the value at &lt;em&gt;location1&lt;/em&gt;.","pos":[11397,11464],"source":"\\n<p>The value that is compared to the value at <em>location1</em>."},{"content":"&lt;/p&gt;\\n","pos":[11465,11471],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The original value in &lt;em&gt;location1&lt;/em&gt;.&lt;/p&gt;\\n","pos":[11530,11582],"source":"\\n<p>The original value in <em>location1</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The address of &lt;em&gt;location1&lt;/em&gt; is a null pointer.","pos":[11703,11760],"source":"\\n<p>The address of <em>location1</em> is a null pointer."},{"content":"&lt;/p&gt;\\n","pos":[11761,11767],"source":" </p>\\n"},{"pos":[12485,12525],"content":"CompareExchange(ref Int64, Int64, Int64)","needQuote":true,"nodes":[{"content":"CompareExchange(ref Int64, Int64, Int64)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The destination, whose value is compared with &lt;em&gt;comparand&lt;/em&gt; and possibly replaced.","pos":[13387,13479],"source":"\\n<p>The destination, whose value is compared with <em>comparand</em> and possibly replaced."},{"content":"&lt;/p&gt;\\n","pos":[13480,13486],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value that replaces the destination value if the comparison results in equality.","pos":[13549,13638],"source":"\\n<p>The value that replaces the destination value if the comparison results in equality."},{"content":"&lt;/p&gt;\\n","pos":[13639,13645],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value that is compared to the value at &lt;em&gt;location1&lt;/em&gt;.","pos":[13712,13779],"source":"\\n<p>The value that is compared to the value at <em>location1</em>."},{"content":"&lt;/p&gt;\\n","pos":[13780,13786],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The original value in &lt;em&gt;location1&lt;/em&gt;.&lt;/p&gt;\\n","pos":[13845,13897],"source":"\\n<p>The original value in <em>location1</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The address of &lt;em&gt;location1&lt;/em&gt; is a null pointer.","pos":[14018,14075],"source":"\\n<p>The address of <em>location1</em> is a null pointer."},{"content":"&lt;/p&gt;\\n","pos":[14076,14082],"source":" </p>\\n"},{"pos":[14809,14852],"content":"CompareExchange(ref IntPtr, IntPtr, IntPtr)","needQuote":true,"nodes":[{"content":"CompareExchange(ref IntPtr, IntPtr, IntPtr)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;The original value in &lt;em&gt;location1&lt;/em&gt;.&lt;/p&gt;\\n","pos":[16599,16651],"source":"\\n<p>The original value in <em>location1</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The address of &lt;em&gt;location1&lt;/em&gt; is a null pointer.","pos":[16772,16829],"source":"\\n<p>The address of <em>location1</em> is a null pointer."},{"content":"&lt;/p&gt;\\n","pos":[16830,16836],"source":" </p>\\n"},{"pos":[17575,17618],"content":"CompareExchange(ref Object, Object, Object)","needQuote":true,"nodes":[{"content":"CompareExchange(ref Object, Object, Object)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;The destination object that is compared with &lt;em&gt;comparand&lt;/em&gt; and possibly replaced.","pos":[18646,18737],"source":"\\n<p>The destination object that is compared with <em>comparand</em> and possibly replaced."},{"content":"&lt;/p&gt;\\n","pos":[18738,18744],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The object that replaces the destination object if the comparison results in equality.","pos":[18808,18899],"source":"\\n<p>The object that replaces the destination object if the comparison results in equality."},{"content":"&lt;/p&gt;\\n","pos":[18900,18906],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The object that is compared to the object at &lt;em&gt;location1&lt;/em&gt;.","pos":[18974,19043],"source":"\\n<p>The object that is compared to the object at <em>location1</em>."},{"content":"&lt;/p&gt;\\n","pos":[19044,19050],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The original value in &lt;em&gt;location1&lt;/em&gt;.&lt;/p&gt;\\n","pos":[19110,19162],"source":"\\n<p>The original value in <em>location1</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The address of &lt;em&gt;location1&lt;/em&gt; is a null pointer.","pos":[19281,19338],"source":"\\n<p>The address of <em>location1</em> is a null pointer."},{"content":"&lt;/p&gt;\\n","pos":[19339,19345],"source":" </p>\\n"},{"pos":[20084,20127],"content":"CompareExchange(ref Single, Single, Single)","needQuote":true,"nodes":[{"content":"CompareExchange(ref Single, Single, Single)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;The destination, whose value is compared with &lt;em&gt;comparand&lt;/em&gt; and possibly replaced.","pos":[21022,21114],"source":"\\n<p>The destination, whose value is compared with <em>comparand</em> and possibly replaced."},{"content":"&lt;/p&gt;\\n","pos":[21115,21121],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value that replaces the destination value if the comparison results in equality.","pos":[21185,21274],"source":"\\n<p>The value that replaces the destination value if the comparison results in equality."},{"content":"&lt;/p&gt;\\n","pos":[21275,21281],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value that is compared to the value at &lt;em&gt;location1&lt;/em&gt;.","pos":[21349,21416],"source":"\\n<p>The value that is compared to the value at <em>location1</em>."},{"content":"&lt;/p&gt;\\n","pos":[21417,21423],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The original value in &lt;em&gt;location1&lt;/em&gt;.&lt;/p&gt;\\n","pos":[21483,21535],"source":"\\n<p>The original value in <em>location1</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The address of &lt;em&gt;location1&lt;/em&gt; is a null pointer.","pos":[21656,21713],"source":"\\n<p>The address of <em>location1</em> is a null pointer."},{"content":"&lt;/p&gt;\\n","pos":[21714,21720],"source":" </p>\\n"},{"pos":[22378,22409],"content":"CompareExchange<T>(ref T, T, T)","needQuote":true,"nodes":[{"content":"CompareExchange&lt;T&gt;(ref T, T, T)","pos":[0,31],"source":"CompareExchange<T>(ref T, T, T)"}]},{"content":"\\n&lt;p&gt;The destination, whose value is compared with &lt;em&gt;comparand&lt;/em&gt; and possibly replaced.","pos":[23563,23655],"source":"\\n<p>The destination, whose value is compared with <em>comparand</em> and possibly replaced."},{"content":"This is a reference parameter (&lt;strong&gt;ref&lt;/strong&gt; in C#, &lt;strong&gt;ByRef&lt;/strong&gt; in Visual Basic).","pos":[23656,23755],"source":" This is a reference parameter (<strong>ref</strong> in C#, <strong>ByRef</strong> in Visual Basic)."},{"content":"&lt;/p&gt;\\n","pos":[23756,23762],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value that replaces the destination value if the comparison results in equality.","pos":[23818,23907],"source":"\\n<p>The value that replaces the destination value if the comparison results in equality."},{"content":"&lt;/p&gt;\\n","pos":[23908,23914],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value that is compared to the value at &lt;em&gt;location1&lt;/em&gt;.","pos":[23974,24041],"source":"\\n<p>The value that is compared to the value at <em>location1</em>."},{"content":"&lt;/p&gt;\\n","pos":[24042,24048],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type to be used for &lt;em&gt;location1&lt;/em&gt;, &lt;em&gt;value&lt;/em&gt;, and &lt;em&gt;comparand&lt;/em&gt;.","pos":[24102,24190],"source":"\\n<p>The type to be used for <em>location1</em>, <em>value</em>, and <em>comparand</em>."},{"content":"This type must be a reference type.&lt;/p&gt;\\n","pos":[24191,24232],"source":" This type must be a reference type.</p>\\n"},{"content":"\\n&lt;p&gt;The original value in &lt;em&gt;location1&lt;/em&gt;.&lt;/p&gt;\\n","pos":[24284,24336],"source":"\\n<p>The original value in <em>location1</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The address of &lt;em&gt;location1&lt;/em&gt; is a null pointer.","pos":[24457,24514],"source":"\\n<p>The address of <em>location1</em> is a null pointer."},{"content":"&lt;/p&gt;\\n","pos":[24515,24521],"source":" </p>\\n"},{"pos":[25095,25115],"content":"Decrement(ref Int32)","needQuote":true,"nodes":[{"content":"Decrement(ref Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The variable whose value is to be decremented.","pos":[26021,26072],"source":"\\n<p>The variable whose value is to be decremented."},{"content":"&lt;/p&gt;\\n","pos":[26073,26079],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The decremented value.&lt;/p&gt;\\n","pos":[26138,26171],"source":"\\n<p>The decremented value.</p>\\n"},{"content":"\\n&lt;p&gt;The address of &lt;em&gt;location&lt;/em&gt; is a null pointer.","pos":[26290,26346],"source":"\\n<p>The address of <em>location</em> is a null pointer."},{"content":"&lt;/p&gt;\\n","pos":[26347,26353],"source":" </p>\\n"},{"pos":[26881,26901],"content":"Decrement(ref Int64)","needQuote":true,"nodes":[{"content":"Decrement(ref Int64)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The variable whose value is to be decremented.","pos":[27637,27688],"source":"\\n<p>The variable whose value is to be decremented."},{"content":"&lt;/p&gt;\\n","pos":[27689,27695],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The decremented value.&lt;/p&gt;\\n","pos":[27754,27787],"source":"\\n<p>The decremented value.</p>\\n"},{"content":"\\n&lt;p&gt;The address of &lt;em&gt;location&lt;/em&gt; is a null pointer.","pos":[27906,27962],"source":"\\n<p>The address of <em>location</em> is a null pointer."},{"content":"&lt;/p&gt;\\n","pos":[27963,27969],"source":" </p>\\n"},{"pos":[28959,28987],"content":"Exchange(ref Double, Double)","needQuote":true,"nodes":[{"content":"Exchange(ref Double, Double)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The variable to set to the specified value.","pos":[29818,29866],"source":"\\n<p>The variable to set to the specified value."},{"content":"&lt;/p&gt;\\n","pos":[29867,29873],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value to which the &lt;em&gt;location1&lt;/em&gt; parameter is set.","pos":[29937,30001],"source":"\\n<p>The value to which the <em>location1</em> parameter is set."},{"content":"&lt;/p&gt;\\n","pos":[30002,30008],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The original value of &lt;em&gt;location1&lt;/em&gt;.&lt;/p&gt;\\n","pos":[30068,30120],"source":"\\n<p>The original value of <em>location1</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The address of &lt;em&gt;location1&lt;/em&gt; is a null pointer.","pos":[30241,30298],"source":"\\n<p>The address of <em>location1</em> is a null pointer."},{"content":"&lt;/p&gt;\\n","pos":[30299,30305],"source":" </p>\\n"},{"pos":[30908,30934],"content":"Exchange(ref Int32, Int32)","needQuote":true,"nodes":[{"content":"Exchange(ref Int32, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The variable to set to the specified value.","pos":[31889,31937],"source":"\\n<p>The variable to set to the specified value."},{"content":"&lt;/p&gt;\\n","pos":[31938,31944],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value to which the &lt;em&gt;location1&lt;/em&gt; parameter is set.","pos":[32007,32071],"source":"\\n<p>The value to which the <em>location1</em> parameter is set."},{"content":"&lt;/p&gt;\\n","pos":[32072,32078],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The original value of &lt;em&gt;location1&lt;/em&gt;.&lt;/p&gt;\\n","pos":[32137,32189],"source":"\\n<p>The original value of <em>location1</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The address of &lt;em&gt;location1&lt;/em&gt; is a null pointer.","pos":[32308,32365],"source":"\\n<p>The address of <em>location1</em> is a null pointer."},{"content":"&lt;/p&gt;\\n","pos":[32366,32372],"source":" </p>\\n"},{"pos":[32967,32993],"content":"Exchange(ref Int64, Int64)","needQuote":true,"nodes":[{"content":"Exchange(ref Int64, Int64)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The variable to set to the specified value.","pos":[33792,33840],"source":"\\n<p>The variable to set to the specified value."},{"content":"&lt;/p&gt;\\n","pos":[33841,33847],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value to which the &lt;em&gt;location1&lt;/em&gt; parameter is set.","pos":[33910,33974],"source":"\\n<p>The value to which the <em>location1</em> parameter is set."},{"content":"&lt;/p&gt;\\n","pos":[33975,33981],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The original value of &lt;em&gt;location1&lt;/em&gt;.&lt;/p&gt;\\n","pos":[34040,34092],"source":"\\n<p>The original value of <em>location1</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The address of &lt;em&gt;location1&lt;/em&gt; is a null pointer.","pos":[34213,34270],"source":"\\n<p>The address of <em>location1</em> is a null pointer."},{"content":"&lt;/p&gt;\\n","pos":[34271,34277],"source":" </p>\\n"},{"pos":[34878,34906],"content":"Exchange(ref IntPtr, IntPtr)","needQuote":true,"nodes":[{"content":"Exchange(ref IntPtr, IntPtr)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The variable to set to the specified value.","pos":[35884,35932],"source":"\\n<p>The variable to set to the specified value."},{"content":"&lt;/p&gt;\\n","pos":[35933,35939],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value to which the &lt;em&gt;location1&lt;/em&gt; parameter is set.","pos":[36003,36067],"source":"\\n<p>The value to which the <em>location1</em> parameter is set."},{"content":"&lt;/p&gt;\\n","pos":[36068,36074],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The original value of &lt;em&gt;location1&lt;/em&gt;.&lt;/p&gt;\\n","pos":[36134,36186],"source":"\\n<p>The original value of <em>location1</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The address of &lt;em&gt;location1&lt;/em&gt; is a null pointer.","pos":[36307,36364],"source":"\\n<p>The address of <em>location1</em> is a null pointer."},{"content":"&lt;/p&gt;\\n","pos":[36365,36371],"source":" </p>\\n"},{"pos":[36980,37008],"content":"Exchange(ref Object, Object)","needQuote":true,"nodes":[{"content":"Exchange(ref Object, Object)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The variable to set to the specified value.","pos":[37974,38022],"source":"\\n<p>The variable to set to the specified value."},{"content":"&lt;/p&gt;\\n","pos":[38023,38029],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value to which the &lt;em&gt;location1&lt;/em&gt; parameter is set.","pos":[38093,38157],"source":"\\n<p>The value to which the <em>location1</em> parameter is set."},{"content":"&lt;/p&gt;\\n","pos":[38158,38164],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The original value of &lt;em&gt;location1&lt;/em&gt;.&lt;/p&gt;\\n","pos":[38224,38276],"source":"\\n<p>The original value of <em>location1</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The address of &lt;em&gt;location1&lt;/em&gt; is a null pointer.","pos":[38395,38452],"source":"\\n<p>The address of <em>location1</em> is a null pointer."},{"content":"&lt;/p&gt;\\n","pos":[38453,38459],"source":" </p>\\n"},{"pos":[39068,39096],"content":"Exchange(ref Single, Single)","needQuote":true,"nodes":[{"content":"Exchange(ref Single, Single)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The variable to set to the specified value.","pos":[39924,39972],"source":"\\n<p>The variable to set to the specified value."},{"content":"&lt;/p&gt;\\n","pos":[39973,39979],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value to which the &lt;em&gt;location1&lt;/em&gt; parameter is set.","pos":[40043,40107],"source":"\\n<p>The value to which the <em>location1</em> parameter is set."},{"content":"&lt;/p&gt;\\n","pos":[40108,40114],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The original value of &lt;em&gt;location1&lt;/em&gt;.&lt;/p&gt;\\n","pos":[40174,40226],"source":"\\n<p>The original value of <em>location1</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The address of &lt;em&gt;location1&lt;/em&gt; is a null pointer.","pos":[40347,40404],"source":"\\n<p>The address of <em>location1</em> is a null pointer."},{"content":"&lt;/p&gt;\\n","pos":[40405,40411],"source":" </p>\\n"},{"pos":[40969,40990],"content":"Exchange<T>(ref T, T)","needQuote":true,"nodes":[{"content":"Exchange&lt;T&gt;(ref T, T)","pos":[0,21],"source":"Exchange<T>(ref T, T)"}]},{"content":"\\n&lt;p&gt;The variable to set to the specified value.","pos":[42082,42130],"source":"\\n<p>The variable to set to the specified value."},{"content":"This is a reference parameter (&lt;strong&gt;ref&lt;/strong&gt; in C#, &lt;strong&gt;ByRef&lt;/strong&gt; in Visual Basic).","pos":[42131,42230],"source":" This is a reference parameter (<strong>ref</strong> in C#, <strong>ByRef</strong> in Visual Basic)."},{"content":"&lt;/p&gt;\\n","pos":[42231,42237],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value to which the &lt;em&gt;location1&lt;/em&gt; parameter is set.","pos":[42293,42357],"source":"\\n<p>The value to which the <em>location1</em> parameter is set."},{"content":"&lt;/p&gt;\\n","pos":[42358,42364],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type to be used for &lt;em&gt;location1&lt;/em&gt; and &lt;em&gt;value&lt;/em&gt;.","pos":[42418,42485],"source":"\\n<p>The type to be used for <em>location1</em> and <em>value</em>."},{"content":"This type must be a reference type.&lt;/p&gt;\\n","pos":[42486,42527],"source":" This type must be a reference type.</p>\\n"},{"content":"\\n&lt;p&gt;The original value of &lt;em&gt;location1&lt;/em&gt;.&lt;/p&gt;\\n","pos":[42579,42631],"source":"\\n<p>The original value of <em>location1</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The address of &lt;em&gt;location1&lt;/em&gt; is a null pointer.","pos":[42752,42809],"source":"\\n<p>The address of <em>location1</em> is a null pointer."},{"content":"&lt;/p&gt;\\n","pos":[42810,42816],"source":" </p>\\n"},{"pos":[43350,43370],"content":"Increment(ref Int32)","needQuote":true,"nodes":[{"content":"Increment(ref Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The variable whose value is to be incremented.","pos":[44276,44327],"source":"\\n<p>The variable whose value is to be incremented."},{"content":"&lt;/p&gt;\\n","pos":[44328,44334],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The incremented value.&lt;/p&gt;\\n","pos":[44393,44426],"source":"\\n<p>The incremented value.</p>\\n"},{"content":"\\n&lt;p&gt;The address of &lt;em&gt;location&lt;/em&gt; is a null pointer.","pos":[44547,44603],"source":"\\n<p>The address of <em>location</em> is a null pointer."},{"content":"&lt;/p&gt;\\n","pos":[44604,44610],"source":" </p>\\n"},{"pos":[45138,45158],"content":"Increment(ref Int64)","needQuote":true,"nodes":[{"content":"Increment(ref Int64)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The variable whose value is to be incremented.","pos":[46060,46111],"source":"\\n<p>The variable whose value is to be incremented."},{"content":"&lt;/p&gt;\\n","pos":[46112,46118],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The incremented value.&lt;/p&gt;\\n","pos":[46177,46210],"source":"\\n<p>The incremented value.</p>\\n"},{"content":"\\n&lt;p&gt;The address of &lt;em&gt;location&lt;/em&gt; is a null pointer.","pos":[46331,46387],"source":"\\n<p>The address of <em>location</em> is a null pointer."},{"content":"&lt;/p&gt;\\n","pos":[46388,46394],"source":" </p>\\n"},{"pos":[47309,47324],"content":"MemoryBarrier()","needQuote":true,"nodes":[{"content":"MemoryBarrier()","pos":[0,15]}]},{"pos":[48619,48634],"content":"Read(ref Int64)","needQuote":true,"nodes":[{"content":"Read(ref Int64)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 64-bit value to be loaded.&lt;/p&gt;\\n","pos":[49325,49366],"source":"\\n<p>The 64-bit value to be loaded.</p>\\n"},{"content":"\\n&lt;p&gt;The loaded value.&lt;/p&gt;\\n","pos":[49425,49453],"source":"\\n<p>The loaded value.</p>\\n"},{"pos":[50220,50236],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[50397,50403],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[50563,50573],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[50668,50676],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[50745,50746],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50773,50774],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50844,50852],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[50921,50922],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50949,50950],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51133,51147],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[51266,51272],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[51339,51340],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51390,51396],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[51456,51457],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51540,51546],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[51613,51614],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51664,51670],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[51730,51731],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51945,51967],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[52115,52121],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[52188,52189],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52239,52245],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[52306,52307]},{"pos":[52362,52368],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[52428,52429],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52526,52532],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[52599,52600],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52650,52656],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[52717,52718]},{"pos":[52773,52779],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[52839,52840],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53085,53116],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[53282,53297],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[53373,53374],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53424,53430],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[53491,53492]},{"pos":[53547,53553],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[53613,53614],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53720,53735],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[53811,53812],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53862,53868],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[53929,53930]},{"pos":[53985,53991],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[54051,54052],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54282,54295],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[54396,54407],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[54479,54480],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54507,54508],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54581,54592],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[54664,54665],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54692,54693],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54868,54877],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[54970,54977],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[55045,55046],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55073,55074],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55143,55150],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[55218,55219],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55246,55247],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55422,55439],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[55548,55563],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[55639,55640],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55667,55668],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55745,55760],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[55836,55837],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55864,55865],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56010,56016],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[56146,56151],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[56292,56297],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[56439,56445],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[56590,56596],"content":"IntPtr","needQuote":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"pos":[56741,56747],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[56863,56864],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[56953,56954],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[57052,57074],"content":"NullReferenceException","needQuote":true,"nodes":[{"content":"NullReferenceException","pos":[0,22]}]},{"pos":[57265,57286],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Threading.Interlocked\n  commentId: T:System.Threading.Interlocked\n  id: Interlocked\n  parent: System.Threading\n  children:\n  - System.Threading.Interlocked.Add(System.Int32@,System.Int32)\n  - System.Threading.Interlocked.Add(System.Int64@,System.Int64)\n  - System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)\n  - System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)\n  - System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)\n  - System.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)\n  - System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)\n  - System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)\n  - System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)\n  - System.Threading.Interlocked.Decrement(System.Int32@)\n  - System.Threading.Interlocked.Decrement(System.Int64@)\n  - System.Threading.Interlocked.Exchange(System.Double@,System.Double)\n  - System.Threading.Interlocked.Exchange(System.Int32@,System.Int32)\n  - System.Threading.Interlocked.Exchange(System.Int64@,System.Int64)\n  - System.Threading.Interlocked.Exchange(System.IntPtr@,System.IntPtr)\n  - System.Threading.Interlocked.Exchange(System.Object@,System.Object)\n  - System.Threading.Interlocked.Exchange(System.Single@,System.Single)\n  - System.Threading.Interlocked.Exchange``1(``0@,``0)\n  - System.Threading.Interlocked.Increment(System.Int32@)\n  - System.Threading.Interlocked.Increment(System.Int64@)\n  - System.Threading.Interlocked.MemoryBarrier\n  - System.Threading.Interlocked.Read(System.Int64@)\n  langs:\n  - csharp\n  - vb\n  name: Interlocked\n  fullName: System.Threading.Interlocked\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Interlocked.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Interlocked\n    path: src/mscorlib/src/System/Threading/Interlocked.cs\n    startLine: 19\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Provides atomic operations for variables that are shared by multiple threads. </p>\\n\"\n  syntax:\n    content: public class Interlocked\n    content.vb: Public Class Interlocked\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Interlocked\n- uid: System.Threading.Interlocked.Add(System.Int32@,System.Int32)\n  commentId: M:System.Threading.Interlocked.Add(System.Int32@,System.Int32)\n  id: Add(System.Int32@,System.Int32)\n  parent: System.Threading.Interlocked\n  langs:\n  - csharp\n  - vb\n  name: Add(ref Int32, Int32)\n  fullName: System.Threading.Interlocked.Add(ref System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Interlocked.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Add\n    path: src/mscorlib/src/System/Threading/Interlocked.cs\n    startLine: 206\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Adds two 32-bit integers and replaces the first integer with the sum, as an atomic operation.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static int Add(ref int location1, int value)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Function Add(ByRef location1 As Integer, value As Integer) As Integer\n    parameters:\n    - id: location1\n      type: System.Int32\n      description: \"\\n<p>A variable containing the first value to be added. The sum of the two values is stored in <em>location1</em>.</p>\\n\"\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The value to be added to the integer at <em>location1</em>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The new value stored at <em>location1</em>.</p>\\n\"\n  exceptions:\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: \"\\n<p>The address of <em>location1</em> is a null pointer. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Interlocked.Add(ByRef System.Int32, System.Int32)\n  name.vb: Add(ByRef Int32, Int32)\n  nameWithType: Interlocked.Add(ref Int32, Int32)\n  nameWithType.vb: Interlocked.Add(ByRef Int32, Int32)\n- uid: System.Threading.Interlocked.Add(System.Int64@,System.Int64)\n  commentId: M:System.Threading.Interlocked.Add(System.Int64@,System.Int64)\n  id: Add(System.Int64@,System.Int64)\n  parent: System.Threading.Interlocked\n  langs:\n  - csharp\n  - vb\n  name: Add(ref Int64, Int64)\n  fullName: System.Threading.Interlocked.Add(ref System.Int64, System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Interlocked.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Add\n    path: src/mscorlib/src/System/Threading/Interlocked.cs\n    startLine: 212\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Adds two 64-bit integers and replaces the first integer with the sum, as an atomic operation.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static long Add(ref long location1, long value)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Function Add(ByRef location1 As Long, value As Long) As Long\n    parameters:\n    - id: location1\n      type: System.Int64\n      description: \"\\n<p>A variable containing the first value to be added. The sum of the two values is stored in <em>location1</em>.</p>\\n\"\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The value to be added to the integer at <em>location1</em>.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The new value stored at <em>location1</em>.</p>\\n\"\n  exceptions:\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: \"\\n<p>The address of <em>location1</em> is a null pointer. </p>\\n\"\n  seealso:\n  - type: System.Threading.Interlocked.Increment(System.Int32@)\n    commentId: M:System.Threading.Interlocked.Increment(System.Int32@)\n  - type: System.Threading.Interlocked.Decrement(System.Int32@)\n    commentId: M:System.Threading.Interlocked.Decrement(System.Int32@)\n  - type: System.Threading.Interlocked.Read(System.Int64@)\n    commentId: M:System.Threading.Interlocked.Read(System.Int64@)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Interlocked.Add(ByRef System.Int64, System.Int64)\n  name.vb: Add(ByRef Int64, Int64)\n  nameWithType: Interlocked.Add(ref Int64, Int64)\n  nameWithType.vb: Interlocked.Add(ByRef Int64, Int64)\n- uid: System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)\n  commentId: M:System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)\n  id: CompareExchange(System.Double@,System.Double,System.Double)\n  parent: System.Threading.Interlocked\n  langs:\n  - csharp\n  - vb\n  name: CompareExchange(ref Double, Double, Double)\n  fullName: System.Threading.Interlocked.CompareExchange(ref System.Double, System.Double, System.Double)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Compares two double-precision floating point numbers for equality and, if they are equal, replaces the first value.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      [SecuritySafeCritical]\n\n      public static double CompareExchange(ref double location1, double value, double comparand)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      <SecuritySafeCritical>\n\n      Public Shared Function CompareExchange(ByRef location1 As Double, value As Double, comparand As Double) As Double\n    parameters:\n    - id: location1\n      type: System.Double\n      description: \"\\n<p>The destination, whose value is compared with <em>comparand</em> and possibly replaced. </p>\\n\"\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The value that replaces the destination value if the comparison results in equality. </p>\\n\"\n    - id: comparand\n      type: System.Double\n      description: \"\\n<p>The value that is compared to the value at <em>location1</em>. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The original value in <em>location1</em>.</p>\\n\"\n  exceptions:\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: \"\\n<p>The address of <em>location1</em> is a null pointer. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Interlocked.CompareExchange(ByRef System.Double, System.Double, System.Double)\n  name.vb: CompareExchange(ByRef Double, Double, Double)\n  nameWithType: Interlocked.CompareExchange(ref Double, Double, Double)\n  nameWithType.vb: Interlocked.CompareExchange(ByRef Double, Double, Double)\n- uid: System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)\n  commentId: M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)\n  id: CompareExchange(System.Int32@,System.Int32,System.Int32)\n  parent: System.Threading.Interlocked\n  langs:\n  - csharp\n  - vb\n  name: CompareExchange(ref Int32, Int32, Int32)\n  fullName: System.Threading.Interlocked.CompareExchange(ref System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Compares two 32-bit signed integers for equality and, if they are equal, replaces the first value.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [SecuritySafeCritical]\n\n      public static int CompareExchange(ref int location1, int value, int comparand)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <SecuritySafeCritical>\n\n      Public Shared Function CompareExchange(ByRef location1 As Integer, value As Integer, comparand As Integer) As Integer\n    parameters:\n    - id: location1\n      type: System.Int32\n      description: \"\\n<p>The destination, whose value is compared with <em>comparand</em> and possibly replaced. </p>\\n\"\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The value that replaces the destination value if the comparison results in equality. </p>\\n\"\n    - id: comparand\n      type: System.Int32\n      description: \"\\n<p>The value that is compared to the value at <em>location1</em>. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The original value in <em>location1</em>.</p>\\n\"\n  exceptions:\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: \"\\n<p>The address of <em>location1</em> is a null pointer. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Interlocked.CompareExchange(ByRef System.Int32, System.Int32, System.Int32)\n  name.vb: CompareExchange(ByRef Int32, Int32, Int32)\n  nameWithType: Interlocked.CompareExchange(ref Int32, Int32, Int32)\n  nameWithType.vb: Interlocked.CompareExchange(ByRef Int32, Int32, Int32)\n- uid: System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)\n  commentId: M:System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)\n  id: CompareExchange(System.Int64@,System.Int64,System.Int64)\n  parent: System.Threading.Interlocked\n  langs:\n  - csharp\n  - vb\n  name: CompareExchange(ref Int64, Int64, Int64)\n  fullName: System.Threading.Interlocked.CompareExchange(ref System.Int64, System.Int64, System.Int64)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Compares two 64-bit signed integers for equality and, if they are equal, replaces the first value.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      [SecuritySafeCritical]\n\n      public static long CompareExchange(ref long location1, long value, long comparand)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      <SecuritySafeCritical>\n\n      Public Shared Function CompareExchange(ByRef location1 As Long, value As Long, comparand As Long) As Long\n    parameters:\n    - id: location1\n      type: System.Int64\n      description: \"\\n<p>The destination, whose value is compared with <em>comparand</em> and possibly replaced. </p>\\n\"\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The value that replaces the destination value if the comparison results in equality. </p>\\n\"\n    - id: comparand\n      type: System.Int64\n      description: \"\\n<p>The value that is compared to the value at <em>location1</em>. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The original value in <em>location1</em>.</p>\\n\"\n  exceptions:\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: \"\\n<p>The address of <em>location1</em> is a null pointer. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Interlocked.CompareExchange(ByRef System.Int64, System.Int64, System.Int64)\n  name.vb: CompareExchange(ByRef Int64, Int64, Int64)\n  nameWithType: Interlocked.CompareExchange(ref Int64, Int64, Int64)\n  nameWithType.vb: Interlocked.CompareExchange(ByRef Int64, Int64, Int64)\n- uid: System.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)\n  commentId: M:System.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)\n  id: CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)\n  parent: System.Threading.Interlocked\n  langs:\n  - csharp\n  - vb\n  name: CompareExchange(ref IntPtr, IntPtr, IntPtr)\n  fullName: System.Threading.Interlocked.CompareExchange(ref System.IntPtr, System.IntPtr, System.IntPtr)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Compares two platform-specific handles or pointers for equality and, if they are equal, replaces the first one.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [SecuritySafeCritical]\n\n      public static IntPtr CompareExchange(ref IntPtr location1, IntPtr value, IntPtr comparand)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <SecuritySafeCritical>\n\n      Public Shared Function CompareExchange(ByRef location1 As IntPtr, value As IntPtr, comparand As IntPtr) As IntPtr\n    parameters:\n    - id: location1\n      type: System.IntPtr\n      description: \"\\n<p>The destination <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, whose value is compared with the value of <em>comparand</em> and possibly replaced by <em>value</em>. </p>\\n\"\n    - id: value\n      type: System.IntPtr\n      description: \"\\n<p>The <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that replaces the destination value if the comparison results in equality. </p>\\n\"\n    - id: comparand\n      type: System.IntPtr\n      description: \"\\n<p>The <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is compared to the value at <em>location1</em>. </p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>The original value in <em>location1</em>.</p>\\n\"\n  exceptions:\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: \"\\n<p>The address of <em>location1</em> is a null pointer. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Interlocked.CompareExchange(ByRef System.IntPtr, System.IntPtr, System.IntPtr)\n  name.vb: CompareExchange(ByRef IntPtr, IntPtr, IntPtr)\n  nameWithType: Interlocked.CompareExchange(ref IntPtr, IntPtr, IntPtr)\n  nameWithType.vb: Interlocked.CompareExchange(ByRef IntPtr, IntPtr, IntPtr)\n- uid: System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)\n  commentId: M:System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)\n  id: CompareExchange(System.Object@,System.Object,System.Object)\n  parent: System.Threading.Interlocked\n  langs:\n  - csharp\n  - vb\n  name: CompareExchange(ref Object, Object, Object)\n  fullName: System.Threading.Interlocked.CompareExchange(ref System.Object, System.Object, System.Object)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Compares two objects for reference equality and, if they are equal, replaces the first object.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [SecuritySafeCritical]\n\n      public static object CompareExchange(ref object location1, object value, object comparand)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <SecuritySafeCritical>\n\n      Public Shared Function CompareExchange(ByRef location1 As Object, value As Object, comparand As Object) As Object\n    parameters:\n    - id: location1\n      type: System.Object\n      description: \"\\n<p>The destination object that is compared with <em>comparand</em> and possibly replaced. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object that replaces the destination object if the comparison results in equality. </p>\\n\"\n    - id: comparand\n      type: System.Object\n      description: \"\\n<p>The object that is compared to the object at <em>location1</em>. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The original value in <em>location1</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The address of <em>location1</em> is a null pointer. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Interlocked.CompareExchange(ByRef System.Object, System.Object, System.Object)\n  name.vb: CompareExchange(ByRef Object, Object, Object)\n  nameWithType: Interlocked.CompareExchange(ref Object, Object, Object)\n  nameWithType.vb: Interlocked.CompareExchange(ByRef Object, Object, Object)\n- uid: System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)\n  commentId: M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)\n  id: CompareExchange(System.Single@,System.Single,System.Single)\n  parent: System.Threading.Interlocked\n  langs:\n  - csharp\n  - vb\n  name: CompareExchange(ref Single, Single, Single)\n  fullName: System.Threading.Interlocked.CompareExchange(ref System.Single, System.Single, System.Single)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Compares two single-precision floating point numbers for equality and, if they are equal, replaces the first value.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      [SecuritySafeCritical]\n\n      public static float CompareExchange(ref float location1, float value, float comparand)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      <SecuritySafeCritical>\n\n      Public Shared Function CompareExchange(ByRef location1 As Single, value As Single, comparand As Single) As Single\n    parameters:\n    - id: location1\n      type: System.Single\n      description: \"\\n<p>The destination, whose value is compared with <em>comparand</em> and possibly replaced. </p>\\n\"\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The value that replaces the destination value if the comparison results in equality. </p>\\n\"\n    - id: comparand\n      type: System.Single\n      description: \"\\n<p>The value that is compared to the value at <em>location1</em>. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The original value in <em>location1</em>.</p>\\n\"\n  exceptions:\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: \"\\n<p>The address of <em>location1</em> is a null pointer. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Interlocked.CompareExchange(ByRef System.Single, System.Single, System.Single)\n  name.vb: CompareExchange(ByRef Single, Single, Single)\n  nameWithType: Interlocked.CompareExchange(ref Single, Single, Single)\n  nameWithType.vb: Interlocked.CompareExchange(ByRef Single, Single, Single)\n- uid: System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)\n  commentId: M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)\n  id: CompareExchange``1(``0@,``0,``0)\n  parent: System.Threading.Interlocked\n  langs:\n  - csharp\n  - vb\n  name: CompareExchange<T>(ref T, T, T)\n  fullName: System.Threading.Interlocked.CompareExchange<T>(ref T, T, T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Interlocked.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CompareExchange\n    path: src/mscorlib/src/System/Threading/Interlocked.cs\n    startLine: 172\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Compares two instances of the specified reference type <em>T</em> for equality and, if they are equal, replaces the first one.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [ComVisible(false)]\n\n      [SecuritySafeCritical]\n\n      public static T CompareExchange<T>(ref T location1, T value, T comparand)where T : class\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <ComVisible(False)>\n\n      <SecuritySafeCritical>\n\n      Public Shared Function CompareExchange(Of T As Class)(ByRef location1 As T, value As T, comparand As T) As T\n    parameters:\n    - id: location1\n      type: '{T}'\n      description: \"\\n<p>The destination, whose value is compared with <em>comparand</em> and possibly replaced. This is a reference parameter (<strong>ref</strong> in C#, <strong>ByRef</strong> in Visual Basic). </p>\\n\"\n    - id: value\n      type: '{T}'\n      description: \"\\n<p>The value that replaces the destination value if the comparison results in equality. </p>\\n\"\n    - id: comparand\n      type: '{T}'\n      description: \"\\n<p>The value that is compared to the value at <em>location1</em>. </p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type to be used for <em>location1</em>, <em>value</em>, and <em>comparand</em>. This type must be a reference type.</p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>The original value in <em>location1</em>.</p>\\n\"\n  exceptions:\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: \"\\n<p>The address of <em>location1</em> is a null pointer. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Interlocked.CompareExchange(Of T)(ByRef T, T, T)\n  name.vb: CompareExchange(Of T)(ByRef T, T, T)\n  nameWithType: Interlocked.CompareExchange<T>(ref T, T, T)\n  nameWithType.vb: Interlocked.CompareExchange(Of T)(ByRef T, T, T)\n- uid: System.Threading.Interlocked.Decrement(System.Int32@)\n  commentId: M:System.Threading.Interlocked.Decrement(System.Int32@)\n  id: Decrement(System.Int32@)\n  parent: System.Threading.Interlocked\n  langs:\n  - csharp\n  - vb\n  name: Decrement(ref Int32)\n  fullName: System.Threading.Interlocked.Decrement(ref System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Interlocked.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Decrement\n    path: src/mscorlib/src/System/Threading/Interlocked.cs\n    startLine: 45\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Decrements a specified variable and stores the result, as an atomic operation.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static int Decrement(ref int location)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Function Decrement(ByRef location As Integer) As Integer\n    parameters:\n    - id: location\n      type: System.Int32\n      description: \"\\n<p>The variable whose value is to be decremented. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The decremented value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The address of <em>location</em> is a null pointer. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Interlocked.Decrement(ByRef System.Int32)\n  name.vb: Decrement(ByRef Int32)\n  nameWithType: Interlocked.Decrement(ref Int32)\n  nameWithType.vb: Interlocked.Decrement(ByRef Int32)\n- uid: System.Threading.Interlocked.Decrement(System.Int64@)\n  commentId: M:System.Threading.Interlocked.Decrement(System.Int64@)\n  id: Decrement(System.Int64@)\n  parent: System.Threading.Interlocked\n  langs:\n  - csharp\n  - vb\n  name: Decrement(ref Int64)\n  fullName: System.Threading.Interlocked.Decrement(ref System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Interlocked.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Decrement\n    path: src/mscorlib/src/System/Threading/Interlocked.cs\n    startLine: 51\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Decrements the specified variable and stores the result, as an atomic operation.</p>\\n\"\n  syntax:\n    content: public static long Decrement(ref long location)\n    content.vb: Public Shared Function Decrement(ByRef location As Long) As Long\n    parameters:\n    - id: location\n      type: System.Int64\n      description: \"\\n<p>The variable whose value is to be decremented. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The decremented value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The address of <em>location</em> is a null pointer. </p>\\n\"\n  seealso:\n  - type: System.Threading.Interlocked.Increment(System.Int32@)\n    commentId: M:System.Threading.Interlocked.Increment(System.Int32@)\n  - type: System.Threading.Interlocked.Add(System.Int32@,System.Int32)\n    commentId: M:System.Threading.Interlocked.Add(System.Int32@,System.Int32)\n  - type: System.Threading.Interlocked.Read(System.Int64@)\n    commentId: M:System.Threading.Interlocked.Read(System.Int64@)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Interlocked.Decrement(ByRef System.Int64)\n  name.vb: Decrement(ByRef Int64)\n  nameWithType: Interlocked.Decrement(ref Int64)\n  nameWithType.vb: Interlocked.Decrement(ByRef Int64)\n- uid: System.Threading.Interlocked.Exchange(System.Double@,System.Double)\n  commentId: M:System.Threading.Interlocked.Exchange(System.Double@,System.Double)\n  id: Exchange(System.Double@,System.Double)\n  parent: System.Threading.Interlocked\n  langs:\n  - csharp\n  - vb\n  name: Exchange(ref Double, Double)\n  fullName: System.Threading.Interlocked.Exchange(ref System.Double, System.Double)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Sets a double-precision floating point number to a specified value and returns the original value, as an atomic operation.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      [SecuritySafeCritical]\n\n      public static double Exchange(ref double location1, double value)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      <SecuritySafeCritical>\n\n      Public Shared Function Exchange(ByRef location1 As Double, value As Double) As Double\n    parameters:\n    - id: location1\n      type: System.Double\n      description: \"\\n<p>The variable to set to the specified value. </p>\\n\"\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The value to which the <em>location1</em> parameter is set. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The original value of <em>location1</em>.</p>\\n\"\n  exceptions:\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: \"\\n<p>The address of <em>location1</em> is a null pointer. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Interlocked.Exchange(ByRef System.Double, System.Double)\n  name.vb: Exchange(ByRef Double, Double)\n  nameWithType: Interlocked.Exchange(ref Double, Double)\n  nameWithType.vb: Interlocked.Exchange(ByRef Double, Double)\n- uid: System.Threading.Interlocked.Exchange(System.Int32@,System.Int32)\n  commentId: M:System.Threading.Interlocked.Exchange(System.Int32@,System.Int32)\n  id: Exchange(System.Int32@,System.Int32)\n  parent: System.Threading.Interlocked\n  langs:\n  - csharp\n  - vb\n  name: Exchange(ref Int32, Int32)\n  fullName: System.Threading.Interlocked.Exchange(ref System.Int32, System.Int32)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Sets a 32-bit signed integer to a specified value and returns the original value, as an atomic operation.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [SecuritySafeCritical]\n\n      public static int Exchange(ref int location1, int value)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <SecuritySafeCritical>\n\n      Public Shared Function Exchange(ByRef location1 As Integer, value As Integer) As Integer\n    parameters:\n    - id: location1\n      type: System.Int32\n      description: \"\\n<p>The variable to set to the specified value. </p>\\n\"\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The value to which the <em>location1</em> parameter is set. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The original value of <em>location1</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The address of <em>location1</em> is a null pointer. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Interlocked.Exchange(ByRef System.Int32, System.Int32)\n  name.vb: Exchange(ByRef Int32, Int32)\n  nameWithType: Interlocked.Exchange(ref Int32, Int32)\n  nameWithType.vb: Interlocked.Exchange(ByRef Int32, Int32)\n- uid: System.Threading.Interlocked.Exchange(System.Int64@,System.Int64)\n  commentId: M:System.Threading.Interlocked.Exchange(System.Int64@,System.Int64)\n  id: Exchange(System.Int64@,System.Int64)\n  parent: System.Threading.Interlocked\n  langs:\n  - csharp\n  - vb\n  name: Exchange(ref Int64, Int64)\n  fullName: System.Threading.Interlocked.Exchange(ref System.Int64, System.Int64)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Sets a 64-bit signed integer to a specified value and returns the original value, as an atomic operation.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      [SecuritySafeCritical]\n\n      public static long Exchange(ref long location1, long value)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      <SecuritySafeCritical>\n\n      Public Shared Function Exchange(ByRef location1 As Long, value As Long) As Long\n    parameters:\n    - id: location1\n      type: System.Int64\n      description: \"\\n<p>The variable to set to the specified value. </p>\\n\"\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The value to which the <em>location1</em> parameter is set. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The original value of <em>location1</em>.</p>\\n\"\n  exceptions:\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: \"\\n<p>The address of <em>location1</em> is a null pointer. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Interlocked.Exchange(ByRef System.Int64, System.Int64)\n  name.vb: Exchange(ByRef Int64, Int64)\n  nameWithType: Interlocked.Exchange(ref Int64, Int64)\n  nameWithType.vb: Interlocked.Exchange(ByRef Int64, Int64)\n- uid: System.Threading.Interlocked.Exchange(System.IntPtr@,System.IntPtr)\n  commentId: M:System.Threading.Interlocked.Exchange(System.IntPtr@,System.IntPtr)\n  id: Exchange(System.IntPtr@,System.IntPtr)\n  parent: System.Threading.Interlocked\n  langs:\n  - csharp\n  - vb\n  name: Exchange(ref IntPtr, IntPtr)\n  fullName: System.Threading.Interlocked.Exchange(ref System.IntPtr, System.IntPtr)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Sets a platform-specific handle or pointer to a specified value and returns the original value, as an atomic operation.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [SecuritySafeCritical]\n\n      public static IntPtr Exchange(ref IntPtr location1, IntPtr value)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <SecuritySafeCritical>\n\n      Public Shared Function Exchange(ByRef location1 As IntPtr, value As IntPtr) As IntPtr\n    parameters:\n    - id: location1\n      type: System.IntPtr\n      description: \"\\n<p>The variable to set to the specified value. </p>\\n\"\n    - id: value\n      type: System.IntPtr\n      description: \"\\n<p>The value to which the <em>location1</em> parameter is set. </p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>The original value of <em>location1</em>.</p>\\n\"\n  exceptions:\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: \"\\n<p>The address of <em>location1</em> is a null pointer. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Interlocked.Exchange(ByRef System.IntPtr, System.IntPtr)\n  name.vb: Exchange(ByRef IntPtr, IntPtr)\n  nameWithType: Interlocked.Exchange(ref IntPtr, IntPtr)\n  nameWithType.vb: Interlocked.Exchange(ByRef IntPtr, IntPtr)\n- uid: System.Threading.Interlocked.Exchange(System.Object@,System.Object)\n  commentId: M:System.Threading.Interlocked.Exchange(System.Object@,System.Object)\n  id: Exchange(System.Object@,System.Object)\n  parent: System.Threading.Interlocked\n  langs:\n  - csharp\n  - vb\n  name: Exchange(ref Object, Object)\n  fullName: System.Threading.Interlocked.Exchange(ref System.Object, System.Object)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Sets an object to a specified value and returns a reference to the original object, as an atomic operation.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [SecuritySafeCritical]\n\n      public static object Exchange(ref object location1, object value)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <SecuritySafeCritical>\n\n      Public Shared Function Exchange(ByRef location1 As Object, value As Object) As Object\n    parameters:\n    - id: location1\n      type: System.Object\n      description: \"\\n<p>The variable to set to the specified value. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The value to which the <em>location1</em> parameter is set. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The original value of <em>location1</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The address of <em>location1</em> is a null pointer. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Interlocked.Exchange(ByRef System.Object, System.Object)\n  name.vb: Exchange(ByRef Object, Object)\n  nameWithType: Interlocked.Exchange(ref Object, Object)\n  nameWithType.vb: Interlocked.Exchange(ByRef Object, Object)\n- uid: System.Threading.Interlocked.Exchange(System.Single@,System.Single)\n  commentId: M:System.Threading.Interlocked.Exchange(System.Single@,System.Single)\n  id: Exchange(System.Single@,System.Single)\n  parent: System.Threading.Interlocked\n  langs:\n  - csharp\n  - vb\n  name: Exchange(ref Single, Single)\n  fullName: System.Threading.Interlocked.Exchange(ref System.Single, System.Single)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Sets a single-precision floating point number to a specified value and returns the original value, as an atomic operation.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      [SecuritySafeCritical]\n\n      public static float Exchange(ref float location1, float value)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      <SecuritySafeCritical>\n\n      Public Shared Function Exchange(ByRef location1 As Single, value As Single) As Single\n    parameters:\n    - id: location1\n      type: System.Single\n      description: \"\\n<p>The variable to set to the specified value. </p>\\n\"\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The value to which the <em>location1</em> parameter is set. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The original value of <em>location1</em>.</p>\\n\"\n  exceptions:\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: \"\\n<p>The address of <em>location1</em> is a null pointer. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Interlocked.Exchange(ByRef System.Single, System.Single)\n  name.vb: Exchange(ByRef Single, Single)\n  nameWithType: Interlocked.Exchange(ref Single, Single)\n  nameWithType.vb: Interlocked.Exchange(ByRef Single, Single)\n- uid: System.Threading.Interlocked.Exchange``1(``0@,``0)\n  commentId: M:System.Threading.Interlocked.Exchange``1(``0@,``0)\n  id: Exchange``1(``0@,``0)\n  parent: System.Threading.Interlocked\n  langs:\n  - csharp\n  - vb\n  name: Exchange<T>(ref T, T)\n  fullName: System.Threading.Interlocked.Exchange<T>(ref T, T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Interlocked.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Exchange\n    path: src/mscorlib/src/System/Threading/Interlocked.cs\n    startLine: 93\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Sets a variable of the specified type <em>T</em> to a specified value and returns the original value, as an atomic operation.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [ComVisible(false)]\n\n      [SecuritySafeCritical]\n\n      public static T Exchange<T>(ref T location1, T value)where T : class\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <ComVisible(False)>\n\n      <SecuritySafeCritical>\n\n      Public Shared Function Exchange(Of T As Class)(ByRef location1 As T, value As T) As T\n    parameters:\n    - id: location1\n      type: '{T}'\n      description: \"\\n<p>The variable to set to the specified value. This is a reference parameter (<strong>ref</strong> in C#, <strong>ByRef</strong> in Visual Basic). </p>\\n\"\n    - id: value\n      type: '{T}'\n      description: \"\\n<p>The value to which the <em>location1</em> parameter is set. </p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type to be used for <em>location1</em> and <em>value</em>. This type must be a reference type.</p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>The original value of <em>location1</em>.</p>\\n\"\n  exceptions:\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: \"\\n<p>The address of <em>location1</em> is a null pointer. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Interlocked.Exchange(Of T)(ByRef T, T)\n  name.vb: Exchange(Of T)(ByRef T, T)\n  nameWithType: Interlocked.Exchange<T>(ref T, T)\n  nameWithType.vb: Interlocked.Exchange(Of T)(ByRef T, T)\n- uid: System.Threading.Interlocked.Increment(System.Int32@)\n  commentId: M:System.Threading.Interlocked.Increment(System.Int32@)\n  id: Increment(System.Int32@)\n  parent: System.Threading.Interlocked\n  langs:\n  - csharp\n  - vb\n  name: Increment(ref Int32)\n  fullName: System.Threading.Interlocked.Increment(ref System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Interlocked.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Increment\n    path: src/mscorlib/src/System/Threading/Interlocked.cs\n    startLine: 27\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Increments a specified variable and stores the result, as an atomic operation.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static int Increment(ref int location)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Function Increment(ByRef location As Integer) As Integer\n    parameters:\n    - id: location\n      type: System.Int32\n      description: \"\\n<p>The variable whose value is to be incremented. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The incremented value.</p>\\n\"\n  exceptions:\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: \"\\n<p>The address of <em>location</em> is a null pointer. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Interlocked.Increment(ByRef System.Int32)\n  name.vb: Increment(ByRef Int32)\n  nameWithType: Interlocked.Increment(ref Int32)\n  nameWithType.vb: Interlocked.Increment(ByRef Int32)\n- uid: System.Threading.Interlocked.Increment(System.Int64@)\n  commentId: M:System.Threading.Interlocked.Increment(System.Int64@)\n  id: Increment(System.Int64@)\n  parent: System.Threading.Interlocked\n  langs:\n  - csharp\n  - vb\n  name: Increment(ref Int64)\n  fullName: System.Threading.Interlocked.Increment(ref System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Interlocked.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Increment\n    path: src/mscorlib/src/System/Threading/Interlocked.cs\n    startLine: 33\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Increments a specified variable and stores the result, as an atomic operation.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static long Increment(ref long location)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Function Increment(ByRef location As Long) As Long\n    parameters:\n    - id: location\n      type: System.Int64\n      description: \"\\n<p>The variable whose value is to be incremented. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The incremented value.</p>\\n\"\n  exceptions:\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: \"\\n<p>The address of <em>location</em> is a null pointer. </p>\\n\"\n  seealso:\n  - type: System.Threading.Interlocked.Decrement(System.Int32@)\n    commentId: M:System.Threading.Interlocked.Decrement(System.Int32@)\n  - type: System.Threading.Interlocked.Add(System.Int32@,System.Int32)\n    commentId: M:System.Threading.Interlocked.Add(System.Int32@,System.Int32)\n  - type: System.Threading.Interlocked.Read(System.Int64@)\n    commentId: M:System.Threading.Interlocked.Read(System.Int64@)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Interlocked.Increment(ByRef System.Int64)\n  name.vb: Increment(ByRef Int64)\n  nameWithType: Interlocked.Increment(ref Int64)\n  nameWithType.vb: Interlocked.Increment(ByRef Int64)\n- uid: System.Threading.Interlocked.MemoryBarrier\n  commentId: M:System.Threading.Interlocked.MemoryBarrier\n  id: MemoryBarrier\n  parent: System.Threading.Interlocked\n  langs:\n  - csharp\n  - vb\n  name: MemoryBarrier()\n  fullName: System.Threading.Interlocked.MemoryBarrier()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Interlocked.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MemoryBarrier\n    path: src/mscorlib/src/System/Threading/Interlocked.cs\n    startLine: 227\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Synchronizes memory access as follows: The processor that executes the current thread cannot reorder instructions in such a way that memory accesses before the call to <xref href=\\\"System.Threading.Interlocked.MemoryBarrier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> execute after memory accesses that follow the call to <xref href=\\\"System.Threading.Interlocked.MemoryBarrier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static void MemoryBarrier()\n    content.vb: Public Shared Sub MemoryBarrier\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Interlocked.MemoryBarrier()\n- uid: System.Threading.Interlocked.Read(System.Int64@)\n  commentId: M:System.Threading.Interlocked.Read(System.Int64@)\n  id: Read(System.Int64@)\n  parent: System.Threading.Interlocked\n  langs:\n  - csharp\n  - vb\n  name: Read(ref Int64)\n  fullName: System.Threading.Interlocked.Read(ref System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Interlocked.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Read\n    path: src/mscorlib/src/System/Threading/Interlocked.cs\n    startLine: 221\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Returns a 64-bit value, loaded as an atomic operation.</p>\\n\"\n  syntax:\n    content: public static long Read(ref long location)\n    content.vb: Public Shared Function Read(ByRef location As Long) As Long\n    parameters:\n    - id: location\n      type: System.Int64\n      description: \"\\n<p>The 64-bit value to be loaded.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The loaded value.</p>\\n\"\n  seealso:\n  - type: System.Threading.Interlocked.Increment(System.Int32@)\n    commentId: M:System.Threading.Interlocked.Increment(System.Int32@)\n  - type: System.Threading.Interlocked.Decrement(System.Int32@)\n    commentId: M:System.Threading.Interlocked.Decrement(System.Int32@)\n  - type: System.Threading.Interlocked.Add(System.Int32@,System.Int32)\n    commentId: M:System.Threading.Interlocked.Add(System.Int32@,System.Int32)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Interlocked.Read(ByRef System.Int64)\n  name.vb: Read(ByRef Int64)\n  nameWithType: Interlocked.Read(ref Int64)\n  nameWithType.vb: Interlocked.Read(ByRef Int64)\nreferences:\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  nameWithType: Double\n  commentId: T:System.Double\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  fullName: System.IntPtr\n  nameWithType: IntPtr\n  commentId: T:System.IntPtr\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  nameWithType: Single\n  commentId: T:System.Single\n- uid: '{T}'\n  definition: T\n  name: T\n  fullName: T\n  nameWithType: T\n  commentId: '!:T'\n- uid: T\n  isExternal: false\n  name: T\n  fullName: T\n  nameWithType: T\n- uid: System.NullReferenceException\n  isExternal: false\n  name: NullReferenceException\n  fullName: System.NullReferenceException\n  nameWithType: NullReferenceException\n  commentId: T:System.NullReferenceException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}