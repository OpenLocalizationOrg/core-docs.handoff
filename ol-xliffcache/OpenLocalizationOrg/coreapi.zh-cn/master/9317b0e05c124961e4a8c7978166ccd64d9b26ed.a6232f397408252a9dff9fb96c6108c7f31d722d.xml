{"nodes":[{"pos":[962,970],"content":"UniqueId","needQuote":true,"nodes":[{"content":"UniqueId","pos":[0,8]}]},{"pos":[2029,2039],"content":"UniqueId()","needQuote":true,"nodes":[{"content":"UniqueId()","pos":[0,10]}]},{"pos":[2928,2944],"content":"UniqueId(Byte[])","needQuote":true,"nodes":[{"content":"UniqueId(Byte[])","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;guid&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[3976,4028],"source":"\\n<p>\\n<em>guid</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;guid&lt;/em&gt; provides less than 16 valid bytes.&lt;/p&gt;\\n","pos":[4125,4186],"source":"\\n<p>\\n<em>guid</em> provides less than 16 valid bytes.</p>\\n"},{"pos":[4657,4680],"content":"UniqueId(Byte[], Int32)","needQuote":true,"nodes":[{"content":"UniqueId(Byte[], Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;guid&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[6036,6088],"source":"\\n<p>\\n<em>guid</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; less than zero or greater than the length of the array.&lt;/p&gt;\\n","pos":[6205,6289],"source":"\\n<p>\\n<em>offset</em> less than zero or greater than the length of the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;guid &lt;/em&gt;and&lt;em&gt; offset&lt;/em&gt; provide less than 16 valid bytes.&lt;/p&gt;\\n","pos":[6386,6466],"source":"\\n<p>\\n<em>guid </em>and<em> offset</em> provide less than 16 valid bytes.</p>\\n"},{"pos":[7011,7041],"content":"UniqueId(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"UniqueId(Char[], Int32, Int32)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;Number of array entries to use, starting from &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[8327,8400],"source":"\\n<p>Number of array entries to use, starting from <em>offset</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8519,8572],"source":"\\n<p>\\n<em>chars</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; less than zero or greater than the length of the array.&lt;/p&gt;\\n","pos":[8689,8773],"source":"\\n<p>\\n<em>offset</em> less than zero or greater than the length of the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; less than zero or greater than the length of the array minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[8890,8995],"source":"\\n<p>\\n<em>count</em> less than zero or greater than the length of the array minus <em>offset</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; equals zero.&lt;/p&gt;\\n","pos":[9088,9128],"source":"\\n<p>\\n<em>count</em> equals zero.</p>\\n"},{"pos":[9624,9638],"content":"UniqueId(Guid)","needQuote":true,"nodes":[{"content":"UniqueId(Guid)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;guid&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10604,10656],"source":"\\n<p>\\n<em>guid</em> is <strong>null</strong>.</p>\\n"},{"pos":[10954,10970],"content":"UniqueId(String)","needQuote":true,"nodes":[{"content":"UniqueId(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[11918,11971],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;Length of&lt;em&gt; value&lt;/em&gt; is zero.&lt;/p&gt;\\n","pos":[12064,12108],"source":"\\n<p>Length of<em> value</em> is zero.</p>\\n"},{"pos":[12391,12406],"content":"CharArrayLength","needQuote":true,"nodes":[{"content":"CharArrayLength","pos":[0,15]}]},{"pos":[13631,13637],"content":"IsGuid","needQuote":true,"nodes":[{"content":"IsGuid","pos":[0,6]}]},{"pos":[15007,15021],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare.&lt;/p&gt;\\n","pos":[15822,15855],"source":"\\n<p>The object to compare.</p>\\n"},{"pos":[16437,16450],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[17814,17842],"content":"Equality(UniqueId, UniqueId)","needQuote":true,"nodes":[{"content":"Equality(UniqueId, UniqueId)","pos":[0,28]}]},{"pos":[19774,19804],"content":"Inequality(UniqueId, UniqueId)","needQuote":true,"nodes":[{"content":"Inequality(UniqueId, UniqueId)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the overridden equality operator returns &lt;strong&gt;false&lt;/strong&gt;; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[21042,21178],"source":"\\n<p>\\n<strong>true</strong> if the overridden equality operator returns <strong>false</strong>; otherwise <strong>false</strong>.</p>\\n"},{"pos":[21569,21595],"content":"ToCharArray(Char[], Int32)","needQuote":true,"nodes":[{"content":"ToCharArray(Char[], Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;char&lt;/strong&gt; array.&lt;/p&gt;\\n","pos":[22462,22505],"source":"\\n<p>The <strong>char</strong> array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[23075,23128],"source":"\\n<p>\\n<em>chars</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; less than zero or greater than the length of the array.&lt;/p&gt;\\n","pos":[23245,23329],"source":"\\n<p>\\n<em>offset</em> less than zero or greater than the length of the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;guid &lt;/em&gt;and&lt;em&gt; offset&lt;/em&gt; provide less than 16 valid bytes.&lt;/p&gt;\\n","pos":[23426,23506],"source":"\\n<p>\\n<em>guid </em>and<em> offset</em> provide less than 16 valid bytes.</p>\\n"},{"pos":[23947,23957],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[25250,25275],"content":"TryGetGuid(Byte[], Int32)","needQuote":true,"nodes":[{"content":"TryGetGuid(Byte[], Int32)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[27061,27115],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; less than zero or greater than the length of the array.&lt;/p&gt;\\n","pos":[27232,27316],"source":"\\n<p>\\n<em>offset</em> less than zero or greater than the length of the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer &lt;/em&gt;and&lt;em&gt; offset&lt;/em&gt; provide less than 16 valid bytes.&lt;/p&gt;\\n","pos":[27413,27495],"source":"\\n<p>\\n<em>buffer </em>and<em> offset</em> provide less than 16 valid bytes.</p>\\n"},{"pos":[27980,28000],"content":"TryGetGuid(out Guid)","needQuote":true,"nodes":[{"content":"TryGetGuid(out Guid)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[29419,29473],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer &lt;/em&gt;and&lt;em&gt; offset&lt;/em&gt; provide less than 16 valid bytes.&lt;/p&gt;\\n","pos":[29570,29652],"source":"\\n<p>\\n<em>buffer </em>and<em> offset</em> provide less than 16 valid bytes.</p>\\n"},{"pos":[29966,29976],"content":"System.Xml","needQuote":true,"nodes":[{"content":"System.Xml","pos":[0,10]}]},{"pos":[30119,30125],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30312,30334],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[30482,30488],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[30555,30556],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30606,30612],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30673,30674]},{"pos":[30729,30735],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30795,30796],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30893,30899],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[30966,30967],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31017,31023],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[31084,31085]},{"pos":[31140,31146],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31206,31207],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31452,31483],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[31649,31664],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[31740,31741],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31791,31797],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[31858,31859]},{"pos":[31914,31920],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31980,31981],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32087,32102],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[32178,32179],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32229,32235],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[32296,32297]},{"pos":[32352,32358],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32418,32419],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32645,32654],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[32747,32754],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[32822,32823],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32850,32851],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32920,32927],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[32995,32996],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33023,33024],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33199,33216],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[33325,33340],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[33416,33417],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33444,33445],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33522,33537],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[33613,33614],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33641,33642],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33787,33793],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[33887,33893],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[34013,34017],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[34076,34078]},{"pos":[34141,34145],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[34203,34205],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[34337,34342],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[34447,34453],"content":"Char[]","needQuote":true,"nodes":[{"content":"Char[]","pos":[0,6]}]},{"pos":[34573,34577],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[34636,34638]},{"pos":[34701,34705],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[34763,34765],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[34896,34900],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[35039,35045],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[35191,35198],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[35374,35388],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[35507,35513],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[35580,35581],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35631,35637],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[35697,35698],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35781,35787],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[35854,35855],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35905,35911],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[35971,35972],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36162,36175],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[36276,36287],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[36359,36360],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36387,36388],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36461,36472],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[36544,36545],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36572,36573],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36744,36752],"content":"UniqueId","needQuote":true,"nodes":[{"content":"UniqueId","pos":[0,8]}]},{"pos":[36926,36936],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[37031,37039],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[37108,37109],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37136,37137],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37207,37215],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[37284,37285],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37312,37313],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37466,37487],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[37688,37705],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[37887,37914],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[38131,38146],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]}],"content":"items:\n- uid: System.Xml.UniqueId\n  commentId: T:System.Xml.UniqueId\n  id: UniqueId\n  parent: System.Xml\n  children:\n  - System.Xml.UniqueId.#ctor\n  - System.Xml.UniqueId.#ctor(System.Byte[])\n  - System.Xml.UniqueId.#ctor(System.Byte[],System.Int32)\n  - System.Xml.UniqueId.#ctor(System.Char[],System.Int32,System.Int32)\n  - System.Xml.UniqueId.#ctor(System.Guid)\n  - System.Xml.UniqueId.#ctor(System.String)\n  - System.Xml.UniqueId.CharArrayLength\n  - System.Xml.UniqueId.Equals(System.Object)\n  - System.Xml.UniqueId.GetHashCode\n  - System.Xml.UniqueId.IsGuid\n  - System.Xml.UniqueId.op_Equality(System.Xml.UniqueId,System.Xml.UniqueId)\n  - System.Xml.UniqueId.op_Inequality(System.Xml.UniqueId,System.Xml.UniqueId)\n  - System.Xml.UniqueId.ToCharArray(System.Char[],System.Int32)\n  - System.Xml.UniqueId.ToString\n  - System.Xml.UniqueId.TryGetGuid(System.Byte[],System.Int32)\n  - System.Xml.UniqueId.TryGetGuid(System.Guid@)\n  langs:\n  - csharp\n  - vb\n  name: UniqueId\n  fullName: System.Xml.UniqueId\n  type: Class\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UniqueId\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 89\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>A unique identifier optimized for Guids.</p>\\n\"\n  syntax:\n    content: public class UniqueId\n    content.vb: Public Class UniqueId\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: UniqueId\n- uid: System.Xml.UniqueId.#ctor\n  commentId: M:System.Xml.UniqueId.#ctor\n  id: '#ctor'\n  parent: System.Xml.UniqueId\n  langs:\n  - csharp\n  - vb\n  name: UniqueId()\n  fullName: System.Xml.UniqueId.UniqueId()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 91\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Creates a new instance of this class with a new, unique Guid.</p>\\n\"\n  syntax:\n    content: public UniqueId()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UniqueId.UniqueId()\n- uid: System.Xml.UniqueId.#ctor(System.Byte[])\n  commentId: M:System.Xml.UniqueId.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Xml.UniqueId\n  langs:\n  - csharp\n  - vb\n  name: UniqueId(Byte[])\n  fullName: System.Xml.UniqueId.UniqueId(System.Byte[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 92\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Creates a new instance of this class using a byte array that represents a <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public UniqueId(byte[] guid)\n    content.vb: Public Sub New(guid As Byte())\n    parameters:\n    - id: guid\n      type: System.Byte[]\n      description: \"\\n<p>A byte array that represents a <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>guid</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>guid</em> provides less than 16 valid bytes.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Xml.UniqueId.UniqueId(System.Byte())\n  name.vb: UniqueId(Byte())\n  nameWithType: UniqueId.UniqueId(Byte[])\n  nameWithType.vb: UniqueId.UniqueId(Byte())\n- uid: System.Xml.UniqueId.#ctor(System.Byte[],System.Int32)\n  commentId: M:System.Xml.UniqueId.#ctor(System.Byte[],System.Int32)\n  id: '#ctor(System.Byte[],System.Int32)'\n  parent: System.Xml.UniqueId\n  langs:\n  - csharp\n  - vb\n  name: UniqueId(Byte[], Int32)\n  fullName: System.Xml.UniqueId.UniqueId(System.Byte[], System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 93\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Creates a new instance of this class starting from an offset within a <strong>byte</strong> array that represents a <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public UniqueId(byte[] guid, int offset)\n    content.vb: Public Sub New(guid As Byte(), offset As Integer)\n    parameters:\n    - id: guid\n      type: System.Byte[]\n      description: \"\\n<p>A <strong>byte</strong> array that represents a <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>Offset position within the<strong> byte</strong> array that represents a <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>guid</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> less than zero or greater than the length of the array.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>guid </em>and<em> offset</em> provide less than 16 valid bytes.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Xml.UniqueId.UniqueId(System.Byte(), System.Int32)\n  name.vb: UniqueId(Byte(), Int32)\n  nameWithType: UniqueId.UniqueId(Byte[], Int32)\n  nameWithType.vb: UniqueId.UniqueId(Byte(), Int32)\n- uid: System.Xml.UniqueId.#ctor(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Xml.UniqueId.#ctor(System.Char[],System.Int32,System.Int32)\n  id: '#ctor(System.Char[],System.Int32,System.Int32)'\n  parent: System.Xml.UniqueId\n  langs:\n  - csharp\n  - vb\n  name: UniqueId(Char[], Int32, Int32)\n  fullName: System.Xml.UniqueId.UniqueId(System.Char[], System.Int32, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 94\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Creates a new instance of this class starting from an offset within a <strong>char</strong> using a specified number of entries.</p>\\n\"\n  syntax:\n    content: public UniqueId(char[] chars, int offset, int count)\n    content.vb: Public Sub New(chars As Char(), offset As Integer, count As Integer)\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>A <strong>char</strong> array that represents a <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>Offset position within the <strong>char</strong> array that represents a <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>Number of array entries to use, starting from <em>offset</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> less than zero or greater than the length of the array.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> less than zero or greater than the length of the array minus <em>offset</em>.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>count</em> equals zero.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Xml.UniqueId.UniqueId(System.Char(), System.Int32, System.Int32)\n  name.vb: UniqueId(Char(), Int32, Int32)\n  nameWithType: UniqueId.UniqueId(Char[], Int32, Int32)\n  nameWithType.vb: UniqueId.UniqueId(Char(), Int32, Int32)\n- uid: System.Xml.UniqueId.#ctor(System.Guid)\n  commentId: M:System.Xml.UniqueId.#ctor(System.Guid)\n  id: '#ctor(System.Guid)'\n  parent: System.Xml.UniqueId\n  langs:\n  - csharp\n  - vb\n  name: UniqueId(Guid)\n  fullName: System.Xml.UniqueId.UniqueId(System.Guid)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 95\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Creates a new instance of this class using a <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public UniqueId(Guid guid)\n    content.vb: Public Sub New(guid As Guid)\n    parameters:\n    - id: guid\n      type: System.Guid\n      description: \"\\n<p>A <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>guid</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UniqueId.UniqueId(Guid)\n- uid: System.Xml.UniqueId.#ctor(System.String)\n  commentId: M:System.Xml.UniqueId.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Xml.UniqueId\n  langs:\n  - csharp\n  - vb\n  name: UniqueId(String)\n  fullName: System.Xml.UniqueId.UniqueId(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 96\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Creates a new instance of this class using a string.</p>\\n\"\n  syntax:\n    content: public UniqueId(string value)\n    content.vb: Public Sub New(value As String)\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string used to generate the <xref href=\\\"System.Xml.UniqueId\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>Length of<em> value</em> is zero.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UniqueId.UniqueId(String)\n- uid: System.Xml.UniqueId.CharArrayLength\n  commentId: P:System.Xml.UniqueId.CharArrayLength\n  id: CharArrayLength\n  parent: System.Xml.UniqueId\n  langs:\n  - csharp\n  - vb\n  name: CharArrayLength\n  fullName: System.Xml.UniqueId.CharArrayLength\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CharArrayLength\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 97\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the length of the string representation of the <xref href=\\\"System.Xml.UniqueId\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public int CharArrayLength { get; }\n    content.vb: Public ReadOnly Property CharArrayLength As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The length of the string representation of the <xref href=\\\"System.Xml.UniqueId\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: UniqueId.CharArrayLength\n- uid: System.Xml.UniqueId.IsGuid\n  commentId: P:System.Xml.UniqueId.IsGuid\n  id: IsGuid\n  parent: System.Xml.UniqueId\n  langs:\n  - csharp\n  - vb\n  name: IsGuid\n  fullName: System.Xml.UniqueId.IsGuid\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsGuid\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 98\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Indicates whether the <xref href=\\\"System.Xml.UniqueId\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is a <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool IsGuid { get; }\n    content.vb: Public ReadOnly Property IsGuid As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Xml.UniqueId\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is a <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: UniqueId.IsGuid\n- uid: System.Xml.UniqueId.Equals(System.Object)\n  commentId: M:System.Xml.UniqueId.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Xml.UniqueId\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Xml.UniqueId.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 99\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Tests whether an object equals this <xref href=\\\"System.Xml.UniqueId\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the object equals this <xref href=\\\"System.Xml.UniqueId\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UniqueId.Equals(Object)\n- uid: System.Xml.UniqueId.GetHashCode\n  commentId: M:System.Xml.UniqueId.GetHashCode\n  id: GetHashCode\n  parent: System.Xml.UniqueId\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Xml.UniqueId.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 100\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Creates a hash-code representation of this <xref href=\\\"System.Xml.UniqueId\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer hash-code representation of this <xref href=\\\"System.Xml.UniqueId\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UniqueId.GetHashCode()\n- uid: System.Xml.UniqueId.op_Equality(System.Xml.UniqueId,System.Xml.UniqueId)\n  commentId: M:System.Xml.UniqueId.op_Equality(System.Xml.UniqueId,System.Xml.UniqueId)\n  id: op_Equality(System.Xml.UniqueId,System.Xml.UniqueId)\n  parent: System.Xml.UniqueId\n  langs:\n  - csharp\n  - vb\n  name: Equality(UniqueId, UniqueId)\n  fullName: System.Xml.UniqueId.Equality(System.Xml.UniqueId, System.Xml.UniqueId)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 101\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Overrides the equality operator to test for equality of two <xref href=\\\"System.Xml.UniqueId\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>s.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(UniqueId id1, UniqueId id2)\n    content.vb: Public Shared Operator =(id1 As UniqueId, id2 As UniqueId) As Boolean\n    parameters:\n    - id: id1\n      type: System.Xml.UniqueId\n      description: \"\\n<p>The first <xref href=\\\"System.Xml.UniqueId\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: id2\n      type: System.Xml.UniqueId\n      description: \"\\n<p>The second <xref href=\\\"System.Xml.UniqueId\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two <xref href=\\\"System.Xml.UniqueId\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>s are equal, or are both <strong>null</strong>; <strong>false</strong> if they are not equal, or if only one of them is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: UniqueId.Equality(UniqueId, UniqueId)\n- uid: System.Xml.UniqueId.op_Inequality(System.Xml.UniqueId,System.Xml.UniqueId)\n  commentId: M:System.Xml.UniqueId.op_Inequality(System.Xml.UniqueId,System.Xml.UniqueId)\n  id: op_Inequality(System.Xml.UniqueId,System.Xml.UniqueId)\n  parent: System.Xml.UniqueId\n  langs:\n  - csharp\n  - vb\n  name: Inequality(UniqueId, UniqueId)\n  fullName: System.Xml.UniqueId.Inequality(System.Xml.UniqueId, System.Xml.UniqueId)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 102\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Overrides the equality operator to test for inequality of two <xref href=\\\"System.Xml.UniqueId\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>s.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(UniqueId id1, UniqueId id2)\n    content.vb: Public Shared Operator <>(id1 As UniqueId, id2 As UniqueId) As Boolean\n    parameters:\n    - id: id1\n      type: System.Xml.UniqueId\n      description: \"\\n<p>The first <xref href=\\\"System.Xml.UniqueId\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: id2\n      type: System.Xml.UniqueId\n      description: \"\\n<p>The second <xref href=\\\"System.Xml.UniqueId\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the overridden equality operator returns <strong>false</strong>; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: UniqueId.Inequality(UniqueId, UniqueId)\n- uid: System.Xml.UniqueId.ToCharArray(System.Char[],System.Int32)\n  commentId: M:System.Xml.UniqueId.ToCharArray(System.Char[],System.Int32)\n  id: ToCharArray(System.Char[],System.Int32)\n  parent: System.Xml.UniqueId\n  langs:\n  - csharp\n  - vb\n  name: ToCharArray(Char[], Int32)\n  fullName: System.Xml.UniqueId.ToCharArray(System.Char[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToCharArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 103\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Puts the <xref href=\\\"System.Xml.UniqueId\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value into a <strong>char</strong> array.</p>\\n\"\n  syntax:\n    content: public int ToCharArray(char[] chars, int offset)\n    content.vb: Public Function ToCharArray(chars As Char(), offset As Integer) As Integer\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>The <strong>char</strong> array.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>Position in the <strong>char</strong> array to start inserting the <xref href=\\\"System.Xml.UniqueId\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>Number of entries in the <strong>char</strong> array filled by the <xref href=\\\"System.Xml.UniqueId\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> less than zero or greater than the length of the array.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>guid </em>and<em> offset</em> provide less than 16 valid bytes.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Xml.UniqueId.ToCharArray(System.Char(), System.Int32)\n  name.vb: ToCharArray(Char(), Int32)\n  nameWithType: UniqueId.ToCharArray(Char[], Int32)\n  nameWithType.vb: UniqueId.ToCharArray(Char(), Int32)\n- uid: System.Xml.UniqueId.ToString\n  commentId: M:System.Xml.UniqueId.ToString\n  id: ToString\n  parent: System.Xml.UniqueId\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Xml.UniqueId.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 104\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Displays the <xref href=\\\"System.Xml.UniqueId\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value in string format.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of the <xref href=\\\"System.Xml.UniqueId\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UniqueId.ToString()\n- uid: System.Xml.UniqueId.TryGetGuid(System.Byte[],System.Int32)\n  commentId: M:System.Xml.UniqueId.TryGetGuid(System.Byte[],System.Int32)\n  id: TryGetGuid(System.Byte[],System.Int32)\n  parent: System.Xml.UniqueId\n  langs:\n  - csharp\n  - vb\n  name: TryGetGuid(Byte[], Int32)\n  fullName: System.Xml.UniqueId.TryGetGuid(System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryGetGuid\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 105\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Tries to get the value of the <xref href=\\\"System.Xml.UniqueId\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> as a <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and store it in the given byte array at the specified offest.</p>\\n\"\n  syntax:\n    content: public bool TryGetGuid(byte[] buffer, int offset)\n    content.vb: Public Function TryGetGuid(buffer As Byte(), offset As Integer) As Boolean\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>\\n<strong>byte</strong> array that will contain the <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>Position in the <strong>byte</strong> array to start inserting the <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the value stored in this instance of <xref href=\\\"System.Xml.UniqueId\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is a <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> less than zero or greater than the length of the array.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>buffer </em>and<em> offset</em> provide less than 16 valid bytes.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Xml.UniqueId.TryGetGuid(System.Byte(), System.Int32)\n  name.vb: TryGetGuid(Byte(), Int32)\n  nameWithType: UniqueId.TryGetGuid(Byte[], Int32)\n  nameWithType.vb: UniqueId.TryGetGuid(Byte(), Int32)\n- uid: System.Xml.UniqueId.TryGetGuid(System.Guid@)\n  commentId: M:System.Xml.UniqueId.TryGetGuid(System.Guid@)\n  id: TryGetGuid(System.Guid@)\n  parent: System.Xml.UniqueId\n  langs:\n  - csharp\n  - vb\n  name: TryGetGuid(out Guid)\n  fullName: System.Xml.UniqueId.TryGetGuid(out System.Guid)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryGetGuid\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 106\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Tries to get the value of the <xref href=\\\"System.Xml.UniqueId\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> as a <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool TryGetGuid(out Guid guid)\n    content.vb: Public Function TryGetGuid(ByRef guid As Guid) As Boolean\n    parameters:\n    - id: guid\n      type: System.Guid\n      description: \"\\n<p>The <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if successful; otherwise <xref href=\\\"System.Guid.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the UniqueId represents a <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>buffer </em>and<em> offset</em> provide less than 16 valid bytes.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Xml.UniqueId.TryGetGuid(ByRef System.Guid)\n  name.vb: TryGetGuid(ByRef Guid)\n  nameWithType: UniqueId.TryGetGuid(out Guid)\n  nameWithType.vb: UniqueId.TryGetGuid(ByRef Guid)\nreferences:\n- uid: System.Xml\n  isExternal: false\n  name: System.Xml\n  fullName: System.Xml\n  commentId: N:System.Xml\n  nameWithType: System.Xml\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Char[]\n  name: Char[]\n  fullName: System.Char[]\n  fullname.vb: System.Char()\n  name.vb: Char()\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Char[]\n  nameWithType.vb: Char()\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  fullName: System.Guid\n  commentId: T:System.Guid\n  nameWithType: Guid\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Xml.UniqueId\n  parent: System.Xml\n  isExternal: false\n  name: UniqueId\n  fullName: System.Xml.UniqueId\n  commentId: T:System.Xml.UniqueId\n  nameWithType: UniqueId\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n"}