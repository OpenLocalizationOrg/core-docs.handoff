{"nodes":[{"pos":[2262,2279],"content":"DynamicMetaObject","needQuote":true,"nodes":[{"content":"DynamicMetaObject","pos":[0,17]}]},{"pos":[3589,3605],"content":"EmptyMetaObjects","needQuote":true,"nodes":[{"content":"EmptyMetaObjects","pos":[0,16]}]},{"pos":[5196,5246],"content":"DynamicMetaObject(Expression, BindingRestrictions)","needQuote":true,"nodes":[{"content":"DynamicMetaObject(Expression, BindingRestrictions)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;The set of binding restrictions under which the binding is valid.&lt;/p&gt;\\n","pos":[6456,6532],"source":"\\n<p>The set of binding restrictions under which the binding is valid.</p>\\n"},{"pos":[7124,7182],"content":"DynamicMetaObject(Expression, BindingRestrictions, Object)","needQuote":true,"nodes":[{"content":"DynamicMetaObject(Expression, BindingRestrictions, Object)","pos":[0,58]}]},{"content":"\\n&lt;p&gt;The set of binding restrictions under which the binding is valid.&lt;/p&gt;\\n","pos":[8438,8514],"source":"\\n<p>The set of binding restrictions under which the binding is valid.</p>\\n"},{"pos":[9077,9087],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[10397,10405],"content":"HasValue","needQuote":true,"nodes":[{"content":"HasValue","pos":[0,8]}]},{"pos":[11678,11687],"content":"LimitType","needQuote":true,"nodes":[{"content":"LimitType","pos":[0,9]}]},{"pos":[13060,13072],"content":"Restrictions","needQuote":true,"nodes":[{"content":"Restrictions","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The set of binding restrictions.&lt;/p&gt;\\n","pos":[13841,13884],"source":"\\n<p>The set of binding restrictions.</p>\\n"},{"pos":[14220,14231],"content":"RuntimeType","needQuote":true,"nodes":[{"content":"RuntimeType","pos":[0,11]}]},{"pos":[15554,15559],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[17027,17088],"content":"BindBinaryOperation(BinaryOperationBinder, DynamicMetaObject)","needQuote":true,"nodes":[{"content":"BindBinaryOperation(BinaryOperationBinder, DynamicMetaObject)","pos":[0,61]}]},{"pos":[19211,19237],"content":"BindConvert(ConvertBinder)","needQuote":true,"nodes":[{"content":"BindConvert(ConvertBinder)","pos":[0,26]}]},{"pos":[21060,21121],"content":"BindCreateInstance(CreateInstanceBinder, DynamicMetaObject[])","needQuote":true,"nodes":[{"content":"BindCreateInstance(CreateInstanceBinder, DynamicMetaObject[])","pos":[0,61]}]},{"pos":[23687,23742],"content":"BindDeleteIndex(DeleteIndexBinder, DynamicMetaObject[])","needQuote":true,"nodes":[{"content":"BindDeleteIndex(DeleteIndexBinder, DynamicMetaObject[])","pos":[0,55]}]},{"pos":[26160,26196],"content":"BindDeleteMember(DeleteMemberBinder)","needQuote":true,"nodes":[{"content":"BindDeleteMember(DeleteMemberBinder)","pos":[0,36]}]},{"pos":[28041,28090],"content":"BindGetIndex(GetIndexBinder, DynamicMetaObject[])","needQuote":true,"nodes":[{"content":"BindGetIndex(GetIndexBinder, DynamicMetaObject[])","pos":[0,49]}]},{"pos":[30433,30463],"content":"BindGetMember(GetMemberBinder)","needQuote":true,"nodes":[{"content":"BindGetMember(GetMemberBinder)","pos":[0,30]}]},{"pos":[32260,32305],"content":"BindInvoke(InvokeBinder, DynamicMetaObject[])","needQuote":true,"nodes":[{"content":"BindInvoke(InvokeBinder, DynamicMetaObject[])","pos":[0,45]}]},{"pos":[34723,34780],"content":"BindInvokeMember(InvokeMemberBinder, DynamicMetaObject[])","needQuote":true,"nodes":[{"content":"BindInvokeMember(InvokeMemberBinder, DynamicMetaObject[])","pos":[0,57]}]},{"pos":[37389,37457],"content":"BindSetIndex(SetIndexBinder, DynamicMetaObject[], DynamicMetaObject)","needQuote":true,"nodes":[{"content":"BindSetIndex(SetIndexBinder, DynamicMetaObject[], DynamicMetaObject)","pos":[0,68]}]},{"pos":[40319,40368],"content":"BindSetMember(SetMemberBinder, DynamicMetaObject)","needQuote":true,"nodes":[{"content":"BindSetMember(SetMemberBinder, DynamicMetaObject)","pos":[0,49]}]},{"pos":[42457,42497],"content":"BindUnaryOperation(UnaryOperationBinder)","needQuote":true,"nodes":[{"content":"BindUnaryOperation(UnaryOperationBinder)","pos":[0,40]}]},{"pos":[44290,44316],"content":"Create(Object, Expression)","needQuote":true,"nodes":[{"content":"Create(Object, Expression)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The object to get a meta-object for.&lt;/p&gt;\\n","pos":[45125,45172],"source":"\\n<p>The object to get a meta-object for.</p>\\n"},{"pos":[46387,46410],"content":"GetDynamicMemberNames()","needQuote":true,"nodes":[{"content":"GetDynamicMemberNames()","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The list of dynamic member names.&lt;/p&gt;\\n","pos":[47398,47442],"source":"\\n<p>The list of dynamic member names.</p>\\n"},{"pos":[47650,47664],"content":"System.Dynamic","needQuote":true,"nodes":[{"content":"System.Dynamic","pos":[0,14]}]},{"pos":[47819,47825],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[47985,47995],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[48090,48098],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[48167,48168],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48195,48196],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48266,48274],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[48343,48344],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48371,48372],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48555,48569],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[48688,48694],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[48761,48762],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48812,48818],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[48878,48879],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48962,48968],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[49035,49036],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49086,49092],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[49152,49153],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49367,49389],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[49537,49543],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[49610,49611],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49661,49667],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[49728,49729]},{"pos":[49784,49790],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[49850,49851],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49948,49954],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[50021,50022],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50072,50078],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[50139,50140]},{"pos":[50195,50201],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[50261,50262],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50507,50538],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[50704,50719],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[50795,50796],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50846,50852],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[50913,50914]},{"pos":[50969,50975],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[51035,51036],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51142,51157],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[51233,51234],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51284,51290],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[51351,51352]},{"pos":[51407,51413],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[51473,51474],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51704,51717],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[51818,51829],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[51901,51902],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51929,51930],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52003,52014],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[52086,52087],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52114,52115],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52290,52299],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[52392,52399],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[52467,52468],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52495,52496],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52565,52572],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[52640,52641],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52668,52669],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52844,52861],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[52970,52985],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[53061,53062],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53089,53090],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53167,53182],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[53258,53259],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53286,53287],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53432,53438],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[53553,53572],"content":"DynamicMetaObject[]","needQuote":true,"nodes":[{"content":"DynamicMetaObject[]","pos":[0,19]}]},{"pos":[53768,53785],"content":"DynamicMetaObject","needQuote":true,"nodes":[{"content":"DynamicMetaObject","pos":[0,17]}]},{"content":"[]","pos":[53844,53846]},{"pos":[53930,53947],"content":"DynamicMetaObject","needQuote":true,"nodes":[{"content":"DynamicMetaObject","pos":[0,17]}]},{"pos":[54005,54007],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[54204,54214],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[54434,54453],"content":"BindingRestrictions","needQuote":true,"nodes":[{"content":"BindingRestrictions","pos":[0,19]}]},{"pos":[54646,54669],"content":"System.Linq.Expressions","needQuote":true,"nodes":[{"content":"System.Linq.Expressions","pos":[0,23]}]},{"pos":[54852,54859],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[55005,55009],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[55179,55200],"content":"BinaryOperationBinder","needQuote":true,"nodes":[{"content":"BinaryOperationBinder","pos":[0,21]}]},{"pos":[55433,55450],"content":"DynamicMetaObject","needQuote":true,"nodes":[{"content":"DynamicMetaObject","pos":[0,17]}]},{"pos":[55667,55680],"content":"ConvertBinder","needQuote":true,"nodes":[{"content":"ConvertBinder","pos":[0,13]}]},{"pos":[55892,55912],"content":"CreateInstanceBinder","needQuote":true,"nodes":[{"content":"CreateInstanceBinder","pos":[0,20]}]},{"pos":[56142,56159],"content":"DeleteIndexBinder","needQuote":true,"nodes":[{"content":"DeleteIndexBinder","pos":[0,17]}]},{"pos":[56381,56399],"content":"DeleteMemberBinder","needQuote":true,"nodes":[{"content":"DeleteMemberBinder","pos":[0,18]}]},{"pos":[56620,56634],"content":"GetIndexBinder","needQuote":true,"nodes":[{"content":"GetIndexBinder","pos":[0,14]}]},{"pos":[56844,56859],"content":"GetMemberBinder","needQuote":true,"nodes":[{"content":"GetMemberBinder","pos":[0,15]}]},{"pos":[57069,57081],"content":"InvokeBinder","needQuote":true,"nodes":[{"content":"InvokeBinder","pos":[0,12]}]},{"pos":[57288,57306],"content":"InvokeMemberBinder","needQuote":true,"nodes":[{"content":"InvokeMemberBinder","pos":[0,18]}]},{"pos":[57527,57541],"content":"SetIndexBinder","needQuote":true,"nodes":[{"content":"SetIndexBinder","pos":[0,14]}]},{"pos":[57751,57766],"content":"SetMemberBinder","needQuote":true,"nodes":[{"content":"SetMemberBinder","pos":[0,15]}]},{"pos":[57984,58004],"content":"UnaryOperationBinder","needQuote":true,"nodes":[{"content":"UnaryOperationBinder","pos":[0,20]}]},{"pos":[58302,58321],"content":"IEnumerable<String>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;String&gt;","pos":[0,19],"source":"IEnumerable<String>"}]},{"pos":[58569,58580],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[58644,58645],"content":"<","needQuote":true,"nodes":[]},{"pos":[58695,58701],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[58854,58865],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[58930,58933]},{"pos":[58990,58996],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[59056,59057],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59297,59311],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[59530,59541],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[59605,59606],"content":"<","needQuote":true,"nodes":[]},{"pos":[59633,59634],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[59754,59765],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[59830,59833]},{"pos":[59867,59868],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[59895,59896],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60099,60125],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]}],"content":"items:\n- uid: System.Dynamic.DynamicMetaObject\n  commentId: T:System.Dynamic.DynamicMetaObject\n  id: DynamicMetaObject\n  parent: System.Dynamic\n  children:\n  - System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)\n  - System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)\n  - System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)\n  - System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)\n  - System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])\n  - System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])\n  - System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)\n  - System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])\n  - System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)\n  - System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])\n  - System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])\n  - System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)\n  - System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)\n  - System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)\n  - System.Dynamic.DynamicMetaObject.Create(System.Object,System.Linq.Expressions.Expression)\n  - System.Dynamic.DynamicMetaObject.EmptyMetaObjects\n  - System.Dynamic.DynamicMetaObject.Expression\n  - System.Dynamic.DynamicMetaObject.GetDynamicMemberNames\n  - System.Dynamic.DynamicMetaObject.HasValue\n  - System.Dynamic.DynamicMetaObject.LimitType\n  - System.Dynamic.DynamicMetaObject.Restrictions\n  - System.Dynamic.DynamicMetaObject.RuntimeType\n  - System.Dynamic.DynamicMetaObject.Value\n  langs:\n  - csharp\n  - vb\n  name: DynamicMetaObject\n  fullName: System.Dynamic.DynamicMetaObject\n  type: Class\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DynamicMetaObject\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n    startLine: 14\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Represents the dynamic binding and a binding logic of an object participating in the dynamic binding.</p>\\n\"\n  syntax:\n    content: public class DynamicMetaObject\n    content.vb: Public Class DynamicMetaObject\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: DynamicMetaObject\n- uid: System.Dynamic.DynamicMetaObject.EmptyMetaObjects\n  commentId: F:System.Dynamic.DynamicMetaObject.EmptyMetaObjects\n  id: EmptyMetaObjects\n  parent: System.Dynamic.DynamicMetaObject\n  langs:\n  - csharp\n  - vb\n  name: EmptyMetaObjects\n  fullName: System.Dynamic.DynamicMetaObject.EmptyMetaObjects\n  type: Field\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EmptyMetaObjects\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n    startLine: 25\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Represents an empty array of type <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This field is read only.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Security\", \"CA2105:ArrayFieldsShouldNotBeReadOnly\")]\n\n      public static readonly DynamicMetaObject[] EmptyMetaObjects\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Security\", \"CA2105:ArrayFieldsShouldNotBeReadOnly\")>\n\n      Public Shared ReadOnly EmptyMetaObjects As DynamicMetaObject()\n    return:\n      type: System.Dynamic.DynamicMetaObject[]\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: DynamicMetaObject.EmptyMetaObjects\n- uid: System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)\n  commentId: M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)\n  id: '#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)'\n  parent: System.Dynamic.DynamicMetaObject\n  langs:\n  - csharp\n  - vb\n  name: DynamicMetaObject(Expression, BindingRestrictions)\n  fullName: System.Dynamic.DynamicMetaObject.DynamicMetaObject(System.Linq.Expressions.Expression, System.Dynamic.BindingRestrictions)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n    startLine: 80\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public DynamicMetaObject(Expression expression, BindingRestrictions restrictions)\n    content.vb: Public Sub New(expression As Expression, restrictions As BindingRestrictions)\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The expression representing this <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> during the dynamic binding process.</p>\\n\"\n    - id: restrictions\n      type: System.Dynamic.BindingRestrictions\n      description: \"\\n<p>The set of binding restrictions under which the binding is valid.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DynamicMetaObject.DynamicMetaObject(Expression, BindingRestrictions)\n- uid: System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)\n  commentId: M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)\n  id: '#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)'\n  parent: System.Dynamic.DynamicMetaObject\n  langs:\n  - csharp\n  - vb\n  name: DynamicMetaObject(Expression, BindingRestrictions, Object)\n  fullName: System.Dynamic.DynamicMetaObject.DynamicMetaObject(System.Linq.Expressions.Expression, System.Dynamic.BindingRestrictions, System.Object)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n    startLine: 81\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public DynamicMetaObject(Expression expression, BindingRestrictions restrictions, object value)\n    content.vb: Public Sub New(expression As Expression, restrictions As BindingRestrictions, value As Object)\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The expression representing this <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> during the dynamic binding process.</p>\\n\"\n    - id: restrictions\n      type: System.Dynamic.BindingRestrictions\n      description: \"\\n<p>The set of binding restrictions under which the binding is valid.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The runtime value represented by the <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DynamicMetaObject.DynamicMetaObject(Expression, BindingRestrictions, Object)\n- uid: System.Dynamic.DynamicMetaObject.Expression\n  commentId: P:System.Dynamic.DynamicMetaObject.Expression\n  id: Expression\n  parent: System.Dynamic.DynamicMetaObject\n  langs:\n  - csharp\n  - vb\n  name: Expression\n  fullName: System.Dynamic.DynamicMetaObject.Expression\n  type: Property\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Expression\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n    startLine: 57\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>The expression representing the <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> during the dynamic binding process.</p>\\n\"\n  syntax:\n    content: public Expression Expression { get; }\n    content.vb: Public ReadOnly Property Expression As Expression\n    parameters: []\n    return:\n      type: Expression\n      description: \"\\n<p>The expression representing the <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> during the dynamic binding process.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DynamicMetaObject.Expression\n- uid: System.Dynamic.DynamicMetaObject.HasValue\n  commentId: P:System.Dynamic.DynamicMetaObject.HasValue\n  id: HasValue\n  parent: System.Dynamic.DynamicMetaObject\n  langs:\n  - csharp\n  - vb\n  name: HasValue\n  fullName: System.Dynamic.DynamicMetaObject.HasValue\n  type: Property\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HasValue\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n    startLine: 90\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has the runtime value.</p>\\n\"\n  syntax:\n    content: public bool HasValue { get; }\n    content.vb: Public ReadOnly Property HasValue As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>True if the <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has the runtime value, otherwise false.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DynamicMetaObject.HasValue\n- uid: System.Dynamic.DynamicMetaObject.LimitType\n  commentId: P:System.Dynamic.DynamicMetaObject.LimitType\n  id: LimitType\n  parent: System.Dynamic.DynamicMetaObject\n  langs:\n  - csharp\n  - vb\n  name: LimitType\n  fullName: System.Dynamic.DynamicMetaObject.LimitType\n  type: Property\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LimitType\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n    startLine: 134\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Gets the limit type of the <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public Type LimitType { get; }\n    content.vb: Public ReadOnly Property LimitType As Type\n    parameters: []\n    return:\n      type: System.Type\n      description: \"\\n<p>\\n<xref href=\\\"System.Dynamic.DynamicMetaObject.RuntimeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if runtime value is available, a type of the <xref href=\\\"System.Dynamic.DynamicMetaObject.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> otherwise.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DynamicMetaObject.LimitType\n- uid: System.Dynamic.DynamicMetaObject.Restrictions\n  commentId: P:System.Dynamic.DynamicMetaObject.Restrictions\n  id: Restrictions\n  parent: System.Dynamic.DynamicMetaObject\n  langs:\n  - csharp\n  - vb\n  name: Restrictions\n  fullName: System.Dynamic.DynamicMetaObject.Restrictions\n  type: Property\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Restrictions\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n    startLine: 68\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>The set of binding restrictions under which the binding is valid.</p>\\n\"\n  syntax:\n    content: public BindingRestrictions Restrictions { get; }\n    content.vb: Public ReadOnly Property Restrictions As BindingRestrictions\n    parameters: []\n    return:\n      type: System.Dynamic.BindingRestrictions\n      description: \"\\n<p>The set of binding restrictions.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DynamicMetaObject.Restrictions\n- uid: System.Dynamic.DynamicMetaObject.RuntimeType\n  commentId: P:System.Dynamic.DynamicMetaObject.RuntimeType\n  id: RuntimeType\n  parent: System.Dynamic.DynamicMetaObject\n  langs:\n  - csharp\n  - vb\n  name: RuntimeType\n  fullName: System.Dynamic.DynamicMetaObject.RuntimeType\n  type: Property\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RuntimeType\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n    startLine: 102\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the runtime value or null if the <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has no value associated with it.</p>\\n\"\n  syntax:\n    content: public Type RuntimeType { get; }\n    content.vb: Public ReadOnly Property RuntimeType As Type\n    parameters: []\n    return:\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the runtime value or null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DynamicMetaObject.RuntimeType\n- uid: System.Dynamic.DynamicMetaObject.Value\n  commentId: P:System.Dynamic.DynamicMetaObject.Value\n  id: Value\n  parent: System.Dynamic.DynamicMetaObject\n  langs:\n  - csharp\n  - vb\n  name: Value\n  fullName: System.Dynamic.DynamicMetaObject.Value\n  type: Property\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Value\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n    startLine: 79\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>The runtime value represented by this <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public object Value { get; }\n    content.vb: Public ReadOnly Property Value As Object\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>The runtime value represented by this <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DynamicMetaObject.Value\n- uid: System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)\n  commentId: M:System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)\n  id: BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)\n  parent: System.Dynamic.DynamicMetaObject\n  langs:\n  - csharp\n  - vb\n  name: BindBinaryOperation(BinaryOperationBinder, DynamicMetaObject)\n  fullName: System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder, System.Dynamic.DynamicMetaObject)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BindBinaryOperation\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n    startLine: 277\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Performs the binding of the dynamic binary operation.</p>\\n\"\n  syntax:\n    content: public virtual DynamicMetaObject BindBinaryOperation(BinaryOperationBinder binder, DynamicMetaObject arg)\n    content.vb: Public Overridable Function BindBinaryOperation(binder As BinaryOperationBinder, arg As DynamicMetaObject) As DynamicMetaObject\n    parameters:\n    - id: binder\n      type: System.Dynamic.BinaryOperationBinder\n      description: \"\\n<p>An instance of the <xref href=\\\"System.Dynamic.BinaryOperationBinder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the details of the dynamic operation.</p>\\n\"\n    - id: arg\n      type: System.Dynamic.DynamicMetaObject\n      description: \"\\n<p>An instance of the <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the right hand side of the binary operation.</p>\\n\"\n    return:\n      type: System.Dynamic.DynamicMetaObject\n      description: \"\\n<p>The new <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the result of the binding.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: DynamicMetaObject.BindBinaryOperation(BinaryOperationBinder, DynamicMetaObject)\n- uid: System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)\n  commentId: M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)\n  id: BindConvert(System.Dynamic.ConvertBinder)\n  parent: System.Dynamic.DynamicMetaObject\n  langs:\n  - csharp\n  - vb\n  name: BindConvert(ConvertBinder)\n  fullName: System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BindConvert\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n    startLine: 147\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Performs the binding of the dynamic conversion operation.</p>\\n\"\n  syntax:\n    content: public virtual DynamicMetaObject BindConvert(ConvertBinder binder)\n    content.vb: Public Overridable Function BindConvert(binder As ConvertBinder) As DynamicMetaObject\n    parameters:\n    - id: binder\n      type: System.Dynamic.ConvertBinder\n      description: \"\\n<p>An instance of the <xref href=\\\"System.Dynamic.ConvertBinder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the details of the dynamic operation.</p>\\n\"\n    return:\n      type: System.Dynamic.DynamicMetaObject\n      description: \"\\n<p>The new <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the result of the binding.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: DynamicMetaObject.BindConvert(ConvertBinder)\n- uid: System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])\n  commentId: M:System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])\n  id: BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])\n  parent: System.Dynamic.DynamicMetaObject\n  langs:\n  - csharp\n  - vb\n  name: BindCreateInstance(CreateInstanceBinder, DynamicMetaObject[])\n  fullName: System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder, System.Dynamic.DynamicMetaObject[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BindCreateInstance\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n    startLine: 254\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Performs the binding of the dynamic create instance operation.</p>\\n\"\n  syntax:\n    content: public virtual DynamicMetaObject BindCreateInstance(CreateInstanceBinder binder, DynamicMetaObject[] args)\n    content.vb: Public Overridable Function BindCreateInstance(binder As CreateInstanceBinder, args As DynamicMetaObject()) As DynamicMetaObject\n    parameters:\n    - id: binder\n      type: System.Dynamic.CreateInstanceBinder\n      description: \"\\n<p>An instance of the <xref href=\\\"System.Dynamic.CreateInstanceBinder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the details of the dynamic operation.</p>\\n\"\n    - id: args\n      type: System.Dynamic.DynamicMetaObject[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances - arguments to the create instance operation.</p>\\n\"\n    return:\n      type: System.Dynamic.DynamicMetaObject\n      description: \"\\n<p>The new <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the result of the binding.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder, System.Dynamic.DynamicMetaObject())\n  name.vb: BindCreateInstance(CreateInstanceBinder, DynamicMetaObject())\n  nameWithType: DynamicMetaObject.BindCreateInstance(CreateInstanceBinder, DynamicMetaObject[])\n  nameWithType.vb: DynamicMetaObject.BindCreateInstance(CreateInstanceBinder, DynamicMetaObject())\n- uid: System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])\n  commentId: M:System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])\n  id: BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])\n  parent: System.Dynamic.DynamicMetaObject\n  langs:\n  - csharp\n  - vb\n  name: BindDeleteIndex(DeleteIndexBinder, DynamicMetaObject[])\n  fullName: System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder, System.Dynamic.DynamicMetaObject[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BindDeleteIndex\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n    startLine: 218\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Performs the binding of the dynamic delete index operation.</p>\\n\"\n  syntax:\n    content: public virtual DynamicMetaObject BindDeleteIndex(DeleteIndexBinder binder, DynamicMetaObject[] indexes)\n    content.vb: Public Overridable Function BindDeleteIndex(binder As DeleteIndexBinder, indexes As DynamicMetaObject()) As DynamicMetaObject\n    parameters:\n    - id: binder\n      type: System.Dynamic.DeleteIndexBinder\n      description: \"\\n<p>An instance of the <xref href=\\\"System.Dynamic.DeleteIndexBinder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the details of the dynamic operation.</p>\\n\"\n    - id: indexes\n      type: System.Dynamic.DynamicMetaObject[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances - indexes for the delete index operation.</p>\\n\"\n    return:\n      type: System.Dynamic.DynamicMetaObject\n      description: \"\\n<p>The new <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the result of the binding.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder, System.Dynamic.DynamicMetaObject())\n  name.vb: BindDeleteIndex(DeleteIndexBinder, DynamicMetaObject())\n  nameWithType: DynamicMetaObject.BindDeleteIndex(DeleteIndexBinder, DynamicMetaObject[])\n  nameWithType.vb: DynamicMetaObject.BindDeleteIndex(DeleteIndexBinder, DynamicMetaObject())\n- uid: System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)\n  commentId: M:System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)\n  id: BindDeleteMember(System.Dynamic.DeleteMemberBinder)\n  parent: System.Dynamic.DynamicMetaObject\n  langs:\n  - csharp\n  - vb\n  name: BindDeleteMember(DeleteMemberBinder)\n  fullName: System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BindDeleteMember\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n    startLine: 181\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Performs the binding of the dynamic delete member operation.</p>\\n\"\n  syntax:\n    content: public virtual DynamicMetaObject BindDeleteMember(DeleteMemberBinder binder)\n    content.vb: Public Overridable Function BindDeleteMember(binder As DeleteMemberBinder) As DynamicMetaObject\n    parameters:\n    - id: binder\n      type: System.Dynamic.DeleteMemberBinder\n      description: \"\\n<p>An instance of the <xref href=\\\"System.Dynamic.DeleteMemberBinder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the details of the dynamic operation.</p>\\n\"\n    return:\n      type: System.Dynamic.DynamicMetaObject\n      description: \"\\n<p>The new <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the result of the binding.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: DynamicMetaObject.BindDeleteMember(DeleteMemberBinder)\n- uid: System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])\n  commentId: M:System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])\n  id: BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])\n  parent: System.Dynamic.DynamicMetaObject\n  langs:\n  - csharp\n  - vb\n  name: BindGetIndex(GetIndexBinder, DynamicMetaObject[])\n  fullName: System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder, System.Dynamic.DynamicMetaObject[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BindGetIndex\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n    startLine: 193\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Performs the binding of the dynamic get index operation.</p>\\n\"\n  syntax:\n    content: public virtual DynamicMetaObject BindGetIndex(GetIndexBinder binder, DynamicMetaObject[] indexes)\n    content.vb: Public Overridable Function BindGetIndex(binder As GetIndexBinder, indexes As DynamicMetaObject()) As DynamicMetaObject\n    parameters:\n    - id: binder\n      type: System.Dynamic.GetIndexBinder\n      description: \"\\n<p>An instance of the <xref href=\\\"System.Dynamic.GetIndexBinder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the details of the dynamic operation.</p>\\n\"\n    - id: indexes\n      type: System.Dynamic.DynamicMetaObject[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances - indexes for the get index operation.</p>\\n\"\n    return:\n      type: System.Dynamic.DynamicMetaObject\n      description: \"\\n<p>The new <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the result of the binding.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder, System.Dynamic.DynamicMetaObject())\n  name.vb: BindGetIndex(GetIndexBinder, DynamicMetaObject())\n  nameWithType: DynamicMetaObject.BindGetIndex(GetIndexBinder, DynamicMetaObject[])\n  nameWithType.vb: DynamicMetaObject.BindGetIndex(GetIndexBinder, DynamicMetaObject())\n- uid: System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)\n  commentId: M:System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)\n  id: BindGetMember(System.Dynamic.GetMemberBinder)\n  parent: System.Dynamic.DynamicMetaObject\n  langs:\n  - csharp\n  - vb\n  name: BindGetMember(GetMemberBinder)\n  fullName: System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BindGetMember\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n    startLine: 158\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Performs the binding of the dynamic get member operation.</p>\\n\"\n  syntax:\n    content: public virtual DynamicMetaObject BindGetMember(GetMemberBinder binder)\n    content.vb: Public Overridable Function BindGetMember(binder As GetMemberBinder) As DynamicMetaObject\n    parameters:\n    - id: binder\n      type: System.Dynamic.GetMemberBinder\n      description: \"\\n<p>An instance of the <xref href=\\\"System.Dynamic.GetMemberBinder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the details of the dynamic operation.</p>\\n\"\n    return:\n      type: System.Dynamic.DynamicMetaObject\n      description: \"\\n<p>The new <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the result of the binding.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: DynamicMetaObject.BindGetMember(GetMemberBinder)\n- uid: System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])\n  commentId: M:System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])\n  id: BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])\n  parent: System.Dynamic.DynamicMetaObject\n  langs:\n  - csharp\n  - vb\n  name: BindInvoke(InvokeBinder, DynamicMetaObject[])\n  fullName: System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder, System.Dynamic.DynamicMetaObject[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BindInvoke\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n    startLine: 242\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Performs the binding of the dynamic invoke operation.</p>\\n\"\n  syntax:\n    content: public virtual DynamicMetaObject BindInvoke(InvokeBinder binder, DynamicMetaObject[] args)\n    content.vb: Public Overridable Function BindInvoke(binder As InvokeBinder, args As DynamicMetaObject()) As DynamicMetaObject\n    parameters:\n    - id: binder\n      type: System.Dynamic.InvokeBinder\n      description: \"\\n<p>An instance of the <xref href=\\\"System.Dynamic.InvokeBinder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the details of the dynamic operation.</p>\\n\"\n    - id: args\n      type: System.Dynamic.DynamicMetaObject[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances - arguments to the invoke operation.</p>\\n\"\n    return:\n      type: System.Dynamic.DynamicMetaObject\n      description: \"\\n<p>The new <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the result of the binding.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder, System.Dynamic.DynamicMetaObject())\n  name.vb: BindInvoke(InvokeBinder, DynamicMetaObject())\n  nameWithType: DynamicMetaObject.BindInvoke(InvokeBinder, DynamicMetaObject[])\n  nameWithType.vb: DynamicMetaObject.BindInvoke(InvokeBinder, DynamicMetaObject())\n- uid: System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])\n  commentId: M:System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])\n  id: BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])\n  parent: System.Dynamic.DynamicMetaObject\n  langs:\n  - csharp\n  - vb\n  name: BindInvokeMember(InvokeMemberBinder, DynamicMetaObject[])\n  fullName: System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder, System.Dynamic.DynamicMetaObject[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BindInvokeMember\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n    startLine: 230\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Performs the binding of the dynamic invoke member operation.</p>\\n\"\n  syntax:\n    content: public virtual DynamicMetaObject BindInvokeMember(InvokeMemberBinder binder, DynamicMetaObject[] args)\n    content.vb: Public Overridable Function BindInvokeMember(binder As InvokeMemberBinder, args As DynamicMetaObject()) As DynamicMetaObject\n    parameters:\n    - id: binder\n      type: System.Dynamic.InvokeMemberBinder\n      description: \"\\n<p>An instance of the <xref href=\\\"System.Dynamic.InvokeMemberBinder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the details of the dynamic operation.</p>\\n\"\n    - id: args\n      type: System.Dynamic.DynamicMetaObject[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances - arguments to the invoke member operation.</p>\\n\"\n    return:\n      type: System.Dynamic.DynamicMetaObject\n      description: \"\\n<p>The new <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the result of the binding.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder, System.Dynamic.DynamicMetaObject())\n  name.vb: BindInvokeMember(InvokeMemberBinder, DynamicMetaObject())\n  nameWithType: DynamicMetaObject.BindInvokeMember(InvokeMemberBinder, DynamicMetaObject[])\n  nameWithType.vb: DynamicMetaObject.BindInvokeMember(InvokeMemberBinder, DynamicMetaObject())\n- uid: System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)\n  commentId: M:System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)\n  id: BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)\n  parent: System.Dynamic.DynamicMetaObject\n  langs:\n  - csharp\n  - vb\n  name: BindSetIndex(SetIndexBinder, DynamicMetaObject[], DynamicMetaObject)\n  fullName: System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder, System.Dynamic.DynamicMetaObject[], System.Dynamic.DynamicMetaObject)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BindSetIndex\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n    startLine: 206\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Performs the binding of the dynamic set index operation.</p>\\n\"\n  syntax:\n    content: public virtual DynamicMetaObject BindSetIndex(SetIndexBinder binder, DynamicMetaObject[] indexes, DynamicMetaObject value)\n    content.vb: Public Overridable Function BindSetIndex(binder As SetIndexBinder, indexes As DynamicMetaObject(), value As DynamicMetaObject) As DynamicMetaObject\n    parameters:\n    - id: binder\n      type: System.Dynamic.SetIndexBinder\n      description: \"\\n<p>An instance of the <xref href=\\\"System.Dynamic.SetIndexBinder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the details of the dynamic operation.</p>\\n\"\n    - id: indexes\n      type: System.Dynamic.DynamicMetaObject[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances - indexes for the set index operation.</p>\\n\"\n    - id: value\n      type: System.Dynamic.DynamicMetaObject\n      description: \"\\n<p>The <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the value for the set index operation.</p>\\n\"\n    return:\n      type: System.Dynamic.DynamicMetaObject\n      description: \"\\n<p>The new <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the result of the binding.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder, System.Dynamic.DynamicMetaObject(), System.Dynamic.DynamicMetaObject)\n  name.vb: BindSetIndex(SetIndexBinder, DynamicMetaObject(), DynamicMetaObject)\n  nameWithType: DynamicMetaObject.BindSetIndex(SetIndexBinder, DynamicMetaObject[], DynamicMetaObject)\n  nameWithType.vb: DynamicMetaObject.BindSetIndex(SetIndexBinder, DynamicMetaObject(), DynamicMetaObject)\n- uid: System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)\n  commentId: M:System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)\n  id: BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)\n  parent: System.Dynamic.DynamicMetaObject\n  langs:\n  - csharp\n  - vb\n  name: BindSetMember(SetMemberBinder, DynamicMetaObject)\n  fullName: System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder, System.Dynamic.DynamicMetaObject)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BindSetMember\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n    startLine: 170\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Performs the binding of the dynamic set member operation.</p>\\n\"\n  syntax:\n    content: public virtual DynamicMetaObject BindSetMember(SetMemberBinder binder, DynamicMetaObject value)\n    content.vb: Public Overridable Function BindSetMember(binder As SetMemberBinder, value As DynamicMetaObject) As DynamicMetaObject\n    parameters:\n    - id: binder\n      type: System.Dynamic.SetMemberBinder\n      description: \"\\n<p>An instance of the <xref href=\\\"System.Dynamic.SetMemberBinder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the details of the dynamic operation.</p>\\n\"\n    - id: value\n      type: System.Dynamic.DynamicMetaObject\n      description: \"\\n<p>The <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the value for the set member operation.</p>\\n\"\n    return:\n      type: System.Dynamic.DynamicMetaObject\n      description: \"\\n<p>The new <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the result of the binding.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: DynamicMetaObject.BindSetMember(SetMemberBinder, DynamicMetaObject)\n- uid: System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)\n  commentId: M:System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)\n  id: BindUnaryOperation(System.Dynamic.UnaryOperationBinder)\n  parent: System.Dynamic.DynamicMetaObject\n  langs:\n  - csharp\n  - vb\n  name: BindUnaryOperation(UnaryOperationBinder)\n  fullName: System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BindUnaryOperation\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n    startLine: 265\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Performs the binding of the dynamic unary operation.</p>\\n\"\n  syntax:\n    content: public virtual DynamicMetaObject BindUnaryOperation(UnaryOperationBinder binder)\n    content.vb: Public Overridable Function BindUnaryOperation(binder As UnaryOperationBinder) As DynamicMetaObject\n    parameters:\n    - id: binder\n      type: System.Dynamic.UnaryOperationBinder\n      description: \"\\n<p>An instance of the <xref href=\\\"System.Dynamic.UnaryOperationBinder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the details of the dynamic operation.</p>\\n\"\n    return:\n      type: System.Dynamic.DynamicMetaObject\n      description: \"\\n<p>The new <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the result of the binding.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: DynamicMetaObject.BindUnaryOperation(UnaryOperationBinder)\n- uid: System.Dynamic.DynamicMetaObject.Create(System.Object,System.Linq.Expressions.Expression)\n  commentId: M:System.Dynamic.DynamicMetaObject.Create(System.Object,System.Linq.Expressions.Expression)\n  id: Create(System.Object,System.Linq.Expressions.Expression)\n  parent: System.Dynamic.DynamicMetaObject\n  langs:\n  - csharp\n  - vb\n  name: Create(Object, Expression)\n  fullName: System.Dynamic.DynamicMetaObject.Create(System.Object, System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Create\n    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n    startLine: 100\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Creates a meta-object for the specified object.</p>\\n\"\n  syntax:\n    content: public static DynamicMetaObject Create(object value, Expression expression)\n    content.vb: Public Shared Function Create(value As Object, expression As Expression) As DynamicMetaObject\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to get a meta-object for.</p>\\n\"\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The expression representing this <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> during the dynamic binding process.</p>\\n\"\n    return:\n      type: System.Dynamic.DynamicMetaObject\n      description: \"\\n<p>If the given object implements <xref href=\\\"System.Dynamic.IDynamicMetaObjectProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and is not a remote object from outside the current AppDomain, returns the object's specific meta-object returned by <xref href=\\\"System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. Otherwise a plain new meta-object with no restrictions is created and returned.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DynamicMetaObject.Create(Object, Expression)\n- uid: System.Dynamic.DynamicMetaObject.GetDynamicMemberNames\n  commentId: M:System.Dynamic.DynamicMetaObject.GetDynamicMemberNames\n  id: GetDynamicMemberNames\n  parent: System.Dynamic.DynamicMetaObject\n  langs:\n  - csharp\n  - vb\n  name: GetDynamicMemberNames()\n  fullName: System.Dynamic.DynamicMetaObject.GetDynamicMemberNames()\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetDynamicMemberNames\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicMetaObject.cs\n    startLine: 287\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Returns the enumeration of all dynamic member names.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Design\", \"CA1024:UsePropertiesWhereAppropriate\")]\n\n      public virtual IEnumerable<string> GetDynamicMemberNames()\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Design\", \"CA1024:UsePropertiesWhereAppropriate\")>\n\n      Public Overridable Function GetDynamicMemberNames As IEnumerable(Of String)\n    return:\n      type: System.Collections.Generic.IEnumerable{System.String}\n      description: \"\\n<p>The list of dynamic member names.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: DynamicMetaObject.GetDynamicMemberNames()\nreferences:\n- uid: System.Dynamic\n  isExternal: false\n  name: System.Dynamic\n  fullName: System.Dynamic\n  nameWithType: System.Dynamic\n  commentId: N:System.Dynamic\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Dynamic.DynamicMetaObject[]\n  name: DynamicMetaObject[]\n  fullName: System.Dynamic.DynamicMetaObject[]\n  fullname.vb: System.Dynamic.DynamicMetaObject()\n  name.vb: DynamicMetaObject()\n  spec.csharp:\n  - uid: System.Dynamic.DynamicMetaObject\n    name: DynamicMetaObject\n    fullName: System.Dynamic.DynamicMetaObject\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Dynamic.DynamicMetaObject\n    name: DynamicMetaObject\n    fullName: System.Dynamic.DynamicMetaObject\n  - name: ()\n    fullName: ()\n  nameWithType: DynamicMetaObject[]\n  nameWithType.vb: DynamicMetaObject()\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  fullName: System.Linq.Expressions.Expression\n  nameWithType: Expression\n  commentId: T:System.Linq.Expressions.Expression\n- uid: System.Dynamic.BindingRestrictions\n  parent: System.Dynamic\n  isExternal: false\n  name: BindingRestrictions\n  fullName: System.Dynamic.BindingRestrictions\n  nameWithType: BindingRestrictions\n  commentId: T:System.Dynamic.BindingRestrictions\n- uid: System.Linq.Expressions\n  isExternal: false\n  name: System.Linq.Expressions\n  fullName: System.Linq.Expressions\n  nameWithType: System.Linq.Expressions\n  commentId: N:System.Linq.Expressions\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Dynamic.BinaryOperationBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: BinaryOperationBinder\n  fullName: System.Dynamic.BinaryOperationBinder\n  nameWithType: BinaryOperationBinder\n  commentId: T:System.Dynamic.BinaryOperationBinder\n- uid: System.Dynamic.DynamicMetaObject\n  parent: System.Dynamic\n  isExternal: false\n  name: DynamicMetaObject\n  fullName: System.Dynamic.DynamicMetaObject\n  nameWithType: DynamicMetaObject\n  commentId: T:System.Dynamic.DynamicMetaObject\n- uid: System.Dynamic.ConvertBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: ConvertBinder\n  fullName: System.Dynamic.ConvertBinder\n  nameWithType: ConvertBinder\n  commentId: T:System.Dynamic.ConvertBinder\n- uid: System.Dynamic.CreateInstanceBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: CreateInstanceBinder\n  fullName: System.Dynamic.CreateInstanceBinder\n  nameWithType: CreateInstanceBinder\n  commentId: T:System.Dynamic.CreateInstanceBinder\n- uid: System.Dynamic.DeleteIndexBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: DeleteIndexBinder\n  fullName: System.Dynamic.DeleteIndexBinder\n  nameWithType: DeleteIndexBinder\n  commentId: T:System.Dynamic.DeleteIndexBinder\n- uid: System.Dynamic.DeleteMemberBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: DeleteMemberBinder\n  fullName: System.Dynamic.DeleteMemberBinder\n  nameWithType: DeleteMemberBinder\n  commentId: T:System.Dynamic.DeleteMemberBinder\n- uid: System.Dynamic.GetIndexBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: GetIndexBinder\n  fullName: System.Dynamic.GetIndexBinder\n  nameWithType: GetIndexBinder\n  commentId: T:System.Dynamic.GetIndexBinder\n- uid: System.Dynamic.GetMemberBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: GetMemberBinder\n  fullName: System.Dynamic.GetMemberBinder\n  nameWithType: GetMemberBinder\n  commentId: T:System.Dynamic.GetMemberBinder\n- uid: System.Dynamic.InvokeBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: InvokeBinder\n  fullName: System.Dynamic.InvokeBinder\n  nameWithType: InvokeBinder\n  commentId: T:System.Dynamic.InvokeBinder\n- uid: System.Dynamic.InvokeMemberBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: InvokeMemberBinder\n  fullName: System.Dynamic.InvokeMemberBinder\n  nameWithType: InvokeMemberBinder\n  commentId: T:System.Dynamic.InvokeMemberBinder\n- uid: System.Dynamic.SetIndexBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: SetIndexBinder\n  fullName: System.Dynamic.SetIndexBinder\n  nameWithType: SetIndexBinder\n  commentId: T:System.Dynamic.SetIndexBinder\n- uid: System.Dynamic.SetMemberBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: SetMemberBinder\n  fullName: System.Dynamic.SetMemberBinder\n  nameWithType: SetMemberBinder\n  commentId: T:System.Dynamic.SetMemberBinder\n- uid: System.Dynamic.UnaryOperationBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: UnaryOperationBinder\n  fullName: System.Dynamic.UnaryOperationBinder\n  nameWithType: UnaryOperationBinder\n  commentId: T:System.Dynamic.UnaryOperationBinder\n- uid: System.Collections.Generic.IEnumerable{System.String}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<String>\n  fullName: System.Collections.Generic.IEnumerable<System.String>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.String)\n  name.vb: IEnumerable(Of String)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<String>\n  nameWithType.vb: IEnumerable(Of String)\n  commentId: T:System.Collections.Generic.IEnumerable{System.String}\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable`1\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n"}