{"nodes":[{"pos":[209,229],"content":"IOCompletionCallback","needQuote":true,"nodes":[{"content":"IOCompletionCallback","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The error code.","pos":[1297,1317],"source":"\\n<p>The error code."},{"content":"&lt;/p&gt;\\n","pos":[1318,1324],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes that are transferred.","pos":[1391,1437],"source":"\\n<p>The number of bytes that are transferred."},{"content":"&lt;/p&gt;\\n","pos":[1438,1444],"source":" </p>\\n"},{"pos":[2418,2434],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[2767,2782],"content":"GetMethodInfo()","needQuote":true,"nodes":[{"content":"GetMethodInfo()","pos":[0,15]}]},{"pos":[2951,2964],"content":"GetMethodInfo","needQuote":true,"nodes":[{"content":"GetMethodInfo","pos":[0,13]}]},{"pos":[3049,3050],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[3077,3078],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[3185,3198],"content":"GetMethodInfo","needQuote":true,"nodes":[{"content":"GetMethodInfo","pos":[0,13]}]},{"pos":[3283,3284],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[3311,3312],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[3547,3553],"content":"UInt32","needQuote":true,"nodes":[{"content":"UInt32","pos":[0,6]}]},{"pos":[3682,3699],"content":"NativeOverlapped*","needQuote":true,"nodes":[{"content":"NativeOverlapped*","pos":[0,17]}]},{"pos":[3815,3831],"content":"NativeOverlapped","needQuote":true,"nodes":[{"content":"NativeOverlapped","pos":[0,16]}]},{"pos":[3976,3992],"content":"NativeOverlapped","needQuote":true,"nodes":[{"content":"NativeOverlapped","pos":[0,16]}]},{"pos":[4218,4241],"content":"GetMethodInfo(Delegate)","needQuote":true,"nodes":[{"content":"GetMethodInfo(Delegate)","pos":[0,23]}]},{"pos":[4442,4455],"content":"GetMethodInfo","needQuote":true,"nodes":[{"content":"GetMethodInfo","pos":[0,13]}]},{"pos":[4540,4541],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[4593,4601],"content":"Delegate","needQuote":true,"nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[4663,4664],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[4788,4801],"content":"GetMethodInfo","needQuote":true,"nodes":[{"content":"GetMethodInfo","pos":[0,13]}]},{"pos":[4886,4887],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[4939,4947],"content":"Delegate","needQuote":true,"nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[5009,5010],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[5296,5323],"content":"RuntimeReflectionExtensions","needQuote":true,"nodes":[{"content":"RuntimeReflectionExtensions","pos":[0,27]}]},{"pos":[5529,5535],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[5653,5670],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]}],"content":"items:\n- uid: System.Threading.IOCompletionCallback\n  commentId: T:System.Threading.IOCompletionCallback\n  id: IOCompletionCallback\n  parent: System.Threading\n  children: []\n  langs:\n  - csharp\n  - vb\n  name: IOCompletionCallback\n  fullName: System.Threading.IOCompletionCallback\n  type: Delegate\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/ThreadPool.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IOCompletionCallback\n    path: src/mscorlib/src/System/Threading/ThreadPool.cs\n    startLine: 1385\n  assemblies:\n  - System.Threading.Overlapped\n  namespace: System.Threading\n  summary: \"\\n<p>Receives the error code, number of bytes, and overlapped value type when an I/O operation completes on the thread pool.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      [ComVisible(true)]\n\n      public delegate void IOCompletionCallback(uint errorCode, uint numBytes, NativeOverlapped*pOVERLAP);\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      <ComVisible(True)>\n\n      Public Delegate Sub IOCompletionCallback(errorCode As UInteger, numBytes As UInteger, pOVERLAP As NativeOverlapped *)\n    parameters:\n    - id: errorCode\n      type: System.UInt32\n      description: \"\\n<p>The error code. </p>\\n\"\n    - id: numBytes\n      type: System.UInt32\n      description: \"\\n<p>The number of bytes that are transferred. </p>\\n\"\n    - id: pOVERLAP\n      type: System.Threading.NativeOverlapped*\n      description: \"\\n<p>A <xref href=\\\"System.Threading.NativeOverlapped\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing an unmanaged pointer to the native overlapped value type. </p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - delegate\n  modifiers.vb:\n  - Public\n  - Delegate\n  nameWithType: IOCompletionCallback\n  extensionMethods:\n  - System.Delegate.System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\nreferences:\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.Delegate.System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n  parent: System.Reflection.RuntimeReflectionExtensions\n  definition: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  name: GetMethodInfo()\n  fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo()\n  spec.csharp:\n  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n    name: GetMethodInfo\n    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n    name: GetMethodInfo\n    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: RuntimeReflectionExtensions.GetMethodInfo()\n  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  fullName: System.UInt32\n  nameWithType: UInt32\n  commentId: T:System.UInt32\n- uid: System.Threading.NativeOverlapped*\n  name: NativeOverlapped*\n  fullName: System.Threading.NativeOverlapped*\n  spec.csharp:\n  - uid: System.Threading.NativeOverlapped\n    name: NativeOverlapped\n    fullName: System.Threading.NativeOverlapped\n  - name: '*'\n    fullName: '*'\n  spec.vb:\n  - uid: System.Threading.NativeOverlapped\n    name: NativeOverlapped\n    fullName: System.Threading.NativeOverlapped\n  - name: '*'\n    fullName: '*'\n  nameWithType: NativeOverlapped*\n- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  isExternal: true\n  name: GetMethodInfo(Delegate)\n  fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  spec.csharp:\n  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n    name: GetMethodInfo\n    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n  - name: (\n    fullName: (\n  - uid: System.Delegate\n    name: Delegate\n    fullName: System.Delegate\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n    name: GetMethodInfo\n    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n  - name: (\n    fullName: (\n  - uid: System.Delegate\n    name: Delegate\n    fullName: System.Delegate\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n- uid: System.Reflection.RuntimeReflectionExtensions\n  parent: System.Reflection\n  isExternal: false\n  name: RuntimeReflectionExtensions\n  fullName: System.Reflection.RuntimeReflectionExtensions\n  nameWithType: RuntimeReflectionExtensions\n  commentId: T:System.Reflection.RuntimeReflectionExtensions\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n"}