{"nodes":[{"pos":[310,322],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"pos":[1187,1197],"content":"AsyncState","needQuote":true,"nodes":[{"content":"AsyncState","pos":[0,10]}]},{"content":"\\n&lt;p&gt;A user-defined object that qualifies or contains information about an asynchronous operation.&lt;/p&gt;\\n","pos":[1848,1952],"source":"\\n<p>A user-defined object that qualifies or contains information about an asynchronous operation.</p>\\n"},{"pos":[2312,2327],"content":"AsyncWaitHandle","needQuote":true,"nodes":[{"content":"AsyncWaitHandle","pos":[0,15]}]},{"pos":[3550,3572],"content":"CompletedSynchronously","needQuote":true,"nodes":[{"content":"CompletedSynchronously","pos":[0,22]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the asynchronous operation completed synchronously; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[4260,4384],"source":"\\n<p>\\n<strong>true</strong> if the asynchronous operation completed synchronously; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[4664,4675],"content":"IsCompleted","needQuote":true,"nodes":[{"content":"IsCompleted","pos":[0,11]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the operation is complete; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[5309,5408],"source":"\\n<p>\\n<strong>true</strong> if the operation is complete; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[5562,5568],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[5699,5705],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5874,5884],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[6047,6063],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[6225,6232],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]}],"content":"items:\n- uid: System.IAsyncResult\n  commentId: T:System.IAsyncResult\n  id: IAsyncResult\n  parent: System\n  children:\n  - System.IAsyncResult.AsyncState\n  - System.IAsyncResult.AsyncWaitHandle\n  - System.IAsyncResult.CompletedSynchronously\n  - System.IAsyncResult.IsCompleted\n  langs:\n  - csharp\n  - vb\n  name: IAsyncResult\n  fullName: System.IAsyncResult\n  type: Interface\n  source:\n    remote:\n      path: src/mscorlib/src/System/IAsyncResult.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IAsyncResult\n    path: src/mscorlib/src/System/IAsyncResult.cs\n    startLine: 16\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents the status of an asynchronous operation. </p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public interface IAsyncResult\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Interface IAsyncResult\n  modifiers.csharp:\n  - public\n  - interface\n  modifiers.vb:\n  - Public\n  - Interface\n  nameWithType: IAsyncResult\n- uid: System.IAsyncResult.AsyncState\n  commentId: P:System.IAsyncResult.AsyncState\n  id: AsyncState\n  parent: System.IAsyncResult\n  langs:\n  - csharp\n  - vb\n  name: AsyncState\n  fullName: System.IAsyncResult.AsyncState\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IAsyncResult.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AsyncState\n    path: src/mscorlib/src/System/IAsyncResult.cs\n    startLine: 24\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets a user-defined object that qualifies or contains information about an asynchronous operation.</p>\\n\"\n  syntax:\n    content: object AsyncState { get; }\n    content.vb: ReadOnly Property AsyncState As Object\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>A user-defined object that qualifies or contains information about an asynchronous operation.</p>\\n\"\n  seealso:\n  - type: System.AsyncCallback\n    commentId: T:System.AsyncCallback\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  nameWithType: IAsyncResult.AsyncState\n- uid: System.IAsyncResult.AsyncWaitHandle\n  commentId: P:System.IAsyncResult.AsyncWaitHandle\n  id: AsyncWaitHandle\n  parent: System.IAsyncResult\n  langs:\n  - csharp\n  - vb\n  name: AsyncWaitHandle\n  fullName: System.IAsyncResult.AsyncWaitHandle\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IAsyncResult.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AsyncWaitHandle\n    path: src/mscorlib/src/System/IAsyncResult.cs\n    startLine: 21\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Threading.WaitHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is used to wait for an asynchronous operation to complete.</p>\\n\"\n  syntax:\n    content: WaitHandle AsyncWaitHandle { get; }\n    content.vb: ReadOnly Property AsyncWaitHandle As WaitHandle\n    parameters: []\n    return:\n      type: System.Threading.WaitHandle\n      description: \"\\n<p>A <xref href=\\\"System.Threading.WaitHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is used to wait for an asynchronous operation to complete.</p>\\n\"\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  nameWithType: IAsyncResult.AsyncWaitHandle\n- uid: System.IAsyncResult.CompletedSynchronously\n  commentId: P:System.IAsyncResult.CompletedSynchronously\n  id: CompletedSynchronously\n  parent: System.IAsyncResult\n  langs:\n  - csharp\n  - vb\n  name: CompletedSynchronously\n  fullName: System.IAsyncResult.CompletedSynchronously\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IAsyncResult.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CompletedSynchronously\n    path: src/mscorlib/src/System/IAsyncResult.cs\n    startLine: 26\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets a value that indicates whether the asynchronous operation completed synchronously.</p>\\n\"\n  syntax:\n    content: bool CompletedSynchronously { get; }\n    content.vb: ReadOnly Property CompletedSynchronously As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the asynchronous operation completed synchronously; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  nameWithType: IAsyncResult.CompletedSynchronously\n- uid: System.IAsyncResult.IsCompleted\n  commentId: P:System.IAsyncResult.IsCompleted\n  id: IsCompleted\n  parent: System.IAsyncResult\n  langs:\n  - csharp\n  - vb\n  name: IsCompleted\n  fullName: System.IAsyncResult.IsCompleted\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IAsyncResult.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsCompleted\n    path: src/mscorlib/src/System/IAsyncResult.cs\n    startLine: 19\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets a value that indicates whether the asynchronous operation has completed.</p>\\n\"\n  syntax:\n    content: bool IsCompleted { get; }\n    content.vb: ReadOnly Property IsCompleted As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the operation is complete; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  nameWithType: IAsyncResult.IsCompleted\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Threading.WaitHandle\n  parent: System.Threading\n  isExternal: false\n  name: WaitHandle\n  fullName: System.Threading.WaitHandle\n  nameWithType: WaitHandle\n  commentId: T:System.Threading.WaitHandle\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n"}