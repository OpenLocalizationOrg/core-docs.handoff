{"nodes":[{"pos":[414,423],"content":"NameTable","needQuote":true,"nodes":[{"content":"NameTable","pos":[0,9]}]},{"pos":[1701,1712],"content":"NameTable()","needQuote":true,"nodes":[{"content":"NameTable()","pos":[0,11]}]},{"pos":[2640,2665],"content":"Add(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Add(Char[], Int32, Int32)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The character array containing the string to add.","pos":[3453,3507],"source":"\\n<p>The character array containing the string to add."},{"content":"&lt;/p&gt;\\n","pos":[3508,3514],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index into the array specifying the first character of the string.","pos":[3577,3663],"source":"\\n<p>The zero-based index into the array specifying the first character of the string."},{"content":"&lt;/p&gt;\\n","pos":[3664,3670],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters in the string.","pos":[3731,3775],"source":"\\n<p>The number of characters in the string."},{"content":"&lt;/p&gt;\\n","pos":[3776,3782],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The atomized string or the existing string if one already exists in the &lt;strong&gt;NameTable&lt;/strong&gt;.","pos":[3842,3946],"source":"\\n<p>The atomized string or the existing string if one already exists in the <strong>NameTable</strong>."},{"content":"If &lt;em&gt;len&lt;/em&gt; is zero, String.Empty is returned.&lt;/p&gt;\\n","pos":[3947,4003],"source":" If <em>len</em> is zero, String.Empty is returned.</p>\\n"},{"content":"\\n&lt;p&gt;0 &gt; &lt;em&gt;start&lt;/em&gt;&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;start&lt;/em&gt; &gt;= &lt;em&gt;key&lt;/em&gt;.Length &lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;len&lt;/em&gt; &gt;= &lt;em&gt;key&lt;/em&gt;.Length &lt;/p&gt;\\n&lt;p&gt;The above conditions do not cause an exception to be thrown if &lt;em&gt;len&lt;/em&gt; =0.","pos":[4211,4446],"source":"\\n<p>0 > <em>start</em></p>\\n<p>-or- </p>\\n<p>\\n<em>start</em> >= <em>key</em>.Length </p>\\n<p>-or- </p>\\n<p>\\n<em>len</em> >= <em>key</em>.Length </p>\\n<p>The above conditions do not cause an exception to be thrown if <em>len</em> =0."},{"content":"&lt;/p&gt;\\n","pos":[4447,4453],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;len&lt;/em&gt; &lt; 0.","pos":[4570,4594],"source":"\\n<p>\\n<em>len</em> < 0."},{"content":"&lt;/p&gt;\\n","pos":[4595,4601],"source":" </p>\\n"},{"pos":[5108,5119],"content":"Add(String)","needQuote":true,"nodes":[{"content":"Add(String)","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The string to add.","pos":[5825,5848],"source":"\\n<p>The string to add."},{"content":"&lt;/p&gt;\\n","pos":[5849,5855],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The atomized string or the existing string if it already exists in the &lt;strong&gt;NameTable&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[5915,6024],"source":"\\n<p>The atomized string or the existing string if it already exists in the <strong>NameTable</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[6200,6245],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[6246,6252],"source":" </p>\\n"},{"pos":[6648,6673],"content":"Get(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Get(Char[], Int32, Int32)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The character array containing the name to find.","pos":[7497,7550],"source":"\\n<p>The character array containing the name to find."},{"content":"&lt;/p&gt;\\n","pos":[7551,7557],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index into the array specifying the first character of the name.","pos":[7620,7704],"source":"\\n<p>The zero-based index into the array specifying the first character of the name."},{"content":"&lt;/p&gt;\\n","pos":[7705,7711],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters in the name.","pos":[7772,7814],"source":"\\n<p>The number of characters in the name."},{"content":"&lt;/p&gt;\\n","pos":[7815,7821],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The atomized string or &lt;strong&gt;null&lt;/strong&gt; if the string has not already been atomized.","pos":[7881,7975],"source":"\\n<p>The atomized string or <strong>null</strong> if the string has not already been atomized."},{"content":"If &lt;em&gt;len&lt;/em&gt; is zero, String.Empty is returned.&lt;/p&gt;\\n","pos":[7976,8032],"source":" If <em>len</em> is zero, String.Empty is returned.</p>\\n"},{"content":"\\n&lt;p&gt;0 &gt; &lt;em&gt;start&lt;/em&gt;&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;start&lt;/em&gt; &gt;= &lt;em&gt;key&lt;/em&gt;.Length &lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;len&lt;/em&gt; &gt;= &lt;em&gt;key&lt;/em&gt;.Length &lt;/p&gt;\\n&lt;p&gt;The above conditions do not cause an exception to be thrown if &lt;em&gt;len&lt;/em&gt; =0.","pos":[8240,8475],"source":"\\n<p>0 > <em>start</em></p>\\n<p>-or- </p>\\n<p>\\n<em>start</em> >= <em>key</em>.Length </p>\\n<p>-or- </p>\\n<p>\\n<em>len</em> >= <em>key</em>.Length </p>\\n<p>The above conditions do not cause an exception to be thrown if <em>len</em> =0."},{"content":"&lt;/p&gt;\\n","pos":[8476,8482],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;len&lt;/em&gt; &lt; 0.","pos":[8599,8623],"source":"\\n<p>\\n<em>len</em> < 0."},{"content":"&lt;/p&gt;\\n","pos":[8624,8630],"source":" </p>\\n"},{"pos":[9137,9148],"content":"Get(String)","needQuote":true,"nodes":[{"content":"Get(String)","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The name to find.","pos":[9834,9856],"source":"\\n<p>The name to find."},{"content":"&lt;/p&gt;\\n","pos":[9857,9863],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The atomized string object or &lt;strong&gt;null&lt;/strong&gt; if the string has not already been atomized.&lt;/p&gt;\\n","pos":[9923,10030],"source":"\\n<p>The atomized string object or <strong>null</strong> if the string has not already been atomized.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[10206,10253],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[10254,10260],"source":" </p>\\n"},{"pos":[10443,10453],"content":"System.Xml","needQuote":true,"nodes":[{"content":"System.Xml","pos":[0,10]}]},{"pos":[10596,10602],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10761,10773],"content":"XmlNameTable","needQuote":true,"nodes":[{"content":"XmlNameTable","pos":[0,12]}]},{"pos":[10959,10969],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[11064,11072],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[11141,11142],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11169,11170],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11240,11248],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[11317,11318],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11345,11346],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11529,11543],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[11662,11668],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11735,11736],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11786,11792],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11852,11853],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11936,11942],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12009,12010],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12060,12066],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12126,12127],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12341,12363],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[12511,12517],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12584,12585],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12635,12641],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12702,12703]},{"pos":[12758,12764],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12824,12825],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12922,12928],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12995,12996],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13046,13052],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13113,13114]},{"pos":[13169,13175],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13235,13236],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13481,13512],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[13678,13693],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[13769,13770],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13820,13826],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13887,13888]},{"pos":[13943,13949],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14009,14010],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14116,14131],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[14207,14208],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14258,14264],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14325,14326]},{"pos":[14381,14387],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14447,14448],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14678,14691],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[14792,14803],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[14875,14876],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14903,14904],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14977,14988],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[15060,15061],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15088,15089],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15264,15273],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[15366,15373],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[15441,15442],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15469,15470],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15539,15546],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[15614,15615],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15642,15643],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15818,15835],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[15944,15959],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[16035,16036],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16063,16064],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16141,16156],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[16232,16233],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16260,16261],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16406,16412],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[16614,16639],"content":"Add(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Add(Char[], Int32, Int32)","pos":[0,25]}]},{"pos":[16949,16952],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[17005,17006],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17054,17058],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[17117,17119]},{"content":",","pos":[17151,17152]},{"pos":[17206,17211],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[17271,17272]},{"pos":[17326,17331],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[17390,17391],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17507,17510],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[17563,17564],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17612,17616],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[17674,17676],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[17705,17706]},{"pos":[17760,17765],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[17825,17826]},{"pos":[17880,17885],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[17944,17945],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18188,18194],"content":"Char[]","needQuote":true,"nodes":[{"content":"Char[]","pos":[0,6]}]},{"pos":[18314,18318],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[18377,18379]},{"pos":[18442,18446],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[18504,18506],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[18638,18643],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[18785,18791],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[18981,18992],"content":"Add(String)","needQuote":true,"nodes":[{"content":"Add(String)","pos":[0,11]}]},{"pos":[19125,19128],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[19181,19182],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19232,19238],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[19298,19299],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19389,19392],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[19445,19446],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19496,19502],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[19562,19563],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19816,19841],"content":"Get(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Get(Char[], Int32, Int32)","pos":[0,25]}]},{"pos":[20151,20154],"content":"Get","needQuote":true,"nodes":[{"content":"Get","pos":[0,3]}]},{"pos":[20207,20208],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20256,20260],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[20319,20321]},{"content":",","pos":[20353,20354]},{"pos":[20408,20413],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[20473,20474]},{"pos":[20528,20533],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[20592,20593],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20709,20712],"content":"Get","needQuote":true,"nodes":[{"content":"Get","pos":[0,3]}]},{"pos":[20765,20766],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20814,20818],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[20876,20878],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[20907,20908]},{"pos":[20962,20967],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[21027,21028]},{"pos":[21082,21087],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[21146,21147],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21472,21483],"content":"Get(String)","needQuote":true,"nodes":[{"content":"Get(String)","pos":[0,11]}]},{"pos":[21616,21619],"content":"Get","needQuote":true,"nodes":[{"content":"Get","pos":[0,3]}]},{"pos":[21672,21673],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21723,21729],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[21789,21790],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21880,21883],"content":"Get","needQuote":true,"nodes":[{"content":"Get","pos":[0,3]}]},{"pos":[21936,21937],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21987,21993],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[22053,22054],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22237,22261],"content":"IndexOutOfRangeException","needQuote":true,"nodes":[{"content":"IndexOutOfRangeException","pos":[0,24]}]},{"pos":[22464,22491],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[22697,22718],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Xml.NameTable\n  commentId: T:System.Xml.NameTable\n  id: NameTable\n  parent: System.Xml\n  children:\n  - System.Xml.NameTable.#ctor\n  - System.Xml.NameTable.Add(System.Char[],System.Int32,System.Int32)\n  - System.Xml.NameTable.Add(System.String)\n  - System.Xml.NameTable.Get(System.Char[],System.Int32,System.Int32)\n  - System.Xml.NameTable.Get(System.String)\n  langs:\n  - csharp\n  - vb\n  name: NameTable\n  fullName: System.Xml.NameTable\n  type: Class\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NameTable\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 39\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Implements a single-threaded <xref href=\\\"System.Xml.XmlNameTable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: 'public class NameTable : XmlNameTable'\n    content.vb: >-\n      Public Class NameTable\n          Inherits XmlNameTable\n  inheritance:\n  - System.Object\n  - System.Xml.XmlNameTable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: NameTable\n- uid: System.Xml.NameTable.#ctor\n  commentId: M:System.Xml.NameTable.#ctor\n  id: '#ctor'\n  parent: System.Xml.NameTable\n  langs:\n  - csharp\n  - vb\n  name: NameTable()\n  fullName: System.Xml.NameTable.NameTable()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 41\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Initializes a new instance of the <strong>NameTable</strong> class.</p>\\n\"\n  syntax:\n    content: public NameTable()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NameTable.NameTable()\n- uid: System.Xml.NameTable.Add(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Xml.NameTable.Add(System.Char[],System.Int32,System.Int32)\n  id: Add(System.Char[],System.Int32,System.Int32)\n  parent: System.Xml.NameTable\n  langs:\n  - csharp\n  - vb\n  name: Add(Char[], Int32, Int32)\n  fullName: System.Xml.NameTable.Add(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 42\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Atomizes the specified string and adds it to the <strong>NameTable</strong>.</p>\\n\"\n  syntax:\n    content: public override string Add(char[] key, int start, int len)\n    content.vb: Public Overrides Function Add(key As Char(), start As Integer, len As Integer) As String\n    parameters:\n    - id: key\n      type: System.Char[]\n      description: \"\\n<p>The character array containing the string to add. </p>\\n\"\n    - id: start\n      type: System.Int32\n      description: \"\\n<p>The zero-based index into the array specifying the first character of the string. </p>\\n\"\n    - id: len\n      type: System.Int32\n      description: \"\\n<p>The number of characters in the string. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The atomized string or the existing string if one already exists in the <strong>NameTable</strong>. If <em>len</em> is zero, String.Empty is returned.</p>\\n\"\n  overridden: System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>0 > <em>start</em></p>\\n<p>-or- </p>\\n<p>\\n<em>start</em> >= <em>key</em>.Length </p>\\n<p>-or- </p>\\n<p>\\n<em>len</em> >= <em>key</em>.Length </p>\\n<p>The above conditions do not cause an exception to be thrown if <em>len</em> =0. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>len</em> < 0. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Xml.NameTable.Add(System.Char(), System.Int32, System.Int32)\n  name.vb: Add(Char(), Int32, Int32)\n  nameWithType: NameTable.Add(Char[], Int32, Int32)\n  nameWithType.vb: NameTable.Add(Char(), Int32, Int32)\n- uid: System.Xml.NameTable.Add(System.String)\n  commentId: M:System.Xml.NameTable.Add(System.String)\n  id: Add(System.String)\n  parent: System.Xml.NameTable\n  langs:\n  - csharp\n  - vb\n  name: Add(String)\n  fullName: System.Xml.NameTable.Add(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 43\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Atomizes the specified string and adds it to the <strong>NameTable</strong>.</p>\\n\"\n  syntax:\n    content: public override string Add(string key)\n    content.vb: Public Overrides Function Add(key As String) As String\n    parameters:\n    - id: key\n      type: System.String\n      description: \"\\n<p>The string to add. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The atomized string or the existing string if it already exists in the <strong>NameTable</strong>.</p>\\n\"\n  overridden: System.Xml.XmlNameTable.Add(System.String)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: NameTable.Add(String)\n- uid: System.Xml.NameTable.Get(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Xml.NameTable.Get(System.Char[],System.Int32,System.Int32)\n  id: Get(System.Char[],System.Int32,System.Int32)\n  parent: System.Xml.NameTable\n  langs:\n  - csharp\n  - vb\n  name: Get(Char[], Int32, Int32)\n  fullName: System.Xml.NameTable.Get(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Get\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 44\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the atomized string containing the same characters as the specified range of characters in the given array.</p>\\n\"\n  syntax:\n    content: public override string Get(char[] key, int start, int len)\n    content.vb: Public Overrides Function Get(key As Char(), start As Integer, len As Integer) As String\n    parameters:\n    - id: key\n      type: System.Char[]\n      description: \"\\n<p>The character array containing the name to find. </p>\\n\"\n    - id: start\n      type: System.Int32\n      description: \"\\n<p>The zero-based index into the array specifying the first character of the name. </p>\\n\"\n    - id: len\n      type: System.Int32\n      description: \"\\n<p>The number of characters in the name. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The atomized string or <strong>null</strong> if the string has not already been atomized. If <em>len</em> is zero, String.Empty is returned.</p>\\n\"\n  overridden: System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>0 > <em>start</em></p>\\n<p>-or- </p>\\n<p>\\n<em>start</em> >= <em>key</em>.Length </p>\\n<p>-or- </p>\\n<p>\\n<em>len</em> >= <em>key</em>.Length </p>\\n<p>The above conditions do not cause an exception to be thrown if <em>len</em> =0. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>len</em> < 0. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Xml.NameTable.Get(System.Char(), System.Int32, System.Int32)\n  name.vb: Get(Char(), Int32, Int32)\n  nameWithType: NameTable.Get(Char[], Int32, Int32)\n  nameWithType.vb: NameTable.Get(Char(), Int32, Int32)\n- uid: System.Xml.NameTable.Get(System.String)\n  commentId: M:System.Xml.NameTable.Get(System.String)\n  id: Get(System.String)\n  parent: System.Xml.NameTable\n  langs:\n  - csharp\n  - vb\n  name: Get(String)\n  fullName: System.Xml.NameTable.Get(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Get\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 45\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the atomized string with the specified value.</p>\\n\"\n  syntax:\n    content: public override string Get(string value)\n    content.vb: Public Overrides Function Get(value As String) As String\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The name to find. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The atomized string object or <strong>null</strong> if the string has not already been atomized.</p>\\n\"\n  overridden: System.Xml.XmlNameTable.Get(System.String)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: NameTable.Get(String)\nreferences:\n- uid: System.Xml\n  isExternal: false\n  name: System.Xml\n  fullName: System.Xml\n  commentId: N:System.Xml\n  nameWithType: System.Xml\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Xml.XmlNameTable\n  parent: System.Xml\n  isExternal: false\n  name: XmlNameTable\n  fullName: System.Xml.XmlNameTable\n  commentId: T:System.Xml.XmlNameTable\n  nameWithType: XmlNameTable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)\n  parent: System.Xml.XmlNameTable\n  isExternal: true\n  name: Add(Char[], Int32, Int32)\n  fullName: System.Xml.XmlNameTable.Add(System.Char[], System.Int32, System.Int32)\n  fullname.vb: System.Xml.XmlNameTable.Add(System.Char(), System.Int32, System.Int32)\n  name.vb: Add(Char(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)\n    name: Add\n    fullName: System.Xml.XmlNameTable.Add\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)\n    name: Add\n    fullName: System.Xml.XmlNameTable.Add\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)\n  nameWithType: XmlNameTable.Add(Char[], Int32, Int32)\n  nameWithType.vb: XmlNameTable.Add(Char(), Int32, Int32)\n- uid: System.Char[]\n  name: Char[]\n  fullName: System.Char[]\n  fullname.vb: System.Char()\n  name.vb: Char()\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Char[]\n  nameWithType.vb: Char()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Xml.XmlNameTable.Add(System.String)\n  parent: System.Xml.XmlNameTable\n  isExternal: true\n  name: Add(String)\n  fullName: System.Xml.XmlNameTable.Add(System.String)\n  spec.csharp:\n  - uid: System.Xml.XmlNameTable.Add(System.String)\n    name: Add\n    fullName: System.Xml.XmlNameTable.Add\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNameTable.Add(System.String)\n    name: Add\n    fullName: System.Xml.XmlNameTable.Add\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNameTable.Add(System.String)\n  nameWithType: XmlNameTable.Add(String)\n- uid: System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)\n  parent: System.Xml.XmlNameTable\n  isExternal: true\n  name: Get(Char[], Int32, Int32)\n  fullName: System.Xml.XmlNameTable.Get(System.Char[], System.Int32, System.Int32)\n  fullname.vb: System.Xml.XmlNameTable.Get(System.Char(), System.Int32, System.Int32)\n  name.vb: Get(Char(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)\n    name: Get\n    fullName: System.Xml.XmlNameTable.Get\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)\n    name: Get\n    fullName: System.Xml.XmlNameTable.Get\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)\n  nameWithType: XmlNameTable.Get(Char[], Int32, Int32)\n  nameWithType.vb: XmlNameTable.Get(Char(), Int32, Int32)\n- uid: System.Xml.XmlNameTable.Get(System.String)\n  parent: System.Xml.XmlNameTable\n  isExternal: true\n  name: Get(String)\n  fullName: System.Xml.XmlNameTable.Get(System.String)\n  spec.csharp:\n  - uid: System.Xml.XmlNameTable.Get(System.String)\n    name: Get\n    fullName: System.Xml.XmlNameTable.Get\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNameTable.Get(System.String)\n    name: Get\n    fullName: System.Xml.XmlNameTable.Get\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNameTable.Get(System.String)\n  nameWithType: XmlNameTable.Get(String)\n- uid: System.IndexOutOfRangeException\n  isExternal: false\n  name: IndexOutOfRangeException\n  fullName: System.IndexOutOfRangeException\n  nameWithType: IndexOutOfRangeException\n  commentId: T:System.IndexOutOfRangeException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}