{"nodes":[{"pos":[539,548],"content":"TripleDES","needQuote":true,"nodes":[{"content":"TripleDES","pos":[0,9]}]},{"pos":[4129,4140],"content":"TripleDES()","needQuote":true,"nodes":[{"content":"TripleDES()","pos":[0,11]}]},{"pos":[5200,5203],"content":"Key","needQuote":true,"nodes":[{"content":"Key","pos":[0,3]}]},{"content":"\\n&lt;p&gt;An attempt was made to set the key to &lt;strong&gt;null&lt;/strong&gt;.","pos":[6398,6463],"source":"\\n<p>An attempt was made to set the key to <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[6464,6470],"source":" </p>\\n"},{"pos":[7252,7267],"content":"LegalBlockSizes","needQuote":true,"nodes":[{"content":"LegalBlockSizes","pos":[0,15]}]},{"pos":[8488,8501],"content":"LegalKeySizes","needQuote":true,"nodes":[{"content":"LegalKeySizes","pos":[0,13]}]},{"pos":[9689,9697],"content":"Create()","needQuote":true,"nodes":[{"content":"Create()","pos":[0,8]}]},{"content":"\\n&lt;p&gt;An instance of a cryptographic object.&lt;/p&gt;\\n","pos":[10596,10645],"source":"\\n<p>An instance of a cryptographic object.</p>\\n"},{"pos":[11027,11044],"content":"IsWeakKey(Byte[])","needQuote":true,"nodes":[{"content":"IsWeakKey(Byte[])","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The secret key to test for weakness.","pos":[11863,11904],"source":"\\n<p>The secret key to test for weakness."},{"content":"&lt;/p&gt;\\n","pos":[11905,11911],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the key is weak; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[11972,12061],"source":"\\n<p>\\n<strong>true</strong> if the key is weak; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The size of the &lt;em&gt;rgbKey&lt;/em&gt; parameter is not valid.","pos":[12226,12286],"source":"\\n<p>The size of the <em>rgbKey</em> parameter is not valid."},{"content":"&lt;/p&gt;\\n","pos":[12287,12293],"source":" </p>\\n"},{"pos":[12650,12678],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[12875,12881],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13082,13100],"content":"SymmetricAlgorithm","needQuote":true,"nodes":[{"content":"SymmetricAlgorithm","pos":[0,18]}]},{"pos":[13330,13341],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[13590,13604],"content":"BlockSizeValue","needQuote":true,"nodes":[{"content":"BlockSizeValue","pos":[0,14]}]},{"pos":[13966,13983],"content":"FeedbackSizeValue","needQuote":true,"nodes":[{"content":"FeedbackSizeValue","pos":[0,17]}]},{"pos":[14344,14351],"content":"IVValue","needQuote":true,"nodes":[{"content":"IVValue","pos":[0,7]}]},{"pos":[14683,14691],"content":"KeyValue","needQuote":true,"nodes":[{"content":"KeyValue","pos":[0,8]}]},{"pos":[15038,15058],"content":"LegalBlockSizesValue","needQuote":true,"nodes":[{"content":"LegalBlockSizesValue","pos":[0,20]}]},{"pos":[15439,15457],"content":"LegalKeySizesValue","needQuote":true,"nodes":[{"content":"LegalKeySizesValue","pos":[0,18]}]},{"pos":[15826,15838],"content":"KeySizeValue","needQuote":true,"nodes":[{"content":"KeySizeValue","pos":[0,12]}]},{"pos":[16186,16195],"content":"ModeValue","needQuote":true,"nodes":[{"content":"ModeValue","pos":[0,9]}]},{"pos":[16537,16549],"content":"PaddingValue","needQuote":true,"nodes":[{"content":"PaddingValue","pos":[0,12]}]},{"pos":[16895,16904],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[17065,17072],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[17174,17175],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17202,17203],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17306,17313],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[17415,17416],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17443,17444],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17723,17730],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[17887,17892],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[17992,17993],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18020,18021],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18122,18127],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[18227,18228],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18255,18256],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18549,18565],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[18756,18763],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[18865,18866],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18917,18924],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[18985,18986],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19105,19112],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[19214,19215],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19266,19273],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[19334,19335],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19658,19677],"content":"ValidKeySize(Int32)","needQuote":true,"nodes":[{"content":"ValidKeySize(Int32)","pos":[0,19]}]},{"pos":[19874,19886],"content":"ValidKeySize","needQuote":true,"nodes":[{"content":"ValidKeySize","pos":[0,12]}]},{"pos":[19993,19994],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20043,20048],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[20107,20108],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20230,20242],"content":"ValidKeySize","needQuote":true,"nodes":[{"content":"ValidKeySize","pos":[0,12]}]},{"pos":[20349,20350],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20399,20404],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[20463,20464],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20788,20802],"content":"Create(String)","needQuote":true,"nodes":[{"content":"Create(String)","pos":[0,14]}]},{"pos":[20989,20995],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[21096,21097],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21147,21153],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[21213,21214],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21331,21337],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[21438,21439],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21489,21495],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[21555,21556],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21864,21881],"content":"CreateEncryptor()","needQuote":true,"nodes":[{"content":"CreateEncryptor()","pos":[0,17]}]},{"pos":[22058,22073],"content":"CreateEncryptor","needQuote":true,"nodes":[{"content":"CreateEncryptor","pos":[0,15]}]},{"pos":[22183,22184],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22211,22212],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22323,22338],"content":"CreateEncryptor","needQuote":true,"nodes":[{"content":"CreateEncryptor","pos":[0,15]}]},{"pos":[22448,22449],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22476,22477],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22811,22842],"content":"CreateEncryptor(Byte[], Byte[])","needQuote":true,"nodes":[{"content":"CreateEncryptor(Byte[], Byte[])","pos":[0,31]}]},{"pos":[23228,23243],"content":"CreateEncryptor","needQuote":true,"nodes":[{"content":"CreateEncryptor","pos":[0,15]}]},{"pos":[23353,23354],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23402,23406],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[23465,23467]},{"content":",","pos":[23499,23500]},{"pos":[23553,23557],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[23616,23618]},{"pos":[23649,23650],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23790,23805],"content":"CreateEncryptor","needQuote":true,"nodes":[{"content":"CreateEncryptor","pos":[0,15]}]},{"pos":[23915,23916],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23964,23968],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[24026,24028],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[24057,24058]},{"pos":[24111,24115],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[24173,24175],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[24203,24204],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24622,24639],"content":"CreateDecryptor()","needQuote":true,"nodes":[{"content":"CreateDecryptor()","pos":[0,17]}]},{"pos":[24816,24831],"content":"CreateDecryptor","needQuote":true,"nodes":[{"content":"CreateDecryptor","pos":[0,15]}]},{"pos":[24941,24942],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24969,24970],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25081,25096],"content":"CreateDecryptor","needQuote":true,"nodes":[{"content":"CreateDecryptor","pos":[0,15]}]},{"pos":[25206,25207],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25234,25235],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25569,25600],"content":"CreateDecryptor(Byte[], Byte[])","needQuote":true,"nodes":[{"content":"CreateDecryptor(Byte[], Byte[])","pos":[0,31]}]},{"pos":[25986,26001],"content":"CreateDecryptor","needQuote":true,"nodes":[{"content":"CreateDecryptor","pos":[0,15]}]},{"pos":[26111,26112],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26160,26164],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[26223,26225]},{"content":",","pos":[26257,26258]},{"pos":[26311,26315],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[26374,26376]},{"pos":[26407,26408],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26548,26563],"content":"CreateDecryptor","needQuote":true,"nodes":[{"content":"CreateDecryptor","pos":[0,15]}]},{"pos":[26673,26674],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26722,26726],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[26784,26786],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[26815,26816]},{"pos":[26869,26873],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[26931,26933],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[26961,26962],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27376,27389],"content":"GenerateKey()","needQuote":true,"nodes":[{"content":"GenerateKey()","pos":[0,13]}]},{"pos":[27558,27569],"content":"GenerateKey","needQuote":true,"nodes":[{"content":"GenerateKey","pos":[0,11]}]},{"pos":[27675,27676],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27703,27704],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27811,27822],"content":"GenerateKey","needQuote":true,"nodes":[{"content":"GenerateKey","pos":[0,11]}]},{"pos":[27928,27929],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27956,27957],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28249,28261],"content":"GenerateIV()","needQuote":true,"nodes":[{"content":"GenerateIV()","pos":[0,12]}]},{"pos":[28428,28438],"content":"GenerateIV","needQuote":true,"nodes":[{"content":"GenerateIV","pos":[0,10]}]},{"pos":[28543,28544],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28571,28572],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28678,28688],"content":"GenerateIV","needQuote":true,"nodes":[{"content":"GenerateIV","pos":[0,10]}]},{"pos":[28793,28794],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28821,28822],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29111,29120],"content":"BlockSize","needQuote":true,"nodes":[{"content":"BlockSize","pos":[0,9]}]},{"pos":[29462,29474],"content":"FeedbackSize","needQuote":true,"nodes":[{"content":"FeedbackSize","pos":[0,12]}]},{"pos":[29815,29817],"content":"IV","needQuote":true,"nodes":[{"content":"IV","pos":[0,2]}]},{"pos":[30133,30140],"content":"KeySize","needQuote":true,"nodes":[{"content":"KeySize","pos":[0,7]}]},{"pos":[30468,30472],"content":"Mode","needQuote":true,"nodes":[{"content":"Mode","pos":[0,4]}]},{"pos":[30794,30801],"content":"Padding","needQuote":true,"nodes":[{"content":"Padding","pos":[0,7]}]},{"pos":[31065,31075],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[31170,31178],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[31247,31248],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31275,31276],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31346,31354],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[31423,31424],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31451,31452],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31635,31649],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[31768,31774],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[31841,31842],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31892,31898],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31958,31959],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32042,32048],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[32115,32116],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32166,32172],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32232,32233],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32447,32469],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[32617,32623],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[32690,32691],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32741,32747],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[32808,32809]},{"pos":[32864,32870],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32930,32931],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33028,33034],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[33101,33102],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33152,33158],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[33219,33220]},{"pos":[33275,33281],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33341,33342],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33587,33618],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[33784,33799],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[33875,33876],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33926,33932],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[33993,33994]},{"pos":[34049,34055],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34115,34116],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34222,34237],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[34313,34314],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34364,34370],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[34431,34432]},{"pos":[34487,34493],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34553,34554],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34784,34797],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[34898,34909],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[34981,34982],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35009,35010],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35083,35094],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[35166,35167],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35194,35195],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35370,35379],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[35472,35479],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[35547,35548],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35575,35576],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35645,35652],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[35720,35721],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35748,35749],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35924,35941],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[36050,36065],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[36141,36142],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36169,36170],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36247,36262],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[36338,36339],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36366,36367],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36512,36518],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[36727,36730],"content":"Key","needQuote":true,"nodes":[{"content":"Key","pos":[0,3]}]},{"pos":[36930,36936],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[37056,37060],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[37119,37121]},{"pos":[37184,37188],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[37246,37248],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[37471,37486],"content":"LegalBlockSizes","needQuote":true,"nodes":[{"content":"LegalBlockSizes","pos":[0,15]}]},{"pos":[37748,37758],"content":"KeySizes[]","needQuote":true,"nodes":[{"content":"KeySizes[]","pos":[0,10]}]},{"pos":[37960,37968],"content":"KeySizes","needQuote":true,"nodes":[{"content":"KeySizes","pos":[0,8]}]},{"content":"[]","pos":[38032,38034]},{"pos":[38123,38131],"content":"KeySizes","needQuote":true,"nodes":[{"content":"KeySizes","pos":[0,8]}]},{"pos":[38194,38196],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[38425,38438],"content":"LegalKeySizes","needQuote":true,"nodes":[{"content":"LegalKeySizes","pos":[0,13]}]},{"pos":[38752,38761],"content":"TripleDES","needQuote":true,"nodes":[{"content":"TripleDES","pos":[0,9]}]},{"pos":[38960,38967],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[39113,39134],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[39345,39367],"content":"CryptographicException","needQuote":true,"nodes":[{"content":"CryptographicException","pos":[0,22]}]}],"content":"items:\n- uid: System.Security.Cryptography.TripleDES\n  commentId: T:System.Security.Cryptography.TripleDES\n  id: TripleDES\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.TripleDES.#ctor\n  - System.Security.Cryptography.TripleDES.Create\n  - System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])\n  - System.Security.Cryptography.TripleDES.Key\n  - System.Security.Cryptography.TripleDES.LegalBlockSizes\n  - System.Security.Cryptography.TripleDES.LegalKeySizes\n  langs:\n  - csharp\n  - vb\n  name: TripleDES\n  fullName: System.Security.Cryptography.TripleDES\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TripleDES\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 296\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Represents the base class for Triple Data Encryption Standard algorithms from which all <xref href=\\\"System.Security.Cryptography.TripleDES\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementations must derive.</p>\\n\"\n  syntax:\n    content: 'public abstract class TripleDES : SymmetricAlgorithm, IDisposable'\n    content.vb: >-\n      Public MustInherit Class TripleDES\n          Inherits SymmetricAlgorithm\n          Implements IDisposable\n  seealso:\n  - type: System.Security.Cryptography.Aes\n    commentId: T:System.Security.Cryptography.Aes\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.SymmetricAlgorithm\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  - System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  - System.Security.Cryptography.SymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.SymmetricAlgorithm.Clear\n  - System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  - System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n  - System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n  - System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n  - System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n  - System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  - System.Security.Cryptography.SymmetricAlgorithm.IV\n  - System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  - System.Security.Cryptography.SymmetricAlgorithm.Mode\n  - System.Security.Cryptography.SymmetricAlgorithm.Padding\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: TripleDES\n- uid: System.Security.Cryptography.TripleDES.#ctor\n  commentId: M:System.Security.Cryptography.TripleDES.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.TripleDES\n  langs:\n  - csharp\n  - vb\n  name: TripleDES()\n  fullName: System.Security.Cryptography.TripleDES.TripleDES()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 298\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.TripleDES\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected TripleDES()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: TripleDES.TripleDES()\n- uid: System.Security.Cryptography.TripleDES.Key\n  commentId: P:System.Security.Cryptography.TripleDES.Key\n  id: Key\n  parent: System.Security.Cryptography.TripleDES\n  langs:\n  - csharp\n  - vb\n  name: Key\n  fullName: System.Security.Cryptography.TripleDES.Key\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Key\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 299\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets or sets the secret key for the <xref href=\\\"System.Security.Cryptography.TripleDES\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm.</p>\\n\"\n  syntax:\n    content: public override byte[] Key { get; set; }\n    content.vb: Public Overrides Property Key As Byte()\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The secret key for the <xref href=\\\"System.Security.Cryptography.TripleDES\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm.</p>\\n\"\n  overridden: System.Security.Cryptography.SymmetricAlgorithm.Key\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>An attempt was made to set the key to <strong>null</strong>. </p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>An attempt was made to set a key whose length is invalid.</p>\\n<p>-or- </p>\\n<p>An attempt was made to set a weak key (see <xref href=\\\"System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>). </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TripleDES.Key\n- uid: System.Security.Cryptography.TripleDES.LegalBlockSizes\n  commentId: P:System.Security.Cryptography.TripleDES.LegalBlockSizes\n  id: LegalBlockSizes\n  parent: System.Security.Cryptography.TripleDES\n  langs:\n  - csharp\n  - vb\n  name: LegalBlockSizes\n  fullName: System.Security.Cryptography.TripleDES.LegalBlockSizes\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LegalBlockSizes\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 300\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override KeySizes[] LegalBlockSizes { get; }\n    content.vb: Public Overrides ReadOnly Property LegalBlockSizes As KeySizes()\n    parameters: []\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n  overridden: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: TripleDES.LegalBlockSizes\n- uid: System.Security.Cryptography.TripleDES.LegalKeySizes\n  commentId: P:System.Security.Cryptography.TripleDES.LegalKeySizes\n  id: LegalKeySizes\n  parent: System.Security.Cryptography.TripleDES\n  langs:\n  - csharp\n  - vb\n  name: LegalKeySizes\n  fullName: System.Security.Cryptography.TripleDES.LegalKeySizes\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LegalKeySizes\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 301\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override KeySizes[] LegalKeySizes { get; }\n    content.vb: Public Overrides ReadOnly Property LegalKeySizes As KeySizes()\n    parameters: []\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n  overridden: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: TripleDES.LegalKeySizes\n- uid: System.Security.Cryptography.TripleDES.Create\n  commentId: M:System.Security.Cryptography.TripleDES.Create\n  id: Create\n  parent: System.Security.Cryptography.TripleDES\n  langs:\n  - csharp\n  - vb\n  name: Create()\n  fullName: System.Security.Cryptography.TripleDES.Create()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Create\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 302\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Creates an instance of a cryptographic object to perform the <xref href=\\\"System.Security.Cryptography.TripleDES\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm.</p>\\n\"\n  syntax:\n    content: public static TripleDES Create()\n    content.vb: Public Shared Function Create As TripleDES\n    return:\n      type: System.Security.Cryptography.TripleDES\n      description: \"\\n<p>An instance of a cryptographic object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: TripleDES.Create()\n- uid: System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])\n  commentId: M:System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])\n  id: IsWeakKey(System.Byte[])\n  parent: System.Security.Cryptography.TripleDES\n  langs:\n  - csharp\n  - vb\n  name: IsWeakKey(Byte[])\n  fullName: System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsWeakKey\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 303\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Determines whether the specified key is weak.</p>\\n\"\n  syntax:\n    content: public static bool IsWeakKey(byte[] rgbKey)\n    content.vb: Public Shared Function IsWeakKey(rgbKey As Byte()) As Boolean\n    parameters:\n    - id: rgbKey\n      type: System.Byte[]\n      description: \"\\n<p>The secret key to test for weakness. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the key is weak; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The size of the <em>rgbKey</em> parameter is not valid. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte())\n  name.vb: IsWeakKey(Byte())\n  nameWithType: TripleDES.IsWeakKey(Byte[])\n  nameWithType.vb: TripleDES.IsWeakKey(Byte())\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.Cryptography.SymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: SymmetricAlgorithm\n  fullName: System.Security.Cryptography.SymmetricAlgorithm\n  commentId: T:System.Security.Cryptography.SymmetricAlgorithm\n  nameWithType: SymmetricAlgorithm\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: BlockSizeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  nameWithType: SymmetricAlgorithm.BlockSizeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: FeedbackSizeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  nameWithType: SymmetricAlgorithm.FeedbackSizeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: IVValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  nameWithType: SymmetricAlgorithm.IVValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: KeyValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  nameWithType: SymmetricAlgorithm.KeyValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: LegalBlockSizesValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  nameWithType: SymmetricAlgorithm.LegalBlockSizesValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: LegalKeySizesValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  nameWithType: SymmetricAlgorithm.LegalKeySizesValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: KeySizeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  nameWithType: SymmetricAlgorithm.KeySizeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: ModeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  nameWithType: SymmetricAlgorithm.ModeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: PaddingValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  nameWithType: SymmetricAlgorithm.PaddingValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: Dispose()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose()\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.Dispose\n  nameWithType: SymmetricAlgorithm.Dispose()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Clear\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: Clear()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Clear()\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.Clear\n    name: Clear\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.Clear\n    name: Clear\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.Clear\n  nameWithType: SymmetricAlgorithm.Clear()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: Dispose(Boolean)\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  nameWithType: SymmetricAlgorithm.Dispose(Boolean)\n- uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: ValidKeySize(Int32)\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n    name: ValidKeySize\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n    name: ValidKeySize\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n  nameWithType: SymmetricAlgorithm.ValidKeySize(Int32)\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: Create(String)\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)\n    name: Create\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)\n    name: Create\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)\n  nameWithType: SymmetricAlgorithm.Create(String)\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: CreateEncryptor()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor()\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n    name: CreateEncryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n    name: CreateEncryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n  nameWithType: SymmetricAlgorithm.CreateEncryptor()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: CreateEncryptor(Byte[], Byte[])\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[], System.Byte[])\n  fullname.vb: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte(), System.Byte())\n  name.vb: CreateEncryptor(Byte(), Byte())\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n    name: CreateEncryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n    name: CreateEncryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n  nameWithType: SymmetricAlgorithm.CreateEncryptor(Byte[], Byte[])\n  nameWithType.vb: SymmetricAlgorithm.CreateEncryptor(Byte(), Byte())\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: CreateDecryptor()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor()\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n    name: CreateDecryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n    name: CreateDecryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n  nameWithType: SymmetricAlgorithm.CreateDecryptor()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: CreateDecryptor(Byte[], Byte[])\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[], System.Byte[])\n  fullname.vb: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte(), System.Byte())\n  name.vb: CreateDecryptor(Byte(), Byte())\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n    name: CreateDecryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n    name: CreateDecryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n  nameWithType: SymmetricAlgorithm.CreateDecryptor(Byte[], Byte[])\n  nameWithType.vb: SymmetricAlgorithm.CreateDecryptor(Byte(), Byte())\n- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: GenerateKey()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey()\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n    name: GenerateKey\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n    name: GenerateKey\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n  nameWithType: SymmetricAlgorithm.GenerateKey()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: GenerateIV()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV()\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n    name: GenerateIV\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n    name: GenerateIV\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n  nameWithType: SymmetricAlgorithm.GenerateIV()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: BlockSize\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  nameWithType: SymmetricAlgorithm.BlockSize\n- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: FeedbackSize\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  nameWithType: SymmetricAlgorithm.FeedbackSize\n- uid: System.Security.Cryptography.SymmetricAlgorithm.IV\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: IV\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.IV\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.IV\n  nameWithType: SymmetricAlgorithm.IV\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: KeySize\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  nameWithType: SymmetricAlgorithm.KeySize\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: Mode\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Mode\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.Mode\n  nameWithType: SymmetricAlgorithm.Mode\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: Padding\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Padding\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.Padding\n  nameWithType: SymmetricAlgorithm.Padding\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Key\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: Key\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Key\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.Key\n  nameWithType: SymmetricAlgorithm.Key\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: LegalBlockSizes\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  nameWithType: SymmetricAlgorithm.LegalBlockSizes\n- uid: System.Security.Cryptography.KeySizes[]\n  name: KeySizes[]\n  fullName: System.Security.Cryptography.KeySizes[]\n  fullname.vb: System.Security.Cryptography.KeySizes()\n  name.vb: KeySizes()\n  spec.csharp:\n  - uid: System.Security.Cryptography.KeySizes\n    name: KeySizes\n    fullName: System.Security.Cryptography.KeySizes\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Security.Cryptography.KeySizes\n    name: KeySizes\n    fullName: System.Security.Cryptography.KeySizes\n  - name: ()\n    fullName: ()\n  nameWithType: KeySizes[]\n  nameWithType.vb: KeySizes()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: LegalKeySizes\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  nameWithType: SymmetricAlgorithm.LegalKeySizes\n- uid: System.Security.Cryptography.TripleDES\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: TripleDES\n  fullName: System.Security.Cryptography.TripleDES\n  commentId: T:System.Security.Cryptography.TripleDES\n  nameWithType: TripleDES\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.Security.Cryptography.CryptographicException\n  isExternal: false\n  name: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n  commentId: T:System.Security.Cryptography.CryptographicException\n  nameWithType: CryptographicException\n"}