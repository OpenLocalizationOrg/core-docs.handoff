{"nodes":[{"pos":[819,833],"content":"StringComparer","needQuote":true,"nodes":[{"content":"StringComparer","pos":[0,14]}]},{"pos":[2728,2744],"content":"StringComparer()","needQuote":true,"nodes":[{"content":"StringComparer()","pos":[0,16]}]},{"pos":[3681,3695],"content":"CurrentCulture","needQuote":true,"nodes":[{"content":"CurrentCulture","pos":[0,14]}]},{"pos":[5002,5026],"content":"CurrentCultureIgnoreCase","needQuote":true,"nodes":[{"content":"CurrentCultureIgnoreCase","pos":[0,24]}]},{"pos":[6333,6340],"content":"Ordinal","needQuote":true,"nodes":[{"content":"Ordinal","pos":[0,7]}]},{"pos":[7540,7557],"content":"OrdinalIgnoreCase","needQuote":true,"nodes":[{"content":"OrdinalIgnoreCase","pos":[0,17]}]},{"pos":[8866,8889],"content":"Compare(String, String)","needQuote":true,"nodes":[{"content":"Compare(String, String)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;A string to compare to &lt;em&gt;y&lt;/em&gt;.&lt;/p&gt;\\n","pos":[9647,9692],"source":"\\n<p>A string to compare to <em>y</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A string to compare to &lt;em&gt;x&lt;/em&gt;.&lt;/p&gt;\\n","pos":[9752,9797],"source":"\\n<p>A string to compare to <em>x</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A signed integer that indicates the relative values of &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;, as shown in the following table.&lt;/p&gt;\\n&lt;p&gt;Value&lt;/p&gt;\\n&lt;p&gt;Meaning&lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;x&lt;/em&gt; precedes &lt;em&gt;y&lt;/em&gt; in the sort order.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;x&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and &lt;em&gt;y&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;x&lt;/em&gt; is equal to &lt;em&gt;y&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; are both &lt;strong&gt;null&lt;/strong&gt;.","pos":[9856,10397],"source":"\\n<p>A signed integer that indicates the relative values of <em>x</em> and <em>y</em>, as shown in the following table.</p>\\n<p>Value</p>\\n<p>Meaning</p>\\n<table><tbody><tr><td>\\n<p>Less than zero</p>\\n</td><td>\\n<p>\\n<em>x</em> precedes <em>y</em> in the sort order.</p>\\n<p>-or-</p>\\n<p>\\n<em>x</em> is <strong>null</strong> and <em>y</em> is not <strong>null</strong>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>\\n<em>x</em> is equal to <em>y</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>x</em> and <em>y</em> are both <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;x&lt;/em&gt; follows &lt;em&gt;y&lt;/em&gt; in the sort order.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;y&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and &lt;em&gt;x&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt;.","pos":[10398,10618],"source":" </p>\\n</td></tr><tr><td>\\n<p>Greater than zero</p>\\n</td><td>\\n<p>\\n<em>x</em> follows <em>y</em> in the sort order.</p>\\n<p>-or-</p>\\n<p>\\n<em>y</em> is <strong>null</strong> and <em>x</em> is not <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[10619,10653],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[11152,11174],"content":"Equals(String, String)","needQuote":true,"nodes":[{"content":"Equals(String, String)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;A string to compare to &lt;em&gt;y&lt;/em&gt;.&lt;/p&gt;\\n","pos":[11893,11938],"source":"\\n<p>A string to compare to <em>y</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A string to compare to &lt;em&gt;x&lt;/em&gt;.&lt;/p&gt;\\n","pos":[11998,12043],"source":"\\n<p>A string to compare to <em>x</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; refer to the same object, or &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; are equal, or &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12104,12324],"source":"\\n<p>\\n<strong>true</strong> if <em>x</em> and <em>y</em> refer to the same object, or <em>x</em> and <em>y</em> are equal, or <em>x</em> and <em>y</em> are <strong>null</strong>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[12802,12821],"content":"GetHashCode(String)","needQuote":true,"nodes":[{"content":"GetHashCode(String)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;A string.&lt;/p&gt;\\n","pos":[13531,13551],"source":"\\n<p>A string.</p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed hash code calculated from the value of the &lt;em&gt;obj&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[13610,13703],"source":"\\n<p>A 32-bit signed hash code calculated from the value of the <em>obj</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;Not enough memory is available to allocate the buffer that is required to compute the hash code.&lt;/p&gt;\\n","pos":[13814,13921],"source":"\\n<p>Not enough memory is available to allocate the buffer that is required to compute the hash code.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;obj&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[14026,14071],"source":"\\n<p>\\n<em>obj</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[14072,14078],"source":" </p>\\n"},{"pos":[14675,14708],"content":"IComparer.Compare(Object, Object)","needQuote":true,"nodes":[{"content":"IComparer.Compare(Object, Object)","pos":[0,33]}]},{"pos":[16187,16227],"content":"IEqualityComparer.Equals(Object, Object)","needQuote":true,"nodes":[{"content":"IEqualityComparer.Equals(Object, Object)","pos":[0,40]}]},{"pos":[17745,17782],"content":"IEqualityComparer.GetHashCode(Object)","needQuote":true,"nodes":[{"content":"IEqualityComparer.GetHashCode(Object)","pos":[0,37]}]},{"pos":[18943,18949],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[19080,19086],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19322,19339],"content":"IComparer<String>","needQuote":true,"nodes":[{"content":"IComparer&lt;String&gt;","pos":[0,17],"source":"IComparer<String>"}]},{"pos":[19579,19588],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[19671,19672],"content":"<","needQuote":true,"nodes":[]},{"pos":[19722,19728],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[19879,19888],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"content":"(Of","pos":[19972,19975]},{"pos":[20032,20038],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[20098,20099],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20430,20455],"content":"IEqualityComparer<String>","needQuote":true,"nodes":[{"content":"IEqualityComparer&lt;String&gt;","pos":[0,25],"source":"IEqualityComparer<String>"}]},{"pos":[20727,20744],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[20835,20836],"content":"<","needQuote":true,"nodes":[]},{"pos":[20886,20892],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[21051,21068],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"content":"(Of","pos":[21160,21163]},{"pos":[21220,21226],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[21286,21287],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21562,21571],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[21784,21801],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[22018,22028],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[22123,22131],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[22200,22201],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22228,22229],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22299,22307],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[22376,22377],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22404,22405],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22588,22602],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[22721,22727],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22794,22795],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22845,22851],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22911,22912],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22995,23001],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23068,23069],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23119,23125],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23185,23186],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23400,23422],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[23570,23576],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23643,23644],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23694,23700],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23761,23762]},{"pos":[23817,23823],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23883,23884],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23981,23987],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24054,24055],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24105,24111],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[24172,24173]},{"pos":[24228,24234],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24294,24295],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24540,24571],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[24737,24752],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[24828,24829],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24879,24885],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[24946,24947]},{"pos":[25002,25008],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25068,25069],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25175,25190],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[25266,25267],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25317,25323],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25384,25385]},{"pos":[25440,25446],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25506,25507],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25737,25750],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[25851,25862],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[25934,25935],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25962,25963],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26036,26047],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[26119,26120],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26147,26148],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26323,26332],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[26425,26432],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[26500,26501],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26528,26529],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26598,26605],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[26673,26674],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26701,26702],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26877,26894],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[27003,27018],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[27094,27095],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27122,27123],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27200,27215],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[27291,27292],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27319,27320],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27497,27509],"content":"IComparer<T>","needQuote":true,"nodes":[{"content":"IComparer&lt;T&gt;","pos":[0,12],"source":"IComparer<T>"}]},{"pos":[27720,27729],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[27791,27792],"content":"<","needQuote":true,"nodes":[]},{"pos":[27819,27820],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[27938,27947],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"content":"(Of","pos":[28010,28013]},{"pos":[28047,28048],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[28075,28076],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28273,28299],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[28506,28526],"content":"IEqualityComparer<T>","needQuote":true,"nodes":[{"content":"IEqualityComparer&lt;T&gt;","pos":[0,20],"source":"IEqualityComparer<T>"}]},{"pos":[28769,28786],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[28856,28857],"content":"<","needQuote":true,"nodes":[]},{"pos":[28884,28885],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[29011,29028],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"content":"(Of","pos":[29099,29102]},{"pos":[29136,29137],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[29164,29165],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29378,29396],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[29571,29585],"content":"StringComparer","needQuote":true,"nodes":[{"content":"StringComparer","pos":[0,14]}]},{"pos":[29922,29945],"content":"Compare(String, String)","needQuote":true,"nodes":[{"content":"Compare(String, String)","pos":[0,23]}]},{"pos":[30244,30251],"content":"Compare","needQuote":true,"nodes":[{"content":"Compare","pos":[0,7]}]},{"pos":[30357,30358],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30408,30414],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[30475,30476]},{"pos":[30531,30537],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[30597,30598],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30699,30706],"content":"Compare","needQuote":true,"nodes":[{"content":"Compare","pos":[0,7]}]},{"pos":[30815,30816],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30866,30872],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[30933,30934]},{"pos":[30989,30995],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[31055,31056],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31365,31371],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[31515,31520],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[31684,31697],"content":"Compare(T, T)","needQuote":true,"nodes":[{"content":"Compare(T, T)","pos":[0,13]}]},{"pos":[31924,31931],"content":"Compare","needQuote":true,"nodes":[{"content":"Compare","pos":[0,7]}]},{"pos":[32025,32026],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32053,32054],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[32082,32083]},{"pos":[32115,32116],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[32143,32144],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32245,32252],"content":"Compare","needQuote":true,"nodes":[{"content":"Compare","pos":[0,7]}]},{"pos":[32349,32350],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32377,32378],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[32406,32407]},{"pos":[32439,32440],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[32467,32468],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32902,32924],"content":"Equals(String, String)","needQuote":true,"nodes":[{"content":"Equals(String, String)","pos":[0,22]}]},{"pos":[33244,33250],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[33363,33364],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33414,33420],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[33481,33482]},{"pos":[33537,33543],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[33603,33604],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33712,33718],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[33834,33835],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33885,33891],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[33952,33953]},{"pos":[34008,34014],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[34074,34075],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34406,34413],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[34590,34602],"content":"Equals(T, T)","needQuote":true,"nodes":[{"content":"Equals(T, T)","pos":[0,12]}]},{"pos":[34850,34856],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[34957,34958],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34985,34986],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[35014,35015]},{"pos":[35047,35048],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[35075,35076],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35184,35190],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[35294,35295],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35322,35323],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[35351,35352]},{"pos":[35384,35385],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[35412,35413],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35861,35880],"content":"GetHashCode(String)","needQuote":true,"nodes":[{"content":"GetHashCode(String)","pos":[0,19]}]},{"pos":[36182,36193],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[36311,36312],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36362,36368],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[36428,36429],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36539,36550],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[36671,36672],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36722,36728],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[36788,36789],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37135,37149],"content":"GetHashCode(T)","needQuote":true,"nodes":[{"content":"GetHashCode(T)","pos":[0,14]}]},{"pos":[37403,37414],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[37520,37521],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37548,37549],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[37576,37577],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37687,37698],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[37807,37808],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37835,37836],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[37863,37864],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38208,38231],"content":"Compare(Object, Object)","needQuote":true,"nodes":[{"content":"Compare(Object, Object)","pos":[0,23]}]},{"pos":[38411,38418],"content":"Compare","needQuote":true,"nodes":[{"content":"Compare","pos":[0,7]}]},{"pos":[38501,38502],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38552,38558],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[38619,38620]},{"pos":[38675,38681],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[38741,38742],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38855,38862],"content":"Compare","needQuote":true,"nodes":[{"content":"Compare","pos":[0,7]}]},{"pos":[38945,38946],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38996,39002],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[39063,39064]},{"pos":[39119,39125],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[39185,39186],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39488,39510],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[39704,39710],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[39800,39801],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39851,39857],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[39918,39919]},{"pos":[39974,39980],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[40040,40041],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40161,40167],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[40257,40258],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40308,40314],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[40375,40376]},{"pos":[40431,40437],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[40497,40498],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40805,40824],"content":"GetHashCode(Object)","needQuote":true,"nodes":[{"content":"GetHashCode(Object)","pos":[0,19]}]},{"pos":[40999,41010],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[41105,41106],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41156,41162],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[41222,41223],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41334,41345],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[41440,41441],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41491,41497],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[41557,41558],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41785,41802],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[41978,41999],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.StringComparer\n  commentId: T:System.StringComparer\n  id: StringComparer\n  parent: System\n  children:\n  - System.StringComparer.#ctor\n  - System.StringComparer.Compare(System.String,System.String)\n  - System.StringComparer.CurrentCulture\n  - System.StringComparer.CurrentCultureIgnoreCase\n  - System.StringComparer.Equals(System.String,System.String)\n  - System.StringComparer.GetHashCode(System.String)\n  - System.StringComparer.Ordinal\n  - System.StringComparer.OrdinalIgnoreCase\n  - System.StringComparer.System#Collections#IComparer#Compare(System.Object,System.Object)\n  - System.StringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)\n  - System.StringComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)\n  langs:\n  - csharp\n  - vb\n  name: StringComparer\n  fullName: System.StringComparer\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/StringComparer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StringComparer\n    path: src/mscorlib/src/System/StringComparer.cs\n    startLine: 14\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public abstract class StringComparer : IComparer, IEqualityComparer, IComparer<string>, IEqualityComparer<string>\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public MustInherit Class StringComparer\n          Implements IComparer, IEqualityComparer, IComparer(Of String), IEqualityComparer(Of String)\n  seealso:\n  - type: System.String\n    commentId: T:System.String\n  - type: System.Globalization.CompareOptions\n    commentId: T:System.Globalization.CompareOptions\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.IComparer{System.String}\n  - System.Collections.Generic.IEqualityComparer{System.String}\n  - System.Collections.IComparer\n  - System.Collections.IEqualityComparer\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: StringComparer\n- uid: System.StringComparer.#ctor\n  commentId: M:System.StringComparer.#ctor\n  id: '#ctor'\n  parent: System.StringComparer\n  langs:\n  - csharp\n  - vb\n  name: StringComparer()\n  fullName: System.StringComparer.StringComparer()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 557\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.StringComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. </p>\\n\"\n  syntax:\n    content: protected StringComparer()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: StringComparer.StringComparer()\n- uid: System.StringComparer.CurrentCulture\n  commentId: P:System.StringComparer.CurrentCulture\n  id: CurrentCulture\n  parent: System.StringComparer\n  langs:\n  - csharp\n  - vb\n  name: CurrentCulture\n  fullName: System.StringComparer.CurrentCulture\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/StringComparer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CurrentCulture\n    path: src/mscorlib/src/System/StringComparer.cs\n    startLine: 36\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Gets a <xref href=\\\"System.StringComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that performs a case-sensitive string comparison using the word comparison rules of the current culture.</p>\\n\"\n  syntax:\n    content: public static StringComparer CurrentCulture { get; }\n    content.vb: Public Shared ReadOnly Property CurrentCulture As StringComparer\n    parameters: []\n    return:\n      type: System.StringComparer\n      description: \"\\n<p>A new <xref href=\\\"System.StringComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: StringComparer.CurrentCulture\n- uid: System.StringComparer.CurrentCultureIgnoreCase\n  commentId: P:System.StringComparer.CurrentCultureIgnoreCase\n  id: CurrentCultureIgnoreCase\n  parent: System.StringComparer\n  langs:\n  - csharp\n  - vb\n  name: CurrentCultureIgnoreCase\n  fullName: System.StringComparer.CurrentCultureIgnoreCase\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/StringComparer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CurrentCultureIgnoreCase\n    path: src/mscorlib/src/System/StringComparer.cs\n    startLine: 43\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Gets a <xref href=\\\"System.StringComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that performs case-insensitive string comparisons using the word comparison rules of the current culture.</p>\\n\"\n  syntax:\n    content: public static StringComparer CurrentCultureIgnoreCase { get; }\n    content.vb: Public Shared ReadOnly Property CurrentCultureIgnoreCase As StringComparer\n    parameters: []\n    return:\n      type: System.StringComparer\n      description: \"\\n<p>A new <xref href=\\\"System.StringComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: StringComparer.CurrentCultureIgnoreCase\n- uid: System.StringComparer.Ordinal\n  commentId: P:System.StringComparer.Ordinal\n  id: Ordinal\n  parent: System.StringComparer\n  langs:\n  - csharp\n  - vb\n  name: Ordinal\n  fullName: System.StringComparer.Ordinal\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/StringComparer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ordinal\n    path: src/mscorlib/src/System/StringComparer.cs\n    startLine: 50\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Gets a <xref href=\\\"System.StringComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that performs a case-sensitive ordinal string comparison.</p>\\n\"\n  syntax:\n    content: public static StringComparer Ordinal { get; }\n    content.vb: Public Shared ReadOnly Property Ordinal As StringComparer\n    parameters: []\n    return:\n      type: System.StringComparer\n      description: \"\\n<p>A <xref href=\\\"System.StringComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: StringComparer.Ordinal\n- uid: System.StringComparer.OrdinalIgnoreCase\n  commentId: P:System.StringComparer.OrdinalIgnoreCase\n  id: OrdinalIgnoreCase\n  parent: System.StringComparer\n  langs:\n  - csharp\n  - vb\n  name: OrdinalIgnoreCase\n  fullName: System.StringComparer.OrdinalIgnoreCase\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/StringComparer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OrdinalIgnoreCase\n    path: src/mscorlib/src/System/StringComparer.cs\n    startLine: 57\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Gets a <xref href=\\\"System.StringComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that performs a case-insensitive ordinal string comparison.</p>\\n\"\n  syntax:\n    content: public static StringComparer OrdinalIgnoreCase { get; }\n    content.vb: Public Shared ReadOnly Property OrdinalIgnoreCase As StringComparer\n    parameters: []\n    return:\n      type: System.StringComparer\n      description: \"\\n<p>A <xref href=\\\"System.StringComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: StringComparer.OrdinalIgnoreCase\n- uid: System.StringComparer.Compare(System.String,System.String)\n  commentId: M:System.StringComparer.Compare(System.String,System.String)\n  id: Compare(System.String,System.String)\n  parent: System.StringComparer\n  langs:\n  - csharp\n  - vb\n  name: Compare(String, String)\n  fullName: System.StringComparer.Compare(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/StringComparer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Compare\n    path: src/mscorlib/src/System/StringComparer.cs\n    startLine: 123\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>When overridden in a derived class, compares two strings and returns an indication of their relative sort order.</p>\\n\"\n  syntax:\n    content: public abstract int Compare(string x, string y)\n    content.vb: Public MustOverride Function Compare(x As String, y As String) As Integer\n    parameters:\n    - id: x\n      type: System.String\n      description: \"\\n<p>A string to compare to <em>y</em>.</p>\\n\"\n    - id: y\n      type: System.String\n      description: \"\\n<p>A string to compare to <em>x</em>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed integer that indicates the relative values of <em>x</em> and <em>y</em>, as shown in the following table.</p>\\n<p>Value</p>\\n<p>Meaning</p>\\n<table><tbody><tr><td>\\n<p>Less than zero</p>\\n</td><td>\\n<p>\\n<em>x</em> precedes <em>y</em> in the sort order.</p>\\n<p>-or-</p>\\n<p>\\n<em>x</em> is <strong>null</strong> and <em>y</em> is not <strong>null</strong>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>\\n<em>x</em> is equal to <em>y</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>x</em> and <em>y</em> are both <strong>null</strong>. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero</p>\\n</td><td>\\n<p>\\n<em>x</em> follows <em>y</em> in the sort order.</p>\\n<p>-or-</p>\\n<p>\\n<em>y</em> is <strong>null</strong> and <em>x</em> is not <strong>null</strong>. </p>\\n</td></tr></tbody></table>\\n\"\n  implements:\n  - System.Collections.Generic.IComparer{System.String}.Compare(System.String,System.String)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: StringComparer.Compare(String, String)\n- uid: System.StringComparer.Equals(System.String,System.String)\n  commentId: M:System.StringComparer.Equals(System.String,System.String)\n  id: Equals(System.String,System.String)\n  parent: System.StringComparer\n  langs:\n  - csharp\n  - vb\n  name: Equals(String, String)\n  fullName: System.StringComparer.Equals(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/StringComparer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/StringComparer.cs\n    startLine: 124\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>When overridden in a derived class, indicates whether two strings are equal.</p>\\n\"\n  syntax:\n    content: public abstract bool Equals(string x, string y)\n    content.vb: Public MustOverride Function Equals(x As String, y As String) As Boolean\n    parameters:\n    - id: x\n      type: System.String\n      description: \"\\n<p>A string to compare to <em>y</em>.</p>\\n\"\n    - id: y\n      type: System.String\n      description: \"\\n<p>A string to compare to <em>x</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>x</em> and <em>y</em> refer to the same object, or <em>x</em> and <em>y</em> are equal, or <em>x</em> and <em>y</em> are <strong>null</strong>; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.Generic.IEqualityComparer{System.String}.Equals(System.String,System.String)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: StringComparer.Equals(String, String)\n- uid: System.StringComparer.GetHashCode(System.String)\n  commentId: M:System.StringComparer.GetHashCode(System.String)\n  id: GetHashCode(System.String)\n  parent: System.StringComparer\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode(String)\n  fullName: System.StringComparer.GetHashCode(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/StringComparer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/StringComparer.cs\n    startLine: 125\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>When overridden in a derived class, gets the hash code for the specified string.</p>\\n\"\n  syntax:\n    content: public abstract int GetHashCode(string obj)\n    content.vb: Public MustOverride Function GetHashCode(obj As String) As Integer\n    parameters:\n    - id: obj\n      type: System.String\n      description: \"\\n<p>A string.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed hash code calculated from the value of the <em>obj</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Not enough memory is available to allocate the buffer that is required to compute the hash code.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>obj</em> is <strong>null</strong>. </p>\\n\"\n  implements:\n  - System.Collections.Generic.IEqualityComparer{System.String}.GetHashCode(System.String)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: StringComparer.GetHashCode(String)\n- uid: System.StringComparer.System#Collections#IComparer#Compare(System.Object,System.Object)\n  commentId: M:System.StringComparer.System#Collections#IComparer#Compare(System.Object,System.Object)\n  id: System#Collections#IComparer#Compare(System.Object,System.Object)\n  isEii: true\n  parent: System.StringComparer\n  langs:\n  - csharp\n  - vb\n  name: IComparer.Compare(Object, Object)\n  fullName: System.StringComparer.System.Collections.IComparer.Compare(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IComparer.Compare\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 565\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  syntax:\n    content: int IComparer.Compare(object x, object y)\n    content.vb: Function System.Collections.IComparer.Compare(x As Object, y As Object) As Integer Implements IComparer.Compare\n    parameters:\n    - id: x\n      type: System.Object\n    - id: y\n      type: System.Object\n    return:\n      type: System.Int32\n  implements:\n  - System.Collections.IComparer.Compare(System.Object,System.Object)\n  name.vb: System.Collections.IComparer.Compare(Object, Object)\n  nameWithType: StringComparer.IComparer.Compare(Object, Object)\n  nameWithType.vb: StringComparer.System.Collections.IComparer.Compare(Object, Object)\n- uid: System.StringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)\n  commentId: M:System.StringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)\n  id: System#Collections#IEqualityComparer#Equals(System.Object,System.Object)\n  isEii: true\n  parent: System.StringComparer\n  langs:\n  - csharp\n  - vb\n  name: IEqualityComparer.Equals(Object, Object)\n  fullName: System.StringComparer.System.Collections.IEqualityComparer.Equals(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IEqualityComparer.Equals\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 566\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  syntax:\n    content: bool IEqualityComparer.Equals(object x, object y)\n    content.vb: Function System.Collections.IEqualityComparer.Equals(x As Object, y As Object) As Boolean Implements IEqualityComparer.Equals\n    parameters:\n    - id: x\n      type: System.Object\n    - id: y\n      type: System.Object\n    return:\n      type: System.Boolean\n  implements:\n  - System.Collections.IEqualityComparer.Equals(System.Object,System.Object)\n  name.vb: System.Collections.IEqualityComparer.Equals(Object, Object)\n  nameWithType: StringComparer.IEqualityComparer.Equals(Object, Object)\n  nameWithType.vb: StringComparer.System.Collections.IEqualityComparer.Equals(Object, Object)\n- uid: System.StringComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)\n  commentId: M:System.StringComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)\n  id: System#Collections#IEqualityComparer#GetHashCode(System.Object)\n  isEii: true\n  parent: System.StringComparer\n  langs:\n  - csharp\n  - vb\n  name: IEqualityComparer.GetHashCode(Object)\n  fullName: System.StringComparer.System.Collections.IEqualityComparer.GetHashCode(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IEqualityComparer.GetHashCode\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 567\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  syntax:\n    content: int IEqualityComparer.GetHashCode(object obj)\n    content.vb: Function System.Collections.IEqualityComparer.GetHashCode(obj As Object) As Integer Implements IEqualityComparer.GetHashCode\n    parameters:\n    - id: obj\n      type: System.Object\n    return:\n      type: System.Int32\n  implements:\n  - System.Collections.IEqualityComparer.GetHashCode(System.Object)\n  name.vb: System.Collections.IEqualityComparer.GetHashCode(Object)\n  nameWithType: StringComparer.IEqualityComparer.GetHashCode(Object)\n  nameWithType.vb: StringComparer.System.Collections.IEqualityComparer.GetHashCode(Object)\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.Generic.IComparer{System.String}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IComparer`1\n  name: IComparer<String>\n  fullName: System.Collections.Generic.IComparer<System.String>\n  fullname.vb: System.Collections.Generic.IComparer(Of System.String)\n  name.vb: IComparer(Of String)\n  spec.csharp:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparer<String>\n  nameWithType.vb: IComparer(Of String)\n  commentId: T:System.Collections.Generic.IComparer{System.String}\n- uid: System.Collections.Generic.IEqualityComparer{System.String}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEqualityComparer`1\n  name: IEqualityComparer<String>\n  fullName: System.Collections.Generic.IEqualityComparer<System.String>\n  fullname.vb: System.Collections.Generic.IEqualityComparer(Of System.String)\n  name.vb: IEqualityComparer(Of String)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IEqualityComparer<String>\n  nameWithType.vb: IEqualityComparer(Of String)\n  commentId: T:System.Collections.Generic.IEqualityComparer{System.String}\n- uid: System.Collections.IComparer\n  parent: System.Collections\n  isExternal: false\n  name: IComparer\n  fullName: System.Collections.IComparer\n  nameWithType: IComparer\n  commentId: T:System.Collections.IComparer\n- uid: System.Collections.IEqualityComparer\n  parent: System.Collections\n  isExternal: false\n  name: IEqualityComparer\n  fullName: System.Collections.IEqualityComparer\n  nameWithType: IEqualityComparer\n  commentId: T:System.Collections.IEqualityComparer\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Collections.Generic.IComparer`1\n  isExternal: false\n  name: IComparer<T>\n  fullName: System.Collections.Generic.IComparer<T>\n  fullname.vb: System.Collections.Generic.IComparer(Of T)\n  name.vb: IComparer(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IComparer<T>\n  nameWithType.vb: IComparer(Of T)\n  commentId: T:System.Collections.Generic.IComparer`1\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Collections.Generic.IEqualityComparer`1\n  isExternal: false\n  name: IEqualityComparer<T>\n  fullName: System.Collections.Generic.IEqualityComparer<T>\n  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T)\n  name.vb: IEqualityComparer(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEqualityComparer<T>\n  nameWithType.vb: IEqualityComparer(Of T)\n  commentId: T:System.Collections.Generic.IEqualityComparer`1\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.StringComparer\n  parent: System\n  isExternal: false\n  name: StringComparer\n  fullName: System.StringComparer\n  nameWithType: StringComparer\n  commentId: T:System.StringComparer\n- uid: System.Collections.Generic.IComparer{System.String}.Compare(System.String,System.String)\n  parent: System.Collections.Generic.IComparer{System.String}\n  definition: System.Collections.Generic.IComparer`1.Compare(`0,`0)\n  name: Compare(String, String)\n  fullName: System.Collections.Generic.IComparer<System.String>.Compare(System.String, System.String)\n  fullname.vb: System.Collections.Generic.IComparer(Of System.String).Compare(System.String, System.String)\n  spec.csharp:\n  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)\n    name: Compare\n    fullName: System.Collections.Generic.IComparer<System.String>.Compare\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)\n    name: Compare\n    fullName: System.Collections.Generic.IComparer(Of System.String).Compare\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparer<String>.Compare(String, String)\n  nameWithType.vb: IComparer(Of String).Compare(String, String)\n  commentId: M:System.Collections.Generic.IComparer{System.String}.Compare(System.String,System.String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)\n  isExternal: true\n  name: Compare(T, T)\n  fullName: System.Collections.Generic.IComparer<T>.Compare(T, T)\n  fullname.vb: System.Collections.Generic.IComparer(Of T).Compare(T, T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)\n    name: Compare\n    fullName: System.Collections.Generic.IComparer<T>.Compare\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)\n    name: Compare\n    fullName: System.Collections.Generic.IComparer(Of T).Compare\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IComparer<T>.Compare(T, T)\n  nameWithType.vb: IComparer(Of T).Compare(T, T)\n  commentId: M:System.Collections.Generic.IComparer`1.Compare(`0,`0)\n- uid: System.Collections.Generic.IEqualityComparer{System.String}.Equals(System.String,System.String)\n  parent: System.Collections.Generic.IEqualityComparer{System.String}\n  definition: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)\n  name: Equals(String, String)\n  fullName: System.Collections.Generic.IEqualityComparer<System.String>.Equals(System.String, System.String)\n  fullname.vb: System.Collections.Generic.IEqualityComparer(Of System.String).Equals(System.String, System.String)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)\n    name: Equals\n    fullName: System.Collections.Generic.IEqualityComparer<System.String>.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)\n    name: Equals\n    fullName: System.Collections.Generic.IEqualityComparer(Of System.String).Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IEqualityComparer<String>.Equals(String, String)\n  nameWithType.vb: IEqualityComparer(Of String).Equals(String, String)\n  commentId: M:System.Collections.Generic.IEqualityComparer{System.String}.Equals(System.String,System.String)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)\n  isExternal: true\n  name: Equals(T, T)\n  fullName: System.Collections.Generic.IEqualityComparer<T>.Equals(T, T)\n  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T).Equals(T, T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)\n    name: Equals\n    fullName: System.Collections.Generic.IEqualityComparer<T>.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)\n    name: Equals\n    fullName: System.Collections.Generic.IEqualityComparer(Of T).Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEqualityComparer<T>.Equals(T, T)\n  nameWithType.vb: IEqualityComparer(Of T).Equals(T, T)\n  commentId: M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)\n- uid: System.Collections.Generic.IEqualityComparer{System.String}.GetHashCode(System.String)\n  parent: System.Collections.Generic.IEqualityComparer{System.String}\n  definition: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)\n  name: GetHashCode(String)\n  fullName: System.Collections.Generic.IEqualityComparer<System.String>.GetHashCode(System.String)\n  fullname.vb: System.Collections.Generic.IEqualityComparer(Of System.String).GetHashCode(System.String)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)\n    name: GetHashCode\n    fullName: System.Collections.Generic.IEqualityComparer<System.String>.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)\n    name: GetHashCode\n    fullName: System.Collections.Generic.IEqualityComparer(Of System.String).GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IEqualityComparer<String>.GetHashCode(String)\n  nameWithType.vb: IEqualityComparer(Of String).GetHashCode(String)\n  commentId: M:System.Collections.Generic.IEqualityComparer{System.String}.GetHashCode(System.String)\n- uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)\n  isExternal: true\n  name: GetHashCode(T)\n  fullName: System.Collections.Generic.IEqualityComparer<T>.GetHashCode(T)\n  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T).GetHashCode(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)\n    name: GetHashCode\n    fullName: System.Collections.Generic.IEqualityComparer<T>.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)\n    name: GetHashCode\n    fullName: System.Collections.Generic.IEqualityComparer(Of T).GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEqualityComparer<T>.GetHashCode(T)\n  nameWithType.vb: IEqualityComparer(Of T).GetHashCode(T)\n  commentId: M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)\n- uid: System.Collections.IComparer.Compare(System.Object,System.Object)\n  parent: System.Collections.IComparer\n  isExternal: true\n  name: Compare(Object, Object)\n  fullName: System.Collections.IComparer.Compare(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Collections.IComparer.Compare(System.Object,System.Object)\n    name: Compare\n    fullName: System.Collections.IComparer.Compare\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IComparer.Compare(System.Object,System.Object)\n    name: Compare\n    fullName: System.Collections.IComparer.Compare\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparer.Compare(Object, Object)\n  commentId: M:System.Collections.IComparer.Compare(System.Object,System.Object)\n- uid: System.Collections.IEqualityComparer.Equals(System.Object,System.Object)\n  parent: System.Collections.IEqualityComparer\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Collections.IEqualityComparer.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Collections.IEqualityComparer.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Collections.IEqualityComparer.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEqualityComparer.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Collections.IEqualityComparer.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IEqualityComparer.Equals(Object, Object)\n  commentId: M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)\n- uid: System.Collections.IEqualityComparer.GetHashCode(System.Object)\n  parent: System.Collections.IEqualityComparer\n  isExternal: true\n  name: GetHashCode(Object)\n  fullName: System.Collections.IEqualityComparer.GetHashCode(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IEqualityComparer.GetHashCode(System.Object)\n    name: GetHashCode\n    fullName: System.Collections.IEqualityComparer.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEqualityComparer.GetHashCode(System.Object)\n    name: GetHashCode\n    fullName: System.Collections.IEqualityComparer.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IEqualityComparer.GetHashCode(Object)\n  commentId: M:System.Collections.IEqualityComparer.GetHashCode(System.Object)\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}