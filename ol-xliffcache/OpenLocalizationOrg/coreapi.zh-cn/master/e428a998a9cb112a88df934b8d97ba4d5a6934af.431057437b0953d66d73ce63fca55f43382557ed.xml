{"nodes":[{"pos":[504,512],"content":"CallInfo","needQuote":true,"nodes":[{"content":"CallInfo","pos":[0,8]}]},{"pos":[1837,1873],"content":"CallInfo(Int32, IEnumerable<String>)","needQuote":true,"nodes":[{"content":"CallInfo(Int32, IEnumerable&lt;String&gt;)","pos":[0,36],"source":"CallInfo(Int32, IEnumerable<String>)"}]},{"content":"\\n&lt;p&gt;The number of arguments.&lt;/p&gt;\\n","pos":[2695,2730],"source":"\\n<p>The number of arguments.</p>\\n"},{"content":"\\n&lt;p&gt;The argument names.&lt;/p&gt;\\n","pos":[2837,2867],"source":"\\n<p>The argument names.</p>\\n"},{"pos":[3483,3508],"content":"CallInfo(Int32, String[])","needQuote":true,"nodes":[{"content":"CallInfo(Int32, String[])","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The number of arguments.&lt;/p&gt;\\n","pos":[4255,4290],"source":"\\n<p>The number of arguments.</p>\\n"},{"content":"\\n&lt;p&gt;The argument names.&lt;/p&gt;\\n","pos":[4359,4389],"source":"\\n<p>The argument names.</p>\\n"},{"pos":[4857,4870],"content":"ArgumentCount","needQuote":true,"nodes":[{"content":"ArgumentCount","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The number of arguments.&lt;/p&gt;\\n","pos":[5525,5560],"source":"\\n<p>The number of arguments.</p>\\n"},{"pos":[5867,5880],"content":"ArgumentNames","needQuote":true,"nodes":[{"content":"ArgumentNames","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The read-only collection of argument names.&lt;/p&gt;\\n","pos":[6627,6681],"source":"\\n<p>The read-only collection of argument names.</p>\\n"},{"pos":[7012,7026],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;true if the specified instance is equal to the current one otherwise, false.&lt;/p&gt;\\n","pos":[7966,8053],"source":"\\n<p>true if the specified instance is equal to the current one otherwise, false.</p>\\n"},{"pos":[8411,8424],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[9508,9522],"content":"System.Dynamic","needQuote":true,"nodes":[{"content":"System.Dynamic","pos":[0,14]}]},{"pos":[9677,9683],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9843,9853],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[9948,9956],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[10025,10026],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10053,10054],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10124,10132],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[10201,10202],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10229,10230],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10427,10449],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[10597,10603],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10670,10671],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10721,10727],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10788,10789]},{"pos":[10844,10850],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10910,10911],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11008,11014],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11081,11082],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11132,11138],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11199,11200]},{"pos":[11255,11261],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11321,11322],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11567,11598],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[11764,11779],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[11855,11856],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11906,11912],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11973,11974]},{"pos":[12029,12035],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12095,12096],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12202,12217],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[12293,12294],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12344,12350],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12411,12412]},{"pos":[12467,12473],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12533,12534],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12760,12769],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[12862,12869],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[12937,12938],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12965,12966],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13035,13042],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[13110,13111],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13138,13139],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13314,13331],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[13440,13455],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[13531,13532],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13559,13560],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13637,13652],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[13728,13729],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13756,13757],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13902,13908],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[14038,14043],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[14280,14299],"content":"IEnumerable<String>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;String&gt;","pos":[0,19],"source":"IEnumerable<String>"}]},{"pos":[14547,14558],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[14622,14623],"content":"<","needQuote":true,"nodes":[]},{"pos":[14673,14679],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[14832,14843],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[14908,14911]},{"pos":[14968,14974],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[15034,15035],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15275,15289],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[15508,15519],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[15583,15584],"content":"<","needQuote":true,"nodes":[]},{"pos":[15611,15612],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[15732,15743],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[15808,15811]},{"pos":[15845,15846],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[15873,15874],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16077,16103],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[16259,16267],"content":"String[]","needQuote":true,"nodes":[{"content":"String[]","pos":[0,8]}]},{"pos":[16395,16401],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"[]","pos":[16462,16464]},{"pos":[16529,16535],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[16595,16597],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[16855,16881],"content":"ReadOnlyCollection<String>","needQuote":true,"nodes":[{"content":"ReadOnlyCollection&lt;String&gt;","pos":[0,26],"source":"ReadOnlyCollection<String>"}]},{"pos":[17169,17187],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"pos":[17283,17284],"content":"<","needQuote":true,"nodes":[]},{"pos":[17334,17340],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[17504,17522],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"content":"(Of","pos":[17619,17622]},{"pos":[17679,17685],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[17745,17746],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18022,18043],"content":"ReadOnlyCollection<T>","needQuote":true,"nodes":[{"content":"ReadOnlyCollection&lt;T&gt;","pos":[0,21],"source":"ReadOnlyCollection<T>"}]},{"pos":[18302,18320],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"pos":[18395,18396],"content":"<","needQuote":true,"nodes":[]},{"pos":[18423,18424],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[18555,18573],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"content":"(Of","pos":[18649,18652]},{"pos":[18686,18687],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[18714,18715],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18947,18977],"content":"System.Collections.ObjectModel","needQuote":true,"nodes":[{"content":"System.Collections.ObjectModel","pos":[0,30]}]},{"pos":[19208,19222],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[19341,19347],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19414,19415],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19465,19471],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19531,19532],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19615,19621],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19688,19689],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19739,19745],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19805,19806],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19979,19986],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[20152,20165],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[20266,20277],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[20349,20350],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20377,20378],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20451,20462],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[20534,20535],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20562,20563],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]}],"content":"items:\n- uid: System.Dynamic.CallInfo\n  commentId: T:System.Dynamic.CallInfo\n  id: CallInfo\n  parent: System.Dynamic\n  children:\n  - System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})\n  - System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])\n  - System.Dynamic.CallInfo.ArgumentCount\n  - System.Dynamic.CallInfo.ArgumentNames\n  - System.Dynamic.CallInfo.Equals(System.Object)\n  - System.Dynamic.CallInfo.GetHashCode\n  langs:\n  - csharp\n  - vb\n  name: CallInfo\n  fullName: System.Dynamic.CallInfo\n  type: Class\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CallInfo\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs\n    startLine: 27\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Describes arguments in the dynamic binding process.</p>\\n\"\n  syntax:\n    content: public sealed class CallInfo\n    content.vb: Public NotInheritable Class CallInfo\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: CallInfo\n- uid: System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})\n  commentId: M:System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})\n  id: '#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})'\n  parent: System.Dynamic.CallInfo\n  langs:\n  - csharp\n  - vb\n  name: CallInfo(Int32, IEnumerable<String>)\n  fullName: System.Dynamic.CallInfo.CallInfo(System.Int32, System.Collections.Generic.IEnumerable<System.String>)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs\n    startLine: 49\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Creates a new CallInfo that represents arguments in the dynamic binding process.</p>\\n\"\n  syntax:\n    content: public CallInfo(int argCount, IEnumerable<string> argNames)\n    content.vb: Public Sub New(argCount As Integer, argNames As IEnumerable(Of String))\n    parameters:\n    - id: argCount\n      type: System.Int32\n      description: \"\\n<p>The number of arguments.</p>\\n\"\n    - id: argNames\n      type: System.Collections.Generic.IEnumerable{System.String}\n      description: \"\\n<p>The argument names.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Dynamic.CallInfo.CallInfo(System.Int32, System.Collections.Generic.IEnumerable(Of System.String))\n  name.vb: CallInfo(Int32, IEnumerable(Of String))\n  nameWithType: CallInfo.CallInfo(Int32, IEnumerable<String>)\n  nameWithType.vb: CallInfo.CallInfo(Int32, IEnumerable(Of String))\n- uid: System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])\n  commentId: M:System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])\n  id: '#ctor(System.Int32,System.String[])'\n  parent: System.Dynamic.CallInfo\n  langs:\n  - csharp\n  - vb\n  name: CallInfo(Int32, String[])\n  fullName: System.Dynamic.CallInfo.CallInfo(System.Int32, System.String[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs\n    startLine: 38\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Creates a new <code>PositionalArgumentInfo</code>.</p>\\n\"\n  syntax:\n    content: public CallInfo(int argCount, params string[] argNames)\n    content.vb: Public Sub New(argCount As Integer, ParamArray argNames As String())\n    parameters:\n    - id: argCount\n      type: System.Int32\n      description: \"\\n<p>The number of arguments.</p>\\n\"\n    - id: argNames\n      type: System.String[]\n      description: \"\\n<p>The argument names.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Dynamic.CallInfo.CallInfo(System.Int32, System.String())\n  name.vb: CallInfo(Int32, String())\n  nameWithType: CallInfo.CallInfo(Int32, String[])\n  nameWithType.vb: CallInfo.CallInfo(Int32, String())\n- uid: System.Dynamic.CallInfo.ArgumentCount\n  commentId: P:System.Dynamic.CallInfo.ArgumentCount\n  id: ArgumentCount\n  parent: System.Dynamic.CallInfo\n  langs:\n  - csharp\n  - vb\n  name: ArgumentCount\n  fullName: System.Dynamic.CallInfo.ArgumentCount\n  type: Property\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ArgumentCount\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs\n    startLine: 65\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>The number of arguments.</p>\\n\"\n  syntax:\n    content: public int ArgumentCount { get; }\n    content.vb: Public ReadOnly Property ArgumentCount As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of arguments.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CallInfo.ArgumentCount\n- uid: System.Dynamic.CallInfo.ArgumentNames\n  commentId: P:System.Dynamic.CallInfo.ArgumentNames\n  id: ArgumentNames\n  parent: System.Dynamic.CallInfo\n  langs:\n  - csharp\n  - vb\n  name: ArgumentNames\n  fullName: System.Dynamic.CallInfo.ArgumentNames\n  type: Property\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ArgumentNames\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs\n    startLine: 73\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>The argument names.</p>\\n\"\n  syntax:\n    content: public ReadOnlyCollection<string> ArgumentNames { get; }\n    content.vb: Public ReadOnly Property ArgumentNames As ReadOnlyCollection(Of String)\n    parameters: []\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.String}\n      description: \"\\n<p>The read-only collection of argument names.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CallInfo.ArgumentNames\n- uid: System.Dynamic.CallInfo.Equals(System.Object)\n  commentId: M:System.Dynamic.CallInfo.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Dynamic.CallInfo\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Dynamic.CallInfo.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs\n    startLine: 92\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Determines whether the specified CallInfo instance is considered equal to the current.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The instance of <xref href=\\\"System.Dynamic.CallInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare with the current instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>true if the specified instance is equal to the current one otherwise, false.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CallInfo.Equals(Object)\n- uid: System.Dynamic.CallInfo.GetHashCode\n  commentId: M:System.Dynamic.CallInfo.GetHashCode\n  id: GetHashCode\n  parent: System.Dynamic.CallInfo\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Dynamic.CallInfo.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/CallInfo.cs\n    startLine: 82\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Serves as a hash function for the current <xref href=\\\"System.Dynamic.CallInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A hash code for the current <xref href=\\\"System.Dynamic.CallInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CallInfo.GetHashCode()\nreferences:\n- uid: System.Dynamic\n  isExternal: false\n  name: System.Dynamic\n  fullName: System.Dynamic\n  nameWithType: System.Dynamic\n  commentId: N:System.Dynamic\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Collections.Generic.IEnumerable{System.String}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<String>\n  fullName: System.Collections.Generic.IEnumerable<System.String>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.String)\n  name.vb: IEnumerable(Of String)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<String>\n  nameWithType.vb: IEnumerable(Of String)\n  commentId: T:System.Collections.Generic.IEnumerable{System.String}\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable`1\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.String[]\n  name: String[]\n  fullName: System.String[]\n  fullname.vb: System.String()\n  name.vb: String()\n  spec.csharp:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: String[]\n  nameWithType.vb: String()\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.String}\n  parent: System.Collections.ObjectModel\n  definition: System.Collections.ObjectModel.ReadOnlyCollection`1\n  name: ReadOnlyCollection<String>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.String>\n  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.String)\n  name.vb: ReadOnlyCollection(Of String)\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ReadOnlyCollection<String>\n  nameWithType.vb: ReadOnlyCollection(Of String)\n  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{System.String}\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n  isExternal: false\n  name: ReadOnlyCollection<T>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>\n  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)\n  name.vb: ReadOnlyCollection(Of T)\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ReadOnlyCollection<T>\n  nameWithType.vb: ReadOnlyCollection(Of T)\n  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1\n- uid: System.Collections.ObjectModel\n  isExternal: false\n  name: System.Collections.ObjectModel\n  fullName: System.Collections.ObjectModel\n  nameWithType: System.Collections.ObjectModel\n  commentId: N:System.Collections.ObjectModel\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n"}