{"nodes":[{"pos":[3184,3192],"content":"Calendar","needQuote":true,"nodes":[{"content":"Calendar","pos":[0,8]}]},{"pos":[6368,6378],"content":"CurrentEra","needQuote":true,"nodes":[{"content":"CurrentEra","pos":[0,10]}]},{"pos":[7401,7411],"content":"Calendar()","needQuote":true,"nodes":[{"content":"Calendar()","pos":[0,10]}]},{"pos":[8317,8321],"content":"Eras","needQuote":true,"nodes":[{"content":"Eras","pos":[0,4]}]},{"content":"\\n&lt;p&gt;An array of integers that represents the eras in the current calendar.&lt;/p&gt;\\n","pos":[9022,9103],"source":"\\n<p>An array of integers that represents the eras in the current calendar.</p>\\n"},{"pos":[9560,9570],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[10938,10958],"content":"MaxSupportedDateTime","needQuote":true,"nodes":[{"content":"MaxSupportedDateTime","pos":[0,20]}]},{"pos":[12540,12560],"content":"MinSupportedDateTime","needQuote":true,"nodes":[{"content":"MinSupportedDateTime","pos":[0,20]}]},{"pos":[14130,14145],"content":"TwoDigitYearMax","needQuote":true,"nodes":[{"content":"TwoDigitYearMax","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The last year of a 100-year range that can be represented by a 2-digit year.&lt;/p&gt;\\n","pos":[14885,14972],"source":"\\n<p>The last year of a 100-year range that can be represented by a 2-digit year.</p>\\n"},{"pos":[15812,15836],"content":"AddDays(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddDays(DateTime, Int32)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The number of days to add.","pos":[16929,16960],"source":"\\n<p>The number of days to add."},{"content":"&lt;/p&gt;\\n","pos":[16961,16967],"source":" </p>\\n"},{"pos":[19469,19494],"content":"AddHours(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddHours(DateTime, Int32)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The number of hours to add.","pos":[20596,20628],"source":"\\n<p>The number of hours to add."},{"content":"&lt;/p&gt;\\n","pos":[20629,20635],"source":" </p>\\n"},{"pos":[23162,23195],"content":"AddMilliseconds(DateTime, Double)","needQuote":true,"nodes":[{"content":"AddMilliseconds(DateTime, Double)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The number of milliseconds to add.&lt;/p&gt;\\n","pos":[24358,24403],"source":"\\n<p>The number of milliseconds to add.</p>\\n"},{"pos":[26918,26945],"content":"AddMinutes(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddMinutes(DateTime, Int32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The number of minutes to add.","pos":[28065,28099],"source":"\\n<p>The number of minutes to add."},{"content":"&lt;/p&gt;\\n","pos":[28100,28106],"source":" </p>\\n"},{"pos":[30614,30640],"content":"AddMonths(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddMonths(DateTime, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The number of months to add.","pos":[31789,31822],"source":"\\n<p>The number of months to add."},{"content":"&lt;/p&gt;\\n","pos":[31823,31829],"source":" </p>\\n"},{"pos":[34341,34368],"content":"AddSeconds(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddSeconds(DateTime, Int32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The number of seconds to add.","pos":[35488,35522],"source":"\\n<p>The number of seconds to add."},{"content":"&lt;/p&gt;\\n","pos":[35523,35529],"source":" </p>\\n"},{"pos":[38034,38059],"content":"AddWeeks(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddWeeks(DateTime, Int32)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The number of weeks to add.","pos":[39161,39193],"source":"\\n<p>The number of weeks to add."},{"content":"&lt;/p&gt;\\n","pos":[39194,39200],"source":" </p>\\n"},{"pos":[41703,41728],"content":"AddYears(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddYears(DateTime, Int32)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The number of years to add.","pos":[42868,42900],"source":"\\n<p>The number of years to add."},{"content":"&lt;/p&gt;\\n","pos":[42901,42907],"source":" </p>\\n"},{"pos":[45388,45411],"content":"GetDayOfMonth(DateTime)","needQuote":true,"nodes":[{"content":"GetDayOfMonth(DateTime)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;A positive integer that represents the day of the month in the &lt;em&gt;time&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[46406,46504],"source":"\\n<p>A positive integer that represents the day of the month in the <em>time</em> parameter.</p>\\n"},{"pos":[48510,48532],"content":"GetDayOfWeek(DateTime)","needQuote":true,"nodes":[{"content":"GetDayOfWeek(DateTime)","pos":[0,22]}]},{"pos":[51777,51799],"content":"GetDayOfYear(DateTime)","needQuote":true,"nodes":[{"content":"GetDayOfYear(DateTime)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;A positive integer that represents the day of the year in the &lt;em&gt;time&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[52789,52886],"source":"\\n<p>A positive integer that represents the day of the year in the <em>time</em> parameter.</p>\\n"},{"pos":[54941,54969],"content":"GetDaysInMonth(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetDaysInMonth(Int32, Int32)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[55762,55803],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[55804,55810],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A positive integer that represents the month.","pos":[55873,55923],"source":"\\n<p>A positive integer that represents the month."},{"content":"&lt;/p&gt;\\n","pos":[55924,55930],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of days in the specified month in the specified year in the current era.&lt;/p&gt;\\n","pos":[55989,56083],"source":"\\n<p>The number of days in the specified month in the specified year in the current era.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;month&lt;/em&gt; is outside the range supported by the calendar.","pos":[56214,56369],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[56370,56376],"source":" </p>\\n"},{"pos":[57252,57287],"content":"GetDaysInMonth(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"GetDaysInMonth(Int32, Int32, Int32)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[58144,58185],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[58186,58192],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A positive integer that represents the month.","pos":[58255,58305],"source":"\\n<p>A positive integer that represents the month."},{"content":"&lt;/p&gt;\\n","pos":[58306,58312],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[58373,58413],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[58414,58420],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of days in the specified month in the specified year in the specified era.&lt;/p&gt;\\n","pos":[58479,58575],"source":"\\n<p>The number of days in the specified month in the specified year in the specified era.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;month&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;era&lt;/em&gt; is outside the range supported by the calendar.","pos":[58706,58946],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[58947,58953],"source":" </p>\\n"},{"pos":[59963,59983],"content":"GetDaysInYear(Int32)","needQuote":true,"nodes":[{"content":"GetDaysInYear(Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[60719,60760],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[60761,60767],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of days in the specified year in the current era.&lt;/p&gt;\\n","pos":[60826,60897],"source":"\\n<p>The number of days in the specified year in the current era.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.","pos":[61028,61096],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[61097,61103],"source":" </p>\\n"},{"pos":[61957,61984],"content":"GetDaysInYear(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetDaysInYear(Int32, Int32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[62786,62827],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[62828,62834],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[62895,62935],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[62936,62942],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of days in the specified year in the specified era.&lt;/p&gt;\\n","pos":[63001,63074],"source":"\\n<p>The number of days in the specified year in the specified era.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;era&lt;/em&gt; is outside the range supported by the calendar.","pos":[63205,63358],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[63359,63365],"source":" </p>\\n"},{"pos":[64383,64399],"content":"GetEra(DateTime)","needQuote":true,"nodes":[{"content":"GetEra(DateTime)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;An integer that represents the era in &lt;em&gt;time&lt;/em&gt;.&lt;/p&gt;\\n","pos":[65353,65416],"source":"\\n<p>An integer that represents the era in <em>time</em>.</p>\\n"},{"pos":[67612,67629],"content":"GetHour(DateTime)","needQuote":true,"nodes":[{"content":"GetHour(DateTime)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;An integer from 0 to 23 that represents the hour in &lt;em&gt;time&lt;/em&gt;.&lt;/p&gt;\\n","pos":[68557,68634],"source":"\\n<p>An integer from 0 to 23 that represents the hour in <em>time</em>.</p>\\n"},{"pos":[70676,70702],"content":"GetLeapMonth(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetLeapMonth(Int32, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;A year.&lt;/p&gt;\\n","pos":[71532,71550],"source":"\\n<p>A year.</p>\\n"},{"content":"\\n&lt;p&gt;An era.&lt;/p&gt;\\n","pos":[71611,71629],"source":"\\n<p>An era.</p>\\n"},{"content":"\\n&lt;p&gt;A positive integer that indicates the leap month in the specified year and era.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;Zero if this calendar does not support a leap month or if the &lt;em&gt;year&lt;/em&gt; and &lt;em&gt;era&lt;/em&gt; parameters do not specify a leap year.&lt;/p&gt;\\n","pos":[71688,71931],"source":"\\n<p>A positive integer that indicates the leap month in the specified year and era.</p>\\n<p>-or-</p>\\n<p>Zero if this calendar does not support a leap month or if the <em>year</em> and <em>era</em> parameters do not specify a leap year.</p>\\n"},{"pos":[72333,72358],"content":"GetMilliseconds(DateTime)","needQuote":true,"nodes":[{"content":"GetMilliseconds(DateTime)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;A double-precision floating-point number from 0 to 999 that represents the milliseconds in the &lt;em&gt;time&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[73328,73458],"source":"\\n<p>A double-precision floating-point number from 0 to 999 that represents the milliseconds in the <em>time</em> parameter.</p>\\n"},{"pos":[75467,75486],"content":"GetMinute(DateTime)","needQuote":true,"nodes":[{"content":"GetMinute(DateTime)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;An integer from 0 to 59 that represents the minutes in &lt;em&gt;time&lt;/em&gt;.&lt;/p&gt;\\n","pos":[76424,76504],"source":"\\n<p>An integer from 0 to 59 that represents the minutes in <em>time</em>.</p>\\n"},{"pos":[78506,78524],"content":"GetMonth(DateTime)","needQuote":true,"nodes":[{"content":"GetMonth(DateTime)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;A positive integer that represents the month in &lt;em&gt;time&lt;/em&gt;.&lt;/p&gt;\\n","pos":[79488,79561],"source":"\\n<p>A positive integer that represents the month in <em>time</em>.</p>\\n"},{"pos":[81576,81598],"content":"GetMonthsInYear(Int32)","needQuote":true,"nodes":[{"content":"GetMonthsInYear(Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[82344,82385],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[82386,82392],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of months in the specified year in the current era.&lt;/p&gt;\\n","pos":[82451,82524],"source":"\\n<p>The number of months in the specified year in the current era.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.","pos":[82655,82723],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[82724,82730],"source":" </p>\\n"},{"pos":[83483,83512],"content":"GetMonthsInYear(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetMonthsInYear(Int32, Int32)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[84337,84378],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[84379,84385],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[84446,84486],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[84487,84493],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of months in the specified year in the specified era.&lt;/p&gt;\\n","pos":[84552,84627],"source":"\\n<p>The number of months in the specified year in the specified era.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;era&lt;/em&gt; is outside the range supported by the calendar.","pos":[84758,84911],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[84912,84918],"source":" </p>\\n"},{"pos":[85838,85857],"content":"GetSecond(DateTime)","needQuote":true,"nodes":[{"content":"GetSecond(DateTime)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;An integer from 0 to 59 that represents the seconds in &lt;em&gt;time&lt;/em&gt;.&lt;/p&gt;\\n","pos":[86795,86875],"source":"\\n<p>An integer from 0 to 59 that represents the seconds in <em>time</em>.</p>\\n"},{"pos":[89057,89109],"content":"GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)","needQuote":true,"nodes":[{"content":"GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)","pos":[0,52]}]},{"content":"\\n&lt;p&gt;A date and time value.","pos":[90097,90124],"source":"\\n<p>A date and time value."},{"content":"&lt;/p&gt;\\n","pos":[90125,90131],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An enumeration value that defines a calendar week.","pos":[90218,90273],"source":"\\n<p>An enumeration value that defines a calendar week."},{"content":"&lt;/p&gt;\\n","pos":[90274,90280],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An enumeration value that represents the first day of the week.","pos":[90356,90424],"source":"\\n<p>An enumeration value that represents the first day of the week."},{"content":"&lt;/p&gt;\\n","pos":[90425,90431],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A positive integer that represents the week of the year that includes the date in the &lt;em&gt;time&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[90490,90611],"source":"\\n<p>A positive integer that represents the week of the year that includes the date in the <em>time</em> parameter.</p>\\n"},{"pos":[93390,93407],"content":"GetYear(DateTime)","needQuote":true,"nodes":[{"content":"GetYear(DateTime)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;An integer that represents the year in &lt;em&gt;time&lt;/em&gt;.&lt;/p&gt;\\n","pos":[94366,94430],"source":"\\n<p>An integer that represents the year in <em>time</em>.</p>\\n"},{"pos":[96504,96534],"content":"IsLeapDay(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapDay(Int32, Int32, Int32)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[97340,97381],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[97382,97388],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A positive integer that represents the month.","pos":[97451,97501],"source":"\\n<p>A positive integer that represents the month."},{"content":"&lt;/p&gt;\\n","pos":[97502,97508],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A positive integer that represents the day.","pos":[97569,97617],"source":"\\n<p>A positive integer that represents the day."},{"content":"&lt;/p&gt;\\n","pos":[97618,97624],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the specified day is a leap day; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[97685,97790],"source":"\\n<p>\\n<strong>true</strong> if the specified day is a leap day; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;month&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;day&lt;/em&gt; is outside the range supported by the calendar.","pos":[97921,98161],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[98162,98168],"source":" </p>\\n"},{"pos":[99295,99332],"content":"IsLeapDay(Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapDay(Int32, Int32, Int32, Int32)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[100217,100258],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[100259,100265],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A positive integer that represents the month.","pos":[100328,100378],"source":"\\n<p>A positive integer that represents the month."},{"content":"&lt;/p&gt;\\n","pos":[100379,100385],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A positive integer that represents the day.","pos":[100446,100494],"source":"\\n<p>A positive integer that represents the day."},{"content":"&lt;/p&gt;\\n","pos":[100495,100501],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[100562,100602],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[100603,100609],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the specified day is a leap day; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[100670,100775],"source":"\\n<p>\\n<strong>true</strong> if the specified day is a leap day; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;month&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;day&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;era&lt;/em&gt; is outside the range supported by the calendar.","pos":[100906,101231],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[101232,101238],"source":" </p>\\n"},{"pos":[102508,102533],"content":"IsLeapMonth(Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapMonth(Int32, Int32)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[103333,103374],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[103375,103381],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A positive integer that represents the month.","pos":[103444,103494],"source":"\\n<p>A positive integer that represents the month."},{"content":"&lt;/p&gt;\\n","pos":[103495,103501],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the specified month is a leap month; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[103562,103671],"source":"\\n<p>\\n<strong>true</strong> if the specified month is a leap month; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;month&lt;/em&gt; is outside the range supported by the calendar.","pos":[103802,103957],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[103958,103964],"source":" </p>\\n"},{"pos":[104904,104936],"content":"IsLeapMonth(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapMonth(Int32, Int32, Int32)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[105815,105856],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[105857,105863],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A positive integer that represents the month.","pos":[105926,105976],"source":"\\n<p>A positive integer that represents the month."},{"content":"&lt;/p&gt;\\n","pos":[105977,105983],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[106044,106084],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[106085,106091],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the specified month is a leap month; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[106152,106261],"source":"\\n<p>\\n<strong>true</strong> if the specified month is a leap month; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;month&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;era&lt;/em&gt; is outside the range supported by the calendar.","pos":[106392,106632],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[106633,106639],"source":" </p>\\n"},{"pos":[107713,107730],"content":"IsLeapYear(Int32)","needQuote":true,"nodes":[{"content":"IsLeapYear(Int32)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[108459,108500],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[108501,108507],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the specified year is a leap year; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[108568,108675],"source":"\\n<p>\\n<strong>true</strong> if the specified year is a leap year; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.","pos":[108806,108874],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[108875,108881],"source":" </p>\\n"},{"pos":[109652,109676],"content":"IsLeapYear(Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapYear(Int32, Int32)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[110484,110525],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[110526,110532],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[110593,110633],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[110634,110640],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the specified year is a leap year; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[110701,110808],"source":"\\n<p>\\n<strong>true</strong> if the specified year is a leap year; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;era&lt;/em&gt; is outside the range supported by the calendar.","pos":[110939,111092],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[111093,111099],"source":" </p>\\n"},{"pos":[112280,112339],"content":"ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)","pos":[0,59]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[113413,113454],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[113455,113461],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A positive integer that represents the month.","pos":[113524,113574],"source":"\\n<p>A positive integer that represents the month."},{"content":"&lt;/p&gt;\\n","pos":[113575,113581],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A positive integer that represents the day.","pos":[113642,113690],"source":"\\n<p>A positive integer that represents the day."},{"content":"&lt;/p&gt;\\n","pos":[113691,113697],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 0 to 23 that represents the hour.","pos":[113759,113813],"source":"\\n<p>An integer from 0 to 23 that represents the hour."},{"content":"&lt;/p&gt;\\n","pos":[113814,113820],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 0 to 59 that represents the minute.","pos":[113884,113940],"source":"\\n<p>An integer from 0 to 59 that represents the minute."},{"content":"&lt;/p&gt;\\n","pos":[113941,113947],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 0 to 59 that represents the second.","pos":[114011,114067],"source":"\\n<p>An integer from 0 to 59 that represents the second."},{"content":"&lt;/p&gt;\\n","pos":[114068,114074],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 0 to 999 that represents the millisecond.","pos":[114143,114205],"source":"\\n<p>An integer from 0 to 999 that represents the millisecond."},{"content":"&lt;/p&gt;\\n","pos":[114206,114212],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;month&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;day&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;hour&lt;/em&gt; is less than zero or greater than 23.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;minute&lt;/em&gt; is less than zero or greater than 59.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;second&lt;/em&gt; is less than zero or greater than 59.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;millisecond&lt;/em&gt; is less than zero or greater than 999.","pos":[114558,115114],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>hour</em> is less than zero or greater than 23.</p>\\n<p>-or- </p>\\n<p>\\n<em>minute</em> is less than zero or greater than 59.</p>\\n<p>-or- </p>\\n<p>\\n<em>second</em> is less than zero or greater than 59.</p>\\n<p>-or- </p>\\n<p>\\n<em>millisecond</em> is less than zero or greater than 999."},{"content":"&lt;/p&gt;\\n","pos":[115115,115121],"source":" </p>\\n"},{"pos":[116193,116259],"content":"ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)","pos":[0,66]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[117412,117453],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[117454,117460],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A positive integer that represents the month.","pos":[117523,117573],"source":"\\n<p>A positive integer that represents the month."},{"content":"&lt;/p&gt;\\n","pos":[117574,117580],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A positive integer that represents the day.","pos":[117641,117689],"source":"\\n<p>A positive integer that represents the day."},{"content":"&lt;/p&gt;\\n","pos":[117690,117696],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 0 to 23 that represents the hour.","pos":[117758,117812],"source":"\\n<p>An integer from 0 to 23 that represents the hour."},{"content":"&lt;/p&gt;\\n","pos":[117813,117819],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 0 to 59 that represents the minute.","pos":[117883,117939],"source":"\\n<p>An integer from 0 to 59 that represents the minute."},{"content":"&lt;/p&gt;\\n","pos":[117940,117946],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 0 to 59 that represents the second.","pos":[118010,118066],"source":"\\n<p>An integer from 0 to 59 that represents the second."},{"content":"&lt;/p&gt;\\n","pos":[118067,118073],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 0 to 999 that represents the millisecond.","pos":[118142,118204],"source":"\\n<p>An integer from 0 to 999 that represents the millisecond."},{"content":"&lt;/p&gt;\\n","pos":[118205,118211],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[118272,118312],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[118313,118319],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;month&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;day&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;hour&lt;/em&gt; is less than zero or greater than 23.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;minute&lt;/em&gt; is less than zero or greater than 59.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;second&lt;/em&gt; is less than zero or greater than 59.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;millisecond&lt;/em&gt; is less than zero or greater than 999.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;era&lt;/em&gt; is outside the range supported by the calendar.","pos":[118665,119306],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>hour</em> is less than zero or greater than 23.</p>\\n<p>-or- </p>\\n<p>\\n<em>minute</em> is less than zero or greater than 59.</p>\\n<p>-or- </p>\\n<p>\\n<em>second</em> is less than zero or greater than 59.</p>\\n<p>-or- </p>\\n<p>\\n<em>millisecond</em> is less than zero or greater than 999.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[119307,119313],"source":" </p>\\n"},{"pos":[120342,120364],"content":"ToFourDigitYear(Int32)","needQuote":true,"nodes":[{"content":"ToFourDigitYear(Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;A two-digit or four-digit integer that represents the year to convert.","pos":[121254,121329],"source":"\\n<p>A two-digit or four-digit integer that represents the year to convert."},{"content":"&lt;/p&gt;\\n","pos":[121330,121336],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that contains the four-digit representation of &lt;em&gt;year&lt;/em&gt;.&lt;/p&gt;\\n","pos":[121395,121478],"source":"\\n<p>An integer that contains the four-digit representation of <em>year</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.","pos":[121609,121677],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[121678,121684],"source":" </p>\\n"},{"pos":[122018,122038],"content":"System.Globalization","needQuote":true,"nodes":[{"content":"System.Globalization","pos":[0,20]}]},{"pos":[122211,122217],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[122377,122387],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[122482,122490],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[122559,122560],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[122587,122588],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122658,122666],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[122735,122736],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[122763,122764],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122947,122961],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[123080,123086],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[123153,123154],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123204,123210],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[123270,123271],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123354,123360],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[123427,123428],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123478,123484],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[123544,123545],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123759,123781],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[123929,123935],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[124002,124003],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[124053,124059],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[124120,124121]},{"pos":[124176,124182],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[124242,124243],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[124340,124346],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[124413,124414],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[124464,124470],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[124531,124532]},{"pos":[124587,124593],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[124653,124654],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[124899,124930],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[125096,125111],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[125187,125188],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125238,125244],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[125305,125306]},{"pos":[125361,125367],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[125427,125428],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[125534,125549],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[125625,125626],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125676,125682],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[125743,125744]},{"pos":[125799,125805],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[125865,125866],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126096,126109],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[126210,126221],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[126293,126294],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[126321,126322],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126395,126406],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[126478,126479],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[126506,126507],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126682,126691],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[126784,126791],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[126859,126860],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[126887,126888],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126957,126964],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[127032,127033],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[127060,127061],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127236,127253],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[127362,127377],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[127453,127454],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[127481,127482],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127559,127574],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[127650,127651],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[127678,127679],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127824,127830],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[127960,127965],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[128071,128078],"content":"Int32[]","needQuote":true,"nodes":[{"content":"Int32[]","pos":[0,7]}]},{"pos":[128202,128207],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"[]","pos":[128267,128269]},{"pos":[128333,128338],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[128397,128399],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[128535,128542],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[128692,128700],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[128851,128857],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[129005,129014],"content":"DayOfWeek","needQuote":true,"nodes":[{"content":"DayOfWeek","pos":[0,9]}]},{"pos":[129206,129222],"content":"CalendarWeekRule","needQuote":true,"nodes":[{"content":"CalendarWeekRule","pos":[0,16]}]},{"pos":[129444,129469],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[129682,129699],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[129881,129908],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Globalization.Calendar\n  commentId: T:System.Globalization.Calendar\n  id: Calendar\n  parent: System.Globalization\n  children:\n  - System.Globalization.Calendar.#ctor\n  - System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n  - System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.CurrentEra\n  - System.Globalization.Calendar.Eras\n  - System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n  - System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n  - System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n  - System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n  - System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.Calendar.GetDaysInYear(System.Int32)\n  - System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)\n  - System.Globalization.Calendar.GetEra(System.DateTime)\n  - System.Globalization.Calendar.GetHour(System.DateTime)\n  - System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)\n  - System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  - System.Globalization.Calendar.GetMinute(System.DateTime)\n  - System.Globalization.Calendar.GetMonth(System.DateTime)\n  - System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  - System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)\n  - System.Globalization.Calendar.GetSecond(System.DateTime)\n  - System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  - System.Globalization.Calendar.GetYear(System.DateTime)\n  - System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n  - System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.Calendar.IsLeapYear(System.Int32)\n  - System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)\n  - System.Globalization.Calendar.IsReadOnly\n  - System.Globalization.Calendar.MaxSupportedDateTime\n  - System.Globalization.Calendar.MinSupportedDateTime\n  - System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n  - System.Globalization.Calendar.TwoDigitYearMax\n  langs:\n  - csharp\n  - vb\n  name: Calendar\n  fullName: System.Globalization.Calendar\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Calendar\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 31\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Represents time in divisions, such as weeks, months, and years.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public abstract class Calendar : ICloneable\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public MustInherit Class Calendar\n          Implements ICloneable\n  seealso:\n  - type: System.DateTime\n    commentId: T:System.DateTime\n  - type: System.Globalization.DateTimeFormatInfo\n    commentId: T:System.Globalization.DateTimeFormatInfo\n  - type: System.Globalization.ChineseLunisolarCalendar\n    commentId: T:System.Globalization.ChineseLunisolarCalendar\n  - type: System.Globalization.EastAsianLunisolarCalendar\n    commentId: T:System.Globalization.EastAsianLunisolarCalendar\n  - type: System.Globalization.GregorianCalendar\n    commentId: T:System.Globalization.GregorianCalendar\n  - type: System.Globalization.HebrewCalendar\n    commentId: T:System.Globalization.HebrewCalendar\n  - type: System.Globalization.HijriCalendar\n    commentId: T:System.Globalization.HijriCalendar\n  - type: System.Globalization.JapaneseCalendar\n    commentId: T:System.Globalization.JapaneseCalendar\n  - type: System.Globalization.JapaneseLunisolarCalendar\n    commentId: T:System.Globalization.JapaneseLunisolarCalendar\n  - type: System.Globalization.JulianCalendar\n    commentId: T:System.Globalization.JulianCalendar\n  - type: System.Globalization.KoreanCalendar\n    commentId: T:System.Globalization.KoreanCalendar\n  - type: System.Globalization.KoreanLunisolarCalendar\n    commentId: T:System.Globalization.KoreanLunisolarCalendar\n  - type: System.Globalization.PersianCalendar\n    commentId: T:System.Globalization.PersianCalendar\n  - type: System.Globalization.TaiwanCalendar\n    commentId: T:System.Globalization.TaiwanCalendar\n  - type: System.Globalization.TaiwanLunisolarCalendar\n    commentId: T:System.Globalization.TaiwanLunisolarCalendar\n  - type: System.Globalization.ThaiBuddhistCalendar\n    commentId: T:System.Globalization.ThaiBuddhistCalendar\n  - type: System.Globalization.UmAlQuraCalendar\n    commentId: T:System.Globalization.UmAlQuraCalendar\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: Calendar\n- uid: System.Globalization.Calendar.CurrentEra\n  commentId: F:System.Globalization.Calendar.CurrentEra\n  id: CurrentEra\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: CurrentEra\n  fullName: System.Globalization.Calendar.CurrentEra\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CurrentEra\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 240\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Represents the current era of the current calendar. </p>\\n\"\n  syntax:\n    content: public const int CurrentEra = 0\n    content.vb: Public Const CurrentEra As Integer = 0\n    return:\n      type: System.Int32\n  seealso:\n  - type: System.Globalization.Calendar.Eras\n    commentId: P:System.Globalization.Calendar.Eras\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: Calendar.CurrentEra\n- uid: System.Globalization.Calendar.#ctor\n  commentId: M:System.Globalization.Calendar.#ctor\n  id: '#ctor'\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: Calendar()\n  fullName: System.Globalization.Calendar.Calendar()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 122\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Globalization.Calendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected Calendar()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: Calendar.Calendar()\n- uid: System.Globalization.Calendar.Eras\n  commentId: P:System.Globalization.Calendar.Eras\n  id: Eras\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: Eras\n  fullName: System.Globalization.Calendar.Eras\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Eras\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 433\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>When overridden in a derived class, gets the list of eras in the current calendar.</p>\\n\"\n  syntax:\n    content: public abstract int[] Eras { get; }\n    content.vb: Public MustOverride ReadOnly Property Eras As Integer()\n    parameters: []\n    return:\n      type: System.Int32[]\n      description: \"\\n<p>An array of integers that represents the eras in the current calendar.</p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: Calendar.Eras\n- uid: System.Globalization.Calendar.IsReadOnly\n  commentId: P:System.Globalization.Calendar.IsReadOnly\n  id: IsReadOnly\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: IsReadOnly\n  fullName: System.Globalization.Calendar.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsReadOnly\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 162\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets a value indicating whether this <xref href=\\\"System.Globalization.Calendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is read-only.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public bool IsReadOnly { get; }\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public ReadOnly Property IsReadOnly As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this <xref href=\\\"System.Globalization.Calendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is read-only; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Calendar.IsReadOnly\n- uid: System.Globalization.Calendar.MaxSupportedDateTime\n  commentId: P:System.Globalization.Calendar.MaxSupportedDateTime\n  id: MaxSupportedDateTime\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: MaxSupportedDateTime\n  fullName: System.Globalization.Calendar.MaxSupportedDateTime\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MaxSupportedDateTime\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 110\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the latest date and time supported by this <xref href=\\\"System.Globalization.Calendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public virtual DateTime MaxSupportedDateTime { get; }\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overridable ReadOnly Property MaxSupportedDateTime As Date\n    parameters: []\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The latest date and time supported by this calendar. The default is <xref href=\\\"System.DateTime.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.MinSupportedDateTime\n    commentId: P:System.Globalization.Calendar.MinSupportedDateTime\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Calendar.MaxSupportedDateTime\n- uid: System.Globalization.Calendar.MinSupportedDateTime\n  commentId: P:System.Globalization.Calendar.MinSupportedDateTime\n  id: MinSupportedDateTime\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: MinSupportedDateTime\n  fullName: System.Globalization.Calendar.MinSupportedDateTime\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MinSupportedDateTime\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 99\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the earliest date and time supported by this <xref href=\\\"System.Globalization.Calendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public virtual DateTime MinSupportedDateTime { get; }\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overridable ReadOnly Property MinSupportedDateTime As Date\n    parameters: []\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The earliest date and time supported by this calendar. The default is <xref href=\\\"System.DateTime.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.MaxSupportedDateTime\n    commentId: P:System.Globalization.Calendar.MaxSupportedDateTime\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Calendar.MinSupportedDateTime\n- uid: System.Globalization.Calendar.TwoDigitYearMax\n  commentId: P:System.Globalization.Calendar.TwoDigitYearMax\n  id: TwoDigitYearMax\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: TwoDigitYearMax\n  fullName: System.Globalization.Calendar.TwoDigitYearMax\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TwoDigitYearMax\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 796\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</p>\\n\"\n  syntax:\n    content: public virtual int TwoDigitYearMax { get; set; }\n    content.vb: Public Overridable Property TwoDigitYearMax As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The last year of a 100-year range that can be represented by a 2-digit year.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The current <xref href=\\\"System.Globalization.Calendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is read-only.</p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n    commentId: M:System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Calendar.TwoDigitYearMax\n- uid: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n  commentId: M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n  id: AddDays(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: AddDays(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddDays(System.DateTime, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddDays\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 292\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the specified number of days away from the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual DateTime AddDays(DateTime time, int days)\n    content.vb: Public Overridable Function AddDays(time As Date, days As Integer) As Date\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which to add days. </p>\\n\"\n    - id: days\n      type: System.Int32\n      description: \"\\n<p>The number of days to add. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that results from adding the specified number of days to the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is outside the supported range of this calendar. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>days</em> is outside the supported range of the <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> return value. </p>\\n\"\n  seealso:\n  - type: System.DateTime\n    commentId: T:System.DateTime\n  - type: System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n    commentId: M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Calendar.AddDays(DateTime, Int32)\n- uid: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n  commentId: M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n  id: AddHours(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: AddHours(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddHours(System.DateTime, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddHours\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 303\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the specified number of hours away from the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual DateTime AddHours(DateTime time, int hours)\n    content.vb: Public Overridable Function AddHours(time As Date, hours As Integer) As Date\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which to add hours. </p>\\n\"\n    - id: hours\n      type: System.Int32\n      description: \"\\n<p>The number of hours to add. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that results from adding the specified number of hours to the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is outside the supported range of this calendar. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>hours</em> is outside the supported range of the <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> return value. </p>\\n\"\n  seealso:\n  - type: System.DateTime\n    commentId: T:System.DateTime\n  - type: System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n    commentId: M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Calendar.AddHours(DateTime, Int32)\n- uid: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n  commentId: M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n  id: AddMilliseconds(System.DateTime,System.Double)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: AddMilliseconds(DateTime, Double)\n  fullName: System.Globalization.Calendar.AddMilliseconds(System.DateTime, System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddMilliseconds\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 280\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the specified number of milliseconds away from the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual DateTime AddMilliseconds(DateTime time, double milliseconds)\n    content.vb: Public Overridable Function AddMilliseconds(time As Date, milliseconds As Double) As Date\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to add milliseconds to. </p>\\n\"\n    - id: milliseconds\n      type: System.Double\n      description: \"\\n<p>The number of milliseconds to add.</p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that results from adding the specified number of milliseconds to the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is outside the supported range of this calendar. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>milliseconds</em> is outside the supported range of the <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> return value. </p>\\n\"\n  seealso:\n  - type: System.DateTime\n    commentId: T:System.DateTime\n  - type: System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Calendar.AddMilliseconds(DateTime, Double)\n- uid: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n  commentId: M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n  id: AddMinutes(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: AddMinutes(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddMinutes(System.DateTime, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddMinutes\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 315\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the specified number of minutes away from the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual DateTime AddMinutes(DateTime time, int minutes)\n    content.vb: Public Overridable Function AddMinutes(time As Date, minutes As Integer) As Date\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which to add minutes. </p>\\n\"\n    - id: minutes\n      type: System.Int32\n      description: \"\\n<p>The number of minutes to add. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that results from adding the specified number of minutes to the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is outside the supported range of this calendar. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>minutes</em> is outside the supported range of the <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> return value. </p>\\n\"\n  seealso:\n  - type: System.DateTime\n    commentId: T:System.DateTime\n  - type: System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n    commentId: M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Calendar.AddMinutes(DateTime, Int32)\n- uid: System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n  commentId: M:System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n  id: AddMonths(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: AddMonths(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddMonths(System.DateTime, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddMonths\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 338\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>When overridden in a derived class, returns a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the specified number of months away from the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public abstract DateTime AddMonths(DateTime time, int months)\n    content.vb: Public MustOverride Function AddMonths(time As Date, months As Integer) As Date\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which to add months. </p>\\n\"\n    - id: months\n      type: System.Int32\n      description: \"\\n<p>The number of months to add. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that results from adding the specified number of months to the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is outside the supported range of this calendar. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>months</em> is outside the supported range of the <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> return value. </p>\\n\"\n  seealso:\n  - type: System.DateTime\n    commentId: T:System.DateTime\n  - type: System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n    commentId: M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: Calendar.AddMonths(DateTime, Int32)\n- uid: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n  commentId: M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n  id: AddSeconds(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: AddSeconds(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddSeconds(System.DateTime, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddSeconds\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 347\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the specified number of seconds away from the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual DateTime AddSeconds(DateTime time, int seconds)\n    content.vb: Public Overridable Function AddSeconds(time As Date, seconds As Integer) As Date\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which to add seconds. </p>\\n\"\n    - id: seconds\n      type: System.Int32\n      description: \"\\n<p>The number of seconds to add. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that results from adding the specified number of seconds to the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is outside the supported range of this calendar. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>seconds</em> is outside the supported range of the <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> return value. </p>\\n\"\n  seealso:\n  - type: System.DateTime\n    commentId: T:System.DateTime\n  - type: System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n    commentId: M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Calendar.AddSeconds(DateTime, Int32)\n- uid: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n  commentId: M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n  id: AddWeeks(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: AddWeeks(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddWeeks(System.DateTime, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddWeeks\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 356\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the specified number of weeks away from the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual DateTime AddWeeks(DateTime time, int weeks)\n    content.vb: Public Overridable Function AddWeeks(time As Date, weeks As Integer) As Date\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which to add weeks. </p>\\n\"\n    - id: weeks\n      type: System.Int32\n      description: \"\\n<p>The number of weeks to add. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that results from adding the specified number of weeks to the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is outside the supported range of this calendar. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>weeks</em> is outside the supported range of the <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> return value. </p>\\n\"\n  seealso:\n  - type: System.DateTime\n    commentId: T:System.DateTime\n  - type: System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n    commentId: M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Calendar.AddWeeks(DateTime, Int32)\n- uid: System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n  commentId: M:System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n  id: AddYears(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: AddYears(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddYears(System.DateTime, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddYears\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 370\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>When overridden in a derived class, returns a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the specified number of years away from the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public abstract DateTime AddYears(DateTime time, int years)\n    content.vb: Public MustOverride Function AddYears(time As Date, years As Integer) As Date\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which to add years. </p>\\n\"\n    - id: years\n      type: System.Int32\n      description: \"\\n<p>The number of years to add. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that results from adding the specified number of years to the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is outside the supported range of this calendar. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>years</em> is outside the supported range of the <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> return value. </p>\\n\"\n  seealso:\n  - type: System.DateTime\n    commentId: T:System.DateTime\n  - type: System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n    commentId: M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: Calendar.AddYears(DateTime, Int32)\n- uid: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n  commentId: M:System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n  id: GetDayOfMonth(System.DateTime)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: GetDayOfMonth(DateTime)\n  fullName: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDayOfMonth\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 376\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>When overridden in a derived class, returns the day of the month in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public abstract int GetDayOfMonth(DateTime time)\n    content.vb: Public MustOverride Function GetDayOfMonth(time As Date) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A positive integer that represents the day of the month in the <em>time</em> parameter.</p>\\n\"\n  seealso:\n  - type: System.DateTime.Day\n    commentId: P:System.DateTime.Day\n  - type: System.Globalization.Calendar.GetEra(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetEra(System.DateTime)\n  - type: System.Globalization.Calendar.GetYear(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetYear(System.DateTime)\n  - type: System.Globalization.Calendar.GetMonth(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMonth(System.DateTime)\n  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  - type: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n  - type: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n  - type: System.Globalization.Calendar.GetHour(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetHour(System.DateTime)\n  - type: System.Globalization.Calendar.GetMinute(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMinute(System.DateTime)\n  - type: System.Globalization.Calendar.GetSecond(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetSecond(System.DateTime)\n  - type: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: Calendar.GetDayOfMonth(DateTime)\n- uid: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n  commentId: M:System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n  id: GetDayOfWeek(System.DateTime)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: GetDayOfWeek(DateTime)\n  fullName: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDayOfWeek\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 384\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>When overridden in a derived class, returns the day of the week in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public abstract DayOfWeek GetDayOfWeek(DateTime time)\n    content.vb: Public MustOverride Function GetDayOfWeek(time As Date) As DayOfWeek\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.DayOfWeek\n      description: \"\\n<p>A <xref href=\\\"System.DayOfWeek\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that represents the day of the week in the <em>time</em> parameter.</p>\\n\"\n  seealso:\n  - type: System.DateTime.DayOfWeek\n    commentId: P:System.DateTime.DayOfWeek\n  - type: System.DayOfWeek\n    commentId: T:System.DayOfWeek\n  - type: System.Globalization.Calendar.GetEra(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetEra(System.DateTime)\n  - type: System.Globalization.Calendar.GetYear(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetYear(System.DateTime)\n  - type: System.Globalization.Calendar.GetMonth(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMonth(System.DateTime)\n  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  - type: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n  - type: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n  - type: System.Globalization.Calendar.GetHour(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetHour(System.DateTime)\n  - type: System.Globalization.Calendar.GetMinute(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMinute(System.DateTime)\n  - type: System.Globalization.Calendar.GetSecond(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetSecond(System.DateTime)\n  - type: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: Calendar.GetDayOfWeek(DateTime)\n- uid: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n  commentId: M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n  id: GetDayOfYear(System.DateTime)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: GetDayOfYear(DateTime)\n  fullName: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDayOfYear\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 390\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>When overridden in a derived class, returns the day of the year in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public abstract int GetDayOfYear(DateTime time)\n    content.vb: Public MustOverride Function GetDayOfYear(time As Date) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A positive integer that represents the day of the year in the <em>time</em> parameter.</p>\\n\"\n  seealso:\n  - type: System.DateTime.DayOfYear\n    commentId: P:System.DateTime.DayOfYear\n  - type: System.Globalization.Calendar.GetEra(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetEra(System.DateTime)\n  - type: System.Globalization.Calendar.GetYear(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetYear(System.DateTime)\n  - type: System.Globalization.Calendar.GetMonth(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMonth(System.DateTime)\n  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  - type: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n  - type: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n  - type: System.Globalization.Calendar.GetHour(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetHour(System.DateTime)\n  - type: System.Globalization.Calendar.GetMinute(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMinute(System.DateTime)\n  - type: System.Globalization.Calendar.GetSecond(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetSecond(System.DateTime)\n  - type: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: Calendar.GetDayOfYear(DateTime)\n- uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n  commentId: M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n  id: GetDaysInMonth(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: GetDaysInMonth(Int32, Int32)\n  fullName: System.Globalization.Calendar.GetDaysInMonth(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDaysInMonth\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 396\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the number of days in the specified month and year of the current era.</p>\\n\"\n  syntax:\n    content: public virtual int GetDaysInMonth(int year, int month)\n    content.vb: Public Overridable Function GetDaysInMonth(year As Integer, month As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>A positive integer that represents the month. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of days in the specified month in the specified year in the current era.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.GregorianCalendar\n    commentId: T:System.Globalization.GregorianCalendar\n  - type: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n    commentId: M:System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  - type: System.Globalization.Calendar.GetDaysInYear(System.Int32)\n    commentId: M:System.Globalization.Calendar.GetDaysInYear(System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Calendar.GetDaysInMonth(Int32, Int32)\n- uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  id: GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: GetDaysInMonth(Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.GetDaysInMonth(System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDaysInMonth\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 405\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>When overridden in a derived class, returns the number of days in the specified month, year, and era.</p>\\n\"\n  syntax:\n    content: public abstract int GetDaysInMonth(int year, int month, int era)\n    content.vb: Public MustOverride Function GetDaysInMonth(year As Integer, month As Integer, era As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>A positive integer that represents the month. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of days in the specified month in the specified year in the specified era.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.GregorianCalendar\n    commentId: T:System.Globalization.GregorianCalendar\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.Calendar.Eras\n    commentId: P:System.Globalization.Calendar.Eras\n  - type: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n    commentId: M:System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  - type: System.Globalization.Calendar.GetDaysInYear(System.Int32)\n    commentId: M:System.Globalization.Calendar.GetDaysInYear(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: Calendar.GetDaysInMonth(Int32, Int32, Int32)\n- uid: System.Globalization.Calendar.GetDaysInYear(System.Int32)\n  commentId: M:System.Globalization.Calendar.GetDaysInYear(System.Int32)\n  id: GetDaysInYear(System.Int32)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: GetDaysInYear(Int32)\n  fullName: System.Globalization.Calendar.GetDaysInYear(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDaysInYear\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 410\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the number of days in the specified year of the current era.</p>\\n\"\n  syntax:\n    content: public virtual int GetDaysInYear(int year)\n    content.vb: Public Overridable Function GetDaysInYear(year As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of days in the specified year in the current era.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.GregorianCalendar\n    commentId: T:System.Globalization.GregorianCalendar\n  - type: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n    commentId: M:System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  - type: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n    commentId: M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Calendar.GetDaysInYear(Int32)\n- uid: System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)\n  commentId: M:System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)\n  id: GetDaysInYear(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: GetDaysInYear(Int32, Int32)\n  fullName: System.Globalization.Calendar.GetDaysInYear(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDaysInYear\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 418\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>When overridden in a derived class, returns the number of days in the specified year and era.</p>\\n\"\n  syntax:\n    content: public abstract int GetDaysInYear(int year, int era)\n    content.vb: Public MustOverride Function GetDaysInYear(year As Integer, era As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of days in the specified year in the specified era.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.GregorianCalendar\n    commentId: T:System.Globalization.GregorianCalendar\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.Calendar.Eras\n    commentId: P:System.Globalization.Calendar.Eras\n  - type: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n    commentId: M:System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  - type: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n    commentId: M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: Calendar.GetDaysInYear(Int32, Int32)\n- uid: System.Globalization.Calendar.GetEra(System.DateTime)\n  commentId: M:System.Globalization.Calendar.GetEra(System.DateTime)\n  id: GetEra(System.DateTime)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: GetEra(DateTime)\n  fullName: System.Globalization.Calendar.GetEra(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetEra\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 422\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>When overridden in a derived class, returns the era in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public abstract int GetEra(DateTime time)\n    content.vb: Public MustOverride Function GetEra(time As Date) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era in <em>time</em>.</p>\\n\"\n  seealso:\n  - type: System.DateTime\n    commentId: T:System.DateTime\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.Calendar.Eras\n    commentId: P:System.Globalization.Calendar.Eras\n  - type: System.Globalization.Calendar.GetYear(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetYear(System.DateTime)\n  - type: System.Globalization.Calendar.GetMonth(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMonth(System.DateTime)\n  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  - type: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n  - type: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n  - type: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n  - type: System.Globalization.Calendar.GetHour(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetHour(System.DateTime)\n  - type: System.Globalization.Calendar.GetMinute(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMinute(System.DateTime)\n  - type: System.Globalization.Calendar.GetSecond(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetSecond(System.DateTime)\n  - type: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: Calendar.GetEra(DateTime)\n- uid: System.Globalization.Calendar.GetHour(System.DateTime)\n  commentId: M:System.Globalization.Calendar.GetHour(System.DateTime)\n  id: GetHour(System.DateTime)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: GetHour(DateTime)\n  fullName: System.Globalization.Calendar.GetHour(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHour\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 442\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the hours value in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual int GetHour(DateTime time)\n    content.vb: Public Overridable Function GetHour(time As Date) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer from 0 to 23 that represents the hour in <em>time</em>.</p>\\n\"\n  seealso:\n  - type: System.DateTime.Hour\n    commentId: P:System.DateTime.Hour\n  - type: System.Globalization.Calendar.GetEra(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetEra(System.DateTime)\n  - type: System.Globalization.Calendar.GetYear(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetYear(System.DateTime)\n  - type: System.Globalization.Calendar.GetMonth(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMonth(System.DateTime)\n  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  - type: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n  - type: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n  - type: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n  - type: System.Globalization.Calendar.GetMinute(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMinute(System.DateTime)\n  - type: System.Globalization.Calendar.GetSecond(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetSecond(System.DateTime)\n  - type: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Calendar.GetHour(DateTime)\n- uid: System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)\n  commentId: M:System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)\n  id: GetLeapMonth(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: GetLeapMonth(Int32, Int32)\n  fullName: System.Globalization.Calendar.GetLeapMonth(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetLeapMonth\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 720\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Calculates the leap month for a specified year and era.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public virtual int GetLeapMonth(int year, int era)\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overridable Function GetLeapMonth(year As Integer, era As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>A year.</p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An era.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A positive integer that indicates the leap month in the specified year and era.</p>\\n<p>-or-</p>\\n<p>Zero if this calendar does not support a leap month or if the <em>year</em> and <em>era</em> parameters do not specify a leap year.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Calendar.GetLeapMonth(Int32, Int32)\n- uid: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  commentId: M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  id: GetMilliseconds(System.DateTime)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: GetMilliseconds(DateTime)\n  fullName: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMilliseconds\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 450\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the milliseconds value in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual double GetMilliseconds(DateTime time)\n    content.vb: Public Overridable Function GetMilliseconds(time As Date) As Double\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number from 0 to 999 that represents the milliseconds in the <em>time</em> parameter.</p>\\n\"\n  seealso:\n  - type: System.DateTime.Millisecond\n    commentId: P:System.DateTime.Millisecond\n  - type: System.Globalization.Calendar.GetEra(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetEra(System.DateTime)\n  - type: System.Globalization.Calendar.GetYear(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetYear(System.DateTime)\n  - type: System.Globalization.Calendar.GetMonth(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMonth(System.DateTime)\n  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  - type: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n  - type: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n  - type: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n  - type: System.Globalization.Calendar.GetHour(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetHour(System.DateTime)\n  - type: System.Globalization.Calendar.GetMinute(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMinute(System.DateTime)\n  - type: System.Globalization.Calendar.GetSecond(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetSecond(System.DateTime)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Calendar.GetMilliseconds(DateTime)\n- uid: System.Globalization.Calendar.GetMinute(System.DateTime)\n  commentId: M:System.Globalization.Calendar.GetMinute(System.DateTime)\n  id: GetMinute(System.DateTime)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: GetMinute(DateTime)\n  fullName: System.Globalization.Calendar.GetMinute(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMinute\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 458\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the minutes value in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual int GetMinute(DateTime time)\n    content.vb: Public Overridable Function GetMinute(time As Date) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer from 0 to 59 that represents the minutes in <em>time</em>.</p>\\n\"\n  seealso:\n  - type: System.DateTime.Minute\n    commentId: P:System.DateTime.Minute\n  - type: System.Globalization.Calendar.GetEra(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetEra(System.DateTime)\n  - type: System.Globalization.Calendar.GetYear(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetYear(System.DateTime)\n  - type: System.Globalization.Calendar.GetMonth(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMonth(System.DateTime)\n  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  - type: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n  - type: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n  - type: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n  - type: System.Globalization.Calendar.GetHour(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetHour(System.DateTime)\n  - type: System.Globalization.Calendar.GetSecond(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetSecond(System.DateTime)\n  - type: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Calendar.GetMinute(DateTime)\n- uid: System.Globalization.Calendar.GetMonth(System.DateTime)\n  commentId: M:System.Globalization.Calendar.GetMonth(System.DateTime)\n  id: GetMonth(System.DateTime)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: GetMonth(DateTime)\n  fullName: System.Globalization.Calendar.GetMonth(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMonth\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 466\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>When overridden in a derived class, returns the month in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public abstract int GetMonth(DateTime time)\n    content.vb: Public MustOverride Function GetMonth(time As Date) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A positive integer that represents the month in <em>time</em>.</p>\\n\"\n  seealso:\n  - type: System.DateTime.Month\n    commentId: P:System.DateTime.Month\n  - type: System.Globalization.Calendar.GetEra(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetEra(System.DateTime)\n  - type: System.Globalization.Calendar.GetYear(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetYear(System.DateTime)\n  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  - type: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n  - type: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n  - type: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n  - type: System.Globalization.Calendar.GetHour(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetHour(System.DateTime)\n  - type: System.Globalization.Calendar.GetMinute(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMinute(System.DateTime)\n  - type: System.Globalization.Calendar.GetSecond(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetSecond(System.DateTime)\n  - type: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: Calendar.GetMonth(DateTime)\n- uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  commentId: M:System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  id: GetMonthsInYear(System.Int32)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: GetMonthsInYear(Int32)\n  fullName: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMonthsInYear\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 470\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the number of months in the specified year in the current era.</p>\\n\"\n  syntax:\n    content: public virtual int GetMonthsInYear(int year)\n    content.vb: Public Overridable Function GetMonthsInYear(year As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of months in the specified year in the current era.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.GetDaysInYear(System.Int32)\n    commentId: M:System.Globalization.Calendar.GetDaysInYear(System.Int32)\n  - type: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n    commentId: M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Calendar.GetMonthsInYear(Int32)\n- uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)\n  commentId: M:System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)\n  id: GetMonthsInYear(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: GetMonthsInYear(Int32, Int32)\n  fullName: System.Globalization.Calendar.GetMonthsInYear(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMonthsInYear\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 477\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>When overridden in a derived class, returns the number of months in the specified year in the specified era.</p>\\n\"\n  syntax:\n    content: public abstract int GetMonthsInYear(int year, int era)\n    content.vb: Public MustOverride Function GetMonthsInYear(year As Integer, era As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of months in the specified year in the specified era.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.Calendar.Eras\n    commentId: P:System.Globalization.Calendar.Eras\n  - type: System.Globalization.Calendar.GetDaysInYear(System.Int32)\n    commentId: M:System.Globalization.Calendar.GetDaysInYear(System.Int32)\n  - type: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n    commentId: M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: Calendar.GetMonthsInYear(Int32, Int32)\n- uid: System.Globalization.Calendar.GetSecond(System.DateTime)\n  commentId: M:System.Globalization.Calendar.GetSecond(System.DateTime)\n  id: GetSecond(System.DateTime)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: GetSecond(DateTime)\n  fullName: System.Globalization.Calendar.GetSecond(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetSecond\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 483\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the seconds value in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual int GetSecond(DateTime time)\n    content.vb: Public Overridable Function GetSecond(time As Date) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer from 0 to 59 that represents the seconds in <em>time</em>.</p>\\n\"\n  seealso:\n  - type: System.DateTime.Second\n    commentId: P:System.DateTime.Second\n  - type: System.Globalization.Calendar.GetEra(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetEra(System.DateTime)\n  - type: System.Globalization.Calendar.GetYear(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetYear(System.DateTime)\n  - type: System.Globalization.Calendar.GetMonth(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMonth(System.DateTime)\n  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  - type: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n  - type: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n  - type: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n  - type: System.Globalization.Calendar.GetHour(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetHour(System.DateTime)\n  - type: System.Globalization.Calendar.GetMinute(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMinute(System.DateTime)\n  - type: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Calendar.GetSecond(DateTime)\n- uid: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  id: GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)\n  fullName: System.Globalization.Calendar.GetWeekOfYear(System.DateTime, System.Globalization.CalendarWeekRule, System.DayOfWeek)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetWeekOfYear\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 649\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the week of the year that includes the date in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public virtual int GetWeekOfYear(DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek)\n    content.vb: Public Overridable Function GetWeekOfYear(time As Date, rule As CalendarWeekRule, firstDayOfWeek As DayOfWeek) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>A date and time value. </p>\\n\"\n    - id: rule\n      type: System.Globalization.CalendarWeekRule\n      description: \"\\n<p>An enumeration value that defines a calendar week. </p>\\n\"\n    - id: firstDayOfWeek\n      type: System.DayOfWeek\n      description: \"\\n<p>An enumeration value that represents the first day of the week. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A positive integer that represents the week of the year that includes the date in the <em>time</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>time</em> is earlier than <xref href=\\\"System.Globalization.Calendar.MinSupportedDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or later than <xref href=\\\"System.Globalization.Calendar.MaxSupportedDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<em>firstDayOfWeek</em> is not a valid <xref href=\\\"System.DayOfWeek\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n<p>-or- </p>\\n<p>\\n<em>rule</em> is not a valid <xref href=\\\"System.Globalization.CalendarWeekRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n\"\n  seealso:\n  - type: System.DateTime\n    commentId: T:System.DateTime\n  - type: System.Globalization.CalendarWeekRule\n    commentId: T:System.Globalization.CalendarWeekRule\n  - type: System.DayOfWeek\n    commentId: T:System.DayOfWeek\n  - type: System.Globalization.Calendar.GetEra(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetEra(System.DateTime)\n  - type: System.Globalization.Calendar.GetYear(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetYear(System.DateTime)\n  - type: System.Globalization.Calendar.GetMonth(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMonth(System.DateTime)\n  - type: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n  - type: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n  - type: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n  - type: System.Globalization.Calendar.GetHour(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetHour(System.DateTime)\n  - type: System.Globalization.Calendar.GetMinute(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMinute(System.DateTime)\n  - type: System.Globalization.Calendar.GetSecond(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetSecond(System.DateTime)\n  - type: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Calendar.GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)\n- uid: System.Globalization.Calendar.GetYear(System.DateTime)\n  commentId: M:System.Globalization.Calendar.GetYear(System.DateTime)\n  id: GetYear(System.DateTime)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: GetYear(DateTime)\n  fullName: System.Globalization.Calendar.GetYear(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetYear\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 675\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>When overridden in a derived class, returns the year in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public abstract int GetYear(DateTime time)\n    content.vb: Public MustOverride Function GetYear(time As Date) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year in <em>time</em>.</p>\\n\"\n  seealso:\n  - type: System.DateTime.Year\n    commentId: P:System.DateTime.Year\n  - type: System.Globalization.Calendar.GetEra(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetEra(System.DateTime)\n  - type: System.Globalization.Calendar.GetMonth(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMonth(System.DateTime)\n  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  - type: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n  - type: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n  - type: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n  - type: System.Globalization.Calendar.GetHour(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetHour(System.DateTime)\n  - type: System.Globalization.Calendar.GetMinute(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMinute(System.DateTime)\n  - type: System.Globalization.Calendar.GetSecond(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetSecond(System.DateTime)\n  - type: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: Calendar.GetYear(DateTime)\n- uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n  id: IsLeapDay(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: IsLeapDay(Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.IsLeapDay(System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLeapDay\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 681\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Determines whether the specified date in the current era is a leap day.</p>\\n\"\n  syntax:\n    content: public virtual bool IsLeapDay(int year, int month, int day)\n    content.vb: Public Overridable Function IsLeapDay(year As Integer, month As Integer, day As Integer) As Boolean\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>A positive integer that represents the month. </p>\\n\"\n    - id: day\n      type: System.Int32\n      description: \"\\n<p>A positive integer that represents the day. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified day is a leap day; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n    commentId: M:System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  - type: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n    commentId: M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n  - type: System.Globalization.Calendar.IsLeapYear(System.Int32)\n    commentId: M:System.Globalization.Calendar.IsLeapYear(System.Int32)\n  - type: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n    commentId: M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Calendar.IsLeapDay(Int32, Int32, Int32)\n- uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  id: IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: IsLeapDay(Int32, Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.IsLeapDay(System.Int32, System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLeapDay\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 690\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>When overridden in a derived class, determines whether the specified date in the specified era is a leap day.</p>\\n\"\n  syntax:\n    content: public abstract bool IsLeapDay(int year, int month, int day, int era)\n    content.vb: Public MustOverride Function IsLeapDay(year As Integer, month As Integer, day As Integer, era As Integer) As Boolean\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>A positive integer that represents the month. </p>\\n\"\n    - id: day\n      type: System.Int32\n      description: \"\\n<p>A positive integer that represents the day. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified day is a leap day; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.Calendar.Eras\n    commentId: P:System.Globalization.Calendar.Eras\n  - type: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n    commentId: M:System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  - type: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n    commentId: M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n  - type: System.Globalization.Calendar.IsLeapYear(System.Int32)\n    commentId: M:System.Globalization.Calendar.IsLeapYear(System.Int32)\n  - type: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n    commentId: M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: Calendar.IsLeapDay(Int32, Int32, Int32, Int32)\n- uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n  id: IsLeapMonth(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: IsLeapMonth(Int32, Int32)\n  fullName: System.Globalization.Calendar.IsLeapMonth(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLeapMonth\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 696\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Determines whether the specified month in the specified year in the current era is a leap month.</p>\\n\"\n  syntax:\n    content: public virtual bool IsLeapMonth(int year, int month)\n    content.vb: Public Overridable Function IsLeapMonth(year As Integer, month As Integer) As Boolean\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>A positive integer that represents the month. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified month is a leap month; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n    commentId: M:System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  - type: System.Globalization.Calendar.IsLeapYear(System.Int32)\n    commentId: M:System.Globalization.Calendar.IsLeapYear(System.Int32)\n  - type: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n    commentId: M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Calendar.IsLeapMonth(Int32, Int32)\n- uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  id: IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: IsLeapMonth(Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.IsLeapMonth(System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLeapMonth\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 704\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>When overridden in a derived class, determines whether the specified month in the specified year in the specified era is a leap month.</p>\\n\"\n  syntax:\n    content: public abstract bool IsLeapMonth(int year, int month, int era)\n    content.vb: Public MustOverride Function IsLeapMonth(year As Integer, month As Integer, era As Integer) As Boolean\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>A positive integer that represents the month. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified month is a leap month; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.Calendar.Eras\n    commentId: P:System.Globalization.Calendar.Eras\n  - type: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n    commentId: M:System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  - type: System.Globalization.Calendar.IsLeapYear(System.Int32)\n    commentId: M:System.Globalization.Calendar.IsLeapYear(System.Int32)\n  - type: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n    commentId: M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: Calendar.IsLeapMonth(Int32, Int32, Int32)\n- uid: System.Globalization.Calendar.IsLeapYear(System.Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapYear(System.Int32)\n  id: IsLeapYear(System.Int32)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: IsLeapYear(Int32)\n  fullName: System.Globalization.Calendar.IsLeapYear(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLeapYear\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 740\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Determines whether the specified year in the current era is a leap year.</p>\\n\"\n  syntax:\n    content: public virtual bool IsLeapYear(int year)\n    content.vb: Public Overridable Function IsLeapYear(year As Integer) As Boolean\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified year is a leap year; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n    commentId: M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n  - type: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n    commentId: M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Calendar.IsLeapYear(Int32)\n- uid: System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)\n  id: IsLeapYear(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: IsLeapYear(Int32, Int32)\n  fullName: System.Globalization.Calendar.IsLeapYear(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLeapYear\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 749\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>When overridden in a derived class, determines whether the specified year in the specified era is a leap year.</p>\\n\"\n  syntax:\n    content: public abstract bool IsLeapYear(int year, int era)\n    content.vb: Public MustOverride Function IsLeapYear(year As Integer, era As Integer) As Boolean\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified year is a leap year; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.Calendar.Eras\n    commentId: P:System.Globalization.Calendar.Eras\n  - type: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n    commentId: M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n  - type: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n    commentId: M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: Calendar.IsLeapYear(Int32, Int32)\n- uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.ToDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDateTime\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 754\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is set to the specified date and time in the current era.</p>\\n\"\n  syntax:\n    content: public virtual DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond)\n    content.vb: Public Overridable Function ToDateTime(year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer) As Date\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>A positive integer that represents the month. </p>\\n\"\n    - id: day\n      type: System.Int32\n      description: \"\\n<p>A positive integer that represents the day. </p>\\n\"\n    - id: hour\n      type: System.Int32\n      description: \"\\n<p>An integer from 0 to 23 that represents the hour. </p>\\n\"\n    - id: minute\n      type: System.Int32\n      description: \"\\n<p>An integer from 0 to 59 that represents the minute. </p>\\n\"\n    - id: second\n      type: System.Int32\n      description: \"\\n<p>An integer from 0 to 59 that represents the second. </p>\\n\"\n    - id: millisecond\n      type: System.Int32\n      description: \"\\n<p>An integer from 0 to 999 that represents the millisecond. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is set to the specified date and time in the current era.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>hour</em> is less than zero or greater than 23.</p>\\n<p>-or- </p>\\n<p>\\n<em>minute</em> is less than zero or greater than 59.</p>\\n<p>-or- </p>\\n<p>\\n<em>second</em> is less than zero or greater than 59.</p>\\n<p>-or- </p>\\n<p>\\n<em>millisecond</em> is less than zero or greater than 999. </p>\\n\"\n  seealso:\n  - type: System.DateTime\n    commentId: T:System.DateTime\n  - type: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n    commentId: M:System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  - type: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n    commentId: M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Calendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n- uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.ToDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDateTime\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 762\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>When overridden in a derived class, returns a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is set to the specified date and time in the specified era.</p>\\n\"\n  syntax:\n    content: public abstract DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era)\n    content.vb: Public MustOverride Function ToDateTime(year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, era As Integer) As Date\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>A positive integer that represents the month. </p>\\n\"\n    - id: day\n      type: System.Int32\n      description: \"\\n<p>A positive integer that represents the day. </p>\\n\"\n    - id: hour\n      type: System.Int32\n      description: \"\\n<p>An integer from 0 to 23 that represents the hour. </p>\\n\"\n    - id: minute\n      type: System.Int32\n      description: \"\\n<p>An integer from 0 to 59 that represents the minute. </p>\\n\"\n    - id: second\n      type: System.Int32\n      description: \"\\n<p>An integer from 0 to 59 that represents the second. </p>\\n\"\n    - id: millisecond\n      type: System.Int32\n      description: \"\\n<p>An integer from 0 to 999 that represents the millisecond. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is set to the specified date and time in the current era.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>hour</em> is less than zero or greater than 23.</p>\\n<p>-or- </p>\\n<p>\\n<em>minute</em> is less than zero or greater than 59.</p>\\n<p>-or- </p>\\n<p>\\n<em>second</em> is less than zero or greater than 59.</p>\\n<p>-or- </p>\\n<p>\\n<em>millisecond</em> is less than zero or greater than 999.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.DateTime\n    commentId: T:System.DateTime\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.Calendar.Eras\n    commentId: P:System.Globalization.Calendar.Eras\n  - type: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n    commentId: M:System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  - type: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n    commentId: M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: Calendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n- uid: System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n  commentId: M:System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n  id: ToFourDigitYear(System.Int32)\n  parent: System.Globalization.Calendar\n  langs:\n  - csharp\n  - vb\n  name: ToFourDigitYear(Int32)\n  fullName: System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/Calendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToFourDigitYear\n    path: src/mscorlib/src/System/Globalization/Calendar.cs\n    startLine: 815\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Converts the specified year to a four-digit year by using the <xref href=\\\"System.Globalization.Calendar.TwoDigitYearMax\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property to determine the appropriate century.</p>\\n\"\n  syntax:\n    content: public virtual int ToFourDigitYear(int year)\n    content.vb: Public Overridable Function ToFourDigitYear(year As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>A two-digit or four-digit integer that represents the year to convert. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer that contains the four-digit representation of <em>year</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.TwoDigitYearMax\n    commentId: P:System.Globalization.Calendar.TwoDigitYearMax\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Calendar.ToFourDigitYear(Int32)\nreferences:\n- uid: System.Globalization\n  isExternal: false\n  name: System.Globalization\n  fullName: System.Globalization\n  nameWithType: System.Globalization\n  commentId: N:System.Globalization\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Int32[]\n  name: Int32[]\n  fullName: System.Int32[]\n  fullname.vb: System.Int32()\n  name.vb: Int32()\n  spec.csharp:\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Int32[]\n  nameWithType.vb: Int32()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  fullName: System.DateTime\n  nameWithType: DateTime\n  commentId: T:System.DateTime\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  nameWithType: Double\n  commentId: T:System.Double\n- uid: System.DayOfWeek\n  parent: System\n  isExternal: false\n  name: DayOfWeek\n  fullName: System.DayOfWeek\n  nameWithType: DayOfWeek\n  commentId: T:System.DayOfWeek\n- uid: System.Globalization.CalendarWeekRule\n  parent: System.Globalization\n  isExternal: false\n  name: CalendarWeekRule\n  fullName: System.Globalization.CalendarWeekRule\n  nameWithType: CalendarWeekRule\n  commentId: T:System.Globalization.CalendarWeekRule\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}