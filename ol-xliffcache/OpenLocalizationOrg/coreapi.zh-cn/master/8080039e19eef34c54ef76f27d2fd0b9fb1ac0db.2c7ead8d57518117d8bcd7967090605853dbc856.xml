{"nodes":[{"pos":[1206,1219],"content":"FrameworkName","needQuote":true,"nodes":[{"content":"FrameworkName","pos":[0,13]}]},{"pos":[2637,2658],"content":"FrameworkName(String)","needQuote":true,"nodes":[{"content":"FrameworkName(String)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;A string that contains .NET Framework version information.&lt;/p&gt;\\n","pos":[3567,3636],"source":"\\n<p>A string that contains .NET Framework version information.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;frameworkName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[4262,4323],"source":"\\n<p>\\n<em>frameworkName</em> is <strong>null</strong>.</p>\\n"},{"pos":[4738,4768],"content":"FrameworkName(String, Version)","needQuote":true,"nodes":[{"content":"FrameworkName(String, Version)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;A string that identifies a .NET Framework version.&lt;/p&gt;\\n","pos":[5784,5845],"source":"\\n<p>A string that identifies a .NET Framework version.</p>\\n"},{"content":"\\n&lt;p&gt;An object that contains .NET Framework version information.&lt;/p&gt;\\n","pos":[5912,5982],"source":"\\n<p>An object that contains .NET Framework version information.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;identifier&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;version&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[6314,6438],"source":"\\n<p>\\n<em>identifier</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>version</em> is <strong>null</strong>.</p>\\n"},{"pos":[6904,6942],"content":"FrameworkName(String, Version, String)","needQuote":true,"nodes":[{"content":"FrameworkName(String, Version, String)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;A string that identifies a .NET Framework version.&lt;/p&gt;\\n","pos":[8027,8088],"source":"\\n<p>A string that identifies a .NET Framework version.</p>\\n"},{"content":"\\n&lt;p&gt;An object that contains .NET Framework version information.&lt;/p&gt;\\n","pos":[8155,8225],"source":"\\n<p>An object that contains .NET Framework version information.</p>\\n"},{"content":"\\n&lt;p&gt;A profile name.&lt;/p&gt;\\n","pos":[8291,8317],"source":"\\n<p>A profile name.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;identifier&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;version&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8649,8773],"source":"\\n<p>\\n<em>identifier</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>version</em> is <strong>null</strong>.</p>\\n"},{"pos":[9122,9130],"content":"FullName","needQuote":true,"nodes":[{"content":"FullName","pos":[0,8]}]},{"pos":[10405,10415],"content":"Identifier","needQuote":true,"nodes":[{"content":"Identifier","pos":[0,10]}]},{"pos":[11693,11700],"content":"Profile","needQuote":true,"nodes":[{"content":"Profile","pos":[0,7]}]},{"pos":[12967,12974],"content":"Version","needQuote":true,"nodes":[{"content":"Version","pos":[0,7]}]},{"pos":[14311,14325],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare to the current instance.&lt;/p&gt;\\n","pos":[15229,15286],"source":"\\n<p>The object to compare to the current instance.</p>\\n"},{"pos":[16129,16150],"content":"Equals(FrameworkName)","needQuote":true,"nodes":[{"content":"Equals(FrameworkName)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The object to compare to the current instance.&lt;/p&gt;\\n","pos":[17209,17266],"source":"\\n<p>The object to compare to the current instance.</p>\\n"},{"pos":[18058,18071],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer that represents the hash code of this instance.&lt;/p&gt;\\n","pos":[18856,18938],"source":"\\n<p>A 32-bit signed integer that represents the hash code of this instance.</p>\\n"},{"pos":[19581,19619],"content":"Equality(FrameworkName, FrameworkName)","needQuote":true,"nodes":[{"content":"Equality(FrameworkName, FrameworkName)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The first object to compare.&lt;/p&gt;\\n","pos":[20657,20696],"source":"\\n<p>The first object to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.&lt;/p&gt;\\n","pos":[20786,20826],"source":"\\n<p>The second object to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; parameters represent the same .NET Framework version; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[20887,21050],"source":"\\n<p>\\n<strong>true</strong> if the <em>left</em> and <em>right</em> parameters represent the same .NET Framework version; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[21679,21719],"content":"Inequality(FrameworkName, FrameworkName)","needQuote":true,"nodes":[{"content":"Inequality(FrameworkName, FrameworkName)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The first object to compare.&lt;/p&gt;\\n","pos":[22764,22803],"source":"\\n<p>The first object to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.&lt;/p&gt;\\n","pos":[22893,22933],"source":"\\n<p>The second object to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; parameters represent different .NET Framework versions; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[22994,23159],"source":"\\n<p>\\n<strong>true</strong> if the <em>left</em> and <em>right</em> parameters represent different .NET Framework versions; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[23532,23542],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[24716,24741],"content":"System.Runtime.Versioning","needQuote":true,"nodes":[{"content":"System.Runtime.Versioning","pos":[0,25]}]},{"pos":[24929,24935],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25139,25164],"content":"IEquatable<FrameworkName>","needQuote":true,"nodes":[{"content":"IEquatable&lt;FrameworkName&gt;","pos":[0,25],"source":"IEquatable<FrameworkName>"}]},{"pos":[25407,25417],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[25481,25482],"content":"<","needQuote":true,"nodes":[]},{"pos":[25558,25571],"content":"FrameworkName","needQuote":true,"nodes":[{"content":"FrameworkName","pos":[0,13]}]},{"pos":[25708,25718],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[25783,25786]},{"pos":[25869,25882],"content":"FrameworkName","needQuote":true,"nodes":[{"content":"FrameworkName","pos":[0,13]}]},{"pos":[25947,25948],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26237,26259],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[26407,26413],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26480,26481],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26531,26537],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26598,26599]},{"pos":[26654,26660],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26720,26721],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26818,26824],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26891,26892],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26942,26948],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27009,27010]},{"pos":[27065,27071],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27131,27132],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27377,27408],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[27574,27589],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[27665,27666],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27716,27722],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27783,27784]},{"pos":[27839,27845],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27905,27906],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28012,28027],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[28103,28104],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28154,28160],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28221,28222]},{"pos":[28277,28283],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28343,28344],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28570,28579],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[28672,28679],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[28747,28748],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28775,28776],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28845,28852],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[28920,28921],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28948,28949],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29124,29141],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[29250,29265],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[29341,29342],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29369,29370],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29447,29462],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[29538,29539],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29566,29567],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29712,29718],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[29838,29851],"content":"IEquatable<T>","needQuote":true,"nodes":[{"content":"IEquatable&lt;T&gt;","pos":[0,13],"source":"IEquatable<T>"}]},{"pos":[30006,30016],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[30059,30060],"content":"<","needQuote":true,"nodes":[]},{"pos":[30087,30088],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[30187,30197],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[30241,30244]},{"pos":[30278,30279],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[30306,30307],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30491,30497],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[30643,30650],"content":"Version","needQuote":true,"nodes":[{"content":"Version","pos":[0,7]}]},{"pos":[30826,30840],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[30959,30965],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[31032,31033],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31083,31089],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31149,31150],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31233,31239],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[31306,31307],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31357,31363],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31423,31424],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31597,31604],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[31922,31943],"content":"Equals(FrameworkName)","needQuote":true,"nodes":[{"content":"Equals(FrameworkName)","pos":[0,21]}]},{"pos":[32253,32259],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[32371,32372],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32448,32461],"content":"FrameworkName","needQuote":true,"nodes":[{"content":"FrameworkName","pos":[0,13]}]},{"pos":[32526,32527],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32605,32611],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[32726,32727],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32803,32816],"content":"FrameworkName","needQuote":true,"nodes":[{"content":"FrameworkName","pos":[0,13]}]},{"pos":[32881,32882],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33266,33279],"content":"FrameworkName","needQuote":true,"nodes":[{"content":"FrameworkName","pos":[0,13]}]},{"pos":[33483,33492],"content":"Equals(T)","needQuote":true,"nodes":[{"content":"Equals(T)","pos":[0,9]}]},{"pos":[33650,33656],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[33709,33710],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33737,33738],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[33765,33766],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33844,33850],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[33906,33907],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33934,33935],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[33962,33963],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34196,34209],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[34310,34321],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[34393,34394],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34421,34422],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34495,34506],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[34578,34579],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34606,34607],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34767,34772],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[34929,34939],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[35034,35042],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[35111,35112],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35139,35140],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35210,35218],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[35287,35288],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35315,35316],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35482,35499],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[35675,35696],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Runtime.Versioning.FrameworkName\n  commentId: T:System.Runtime.Versioning.FrameworkName\n  id: FrameworkName\n  parent: System.Runtime.Versioning\n  children:\n  - System.Runtime.Versioning.FrameworkName.#ctor(System.String)\n  - System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version)\n  - System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version,System.String)\n  - System.Runtime.Versioning.FrameworkName.Equals(System.Object)\n  - System.Runtime.Versioning.FrameworkName.Equals(System.Runtime.Versioning.FrameworkName)\n  - System.Runtime.Versioning.FrameworkName.FullName\n  - System.Runtime.Versioning.FrameworkName.GetHashCode\n  - System.Runtime.Versioning.FrameworkName.Identifier\n  - System.Runtime.Versioning.FrameworkName.op_Equality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)\n  - System.Runtime.Versioning.FrameworkName.op_Inequality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)\n  - System.Runtime.Versioning.FrameworkName.Profile\n  - System.Runtime.Versioning.FrameworkName.ToString\n  - System.Runtime.Versioning.FrameworkName.Version\n  langs:\n  - csharp\n  - vb\n  name: FrameworkName\n  fullName: System.Runtime.Versioning.FrameworkName\n  type: Class\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FrameworkName\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 652\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.Runtime.Versioning\n  summary: \"\\n<p>Represents the name of a version of the .NET Framework.</p>\\n\"\n  syntax:\n    content: 'public sealed class FrameworkName : IEquatable<FrameworkName>'\n    content.vb: >-\n      Public NotInheritable Class FrameworkName\n          Implements IEquatable(Of FrameworkName)\n  inheritance:\n  - System.Object\n  implements:\n  - System.IEquatable{System.Runtime.Versioning.FrameworkName}\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: FrameworkName\n- uid: System.Runtime.Versioning.FrameworkName.#ctor(System.String)\n  commentId: M:System.Runtime.Versioning.FrameworkName.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Runtime.Versioning.FrameworkName\n  langs:\n  - csharp\n  - vb\n  name: FrameworkName(String)\n  fullName: System.Runtime.Versioning.FrameworkName.FrameworkName(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 654\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.Runtime.Versioning\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Runtime.Versioning.FrameworkName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class from a string that contains information about a version of the .NET Framework.</p>\\n\"\n  syntax:\n    content: public FrameworkName(string frameworkName)\n    content.vb: Public Sub New(frameworkName As String)\n    parameters:\n    - id: frameworkName\n      type: System.String\n      description: \"\\n<p>A string that contains .NET Framework version information.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>frameworkName</em> is <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<em>frameworkName</em> has fewer than two components or more than three components.</p>\\n<p>-or-</p>\\n<p>\\n<em>frameworkName</em> does not include a major and minor version number.</p>\\n<p>-or-</p>\\n<p>\\n<em>frameworkName </em>does not include a valid version number.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>frameworkName</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: FrameworkName.FrameworkName(String)\n- uid: System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version)\n  commentId: M:System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version)\n  id: '#ctor(System.String,System.Version)'\n  parent: System.Runtime.Versioning.FrameworkName\n  langs:\n  - csharp\n  - vb\n  name: FrameworkName(String, Version)\n  fullName: System.Runtime.Versioning.FrameworkName.FrameworkName(System.String, System.Version)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 655\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.Runtime.Versioning\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Runtime.Versioning.FrameworkName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class from a string and a <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that identify a .NET Framework version.</p>\\n\"\n  syntax:\n    content: public FrameworkName(string identifier, Version version)\n    content.vb: Public Sub New(identifier As String, version As Version)\n    parameters:\n    - id: identifier\n      type: System.String\n      description: \"\\n<p>A string that identifies a .NET Framework version.</p>\\n\"\n    - id: version\n      type: System.Version\n      description: \"\\n<p>An object that contains .NET Framework version information.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>identifier</em> is <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>identifier</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>version</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: FrameworkName.FrameworkName(String, Version)\n- uid: System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version,System.String)\n  commentId: M:System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version,System.String)\n  id: '#ctor(System.String,System.Version,System.String)'\n  parent: System.Runtime.Versioning.FrameworkName\n  langs:\n  - csharp\n  - vb\n  name: FrameworkName(String, Version, String)\n  fullName: System.Runtime.Versioning.FrameworkName.FrameworkName(System.String, System.Version, System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 656\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.Runtime.Versioning\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Runtime.Versioning.FrameworkName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class from a string, a <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that identifies a .NET Framework version, and a profile name.</p>\\n\"\n  syntax:\n    content: public FrameworkName(string identifier, Version version, string profile)\n    content.vb: Public Sub New(identifier As String, version As Version, profile As String)\n    parameters:\n    - id: identifier\n      type: System.String\n      description: \"\\n<p>A string that identifies a .NET Framework version.</p>\\n\"\n    - id: version\n      type: System.Version\n      description: \"\\n<p>An object that contains .NET Framework version information.</p>\\n\"\n    - id: profile\n      type: System.String\n      description: \"\\n<p>A profile name.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>identifier</em> is <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>identifier</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>version</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: FrameworkName.FrameworkName(String, Version, String)\n- uid: System.Runtime.Versioning.FrameworkName.FullName\n  commentId: P:System.Runtime.Versioning.FrameworkName.FullName\n  id: FullName\n  parent: System.Runtime.Versioning.FrameworkName\n  langs:\n  - csharp\n  - vb\n  name: FullName\n  fullName: System.Runtime.Versioning.FrameworkName.FullName\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FullName\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 657\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.Runtime.Versioning\n  summary: \"\\n<p>Gets the full name of this <xref href=\\\"System.Runtime.Versioning.FrameworkName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public string FullName { get; }\n    content.vb: Public ReadOnly Property FullName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The full name of this <xref href=\\\"System.Runtime.Versioning.FrameworkName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FrameworkName.FullName\n- uid: System.Runtime.Versioning.FrameworkName.Identifier\n  commentId: P:System.Runtime.Versioning.FrameworkName.Identifier\n  id: Identifier\n  parent: System.Runtime.Versioning.FrameworkName\n  langs:\n  - csharp\n  - vb\n  name: Identifier\n  fullName: System.Runtime.Versioning.FrameworkName.Identifier\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Identifier\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 658\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.Runtime.Versioning\n  summary: \"\\n<p>Gets the identifier of this <xref href=\\\"System.Runtime.Versioning.FrameworkName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public string Identifier { get; }\n    content.vb: Public ReadOnly Property Identifier As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The identifier of this <xref href=\\\"System.Runtime.Versioning.FrameworkName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FrameworkName.Identifier\n- uid: System.Runtime.Versioning.FrameworkName.Profile\n  commentId: P:System.Runtime.Versioning.FrameworkName.Profile\n  id: Profile\n  parent: System.Runtime.Versioning.FrameworkName\n  langs:\n  - csharp\n  - vb\n  name: Profile\n  fullName: System.Runtime.Versioning.FrameworkName.Profile\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Profile\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 659\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.Runtime.Versioning\n  summary: \"\\n<p>Gets the profile name of this <xref href=\\\"System.Runtime.Versioning.FrameworkName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public string Profile { get; }\n    content.vb: Public ReadOnly Property Profile As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The profile name of this <xref href=\\\"System.Runtime.Versioning.FrameworkName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FrameworkName.Profile\n- uid: System.Runtime.Versioning.FrameworkName.Version\n  commentId: P:System.Runtime.Versioning.FrameworkName.Version\n  id: Version\n  parent: System.Runtime.Versioning.FrameworkName\n  langs:\n  - csharp\n  - vb\n  name: Version\n  fullName: System.Runtime.Versioning.FrameworkName.Version\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Version\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 660\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.Runtime.Versioning\n  summary: \"\\n<p>Gets the version of this <xref href=\\\"System.Runtime.Versioning.FrameworkName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public Version Version { get; }\n    content.vb: Public ReadOnly Property Version As Version\n    parameters: []\n    return:\n      type: System.Version\n      description: \"\\n<p>An object that contains version information about this <xref href=\\\"System.Runtime.Versioning.FrameworkName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FrameworkName.Version\n- uid: System.Runtime.Versioning.FrameworkName.Equals(System.Object)\n  commentId: M:System.Runtime.Versioning.FrameworkName.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Runtime.Versioning.FrameworkName\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Runtime.Versioning.FrameworkName.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 661\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.Runtime.Versioning\n  summary: \"\\n<p>Returns a value that indicates whether this <xref href=\\\"System.Runtime.Versioning.FrameworkName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance represents the same .NET Framework version as a specified object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare to the current instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if every component of the current <xref href=\\\"System.Runtime.Versioning.FrameworkName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object matches the corresponding component of <em>obj</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: FrameworkName.Equals(Object)\n- uid: System.Runtime.Versioning.FrameworkName.Equals(System.Runtime.Versioning.FrameworkName)\n  commentId: M:System.Runtime.Versioning.FrameworkName.Equals(System.Runtime.Versioning.FrameworkName)\n  id: Equals(System.Runtime.Versioning.FrameworkName)\n  parent: System.Runtime.Versioning.FrameworkName\n  langs:\n  - csharp\n  - vb\n  name: Equals(FrameworkName)\n  fullName: System.Runtime.Versioning.FrameworkName.Equals(System.Runtime.Versioning.FrameworkName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 662\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.Runtime.Versioning\n  summary: \"\\n<p>Returns a value that indicates whether this <xref href=\\\"System.Runtime.Versioning.FrameworkName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance represents the same .NET Framework version as a specified <xref href=\\\"System.Runtime.Versioning.FrameworkName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public bool Equals(FrameworkName other)\n    content.vb: Public Function Equals(other As FrameworkName) As Boolean\n    parameters:\n    - id: other\n      type: System.Runtime.Versioning.FrameworkName\n      description: \"\\n<p>The object to compare to the current instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if every component of the current <xref href=\\\"System.Runtime.Versioning.FrameworkName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object matches the corresponding component of <em>other</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.IEquatable{System.Runtime.Versioning.FrameworkName}.Equals(System.Runtime.Versioning.FrameworkName)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: FrameworkName.Equals(FrameworkName)\n- uid: System.Runtime.Versioning.FrameworkName.GetHashCode\n  commentId: M:System.Runtime.Versioning.FrameworkName.GetHashCode\n  id: GetHashCode\n  parent: System.Runtime.Versioning.FrameworkName\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Runtime.Versioning.FrameworkName.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 663\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.Runtime.Versioning\n  summary: \"\\n<p>Returns the hash code for the <xref href=\\\"System.Runtime.Versioning.FrameworkName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer that represents the hash code of this instance.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: FrameworkName.GetHashCode()\n- uid: System.Runtime.Versioning.FrameworkName.op_Equality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)\n  commentId: M:System.Runtime.Versioning.FrameworkName.op_Equality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)\n  id: op_Equality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)\n  parent: System.Runtime.Versioning.FrameworkName\n  langs:\n  - csharp\n  - vb\n  name: Equality(FrameworkName, FrameworkName)\n  fullName: System.Runtime.Versioning.FrameworkName.Equality(System.Runtime.Versioning.FrameworkName, System.Runtime.Versioning.FrameworkName)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 664\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.Runtime.Versioning\n  summary: \"\\n<p>Returns a value that indicates whether two <xref href=\\\"System.Runtime.Versioning.FrameworkName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects represent the same .NET Framework version.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(FrameworkName left, FrameworkName right)\n    content.vb: Public Shared Operator =(left As FrameworkName, right As FrameworkName) As Boolean\n    parameters:\n    - id: left\n      type: System.Runtime.Versioning.FrameworkName\n      description: \"\\n<p>The first object to compare.</p>\\n\"\n    - id: right\n      type: System.Runtime.Versioning.FrameworkName\n      description: \"\\n<p>The second object to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>left</em> and <em>right</em> parameters represent the same .NET Framework version; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: FrameworkName.Equality(FrameworkName, FrameworkName)\n- uid: System.Runtime.Versioning.FrameworkName.op_Inequality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)\n  commentId: M:System.Runtime.Versioning.FrameworkName.op_Inequality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)\n  id: op_Inequality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)\n  parent: System.Runtime.Versioning.FrameworkName\n  langs:\n  - csharp\n  - vb\n  name: Inequality(FrameworkName, FrameworkName)\n  fullName: System.Runtime.Versioning.FrameworkName.Inequality(System.Runtime.Versioning.FrameworkName, System.Runtime.Versioning.FrameworkName)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 665\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.Runtime.Versioning\n  summary: \"\\n<p>Returns a value that indicates whether two <xref href=\\\"System.Runtime.Versioning.FrameworkName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects represent different .NET Framework versions.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(FrameworkName left, FrameworkName right)\n    content.vb: Public Shared Operator <>(left As FrameworkName, right As FrameworkName) As Boolean\n    parameters:\n    - id: left\n      type: System.Runtime.Versioning.FrameworkName\n      description: \"\\n<p>The first object to compare.</p>\\n\"\n    - id: right\n      type: System.Runtime.Versioning.FrameworkName\n      description: \"\\n<p>The second object to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>left</em> and <em>right</em> parameters represent different .NET Framework versions; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: FrameworkName.Inequality(FrameworkName, FrameworkName)\n- uid: System.Runtime.Versioning.FrameworkName.ToString\n  commentId: M:System.Runtime.Versioning.FrameworkName.ToString\n  id: ToString\n  parent: System.Runtime.Versioning.FrameworkName\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Runtime.Versioning.FrameworkName.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 666\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.Runtime.Versioning\n  summary: \"\\n<p>Returns the string representation of this <xref href=\\\"System.Runtime.Versioning.FrameworkName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string that represents this <xref href=\\\"System.Runtime.Versioning.FrameworkName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: FrameworkName.ToString()\nreferences:\n- uid: System.Runtime.Versioning\n  isExternal: false\n  name: System.Runtime.Versioning\n  fullName: System.Runtime.Versioning\n  commentId: N:System.Runtime.Versioning\n  nameWithType: System.Runtime.Versioning\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.IEquatable{System.Runtime.Versioning.FrameworkName}\n  parent: System\n  definition: System.IEquatable`1\n  name: IEquatable<FrameworkName>\n  fullName: System.IEquatable<System.Runtime.Versioning.FrameworkName>\n  fullname.vb: System.IEquatable(Of System.Runtime.Versioning.FrameworkName)\n  name.vb: IEquatable(Of FrameworkName)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Runtime.Versioning.FrameworkName\n    name: FrameworkName\n    fullName: System.Runtime.Versioning.FrameworkName\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Runtime.Versioning.FrameworkName\n    name: FrameworkName\n    fullName: System.Runtime.Versioning.FrameworkName\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable{System.Runtime.Versioning.FrameworkName}\n  nameWithType: IEquatable<FrameworkName>\n  nameWithType.vb: IEquatable(Of FrameworkName)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.IEquatable`1\n  isExternal: false\n  name: IEquatable<T>\n  fullName: System.IEquatable<T>\n  fullname.vb: System.IEquatable(Of T)\n  name.vb: IEquatable(Of T)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable`1\n  nameWithType: IEquatable<T>\n  nameWithType.vb: IEquatable(Of T)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Version\n  parent: System\n  isExternal: false\n  name: Version\n  fullName: System.Version\n  commentId: T:System.Version\n  nameWithType: Version\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.IEquatable{System.Runtime.Versioning.FrameworkName}.Equals(System.Runtime.Versioning.FrameworkName)\n  parent: System.IEquatable{System.Runtime.Versioning.FrameworkName}\n  definition: System.IEquatable`1.Equals(`0)\n  name: Equals(FrameworkName)\n  fullName: System.IEquatable<System.Runtime.Versioning.FrameworkName>.Equals(System.Runtime.Versioning.FrameworkName)\n  fullname.vb: System.IEquatable(Of System.Runtime.Versioning.FrameworkName).Equals(System.Runtime.Versioning.FrameworkName)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<System.Runtime.Versioning.FrameworkName>.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Runtime.Versioning.FrameworkName\n    name: FrameworkName\n    fullName: System.Runtime.Versioning.FrameworkName\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of System.Runtime.Versioning.FrameworkName).Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Runtime.Versioning.FrameworkName\n    name: FrameworkName\n    fullName: System.Runtime.Versioning.FrameworkName\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable{System.Runtime.Versioning.FrameworkName}.Equals(System.Runtime.Versioning.FrameworkName)\n  nameWithType: IEquatable<FrameworkName>.Equals(FrameworkName)\n  nameWithType.vb: IEquatable(Of FrameworkName).Equals(FrameworkName)\n- uid: System.Runtime.Versioning.FrameworkName\n  parent: System.Runtime.Versioning\n  isExternal: false\n  name: FrameworkName\n  fullName: System.Runtime.Versioning.FrameworkName\n  commentId: T:System.Runtime.Versioning.FrameworkName\n  nameWithType: FrameworkName\n- uid: System.IEquatable`1.Equals(`0)\n  isExternal: false\n  name: Equals(T)\n  fullName: System.IEquatable<T>.Equals(T)\n  fullname.vb: System.IEquatable(Of T).Equals(T)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<T>.Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of T).Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable`1.Equals(`0)\n  nameWithType: IEquatable<T>.Equals(T)\n  nameWithType.vb: IEquatable(Of T).Equals(T)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}