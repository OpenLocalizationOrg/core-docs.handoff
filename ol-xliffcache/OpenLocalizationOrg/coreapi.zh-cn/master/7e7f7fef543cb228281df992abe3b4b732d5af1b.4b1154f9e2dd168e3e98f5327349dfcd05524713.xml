{"nodes":[{"pos":[1835,1847],"content":"MemoryStream","needQuote":true,"nodes":[{"content":"MemoryStream","pos":[0,12]}]},{"pos":[3751,3765],"content":"MemoryStream()","needQuote":true,"nodes":[{"content":"MemoryStream()","pos":[0,14]}]},{"pos":[4701,4721],"content":"MemoryStream(Byte[])","needQuote":true,"nodes":[{"content":"MemoryStream(Byte[])","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The array of unsigned bytes from which to create the current stream.","pos":[5471,5544],"source":"\\n<p>The array of unsigned bytes from which to create the current stream."},{"content":"&lt;/p&gt;\\n","pos":[5545,5551],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[5670,5718],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[5719,5725],"source":" </p>\\n"},{"pos":[6238,6267],"content":"MemoryStream(Byte[], Boolean)","needQuote":true,"nodes":[{"content":"MemoryStream(Byte[], Boolean)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The array of unsigned bytes from which to create this stream.","pos":[7196,7262],"source":"\\n<p>The array of unsigned bytes from which to create this stream."},{"content":"&lt;/p&gt;\\n","pos":[7263,7269],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[7642,7690],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[7691,7697],"source":" </p>\\n"},{"pos":[8286,8320],"content":"MemoryStream(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"MemoryStream(Byte[], Int32, Int32)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The array of unsigned bytes from which to create this stream.","pos":[9176,9242],"source":"\\n<p>The array of unsigned bytes from which to create this stream."},{"content":"&lt;/p&gt;\\n","pos":[9243,9249],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index into &lt;em&gt;buffer&lt;/em&gt; at which the stream begins.","pos":[9312,9375],"source":"\\n<p>The index into <em>buffer</em> at which the stream begins."},{"content":"&lt;/p&gt;\\n","pos":[9376,9382],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The length of the stream in bytes.","pos":[9445,9484],"source":"\\n<p>The length of the stream in bytes."},{"content":"&lt;/p&gt;\\n","pos":[9485,9491],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[9610,9658],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[9659,9665],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.","pos":[9782,9840],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[9841,9847],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The buffer length minus &lt;em&gt;index&lt;/em&gt; is less than &lt;em&gt;count&lt;/em&gt;.&lt;/p&gt;\\n","pos":[9944,10022],"source":"\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>.</p>\\n"},{"pos":[10683,10726],"content":"MemoryStream(Byte[], Int32, Int32, Boolean)","needQuote":true,"nodes":[{"content":"MemoryStream(Byte[], Int32, Int32, Boolean)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;The array of unsigned bytes from which to create this stream.","pos":[11754,11820],"source":"\\n<p>The array of unsigned bytes from which to create this stream."},{"content":"&lt;/p&gt;\\n","pos":[11821,11827],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index in &lt;em&gt;buffer&lt;/em&gt; at which the stream begins.","pos":[11890,11951],"source":"\\n<p>The index in <em>buffer</em> at which the stream begins."},{"content":"&lt;/p&gt;\\n","pos":[11952,11958],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The length of the stream in bytes.","pos":[12021,12060],"source":"\\n<p>The length of the stream in bytes."},{"content":"&lt;/p&gt;\\n","pos":[12061,12067],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[12440,12488],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[12489,12495],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; are negative.","pos":[12612,12665],"source":"\\n<p>\\n<em>index</em> or <em>count</em> are negative."},{"content":"&lt;/p&gt;\\n","pos":[12666,12672],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The buffer length minus &lt;em&gt;index&lt;/em&gt; is less than &lt;em&gt;count&lt;/em&gt;.&lt;/p&gt;\\n","pos":[12769,12847],"source":"\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>.</p>\\n"},{"pos":[13596,13648],"content":"MemoryStream(Byte[], Int32, Int32, Boolean, Boolean)","needQuote":true,"nodes":[{"content":"MemoryStream(Byte[], Int32, Int32, Boolean, Boolean)","pos":[0,52]}]},{"content":"\\n&lt;p&gt;The array of unsigned bytes from which to create this stream.","pos":[14863,14929],"source":"\\n<p>The array of unsigned bytes from which to create this stream."},{"content":"&lt;/p&gt;\\n","pos":[14930,14936],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index into &lt;em&gt;buffer&lt;/em&gt; at which the stream begins.","pos":[14999,15062],"source":"\\n<p>The index into <em>buffer</em> at which the stream begins."},{"content":"&lt;/p&gt;\\n","pos":[15063,15069],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The length of the stream in bytes.","pos":[15132,15171],"source":"\\n<p>The length of the stream in bytes."},{"content":"&lt;/p&gt;\\n","pos":[15172,15178],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[15873,15921],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[15922,15928],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.","pos":[16045,16097],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is negative."},{"content":"&lt;/p&gt;\\n","pos":[16098,16104],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The buffer length minus &lt;em&gt;index&lt;/em&gt; is less than &lt;em&gt;count&lt;/em&gt;.","pos":[16201,16273],"source":"\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>."},{"content":"&lt;/p&gt;\\n","pos":[16274,16280],"source":" </p>\\n"},{"pos":[16901,16920],"content":"MemoryStream(Int32)","needQuote":true,"nodes":[{"content":"MemoryStream(Int32)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The initial size of the internal array in bytes.","pos":[17677,17730],"source":"\\n<p>The initial size of the internal array in bytes."},{"content":"&lt;/p&gt;\\n","pos":[17731,17737],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;capacity&lt;/em&gt; is negative.","pos":[17868,17905],"source":"\\n<p>\\n<em>capacity</em> is negative."},{"content":"&lt;/p&gt;\\n","pos":[17906,17912],"source":" </p>\\n"},{"pos":[18187,18194],"content":"CanRead","needQuote":true,"nodes":[{"content":"CanRead","pos":[0,7]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the stream is open.&lt;/p&gt;\\n","pos":[18844,18901],"source":"\\n<p>\\n<strong>true</strong> if the stream is open.</p>\\n"},{"pos":[19251,19258],"content":"CanSeek","needQuote":true,"nodes":[{"content":"CanSeek","pos":[0,7]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the stream is open.&lt;/p&gt;\\n","pos":[19908,19965],"source":"\\n<p>\\n<strong>true</strong> if the stream is open.</p>\\n"},{"pos":[20318,20326],"content":"CanWrite","needQuote":true,"nodes":[{"content":"CanWrite","pos":[0,8]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the stream supports writing; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[20980,21081],"source":"\\n<p>\\n<strong>true</strong> if the stream supports writing; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[21436,21444],"content":"Capacity","needQuote":true,"nodes":[{"content":"Capacity","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The length of the usable portion of the buffer for the stream.&lt;/p&gt;\\n","pos":[22083,22156],"source":"\\n<p>The length of the usable portion of the buffer for the stream.</p>\\n"},{"content":"\\n&lt;p&gt;A capacity is set that is negative or less than the current length of the stream.","pos":[22287,22373],"source":"\\n<p>A capacity is set that is negative or less than the current length of the stream."},{"content":"&lt;/p&gt;\\n","pos":[22374,22380],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The current stream is closed.","pos":[22489,22523],"source":"\\n<p>The current stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[22524,22530],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;set&lt;/strong&gt; is invoked on a stream whose capacity cannot be modified.","pos":[22635,22720],"source":"\\n<p>\\n<strong>set</strong> is invoked on a stream whose capacity cannot be modified."},{"content":"&lt;/p&gt;\\n","pos":[22721,22727],"source":" </p>\\n"},{"pos":[23032,23038],"content":"Length","needQuote":true,"nodes":[{"content":"Length","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The length of the stream in bytes.&lt;/p&gt;\\n","pos":[23650,23695],"source":"\\n<p>The length of the stream in bytes.</p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[23856,23882],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[23883,23889],"source":" </p>\\n"},{"pos":[24202,24210],"content":"Position","needQuote":true,"nodes":[{"content":"Position","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The current position within the stream.&lt;/p&gt;\\n","pos":[24839,24889],"source":"\\n<p>The current position within the stream.</p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[25327,25353],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[25354,25360],"source":" </p>\\n"},{"pos":[25877,25922],"content":"CopyToAsync(Stream, Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"CopyToAsync(Stream, Int32, CancellationToken)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The stream to which the contents of the current stream will be copied.&lt;/p&gt;\\n","pos":[26880,26961],"source":"\\n<p>The stream to which the contents of the current stream will be copied.</p>\\n"},{"content":"\\n&lt;p&gt;The size, in bytes, of the buffer.","pos":[27029,27068],"source":"\\n<p>The size, in bytes, of the buffer."},{"content":"This value must be greater than zero.&lt;/p&gt;\\n","pos":[27069,27112],"source":" This value must be greater than zero.</p>\\n"},{"content":"\\n&lt;p&gt;The token to monitor for cancellation requests.&lt;/p&gt;\\n","pos":[27209,27267],"source":"\\n<p>The token to monitor for cancellation requests.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the asynchronous copy operation.&lt;/p&gt;\\n","pos":[27341,27407],"source":"\\n<p>A task that represents the asynchronous copy operation.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;destination&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[27635,27694],"source":"\\n<p>\\n<em>destination</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffersize&lt;/em&gt; is negative or zero.&lt;/p&gt;\\n","pos":[27811,27864],"source":"\\n<p>\\n<em>buffersize</em> is negative or zero.</p>\\n"},{"content":"\\n&lt;p&gt;Either the current stream or the destination stream is disposed.&lt;/p&gt;\\n","pos":[27973,28048],"source":"\\n<p>Either the current stream or the destination stream is disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The current stream does not support reading, or the destination stream does not support writing.&lt;/p&gt;\\n","pos":[28153,28260],"source":"\\n<p>The current stream does not support reading, or the destination stream does not support writing.</p>\\n"},{"pos":[28636,28652],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to release both managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to release only unmanaged resources.&lt;/p&gt;\\n","pos":[29443,29586],"source":"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\\n"},{"pos":[29940,29947],"content":"Flush()","needQuote":true,"nodes":[{"content":"Flush()","pos":[0,7]}]},{"pos":[30988,31017],"content":"FlushAsync(CancellationToken)","needQuote":true,"nodes":[{"content":"FlushAsync(CancellationToken)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The token to monitor for cancellation requests.&lt;/p&gt;\\n","pos":[31991,32049],"source":"\\n<p>The token to monitor for cancellation requests.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the asynchronous flush operation.&lt;/p&gt;\\n","pos":[32123,32190],"source":"\\n<p>A task that represents the asynchronous flush operation.</p>\\n"},{"content":"\\n&lt;p&gt;The stream has been disposed.&lt;/p&gt;\\n","pos":[32391,32431],"source":"\\n<p>The stream has been disposed.</p>\\n"},{"pos":[32857,32883],"content":"Read(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Read(Byte[], Int32, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;When this method returns, contains the specified byte array with the values between &lt;em&gt;offset&lt;/em&gt; and (&lt;em&gt;offset&lt;/em&gt; + &lt;em&gt;count&lt;/em&gt; - 1) replaced by the characters read from the current stream.","pos":[33658,33862],"source":"\\n<p>When this method returns, contains the specified byte array with the values between <em>offset</em> and (<em>offset</em> + <em>count</em> - 1) replaced by the characters read from the current stream."},{"content":"&lt;/p&gt;\\n","pos":[33863,33869],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based byte offset in &lt;em&gt;buffer&lt;/em&gt; at which to begin storing data from the current stream.&lt;/p&gt;\\n","pos":[34237,34349],"source":"\\n<p>The zero-based byte offset in <em>buffer</em> at which to begin storing data from the current stream.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of bytes to read.","pos":[34412,34453],"source":"\\n<p>The maximum number of bytes to read."},{"content":"&lt;/p&gt;\\n","pos":[34454,34460],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The total number of bytes written into the buffer.","pos":[34519,34574],"source":"\\n<p>The total number of bytes written into the buffer."},{"content":"This can be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached before any bytes are read.&lt;/p&gt;\\n","pos":[34575,34756],"source":" This can be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached before any bytes are read.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[34952,35000],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[35001,35007],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.","pos":[35124,35177],"source":"\\n<p>\\n<em>offset</em> or <em>count</em> is negative."},{"content":"&lt;/p&gt;\\n","pos":[35178,35184],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; subtracted from the buffer length is less than &lt;em&gt;count&lt;/em&gt;.","pos":[35281,35366],"source":"\\n<p>\\n<em>offset</em> subtracted from the buffer length is less than <em>count</em>."},{"content":"&lt;/p&gt;\\n","pos":[35367,35373],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The current stream instance is closed.","pos":[35482,35525],"source":"\\n<p>The current stream instance is closed."},{"content":"&lt;/p&gt;\\n","pos":[35526,35532],"source":" </p>\\n"},{"pos":[36258,36308],"content":"ReadAsync(Byte[], Int32, Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"ReadAsync(Byte[], Int32, Int32, CancellationToken)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;The buffer to write the data into.&lt;/p&gt;\\n","pos":[37483,37528],"source":"\\n<p>The buffer to write the data into.</p>\\n"},{"content":"\\n&lt;p&gt;The byte offset in &lt;em&gt;buffer&lt;/em&gt; at which to begin writing data from the stream.&lt;/p&gt;\\n","pos":[37592,37685],"source":"\\n<p>The byte offset in <em>buffer</em> at which to begin writing data from the stream.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of bytes to read.&lt;/p&gt;\\n","pos":[37748,37795],"source":"\\n<p>The maximum number of bytes to read.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the asynchronous read operation.","pos":[38160,38220],"source":"\\n<p>A task that represents the asynchronous read operation."},{"content":"The value of the &lt;em&gt;TResult&lt;/em&gt; parameter contains the total number of bytes read into the buffer.","pos":[38221,38321],"source":" The value of the <em>TResult</em> parameter contains the total number of bytes read into the buffer."},{"content":"The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.","pos":[38322,38528]},{"content":"&lt;/p&gt;\\n","pos":[38529,38535],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[38771,38825],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.&lt;/p&gt;\\n","pos":[38942,39001],"source":"\\n<p>\\n<em>offset</em> or <em>count</em> is negative.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of &lt;em&gt;offset&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; is larger than the buffer length.&lt;/p&gt;\\n","pos":[39098,39188],"source":"\\n<p>The sum of <em>offset</em> and <em>count</em> is larger than the buffer length.</p>\\n"},{"content":"\\n&lt;p&gt;The stream does not support reading.&lt;/p&gt;\\n","pos":[39293,39340],"source":"\\n<p>The stream does not support reading.</p>\\n"},{"content":"\\n&lt;p&gt;The stream has been disposed.&lt;/p&gt;\\n","pos":[39449,39489],"source":"\\n<p>The stream has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The stream is currently in use by a previous read operation.","pos":[39602,39667],"source":"\\n<p>The stream is currently in use by a previous read operation."},{"content":"&lt;/p&gt;\\n","pos":[39668,39674],"source":" </p>\\n"},{"pos":[40282,40292],"content":"ReadByte()","needQuote":true,"nodes":[{"content":"ReadByte()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The current stream instance is closed.","pos":[41192,41235],"source":"\\n<p>The current stream instance is closed."},{"content":"&lt;/p&gt;\\n","pos":[41236,41242],"source":" </p>\\n"},{"pos":[41631,41654],"content":"Seek(Int64, SeekOrigin)","needQuote":true,"nodes":[{"content":"Seek(Int64, SeekOrigin)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The new position within the stream.","pos":[42368,42408],"source":"\\n<p>The new position within the stream."},{"content":"This is relative to the &lt;em&gt;loc&lt;/em&gt; parameter, and can be positive or negative.","pos":[42409,42489],"source":" This is relative to the <em>loc</em> parameter, and can be positive or negative."},{"content":"&lt;/p&gt;\\n","pos":[42490,42496],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The new position within the stream, calculated by combining the initial reference point and the offset.&lt;/p&gt;\\n","pos":[42773,42887],"source":"\\n<p>The new position within the stream, calculated by combining the initial reference point and the offset.</p>\\n"},{"content":"\\n&lt;p&gt;Seeking is attempted before the beginning of the stream.","pos":[43063,43124],"source":"\\n<p>Seeking is attempted before the beginning of the stream."},{"content":"&lt;/p&gt;\\n","pos":[43125,43131],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The current stream instance is closed.","pos":[43765,43808],"source":"\\n<p>The current stream instance is closed."},{"content":"&lt;/p&gt;\\n","pos":[43809,43815],"source":" </p>\\n"},{"pos":[44169,44185],"content":"SetLength(Int64)","needQuote":true,"nodes":[{"content":"SetLength(Int64)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The value at which to set the length.","pos":[44840,44882],"source":"\\n<p>The value at which to set the length."},{"content":"&lt;/p&gt;\\n","pos":[44883,44889],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The current stream is not resizable and &lt;em&gt;value&lt;/em&gt; is larger than the current capacity.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The current stream does not support writing.","pos":[45063,45226],"source":"\\n<p>The current stream is not resizable and <em>value</em> is larger than the current capacity.</p>\\n<p>-or- </p>\\n<p>The current stream does not support writing."},{"content":"&lt;/p&gt;\\n","pos":[45227,45233],"source":" </p>\\n"},{"pos":[46018,46027],"content":"ToArray()","needQuote":true,"nodes":[{"content":"ToArray()","pos":[0,9]}]},{"content":"\\n&lt;p&gt;A new byte array.&lt;/p&gt;\\n","pos":[46738,46766],"source":"\\n<p>A new byte array.</p>\\n"},{"pos":[47179,47215],"content":"TryGetBuffer(out ArraySegment<Byte>)","needQuote":true,"nodes":[{"content":"TryGetBuffer(out ArraySegment&lt;Byte&gt;)","pos":[0,36],"source":"TryGetBuffer(out ArraySegment<Byte>)"}]},{"content":"\\n&lt;p&gt;The byte array segment from which this stream was created.&lt;/p&gt;\\n","pos":[48058,48127],"source":"\\n<p>The byte array segment from which this stream was created.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the conversion was successful; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[48188,48291],"source":"\\n<p>\\n<strong>true</strong> if the conversion was successful; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[48949,48976],"content":"Write(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Write(Byte[], Int32, Int32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The buffer to write data from.","pos":[49727,49762],"source":"\\n<p>The buffer to write data from."},{"content":"&lt;/p&gt;\\n","pos":[49763,49769],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based byte offset in &lt;em&gt;buffer&lt;/em&gt; at which to begin copying bytes to the current stream.&lt;/p&gt;\\n","pos":[49833,49944],"source":"\\n<p>The zero-based byte offset in <em>buffer</em> at which to begin copying bytes to the current stream.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of bytes to write.","pos":[50007,50049],"source":"\\n<p>The maximum number of bytes to write."},{"content":"&lt;/p&gt;\\n","pos":[50050,50056],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[50253,50301],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[50302,50308],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; subtracted from the buffer length is less than &lt;em&gt;count&lt;/em&gt;.","pos":[50818,50903],"source":"\\n<p>\\n<em>offset</em> subtracted from the buffer length is less than <em>count</em>."},{"content":"&lt;/p&gt;\\n","pos":[50904,50910],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; are negative.","pos":[51027,51081],"source":"\\n<p>\\n<em>offset</em> or <em>count</em> are negative."},{"content":"&lt;/p&gt;\\n","pos":[51082,51088],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[51179,51204],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[51205,51211],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The current stream instance is closed.","pos":[51320,51363],"source":"\\n<p>The current stream instance is closed."},{"content":"&lt;/p&gt;\\n","pos":[51364,51370],"source":" </p>\\n"},{"pos":[52103,52154],"content":"WriteAsync(Byte[], Int32, Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"WriteAsync(Byte[], Int32, Int32, CancellationToken)","pos":[0,51]}]},{"content":"\\n&lt;p&gt;The buffer to write data from.&lt;/p&gt;\\n","pos":[53327,53368],"source":"\\n<p>The buffer to write data from.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based byte offset in &lt;em&gt;buffer&lt;/em&gt; from which to begin copying bytes to the stream.&lt;/p&gt;\\n","pos":[53432,53537],"source":"\\n<p>The zero-based byte offset in <em>buffer</em> from which to begin copying bytes to the stream.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of bytes to write.&lt;/p&gt;\\n","pos":[53600,53648],"source":"\\n<p>The maximum number of bytes to write.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the asynchronous write operation.&lt;/p&gt;\\n","pos":[53999,54066],"source":"\\n<p>A task that represents the asynchronous write operation.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[54303,54357],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.&lt;/p&gt;\\n","pos":[54474,54533],"source":"\\n<p>\\n<em>offset</em> or <em>count</em> is negative.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of &lt;em&gt;offset&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; is larger than the buffer length.&lt;/p&gt;\\n","pos":[54630,54720],"source":"\\n<p>The sum of <em>offset</em> and <em>count</em> is larger than the buffer length.</p>\\n"},{"content":"\\n&lt;p&gt;The stream does not support writing.&lt;/p&gt;\\n","pos":[54825,54872],"source":"\\n<p>The stream does not support writing.</p>\\n"},{"content":"\\n&lt;p&gt;The stream has been disposed.&lt;/p&gt;\\n","pos":[54981,55021],"source":"\\n<p>The stream has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The stream is currently in use by a previous write operation.","pos":[55134,55200],"source":"\\n<p>The stream is currently in use by a previous write operation."},{"content":"&lt;/p&gt;\\n","pos":[55201,55207],"source":" </p>\\n"},{"pos":[55861,55876],"content":"WriteByte(Byte)","needQuote":true,"nodes":[{"content":"WriteByte(Byte)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The byte to write.","pos":[56528,56551],"source":"\\n<p>The byte to write."},{"content":"&lt;/p&gt;\\n","pos":[56552,56558],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The current stream is closed.","pos":[57115,57149],"source":"\\n<p>The current stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[57150,57156],"source":" </p>\\n"},{"pos":[57508,57523],"content":"WriteTo(Stream)","needQuote":true,"nodes":[{"content":"WriteTo(Stream)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The stream to write this memory stream to.","pos":[58192,58239],"source":"\\n<p>The stream to write this memory stream to."},{"content":"&lt;/p&gt;\\n","pos":[58240,58246],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;stream&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[58365,58413],"source":"\\n<p>\\n<em>stream</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[58414,58420],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The current or target stream is closed.","pos":[58529,58573],"source":"\\n<p>The current or target stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[58574,58580],"source":" </p>\\n"},{"pos":[58770,58779],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[58919,58925],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[59076,59082],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[59238,59249],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[59608,59618],"content":"CanTimeout","needQuote":true,"nodes":[{"content":"CanTimeout","pos":[0,10]}]},{"pos":[59827,59838],"content":"ReadTimeout","needQuote":true,"nodes":[{"content":"ReadTimeout","pos":[0,11]}]},{"pos":[60051,60063],"content":"WriteTimeout","needQuote":true,"nodes":[{"content":"WriteTimeout","pos":[0,12]}]},{"pos":[60291,60305],"content":"CopyTo(Stream)","needQuote":true,"nodes":[{"content":"CopyTo(Stream)","pos":[0,14]}]},{"pos":[60436,60442],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[60491,60492],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60545,60551],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[60593,60594],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60683,60689],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[60738,60739],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60792,60798],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[60840,60841],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61069,61090],"content":"CopyTo(Stream, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Stream, Int32)","pos":[0,21]}]},{"pos":[61248,61254],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[61303,61304],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61357,61363],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[61406,61407]},{"pos":[61461,61466],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[61525,61526],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61628,61634],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[61683,61684],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61737,61743],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[61786,61787]},{"pos":[61841,61846],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[61905,61906],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62147,62166],"content":"CopyToAsync(Stream)","needQuote":true,"nodes":[{"content":"CopyToAsync(Stream)","pos":[0,19]}]},{"pos":[62307,62318],"content":"CopyToAsync","needQuote":true,"nodes":[{"content":"CopyToAsync","pos":[0,11]}]},{"pos":[62372,62373],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62426,62432],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[62474,62475],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62569,62580],"content":"CopyToAsync","needQuote":true,"nodes":[{"content":"CopyToAsync","pos":[0,11]}]},{"pos":[62634,62635],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62688,62694],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[62736,62737],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62980,63006],"content":"CopyToAsync(Stream, Int32)","needQuote":true,"nodes":[{"content":"CopyToAsync(Stream, Int32)","pos":[0,26]}]},{"pos":[63174,63185],"content":"CopyToAsync","needQuote":true,"nodes":[{"content":"CopyToAsync","pos":[0,11]}]},{"pos":[63239,63240],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63293,63299],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[63342,63343]},{"pos":[63397,63402],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[63461,63462],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63569,63580],"content":"CopyToAsync","needQuote":true,"nodes":[{"content":"CopyToAsync","pos":[0,11]}]},{"pos":[63634,63635],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63688,63694],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[63737,63738]},{"pos":[63792,63797],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[63856,63857],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64086,64095],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[64194,64201],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[64251,64252],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64279,64280],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64352,64359],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[64409,64410],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64437,64438],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64618,64630],"content":"FlushAsync()","needQuote":true,"nodes":[{"content":"FlushAsync()","pos":[0,12]}]},{"pos":[64735,64745],"content":"FlushAsync","needQuote":true,"nodes":[{"content":"FlushAsync","pos":[0,10]}]},{"pos":[64798,64799],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64826,64827],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64902,64912],"content":"FlushAsync","needQuote":true,"nodes":[{"content":"FlushAsync","pos":[0,10]}]},{"pos":[64965,64966],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64993,64994],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65219,65250],"content":"ReadAsync(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadAsync(Byte[], Int32, Int32)","pos":[0,31]}]},{"pos":[65563,65572],"content":"ReadAsync","needQuote":true,"nodes":[{"content":"ReadAsync","pos":[0,9]}]},{"pos":[65624,65625],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65673,65677],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[65736,65738]},{"content":",","pos":[65770,65771]},{"pos":[65825,65830],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[65890,65891]},{"pos":[65945,65950],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[66009,66010],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66125,66134],"content":"ReadAsync","needQuote":true,"nodes":[{"content":"ReadAsync","pos":[0,9]}]},{"pos":[66186,66187],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66235,66239],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[66297,66299],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[66328,66329]},{"pos":[66383,66388],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[66448,66449]},{"pos":[66503,66508],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[66567,66568],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66911,66943],"content":"WriteAsync(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteAsync(Byte[], Int32, Int32)","pos":[0,32]}]},{"pos":[67260,67270],"content":"WriteAsync","needQuote":true,"nodes":[{"content":"WriteAsync","pos":[0,10]}]},{"pos":[67323,67324],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67372,67376],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[67435,67437]},{"content":",","pos":[67469,67470]},{"pos":[67524,67529],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[67589,67590]},{"pos":[67644,67649],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[67708,67709],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67825,67835],"content":"WriteAsync","needQuote":true,"nodes":[{"content":"WriteAsync","pos":[0,10]}]},{"pos":[67888,67889],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67937,67941],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[67999,68001],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[68030,68031]},{"pos":[68085,68090],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[68150,68151]},{"pos":[68205,68210],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[68269,68270],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68567,68577],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[68672,68680],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[68749,68750],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68777,68778],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68848,68856],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[68925,68926],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68953,68954],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69137,69151],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[69270,69276],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[69343,69344],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69394,69400],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[69460,69461],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69544,69550],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[69617,69618],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69668,69674],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[69734,69735],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69949,69971],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[70119,70125],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[70192,70193],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70243,70249],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[70310,70311]},{"pos":[70366,70372],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[70432,70433],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70530,70536],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[70603,70604],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70654,70660],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[70721,70722]},{"pos":[70777,70783],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[70843,70844],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71089,71120],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[71286,71301],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[71377,71378],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71428,71434],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[71495,71496]},{"pos":[71551,71557],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[71617,71618],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71724,71739],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[71815,71816],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71866,71872],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[71933,71934]},{"pos":[71989,71995],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[72055,72056],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72286,72299],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[72400,72411],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[72483,72484],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72511,72512],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72585,72596],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[72668,72669],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72696,72697],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72872,72881],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[72974,72981],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[73049,73050],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73077,73078],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73147,73154],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[73222,73223],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73250,73251],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73426,73443],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[73552,73567],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[73643,73644],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73671,73672],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73749,73764],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[73840,73841],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73868,73869],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74014,74020],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[74114,74120],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[74240,74244],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[74303,74305]},{"pos":[74368,74372],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[74430,74432],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[74566,74573],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[74720,74725],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[74888,74895],"content":"CanRead","needQuote":true,"nodes":[{"content":"CanRead","pos":[0,7]}]},{"pos":[75091,75098],"content":"CanSeek","needQuote":true,"nodes":[{"content":"CanSeek","pos":[0,7]}]},{"pos":[75295,75303],"content":"CanWrite","needQuote":true,"nodes":[{"content":"CanWrite","pos":[0,8]}]},{"pos":[75501,75507],"content":"Length","needQuote":true,"nodes":[{"content":"Length","pos":[0,6]}]},{"pos":[75678,75683],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[75847,75855],"content":"Position","needQuote":true,"nodes":[{"content":"Position","pos":[0,8]}]},{"pos":[76123,76168],"content":"CopyToAsync(Stream, Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"CopyToAsync(Stream, Int32, CancellationToken)","pos":[0,45]}]},{"pos":[76407,76418],"content":"CopyToAsync","needQuote":true,"nodes":[{"content":"CopyToAsync","pos":[0,11]}]},{"pos":[76472,76473],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76526,76532],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[76575,76576]},{"pos":[76630,76635],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[76695,76696]},{"pos":[76772,76789],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[76870,76871],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77013,77024],"content":"CopyToAsync","needQuote":true,"nodes":[{"content":"CopyToAsync","pos":[0,11]}]},{"pos":[77078,77079],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77132,77138],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[77181,77182]},{"pos":[77236,77241],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[77301,77302]},{"pos":[77378,77395],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[77476,77477],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77770,77787],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[78015,78019],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[78176,78192],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[78345,78367],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[78582,78598],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[78727,78734],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[78784,78785],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78836,78843],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[78904,78905],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78993,79000],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[79050,79051],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79102,79109],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[79170,79171],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79369,79376],"content":"Flush()","needQuote":true,"nodes":[{"content":"Flush()","pos":[0,7]}]},{"pos":[79471,79476],"content":"Flush","needQuote":true,"nodes":[{"content":"Flush","pos":[0,5]}]},{"pos":[79524,79525],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79552,79553],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79623,79628],"content":"Flush","needQuote":true,"nodes":[{"content":"Flush","pos":[0,5]}]},{"pos":[79676,79677],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79704,79705],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79916,79945],"content":"FlushAsync(CancellationToken)","needQuote":true,"nodes":[{"content":"FlushAsync(CancellationToken)","pos":[0,29]}]},{"pos":[80120,80130],"content":"FlushAsync","needQuote":true,"nodes":[{"content":"FlushAsync","pos":[0,10]}]},{"pos":[80183,80184],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80255,80272],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[80353,80354],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80465,80475],"content":"FlushAsync","needQuote":true,"nodes":[{"content":"FlushAsync","pos":[0,10]}]},{"pos":[80528,80529],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80600,80617],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[80698,80699],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80972,80998],"content":"Read(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Read(Byte[], Int32, Int32)","pos":[0,26]}]},{"pos":[81291,81295],"content":"Read","needQuote":true,"nodes":[{"content":"Read","pos":[0,4]}]},{"pos":[81342,81343],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81391,81395],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[81454,81456]},{"content":",","pos":[81488,81489]},{"pos":[81543,81548],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[81608,81609]},{"pos":[81663,81668],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[81727,81728],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81838,81842],"content":"Read","needQuote":true,"nodes":[{"content":"Read","pos":[0,4]}]},{"pos":[81889,81890],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81938,81942],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[82000,82002],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[82031,82032]},{"pos":[82086,82091],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[82151,82152]},{"pos":[82206,82211],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[82270,82271],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82633,82683],"content":"ReadAsync(Byte[], Int32, Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"ReadAsync(Byte[], Int32, Int32, CancellationToken)","pos":[0,50]}]},{"pos":[83122,83131],"content":"ReadAsync","needQuote":true,"nodes":[{"content":"ReadAsync","pos":[0,9]}]},{"pos":[83183,83184],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83232,83236],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[83295,83297]},{"content":",","pos":[83329,83330]},{"pos":[83384,83389],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[83449,83450]},{"pos":[83504,83509],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[83569,83570]},{"pos":[83646,83663],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[83744,83745],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83895,83904],"content":"ReadAsync","needQuote":true,"nodes":[{"content":"ReadAsync","pos":[0,9]}]},{"pos":[83956,83957],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84005,84009],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[84067,84069],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[84098,84099]},{"pos":[84153,84158],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[84218,84219]},{"pos":[84273,84278],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[84338,84339]},{"pos":[84415,84432],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[84513,84514],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84934,84945],"content":"Task<Int32>","needQuote":true,"nodes":[{"content":"Task&lt;Int32&gt;","pos":[0,11],"source":"Task<Int32>"}]},{"pos":[85150,85154],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[85228,85229],"content":"<","needQuote":true,"nodes":[]},{"pos":[85278,85283],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[85424,85428],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[85503,85506]},{"pos":[85562,85567],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[85626,85627],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85828,85841],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[86038,86042],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[86095,86096],"content":"<","needQuote":true,"nodes":[]},{"pos":[86123,86130],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[86245,86249],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[86303,86306]},{"pos":[86340,86347],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[86380,86381],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86597,86607],"content":"ReadByte()","needQuote":true,"nodes":[{"content":"ReadByte()","pos":[0,10]}]},{"pos":[86708,86716],"content":"ReadByte","needQuote":true,"nodes":[{"content":"ReadByte","pos":[0,8]}]},{"pos":[86767,86768],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86795,86796],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86869,86877],"content":"ReadByte","needQuote":true,"nodes":[{"content":"ReadByte","pos":[0,8]}]},{"pos":[86928,86929],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86956,86957],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87167,87190],"content":"Seek(Int64, SeekOrigin)","needQuote":true,"nodes":[{"content":"Seek(Int64, SeekOrigin)","pos":[0,23]}]},{"pos":[87352,87356],"content":"Seek","needQuote":true,"nodes":[{"content":"Seek","pos":[0,4]}]},{"pos":[87403,87404],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87453,87458],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"content":",","pos":[87518,87519]},{"pos":[87581,87591],"content":"SeekOrigin","needQuote":true,"nodes":[{"content":"SeekOrigin","pos":[0,10]}]},{"pos":[87637,87638],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87742,87746],"content":"Seek","needQuote":true,"nodes":[{"content":"Seek","pos":[0,4]}]},{"pos":[87793,87794],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87843,87848],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"content":",","pos":[87908,87909]},{"pos":[87971,87981],"content":"SeekOrigin","needQuote":true,"nodes":[{"content":"SeekOrigin","pos":[0,10]}]},{"pos":[88027,88028],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88240,88250],"content":"SeekOrigin","needQuote":true,"nodes":[{"content":"SeekOrigin","pos":[0,10]}]},{"pos":[88449,88465],"content":"SetLength(Int64)","needQuote":true,"nodes":[{"content":"SetLength(Int64)","pos":[0,16]}]},{"pos":[88594,88603],"content":"SetLength","needQuote":true,"nodes":[{"content":"SetLength","pos":[0,9]}]},{"pos":[88655,88656],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88705,88710],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[88769,88770],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88858,88867],"content":"SetLength","needQuote":true,"nodes":[{"content":"SetLength","pos":[0,9]}]},{"pos":[88919,88920],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88969,88974],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[89033,89034],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89248,89266],"content":"ArraySegment<Byte>","needQuote":true,"nodes":[{"content":"ArraySegment&lt;Byte&gt;","pos":[0,18],"source":"ArraySegment<Byte>"}]},{"pos":[89452,89464],"content":"ArraySegment","needQuote":true,"nodes":[{"content":"ArraySegment","pos":[0,12]}]},{"pos":[89530,89531],"content":"<","needQuote":true,"nodes":[]},{"pos":[89579,89583],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[89715,89727],"content":"ArraySegment","needQuote":true,"nodes":[{"content":"ArraySegment","pos":[0,12]}]},{"content":"(Of","pos":[89794,89797]},{"pos":[89852,89856],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[89914,89915],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90130,90145],"content":"ArraySegment<T>","needQuote":true,"nodes":[{"content":"ArraySegment&lt;T&gt;","pos":[0,15],"source":"ArraySegment<T>"}]},{"pos":[90308,90320],"content":"ArraySegment","needQuote":true,"nodes":[{"content":"ArraySegment","pos":[0,12]}]},{"pos":[90365,90366],"content":"<","needQuote":true,"nodes":[]},{"pos":[90393,90394],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[90495,90507],"content":"ArraySegment","needQuote":true,"nodes":[{"content":"ArraySegment","pos":[0,12]}]},{"content":"(Of","pos":[90553,90556]},{"pos":[90590,90591],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[90618,90619],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90868,90895],"content":"Write(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Write(Byte[], Int32, Int32)","pos":[0,27]}]},{"pos":[91192,91197],"content":"Write","needQuote":true,"nodes":[{"content":"Write","pos":[0,5]}]},{"pos":[91245,91246],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91294,91298],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[91357,91359]},{"content":",","pos":[91391,91392]},{"pos":[91446,91451],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[91511,91512]},{"pos":[91566,91571],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[91630,91631],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91742,91747],"content":"Write","needQuote":true,"nodes":[{"content":"Write","pos":[0,5]}]},{"pos":[91795,91796],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91844,91848],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[91906,91908],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[91937,91938]},{"pos":[91992,91997],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[92057,92058]},{"pos":[92112,92117],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[92176,92177],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92543,92594],"content":"WriteAsync(Byte[], Int32, Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"WriteAsync(Byte[], Int32, Int32, CancellationToken)","pos":[0,51]}]},{"pos":[93037,93047],"content":"WriteAsync","needQuote":true,"nodes":[{"content":"WriteAsync","pos":[0,10]}]},{"pos":[93100,93101],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93149,93153],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[93212,93214]},{"content":",","pos":[93246,93247]},{"pos":[93301,93306],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[93366,93367]},{"pos":[93421,93426],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[93486,93487]},{"pos":[93563,93580],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[93661,93662],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93813,93823],"content":"WriteAsync","needQuote":true,"nodes":[{"content":"WriteAsync","pos":[0,10]}]},{"pos":[93876,93877],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93925,93929],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[93987,93989],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[94018,94019]},{"pos":[94073,94078],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[94138,94139]},{"pos":[94193,94198],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[94258,94259]},{"pos":[94335,94352],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[94433,94434],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94824,94839],"content":"WriteByte(Byte)","needQuote":true,"nodes":[{"content":"WriteByte(Byte)","pos":[0,15]}]},{"pos":[94966,94975],"content":"WriteByte","needQuote":true,"nodes":[{"content":"WriteByte","pos":[0,9]}]},{"pos":[95027,95028],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95076,95080],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[95138,95139],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95226,95235],"content":"WriteByte","needQuote":true,"nodes":[{"content":"WriteByte","pos":[0,9]}]},{"pos":[95287,95288],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95336,95340],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[95398,95399],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95574,95578],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[95715,95736],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[95930,95957],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[96176,96193],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[96371,96394],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]},{"pos":[96605,96626],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[96835,96860],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[97073,97084],"content":"IOException","needQuote":true,"nodes":[{"content":"IOException","pos":[0,11]}]}],"content":"items:\n- uid: System.IO.MemoryStream\n  commentId: T:System.IO.MemoryStream\n  id: MemoryStream\n  parent: System.IO\n  children:\n  - System.IO.MemoryStream.#ctor\n  - System.IO.MemoryStream.#ctor(System.Byte[])\n  - System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)\n  - System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)\n  - System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)\n  - System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)\n  - System.IO.MemoryStream.#ctor(System.Int32)\n  - System.IO.MemoryStream.CanRead\n  - System.IO.MemoryStream.CanSeek\n  - System.IO.MemoryStream.CanWrite\n  - System.IO.MemoryStream.Capacity\n  - System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  - System.IO.MemoryStream.Dispose(System.Boolean)\n  - System.IO.MemoryStream.Flush\n  - System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)\n  - System.IO.MemoryStream.Length\n  - System.IO.MemoryStream.Position\n  - System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)\n  - System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  - System.IO.MemoryStream.ReadByte\n  - System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)\n  - System.IO.MemoryStream.SetLength(System.Int64)\n  - System.IO.MemoryStream.ToArray\n  - System.IO.MemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)\n  - System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)\n  - System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  - System.IO.MemoryStream.WriteByte(System.Byte)\n  - System.IO.MemoryStream.WriteTo(System.IO.Stream)\n  langs:\n  - csharp\n  - vb\n  name: MemoryStream\n  fullName: System.IO.MemoryStream\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MemoryStream\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 35\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Creates a stream whose backing store is memory.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public class MemoryStream : Stream, IDisposable\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public Class MemoryStream\n          Inherits Stream\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  - System.IO.Stream\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.IO.Stream.Null\n  - System.IO.Stream.CanTimeout\n  - System.IO.Stream.ReadTimeout\n  - System.IO.Stream.WriteTimeout\n  - System.IO.Stream.CopyTo(System.IO.Stream)\n  - System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n  - System.IO.Stream.Dispose\n  - System.IO.Stream.FlushAsync\n  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: MemoryStream\n- uid: System.IO.MemoryStream.#ctor\n  commentId: M:System.IO.MemoryStream.#ctor\n  id: '#ctor'\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  - vb\n  name: MemoryStream()\n  fullName: System.IO.MemoryStream.MemoryStream()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 57\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.IO.MemoryStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with an expandable capacity initialized to zero.</p>\\n\"\n  syntax:\n    content: public MemoryStream()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: MemoryStream.MemoryStream()\n- uid: System.IO.MemoryStream.#ctor(System.Byte[])\n  commentId: M:System.IO.MemoryStream.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  - vb\n  name: MemoryStream(Byte[])\n  fullName: System.IO.MemoryStream.MemoryStream(System.Byte[])\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 76\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Initializes a new non-resizable instance of the <xref href=\\\"System.IO.MemoryStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class based on the specified byte array.</p>\\n\"\n  syntax:\n    content: public MemoryStream(byte[] buffer)\n    content.vb: Public Sub New(buffer As Byte())\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>The array of unsigned bytes from which to create the current stream. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.IO.MemoryStream.MemoryStream(System.Byte())\n  name.vb: MemoryStream(Byte())\n  nameWithType: MemoryStream.MemoryStream(Byte[])\n  nameWithType.vb: MemoryStream.MemoryStream(Byte())\n- uid: System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)\n  commentId: M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)\n  id: '#ctor(System.Byte[],System.Boolean)'\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  - vb\n  name: MemoryStream(Byte[], Boolean)\n  fullName: System.IO.MemoryStream.MemoryStream(System.Byte[], System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 80\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Initializes a new non-resizable instance of the <xref href=\\\"System.IO.MemoryStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class based on the specified byte array with the <xref href=\\\"System.IO.MemoryStream.CanWrite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set as specified.</p>\\n\"\n  syntax:\n    content: public MemoryStream(byte[] buffer, bool writable)\n    content.vb: Public Sub New(buffer As Byte(), writable As Boolean)\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>The array of unsigned bytes from which to create this stream. </p>\\n\"\n    - id: writable\n      type: System.Boolean\n      description: \"\\n<p>The setting of the <xref href=\\\"System.IO.MemoryStream.CanWrite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property, which determines whether the stream supports writing. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.IO.MemoryStream.MemoryStream(System.Byte(), System.Boolean)\n  name.vb: MemoryStream(Byte(), Boolean)\n  nameWithType: MemoryStream.MemoryStream(Byte[], Boolean)\n  nameWithType.vb: MemoryStream.MemoryStream(Byte(), Boolean)\n- uid: System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)\n  id: '#ctor(System.Byte[],System.Int32,System.Int32)'\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  - vb\n  name: MemoryStream(Byte[], Int32, Int32)\n  fullName: System.IO.MemoryStream.MemoryStream(System.Byte[], System.Int32, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 91\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Initializes a new non-resizable instance of the <xref href=\\\"System.IO.MemoryStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class based on the specified region (index) of a byte array.</p>\\n\"\n  syntax:\n    content: public MemoryStream(byte[] buffer, int index, int count)\n    content.vb: Public Sub New(buffer As Byte(), index As Integer, count As Integer)\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>The array of unsigned bytes from which to create this stream. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index into <em>buffer</em> at which the stream begins. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The length of the stream in bytes. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.IO.MemoryStream.MemoryStream(System.Byte(), System.Int32, System.Int32)\n  name.vb: MemoryStream(Byte(), Int32, Int32)\n  nameWithType: MemoryStream.MemoryStream(Byte[], Int32, Int32)\n  nameWithType.vb: MemoryStream.MemoryStream(Byte(), Int32, Int32)\n- uid: System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)\n  commentId: M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)\n  id: '#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)'\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  - vb\n  name: MemoryStream(Byte[], Int32, Int32, Boolean)\n  fullName: System.IO.MemoryStream.MemoryStream(System.Byte[], System.Int32, System.Int32, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 95\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Initializes a new non-resizable instance of the <xref href=\\\"System.IO.MemoryStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class based on the specified region of a byte array, with the <xref href=\\\"System.IO.MemoryStream.CanWrite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set as specified.</p>\\n\"\n  syntax:\n    content: public MemoryStream(byte[] buffer, int index, int count, bool writable)\n    content.vb: Public Sub New(buffer As Byte(), index As Integer, count As Integer, writable As Boolean)\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>The array of unsigned bytes from which to create this stream. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index in <em>buffer</em> at which the stream begins. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The length of the stream in bytes. </p>\\n\"\n    - id: writable\n      type: System.Boolean\n      description: \"\\n<p>The setting of the <xref href=\\\"System.IO.MemoryStream.CanWrite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property, which determines whether the stream supports writing. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> are negative. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.IO.MemoryStream.MemoryStream(System.Byte(), System.Int32, System.Int32, System.Boolean)\n  name.vb: MemoryStream(Byte(), Int32, Int32, Boolean)\n  nameWithType: MemoryStream.MemoryStream(Byte[], Int32, Int32, Boolean)\n  nameWithType.vb: MemoryStream.MemoryStream(Byte(), Int32, Int32, Boolean)\n- uid: System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)\n  commentId: M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)\n  id: '#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)'\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  - vb\n  name: MemoryStream(Byte[], Int32, Int32, Boolean, Boolean)\n  fullName: System.IO.MemoryStream.MemoryStream(System.Byte[], System.Int32, System.Int32, System.Boolean, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 99\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.IO.MemoryStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class based on the specified region of a byte array, with the <xref href=\\\"System.IO.MemoryStream.CanWrite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property set as specified, and the ability to call <xref href=\\\"System.IO.MemoryStream.GetBuffer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> set as specified.</p>\\n\"\n  syntax:\n    content: public MemoryStream(byte[] buffer, int index, int count, bool writable, bool publiclyVisible)\n    content.vb: Public Sub New(buffer As Byte(), index As Integer, count As Integer, writable As Boolean, publiclyVisible As Boolean)\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>The array of unsigned bytes from which to create this stream. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index into <em>buffer</em> at which the stream begins. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The length of the stream in bytes. </p>\\n\"\n    - id: writable\n      type: System.Boolean\n      description: \"\\n<p>The setting of the <xref href=\\\"System.IO.MemoryStream.CanWrite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property, which determines whether the stream supports writing. </p>\\n\"\n    - id: publiclyVisible\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to enable <xref href=\\\"System.IO.MemoryStream.GetBuffer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, which returns the unsigned byte array from which the stream was created; otherwise, <strong>false</strong>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is negative. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.IO.MemoryStream.MemoryStream(System.Byte(), System.Int32, System.Int32, System.Boolean, System.Boolean)\n  name.vb: MemoryStream(Byte(), Int32, Int32, Boolean, Boolean)\n  nameWithType: MemoryStream.MemoryStream(Byte[], Int32, Int32, Boolean, Boolean)\n  nameWithType.vb: MemoryStream.MemoryStream(Byte(), Int32, Int32, Boolean, Boolean)\n- uid: System.IO.MemoryStream.#ctor(System.Int32)\n  commentId: M:System.IO.MemoryStream.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  - vb\n  name: MemoryStream(Int32)\n  fullName: System.IO.MemoryStream.MemoryStream(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 61\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.IO.MemoryStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with an expandable capacity initialized as specified.</p>\\n\"\n  syntax:\n    content: public MemoryStream(int capacity)\n    content.vb: Public Sub New(capacity As Integer)\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: \"\\n<p>The initial size of the internal array in bytes. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>capacity</em> is negative. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: MemoryStream.MemoryStream(Int32)\n- uid: System.IO.MemoryStream.CanRead\n  commentId: P:System.IO.MemoryStream.CanRead\n  id: CanRead\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  - vb\n  name: CanRead\n  fullName: System.IO.MemoryStream.CanRead\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CanRead\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 119\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Gets a value indicating whether the current stream supports reading.</p>\\n\"\n  syntax:\n    content: public override bool CanRead { get; }\n    content.vb: Public Overrides ReadOnly Property CanRead As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the stream is open.</p>\\n\"\n  overridden: System.IO.Stream.CanRead\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: MemoryStream.CanRead\n- uid: System.IO.MemoryStream.CanSeek\n  commentId: P:System.IO.MemoryStream.CanSeek\n  id: CanSeek\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  - vb\n  name: CanSeek\n  fullName: System.IO.MemoryStream.CanSeek\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CanSeek\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 124\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Gets a value indicating whether the current stream supports seeking.</p>\\n\"\n  syntax:\n    content: public override bool CanSeek { get; }\n    content.vb: Public Overrides ReadOnly Property CanSeek As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the stream is open.</p>\\n\"\n  overridden: System.IO.Stream.CanSeek\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: MemoryStream.CanSeek\n- uid: System.IO.MemoryStream.CanWrite\n  commentId: P:System.IO.MemoryStream.CanWrite\n  id: CanWrite\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  - vb\n  name: CanWrite\n  fullName: System.IO.MemoryStream.CanWrite\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CanWrite\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 129\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Gets a value indicating whether the current stream supports writing.</p>\\n\"\n  syntax:\n    content: public override bool CanWrite { get; }\n    content.vb: Public Overrides ReadOnly Property CanWrite As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the stream supports writing; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.IO.Stream.CanWrite\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: MemoryStream.CanWrite\n- uid: System.IO.MemoryStream.Capacity\n  commentId: P:System.IO.MemoryStream.Capacity\n  id: Capacity\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  - vb\n  name: Capacity\n  fullName: System.IO.MemoryStream.Capacity\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Capacity\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 270\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Gets or sets the number of bytes allocated for this stream.</p>\\n\"\n  syntax:\n    content: public virtual int Capacity { get; set; }\n    content.vb: Public Overridable Property Capacity As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The length of the usable portion of the buffer for the stream.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>A capacity is set that is negative or less than the current length of the stream. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current stream is closed. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<strong>set</strong> is invoked on a stream whose capacity cannot be modified. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: MemoryStream.Capacity\n- uid: System.IO.MemoryStream.Length\n  commentId: P:System.IO.MemoryStream.Length\n  id: Length\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  - vb\n  name: Length\n  fullName: System.IO.MemoryStream.Length\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Length\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 300\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Gets the length of the stream in bytes.</p>\\n\"\n  syntax:\n    content: public override long Length { get; }\n    content.vb: Public Overrides ReadOnly Property Length As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>The length of the stream in bytes.</p>\\n\"\n  overridden: System.IO.Stream.Length\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: MemoryStream.Length\n- uid: System.IO.MemoryStream.Position\n  commentId: P:System.IO.MemoryStream.Position\n  id: Position\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  - vb\n  name: Position\n  fullName: System.IO.MemoryStream.Position\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Position\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 307\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Gets or sets the current position within the stream.</p>\\n\"\n  syntax:\n    content: public override long Position { get; set; }\n    content.vb: Public Overrides Property Position As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>The current position within the stream.</p>\\n\"\n  overridden: System.IO.Stream.Position\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The position is set to a negative value or a value greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: MemoryStream.Position\n- uid: System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  id: CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  - vb\n  name: CopyToAsync(Stream, Int32, CancellationToken)\n  fullName: System.IO.MemoryStream.CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CopyToAsync\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 405\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Asynchronously reads all the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.</p>\\n\"\n  syntax:\n    content: public override Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken)\n    content.vb: Public Overrides Function CopyToAsync(destination As Stream, bufferSize As Integer, cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: destination\n      type: System.IO.Stream\n      description: \"\\n<p>The stream to which the contents of the current stream will be copied.</p>\\n\"\n    - id: bufferSize\n      type: System.Int32\n      description: \"\\n<p>The size, in bytes, of the buffer. This value must be greater than zero.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The token to monitor for cancellation requests.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents the asynchronous copy operation.</p>\\n\"\n  overridden: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>destination</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>buffersize</em> is negative or zero.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>Either the current stream or the destination stream is disposed.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The current stream does not support reading, or the destination stream does not support writing.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: MemoryStream.CopyToAsync(Stream, Int32, CancellationToken)\n- uid: System.IO.MemoryStream.Dispose(System.Boolean)\n  commentId: M:System.IO.MemoryStream.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.IO.MemoryStream.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 138\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.IO.MemoryStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class and optionally releases the managed resources.</p>\\n\"\n  syntax:\n    content: protected override void Dispose(bool disposing)\n    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\\n\"\n  overridden: System.IO.Stream.Dispose(System.Boolean)\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  nameWithType: MemoryStream.Dispose(Boolean)\n- uid: System.IO.MemoryStream.Flush\n  commentId: M:System.IO.MemoryStream.Flush\n  id: Flush\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  - vb\n  name: Flush()\n  fullName: System.IO.MemoryStream.Flush()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Flush\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 179\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Overrides the <xref href=\\\"System.IO.Stream.Flush\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method so that no action is performed.</p>\\n\"\n  syntax:\n    content: public override void Flush()\n    content.vb: Public Overrides Sub Flush\n  overridden: System.IO.Stream.Flush\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: MemoryStream.Flush()\n- uid: System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)\n  commentId: M:System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)\n  id: FlushAsync(System.Threading.CancellationToken)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  - vb\n  name: FlushAsync(CancellationToken)\n  fullName: System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FlushAsync\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 182\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Asynchronously clears all buffers for this stream, and monitors cancellation requests.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public override Task FlushAsync(CancellationToken cancellationToken)\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Overrides Function FlushAsync(cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The token to monitor for cancellation requests.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents the asynchronous flush operation.</p>\\n\"\n  overridden: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: MemoryStream.FlushAsync(CancellationToken)\n- uid: System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)\n  id: Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  - vb\n  name: Read(Byte[], Int32, Int32)\n  fullName: System.IO.MemoryStream.Read(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Read\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 326\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a block of bytes from the current stream and writes the data to a buffer.</p>\\n\"\n  syntax:\n    content: public override int Read([In, Out] byte[] buffer, int offset, int count)\n    content.vb: Public Overrides Function Read(buffer As Byte(), offset As Integer, count As Integer) As Integer\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>When this method returns, contains the specified byte array with the values between <em>offset</em> and (<em>offset</em> + <em>count</em> - 1) replaced by the characters read from the current stream. </p>\\n\"\n      attributes:\n      - type: System.Runtime.InteropServices.InAttribute\n        ctor: System.Runtime.InteropServices.InAttribute.#ctor\n        arguments: []\n      - type: System.Runtime.InteropServices.OutAttribute\n        ctor: System.Runtime.InteropServices.OutAttribute.#ctor\n        arguments: []\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The zero-based byte offset in <em>buffer</em> at which to begin storing data from the current stream.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum number of bytes to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The total number of bytes written into the buffer. This can be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached before any bytes are read.</p>\\n\"\n  overridden: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> or <em>count</em> is negative. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>offset</em> subtracted from the buffer length is less than <em>count</em>. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current stream instance is closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.IO.MemoryStream.Read(System.Byte(), System.Int32, System.Int32)\n  name.vb: Read(Byte(), Int32, Int32)\n  nameWithType: MemoryStream.Read(Byte[], Int32, Int32)\n  nameWithType.vb: MemoryStream.Read(Byte(), Int32, Int32)\n- uid: System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  - vb\n  name: ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: System.IO.MemoryStream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadAsync\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 359\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken)\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Overrides Function ReadAsync(buffer As Byte(), offset As Integer, count As Integer, cancellationToken As CancellationToken) As Task(Of Integer)\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>The buffer to write the data into.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The byte offset in <em>buffer</em> at which to begin writing data from the stream.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum number of bytes to read.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The token to monitor for cancellation requests. The default value is <xref href=\\\"System.Threading.CancellationToken.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: \"\\n<p>A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached. </p>\\n\"\n  overridden: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> or <em>count</em> is negative.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The sum of <em>offset</em> and <em>count</em> is larger than the buffer length.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The stream does not support reading.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream has been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The stream is currently in use by a previous read operation. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.IO.MemoryStream.ReadAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)\n  name.vb: ReadAsync(Byte(), Int32, Int32, CancellationToken)\n  nameWithType: MemoryStream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType.vb: MemoryStream.ReadAsync(Byte(), Int32, Int32, CancellationToken)\n- uid: System.IO.MemoryStream.ReadByte\n  commentId: M:System.IO.MemoryStream.ReadByte\n  id: ReadByte\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  - vb\n  name: ReadByte()\n  fullName: System.IO.MemoryStream.ReadByte()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadByte\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 396\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a byte from the current stream.</p>\\n\"\n  syntax:\n    content: public override int ReadByte()\n    content.vb: Public Overrides Function ReadByte As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The byte cast to a <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or -1 if the end of the stream has been reached.</p>\\n\"\n  overridden: System.IO.Stream.ReadByte\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current stream instance is closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: MemoryStream.ReadByte()\n- uid: System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)\n  commentId: M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)\n  id: Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  - vb\n  name: Seek(Int64, SeekOrigin)\n  fullName: System.IO.MemoryStream.Seek(System.Int64, System.IO.SeekOrigin)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Seek\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 465\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Sets the position within the current stream to the specified value.</p>\\n\"\n  syntax:\n    content: public override long Seek(long offset, SeekOrigin loc)\n    content.vb: Public Overrides Function Seek(offset As Long, loc As SeekOrigin) As Long\n    parameters:\n    - id: offset\n      type: System.Int64\n      description: \"\\n<p>The new position within the stream. This is relative to the <em>loc</em> parameter, and can be positive or negative. </p>\\n\"\n    - id: loc\n      type: System.IO.SeekOrigin\n      description: \"\\n<p>A value of type <xref href=\\\"System.IO.SeekOrigin\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, which acts as the seek reference point. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The new position within the stream, calculated by combining the initial reference point and the offset.</p>\\n\"\n  overridden: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>Seeking is attempted before the beginning of the stream. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>There is an invalid <xref href=\\\"System.IO.SeekOrigin\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n<p>-or-</p>\\n<p>\\n<em>offset</em> caused an arithmetic overflow.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current stream instance is closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: MemoryStream.Seek(Int64, SeekOrigin)\n- uid: System.IO.MemoryStream.SetLength(System.Int64)\n  commentId: M:System.IO.MemoryStream.SetLength(System.Int64)\n  id: SetLength(System.Int64)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  - vb\n  name: SetLength(Int64)\n  fullName: System.IO.MemoryStream.SetLength(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetLength\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 510\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Sets the length of the current stream to the specified value.</p>\\n\"\n  syntax:\n    content: public override void SetLength(long value)\n    content.vb: Public Overrides Sub SetLength(value As Long)\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The value at which to set the length. </p>\\n\"\n  overridden: System.IO.Stream.SetLength(System.Int64)\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The current stream is not resizable and <em>value</em> is larger than the current capacity.</p>\\n<p>-or- </p>\\n<p>The current stream does not support writing. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>value</em> is negative or is greater than the maximum length of the <xref href=\\\"System.IO.MemoryStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, where the maximum length is(<xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> - origin), and origin is the index into the underlying buffer at which the stream starts. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: MemoryStream.SetLength(Int64)\n- uid: System.IO.MemoryStream.ToArray\n  commentId: M:System.IO.MemoryStream.ToArray\n  id: ToArray\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  - vb\n  name: ToArray()\n  fullName: System.IO.MemoryStream.ToArray()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToArray\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 533\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes the stream contents to a byte array, regardless of the <xref href=\\\"System.IO.MemoryStream.Position\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property.</p>\\n\"\n  syntax:\n    content: public virtual byte[] ToArray()\n    content.vb: Public Overridable Function ToArray As Byte()\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A new byte array.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: MemoryStream.ToArray()\n- uid: System.IO.MemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)\n  commentId: M:System.IO.MemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)\n  id: TryGetBuffer(System.ArraySegment{System.Byte}@)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  - vb\n  name: TryGetBuffer(out ArraySegment<Byte>)\n  fullName: System.IO.MemoryStream.TryGetBuffer(out System.ArraySegment<System.Byte>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryGetBuffer\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 207\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Returns the array of unsigned bytes from which this stream was created. The return value indicates whether the conversion succeeded.</p>\\n\"\n  syntax:\n    content: public virtual bool TryGetBuffer(out ArraySegment<byte> buffer)\n    content.vb: Public Overridable Function TryGetBuffer(ByRef buffer As ArraySegment(Of Byte)) As Boolean\n    parameters:\n    - id: buffer\n      type: System.ArraySegment{System.Byte}\n      description: \"\\n<p>The byte array segment from which this stream was created.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the conversion was successful; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.IO.MemoryStream.TryGetBuffer(ByRef System.ArraySegment(Of System.Byte))\n  name.vb: TryGetBuffer(ByRef ArraySegment(Of Byte))\n  nameWithType: MemoryStream.TryGetBuffer(out ArraySegment<Byte>)\n  nameWithType.vb: MemoryStream.TryGetBuffer(ByRef ArraySegment(Of Byte))\n- uid: System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)\n  id: Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  - vb\n  name: Write(Byte[], Int32, Int32)\n  fullName: System.IO.MemoryStream.Write(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 540\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a block of bytes to the current stream using data read from a buffer.</p>\\n\"\n  syntax:\n    content: public override void Write(byte[] buffer, int offset, int count)\n    content.vb: Public Overrides Sub Write(buffer As Byte(), offset As Integer, count As Integer)\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>The buffer to write data from. </p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The zero-based byte offset in <em>buffer</em> at which to begin copying bytes to the current stream.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum number of bytes to write. </p>\\n\"\n  overridden: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The stream does not support writing. For additional information see <xref href=\\\"System.IO.Stream.CanWrite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>The current position is closer than <em>count</em> bytes to the end of the stream, and the capacity cannot be modified. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>offset</em> subtracted from the buffer length is less than <em>count</em>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> or <em>count</em> are negative. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current stream instance is closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.IO.MemoryStream.Write(System.Byte(), System.Int32, System.Int32)\n  name.vb: Write(Byte(), Int32, Int32)\n  nameWithType: MemoryStream.Write(Byte[], Int32, Int32)\n  nameWithType.vb: MemoryStream.Write(Byte(), Int32, Int32)\n- uid: System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  - vb\n  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: System.IO.MemoryStream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteAsync\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 582\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken)\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Overrides Function WriteAsync(buffer As Byte(), offset As Integer, count As Integer, cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>The buffer to write data from.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The zero-based byte offset in <em>buffer</em> from which to begin copying bytes to the stream.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum number of bytes to write.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The token to monitor for cancellation requests. The default value is <xref href=\\\"System.Threading.CancellationToken.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents the asynchronous write operation.</p>\\n\"\n  overridden: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> or <em>count</em> is negative.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The sum of <em>offset</em> and <em>count</em> is larger than the buffer length.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The stream does not support writing.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream has been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The stream is currently in use by a previous write operation. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.IO.MemoryStream.WriteAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)\n  name.vb: WriteAsync(Byte(), Int32, Int32, CancellationToken)\n  nameWithType: MemoryStream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType.vb: MemoryStream.WriteAsync(Byte(), Int32, Int32, CancellationToken)\n- uid: System.IO.MemoryStream.WriteByte(System.Byte)\n  commentId: M:System.IO.MemoryStream.WriteByte(System.Byte)\n  id: WriteByte(System.Byte)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  - vb\n  name: WriteByte(Byte)\n  fullName: System.IO.MemoryStream.WriteByte(System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteByte\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 615\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a byte to the current stream at the current position.</p>\\n\"\n  syntax:\n    content: public override void WriteByte(byte value)\n    content.vb: Public Overrides Sub WriteByte(value As Byte)\n    parameters:\n    - id: value\n      type: System.Byte\n      description: \"\\n<p>The byte to write. </p>\\n\"\n  overridden: System.IO.Stream.WriteByte(System.Byte)\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The stream does not support writing. For additional information see <xref href=\\\"System.IO.Stream.CanWrite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>The current position is at the end of the stream, and the capacity cannot be modified. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current stream is closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: MemoryStream.WriteByte(Byte)\n- uid: System.IO.MemoryStream.WriteTo(System.IO.Stream)\n  commentId: M:System.IO.MemoryStream.WriteTo(System.IO.Stream)\n  id: WriteTo(System.IO.Stream)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  - vb\n  name: WriteTo(Stream)\n  fullName: System.IO.MemoryStream.WriteTo(System.IO.Stream)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/MemoryStream.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteTo\n    path: src/mscorlib/src/System/IO/MemoryStream.cs\n    startLine: 636\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes the entire contents of this memory stream to another stream.</p>\\n\"\n  syntax:\n    content: public virtual void WriteTo(Stream stream)\n    content.vb: Public Overridable Sub WriteTo(stream As Stream)\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The stream to write this memory stream to. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>stream</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current or target stream is closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: MemoryStream.WriteTo(Stream)\nreferences:\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  nameWithType: System.IO\n  commentId: N:System.IO\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  fullName: System.IO.Stream\n  nameWithType: Stream\n  commentId: T:System.IO.Stream\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.IO.Stream.Null\n  parent: System.IO.Stream\n  isExternal: false\n  fullName: System.IO.Stream.Null\n  nameWithType: Stream.Null\n  commentId: F:System.IO.Stream.Null\n- uid: System.IO.Stream.CanTimeout\n  parent: System.IO.Stream\n  isExternal: false\n  name: CanTimeout\n  fullName: System.IO.Stream.CanTimeout\n  nameWithType: Stream.CanTimeout\n  commentId: P:System.IO.Stream.CanTimeout\n- uid: System.IO.Stream.ReadTimeout\n  parent: System.IO.Stream\n  isExternal: false\n  name: ReadTimeout\n  fullName: System.IO.Stream.ReadTimeout\n  nameWithType: Stream.ReadTimeout\n  commentId: P:System.IO.Stream.ReadTimeout\n- uid: System.IO.Stream.WriteTimeout\n  parent: System.IO.Stream\n  isExternal: false\n  name: WriteTimeout\n  fullName: System.IO.Stream.WriteTimeout\n  nameWithType: Stream.WriteTimeout\n  commentId: P:System.IO.Stream.WriteTimeout\n- uid: System.IO.Stream.CopyTo(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyTo(Stream)\n  fullName: System.IO.Stream.CopyTo(System.IO.Stream)\n  spec.csharp:\n  - uid: System.IO.Stream.CopyTo(System.IO.Stream)\n    name: CopyTo\n    fullName: System.IO.Stream.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.CopyTo(System.IO.Stream)\n    name: CopyTo\n    fullName: System.IO.Stream.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n  - name: )\n    fullName: )\n  nameWithType: Stream.CopyTo(Stream)\n  commentId: M:System.IO.Stream.CopyTo(System.IO.Stream)\n- uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n  parent: System.IO.Stream\n  isExternal: true\n  name: CopyTo(Stream, Int32)\n  fullName: System.IO.Stream.CopyTo(System.IO.Stream, System.Int32)\n  spec.csharp:\n  - uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n    name: CopyTo\n    fullName: System.IO.Stream.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n    name: CopyTo\n    fullName: System.IO.Stream.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Stream.CopyTo(Stream, Int32)\n  commentId: M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyToAsync(Stream)\n  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream)\n  spec.csharp:\n  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream)\n    name: CopyToAsync\n    fullName: System.IO.Stream.CopyToAsync\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream)\n    name: CopyToAsync\n    fullName: System.IO.Stream.CopyToAsync\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n  - name: )\n    fullName: )\n  nameWithType: Stream.CopyToAsync(Stream)\n  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n  parent: System.IO.Stream\n  isExternal: true\n  name: CopyToAsync(Stream, Int32)\n  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32)\n  spec.csharp:\n  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n    name: CopyToAsync\n    fullName: System.IO.Stream.CopyToAsync\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n    name: CopyToAsync\n    fullName: System.IO.Stream.CopyToAsync\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Stream.CopyToAsync(Stream, Int32)\n  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n- uid: System.IO.Stream.Dispose\n  parent: System.IO.Stream\n  isExternal: false\n  name: Dispose()\n  fullName: System.IO.Stream.Dispose()\n  spec.csharp:\n  - uid: System.IO.Stream.Dispose\n    name: Dispose\n    fullName: System.IO.Stream.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.Dispose\n    name: Dispose\n    fullName: System.IO.Stream.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Stream.Dispose()\n  commentId: M:System.IO.Stream.Dispose\n- uid: System.IO.Stream.FlushAsync\n  parent: System.IO.Stream\n  isExternal: false\n  name: FlushAsync()\n  fullName: System.IO.Stream.FlushAsync()\n  spec.csharp:\n  - uid: System.IO.Stream.FlushAsync\n    name: FlushAsync\n    fullName: System.IO.Stream.FlushAsync\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.FlushAsync\n    name: FlushAsync\n    fullName: System.IO.Stream.FlushAsync\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Stream.FlushAsync()\n  commentId: M:System.IO.Stream.FlushAsync\n- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  isExternal: true\n  name: ReadAsync(Byte[], Int32, Int32)\n  fullName: System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.IO.Stream.ReadAsync(System.Byte(), System.Int32, System.Int32)\n  name.vb: ReadAsync(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n    name: ReadAsync\n    fullName: System.IO.Stream.ReadAsync\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n    name: ReadAsync\n    fullName: System.IO.Stream.ReadAsync\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Stream.ReadAsync(Byte[], Int32, Int32)\n  nameWithType.vb: Stream.ReadAsync(Byte(), Int32, Int32)\n  commentId: M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  isExternal: true\n  name: WriteAsync(Byte[], Int32, Int32)\n  fullName: System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.IO.Stream.WriteAsync(System.Byte(), System.Int32, System.Int32)\n  name.vb: WriteAsync(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n    name: WriteAsync\n    fullName: System.IO.Stream.WriteAsync\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n    name: WriteAsync\n    fullName: System.IO.Stream.WriteAsync\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Stream.WriteAsync(Byte[], Int32, Int32)\n  nameWithType.vb: Stream.WriteAsync(Byte(), Int32, Int32)\n  commentId: M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.IO.Stream.CanRead\n  parent: System.IO.Stream\n  isExternal: false\n  name: CanRead\n  fullName: System.IO.Stream.CanRead\n  nameWithType: Stream.CanRead\n  commentId: P:System.IO.Stream.CanRead\n- uid: System.IO.Stream.CanSeek\n  parent: System.IO.Stream\n  isExternal: false\n  name: CanSeek\n  fullName: System.IO.Stream.CanSeek\n  nameWithType: Stream.CanSeek\n  commentId: P:System.IO.Stream.CanSeek\n- uid: System.IO.Stream.CanWrite\n  parent: System.IO.Stream\n  isExternal: false\n  name: CanWrite\n  fullName: System.IO.Stream.CanWrite\n  nameWithType: Stream.CanWrite\n  commentId: P:System.IO.Stream.CanWrite\n- uid: System.IO.Stream.Length\n  parent: System.IO.Stream\n  isExternal: false\n  name: Length\n  fullName: System.IO.Stream.Length\n  nameWithType: Stream.Length\n  commentId: P:System.IO.Stream.Length\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.IO.Stream.Position\n  parent: System.IO.Stream\n  isExternal: false\n  name: Position\n  fullName: System.IO.Stream.Position\n  nameWithType: Stream.Position\n  commentId: P:System.IO.Stream.Position\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  isExternal: true\n  name: CopyToAsync(Stream, Int32, CancellationToken)\n  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken)\n  spec.csharp:\n  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n    name: CopyToAsync\n    fullName: System.IO.Stream.CopyToAsync\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n    name: CopyToAsync\n    fullName: System.IO.Stream.CopyToAsync\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Stream.CopyToAsync(Stream, Int32, CancellationToken)\n  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  fullName: System.Threading.CancellationToken\n  nameWithType: CancellationToken\n  commentId: T:System.Threading.CancellationToken\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  fullName: System.Threading.Tasks.Task\n  nameWithType: Task\n  commentId: T:System.Threading.Tasks.Task\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n- uid: System.IO.Stream.Dispose(System.Boolean)\n  parent: System.IO.Stream\n  isExternal: true\n  name: Dispose(Boolean)\n  fullName: System.IO.Stream.Dispose(System.Boolean)\n  spec.csharp:\n  - uid: System.IO.Stream.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.IO.Stream.Dispose\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.IO.Stream.Dispose\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Stream.Dispose(Boolean)\n  commentId: M:System.IO.Stream.Dispose(System.Boolean)\n- uid: System.IO.Stream.Flush\n  parent: System.IO.Stream\n  isExternal: false\n  name: Flush()\n  fullName: System.IO.Stream.Flush()\n  spec.csharp:\n  - uid: System.IO.Stream.Flush\n    name: Flush\n    fullName: System.IO.Stream.Flush\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.Flush\n    name: Flush\n    fullName: System.IO.Stream.Flush\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Stream.Flush()\n  commentId: M:System.IO.Stream.Flush\n- uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  isExternal: true\n  name: FlushAsync(CancellationToken)\n  fullName: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\n  spec.csharp:\n  - uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\n    name: FlushAsync\n    fullName: System.IO.Stream.FlushAsync\n  - name: (\n    fullName: (\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\n    name: FlushAsync\n    fullName: System.IO.Stream.FlushAsync\n  - name: (\n    fullName: (\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Stream.FlushAsync(CancellationToken)\n  commentId: M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\n- uid: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  isExternal: true\n  name: Read(Byte[], Int32, Int32)\n  fullName: System.IO.Stream.Read(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.IO.Stream.Read(System.Byte(), System.Int32, System.Int32)\n  name.vb: Read(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)\n    name: Read\n    fullName: System.IO.Stream.Read\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)\n    name: Read\n    fullName: System.IO.Stream.Read\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Stream.Read(Byte[], Int32, Int32)\n  nameWithType.vb: Stream.Read(Byte(), Int32, Int32)\n  commentId: M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)\n- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  isExternal: true\n  name: ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)\n  fullname.vb: System.IO.Stream.ReadAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)\n  name.vb: ReadAsync(Byte(), Int32, Int32, CancellationToken)\n  spec.csharp:\n  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n    name: ReadAsync\n    fullName: System.IO.Stream.ReadAsync\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n    name: ReadAsync\n    fullName: System.IO.Stream.ReadAsync\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Stream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType.vb: Stream.ReadAsync(Byte(), Int32, Int32, CancellationToken)\n  commentId: M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n- uid: System.Threading.Tasks.Task{System.Int32}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<Int32>\n  fullName: System.Threading.Tasks.Task<System.Int32>\n  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)\n  name.vb: Task(Of Int32)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Task<Int32>\n  nameWithType.vb: Task(Of Int32)\n  commentId: T:System.Threading.Tasks.Task{System.Int32}\n- uid: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n  commentId: T:System.Threading.Tasks.Task`1\n- uid: System.IO.Stream.ReadByte\n  parent: System.IO.Stream\n  isExternal: false\n  name: ReadByte()\n  fullName: System.IO.Stream.ReadByte()\n  spec.csharp:\n  - uid: System.IO.Stream.ReadByte\n    name: ReadByte\n    fullName: System.IO.Stream.ReadByte\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.ReadByte\n    name: ReadByte\n    fullName: System.IO.Stream.ReadByte\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Stream.ReadByte()\n  commentId: M:System.IO.Stream.ReadByte\n- uid: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.IO.Stream\n  isExternal: true\n  name: Seek(Int64, SeekOrigin)\n  fullName: System.IO.Stream.Seek(System.Int64, System.IO.SeekOrigin)\n  spec.csharp:\n  - uid: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)\n    name: Seek\n    fullName: System.IO.Stream.Seek\n  - name: (\n    fullName: (\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IO.SeekOrigin\n    name: SeekOrigin\n    fullName: System.IO.SeekOrigin\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)\n    name: Seek\n    fullName: System.IO.Stream.Seek\n  - name: (\n    fullName: (\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IO.SeekOrigin\n    name: SeekOrigin\n    fullName: System.IO.SeekOrigin\n  - name: )\n    fullName: )\n  nameWithType: Stream.Seek(Int64, SeekOrigin)\n  commentId: M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)\n- uid: System.IO.SeekOrigin\n  parent: System.IO\n  isExternal: false\n  name: SeekOrigin\n  fullName: System.IO.SeekOrigin\n  nameWithType: SeekOrigin\n  commentId: T:System.IO.SeekOrigin\n- uid: System.IO.Stream.SetLength(System.Int64)\n  parent: System.IO.Stream\n  isExternal: true\n  name: SetLength(Int64)\n  fullName: System.IO.Stream.SetLength(System.Int64)\n  spec.csharp:\n  - uid: System.IO.Stream.SetLength(System.Int64)\n    name: SetLength\n    fullName: System.IO.Stream.SetLength\n  - name: (\n    fullName: (\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.SetLength(System.Int64)\n    name: SetLength\n    fullName: System.IO.Stream.SetLength\n  - name: (\n    fullName: (\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Stream.SetLength(Int64)\n  commentId: M:System.IO.Stream.SetLength(System.Int64)\n- uid: System.ArraySegment{System.Byte}\n  parent: System\n  definition: System.ArraySegment`1\n  name: ArraySegment<Byte>\n  fullName: System.ArraySegment<System.Byte>\n  fullname.vb: System.ArraySegment(Of System.Byte)\n  name.vb: ArraySegment(Of Byte)\n  spec.csharp:\n  - uid: System.ArraySegment`1\n    name: ArraySegment\n    fullName: System.ArraySegment\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.ArraySegment`1\n    name: ArraySegment\n    fullName: System.ArraySegment\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ArraySegment<Byte>\n  nameWithType.vb: ArraySegment(Of Byte)\n  commentId: T:System.ArraySegment{System.Byte}\n- uid: System.ArraySegment`1\n  parent: System\n  isExternal: false\n  name: ArraySegment<T>\n  fullName: System.ArraySegment<T>\n  fullname.vb: System.ArraySegment(Of T)\n  name.vb: ArraySegment(Of T)\n  spec.csharp:\n  - uid: System.ArraySegment`1\n    name: ArraySegment\n    fullName: System.ArraySegment\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.ArraySegment`1\n    name: ArraySegment\n    fullName: System.ArraySegment\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ArraySegment<T>\n  nameWithType.vb: ArraySegment(Of T)\n  commentId: T:System.ArraySegment`1\n- uid: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  isExternal: true\n  name: Write(Byte[], Int32, Int32)\n  fullName: System.IO.Stream.Write(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.IO.Stream.Write(System.Byte(), System.Int32, System.Int32)\n  name.vb: Write(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\n    name: Write\n    fullName: System.IO.Stream.Write\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\n    name: Write\n    fullName: System.IO.Stream.Write\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Stream.Write(Byte[], Int32, Int32)\n  nameWithType.vb: Stream.Write(Byte(), Int32, Int32)\n  commentId: M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\n- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  isExternal: true\n  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)\n  fullname.vb: System.IO.Stream.WriteAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)\n  name.vb: WriteAsync(Byte(), Int32, Int32, CancellationToken)\n  spec.csharp:\n  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n    name: WriteAsync\n    fullName: System.IO.Stream.WriteAsync\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n    name: WriteAsync\n    fullName: System.IO.Stream.WriteAsync\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Stream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType.vb: Stream.WriteAsync(Byte(), Int32, Int32, CancellationToken)\n  commentId: M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n- uid: System.IO.Stream.WriteByte(System.Byte)\n  parent: System.IO.Stream\n  isExternal: true\n  name: WriteByte(Byte)\n  fullName: System.IO.Stream.WriteByte(System.Byte)\n  spec.csharp:\n  - uid: System.IO.Stream.WriteByte(System.Byte)\n    name: WriteByte\n    fullName: System.IO.Stream.WriteByte\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.Stream.WriteByte(System.Byte)\n    name: WriteByte\n    fullName: System.IO.Stream.WriteByte\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Stream.WriteByte(Byte)\n  commentId: M:System.IO.Stream.WriteByte(System.Byte)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  nameWithType: Byte\n  commentId: T:System.Byte\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  fullName: System.IO.IOException\n  nameWithType: IOException\n  commentId: T:System.IO.IOException\n"}