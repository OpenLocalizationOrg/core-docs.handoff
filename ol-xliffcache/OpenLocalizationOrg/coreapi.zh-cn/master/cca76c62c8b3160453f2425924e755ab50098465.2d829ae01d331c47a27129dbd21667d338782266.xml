{"nodes":[{"pos":[371,389],"content":"RegexRunnerFactory","needQuote":true,"nodes":[{"content":"RegexRunnerFactory","pos":[0,18]}]},{"pos":[1878,1898],"content":"RegexRunnerFactory()","needQuote":true,"nodes":[{"content":"RegexRunnerFactory()","pos":[0,20]}]},{"pos":[3039,3055],"content":"CreateInstance()","needQuote":true,"nodes":[{"content":"CreateInstance()","pos":[0,16]}]},{"pos":[4413,4443],"content":"System.Text.RegularExpressions","needQuote":true,"nodes":[{"content":"System.Text.RegularExpressions","pos":[0,30]}]},{"pos":[4646,4652],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[4812,4822],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[4917,4925],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[4994,4995],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[5022,5023],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[5093,5101],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[5170,5171],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[5198,5199],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[5382,5396],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[5515,5521],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[5588,5589],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[5639,5645],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5705,5706],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[5789,5795],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[5862,5863],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[5913,5919],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5979,5980],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6194,6216],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[6364,6370],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[6437,6438],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6488,6494],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[6555,6556]},{"pos":[6611,6617],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6677,6678],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6775,6781],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[6848,6849],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6899,6905],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[6966,6967]},{"pos":[7022,7028],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7088,7089],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7334,7365],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[7531,7546],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[7622,7623],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7673,7679],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[7740,7741]},{"pos":[7796,7802],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7862,7863],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7969,7984],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[8060,8061],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8111,8117],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8178,8179]},{"pos":[8234,8240],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8300,8301],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8531,8544],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[8645,8656],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[8728,8729],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8756,8757],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8830,8841],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[8913,8914],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8941,8942],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9117,9126],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[9219,9226],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[9294,9295],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9322,9323],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9392,9399],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[9467,9468],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9495,9496],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9671,9688],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[9797,9812],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[9888,9889],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9916,9917],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9994,10009],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[10085,10086],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10113,10114],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10259,10265],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[10449,10460],"content":"RegexRunner","needQuote":true,"nodes":[{"content":"RegexRunner","pos":[0,11]}]}],"content":"items:\n- uid: System.Text.RegularExpressions.RegexRunnerFactory\n  commentId: T:System.Text.RegularExpressions.RegexRunnerFactory\n  id: RegexRunnerFactory\n  parent: System.Text.RegularExpressions\n  children:\n  - System.Text.RegularExpressions.RegexRunnerFactory.#ctor\n  - System.Text.RegularExpressions.RegexRunnerFactory.CreateInstance\n  langs:\n  - csharp\n  - vb\n  name: RegexRunnerFactory\n  fullName: System.Text.RegularExpressions.RegexRunnerFactory\n  type: Class\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RegexRunnerFactory\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 65\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Text.RegularExpressions.RegexRunner\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class for a compiled regular expression.</p>\\n\"\n  syntax:\n    content: public abstract class RegexRunnerFactory\n    content.vb: Public MustInherit Class RegexRunnerFactory\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: RegexRunnerFactory\n- uid: System.Text.RegularExpressions.RegexRunnerFactory.#ctor\n  commentId: M:System.Text.RegularExpressions.RegexRunnerFactory.#ctor\n  id: '#ctor'\n  parent: System.Text.RegularExpressions.RegexRunnerFactory\n  langs:\n  - csharp\n  - vb\n  name: RegexRunnerFactory()\n  fullName: System.Text.RegularExpressions.RegexRunnerFactory.RegexRunnerFactory()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 67\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.RegularExpressions.RegexRunnerFactory\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. </p>\\n\"\n  syntax:\n    content: protected RegexRunnerFactory()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RegexRunnerFactory.RegexRunnerFactory()\n- uid: System.Text.RegularExpressions.RegexRunnerFactory.CreateInstance\n  commentId: M:System.Text.RegularExpressions.RegexRunnerFactory.CreateInstance\n  id: CreateInstance\n  parent: System.Text.RegularExpressions.RegexRunnerFactory\n  langs:\n  - csharp\n  - vb\n  name: CreateInstance()\n  fullName: System.Text.RegularExpressions.RegexRunnerFactory.CreateInstance()\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateInstance\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 68\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>When overridden in a derived class, creates a <xref href=\\\"System.Text.RegularExpressions.RegexRunner\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for a specific compiled regular expression.</p>\\n\"\n  syntax:\n    content: protected abstract RegexRunner CreateInstance()\n    content.vb: Protected MustOverride Function CreateInstance As RegexRunner\n    return:\n      type: System.Text.RegularExpressions.RegexRunner\n      description: \"\\n<p>A <xref href=\\\"System.Text.RegularExpressions.RegexRunner\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object designed to execute a specific compiled regular expression. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  - abstract\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  nameWithType: RegexRunnerFactory.CreateInstance()\nreferences:\n- uid: System.Text.RegularExpressions\n  isExternal: false\n  name: System.Text.RegularExpressions\n  fullName: System.Text.RegularExpressions\n  commentId: N:System.Text.RegularExpressions\n  nameWithType: System.Text.RegularExpressions\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Text.RegularExpressions.RegexRunner\n  parent: System.Text.RegularExpressions\n  isExternal: false\n  name: RegexRunner\n  fullName: System.Text.RegularExpressions.RegexRunner\n  commentId: T:System.Text.RegularExpressions.RegexRunner\n  nameWithType: RegexRunner\n"}