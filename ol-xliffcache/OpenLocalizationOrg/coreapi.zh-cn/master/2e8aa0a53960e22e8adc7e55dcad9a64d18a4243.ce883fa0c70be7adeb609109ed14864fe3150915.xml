{"nodes":[{"pos":[3110,3126],"content":"MemoryMappedFile","needQuote":true,"nodes":[{"content":"MemoryMappedFile","pos":[0,16]}]},{"pos":[4555,4581],"content":"SafeMemoryMappedFileHandle","needQuote":true,"nodes":[{"content":"SafeMemoryMappedFileHandle","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The handle to the memory-mapped file.&lt;/p&gt;\\n","pos":[5450,5498],"source":"\\n<p>The handle to the memory-mapped file.</p>\\n"},{"pos":[6458,6554],"content":"CreateFromFile(FileStream, String, Int64, MemoryMappedFileAccess, HandleInheritability, Boolean)","needQuote":true,"nodes":[{"content":"CreateFromFile(FileStream, String, Int64, MemoryMappedFileAccess, HandleInheritability, Boolean)","pos":[0,96]}]},{"content":"\\n&lt;p&gt;The file stream of the existing file.&lt;/p&gt;\\n","pos":[7842,7890],"source":"\\n<p>The file stream of the existing file.</p>\\n"},{"content":"\\n&lt;p&gt;A name to assign to the memory-mapped file.&lt;/p&gt;\\n","pos":[7956,8010],"source":"\\n<p>A name to assign to the memory-mapped file.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum size, in bytes, to allocate to the memory-mapped file.","pos":[8076,8147],"source":"\\n<p>The maximum size, in bytes, to allocate to the memory-mapped file."},{"content":"Specify 0 to set the capacity to the size of &lt;em&gt;filestream&lt;/em&gt;.&lt;/p&gt;\\n","pos":[8148,8219],"source":" Specify 0 to set the capacity to the size of <em>filestream</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A memory-mapped file that has the specified characteristics.&lt;/p&gt;\\n","pos":[9287,9358],"source":"\\n<p>A memory-mapped file that has the specified characteristics.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;fileStream&lt;/em&gt;  is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10298,10357],"source":"\\n<p>\\n<em>fileStream</em>  is <strong>null</strong>.</p>\\n"},{"pos":[11458,11480],"content":"CreateFromFile(String)","needQuote":true,"nodes":[{"content":"CreateFromFile(String)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The path to file to map.&lt;/p&gt;\\n","pos":[12282,12317],"source":"\\n<p>The path to file to map.</p>\\n"},{"content":"\\n&lt;p&gt;A memory-mapped file.&lt;/p&gt;\\n","pos":[12408,12440],"source":"\\n<p>A memory-mapped file.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;path&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12961,13013],"source":"\\n<p>\\n<em>path</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurred.&lt;/p&gt;\\n","pos":[13104,13137],"source":"\\n<p>An I/O error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;path&lt;/em&gt; exceeds the maximum length defined by the operating system.","pos":[13246,13326],"source":"\\n<p>\\n<em>path</em> exceeds the maximum length defined by the operating system."},{"content":"In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters.&lt;/p&gt;\\n","pos":[13327,13445],"source":" In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permissions for the file.&lt;/p&gt;\\n","pos":[13560,13634],"source":"\\n<p>The caller does not have the required permissions for the file.</p>\\n"},{"pos":[14127,14159],"content":"CreateFromFile(String, FileMode)","needQuote":true,"nodes":[{"content":"CreateFromFile(String, FileMode)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The path to file to map.&lt;/p&gt;\\n","pos":[15050,15085],"source":"\\n<p>The path to file to map.</p>\\n"},{"content":"\\n&lt;p&gt;A memory-mapped file that has the specified access mode.&lt;/p&gt;\\n","pos":[15360,15427],"source":"\\n<p>A memory-mapped file that has the specified access mode.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;path&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16074,16126],"source":"\\n<p>\\n<em>path</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;path&lt;/em&gt; exceeds the maximum length defined by the operating system.","pos":[16837,16917],"source":"\\n<p>\\n<em>path</em> exceeds the maximum length defined by the operating system."},{"content":"In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters.","pos":[16918,17030]},{"content":"&lt;/p&gt;\\n","pos":[17031,17037],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permissions for the file.&lt;/p&gt;\\n","pos":[17152,17226],"source":"\\n<p>The caller does not have the required permissions for the file.</p>\\n"},{"pos":[17771,17811],"content":"CreateFromFile(String, FileMode, String)","needQuote":true,"nodes":[{"content":"CreateFromFile(String, FileMode, String)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The path to the file to map.&lt;/p&gt;\\n","pos":[18760,18799],"source":"\\n<p>The path to the file to map.</p>\\n"},{"content":"\\n&lt;p&gt;A name to assign to the memory-mapped file.","pos":[19049,19097],"source":"\\n<p>A name to assign to the memory-mapped file."},{"content":"&lt;/p&gt;\\n","pos":[19098,19104],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A memory-mapped file that has the specified name and access mode.&lt;/p&gt;\\n","pos":[19195,19271],"source":"\\n<p>A memory-mapped file that has the specified name and access mode.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;path&lt;/em&gt; or &lt;em&gt;mapName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[19978,20050],"source":"\\n<p>\\n<em>path</em> or <em>mapName</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;path&lt;/em&gt; exceeds the maximum length defined by the operating system.","pos":[20761,20841],"source":"\\n<p>\\n<em>path</em> exceeds the maximum length defined by the operating system."},{"content":"In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters.&lt;/p&gt;\\n","pos":[20842,20960],"source":" In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permissions for the file.&lt;/p&gt;\\n","pos":[21075,21149],"source":"\\n<p>The caller does not have the required permissions for the file.</p>\\n"},{"pos":[21741,21788],"content":"CreateFromFile(String, FileMode, String, Int64)","needQuote":true,"nodes":[{"content":"CreateFromFile(String, FileMode, String, Int64)","pos":[0,47]}]},{"content":"\\n&lt;p&gt;The path to the file to map.&lt;/p&gt;\\n","pos":[22795,22834],"source":"\\n<p>The path to the file to map.</p>\\n"},{"content":"\\n&lt;p&gt;A name to assign to the memory-mapped file.","pos":[23201,23249],"source":"\\n<p>A name to assign to the memory-mapped file."},{"content":"&lt;/p&gt;\\n","pos":[23250,23256],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum size, in bytes, to allocate to the memory-mapped file.","pos":[23322,23393],"source":"\\n<p>The maximum size, in bytes, to allocate to the memory-mapped file."},{"content":"Specify 0 to set the capacity to the size of the file on disk.&lt;/p&gt;\\n","pos":[23394,23462],"source":" Specify 0 to set the capacity to the size of the file on disk.</p>\\n"},{"content":"\\n&lt;p&gt;A memory-mapped file that has the specified characteristics.&lt;/p&gt;\\n","pos":[23553,23624],"source":"\\n<p>A memory-mapped file that has the specified characteristics.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;path&lt;/em&gt; or &lt;em&gt;mapName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[24331,24403],"source":"\\n<p>\\n<em>path</em> or <em>mapName</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;capacity&lt;/em&gt; is greater than the size of the logical address space.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;capacity&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;capacity&lt;/em&gt; is less than the file size (but not zero).&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;capacity&lt;/em&gt; is zero, and the size of the file on disk is also zero.&lt;/p&gt;\\n","pos":[24520,24846],"source":"\\n<p>\\n<em>capacity</em> is greater than the size of the logical address space.</p>\\n<p>-or-</p>\\n<p>\\n<em>capacity</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>capacity</em> is less than the file size (but not zero).</p>\\n<p>-or-</p>\\n<p>\\n<em>capacity</em> is zero, and the size of the file on disk is also zero.</p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurred.&lt;/p&gt;\\n","pos":[24937,24970],"source":"\\n<p>An I/O error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;path&lt;/em&gt; exceeds the maximum length defined by the operating system.","pos":[25079,25159],"source":"\\n<p>\\n<em>path</em> exceeds the maximum length defined by the operating system."},{"content":"In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters.&lt;/p&gt;\\n","pos":[25160,25278],"source":" In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permissions for the file.&lt;/p&gt;\\n","pos":[25393,25467],"source":"\\n<p>The caller does not have the required permissions for the file.</p>\\n"},{"pos":[26219,26290],"content":"CreateFromFile(String, FileMode, String, Int64, MemoryMappedFileAccess)","needQuote":true,"nodes":[{"content":"CreateFromFile(String, FileMode, String, Int64, MemoryMappedFileAccess)","pos":[0,71]}]},{"content":"\\n&lt;p&gt;The path to the file to map.&lt;/p&gt;\\n","pos":[27427,27466],"source":"\\n<p>The path to the file to map.</p>\\n"},{"content":"\\n&lt;p&gt;A name to assign to the memory-mapped file.","pos":[27833,27881],"source":"\\n<p>A name to assign to the memory-mapped file."},{"content":"&lt;/p&gt;\\n","pos":[27882,27888],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum size, in bytes, to allocate to the memory-mapped file.","pos":[27954,28025],"source":"\\n<p>The maximum size, in bytes, to allocate to the memory-mapped file."},{"content":"Specify 0 to set the capacity to the size of the file on disk.&lt;/p&gt;\\n","pos":[28026,28094],"source":" Specify 0 to set the capacity to the size of the file on disk.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies the type of access allowed to the memory-mapped file.&lt;/p&gt;\\n","pos":[28196,28305],"source":"\\n<p>One of the enumeration values that specifies the type of access allowed to the memory-mapped file.</p>\\n"},{"content":"\\n&lt;p&gt;A memory-mapped file that has the specified characteristics.&lt;/p&gt;\\n","pos":[28396,28467],"source":"\\n<p>A memory-mapped file that has the specified characteristics.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;path&lt;/em&gt; or &lt;em&gt;mapName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[29234,29300],"source":"\\n<p>\\n<em>path</em> or <em>mapName</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[29301,29307],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;An I/O error occurred.&lt;/p&gt;\\n","pos":[30119,30165],"source":"\\n<p>-or-</p>\\n<p>An I/O error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;path&lt;/em&gt; exceeds the maximum length defined by the operating system.","pos":[30274,30354],"source":"\\n<p>\\n<em>path</em> exceeds the maximum length defined by the operating system."},{"content":"In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters.&lt;/p&gt;\\n","pos":[30355,30473],"source":" In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permissions for the file.&lt;/p&gt;\\n","pos":[30588,30662],"source":"\\n<p>The caller does not have the required permissions for the file.</p>\\n"},{"pos":[31299,31323],"content":"CreateNew(String, Int64)","needQuote":true,"nodes":[{"content":"CreateNew(String, Int64)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;A name to assign to the memory-mapped file.&lt;/p&gt;\\n","pos":[32191,32245],"source":"\\n<p>A name to assign to the memory-mapped file.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum size, in bytes, to allocate to the memory-mapped file.&lt;/p&gt;\\n","pos":[32311,32388],"source":"\\n<p>The maximum size, in bytes, to allocate to the memory-mapped file.</p>\\n"},{"content":"\\n&lt;p&gt;A memory-mapped file that has the specified name and capacity.&lt;/p&gt;\\n","pos":[32479,32552],"source":"\\n<p>A memory-mapped file that has the specified name and capacity.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;mapName&lt;/em&gt; is an empty string.","pos":[32663,32706],"source":"\\n<p>\\n<em>mapName</em> is an empty string."},{"content":"&lt;/p&gt;\\n","pos":[32707,32713],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;mapName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[32818,32873],"source":"\\n<p>\\n<em>mapName</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;capacity&lt;/em&gt; is less than or equal to zero.&lt;/p&gt;\\n","pos":[32990,33051],"source":"\\n<p>\\n<em>capacity</em> is less than or equal to zero.</p>\\n"},{"pos":[33666,33714],"content":"CreateNew(String, Int64, MemoryMappedFileAccess)","needQuote":true,"nodes":[{"content":"CreateNew(String, Int64, MemoryMappedFileAccess)","pos":[0,48]}]},{"content":"\\n&lt;p&gt;A name to assign to the memory-mapped file.&lt;/p&gt;\\n","pos":[34715,34769],"source":"\\n<p>A name to assign to the memory-mapped file.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum size, in bytes, to allocate to the memory-mapped file.&lt;/p&gt;\\n","pos":[34835,34912],"source":"\\n<p>The maximum size, in bytes, to allocate to the memory-mapped file.</p>\\n"},{"content":"\\n&lt;p&gt;A memory-mapped file that has the specified characteristics.&lt;/p&gt;\\n","pos":[35352,35423],"source":"\\n<p>A memory-mapped file that has the specified characteristics.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;mapName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[35894,35949],"source":"\\n<p>\\n<em>mapName</em> is <strong>null</strong>.</p>\\n"},{"pos":[37199,37294],"content":"CreateNew(String, Int64, MemoryMappedFileAccess, MemoryMappedFileOptions, HandleInheritability)","needQuote":true,"nodes":[{"content":"CreateNew(String, Int64, MemoryMappedFileAccess, MemoryMappedFileOptions, HandleInheritability)","pos":[0,95]}]},{"content":"\\n&lt;p&gt;A name to assign to the memory-mapped file.&lt;/p&gt;\\n","pos":[38557,38611],"source":"\\n<p>A name to assign to the memory-mapped file.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum size, in bytes, to allocate to the memory-mapped file.&lt;/p&gt;\\n","pos":[38677,38754],"source":"\\n<p>The maximum size, in bytes, to allocate to the memory-mapped file.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of enumeration values that specifies memory allocation options for the memory-mapped file.&lt;/p&gt;\\n","pos":[39206,39329],"source":"\\n<p>A bitwise combination of enumeration values that specifies memory allocation options for the memory-mapped file.</p>\\n"},{"content":"\\n&lt;p&gt;A memory-mapped file that has the specified characteristics.&lt;/p&gt;\\n","pos":[39735,39806],"source":"\\n<p>A memory-mapped file that has the specified characteristics.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;mapName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[40277,40332],"source":"\\n<p>\\n<em>mapName</em> is <strong>null</strong>.</p>\\n"},{"pos":[41396,41423],"content":"CreateOrOpen(String, Int64)","needQuote":true,"nodes":[{"content":"CreateOrOpen(String, Int64)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;A name to assign to the memory-mapped file.&lt;/p&gt;\\n","pos":[42311,42365],"source":"\\n<p>A name to assign to the memory-mapped file.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum size, in bytes, to allocate to the memory-mapped file.&lt;/p&gt;\\n","pos":[42431,42508],"source":"\\n<p>The maximum size, in bytes, to allocate to the memory-mapped file.</p>\\n"},{"content":"\\n&lt;p&gt;A memory-mapped file that has the specified name and size.&lt;/p&gt;\\n","pos":[42599,42668],"source":"\\n<p>A memory-mapped file that has the specified name and size.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;mapName&lt;/em&gt; is an empty string.&lt;/p&gt;\\n","pos":[42779,42828],"source":"\\n<p>\\n<em>mapName</em> is an empty string.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;mapName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[42933,42988],"source":"\\n<p>\\n<em>mapName</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;capacity&lt;/em&gt; is greater than the size of the logical address space.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;capacity&lt;/em&gt; is less than or equal to zero.&lt;/p&gt;\\n","pos":[43105,43262],"source":"\\n<p>\\n<em>capacity</em> is greater than the size of the logical address space.</p>\\n<p>-or-</p>\\n<p>\\n<em>capacity</em> is less than or equal to zero.</p>\\n"},{"pos":[43889,43940],"content":"CreateOrOpen(String, Int64, MemoryMappedFileAccess)","needQuote":true,"nodes":[{"content":"CreateOrOpen(String, Int64, MemoryMappedFileAccess)","pos":[0,51]}]},{"content":"\\n&lt;p&gt;A name to assign to the memory-mapped file.&lt;/p&gt;\\n","pos":[44962,45016],"source":"\\n<p>A name to assign to the memory-mapped file.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum size, in bytes, to allocate to the memory-mapped file.&lt;/p&gt;\\n","pos":[45082,45159],"source":"\\n<p>The maximum size, in bytes, to allocate to the memory-mapped file.</p>\\n"},{"content":"\\n&lt;p&gt;A memory-mapped file that has the specified characteristics.&lt;/p&gt;\\n","pos":[45599,45670],"source":"\\n<p>A memory-mapped file that has the specified characteristics.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;mapName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[46140,46195],"source":"\\n<p>\\n<em>mapName</em> is <strong>null</strong>.</p>\\n"},{"pos":[48055,48153],"content":"CreateOrOpen(String, Int64, MemoryMappedFileAccess, MemoryMappedFileOptions, HandleInheritability)","needQuote":true,"nodes":[{"content":"CreateOrOpen(String, Int64, MemoryMappedFileAccess, MemoryMappedFileOptions, HandleInheritability)","pos":[0,98]}]},{"content":"\\n&lt;p&gt;A name to assign to the memory-mapped file.&lt;/p&gt;\\n","pos":[49505,49559],"source":"\\n<p>A name to assign to the memory-mapped file.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum size, in bytes, to allocate to the memory-mapped file.&lt;/p&gt;\\n","pos":[49625,49702],"source":"\\n<p>The maximum size, in bytes, to allocate to the memory-mapped file.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of values that indicate the memory allocation options to apply to the file.&lt;/p&gt;\\n","pos":[50155,50263],"source":"\\n<p>A bitwise combination of values that indicate the memory allocation options to apply to the file.</p>\\n"},{"content":"\\n&lt;p&gt;A memory-mapped file that has the specified characteristics.&lt;/p&gt;\\n","pos":[50669,50740],"source":"\\n<p>A memory-mapped file that has the specified characteristics.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;mapName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[51210,51265],"source":"\\n<p>\\n<em>mapName</em> is <strong>null</strong>.</p>\\n"},{"pos":[52876,52896],"content":"CreateViewAccessor()","needQuote":true,"nodes":[{"content":"CreateViewAccessor()","pos":[0,20]}]},{"content":"\\n&lt;p&gt;A randomly accessible block of memory.&lt;/p&gt;\\n","pos":[53816,53865],"source":"\\n<p>A randomly accessible block of memory.</p>\\n"},{"content":"\\n&lt;p&gt;Access to the memory-mapped file is unauthorized.&lt;/p&gt;\\n","pos":[53996,54056],"source":"\\n<p>Access to the memory-mapped file is unauthorized.</p>\\n"},{"pos":[54516,54548],"content":"CreateViewAccessor(Int64, Int64)","needQuote":true,"nodes":[{"content":"CreateViewAccessor(Int64, Int64)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The byte at which to start the view.&lt;/p&gt;\\n","pos":[55571,55618],"source":"\\n<p>The byte at which to start the view.</p>\\n"},{"content":"\\n&lt;p&gt;The size of the view.","pos":[55680,55706],"source":"\\n<p>The size of the view."},{"content":"Specify 0 (zero) to create a view that starts at &lt;em&gt;offset&lt;/em&gt; and ends approximately at the end of the memory-mapped file.&lt;/p&gt;\\n","pos":[55707,55838],"source":" Specify 0 (zero) to create a view that starts at <em>offset</em> and ends approximately at the end of the memory-mapped file.</p>\\n"},{"content":"\\n&lt;p&gt;A randomly accessible block of memory.&lt;/p&gt;\\n","pos":[55937,55986],"source":"\\n<p>A randomly accessible block of memory.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; or &lt;em&gt;size&lt;/em&gt; is a negative value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;size&lt;/em&gt; is greater than the logical address space.&lt;/p&gt;\\n","pos":[56117,56263],"source":"\\n<p>\\n<em>offset</em> or <em>size</em> is a negative value.</p>\\n<p>-or-</p>\\n<p>\\n<em>size</em> is greater than the logical address space.</p>\\n"},{"content":"\\n&lt;p&gt;Access to the memory-mapped file is unauthorized.&lt;/p&gt;\\n","pos":[56380,56440],"source":"\\n<p>Access to the memory-mapped file is unauthorized.</p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurred.&lt;/p&gt;\\n","pos":[56531,56564],"source":"\\n<p>An I/O error occurred.</p>\\n"},{"pos":[57189,57245],"content":"CreateViewAccessor(Int64, Int64, MemoryMappedFileAccess)","needQuote":true,"nodes":[{"content":"CreateViewAccessor(Int64, Int64, MemoryMappedFileAccess)","pos":[0,56]}]},{"content":"\\n&lt;p&gt;The byte at which to start the view.&lt;/p&gt;\\n","pos":[58407,58454],"source":"\\n<p>The byte at which to start the view.</p>\\n"},{"content":"\\n&lt;p&gt;The size of the view.","pos":[58516,58542],"source":"\\n<p>The size of the view."},{"content":"Specify 0 (zero) to create a view that starts at &lt;em&gt;offset&lt;/em&gt; and ends approximately at the end of the memory-mapped file.&lt;/p&gt;\\n","pos":[58543,58674],"source":" Specify 0 (zero) to create a view that starts at <em>offset</em> and ends approximately at the end of the memory-mapped file.</p>\\n"},{"content":"\\n&lt;p&gt;A randomly accessible block of memory.&lt;/p&gt;\\n","pos":[59121,59170],"source":"\\n<p>A randomly accessible block of memory.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; or &lt;em&gt;size&lt;/em&gt; is a negative value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;size&lt;/em&gt; is greater than the logical address space.&lt;/p&gt;\\n","pos":[59301,59447],"source":"\\n<p>\\n<em>offset</em> or <em>size</em> is a negative value.</p>\\n<p>-or-</p>\\n<p>\\n<em>size</em> is greater than the logical address space.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;access&lt;/em&gt; is invalid for the memory-mapped file.&lt;/p&gt;\\n","pos":[59564,59631],"source":"\\n<p>\\n<em>access</em> is invalid for the memory-mapped file.</p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurred.&lt;/p&gt;\\n","pos":[59722,59755],"source":"\\n<p>An I/O error occurred.</p>\\n"},{"pos":[60292,60310],"content":"CreateViewStream()","needQuote":true,"nodes":[{"content":"CreateViewStream()","pos":[0,18]}]},{"content":"\\n&lt;p&gt;A stream of memory.&lt;/p&gt;\\n","pos":[61112,61142],"source":"\\n<p>A stream of memory.</p>\\n"},{"content":"\\n&lt;p&gt;Access to the memory-mapped file is unauthorized.&lt;/p&gt;\\n","pos":[61273,61333],"source":"\\n<p>Access to the memory-mapped file is unauthorized.</p>\\n"},{"pos":[61785,61815],"content":"CreateViewStream(Int64, Int64)","needQuote":true,"nodes":[{"content":"CreateViewStream(Int64, Int64)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The byte at which to start the view.&lt;/p&gt;\\n","pos":[62720,62767],"source":"\\n<p>The byte at which to start the view.</p>\\n"},{"content":"\\n&lt;p&gt;The size of the view.","pos":[62829,62855],"source":"\\n<p>The size of the view."},{"content":"Specify 0 (zero) to create a view that starts at &lt;em&gt;offset&lt;/em&gt; and ends approximately at the end of the memory-mapped file.&lt;/p&gt;\\n","pos":[62856,62987],"source":" Specify 0 (zero) to create a view that starts at <em>offset</em> and ends approximately at the end of the memory-mapped file.</p>\\n"},{"content":"\\n&lt;p&gt;A stream of memory that has the specified offset and size.&lt;/p&gt;\\n","pos":[63084,63153],"source":"\\n<p>A stream of memory that has the specified offset and size.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; or &lt;em&gt;size&lt;/em&gt; is a negative value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;size&lt;/em&gt; is greater than the logical address space.&lt;/p&gt;\\n","pos":[63284,63430],"source":"\\n<p>\\n<em>offset</em> or <em>size</em> is a negative value.</p>\\n<p>-or-</p>\\n<p>\\n<em>size</em> is greater than the logical address space.</p>\\n"},{"content":"\\n&lt;p&gt;Access to the memory-mapped file is unauthorized.&lt;/p&gt;\\n","pos":[63547,63607],"source":"\\n<p>Access to the memory-mapped file is unauthorized.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;size&lt;/em&gt; is greater than the total virtual memory.&lt;/p&gt;\\n","pos":[63698,63766],"source":"\\n<p>\\n<em>size</em> is greater than the total virtual memory.</p>\\n"},{"pos":[64383,64437],"content":"CreateViewStream(Int64, Int64, MemoryMappedFileAccess)","needQuote":true,"nodes":[{"content":"CreateViewStream(Int64, Int64, MemoryMappedFileAccess)","pos":[0,54]}]},{"content":"\\n&lt;p&gt;The byte at which to start the view.&lt;/p&gt;\\n","pos":[65473,65520],"source":"\\n<p>The byte at which to start the view.</p>\\n"},{"content":"\\n&lt;p&gt;The size of the view.","pos":[65582,65608],"source":"\\n<p>The size of the view."},{"content":"Specify 0 (zero) to create a view that starts at &lt;em&gt;offset&lt;/em&gt; and ends approximately at the end of the memory-mapped file.&lt;/p&gt;\\n","pos":[65609,65740],"source":" Specify 0 (zero) to create a view that starts at <em>offset</em> and ends approximately at the end of the memory-mapped file.</p>\\n"},{"content":"\\n&lt;p&gt;A stream of memory that has the specified characteristics.&lt;/p&gt;\\n","pos":[66185,66254],"source":"\\n<p>A stream of memory that has the specified characteristics.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;access&lt;/em&gt; is invalid for the memory-mapped file.&lt;/p&gt;\\n","pos":[66832,66899],"source":"\\n<p>\\n<em>access</em> is invalid for the memory-mapped file.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;size&lt;/em&gt; is greater than the total virtual memory.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;access&lt;/em&gt; is invalid for the memory-mapped file.&lt;/p&gt;\\n","pos":[66990,67136],"source":"\\n<p>\\n<em>size</em> is greater than the total virtual memory.</p>\\n<p>-or-</p>\\n<p>\\n<em>access</em> is invalid for the memory-mapped file.</p>\\n"},{"pos":[67644,67653],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[68777,68793],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to release both managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to release only unmanaged resources.","pos":[69706,69843],"source":"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources."},{"content":"&lt;/p&gt;\\n","pos":[69844,69850],"source":" </p>\\n"},{"pos":[70286,70306],"content":"OpenExisting(String)","needQuote":true,"nodes":[{"content":"OpenExisting(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The name of the memory-mapped file to open.&lt;/p&gt;\\n","pos":[71142,71196],"source":"\\n<p>The name of the memory-mapped file to open.</p>\\n"},{"content":"\\n&lt;p&gt;A memory-mapped file that has the specified name.","pos":[71287,71341],"source":"\\n<p>A memory-mapped file that has the specified name."},{"content":"&lt;/p&gt;\\n","pos":[71342,71348],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;mapName&lt;/em&gt; is an empty string.&lt;/p&gt;\\n","pos":[71459,71508],"source":"\\n<p>\\n<em>mapName</em> is an empty string.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;mapName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[71613,71668],"source":"\\n<p>\\n<em>mapName</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The file specified for &lt;em&gt;mapName&lt;/em&gt; does not exist.&lt;/p&gt;\\n","pos":[71779,71845],"source":"\\n<p>The file specified for <em>mapName</em> does not exist.</p>\\n"},{"pos":[72426,72470],"content":"OpenExisting(String, MemoryMappedFileRights)","needQuote":true,"nodes":[{"content":"OpenExisting(String, MemoryMappedFileRights)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;The name of the memory-mapped file to open.&lt;/p&gt;\\n","pos":[73467,73521],"source":"\\n<p>The name of the memory-mapped file to open.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies the access rights to apply to the memory-mapped file.&lt;/p&gt;\\n","pos":[73636,73745],"source":"\\n<p>One of the enumeration values that specifies the access rights to apply to the memory-mapped file.</p>\\n"},{"content":"\\n&lt;p&gt;A memory-mapped file that has the specified characteristics.&lt;/p&gt;\\n","pos":[73836,73907],"source":"\\n<p>A memory-mapped file that has the specified characteristics.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;mapName&lt;/em&gt; is an empty string.&lt;/p&gt;\\n","pos":[74018,74067],"source":"\\n<p>\\n<em>mapName</em> is an empty string.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;mapName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[74172,74227],"source":"\\n<p>\\n<em>mapName</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The file specified for &lt;em&gt;mapName&lt;/em&gt; does not exist.&lt;/p&gt;\\n","pos":[74641,74707],"source":"\\n<p>The file specified for <em>mapName</em> does not exist.</p>\\n"},{"pos":[75405,75471],"content":"OpenExisting(String, MemoryMappedFileRights, HandleInheritability)","needQuote":true,"nodes":[{"content":"OpenExisting(String, MemoryMappedFileRights, HandleInheritability)","pos":[0,66]}]},{"content":"\\n&lt;p&gt;The name of the memory-mapped file to open.&lt;/p&gt;\\n","pos":[76594,76648],"source":"\\n<p>The name of the memory-mapped file to open.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies the access rights to apply to the memory-mapped file.&lt;/p&gt;\\n","pos":[76763,76872],"source":"\\n<p>One of the enumeration values that specifies the access rights to apply to the memory-mapped file.</p>\\n"},{"content":"\\n&lt;p&gt;A memory-mapped file that has the specified characteristics.&lt;/p&gt;\\n","pos":[77300,77371],"source":"\\n<p>A memory-mapped file that has the specified characteristics.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;mapName&lt;/em&gt; is an empty string.&lt;/p&gt;\\n","pos":[77482,77531],"source":"\\n<p>\\n<em>mapName</em> is an empty string.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;mapName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[77636,77691],"source":"\\n<p>\\n<em>mapName</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The requested access is invalid for the memory-mapped file.&lt;/p&gt;\\n","pos":[78283,78353],"source":"\\n<p>The requested access is invalid for the memory-mapped file.</p>\\n"},{"content":"\\n&lt;p&gt;The file specified for &lt;em&gt;mapName&lt;/em&gt; does not exist.&lt;/p&gt;\\n","pos":[78464,78530],"source":"\\n<p>The file specified for <em>mapName</em> does not exist.</p>\\n"},{"pos":[78915,78942],"content":"System.IO.MemoryMappedFiles","needQuote":true,"nodes":[{"content":"System.IO.MemoryMappedFiles","pos":[0,27]}]},{"pos":[79136,79142],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[79292,79303],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[79478,79488],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[79583,79591],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[79660,79661],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79688,79689],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79759,79767],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[79836,79837],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79864,79865],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80048,80062],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[80181,80187],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[80254,80255],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80305,80311],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[80371,80372],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80455,80461],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[80528,80529],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80579,80585],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[80645,80646],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80860,80882],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[81030,81036],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[81103,81104],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81154,81160],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[81221,81222]},{"pos":[81277,81283],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[81343,81344],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81441,81447],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[81514,81515],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81565,81571],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[81632,81633]},{"pos":[81688,81694],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[81754,81755],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82000,82031],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[82197,82212],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[82288,82289],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82339,82345],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[82406,82407]},{"pos":[82462,82468],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[82528,82529],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82635,82650],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[82726,82727],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82777,82783],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[82844,82845]},{"pos":[82900,82906],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[82966,82967],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83197,83210],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[83311,83322],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[83394,83395],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83422,83423],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83496,83507],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[83579,83580],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83607,83608],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83783,83792],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[83885,83892],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[83960,83961],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83988,83989],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84058,84065],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[84133,84134],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84161,84162],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84337,84354],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[84463,84478],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[84554,84555],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84582,84583],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84660,84675],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[84751,84752],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84779,84780],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84925,84931],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[85124,85150],"content":"SafeMemoryMappedFileHandle","needQuote":true,"nodes":[{"content":"SafeMemoryMappedFileHandle","pos":[0,26]}]},{"pos":[85394,85421],"content":"Microsoft.Win32.SafeHandles","needQuote":true,"nodes":[{"content":"Microsoft.Win32.SafeHandles","pos":[0,27]}]},{"pos":[85625,85635],"content":"FileStream","needQuote":true,"nodes":[{"content":"FileStream","pos":[0,10]}]},{"pos":[85798,85804],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[85948,85953],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[86153,86175],"content":"MemoryMappedFileAccess","needQuote":true,"nodes":[{"content":"MemoryMappedFileAccess","pos":[0,22]}]},{"pos":[86430,86450],"content":"HandleInheritability","needQuote":true,"nodes":[{"content":"HandleInheritability","pos":[0,20]}]},{"pos":[86644,86651],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[86851,86867],"content":"MemoryMappedFile","needQuote":true,"nodes":[{"content":"MemoryMappedFile","pos":[0,16]}]},{"pos":[87063,87072],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[87220,87228],"content":"FileMode","needQuote":true,"nodes":[{"content":"FileMode","pos":[0,8]}]},{"pos":[87444,87467],"content":"MemoryMappedFileOptions","needQuote":true,"nodes":[{"content":"MemoryMappedFileOptions","pos":[0,23]}]},{"pos":[87765,87789],"content":"MemoryMappedViewAccessor","needQuote":true,"nodes":[{"content":"MemoryMappedViewAccessor","pos":[0,24]}]},{"pos":[88088,88110],"content":"MemoryMappedViewStream","needQuote":true,"nodes":[{"content":"MemoryMappedViewStream","pos":[0,22]}]},{"pos":[88370,88379],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[88482,88489],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[88541,88542],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88569,88570],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88644,88651],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[88703,88704],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88731,88732],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88953,88975],"content":"MemoryMappedFileRights","needQuote":true,"nodes":[{"content":"MemoryMappedFileRights","pos":[0,22]}]},{"pos":[89221,89238],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[89414,89435],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[89629,89656],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[89875,89886],"content":"IOException","needQuote":true,"nodes":[{"content":"IOException","pos":[0,11]}]},{"pos":[90052,90072],"content":"PathTooLongException","needQuote":true,"nodes":[{"content":"PathTooLongException","pos":[0,20]}]},{"pos":[90268,90285],"content":"SecurityException","needQuote":true,"nodes":[{"content":"SecurityException","pos":[0,17]}]},{"pos":[90502,90529],"content":"UnauthorizedAccessException","needQuote":true,"nodes":[{"content":"UnauthorizedAccessException","pos":[0,27]}]},{"pos":[90738,90759],"content":"FileNotFoundException","needQuote":true,"nodes":[{"content":"FileNotFoundException","pos":[0,21]}]}],"content":"items:\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFile\n  commentId: T:System.IO.MemoryMappedFiles.MemoryMappedFile\n  id: MemoryMappedFile\n  parent: System.IO.MemoryMappedFiles\n  children:\n  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.IO.FileStream,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.HandleInheritability,System.Boolean)\n  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String)\n  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode)\n  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String)\n  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64)\n  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)\n  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64)\n  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)\n  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)\n  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64)\n  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)\n  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)\n  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor\n  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64)\n  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)\n  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream\n  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64)\n  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)\n  - System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose\n  - System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose(System.Boolean)\n  - System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String)\n  - System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights)\n  - System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights,System.IO.HandleInheritability)\n  - System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle\n  langs:\n  - csharp\n  - vb\n  name: MemoryMappedFile\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile\n  type: Class\n  source:\n    remote:\n      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MemoryMappedFile\n    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n    startLine: 23\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  namespace: System.IO.MemoryMappedFiles\n  summary: \"\\n<p>Represents a memory-mapped file. </p>\\n\"\n  syntax:\n    content: 'public class MemoryMappedFile : IDisposable'\n    content.vb: >-\n      Public Class MemoryMappedFile\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: MemoryMappedFile\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle\n  commentId: P:System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle\n  id: SafeMemoryMappedFileHandle\n  parent: System.IO.MemoryMappedFiles.MemoryMappedFile\n  langs:\n  - csharp\n  - vb\n  name: SafeMemoryMappedFileHandle\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle\n  type: Property\n  source:\n    remote:\n      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SafeMemoryMappedFileHandle\n    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n    startLine: 26\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  namespace: System.IO.MemoryMappedFiles\n  summary: \"\\n<p>Gets the file handle of a memory-mapped file.</p>\\n\"\n  syntax:\n    content: public SafeMemoryMappedFileHandle SafeMemoryMappedFileHandle { get; }\n    content.vb: Public ReadOnly Property SafeMemoryMappedFileHandle As SafeMemoryMappedFileHandle\n    parameters: []\n    return:\n      type: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle\n      description: \"\\n<p>The handle to the memory-mapped file.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: MemoryMappedFile.SafeMemoryMappedFileHandle\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.IO.FileStream,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.HandleInheritability,System.Boolean)\n  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.IO.FileStream,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.HandleInheritability,System.Boolean)\n  id: CreateFromFile(System.IO.FileStream,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.HandleInheritability,System.Boolean)\n  parent: System.IO.MemoryMappedFiles.MemoryMappedFile\n  langs:\n  - csharp\n  - vb\n  name: CreateFromFile(FileStream, String, Int64, MemoryMappedFileAccess, HandleInheritability, Boolean)\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.IO.FileStream, System.String, System.Int64, System.IO.MemoryMappedFiles.MemoryMappedFileAccess, System.IO.HandleInheritability, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateFromFile\n    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n    startLine: 27\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  namespace: System.IO.MemoryMappedFiles\n  summary: \"\\n<p>Creates a memory-mapped file from an existing file with the specified access mode, name, inheritability, and capacity.</p>\\n\"\n  syntax:\n    content: public static MemoryMappedFile CreateFromFile(FileStream fileStream, string mapName, long capacity, MemoryMappedFileAccess access, HandleInheritability inheritability, bool leaveOpen)\n    content.vb: Public Shared Function CreateFromFile(fileStream As FileStream, mapName As String, capacity As Long, access As MemoryMappedFileAccess, inheritability As HandleInheritability, leaveOpen As Boolean) As MemoryMappedFile\n    parameters:\n    - id: fileStream\n      type: System.IO.FileStream\n      description: \"\\n<p>The file stream of the existing file.</p>\\n\"\n    - id: mapName\n      type: System.String\n      description: \"\\n<p>A name to assign to the memory-mapped file.</p>\\n\"\n    - id: capacity\n      type: System.Int64\n      description: \"\\n<p>The maximum size, in bytes, to allocate to the memory-mapped file. Specify 0 to set the capacity to the size of <em>filestream</em>.</p>\\n\"\n    - id: access\n      type: System.IO.MemoryMappedFiles.MemoryMappedFileAccess\n      description: \"\\n<p>One of the enumeration values that specifies the type of access allowed to the memory-mapped file. </p>\\n<p>This parameter can’t be set to <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: inheritability\n      type: System.IO.HandleInheritability\n      description: \"\\n<p>One of the enumeration values that specifies whether a handle to the memory-mapped file can be inherited by a child process. The default is <xref href=\\\"System.IO.HandleInheritability.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: leaveOpen\n      type: System.Boolean\n      description: \"\\n<p>A value that indicates whether to close the source file stream when the <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFile\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is disposed. </p>\\n\"\n    return:\n      type: System.IO.MemoryMappedFiles.MemoryMappedFile\n      description: \"\\n<p>A memory-mapped file that has the specified characteristics.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>mapName</em> is <strong>null</strong> or an empty string.</p>\\n<p>-or-</p>\\n<p>\\n<em>capacity</em> and the length of the file are zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>access</em> is set to <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration value, which is not allowed.</p>\\n<p>-or-</p>\\n<p>\\n<em>access</em> is set to <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <em>capacity</em> is larger than the length of <strong>filestream</strong>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>fileStream</em>  is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>capacity</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>capacity</em> is less than the file size.</p>\\n<p>-or-</p>\\n<p>\\n<em>access</em> is not a valid <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration value.</p>\\n<p>-or-</p>\\n<p>\\n<em>inheritability</em> is not a valid <xref href=\\\"System.IO.HandleInheritability\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: MemoryMappedFile.CreateFromFile(FileStream, String, Int64, MemoryMappedFileAccess, HandleInheritability, Boolean)\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String)\n  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String)\n  id: CreateFromFile(System.String)\n  parent: System.IO.MemoryMappedFiles.MemoryMappedFile\n  langs:\n  - csharp\n  - vb\n  name: CreateFromFile(String)\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateFromFile\n    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n    startLine: 28\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  namespace: System.IO.MemoryMappedFiles\n  summary: \"\\n<p>Creates a memory-mapped file from a file on disk.</p>\\n\"\n  syntax:\n    content: public static MemoryMappedFile CreateFromFile(string path)\n    content.vb: Public Shared Function CreateFromFile(path As String) As MemoryMappedFile\n    parameters:\n    - id: path\n      type: System.String\n      description: \"\\n<p>The path to file to map.</p>\\n\"\n    return:\n      type: System.IO.MemoryMappedFiles.MemoryMappedFile\n      description: \"\\n<p>A memory-mapped file.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>path</em> is an empty string, contains only white space, or has one or more invalid characters, as defined by the <xref href=\\\"System.IO.Path.GetInvalidFileNameChars\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n<p>-or-</p>\\n<p>\\n<em>path</em> refers to an invalid device. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>path</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurred.</p>\\n\"\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: \"\\n<p>\\n<em>path</em> exceeds the maximum length defined by the operating system. In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters.</p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permissions for the file.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: MemoryMappedFile.CreateFromFile(String)\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode)\n  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode)\n  id: CreateFromFile(System.String,System.IO.FileMode)\n  parent: System.IO.MemoryMappedFiles.MemoryMappedFile\n  langs:\n  - csharp\n  - vb\n  name: CreateFromFile(String, FileMode)\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String, System.IO.FileMode)\n  type: Method\n  source:\n    remote:\n      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateFromFile\n    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n    startLine: 29\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  namespace: System.IO.MemoryMappedFiles\n  summary: \"\\n<p>Creates a memory-mapped file that has the specified access mode from a file on disk. </p>\\n\"\n  syntax:\n    content: public static MemoryMappedFile CreateFromFile(string path, FileMode mode)\n    content.vb: Public Shared Function CreateFromFile(path As String, mode As FileMode) As MemoryMappedFile\n    parameters:\n    - id: path\n      type: System.String\n      description: \"\\n<p>The path to file to map.</p>\\n\"\n    - id: mode\n      type: System.IO.FileMode\n      description: \"\\n<p>Access mode; must be <xref href=\\\"System.IO.FileMode.Open\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.IO.MemoryMappedFiles.MemoryMappedFile\n      description: \"\\n<p>A memory-mapped file that has the specified access mode.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>path</em> is an empty string, contains only white space, or has one or more invalid characters, as defined by the <xref href=\\\"System.IO.Path.GetInvalidFileNameChars\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n<p>-or-</p>\\n<p>\\n<em>path</em> refers to an invalid device.</p>\\n<p>-or-</p>\\n<p>\\n<em>mode</em> is <xref href=\\\"System.IO.FileMode.Append\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>path</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>\\n<em>mode</em> is <xref href=\\\"System.IO.FileMode.Create\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.IO.FileMode.CreateNew\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <xref href=\\\"System.IO.FileMode.Truncate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<em>mode</em> is <xref href=\\\"System.IO.FileMode.OpenOrCreate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the file on disk does not exist.</p>\\n<p>-or-</p>\\n<p>An I/O error occurred.</p>\\n\"\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: \"\\n<p>\\n<em>path</em> exceeds the maximum length defined by the operating system. In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters. </p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permissions for the file.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: MemoryMappedFile.CreateFromFile(String, FileMode)\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String)\n  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String)\n  id: CreateFromFile(System.String,System.IO.FileMode,System.String)\n  parent: System.IO.MemoryMappedFiles.MemoryMappedFile\n  langs:\n  - csharp\n  - vb\n  name: CreateFromFile(String, FileMode, String)\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String, System.IO.FileMode, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateFromFile\n    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n    startLine: 30\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  namespace: System.IO.MemoryMappedFiles\n  summary: \"\\n<p>Creates a memory-mapped file that has the specified access mode and name from a file on disk.</p>\\n\"\n  syntax:\n    content: public static MemoryMappedFile CreateFromFile(string path, FileMode mode, string mapName)\n    content.vb: Public Shared Function CreateFromFile(path As String, mode As FileMode, mapName As String) As MemoryMappedFile\n    parameters:\n    - id: path\n      type: System.String\n      description: \"\\n<p>The path to the file to map.</p>\\n\"\n    - id: mode\n      type: System.IO.FileMode\n      description: \"\\n<p>Access mode; must be <xref href=\\\"System.IO.FileMode.Open\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: mapName\n      type: System.String\n      description: \"\\n<p>A name to assign to the memory-mapped file. </p>\\n\"\n    return:\n      type: System.IO.MemoryMappedFiles.MemoryMappedFile\n      description: \"\\n<p>A memory-mapped file that has the specified name and access mode.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>path</em> is an empty string, contains only white space, or has one or more invalid characters, as defined by the <xref href=\\\"System.IO.Path.GetInvalidFileNameChars\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n<p>-or-</p>\\n<p>\\n<em>path</em> refers to an invalid device.</p>\\n<p>-or-</p>\\n<p>\\n<em>mapName</em> is an empty string.</p>\\n<p>-or-</p>\\n<p>\\n<em>mode</em> is <xref href=\\\"System.IO.FileMode.Append\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>path</em> or <em>mapName</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>\\n<em>mode</em> is <xref href=\\\"System.IO.FileMode.Create\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.IO.FileMode.CreateNew\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <xref href=\\\"System.IO.FileMode.Truncate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>\\n<em>mode</em> is <xref href=\\\"System.IO.FileMode.OpenOrCreate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the file on disk does not exist.</p>\\n<p>-or-</p>\\n<p>An I/O error occurred.</p>\\n\"\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: \"\\n<p>\\n<em>path</em> exceeds the maximum length defined by the operating system. In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters.</p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permissions for the file.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: MemoryMappedFile.CreateFromFile(String, FileMode, String)\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64)\n  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64)\n  id: CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64)\n  parent: System.IO.MemoryMappedFiles.MemoryMappedFile\n  langs:\n  - csharp\n  - vb\n  name: CreateFromFile(String, FileMode, String, Int64)\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String, System.IO.FileMode, System.String, System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateFromFile\n    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n    startLine: 31\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  namespace: System.IO.MemoryMappedFiles\n  summary: \"\\n<p>Creates a memory-mapped file that has the specified access mode, name, and capacity from a file on disk.</p>\\n\"\n  syntax:\n    content: public static MemoryMappedFile CreateFromFile(string path, FileMode mode, string mapName, long capacity)\n    content.vb: Public Shared Function CreateFromFile(path As String, mode As FileMode, mapName As String, capacity As Long) As MemoryMappedFile\n    parameters:\n    - id: path\n      type: System.String\n      description: \"\\n<p>The path to the file to map.</p>\\n\"\n    - id: mode\n      type: System.IO.FileMode\n      description: \"\\n<p>Access mode; can be any of the <xref href=\\\"System.IO.FileMode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration values except <xref href=\\\"System.IO.FileMode.Append\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: mapName\n      type: System.String\n      description: \"\\n<p>A name to assign to the memory-mapped file. </p>\\n\"\n    - id: capacity\n      type: System.Int64\n      description: \"\\n<p>The maximum size, in bytes, to allocate to the memory-mapped file. Specify 0 to set the capacity to the size of the file on disk.</p>\\n\"\n    return:\n      type: System.IO.MemoryMappedFiles.MemoryMappedFile\n      description: \"\\n<p>A memory-mapped file that has the specified characteristics.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>path</em> is an empty string, contains only white space, or has one or more invalid characters, as defined by the <xref href=\\\"System.IO.Path.GetInvalidFileNameChars\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n<p>-or-</p>\\n<p>\\n<em>path</em> refers to an invalid device.</p>\\n<p>-or-</p>\\n<p>\\n<em>mapName</em> is an empty string.</p>\\n<p>-or-</p>\\n<p>\\n<em>mode</em> is <xref href=\\\"System.IO.FileMode.Append\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>path</em> or <em>mapName</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>capacity</em> is greater than the size of the logical address space.</p>\\n<p>-or-</p>\\n<p>\\n<em>capacity</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>capacity</em> is less than the file size (but not zero).</p>\\n<p>-or-</p>\\n<p>\\n<em>capacity</em> is zero, and the size of the file on disk is also zero.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurred.</p>\\n\"\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: \"\\n<p>\\n<em>path</em> exceeds the maximum length defined by the operating system. In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters.</p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permissions for the file.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: MemoryMappedFile.CreateFromFile(String, FileMode, String, Int64)\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)\n  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)\n  id: CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)\n  parent: System.IO.MemoryMappedFiles.MemoryMappedFile\n  langs:\n  - csharp\n  - vb\n  name: CreateFromFile(String, FileMode, String, Int64, MemoryMappedFileAccess)\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String, System.IO.FileMode, System.String, System.Int64, System.IO.MemoryMappedFiles.MemoryMappedFileAccess)\n  type: Method\n  source:\n    remote:\n      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateFromFile\n    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n    startLine: 32\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  namespace: System.IO.MemoryMappedFiles\n  summary: \"\\n<p>Creates a memory-mapped file that has the specified access mode, name, capacity, and access type from a file on disk.</p>\\n\"\n  syntax:\n    content: public static MemoryMappedFile CreateFromFile(string path, FileMode mode, string mapName, long capacity, MemoryMappedFileAccess access)\n    content.vb: Public Shared Function CreateFromFile(path As String, mode As FileMode, mapName As String, capacity As Long, access As MemoryMappedFileAccess) As MemoryMappedFile\n    parameters:\n    - id: path\n      type: System.String\n      description: \"\\n<p>The path to the file to map.</p>\\n\"\n    - id: mode\n      type: System.IO.FileMode\n      description: \"\\n<p>Access mode; can be any of the <xref href=\\\"System.IO.FileMode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration values except <xref href=\\\"System.IO.FileMode.Append\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: mapName\n      type: System.String\n      description: \"\\n<p>A name to assign to the memory-mapped file. </p>\\n\"\n    - id: capacity\n      type: System.Int64\n      description: \"\\n<p>The maximum size, in bytes, to allocate to the memory-mapped file. Specify 0 to set the capacity to the size of the file on disk.</p>\\n\"\n    - id: access\n      type: System.IO.MemoryMappedFiles.MemoryMappedFileAccess\n      description: \"\\n<p>One of the enumeration values that specifies the type of access allowed to the memory-mapped file.</p>\\n\"\n    return:\n      type: System.IO.MemoryMappedFiles.MemoryMappedFile\n      description: \"\\n<p>A memory-mapped file that has the specified characteristics.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>mapName</em> is an empty string.</p>\\n<p>-or-</p>\\n<p>\\n<em>access</em> is not an allowed value.</p>\\n<p>-or-</p>\\n<p>\\n<em>path</em> specifies an empty file.</p>\\n<p>-or-</p>\\n<p>\\n<em>access</em> is specified as <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and capacity is greater than the size of the file indicated by <em>path</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>mode</em> is <xref href=\\\"System.IO.FileMode.Append\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>path</em> or <em>mapName</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>capacity</em> is greater than the size of the logical address space.</p>\\n<p>-or-</p>\\n<p>\\n<em>capacity</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>capacity</em> is less than the file size (but not zero).</p>\\n<p>-or-</p>\\n<p>\\n<em>capacity</em> is zero, and the size of the file on disk is also zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>access</em> is not a defined <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n<p>-or-</p>\\n<p>The size of the file indicated by <em>path</em> is greater than <em>capacity</em>.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>-or-</p>\\n<p>An I/O error occurred.</p>\\n\"\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: \"\\n<p>\\n<em>path</em> exceeds the maximum length defined by the operating system. In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters.</p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permissions for the file.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: MemoryMappedFile.CreateFromFile(String, FileMode, String, Int64, MemoryMappedFileAccess)\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64)\n  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64)\n  id: CreateNew(System.String,System.Int64)\n  parent: System.IO.MemoryMappedFiles.MemoryMappedFile\n  langs:\n  - csharp\n  - vb\n  name: CreateNew(String, Int64)\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String, System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateNew\n    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n    startLine: 33\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  namespace: System.IO.MemoryMappedFiles\n  summary: \"\\n<p>Creates a memory-mapped file that has the specified capacity in system memory. </p>\\n\"\n  syntax:\n    content: public static MemoryMappedFile CreateNew(string mapName, long capacity)\n    content.vb: Public Shared Function CreateNew(mapName As String, capacity As Long) As MemoryMappedFile\n    parameters:\n    - id: mapName\n      type: System.String\n      description: \"\\n<p>A name to assign to the memory-mapped file.</p>\\n\"\n    - id: capacity\n      type: System.Int64\n      description: \"\\n<p>The maximum size, in bytes, to allocate to the memory-mapped file.</p>\\n\"\n    return:\n      type: System.IO.MemoryMappedFiles.MemoryMappedFile\n      description: \"\\n<p>A memory-mapped file that has the specified name and capacity.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>mapName</em> is an empty string. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>mapName</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>capacity</em> is less than or equal to zero.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: MemoryMappedFile.CreateNew(String, Int64)\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)\n  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)\n  id: CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)\n  parent: System.IO.MemoryMappedFiles.MemoryMappedFile\n  langs:\n  - csharp\n  - vb\n  name: CreateNew(String, Int64, MemoryMappedFileAccess)\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String, System.Int64, System.IO.MemoryMappedFiles.MemoryMappedFileAccess)\n  type: Method\n  source:\n    remote:\n      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateNew\n    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n    startLine: 34\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  namespace: System.IO.MemoryMappedFiles\n  summary: \"\\n<p>Creates a memory-mapped file that has the specified capacity and access type in system memory. </p>\\n\"\n  syntax:\n    content: public static MemoryMappedFile CreateNew(string mapName, long capacity, MemoryMappedFileAccess access)\n    content.vb: Public Shared Function CreateNew(mapName As String, capacity As Long, access As MemoryMappedFileAccess) As MemoryMappedFile\n    parameters:\n    - id: mapName\n      type: System.String\n      description: \"\\n<p>A name to assign to the memory-mapped file.</p>\\n\"\n    - id: capacity\n      type: System.Int64\n      description: \"\\n<p>The maximum size, in bytes, to allocate to the memory-mapped file.</p>\\n\"\n    - id: access\n      type: System.IO.MemoryMappedFiles.MemoryMappedFileAccess\n      description: \"\\n<p>One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.IO.MemoryMappedFiles.MemoryMappedFile\n      description: \"\\n<p>A memory-mapped file that has the specified characteristics.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>mapName</em> is an empty string.</p>\\n<p>-or-</p>\\n<p>\\n<em>access</em> is set to write-only with the <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration value. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>mapName</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>capacity</em> is less than or equal to zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>access</em> is not a valid <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: MemoryMappedFile.CreateNew(String, Int64, MemoryMappedFileAccess)\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)\n  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)\n  id: CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)\n  parent: System.IO.MemoryMappedFiles.MemoryMappedFile\n  langs:\n  - csharp\n  - vb\n  name: CreateNew(String, Int64, MemoryMappedFileAccess, MemoryMappedFileOptions, HandleInheritability)\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String, System.Int64, System.IO.MemoryMappedFiles.MemoryMappedFileAccess, System.IO.MemoryMappedFiles.MemoryMappedFileOptions, System.IO.HandleInheritability)\n  type: Method\n  source:\n    remote:\n      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateNew\n    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n    startLine: 35\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  namespace: System.IO.MemoryMappedFiles\n  summary: \"\\n<p>Creates a memory-mapped file that has the specified name, capacity, access type, memory allocation options and inheritability.</p>\\n\"\n  syntax:\n    content: public static MemoryMappedFile CreateNew(string mapName, long capacity, MemoryMappedFileAccess access, MemoryMappedFileOptions options, HandleInheritability inheritability)\n    content.vb: Public Shared Function CreateNew(mapName As String, capacity As Long, access As MemoryMappedFileAccess, options As MemoryMappedFileOptions, inheritability As HandleInheritability) As MemoryMappedFile\n    parameters:\n    - id: mapName\n      type: System.String\n      description: \"\\n<p>A name to assign to the memory-mapped file.</p>\\n\"\n    - id: capacity\n      type: System.Int64\n      description: \"\\n<p>The maximum size, in bytes, to allocate to the memory-mapped file.</p>\\n\"\n    - id: access\n      type: System.IO.MemoryMappedFiles.MemoryMappedFileAccess\n      description: \"\\n<p>One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: options\n      type: System.IO.MemoryMappedFiles.MemoryMappedFileOptions\n      description: \"\\n<p>A bitwise combination of enumeration values that specifies memory allocation options for the memory-mapped file.</p>\\n\"\n    - id: inheritability\n      type: System.IO.HandleInheritability\n      description: \"\\n<p>A value that specifies whether a handle to the memory-mapped file can be inherited by a child process. The default is <xref href=\\\"System.IO.HandleInheritability.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.IO.MemoryMappedFiles.MemoryMappedFile\n      description: \"\\n<p>A memory-mapped file that has the specified characteristics.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>mapName</em> is an empty string.</p>\\n<p>-or-</p>\\n<p>\\n<em>access</em> is set to write-only with the <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration value. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>mapName</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>capacity</em> is less than or equal to zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>access</em> is not a valid <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration value.</p>\\n<p>-or-</p>\\n<p>\\n<em>inheritability</em> is not a valid <xref href=\\\"System.IO.HandleInheritability\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: MemoryMappedFile.CreateNew(String, Int64, MemoryMappedFileAccess, MemoryMappedFileOptions, HandleInheritability)\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64)\n  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64)\n  id: CreateOrOpen(System.String,System.Int64)\n  parent: System.IO.MemoryMappedFiles.MemoryMappedFile\n  langs:\n  - csharp\n  - vb\n  name: CreateOrOpen(String, Int64)\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String, System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateOrOpen\n    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n    startLine: 36\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  namespace: System.IO.MemoryMappedFiles\n  summary: \"\\n<p>Creates or opens a memory-mapped file that has the specified capacity in system memory.</p>\\n\"\n  syntax:\n    content: public static MemoryMappedFile CreateOrOpen(string mapName, long capacity)\n    content.vb: Public Shared Function CreateOrOpen(mapName As String, capacity As Long) As MemoryMappedFile\n    parameters:\n    - id: mapName\n      type: System.String\n      description: \"\\n<p>A name to assign to the memory-mapped file.</p>\\n\"\n    - id: capacity\n      type: System.Int64\n      description: \"\\n<p>The maximum size, in bytes, to allocate to the memory-mapped file.</p>\\n\"\n    return:\n      type: System.IO.MemoryMappedFiles.MemoryMappedFile\n      description: \"\\n<p>A memory-mapped file that has the specified name and size.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>mapName</em> is an empty string.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>mapName</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>capacity</em> is greater than the size of the logical address space.</p>\\n<p>-or-</p>\\n<p>\\n<em>capacity</em> is less than or equal to zero.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: MemoryMappedFile.CreateOrOpen(String, Int64)\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)\n  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)\n  id: CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)\n  parent: System.IO.MemoryMappedFiles.MemoryMappedFile\n  langs:\n  - csharp\n  - vb\n  name: CreateOrOpen(String, Int64, MemoryMappedFileAccess)\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String, System.Int64, System.IO.MemoryMappedFiles.MemoryMappedFileAccess)\n  type: Method\n  source:\n    remote:\n      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateOrOpen\n    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n    startLine: 37\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  namespace: System.IO.MemoryMappedFiles\n  summary: \"\\n<p>Creates or opens a memory-mapped file that has the specified capacity and access type in system memory. </p>\\n\"\n  syntax:\n    content: public static MemoryMappedFile CreateOrOpen(string mapName, long capacity, MemoryMappedFileAccess access)\n    content.vb: Public Shared Function CreateOrOpen(mapName As String, capacity As Long, access As MemoryMappedFileAccess) As MemoryMappedFile\n    parameters:\n    - id: mapName\n      type: System.String\n      description: \"\\n<p>A name to assign to the memory-mapped file.</p>\\n\"\n    - id: capacity\n      type: System.Int64\n      description: \"\\n<p>The maximum size, in bytes, to allocate to the memory-mapped file.</p>\\n\"\n    - id: access\n      type: System.IO.MemoryMappedFiles.MemoryMappedFileAccess\n      description: \"\\n<p>One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.IO.MemoryMappedFiles.MemoryMappedFile\n      description: \"\\n<p>A memory-mapped file that has the specified characteristics.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>mapName</em> is an empty string.</p>\\n<p>-or-</p>\\n<p>\\n<em>access</em> is set to write-only with the <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration value.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>mapName</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>capacity</em> is greater than the size of the logical address space.</p>\\n<p>-or-</p>\\n<p>\\n<em>capacity</em> is less than or equal to zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>access</em> is not a valid <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration value.</p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>The operating system denied the specified access to the file; for example, access is set to <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, but the file or directory is read-only. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: MemoryMappedFile.CreateOrOpen(String, Int64, MemoryMappedFileAccess)\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)\n  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)\n  id: CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)\n  parent: System.IO.MemoryMappedFiles.MemoryMappedFile\n  langs:\n  - csharp\n  - vb\n  name: CreateOrOpen(String, Int64, MemoryMappedFileAccess, MemoryMappedFileOptions, HandleInheritability)\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String, System.Int64, System.IO.MemoryMappedFiles.MemoryMappedFileAccess, System.IO.MemoryMappedFiles.MemoryMappedFileOptions, System.IO.HandleInheritability)\n  type: Method\n  source:\n    remote:\n      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateOrOpen\n    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n    startLine: 38\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  namespace: System.IO.MemoryMappedFiles\n  summary: \"\\n<p>Creates a new empty memory mapped file or opens an existing memory mapped file if one exists with the same name. If opening an existing file, the capacity, options, and memory arguments will be ignored. </p>\\n\"\n  syntax:\n    content: public static MemoryMappedFile CreateOrOpen(string mapName, long capacity, MemoryMappedFileAccess access, MemoryMappedFileOptions options, HandleInheritability inheritability)\n    content.vb: Public Shared Function CreateOrOpen(mapName As String, capacity As Long, access As MemoryMappedFileAccess, options As MemoryMappedFileOptions, inheritability As HandleInheritability) As MemoryMappedFile\n    parameters:\n    - id: mapName\n      type: System.String\n      description: \"\\n<p>A name to assign to the memory-mapped file.</p>\\n\"\n    - id: capacity\n      type: System.Int64\n      description: \"\\n<p>The maximum size, in bytes, to allocate to the memory-mapped file.</p>\\n\"\n    - id: access\n      type: System.IO.MemoryMappedFiles.MemoryMappedFileAccess\n      description: \"\\n<p>One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: options\n      type: System.IO.MemoryMappedFiles.MemoryMappedFileOptions\n      description: \"\\n<p>A bitwise combination of values that indicate the memory allocation options to apply to the file.</p>\\n\"\n    - id: inheritability\n      type: System.IO.HandleInheritability\n      description: \"\\n<p>A value that specifies whether a handle to the memory-mapped file can be inherited by a child process. The default is <xref href=\\\"System.IO.HandleInheritability.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.IO.MemoryMappedFiles.MemoryMappedFile\n      description: \"\\n<p>A memory-mapped file that has the specified characteristics.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>mapName</em> is an empty string.</p>\\n<p>-or-</p>\\n<p>\\n<em>access</em> is set to write-only with the <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration value.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>mapName</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>capacity</em> is greater than the size of the logical address space.</p>\\n<p>-or-</p>\\n<p>\\n<em>capacity</em> is less than or equal to zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>access</em> is not a valid <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration value.</p>\\n<p>-or-</p>\\n<p>\\n<em>inheritability</em> is not a valid <xref href=\\\"System.IO.HandleInheritability\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration value.</p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>The operating system denied the specified access to the file; for example, access is set to <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, but the file or directory is read-only. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: MemoryMappedFile.CreateOrOpen(String, Int64, MemoryMappedFileAccess, MemoryMappedFileOptions, HandleInheritability)\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor\n  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor\n  id: CreateViewAccessor\n  parent: System.IO.MemoryMappedFiles.MemoryMappedFile\n  langs:\n  - csharp\n  - vb\n  name: CreateViewAccessor()\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor()\n  type: Method\n  source:\n    remote:\n      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateViewAccessor\n    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n    startLine: 39\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  namespace: System.IO.MemoryMappedFiles\n  summary: \"\\n<p>Creates a <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedViewAccessor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that maps to a view of the memory-mapped file.</p>\\n\"\n  syntax:\n    content: public MemoryMappedViewAccessor CreateViewAccessor()\n    content.vb: Public Function CreateViewAccessor As MemoryMappedViewAccessor\n    return:\n      type: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor\n      description: \"\\n<p>A randomly accessible block of memory.</p>\\n\"\n  exceptions:\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>Access to the memory-mapped file is unauthorized.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: MemoryMappedFile.CreateViewAccessor()\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64)\n  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64)\n  id: CreateViewAccessor(System.Int64,System.Int64)\n  parent: System.IO.MemoryMappedFiles.MemoryMappedFile\n  langs:\n  - csharp\n  - vb\n  name: CreateViewAccessor(Int64, Int64)\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64, System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateViewAccessor\n    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n    startLine: 40\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  namespace: System.IO.MemoryMappedFiles\n  summary: \"\\n<p>Creates a <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedViewAccessor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that maps to a view of the memory-mapped file, and that has the specified offset and size.</p>\\n\"\n  syntax:\n    content: public MemoryMappedViewAccessor CreateViewAccessor(long offset, long size)\n    content.vb: Public Function CreateViewAccessor(offset As Long, size As Long) As MemoryMappedViewAccessor\n    parameters:\n    - id: offset\n      type: System.Int64\n      description: \"\\n<p>The byte at which to start the view.</p>\\n\"\n    - id: size\n      type: System.Int64\n      description: \"\\n<p>The size of the view. Specify 0 (zero) to create a view that starts at <em>offset</em> and ends approximately at the end of the memory-mapped file.</p>\\n\"\n    return:\n      type: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor\n      description: \"\\n<p>A randomly accessible block of memory.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> or <em>size</em> is a negative value.</p>\\n<p>-or-</p>\\n<p>\\n<em>size</em> is greater than the logical address space.</p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>Access to the memory-mapped file is unauthorized.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurred.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: MemoryMappedFile.CreateViewAccessor(Int64, Int64)\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)\n  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)\n  id: CreateViewAccessor(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)\n  parent: System.IO.MemoryMappedFiles.MemoryMappedFile\n  langs:\n  - csharp\n  - vb\n  name: CreateViewAccessor(Int64, Int64, MemoryMappedFileAccess)\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64, System.Int64, System.IO.MemoryMappedFiles.MemoryMappedFileAccess)\n  type: Method\n  source:\n    remote:\n      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateViewAccessor\n    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n    startLine: 41\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  namespace: System.IO.MemoryMappedFiles\n  summary: \"\\n<p>Creates a <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedViewAccessor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that maps to a view of the memory-mapped file, and that has the specified offset, size, and access restrictions.</p>\\n\"\n  syntax:\n    content: public MemoryMappedViewAccessor CreateViewAccessor(long offset, long size, MemoryMappedFileAccess access)\n    content.vb: Public Function CreateViewAccessor(offset As Long, size As Long, access As MemoryMappedFileAccess) As MemoryMappedViewAccessor\n    parameters:\n    - id: offset\n      type: System.Int64\n      description: \"\\n<p>The byte at which to start the view.</p>\\n\"\n    - id: size\n      type: System.Int64\n      description: \"\\n<p>The size of the view. Specify 0 (zero) to create a view that starts at <em>offset</em> and ends approximately at the end of the memory-mapped file.</p>\\n\"\n    - id: access\n      type: System.IO.MemoryMappedFiles.MemoryMappedFileAccess\n      description: \"\\n<p>One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor\n      description: \"\\n<p>A randomly accessible block of memory.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> or <em>size</em> is a negative value.</p>\\n<p>-or-</p>\\n<p>\\n<em>size</em> is greater than the logical address space.</p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>\\n<em>access</em> is invalid for the memory-mapped file.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurred.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: MemoryMappedFile.CreateViewAccessor(Int64, Int64, MemoryMappedFileAccess)\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream\n  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream\n  id: CreateViewStream\n  parent: System.IO.MemoryMappedFiles.MemoryMappedFile\n  langs:\n  - csharp\n  - vb\n  name: CreateViewStream()\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream()\n  type: Method\n  source:\n    remote:\n      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateViewStream\n    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n    startLine: 42\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  namespace: System.IO.MemoryMappedFiles\n  summary: \"\\n<p>Creates a stream that maps to a view of the memory-mapped file.  </p>\\n\"\n  syntax:\n    content: public MemoryMappedViewStream CreateViewStream()\n    content.vb: Public Function CreateViewStream As MemoryMappedViewStream\n    return:\n      type: System.IO.MemoryMappedFiles.MemoryMappedViewStream\n      description: \"\\n<p>A stream of memory.</p>\\n\"\n  exceptions:\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>Access to the memory-mapped file is unauthorized.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: MemoryMappedFile.CreateViewStream()\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64)\n  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64)\n  id: CreateViewStream(System.Int64,System.Int64)\n  parent: System.IO.MemoryMappedFiles.MemoryMappedFile\n  langs:\n  - csharp\n  - vb\n  name: CreateViewStream(Int64, Int64)\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64, System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateViewStream\n    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n    startLine: 43\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  namespace: System.IO.MemoryMappedFiles\n  summary: \"\\n<p>Creates a stream that maps to a view of the memory-mapped file, and that has the specified offset and size.</p>\\n\"\n  syntax:\n    content: public MemoryMappedViewStream CreateViewStream(long offset, long size)\n    content.vb: Public Function CreateViewStream(offset As Long, size As Long) As MemoryMappedViewStream\n    parameters:\n    - id: offset\n      type: System.Int64\n      description: \"\\n<p>The byte at which to start the view.</p>\\n\"\n    - id: size\n      type: System.Int64\n      description: \"\\n<p>The size of the view. Specify 0 (zero) to create a view that starts at <em>offset</em> and ends approximately at the end of the memory-mapped file.</p>\\n\"\n    return:\n      type: System.IO.MemoryMappedFiles.MemoryMappedViewStream\n      description: \"\\n<p>A stream of memory that has the specified offset and size.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> or <em>size</em> is a negative value.</p>\\n<p>-or-</p>\\n<p>\\n<em>size</em> is greater than the logical address space.</p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>Access to the memory-mapped file is unauthorized.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>\\n<em>size</em> is greater than the total virtual memory.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: MemoryMappedFile.CreateViewStream(Int64, Int64)\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)\n  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)\n  id: CreateViewStream(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)\n  parent: System.IO.MemoryMappedFiles.MemoryMappedFile\n  langs:\n  - csharp\n  - vb\n  name: CreateViewStream(Int64, Int64, MemoryMappedFileAccess)\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64, System.Int64, System.IO.MemoryMappedFiles.MemoryMappedFileAccess)\n  type: Method\n  source:\n    remote:\n      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateViewStream\n    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n    startLine: 44\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  namespace: System.IO.MemoryMappedFiles\n  summary: \"\\n<p>Creates a stream that maps to a view of the memory-mapped file, and that has the specified offset, size, and access type.</p>\\n\"\n  syntax:\n    content: public MemoryMappedViewStream CreateViewStream(long offset, long size, MemoryMappedFileAccess access)\n    content.vb: Public Function CreateViewStream(offset As Long, size As Long, access As MemoryMappedFileAccess) As MemoryMappedViewStream\n    parameters:\n    - id: offset\n      type: System.Int64\n      description: \"\\n<p>The byte at which to start the view.</p>\\n\"\n    - id: size\n      type: System.Int64\n      description: \"\\n<p>The size of the view. Specify 0 (zero) to create a view that starts at <em>offset</em> and ends approximately at the end of the memory-mapped file.</p>\\n\"\n    - id: access\n      type: System.IO.MemoryMappedFiles.MemoryMappedFileAccess\n      description: \"\\n<p>One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.IO.MemoryMappedFiles.MemoryMappedViewStream\n      description: \"\\n<p>A stream of memory that has the specified characteristics.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> or <em>size</em> is a negative value.</p>\\n<p>-or-</p>\\n<p>\\n<em>size</em> is greater than the logical address space.</p>\\n<p>-or-</p>\\n<p>\\n<em>access </em>is not a valid <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration value.</p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>\\n<em>access</em> is invalid for the memory-mapped file.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>\\n<em>size</em> is greater than the total virtual memory.</p>\\n<p>-or-</p>\\n<p>\\n<em>access</em> is invalid for the memory-mapped file.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: MemoryMappedFile.CreateViewStream(Int64, Int64, MemoryMappedFileAccess)\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose\n  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose\n  id: Dispose\n  parent: System.IO.MemoryMappedFiles.MemoryMappedFile\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n    startLine: 45\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  namespace: System.IO.MemoryMappedFiles\n  summary: \"\\n<p>Releases all resources used by the <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFile\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: MemoryMappedFile.Dispose()\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose(System.Boolean)\n  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.IO.MemoryMappedFiles.MemoryMappedFile\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n    startLine: 46\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  namespace: System.IO.MemoryMappedFiles\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFile\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and optionally releases the managed resources. </p>\\n\"\n  syntax:\n    content: protected virtual void Dispose(bool disposing)\n    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: MemoryMappedFile.Dispose(Boolean)\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String)\n  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String)\n  id: OpenExisting(System.String)\n  parent: System.IO.MemoryMappedFiles.MemoryMappedFile\n  langs:\n  - csharp\n  - vb\n  name: OpenExisting(String)\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OpenExisting\n    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n    startLine: 47\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  namespace: System.IO.MemoryMappedFiles\n  summary: \"\\n<p>Opens an existing memory-mapped file that has the specified name in system memory.</p>\\n\"\n  syntax:\n    content: public static MemoryMappedFile OpenExisting(string mapName)\n    content.vb: Public Shared Function OpenExisting(mapName As String) As MemoryMappedFile\n    parameters:\n    - id: mapName\n      type: System.String\n      description: \"\\n<p>The name of the memory-mapped file to open.</p>\\n\"\n    return:\n      type: System.IO.MemoryMappedFiles.MemoryMappedFile\n      description: \"\\n<p>A memory-mapped file that has the specified name. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>mapName</em> is an empty string.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>mapName</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: \"\\n<p>The file specified for <em>mapName</em> does not exist.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: MemoryMappedFile.OpenExisting(String)\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights)\n  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights)\n  id: OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights)\n  parent: System.IO.MemoryMappedFiles.MemoryMappedFile\n  langs:\n  - csharp\n  - vb\n  name: OpenExisting(String, MemoryMappedFileRights)\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String, System.IO.MemoryMappedFiles.MemoryMappedFileRights)\n  type: Method\n  source:\n    remote:\n      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OpenExisting\n    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n    startLine: 48\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  namespace: System.IO.MemoryMappedFiles\n  summary: \"\\n<p>Opens an existing memory-mapped file that has the specified name and access rights in system memory.</p>\\n\"\n  syntax:\n    content: public static MemoryMappedFile OpenExisting(string mapName, MemoryMappedFileRights desiredAccessRights)\n    content.vb: Public Shared Function OpenExisting(mapName As String, desiredAccessRights As MemoryMappedFileRights) As MemoryMappedFile\n    parameters:\n    - id: mapName\n      type: System.String\n      description: \"\\n<p>The name of the memory-mapped file to open.</p>\\n\"\n    - id: desiredAccessRights\n      type: System.IO.MemoryMappedFiles.MemoryMappedFileRights\n      description: \"\\n<p>One of the enumeration values that specifies the access rights to apply to the memory-mapped file.</p>\\n\"\n    return:\n      type: System.IO.MemoryMappedFiles.MemoryMappedFile\n      description: \"\\n<p>A memory-mapped file that has the specified characteristics.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>mapName</em> is an empty string.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>mapName</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>desiredAccessRights</em> is not a valid <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileRights\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration value.</p>\\n\"\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: \"\\n<p>The file specified for <em>mapName</em> does not exist.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: MemoryMappedFile.OpenExisting(String, MemoryMappedFileRights)\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights,System.IO.HandleInheritability)\n  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights,System.IO.HandleInheritability)\n  id: OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights,System.IO.HandleInheritability)\n  parent: System.IO.MemoryMappedFiles.MemoryMappedFile\n  langs:\n  - csharp\n  - vb\n  name: OpenExisting(String, MemoryMappedFileRights, HandleInheritability)\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String, System.IO.MemoryMappedFiles.MemoryMappedFileRights, System.IO.HandleInheritability)\n  type: Method\n  source:\n    remote:\n      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OpenExisting\n    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs\n    startLine: 49\n  assemblies:\n  - System.IO.MemoryMappedFiles\n  namespace: System.IO.MemoryMappedFiles\n  summary: \"\\n<p>Opens an existing memory-mapped file that has the specified name, access rights, and inheritability in system memory.</p>\\n\"\n  syntax:\n    content: public static MemoryMappedFile OpenExisting(string mapName, MemoryMappedFileRights desiredAccessRights, HandleInheritability inheritability)\n    content.vb: Public Shared Function OpenExisting(mapName As String, desiredAccessRights As MemoryMappedFileRights, inheritability As HandleInheritability) As MemoryMappedFile\n    parameters:\n    - id: mapName\n      type: System.String\n      description: \"\\n<p>The name of the memory-mapped file to open.</p>\\n\"\n    - id: desiredAccessRights\n      type: System.IO.MemoryMappedFiles.MemoryMappedFileRights\n      description: \"\\n<p>One of the enumeration values that specifies the access rights to apply to the memory-mapped file.</p>\\n\"\n    - id: inheritability\n      type: System.IO.HandleInheritability\n      description: \"\\n<p>One of the enumeration values that specifies whether a handle to the memory-mapped file can be inherited by a child process. The default is <xref href=\\\"System.IO.HandleInheritability.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.IO.MemoryMappedFiles.MemoryMappedFile\n      description: \"\\n<p>A memory-mapped file that has the specified characteristics.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>mapName</em> is an empty string.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>mapName</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>desiredAccessRights</em> is not a valid <xref href=\\\"System.IO.MemoryMappedFiles.MemoryMappedFileRights\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration value.</p>\\n<p>-or-</p>\\n<p>\\n<em>inheritability</em> is not a valid <xref href=\\\"System.IO.HandleInheritability\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration value.</p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>The requested access is invalid for the memory-mapped file.</p>\\n\"\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: \"\\n<p>The file specified for <em>mapName</em> does not exist.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: MemoryMappedFile.OpenExisting(String, MemoryMappedFileRights, HandleInheritability)\nreferences:\n- uid: System.IO.MemoryMappedFiles\n  isExternal: false\n  name: System.IO.MemoryMappedFiles\n  fullName: System.IO.MemoryMappedFiles\n  commentId: N:System.IO.MemoryMappedFiles\n  nameWithType: System.IO.MemoryMappedFiles\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle\n  parent: Microsoft.Win32.SafeHandles\n  isExternal: false\n  name: SafeMemoryMappedFileHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle\n  commentId: T:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle\n  nameWithType: SafeMemoryMappedFileHandle\n- uid: Microsoft.Win32.SafeHandles\n  isExternal: false\n  name: Microsoft.Win32.SafeHandles\n  fullName: Microsoft.Win32.SafeHandles\n  commentId: N:Microsoft.Win32.SafeHandles\n  nameWithType: Microsoft.Win32.SafeHandles\n- uid: System.IO.FileStream\n  parent: System.IO\n  isExternal: false\n  name: FileStream\n  fullName: System.IO.FileStream\n  commentId: T:System.IO.FileStream\n  nameWithType: FileStream\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  commentId: T:System.Int64\n  nameWithType: Int64\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFileAccess\n  parent: System.IO.MemoryMappedFiles\n  isExternal: false\n  name: MemoryMappedFileAccess\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFileAccess\n  commentId: T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess\n  nameWithType: MemoryMappedFileAccess\n- uid: System.IO.HandleInheritability\n  parent: System.IO\n  isExternal: false\n  name: HandleInheritability\n  fullName: System.IO.HandleInheritability\n  commentId: T:System.IO.HandleInheritability\n  nameWithType: HandleInheritability\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFile\n  parent: System.IO.MemoryMappedFiles\n  isExternal: false\n  name: MemoryMappedFile\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile\n  commentId: T:System.IO.MemoryMappedFiles.MemoryMappedFile\n  nameWithType: MemoryMappedFile\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  commentId: N:System.IO\n  nameWithType: System.IO\n- uid: System.IO.FileMode\n  parent: System.IO\n  isExternal: false\n  name: FileMode\n  fullName: System.IO.FileMode\n  commentId: T:System.IO.FileMode\n  nameWithType: FileMode\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFileOptions\n  parent: System.IO.MemoryMappedFiles\n  isExternal: false\n  name: MemoryMappedFileOptions\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFileOptions\n  commentId: T:System.IO.MemoryMappedFiles.MemoryMappedFileOptions\n  nameWithType: MemoryMappedFileOptions\n- uid: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor\n  parent: System.IO.MemoryMappedFiles\n  isExternal: false\n  name: MemoryMappedViewAccessor\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor\n  commentId: T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor\n  nameWithType: MemoryMappedViewAccessor\n- uid: System.IO.MemoryMappedFiles.MemoryMappedViewStream\n  parent: System.IO.MemoryMappedFiles\n  isExternal: false\n  name: MemoryMappedViewStream\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedViewStream\n  commentId: T:System.IO.MemoryMappedFiles.MemoryMappedViewStream\n  nameWithType: MemoryMappedViewStream\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.IDisposable.Dispose\n  nameWithType: IDisposable.Dispose()\n- uid: System.IO.MemoryMappedFiles.MemoryMappedFileRights\n  parent: System.IO.MemoryMappedFiles\n  isExternal: false\n  name: MemoryMappedFileRights\n  fullName: System.IO.MemoryMappedFiles.MemoryMappedFileRights\n  commentId: T:System.IO.MemoryMappedFiles.MemoryMappedFileRights\n  nameWithType: MemoryMappedFileRights\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  fullName: System.IO.IOException\n  nameWithType: IOException\n  commentId: T:System.IO.IOException\n- uid: System.IO.PathTooLongException\n  isExternal: false\n  name: PathTooLongException\n  fullName: System.IO.PathTooLongException\n  nameWithType: PathTooLongException\n  commentId: T:System.IO.PathTooLongException\n- uid: System.Security.SecurityException\n  isExternal: false\n  name: SecurityException\n  fullName: System.Security.SecurityException\n  nameWithType: SecurityException\n  commentId: T:System.Security.SecurityException\n- uid: System.UnauthorizedAccessException\n  parent: System\n  isExternal: false\n  name: UnauthorizedAccessException\n  fullName: System.UnauthorizedAccessException\n  nameWithType: UnauthorizedAccessException\n  commentId: T:System.UnauthorizedAccessException\n- uid: System.IO.FileNotFoundException\n  isExternal: false\n  name: FileNotFoundException\n  fullName: System.IO.FileNotFoundException\n  nameWithType: FileNotFoundException\n  commentId: T:System.IO.FileNotFoundException\n"}