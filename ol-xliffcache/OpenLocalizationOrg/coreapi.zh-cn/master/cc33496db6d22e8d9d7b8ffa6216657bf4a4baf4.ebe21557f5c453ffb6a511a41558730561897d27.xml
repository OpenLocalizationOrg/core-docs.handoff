{"nodes":[{"pos":[423,434],"content":"FileOptions","needQuote":true,"nodes":[{"content":"FileOptions","pos":[0,11]}]},{"pos":[1552,1564],"content":"Asynchronous","needQuote":true,"nodes":[{"content":"Asynchronous","pos":[0,12]}]},{"pos":[2418,2431],"content":"DeleteOnClose","needQuote":true,"nodes":[{"content":"DeleteOnClose","pos":[0,13]}]},{"pos":[3278,3287],"content":"Encrypted","needQuote":true,"nodes":[{"content":"Encrypted","pos":[0,9]}]},{"pos":[4137,4141],"content":"None","needQuote":true,"nodes":[{"content":"None","pos":[0,4]}]},{"pos":[5035,5047],"content":"RandomAccess","needQuote":true,"nodes":[{"content":"RandomAccess","pos":[0,12]}]},{"pos":[5936,5950],"content":"SequentialScan","needQuote":true,"nodes":[{"content":"SequentialScan","pos":[0,14]}]},{"pos":[7013,7025],"content":"WriteThrough","needQuote":true,"nodes":[{"content":"WriteThrough","pos":[0,12]}]},{"pos":[7778,7787],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[7938,7949],"content":"FileOptions","needQuote":true,"nodes":[{"content":"FileOptions","pos":[0,11]}]}],"content":"items:\n- uid: System.IO.FileOptions\n  commentId: T:System.IO.FileOptions\n  id: FileOptions\n  parent: System.IO\n  children:\n  - System.IO.FileOptions.Asynchronous\n  - System.IO.FileOptions.DeleteOnClose\n  - System.IO.FileOptions.Encrypted\n  - System.IO.FileOptions.None\n  - System.IO.FileOptions.RandomAccess\n  - System.IO.FileOptions.SequentialScan\n  - System.IO.FileOptions.WriteThrough\n  langs:\n  - csharp\n  - vb\n  name: FileOptions\n  fullName: System.IO.FileOptions\n  type: Enum\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileOptions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FileOptions\n    path: src/mscorlib/src/System/IO/FileOptions.cs\n    startLine: 24\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Represents advanced options for creating a <xref href=\\\"System.IO.FileStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [Flags]\n\n      [ComVisible(true)]\n\n      public enum FileOptions\n    content.vb: >-\n      <Serializable>\n\n      <Flags>\n\n      <ComVisible(True)>\n\n      Public Enum FileOptions\n  attributes:\n  - type: System.FlagsAttribute\n    ctor: System.FlagsAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - enum\n  modifiers.vb:\n  - Public\n  - Enum\n  nameWithType: FileOptions\n- uid: System.IO.FileOptions.Asynchronous\n  commentId: F:System.IO.FileOptions.Asynchronous\n  id: Asynchronous\n  parent: System.IO.FileOptions\n  langs:\n  - csharp\n  - vb\n  name: Asynchronous\n  fullName: System.IO.FileOptions.Asynchronous\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileOptions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Asynchronous\n    path: src/mscorlib/src/System/IO/FileOptions.cs\n    startLine: 33\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Indicates that a file can be used for asynchronous reading and writing. </p>\\n\"\n  syntax:\n    content: Asynchronous = 1073741824\n    return:\n      type: System.IO.FileOptions\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileOptions.Asynchronous\n- uid: System.IO.FileOptions.DeleteOnClose\n  commentId: F:System.IO.FileOptions.DeleteOnClose\n  id: DeleteOnClose\n  parent: System.IO.FileOptions\n  langs:\n  - csharp\n  - vb\n  name: DeleteOnClose\n  fullName: System.IO.FileOptions.DeleteOnClose\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileOptions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DeleteOnClose\n    path: src/mscorlib/src/System/IO/FileOptions.cs\n    startLine: 36\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Indicates that a file is automatically deleted when it is no longer in use.</p>\\n\"\n  syntax:\n    content: DeleteOnClose = 67108864\n    return:\n      type: System.IO.FileOptions\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileOptions.DeleteOnClose\n- uid: System.IO.FileOptions.Encrypted\n  commentId: F:System.IO.FileOptions.Encrypted\n  id: Encrypted\n  parent: System.IO.FileOptions\n  langs:\n  - csharp\n  - vb\n  name: Encrypted\n  fullName: System.IO.FileOptions.Encrypted\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileOptions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Encrypted\n    path: src/mscorlib/src/System/IO/FileOptions.cs\n    startLine: 43\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Indicates that a file is encrypted and can be decrypted only by using the same user account used for encryption.</p>\\n\"\n  syntax:\n    content: Encrypted = 16384\n    return:\n      type: System.IO.FileOptions\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileOptions.Encrypted\n- uid: System.IO.FileOptions.None\n  commentId: F:System.IO.FileOptions.None\n  id: None\n  parent: System.IO.FileOptions\n  langs:\n  - csharp\n  - vb\n  name: None\n  fullName: System.IO.FileOptions.None\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileOptions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: None\n    path: src/mscorlib/src/System/IO/FileOptions.cs\n    startLine: 31\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Indicates that no additional options should be used when creating a <xref href=\\\"System.IO.FileStream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: None = 0\n    return:\n      type: System.IO.FileOptions\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileOptions.None\n- uid: System.IO.FileOptions.RandomAccess\n  commentId: F:System.IO.FileOptions.RandomAccess\n  id: RandomAccess\n  parent: System.IO.FileOptions\n  langs:\n  - csharp\n  - vb\n  name: RandomAccess\n  fullName: System.IO.FileOptions.RandomAccess\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileOptions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RandomAccess\n    path: src/mscorlib/src/System/IO/FileOptions.cs\n    startLine: 35\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Indicates that the file is accessed randomly. The system can use this as a hint to optimize file caching.</p>\\n\"\n  syntax:\n    content: RandomAccess = 268435456\n    return:\n      type: System.IO.FileOptions\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileOptions.RandomAccess\n- uid: System.IO.FileOptions.SequentialScan\n  commentId: F:System.IO.FileOptions.SequentialScan\n  id: SequentialScan\n  parent: System.IO.FileOptions\n  langs:\n  - csharp\n  - vb\n  name: SequentialScan\n  fullName: System.IO.FileOptions.SequentialScan\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileOptions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SequentialScan\n    path: src/mscorlib/src/System/IO/FileOptions.cs\n    startLine: 37\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Indicates that the file is to be accessed sequentially from beginning to end. The system can use this as a hint to optimize file caching. If an application moves the file pointer for random access, optimum caching may not occur; however, correct operation is still guaranteed. </p>\\n\"\n  syntax:\n    content: SequentialScan = 134217728\n    return:\n      type: System.IO.FileOptions\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileOptions.SequentialScan\n- uid: System.IO.FileOptions.WriteThrough\n  commentId: F:System.IO.FileOptions.WriteThrough\n  id: WriteThrough\n  parent: System.IO.FileOptions\n  langs:\n  - csharp\n  - vb\n  name: WriteThrough\n  fullName: System.IO.FileOptions.WriteThrough\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileOptions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteThrough\n    path: src/mscorlib/src/System/IO/FileOptions.cs\n    startLine: 32\n  assemblies:\n  - System.IO.FileSystem\n  namespace: System.IO\n  summary: \"\\n<p>Indicates that the system should write through any intermediate cache and go directly to disk.</p>\\n\"\n  syntax:\n    content: WriteThrough = -2147483648\n    return:\n      type: System.IO.FileOptions\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileOptions.WriteThrough\nreferences:\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  nameWithType: System.IO\n  commentId: N:System.IO\n- uid: System.IO.FileOptions\n  parent: System.IO\n  isExternal: false\n  name: FileOptions\n  fullName: System.IO.FileOptions\n  nameWithType: FileOptions\n  commentId: T:System.IO.FileOptions\n"}