{"nodes":[{"pos":[23551,23569],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[25130,25205],"content":"Aggregate<TSource>(ParallelQuery<TSource>, Func<TSource, TSource, TSource>)","needQuote":true,"nodes":[{"content":"Aggregate&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, TSource, TSource&gt;)","pos":[0,75],"source":"Aggregate<TSource>(ParallelQuery<TSource>, Func<TSource, TSource, TSource>)"}]},{"content":"\\n&lt;p&gt;A sequence to aggregate over.&lt;/p&gt;\\n","pos":[26194,26234],"source":"\\n<p>A sequence to aggregate over.</p>\\n"},{"content":"\\n&lt;p&gt;An accumulator function to be invoked on each element.&lt;/p&gt;\\n","pos":[26326,26391],"source":"\\n<p>An accumulator function to be invoked on each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[26451,26506],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The final accumulator value.&lt;/p&gt;\\n","pos":[26564,26603],"source":"\\n<p>The final accumulator value.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[26732,26825],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;func&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[26930,27022],"source":"\\n<p>\\n<em>source</em> or <em>func</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[27121,27199],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[27312,27362],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[28338,28447],"content":"Aggregate<TSource, TAccumulate>(ParallelQuery<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>)","needQuote":true,"nodes":[{"content":"Aggregate&lt;TSource, TAccumulate&gt;(ParallelQuery&lt;TSource&gt;, TAccumulate, Func&lt;TAccumulate, TSource, TAccumulate&gt;)","pos":[0,109],"source":"Aggregate<TSource, TAccumulate>(ParallelQuery<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>)"}]},{"content":"\\n&lt;p&gt;A sequence to aggregate over.&lt;/p&gt;\\n","pos":[29626,29666],"source":"\\n<p>A sequence to aggregate over.</p>\\n"},{"content":"\\n&lt;p&gt;The initial accumulator value.&lt;/p&gt;\\n","pos":[29731,29772],"source":"\\n<p>The initial accumulator value.</p>\\n"},{"content":"\\n&lt;p&gt;An accumulator function to be invoked on each element.&lt;/p&gt;\\n","pos":[29872,29937],"source":"\\n<p>An accumulator function to be invoked on each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[29997,30052],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the accumulator value.&lt;/p&gt;\\n","pos":[30096,30141],"source":"\\n<p>The type of the accumulator value.</p>\\n"},{"content":"\\n&lt;p&gt;The final accumulator value.&lt;/p&gt;\\n","pos":[30203,30242],"source":"\\n<p>The final accumulator value.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[30371,30464],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;func&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[30569,30661],"source":"\\n<p>\\n<em>source</em> or <em>func</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[30760,30838],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[30951,31001],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[32251,32442],"content":"Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TAccumulate, TAccumulate>, Func<TAccumulate, TResult>)","needQuote":true,"nodes":[{"content":"Aggregate&lt;TSource, TAccumulate, TResult&gt;(ParallelQuery&lt;TSource&gt;, TAccumulate, Func&lt;TAccumulate, TSource, TAccumulate&gt;, Func&lt;TAccumulate, TAccumulate, TAccumulate&gt;, Func&lt;TAccumulate, TResult&gt;)","pos":[0,191],"source":"Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TAccumulate, TAccumulate>, Func<TAccumulate, TResult>)"}]},{"content":"\\n&lt;p&gt;A sequence to aggregate over.&lt;/p&gt;\\n","pos":[33995,34035],"source":"\\n<p>A sequence to aggregate over.</p>\\n"},{"content":"\\n&lt;p&gt;The initial accumulator value.&lt;/p&gt;\\n","pos":[34100,34141],"source":"\\n<p>The initial accumulator value.</p>\\n"},{"content":"\\n&lt;p&gt;An accumulator function to be invoked on each element in a partition.","pos":[34258,34332],"source":"\\n<p>An accumulator function to be invoked on each element in a partition."},{"content":"&lt;/p&gt;\\n","pos":[34333,34339],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An accumulator function to be invoked on the yielded accumulator result from each partition.","pos":[34462,34559],"source":"\\n<p>An accumulator function to be invoked on the yielded accumulator result from each partition."},{"content":"&lt;/p&gt;\\n","pos":[34560,34566],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A function to transform the final accumulator value into the result value.","pos":[34662,34741],"source":"\\n<p>A function to transform the final accumulator value into the result value."},{"content":"&lt;/p&gt;\\n","pos":[34742,34748],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[34808,34863],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the accumulator value.&lt;/p&gt;\\n","pos":[34907,34952],"source":"\\n<p>The type of the accumulator value.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the resulting value.&lt;/p&gt;\\n","pos":[34992,35035],"source":"\\n<p>The type of the resulting value.</p>\\n"},{"content":"\\n&lt;p&gt;The transformed final accumulator value.&lt;/p&gt;\\n","pos":[35093,35144],"source":"\\n<p>The transformed final accumulator value.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[35273,35366],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;updateAccumulatorFunc&lt;/em&gt; or &lt;em&gt;combineAccumulatorsFunc&lt;/em&gt; or &lt;em&gt;resultSelector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[35471,35643],"source":"\\n<p>\\n<em>source</em> or <em>updateAccumulatorFunc</em> or <em>combineAccumulatorsFunc</em> or <em>resultSelector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[35742,35820],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[35933,35983],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[37518,37664],"content":"Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>)","needQuote":true,"nodes":[{"content":"Aggregate&lt;TSource, TAccumulate, TResult&gt;(ParallelQuery&lt;TSource&gt;, TAccumulate, Func&lt;TAccumulate, TSource, TAccumulate&gt;, Func&lt;TAccumulate, TResult&gt;)","pos":[0,146],"source":"Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>)"}]},{"content":"\\n&lt;p&gt;A sequence to aggregate over.&lt;/p&gt;\\n","pos":[39052,39092],"source":"\\n<p>A sequence to aggregate over.</p>\\n"},{"content":"\\n&lt;p&gt;The initial accumulator value.&lt;/p&gt;\\n","pos":[39157,39198],"source":"\\n<p>The initial accumulator value.</p>\\n"},{"content":"\\n&lt;p&gt;An accumulator function to be invoked on each element.&lt;/p&gt;\\n","pos":[39298,39363],"source":"\\n<p>An accumulator function to be invoked on each element.</p>\\n"},{"content":"\\n&lt;p&gt;A function to transform the final accumulator value into the result value.&lt;/p&gt;\\n","pos":[39459,39544],"source":"\\n<p>A function to transform the final accumulator value into the result value.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[39604,39659],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the accumulator value.&lt;/p&gt;\\n","pos":[39703,39748],"source":"\\n<p>The type of the accumulator value.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the resulting value.&lt;/p&gt;\\n","pos":[39788,39831],"source":"\\n<p>The type of the resulting value.</p>\\n"},{"content":"\\n&lt;p&gt;The transformed final accumulator value.&lt;/p&gt;\\n","pos":[39889,39940],"source":"\\n<p>The transformed final accumulator value.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[40069,40162],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;func&lt;/em&gt; or &lt;em&gt;resultSelector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[40267,40386],"source":"\\n<p>\\n<em>source</em> or <em>func</em> or <em>resultSelector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[40485,40563],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[40676,40726],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[42179,42376],"content":"Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource>, Func<TAccumulate>, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TAccumulate, TAccumulate>, Func<TAccumulate, TResult>)","needQuote":true,"nodes":[{"content":"Aggregate&lt;TSource, TAccumulate, TResult&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TAccumulate&gt;, Func&lt;TAccumulate, TSource, TAccumulate&gt;, Func&lt;TAccumulate, TAccumulate, TAccumulate&gt;, Func&lt;TAccumulate, TResult&gt;)","pos":[0,197],"source":"Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource>, Func<TAccumulate>, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TAccumulate, TAccumulate>, Func<TAccumulate, TResult>)"}]},{"content":"\\n&lt;p&gt;A sequence to aggregate over.&lt;/p&gt;\\n","pos":[43971,44011],"source":"\\n<p>A sequence to aggregate over.</p>\\n"},{"content":"\\n&lt;p&gt;A function that returns the initial accumulator value.","pos":[44094,44153],"source":"\\n<p>A function that returns the initial accumulator value."},{"content":"&lt;/p&gt;\\n","pos":[44154,44160],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An accumulator function to be invoked on each element in a partition.","pos":[44277,44351],"source":"\\n<p>An accumulator function to be invoked on each element in a partition."},{"content":"&lt;/p&gt;\\n","pos":[44352,44358],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An accumulator function to be invoked on the yielded accumulator result from each partition.&lt;/p&gt;\\n","pos":[44481,44584],"source":"\\n<p>An accumulator function to be invoked on the yielded accumulator result from each partition.</p>\\n"},{"content":"\\n&lt;p&gt;A function to transform the final accumulator value into the result value.","pos":[44680,44759],"source":"\\n<p>A function to transform the final accumulator value into the result value."},{"content":"&lt;/p&gt;\\n","pos":[44760,44766],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[44826,44881],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the accumulator value.&lt;/p&gt;\\n","pos":[44925,44970],"source":"\\n<p>The type of the accumulator value.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the resulting value.&lt;/p&gt;\\n","pos":[45010,45053],"source":"\\n<p>The type of the resulting value.</p>\\n"},{"content":"\\n&lt;p&gt;The transformed final accumulator value.&lt;/p&gt;\\n","pos":[45111,45162],"source":"\\n<p>The transformed final accumulator value.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[45291,45384],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;seedFactory&lt;/em&gt; or &lt;em&gt;updateAccumulatorFunc&lt;/em&gt; or &lt;em&gt;combineAccumulatorsFunc&lt;/em&gt; or &lt;em&gt;resultSelector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[45489,45685],"source":"\\n<p>\\n<em>source</em> or <em>seedFactory</em> or <em>updateAccumulatorFunc</em> or <em>combineAccumulatorsFunc</em> or <em>resultSelector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[45784,45862],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[45975,46025],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[47528,47588],"content":"All<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)","needQuote":true,"nodes":[{"content":"All&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Boolean&gt;)","pos":[0,60],"source":"All<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)"}]},{"content":"\\n&lt;p&gt;A sequence whose elements to apply the predicate to.&lt;/p&gt;\\n","pos":[48555,48618],"source":"\\n<p>A sequence whose elements to apply the predicate to.</p>\\n"},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[48710,48769],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[48829,48880],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false..&lt;/p&gt;\\n","pos":[48941,49088],"source":"\\n<p>true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false..</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[49217,49310],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[49415,49512],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[49611,49689],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[50507,50543],"content":"Any<TSource>(ParallelQuery<TSource>)","needQuote":true,"nodes":[{"content":"Any&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;)","pos":[0,36],"source":"Any<TSource>(ParallelQuery<TSource>)"}]},{"content":"\\n&lt;p&gt;The sequence to check for emptiness.&lt;/p&gt;\\n","pos":[51384,51431],"source":"\\n<p>The sequence to check for emptiness.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[51491,51542],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;true if the source sequence contains any elements; otherwise, false.&lt;/p&gt;\\n","pos":[51603,51682],"source":"\\n<p>true if the source sequence contains any elements; otherwise, false.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[51811,51904],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[52009,52084],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[52183,52261],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[53056,53116],"content":"Any<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)","needQuote":true,"nodes":[{"content":"Any&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Boolean&gt;)","pos":[0,60],"source":"Any<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)"}]},{"content":"\\n&lt;p&gt;A sequence to whose elements the predicate will be applied.&lt;/p&gt;\\n","pos":[54084,54154],"source":"\\n<p>A sequence to whose elements the predicate will be applied.</p>\\n"},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[54246,54305],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[54365,54416],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;true if any elements in the source sequence pass the test in the specified predicate; otherwise, false.&lt;/p&gt;\\n","pos":[54477,54591],"source":"\\n<p>true if any elements in the source sequence pass the test in the specified predicate; otherwise, false.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[54720,54813],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[54918,55015],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[55114,55192],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[56037,56082],"content":"AsEnumerable<TSource>(ParallelQuery<TSource>)","needQuote":true,"nodes":[{"content":"AsEnumerable&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;)","pos":[0,45],"source":"AsEnumerable<TSource>(ParallelQuery<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[57378,57433],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[57788,57863],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[58592,58616],"content":"AsOrdered(ParallelQuery)","needQuote":true,"nodes":[{"content":"AsOrdered(ParallelQuery)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The input sequence.&lt;/p&gt;\\n","pos":[59594,59624],"source":"\\n<p>The input sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The source sequence which will maintain the original ordering in the subsequent query operators.&lt;/p&gt;\\n","pos":[59696,59803],"source":"\\n<p>The source sequence which will maintain the original ordering in the subsequent query operators.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[59922,59997],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[61132,61174],"content":"AsOrdered<TSource>(ParallelQuery<TSource>)","needQuote":true,"nodes":[{"content":"AsOrdered&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;)","pos":[0,42],"source":"AsOrdered<TSource>(ParallelQuery<TSource>)"}]},{"content":"\\n&lt;p&gt;The input sequence.&lt;/p&gt;\\n","pos":[62240,62270],"source":"\\n<p>The input sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[62330,62381],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The source sequence which will maintain the original ordering in the subsequent query operators.&lt;/p&gt;\\n","pos":[62464,62571],"source":"\\n<p>The source sequence which will maintain the original ordering in the subsequent query operators.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[62690,62765],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;Thrown if &lt;em&gt;source&lt;/em&gt; contains no elements&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;if &lt;em&gt;source&lt;/em&gt; is not one of AsParallel, ParallelEnumerable.Range, or ParallelEnumerable.Repeat.&lt;/p&gt;\\n","pos":[62878,63057],"source":"\\n<p>Thrown if <em>source</em> contains no elements</p>\\n<p>-or-</p>\\n<p>if <em>source</em> is not one of AsParallel, ParallelEnumerable.Range, or ParallelEnumerable.Repeat.</p>\\n"},{"pos":[63792,63815],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The source as a ParallelQuery to bind to ParallelEnumerable extension methods.&lt;/p&gt;\\n","pos":[64897,64986],"source":"\\n<p>The source as a ParallelQuery to bind to ParallelEnumerable extension methods.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[65105,65180],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[65699,65740],"content":"AsParallel<TSource>(Partitioner<TSource>)","needQuote":true,"nodes":[{"content":"AsParallel&lt;TSource&gt;(Partitioner&lt;TSource&gt;)","pos":[0,41],"source":"AsParallel<TSource>(Partitioner<TSource>)"}]},{"content":"\\n&lt;p&gt;A partitioner over the input sequence.&lt;/p&gt;\\n","pos":[66752,66801],"source":"\\n<p>A partitioner over the input sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[66861,66912],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;source&lt;/em&gt; as a ParallelQuery to bind to ParallelEnumerable extension methods.&lt;/p&gt;\\n","pos":[66995,67093],"source":"\\n<p>The <em>source</em> as a ParallelQuery to bind to ParallelEnumerable extension methods.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[67212,67287],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[68084,68125],"content":"AsParallel<TSource>(IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"AsParallel&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)","pos":[0,41],"source":"AsParallel<TSource>(IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[69305,69356],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[69721,69796],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[70557,70602],"content":"AsSequential<TSource>(ParallelQuery<TSource>)","needQuote":true,"nodes":[{"content":"AsSequential&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;)","pos":[0,45],"source":"AsSequential<TSource>(ParallelQuery<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[71981,72032],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[72416,72491],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[73250,73294],"content":"AsUnordered<TSource>(ParallelQuery<TSource>)","needQuote":true,"nodes":[{"content":"AsUnordered&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;)","pos":[0,44],"source":"AsUnordered<TSource>(ParallelQuery<TSource>)"}]},{"content":"\\n&lt;p&gt;The input sequence.&lt;/p&gt;\\n","pos":[74233,74263],"source":"\\n<p>The input sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[74323,74374],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The source sequence with arbitrary order.&lt;/p&gt;\\n","pos":[74457,74509],"source":"\\n<p>The source sequence with arbitrary order.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[74628,74703],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[75470,75501],"content":"Average(ParallelQuery<Decimal>)","needQuote":true,"nodes":[{"content":"Average(ParallelQuery&lt;Decimal&gt;)","pos":[0,31],"source":"Average(ParallelQuery<Decimal>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate an average.&lt;/p&gt;\\n","pos":[76339,76409],"source":"\\n<p>A sequence of values that are used to calculate an average.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[76470,76519],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[76648,76741],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[76846,76921],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[77020,77098],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[77211,77261],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[77971,78001],"content":"Average(ParallelQuery<Double>)","needQuote":true,"nodes":[{"content":"Average(ParallelQuery&lt;Double&gt;)","pos":[0,30],"source":"Average(ParallelQuery<Double>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate an average.&lt;/p&gt;\\n","pos":[78833,78903],"source":"\\n<p>A sequence of values that are used to calculate an average.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[78963,79012],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[79141,79234],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[79339,79414],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[79513,79591],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[79704,79754],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[80457,80486],"content":"Average(ParallelQuery<Int32>)","needQuote":true,"nodes":[{"content":"Average(ParallelQuery&lt;Int32&gt;)","pos":[0,29],"source":"Average(ParallelQuery<Int32>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate an average.&lt;/p&gt;\\n","pos":[81314,81384],"source":"\\n<p>A sequence of values that are used to calculate an average.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[81444,81493],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[81622,81715],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[81820,81895],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[82337,82387],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[83086,83115],"content":"Average(ParallelQuery<Int64>)","needQuote":true,"nodes":[{"content":"Average(ParallelQuery&lt;Int64&gt;)","pos":[0,29],"source":"Average(ParallelQuery<Int64>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate an average.&lt;/p&gt;\\n","pos":[83941,84011],"source":"\\n<p>A sequence of values that are used to calculate an average.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[84071,84120],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[84249,84342],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[84447,84522],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[84964,85014],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[85770,85811],"content":"Average(ParallelQuery<Nullable<Decimal>>)","needQuote":true,"nodes":[{"content":"Average(ParallelQuery&lt;Nullable&lt;Decimal&gt;&gt;)","pos":[0,41],"source":"Average(ParallelQuery<Nullable<Decimal>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate an average.&lt;/p&gt;\\n","pos":[86690,86760],"source":"\\n<p>A sequence of values that are used to calculate an average.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[86838,86887],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[87016,87109],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[87214,87289],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[87388,87466],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[87579,87629],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[88446,88486],"content":"Average(ParallelQuery<Nullable<Double>>)","needQuote":true,"nodes":[{"content":"Average(ParallelQuery&lt;Nullable&lt;Double&gt;&gt;)","pos":[0,40],"source":"Average(ParallelQuery<Nullable<Double>>)"}]},{"content":"\\n&lt;p&gt;The source sequence.&lt;/p&gt;\\n","pos":[89359,89390],"source":"\\n<p>The source sequence.</p>\\n"},{"content":"\\n&lt;p&gt;Returns the average of the sequence of values.&lt;/p&gt;\\n","pos":[89467,89524],"source":"\\n<p>Returns the average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[89653,89746],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate an average.The average of the sequence of values.&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[89851,90021],"source":"\\n<p>A sequence of values that are used to calculate an average.The average of the sequence of values.<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[90120,90198],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[90311,90361],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[91171,91210],"content":"Average(ParallelQuery<Nullable<Int32>>)","needQuote":true,"nodes":[{"content":"Average(ParallelQuery&lt;Nullable&lt;Int32&gt;&gt;)","pos":[0,39],"source":"Average(ParallelQuery<Nullable<Int32>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate an average.&lt;/p&gt;\\n","pos":[92079,92149],"source":"\\n<p>A sequence of values that are used to calculate an average.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[92226,92275],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[92404,92497],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[92602,92677],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[93119,93169],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[93975,94014],"content":"Average(ParallelQuery<Nullable<Int64>>)","needQuote":true,"nodes":[{"content":"Average(ParallelQuery&lt;Nullable&lt;Int64&gt;&gt;)","pos":[0,39],"source":"Average(ParallelQuery<Nullable<Int64>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate an average.&lt;/p&gt;\\n","pos":[94881,94951],"source":"\\n<p>A sequence of values that are used to calculate an average.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[95028,95077],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[95206,95299],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[95404,95479],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[95921,95971],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[96780,96820],"content":"Average(ParallelQuery<Nullable<Single>>)","needQuote":true,"nodes":[{"content":"Average(ParallelQuery&lt;Nullable&lt;Single&gt;&gt;)","pos":[0,40],"source":"Average(ParallelQuery<Nullable<Single>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate an average.&lt;/p&gt;\\n","pos":[97691,97761],"source":"\\n<p>A sequence of values that are used to calculate an average.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[97838,97887],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[98016,98109],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[98214,98289],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[98388,98466],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[98579,98629],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[99391,99421],"content":"Average(ParallelQuery<Single>)","needQuote":true,"nodes":[{"content":"Average(ParallelQuery&lt;Single&gt;)","pos":[0,30],"source":"Average(ParallelQuery<Single>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate an average.&lt;/p&gt;\\n","pos":[100251,100321],"source":"\\n<p>A sequence of values that are used to calculate an average.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[100381,100430],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[100559,100652],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[100757,100832],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[100931,101009],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[101122,101172],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[101953,102017],"content":"Average<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Decimal&gt;)","pos":[0,64],"source":"Average<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate an average.&lt;/p&gt;\\n","pos":[103072,103142],"source":"\\n<p>A sequence of values that are used to calculate an average.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[103233,103290],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[103350,103401],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[103462,103511],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[103640,103733],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[103838,103934],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[104033,104111],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[104224,104274],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[105532,105595],"content":"Average<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Double&gt;)","pos":[0,63],"source":"Average<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate an average.&lt;/p&gt;\\n","pos":[106645,106715],"source":"\\n<p>A sequence of values that are used to calculate an average.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[106805,106862],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[106922,106973],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[107033,107082],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[107211,107304],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[107409,107505],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[107604,107682],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[107795,107845],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[109097,109159],"content":"Average<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Int32&gt;)","pos":[0,62],"source":"Average<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate an average.&lt;/p&gt;\\n","pos":[110206,110276],"source":"\\n<p>A sequence of values that are used to calculate an average.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[110365,110422],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[110482,110533],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[110593,110642],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[110771,110864],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[110969,111065],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[111507,111557],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[112805,112867],"content":"Average<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Int64&gt;)","pos":[0,62],"source":"Average<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate an average.&lt;/p&gt;\\n","pos":[113912,113982],"source":"\\n<p>A sequence of values that are used to calculate an average.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[114071,114128],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[114188,114239],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[114299,114348],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[114477,114570],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[114675,114771],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[115213,115263],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[116568,116642],"content":"Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Decimal&gt;&gt;)","pos":[0,74],"source":"Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate an average.&lt;/p&gt;\\n","pos":[117721,117791],"source":"\\n<p>A sequence of values that are used to calculate an average.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[117899,117956],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[118016,118067],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[118145,118194],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[118323,118416],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[118521,118617],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[118716,118794],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[118907,118957],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[120323,120396],"content":"Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Double&gt;&gt;)","pos":[0,73],"source":"Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate an average.&lt;/p&gt;\\n","pos":[121470,121540],"source":"\\n<p>A sequence of values that are used to calculate an average.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[121647,121704],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[121764,121815],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[121892,121941],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[122070,122163],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[122268,122364],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[122463,122541],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[122654,122704],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[124063,124135],"content":"Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Int32&gt;&gt;)","pos":[0,72],"source":"Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate an average.&lt;/p&gt;\\n","pos":[125206,125276],"source":"\\n<p>A sequence of values that are used to calculate an average.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[125382,125439],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[125499,125550],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[125627,125676],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[125805,125898],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[126003,126099],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[126541,126591],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[127946,128018],"content":"Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Int64&gt;&gt;)","pos":[0,72],"source":"Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate an average.&lt;/p&gt;\\n","pos":[129087,129157],"source":"\\n<p>A sequence of values that are used to calculate an average.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[129263,129320],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[129380,129431],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[129508,129557],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[129686,129779],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[129884,129980],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[130422,130472],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[131830,131903],"content":"Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Single&gt;&gt;)","pos":[0,73],"source":"Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate an average.&lt;/p&gt;\\n","pos":[132975,133045],"source":"\\n<p>A sequence of values that are used to calculate an average.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[133152,133209],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[133269,133320],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[133397,133446],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[133575,133668],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[133773,133869],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[133968,134046],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[134159,134209],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[135520,135583],"content":"Average<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Single&gt;)","pos":[0,63],"source":"Average<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate an average.&lt;/p&gt;\\n","pos":[136631,136701],"source":"\\n<p>A sequence of values that are used to calculate an average.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[136791,136848],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[136908,136959],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[137019,137068],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[137197,137290],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[137395,137491],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[137590,137668],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[137781,137831],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[138969,138997],"content":"Cast<TResult>(ParallelQuery)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(ParallelQuery)","pos":[0,28],"source":"Cast<TResult>(ParallelQuery)"}]},{"content":"\\n&lt;p&gt;The sequence that contains the elements to be converted.&lt;/p&gt;\\n","pos":[139839,139906],"source":"\\n<p>The sequence that contains the elements to be converted.</p>\\n"},{"content":"\\n&lt;p&gt;The type to convert the elements of &lt;em&gt;source&lt;/em&gt; to.&lt;/p&gt;\\n","pos":[139966,140032],"source":"\\n<p>The type to convert the elements of <em>source</em> to.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that contains each element of the source sequence converted to the specified type.&lt;/p&gt;\\n","pos":[140115,140219],"source":"\\n<p>A sequence that contains each element of the source sequence converted to the specified type.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[140338,140413],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The type of the source sequence could not be converted to &lt;em&gt;TResult&lt;/em&gt;.&lt;/p&gt;\\n","pos":[140516,140602],"source":"\\n<p>The type of the source sequence could not be converted to <em>TResult</em>.</p>\\n"},{"pos":[141401,141462],"content":"Concat<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"Concat&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, IEnumerable&lt;TSource&gt;)","pos":[0,61],"source":"Concat<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[143187,143225],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[143326,143364],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This type parameter is not used.&lt;/p&gt;\\n","pos":[143424,143467],"source":"\\n<p>This type parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that occurs when this method is called.&lt;/p&gt;\\n","pos":[143799,143863],"source":"\\n<p>The exception that occurs when this method is called.</p>\\n"},{"pos":[145228,145291],"content":"Concat<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)","needQuote":true,"nodes":[{"content":"Concat&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, ParallelQuery&lt;TSource&gt;)","pos":[0,63],"source":"Concat<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)"}]},{"content":"\\n&lt;p&gt;The first sequence to concatenate.&lt;/p&gt;\\n","pos":[146256,146301],"source":"\\n<p>The first sequence to concatenate.</p>\\n"},{"content":"\\n&lt;p&gt;The sequence to concatenate to the first sequence.&lt;/p&gt;\\n","pos":[146389,146450],"source":"\\n<p>The sequence to concatenate to the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\\n","pos":[146510,146569],"source":"\\n<p>The type of the elements of the input sequences.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that contains the concatenated elements of the two input sequences.&lt;/p&gt;\\n","pos":[146652,146741],"source":"\\n<p>A sequence that contains the concatenated elements of the two input sequences.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[146860,146953],"source":"\\n<p>\\n<em>first</em> or <em>second</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[147808,147858],"content":"Contains<TSource>(ParallelQuery<TSource>, TSource)","needQuote":true,"nodes":[{"content":"Contains&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, TSource)","pos":[0,50],"source":"Contains<TSource>(ParallelQuery<TSource>, TSource)"}]},{"content":"\\n&lt;p&gt;A sequence in which to locate a value.&lt;/p&gt;\\n","pos":[148810,148859],"source":"\\n<p>A sequence in which to locate a value.</p>\\n"},{"content":"\\n&lt;p&gt;The value to locate in the sequence.&lt;/p&gt;\\n","pos":[148921,148968],"source":"\\n<p>The value to locate in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[149028,149079],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;true if the source sequence contains an element that has the specified value; otherwise, false.&lt;/p&gt;\\n","pos":[149140,149246],"source":"\\n<p>true if the source sequence contains an element that has the specified value; otherwise, false.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[149375,149468],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[149573,149648],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[149747,149825],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[150757,150835],"content":"Contains<TSource>(ParallelQuery<TSource>, TSource, IEqualityComparer<TSource>)","needQuote":true,"nodes":[{"content":"Contains&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, TSource, IEqualityComparer&lt;TSource&gt;)","pos":[0,78],"source":"Contains<TSource>(ParallelQuery<TSource>, TSource, IEqualityComparer<TSource>)"}]},{"content":"\\n&lt;p&gt;A sequence in which to locate a value.&lt;/p&gt;\\n","pos":[152011,152060],"source":"\\n<p>A sequence in which to locate a value.</p>\\n"},{"content":"\\n&lt;p&gt;The value to locate in the sequence.&lt;/p&gt;\\n","pos":[152122,152169],"source":"\\n<p>The value to locate in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;An equality comparer to compare values.&lt;/p&gt;\\n","pos":[152278,152328],"source":"\\n<p>An equality comparer to compare values.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[152388,152439],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;true if the source sequence contains an element that has the specified value; otherwise, false.&lt;/p&gt;\\n","pos":[152500,152606],"source":"\\n<p>true if the source sequence contains an element that has the specified value; otherwise, false.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[152735,152828],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[152933,153008],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[153107,153185],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[154094,154132],"content":"Count<TSource>(ParallelQuery<TSource>)","needQuote":true,"nodes":[{"content":"Count&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;)","pos":[0,38],"source":"Count<TSource>(ParallelQuery<TSource>)"}]},{"content":"\\n&lt;p&gt;A sequence that contains elements to be counted.&lt;/p&gt;\\n","pos":[154973,155032],"source":"\\n<p>A sequence that contains elements to be counted.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[155092,155147],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the input sequence.&lt;/p&gt;\\n","pos":[155206,155262],"source":"\\n<p>The number of elements in the input sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[155391,155484],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[155589,155664],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[156908,156970],"content":"Count<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)","needQuote":true,"nodes":[{"content":"Count&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Boolean&gt;)","pos":[0,62],"source":"Count<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)"}]},{"content":"\\n&lt;p&gt;A sequence that contains elements to be counted.&lt;/p&gt;\\n","pos":[157972,158031],"source":"\\n<p>A sequence that contains elements to be counted.</p>\\n"},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[158123,158182],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[158242,158297],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A number that represents how many elements in the sequence satisfy the condition in the predicate function.&lt;/p&gt;\\n","pos":[158356,158474],"source":"\\n<p>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[158603,158696],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[158801,158898],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[160192,160239],"content":"DefaultIfEmpty<TSource>(ParallelQuery<TSource>)","needQuote":true,"nodes":[{"content":"DefaultIfEmpty&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;)","pos":[0,47],"source":"DefaultIfEmpty<TSource>(ParallelQuery<TSource>)"}]},{"content":"\\n&lt;p&gt;The sequence to return a default value for if it is empty.&lt;/p&gt;\\n","pos":[161244,161313],"source":"\\n<p>The sequence to return a default value for if it is empty.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[161373,161428],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that contains default(TSource) if &lt;em&gt;source&lt;/em&gt; is empty; otherwise, &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[161511,161620],"source":"\\n<p>A sequence that contains default(TSource) if <em>source</em> is empty; otherwise, <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[161739,161814],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[161929,162022],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[162121,162199],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[162987,163043],"content":"DefaultIfEmpty<TSource>(ParallelQuery<TSource>, TSource)","needQuote":true,"nodes":[{"content":"DefaultIfEmpty&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, TSource)","pos":[0,56],"source":"DefaultIfEmpty<TSource>(ParallelQuery<TSource>, TSource)"}]},{"content":"\\n&lt;p&gt;The sequence to return the specified value for if it is empty.&lt;/p&gt;\\n","pos":[164089,164162],"source":"\\n<p>The sequence to return the specified value for if it is empty.</p>\\n"},{"content":"\\n&lt;p&gt;The value to return if the sequence is empty.&lt;/p&gt;\\n","pos":[164231,164287],"source":"\\n<p>The value to return if the sequence is empty.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[164347,164402],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that contains defaultValue if &lt;em&gt;source&lt;/em&gt; is empty; otherwise, &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[164485,164590],"source":"\\n<p>A sequence that contains defaultValue if <em>source</em> is empty; otherwise, <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[164709,164784],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[164899,164992],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[165091,165169],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[165963,166004],"content":"Distinct<TSource>(ParallelQuery<TSource>)","needQuote":true,"nodes":[{"content":"Distinct&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;)","pos":[0,41],"source":"Distinct<TSource>(ParallelQuery<TSource>)"}]},{"content":"\\n&lt;p&gt;The sequence to remove duplicate elements from.&lt;/p&gt;\\n","pos":[166948,167006],"source":"\\n<p>The sequence to remove duplicate elements from.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[167066,167121],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that contains distinct elements from the source sequence.&lt;/p&gt;\\n","pos":[167204,167283],"source":"\\n<p>A sequence that contains distinct elements from the source sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[167402,167477],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[167592,167685],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[167784,167862],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[168746,168815],"content":"Distinct<TSource>(ParallelQuery<TSource>, IEqualityComparer<TSource>)","needQuote":true,"nodes":[{"content":"Distinct&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, IEqualityComparer&lt;TSource&gt;)","pos":[0,69],"source":"Distinct<TSource>(ParallelQuery<TSource>, IEqualityComparer<TSource>)"}]},{"content":"\\n&lt;p&gt;The sequence to remove duplicate elements from.&lt;/p&gt;\\n","pos":[169983,170041],"source":"\\n<p>The sequence to remove duplicate elements from.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[170350,170405],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that contains distinct elements from the source sequence.&lt;/p&gt;\\n","pos":[170488,170567],"source":"\\n<p>A sequence that contains distinct elements from the source sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[170686,170761],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[170860,170938],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[171862,171911],"content":"ElementAt<TSource>(ParallelQuery<TSource>, Int32)","needQuote":true,"nodes":[{"content":"ElementAt&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Int32)","pos":[0,49],"source":"ElementAt<TSource>(ParallelQuery<TSource>, Int32)"}]},{"content":"\\n&lt;p&gt;A sequence to return an element from.&lt;/p&gt;\\n","pos":[172825,172873],"source":"\\n<p>A sequence to return an element from.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the element to retrieve.&lt;/p&gt;\\n","pos":[172936,172995],"source":"\\n<p>The zero-based index of the element to retrieve.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[173055,173110],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The element at the specified position in the source sequence.&lt;/p&gt;\\n","pos":[173168,173240],"source":"\\n<p>The element at the specified position in the source sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[173369,173462],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[173567,173642],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than 0 or greater than or equal to the number of elements in &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[173759,173872],"source":"\\n<p>\\n<em>index</em> is less than 0 or greater than or equal to the number of elements in <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[173971,174049],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[174891,174949],"content":"ElementAtOrDefault<TSource>(ParallelQuery<TSource>, Int32)","needQuote":true,"nodes":[{"content":"ElementAtOrDefault&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Int32)","pos":[0,58],"source":"ElementAtOrDefault<TSource>(ParallelQuery<TSource>, Int32)"}]},{"content":"\\n&lt;p&gt;A sequence to return an element from.&lt;/p&gt;\\n","pos":[175947,175995],"source":"\\n<p>A sequence to return an element from.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the element to retrieve.&lt;/p&gt;\\n","pos":[176058,176117],"source":"\\n<p>The zero-based index of the element to retrieve.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[176177,176232],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;default(TSource) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.&lt;/p&gt;\\n","pos":[176290,176449],"source":"\\n<p>default(TSource) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[176578,176671],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[176776,176851],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[176950,177028],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[177706,177722],"content":"Empty<TResult>()","needQuote":true,"nodes":[{"content":"Empty&lt;TResult&gt;()","pos":[0,16],"source":"Empty<TResult>()"}]},{"content":"\\n&lt;p&gt;The type to assign to the type parameter of the returned generic sequence.&lt;/p&gt;\\n","pos":[178437,178522],"source":"\\n<p>The type to assign to the type parameter of the returned generic sequence.</p>\\n"},{"content":"\\n&lt;p&gt;An empty sequence whose type argument is &lt;em&gt;TResult&lt;/em&gt;.&lt;/p&gt;\\n","pos":[178605,178674],"source":"\\n<p>An empty sequence whose type argument is <em>TResult</em>.</p>\\n"},{"pos":[179413,179474],"content":"Except<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"Except&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, IEnumerable&lt;TSource&gt;)","pos":[0,61],"source":"Except<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[181199,181237],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[181338,181376],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This type parameter is not used.&lt;/p&gt;\\n","pos":[181436,181479],"source":"\\n<p>This type parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that occurs when this method is called.&lt;/p&gt;\\n","pos":[181811,181875],"source":"\\n<p>The exception that occurs when this method is called.</p>\\n"},{"pos":[183429,183518],"content":"Except<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)","needQuote":true,"nodes":[{"content":"Except&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, IEnumerable&lt;TSource&gt;, IEqualityComparer&lt;TSource&gt;)","pos":[0,89],"source":"Except<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)"}]},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[185378,185416],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[185517,185555],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[185664,185702],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This type parameter is not used.&lt;/p&gt;\\n","pos":[185762,185805],"source":"\\n<p>This type parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that occurs when this method is called.&lt;/p&gt;\\n","pos":[186137,186201],"source":"\\n<p>The exception that occurs when this method is called.</p>\\n"},{"pos":[187714,187777],"content":"Except<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)","needQuote":true,"nodes":[{"content":"Except&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, ParallelQuery&lt;TSource&gt;)","pos":[0,63],"source":"Except<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)"}]},{"content":"\\n&lt;p&gt;A sequence whose elements that are not also in &lt;em&gt;second&lt;/em&gt; will be returned.&lt;/p&gt;\\n","pos":[188817,188908],"source":"\\n<p>A sequence whose elements that are not also in <em>second</em> will be returned.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.&lt;/p&gt;\\n","pos":[188996,189138],"source":"\\n<p>A sequence whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\\n","pos":[189198,189257],"source":"\\n<p>The type of the elements of the input sequences.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that contains the set difference of the elements of two sequences.&lt;/p&gt;\\n","pos":[189340,189428],"source":"\\n<p>A sequence that contains the set difference of the elements of two sequences.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[189547,189640],"source":"\\n<p>\\n<em>first</em> or <em>second</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[189755,189848],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[189947,190025],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[191105,191196],"content":"Except<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)","needQuote":true,"nodes":[{"content":"Except&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, ParallelQuery&lt;TSource&gt;, IEqualityComparer&lt;TSource&gt;)","pos":[0,91],"source":"Except<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)"}]},{"content":"\\n&lt;p&gt;A sequence whose elements that are not also in &lt;em&gt;second&lt;/em&gt; will be returned.&lt;/p&gt;\\n","pos":[192462,192553],"source":"\\n<p>A sequence whose elements that are not also in <em>second</em> will be returned.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.","pos":[192641,192777],"source":"\\n<p>A sequence whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence."},{"content":"&lt;/p&gt;\\n","pos":[192778,192784],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\\n","pos":[193091,193150],"source":"\\n<p>The type of the elements of the input sequences.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that contains the set difference of the elements of two sequences.&lt;/p&gt;\\n","pos":[193233,193321],"source":"\\n<p>A sequence that contains the set difference of the elements of two sequences.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[193440,193533],"source":"\\n<p>\\n<em>first</em> or <em>second</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[193648,193741],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[193840,193918],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[194900,194938],"content":"First<TSource>(ParallelQuery<TSource>)","needQuote":true,"nodes":[{"content":"First&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;)","pos":[0,38],"source":"First<TSource>(ParallelQuery<TSource>)"}]},{"content":"\\n&lt;p&gt;The sequence to return the first element of.&lt;/p&gt;\\n","pos":[195778,195833],"source":"\\n<p>The sequence to return the first element of.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[195893,195948],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The first element in the specified sequence.&lt;/p&gt;\\n","pos":[196006,196061],"source":"\\n<p>The first element in the specified sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[196190,196283],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[196388,196463],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[196562,196640],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[196753,196803],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[197612,197674],"content":"First<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)","needQuote":true,"nodes":[{"content":"First&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Boolean&gt;)","pos":[0,62],"source":"First<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)"}]},{"content":"\\n&lt;p&gt;The sequence to return an element from.&lt;/p&gt;\\n","pos":[198660,198710],"source":"\\n<p>The sequence to return an element from.</p>\\n"},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[198802,198861],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[198921,198976],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The first element in the sequence that passes the test in the specified predicate function.&lt;/p&gt;\\n","pos":[199034,199136],"source":"\\n<p>The first element in the sequence that passes the test in the specified predicate function.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[199265,199358],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[199463,199560],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[199659,199737],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;No element in &lt;em&gt;source&lt;/em&gt; satisfies the condition in &lt;em&gt;predicate&lt;/em&gt;.&lt;/p&gt;\\n","pos":[199850,199937],"source":"\\n<p>No element in <em>source</em> satisfies the condition in <em>predicate</em>.</p>\\n"},{"pos":[200796,200843],"content":"FirstOrDefault<TSource>(ParallelQuery<TSource>)","needQuote":true,"nodes":[{"content":"FirstOrDefault&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;)","pos":[0,47],"source":"FirstOrDefault<TSource>(ParallelQuery<TSource>)"}]},{"content":"\\n&lt;p&gt;The sequence to return the first element of.&lt;/p&gt;\\n","pos":[201776,201831],"source":"\\n<p>The sequence to return the first element of.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[201891,201946],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;default(TSource) if &lt;em&gt;source&lt;/em&gt; is empty; otherwise, the first element in &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[202004,202109],"source":"\\n<p>default(TSource) if <em>source</em> is empty; otherwise, the first element in <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[202238,202331],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[202436,202511],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[202610,202688],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[203560,203631],"content":"FirstOrDefault<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)","needQuote":true,"nodes":[{"content":"FirstOrDefault&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Boolean&gt;)","pos":[0,71],"source":"FirstOrDefault<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)"}]},{"content":"\\n&lt;p&gt;The sequence to return an element from.&lt;/p&gt;\\n","pos":[204692,204742],"source":"\\n<p>The sequence to return an element from.</p>\\n"},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[204834,204893],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[204953,205008],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;default(TSource) if &lt;em&gt;source&lt;/em&gt; is empty or if no element passes the test specified by predicate; otherwise, the first element in &lt;em&gt;source&lt;/em&gt; that passes the test specified by predicate.&lt;/p&gt;\\n","pos":[205066,205271],"source":"\\n<p>default(TSource) if <em>source</em> is empty or if no element passes the test specified by predicate; otherwise, the first element in <em>source</em> that passes the test specified by predicate.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[205400,205493],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[205598,205695],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[205794,205872],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[206800,206856],"content":"ForAll<TSource>(ParallelQuery<TSource>, Action<TSource>)","needQuote":true,"nodes":[{"content":"ForAll&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Action&lt;TSource&gt;)","pos":[0,56],"source":"ForAll<TSource>(ParallelQuery<TSource>, Action<TSource>)"}]},{"content":"\\n&lt;p&gt;An Action to invoke on each element.&lt;/p&gt;\\n","pos":[208022,208069],"source":"\\n<p>An Action to invoke on each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[208129,208180],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[208309,208402],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;action&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[208507,208601],"source":"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[208700,208778],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[209648,209715],"content":"GroupBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)","needQuote":true,"nodes":[{"content":"GroupBy&lt;TSource, TKey&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, TKey&gt;)","pos":[0,67],"source":"GroupBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)"}]},{"content":"\\n&lt;p&gt;An OrderedParallelQuery{TSource}that contains elements to sort.&lt;/p&gt;\\n","pos":[210795,210869],"source":"\\n<p>An OrderedParallelQuery{TSource}that contains elements to sort.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract a key from an element.&lt;/p&gt;\\n","pos":[210955,211010],"source":"\\n<p>A function to extract a key from an element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[211070,211121],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[211158,211222],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence of groups that are sorted descending according to &lt;em&gt;TKey&lt;/em&gt;.&lt;/p&gt;\\n","pos":[211335,211421],"source":"\\n<p>A sequence of groups that are sorted descending according to <em>TKey</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[211550,211643],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;action&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[211748,211842],"source":"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[211941,212019],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[213083,213175],"content":"GroupBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)","needQuote":true,"nodes":[{"content":"GroupBy&lt;TSource, TKey&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, IEqualityComparer&lt;TKey&gt;)","pos":[0,92],"source":"GroupBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A function to extract a key from an element.&lt;/p&gt;\\n","pos":[214749,214804],"source":"\\n<p>A function to extract a key from an element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[215099,215150],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;&gt;.&lt;/p&gt;\\n","pos":[215187,215252],"source":"\\n<p>The type of the key returned by <em>keySelector</em>>.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence of groups that are sorted descending according to &lt;em&gt;TKey&lt;/em&gt;.&lt;/p&gt;\\n","pos":[215365,215451],"source":"\\n<p>A sequence of groups that are sorted descending according to <em>TKey</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[215580,215673],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;action&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[215778,215872],"source":"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[215971,216049],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[217162,217264],"content":"GroupBy<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)","needQuote":true,"nodes":[{"content":"GroupBy&lt;TSource, TKey, TElement&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, Func&lt;TSource, TElement&gt;)","pos":[0,102],"source":"GroupBy<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)"}]},{"content":"\\n&lt;p&gt;A function to extract a key from an element.&lt;/p&gt;\\n","pos":[218793,218848],"source":"\\n<p>A function to extract a key from an element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[219155,219206],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[219243,219307],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence of groups that are sorted descending according to &lt;em&gt;TKey&lt;/em&gt;.&lt;/p&gt;\\n","pos":[219589,219675],"source":"\\n<p>A sequence of groups that are sorted descending according to <em>TKey</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[219804,219897],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;action&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[220002,220096],"source":"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[220195,220273],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[221556,221683],"content":"GroupBy<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)","needQuote":true,"nodes":[{"content":"GroupBy&lt;TSource, TKey, TElement&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, Func&lt;TSource, TElement&gt;, IEqualityComparer&lt;TKey&gt;)","pos":[0,127],"source":"GroupBy<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;An OrderedParallelQuery{TSource}that contains elements to sort.&lt;/p&gt;\\n","pos":[223144,223218],"source":"\\n<p>An OrderedParallelQuery{TSource}that contains elements to sort.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract a key from an element.&lt;/p&gt;\\n","pos":[223304,223359],"source":"\\n<p>A function to extract a key from an element.</p>\\n"},{"content":"\\n&lt;p&gt;A function to map each source element to an element in an IGrouping.&lt;/p&gt;\\n","pos":[223453,223532],"source":"\\n<p>A function to map each source element to an element in an IGrouping.</p>\\n"},{"content":"\\n&lt;p&gt;An IComparer{TSource} to compare keys.&lt;/p&gt;\\n","pos":[223638,223687],"source":"\\n<p>An IComparer{TSource} to compare keys.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[223747,223798],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[223835,223899],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements in the IGrouping&lt;/p&gt;\\n","pos":[223940,223992],"source":"\\n<p>The type of the elements in the IGrouping</p>\\n"},{"content":"\\n&lt;p&gt;A sequence of groups that are sorted descending according to &lt;em&gt;TKey&lt;/em&gt;.&lt;/p&gt;\\n","pos":[224106,224192],"source":"\\n<p>A sequence of groups that are sorted descending according to <em>TKey</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[224321,224414],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;action&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[224519,224613],"source":"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[224712,224790],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[226191,226310],"content":"GroupBy<TSource, TKey, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>)","needQuote":true,"nodes":[{"content":"GroupBy&lt;TSource, TKey, TResult&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, Func&lt;TKey, IEnumerable&lt;TSource&gt;, TResult&gt;)","pos":[0,119],"source":"GroupBy<TSource, TKey, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>)"}]},{"content":"\\n&lt;p&gt;A sequence whose elements to group.&lt;/p&gt;\\n","pos":[227637,227683],"source":"\\n<p>A sequence whose elements to group.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract the key for each element.&lt;/p&gt;\\n","pos":[227769,227827],"source":"\\n<p>A function to extract the key for each element.</p>\\n"},{"content":"\\n&lt;p&gt;A function to create a result value from each group.&lt;/p&gt;\\n","pos":[227966,228029],"source":"\\n<p>A function to create a result value from each group.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[228089,228144],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[228181,228245],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result value returned by &lt;em&gt;resultSelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[228285,228361],"source":"\\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence of elements of type &lt;em&gt;TResult&lt;/em&gt; where each element represents a projection over a group and its key.&lt;/p&gt;\\n","pos":[228444,228571],"source":"\\n<p>A sequence of elements of type <em>TResult</em> where each element represents a projection over a group and its key.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[228700,228793],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;action&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[228898,228992],"source":"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[229091,229169],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[230688,230832],"content":"GroupBy<TSource, TKey, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>, IEqualityComparer<TKey>)","needQuote":true,"nodes":[{"content":"GroupBy&lt;TSource, TKey, TResult&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, Func&lt;TKey, IEnumerable&lt;TSource&gt;, TResult&gt;, IEqualityComparer&lt;TKey&gt;)","pos":[0,144],"source":"GroupBy<TSource, TKey, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>, IEqualityComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A sequence whose elements to group.&lt;/p&gt;\\n","pos":[232338,232384],"source":"\\n<p>A sequence whose elements to group.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract the key for each element.&lt;/p&gt;\\n","pos":[232470,232528],"source":"\\n<p>A function to extract the key for each element.</p>\\n"},{"content":"\\n&lt;p&gt;A function to create a result value from each group.&lt;/p&gt;\\n","pos":[232667,232730],"source":"\\n<p>A function to create a result value from each group.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[233033,233088],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[233125,233189],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result value returned by &lt;em&gt;resultSelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[233229,233305],"source":"\\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence of groups.&lt;/p&gt;\\n","pos":[233388,233420],"source":"\\n<p>A sequence of groups.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[233549,233642],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;action&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[233747,233841],"source":"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[233940,234018],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[235586,235741],"content":"GroupBy<TSource, TKey, TElement, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>)","needQuote":true,"nodes":[{"content":"GroupBy&lt;TSource, TKey, TElement, TResult&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, Func&lt;TSource, TElement&gt;, Func&lt;TKey, IEnumerable&lt;TElement&gt;, TResult&gt;)","pos":[0,155],"source":"GroupBy<TSource, TKey, TElement, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>)"}]},{"content":"\\n&lt;p&gt;A sequence whose elements to group.&lt;/p&gt;\\n","pos":[237293,237339],"source":"\\n<p>A sequence whose elements to group.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract the key for each element.&lt;/p&gt;\\n","pos":[237425,237483],"source":"\\n<p>A function to extract the key for each element.</p>\\n"},{"content":"\\n&lt;p&gt;A function to map each source element to an element in an IGrouping&lt;TKey, TElement&gt;.&lt;/p&gt;\\n","pos":[237577,237672],"source":"\\n<p>A function to map each source element to an element in an IGrouping<TKey, TElement>.</p>\\n"},{"content":"\\n&lt;p&gt;A function to create a result value from each group.&lt;/p&gt;\\n","pos":[237812,237875],"source":"\\n<p>A function to create a result value from each group.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[237935,237990],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[238027,238091],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements in each IGrouping{TKey, TElement}.&lt;/p&gt;\\n","pos":[238132,238202],"source":"\\n<p>The type of the elements in each IGrouping{TKey, TElement}.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result value returned by &lt;em&gt;resultSelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[238242,238318],"source":"\\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence of elements of type &lt;em&gt;TResult&lt;/em&gt; where each element represents a projection over a group and its key.&lt;/p&gt;\\n","pos":[238401,238528],"source":"\\n<p>A sequence of elements of type <em>TResult</em> where each element represents a projection over a group and its key.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[238657,238750],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;action&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[238855,238949],"source":"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[239048,239126],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[240868,241048],"content":"GroupBy<TSource, TKey, TElement, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>, IEqualityComparer<TKey>)","needQuote":true,"nodes":[{"content":"GroupBy&lt;TSource, TKey, TElement, TResult&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, Func&lt;TSource, TElement&gt;, Func&lt;TKey, IEnumerable&lt;TElement&gt;, TResult&gt;, IEqualityComparer&lt;TKey&gt;)","pos":[0,180],"source":"GroupBy<TSource, TKey, TElement, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>, IEqualityComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A sequence whose elements to group.&lt;/p&gt;\\n","pos":[242773,242819],"source":"\\n<p>A sequence whose elements to group.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract the key for each element.&lt;/p&gt;\\n","pos":[242905,242963],"source":"\\n<p>A function to extract the key for each element.</p>\\n"},{"content":"\\n&lt;p&gt;A function to map each source element to an element in an IGrouping{Key, TElement}.&lt;/p&gt;\\n","pos":[243057,243151],"source":"\\n<p>A function to map each source element to an element in an IGrouping{Key, TElement}.</p>\\n"},{"content":"\\n&lt;p&gt;A function to create a result value from each group.&lt;/p&gt;\\n","pos":[243291,243354],"source":"\\n<p>A function to create a result value from each group.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[243657,243712],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[243749,243813],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements in each IGrouping{TKey, TElement}.&lt;/p&gt;\\n","pos":[243854,243924],"source":"\\n<p>The type of the elements in each IGrouping{TKey, TElement}.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result value returned by &lt;em&gt;resultSelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[243964,244040],"source":"\\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence of elements of type &lt;em&gt;TResult&lt;/em&gt; where each element represents a projection over a group and its key.&lt;/p&gt;\\n","pos":[244123,244250],"source":"\\n<p>A sequence of elements of type <em>TResult</em> where each element represents a projection over a group and its key.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[244379,244472],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;action&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[244577,244671],"source":"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[244770,244848],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[246714,246882],"content":"GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>)","needQuote":true,"nodes":[{"content":"GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(ParallelQuery&lt;TOuter&gt;, IEnumerable&lt;TInner&gt;, Func&lt;TOuter, TKey&gt;, Func&lt;TInner, TKey&gt;, Func&lt;TOuter, IEnumerable&lt;TInner&gt;, TResult&gt;)","pos":[0,168],"source":"GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>)"}]},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[249098,249136],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[249235,249273],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[249363,249401],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[249491,249529],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[249669,249707],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This type parameter is not used.&lt;/p&gt;\\n","pos":[249766,249809],"source":"\\n<p>This type parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This type parameter is not used.&lt;/p&gt;\\n","pos":[249848,249891],"source":"\\n<p>This type parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This type parameter is not used.&lt;/p&gt;\\n","pos":[249928,249971],"source":"\\n<p>This type parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This type parameter is not used.&lt;/p&gt;\\n","pos":[250011,250054],"source":"\\n<p>This type parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[250396,250489],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;action&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[250594,250688],"source":"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[250787,250865],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[253261,253454],"content":"GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>, IEqualityComparer<TKey>)","needQuote":true,"nodes":[{"content":"GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(ParallelQuery&lt;TOuter&gt;, IEnumerable&lt;TInner&gt;, Func&lt;TOuter, TKey&gt;, Func&lt;TInner, TKey&gt;, Func&lt;TOuter, IEnumerable&lt;TInner&gt;, TResult&gt;, IEqualityComparer&lt;TKey&gt;)","pos":[0,193],"source":"GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>, IEqualityComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[255796,255834],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[255933,255971],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[256061,256099],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[256189,256227],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[256367,256405],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[256511,256549],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This type parameter is not used.&lt;/p&gt;\\n","pos":[256608,256651],"source":"\\n<p>This type parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This type parameter is not used.&lt;/p&gt;\\n","pos":[256690,256733],"source":"\\n<p>This type parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This type parameter is not used.&lt;/p&gt;\\n","pos":[256770,256813],"source":"\\n<p>This type parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This type parameter is not used.&lt;/p&gt;\\n","pos":[256853,256896],"source":"\\n<p>This type parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that occurs when this method is called.&lt;/p&gt;\\n","pos":[257228,257292],"source":"\\n<p>The exception that occurs when this method is called.</p>\\n"},{"pos":[259635,259805],"content":"GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>)","needQuote":true,"nodes":[{"content":"GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(ParallelQuery&lt;TOuter&gt;, ParallelQuery&lt;TInner&gt;, Func&lt;TOuter, TKey&gt;, Func&lt;TInner, TKey&gt;, Func&lt;TOuter, IEnumerable&lt;TInner&gt;, TResult&gt;)","pos":[0,170],"source":"GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>)"}]},{"content":"\\n&lt;p&gt;The first sequence to join.&lt;/p&gt;\\n","pos":[261379,261417],"source":"\\n<p>The first sequence to join.</p>\\n"},{"content":"\\n&lt;p&gt;The sequence to join to the first sequence.&lt;/p&gt;\\n","pos":[261503,261557],"source":"\\n<p>The sequence to join to the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract the join key from each element of the first sequence.&lt;/p&gt;\\n","pos":[261647,261733],"source":"\\n<p>A function to extract the join key from each element of the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract the join key from each element of the second sequence.&lt;/p&gt;\\n","pos":[261823,261910],"source":"\\n<p>A function to extract the join key from each element of the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.&lt;/p&gt;\\n","pos":[262050,262202],"source":"\\n<p>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the second sequence.&lt;/p&gt;\\n","pos":[262261,262320],"source":"\\n<p>The type of the elements of the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the first sequence.&lt;/p&gt;\\n","pos":[262359,262417],"source":"\\n<p>The type of the elements of the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the keys returned by the key selector functions.&lt;/p&gt;\\n","pos":[262454,262525],"source":"\\n<p>The type of the keys returned by the key selector functions.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result elements.&lt;/p&gt;\\n","pos":[262565,262608],"source":"\\n<p>The type of the result elements.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that has elements of type &lt;em&gt;TResult&lt;/em&gt; that are obtained by performing a grouped join on two sequences.&lt;/p&gt;\\n","pos":[262691,262820],"source":"\\n<p>A sequence that has elements of type <em>TResult</em> that are obtained by performing a grouped join on two sequences.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[262949,263042],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;action&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[263147,263241],"source":"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[263340,263418],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[265340,265535],"content":"GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>, IEqualityComparer<TKey>)","needQuote":true,"nodes":[{"content":"GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(ParallelQuery&lt;TOuter&gt;, ParallelQuery&lt;TInner&gt;, Func&lt;TOuter, TKey&gt;, Func&lt;TInner, TKey&gt;, Func&lt;TOuter, IEnumerable&lt;TInner&gt;, TResult&gt;, IEqualityComparer&lt;TKey&gt;)","pos":[0,195],"source":"GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>, IEqualityComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;The first sequence to join.&lt;/p&gt;\\n","pos":[267320,267358],"source":"\\n<p>The first sequence to join.</p>\\n"},{"content":"\\n&lt;p&gt;The sequence to join to the first sequence.&lt;/p&gt;\\n","pos":[267444,267498],"source":"\\n<p>The sequence to join to the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract the join key from each element of the first sequence.&lt;/p&gt;\\n","pos":[267588,267674],"source":"\\n<p>A function to extract the join key from each element of the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract the join key from each element of the second sequence.&lt;/p&gt;\\n","pos":[267764,267851],"source":"\\n<p>A function to extract the join key from each element of the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.&lt;/p&gt;\\n","pos":[267991,268143],"source":"\\n<p>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the second sequence.&lt;/p&gt;\\n","pos":[268454,268513],"source":"\\n<p>The type of the elements of the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the first sequence.&lt;/p&gt;\\n","pos":[268552,268610],"source":"\\n<p>The type of the elements of the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the keys returned by the key selector functions.&lt;/p&gt;\\n","pos":[268647,268718],"source":"\\n<p>The type of the keys returned by the key selector functions.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result elements.&lt;/p&gt;\\n","pos":[268758,268801],"source":"\\n<p>The type of the result elements.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that has elements of type &lt;em&gt;TResult&lt;/em&gt; that are obtained by performing a grouped join on two sequences.&lt;/p&gt;\\n","pos":[268884,269013],"source":"\\n<p>A sequence that has elements of type <em>TResult</em> that are obtained by performing a grouped join on two sequences.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[269142,269235],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;action&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[269340,269434],"source":"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[269533,269611],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[271237,271301],"content":"Intersect<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"Intersect&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, IEnumerable&lt;TSource&gt;)","pos":[0,64],"source":"Intersect<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[273041,273079],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[273180,273218],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This type parameter is not used.&lt;/p&gt;\\n","pos":[273278,273321],"source":"\\n<p>This type parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that occurs when this method is called.&lt;/p&gt;\\n","pos":[273653,273717],"source":"\\n<p>The exception that occurs when this method is called.</p>\\n"},{"pos":[275292,275384],"content":"Intersect<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)","needQuote":true,"nodes":[{"content":"Intersect&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, IEnumerable&lt;TSource&gt;, IEqualityComparer&lt;TSource&gt;)","pos":[0,92],"source":"Intersect<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)"}]},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[277259,277297],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[277398,277436],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[277545,277583],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This type parameter is not used.&lt;/p&gt;\\n","pos":[277643,277686],"source":"\\n<p>This type parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that occurs when this method is called.&lt;/p&gt;\\n","pos":[278018,278082],"source":"\\n<p>The exception that occurs when this method is called.</p>\\n"},{"pos":[279616,279682],"content":"Intersect<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)","needQuote":true,"nodes":[{"content":"Intersect&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, ParallelQuery&lt;TSource&gt;)","pos":[0,66],"source":"Intersect<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)"}]},{"content":"\\n&lt;p&gt;A sequence whose distinct elements that also appear in &lt;em&gt;second&lt;/em&gt; will be returned.&lt;/p&gt;\\n","pos":[280736,280835],"source":"\\n<p>A sequence whose distinct elements that also appear in <em>second</em> will be returned.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence whose distinct elements that also appear in the first sequence will be returned.&lt;/p&gt;\\n","pos":[280923,281025],"source":"\\n<p>A sequence whose distinct elements that also appear in the first sequence will be returned.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\\n","pos":[281085,281144],"source":"\\n<p>The type of the elements of the input sequences.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that contains the elements that form the set intersection of two sequences.&lt;/p&gt;\\n","pos":[281227,281324],"source":"\\n<p>A sequence that contains the elements that form the set intersection of two sequences.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[281453,281546],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;action&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[281651,281745],"source":"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[281844,281922],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[283023,283117],"content":"Intersect<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)","needQuote":true,"nodes":[{"content":"Intersect&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, ParallelQuery&lt;TSource&gt;, IEqualityComparer&lt;TSource&gt;)","pos":[0,94],"source":"Intersect<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)"}]},{"content":"\\n&lt;p&gt;A sequence whose distinct elements that also appear in &lt;em&gt;second&lt;/em&gt; will be returned.&lt;/p&gt;\\n","pos":[284311,284410],"source":"\\n<p>A sequence whose distinct elements that also appear in <em>second</em> will be returned.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence whose distinct elements that also appear in the first sequence will be returned.&lt;/p&gt;\\n","pos":[284498,284600],"source":"\\n<p>A sequence whose distinct elements that also appear in the first sequence will be returned.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\\n","pos":[284908,284967],"source":"\\n<p>The type of the elements of the input sequences.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that contains the elements that form the set intersection of two sequences.&lt;/p&gt;\\n","pos":[285050,285147],"source":"\\n<p>A sequence that contains the elements that form the set intersection of two sequences.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[285276,285369],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;action&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[285474,285568],"source":"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[285667,285745],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[287069,287219],"content":"Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)","needQuote":true,"nodes":[{"content":"Join&lt;TOuter, TInner, TKey, TResult&gt;(ParallelQuery&lt;TOuter&gt;, IEnumerable&lt;TInner&gt;, Func&lt;TOuter, TKey&gt;, Func&lt;TInner, TKey&gt;, Func&lt;TOuter, TInner, TResult&gt;)","pos":[0,150],"source":"Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)"}]},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[289342,289380],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[289479,289517],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[289607,289645],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[289735,289773],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[289873,289911],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This type parameter is not used.&lt;/p&gt;\\n","pos":[289970,290013],"source":"\\n<p>This type parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This type parameter is not used.&lt;/p&gt;\\n","pos":[290052,290095],"source":"\\n<p>This type parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This type parameter is not used.&lt;/p&gt;\\n","pos":[290132,290175],"source":"\\n<p>This type parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This type parameter is not used.&lt;/p&gt;\\n","pos":[290215,290258],"source":"\\n<p>This type parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[290600,290693],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;action&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[290798,290892],"source":"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[290991,291069],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[293222,293397],"content":"Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>)","needQuote":true,"nodes":[{"content":"Join&lt;TOuter, TInner, TKey, TResult&gt;(ParallelQuery&lt;TOuter&gt;, IEnumerable&lt;TInner&gt;, Func&lt;TOuter, TKey&gt;, Func&lt;TInner, TKey&gt;, Func&lt;TOuter, TInner, TResult&gt;, IEqualityComparer&lt;TKey&gt;)","pos":[0,175],"source":"Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[295647,295685],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[295784,295822],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[295912,295950],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[296040,296078],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[296178,296216],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[296322,296360],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This type parameter is not used.&lt;/p&gt;\\n","pos":[296419,296462],"source":"\\n<p>This type parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This type parameter is not used.&lt;/p&gt;\\n","pos":[296501,296544],"source":"\\n<p>This type parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This type parameter is not used.&lt;/p&gt;\\n","pos":[296581,296624],"source":"\\n<p>This type parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This type parameter is not used.&lt;/p&gt;\\n","pos":[296664,296707],"source":"\\n<p>This type parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that occurs when this method is called.&lt;/p&gt;\\n","pos":[297039,297103],"source":"\\n<p>The exception that occurs when this method is called.</p>\\n"},{"pos":[299203,299355],"content":"Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)","needQuote":true,"nodes":[{"content":"Join&lt;TOuter, TInner, TKey, TResult&gt;(ParallelQuery&lt;TOuter&gt;, ParallelQuery&lt;TInner&gt;, Func&lt;TOuter, TKey&gt;, Func&lt;TInner, TKey&gt;, Func&lt;TOuter, TInner, TResult&gt;)","pos":[0,152],"source":"Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)"}]},{"content":"\\n&lt;p&gt;The first sequence to join.&lt;/p&gt;\\n","pos":[300815,300853],"source":"\\n<p>The first sequence to join.</p>\\n"},{"content":"\\n&lt;p&gt;The sequence to join to the first sequence.&lt;/p&gt;\\n","pos":[300939,300993],"source":"\\n<p>The sequence to join to the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract the join key from each element of the first sequence.&lt;/p&gt;\\n","pos":[301083,301169],"source":"\\n<p>A function to extract the join key from each element of the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract the join key from each element of the second sequence.&lt;/p&gt;\\n","pos":[301259,301346],"source":"\\n<p>A function to extract the join key from each element of the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to create a result element from two matching elements.&lt;/p&gt;\\n","pos":[301446,301522],"source":"\\n<p>A function to create a result element from two matching elements.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the second sequence.&lt;/p&gt;\\n","pos":[301581,301640],"source":"\\n<p>The type of the elements of the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the first sequence.&lt;/p&gt;\\n","pos":[301679,301737],"source":"\\n<p>The type of the elements of the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the keys returned by the key selector functions.&lt;/p&gt;\\n","pos":[301774,301845],"source":"\\n<p>The type of the keys returned by the key selector functions.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result elements.&lt;/p&gt;\\n","pos":[301885,301928],"source":"\\n<p>The type of the result elements.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that has elements of type &lt;em&gt;TResult&lt;/em&gt; that are obtained by performing an inner join on two sequences.&lt;/p&gt;\\n","pos":[302011,302139],"source":"\\n<p>A sequence that has elements of type <em>TResult</em> that are obtained by performing an inner join on two sequences.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[302268,302361],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;action&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[302466,302560],"source":"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[302659,302737],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[304416,304593],"content":"Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>)","needQuote":true,"nodes":[{"content":"Join&lt;TOuter, TInner, TKey, TResult&gt;(ParallelQuery&lt;TOuter&gt;, ParallelQuery&lt;TInner&gt;, Func&lt;TOuter, TKey&gt;, Func&lt;TInner, TKey&gt;, Func&lt;TOuter, TInner, TResult&gt;, IEqualityComparer&lt;TKey&gt;)","pos":[0,177],"source":"Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;The first sequence to join.&lt;/p&gt;\\n","pos":[306268,306306],"source":"\\n<p>The first sequence to join.</p>\\n"},{"content":"\\n&lt;p&gt;The sequence to join to the first sequence.&lt;/p&gt;\\n","pos":[306392,306446],"source":"\\n<p>The sequence to join to the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract the join key from each element of the first sequence.&lt;/p&gt;\\n","pos":[306536,306622],"source":"\\n<p>A function to extract the join key from each element of the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract the join key from each element of the second sequence.&lt;/p&gt;\\n","pos":[306712,306799],"source":"\\n<p>A function to extract the join key from each element of the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to create a result element from two matching elements.&lt;/p&gt;\\n","pos":[306899,306975],"source":"\\n<p>A function to create a result element from two matching elements.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the second sequence.&lt;/p&gt;\\n","pos":[307286,307345],"source":"\\n<p>The type of the elements of the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the first sequence.&lt;/p&gt;\\n","pos":[307384,307442],"source":"\\n<p>The type of the elements of the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the keys returned by the key selector functions.&lt;/p&gt;\\n","pos":[307479,307550],"source":"\\n<p>The type of the keys returned by the key selector functions.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result elements.&lt;/p&gt;\\n","pos":[307590,307633],"source":"\\n<p>The type of the result elements.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that has elements of type &lt;em&gt;TResult&lt;/em&gt; that are obtained by performing an inner join on two sequences.&lt;/p&gt;\\n","pos":[307716,307844],"source":"\\n<p>A sequence that has elements of type <em>TResult</em> that are obtained by performing an inner join on two sequences.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[307973,308066],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;action&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[308171,308265],"source":"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[308364,308442],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[309813,309850],"content":"Last<TSource>(ParallelQuery<TSource>)","needQuote":true,"nodes":[{"content":"Last&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;)","pos":[0,37],"source":"Last<TSource>(ParallelQuery<TSource>)"}]},{"content":"\\n&lt;p&gt;The sequence to return the last element from.&lt;/p&gt;\\n","pos":[310686,310742],"source":"\\n<p>The sequence to return the last element from.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[310802,310857],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The value at the last position in the source sequence.&lt;/p&gt;\\n","pos":[310915,310980],"source":"\\n<p>The value at the last position in the source sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[311109,311202],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[311307,311382],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[311481,311559],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[311672,311722],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[312524,312585],"content":"Last<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)","needQuote":true,"nodes":[{"content":"Last&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Boolean&gt;)","pos":[0,61],"source":"Last<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)"}]},{"content":"\\n&lt;p&gt;The sequence to return an element from.&lt;/p&gt;\\n","pos":[313567,313617],"source":"\\n<p>The sequence to return an element from.</p>\\n"},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[313709,313768],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[313828,313883],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The last element in the sequence that passes the test in the specified predicate function.&lt;/p&gt;\\n","pos":[313941,314042],"source":"\\n<p>The last element in the sequence that passes the test in the specified predicate function.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[314171,314264],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[314369,314466],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[314565,314643],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;No element in &lt;em&gt;source&lt;/em&gt; satisfies the condition in &lt;em&gt;predicate&lt;/em&gt;.&lt;/p&gt;\\n","pos":[314756,314843],"source":"\\n<p>No element in <em>source</em> satisfies the condition in <em>predicate</em>.</p>\\n"},{"pos":[315695,315741],"content":"LastOrDefault<TSource>(ParallelQuery<TSource>)","needQuote":true,"nodes":[{"content":"LastOrDefault&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;)","pos":[0,46],"source":"LastOrDefault<TSource>(ParallelQuery<TSource>)"}]},{"content":"\\n&lt;p&gt;The sequence to return an element from.&lt;/p&gt;\\n","pos":[316670,316720],"source":"\\n<p>The sequence to return an element from.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[316780,316835],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;default() if the source sequence is empty; otherwise, the last element in the sequence.&lt;/p&gt;\\n","pos":[316893,316991],"source":"\\n<p>default() if the source sequence is empty; otherwise, the last element in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[317120,317213],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[317318,317393],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[317492,317570],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[318435,318505],"content":"LastOrDefault<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)","needQuote":true,"nodes":[{"content":"LastOrDefault&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Boolean&gt;)","pos":[0,70],"source":"LastOrDefault<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)"}]},{"content":"\\n&lt;p&gt;The sequence to return an element from.&lt;/p&gt;\\n","pos":[319561,319611],"source":"\\n<p>The sequence to return an element from.</p>\\n"},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[319703,319762],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[319822,319877],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;default() if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.&lt;/p&gt;\\n","pos":[319935,320115],"source":"\\n<p>default() if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[320244,320337],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[320442,320539],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[320638,320716],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[321592,321634],"content":"LongCount<TSource>(ParallelQuery<TSource>)","needQuote":true,"nodes":[{"content":"LongCount&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;)","pos":[0,42],"source":"LongCount<TSource>(ParallelQuery<TSource>)"}]},{"content":"\\n&lt;p&gt;A sequence that contains elements to be counted.&lt;/p&gt;\\n","pos":[322521,322580],"source":"\\n<p>A sequence that contains elements to be counted.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[322640,322695],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the input sequence.&lt;/p&gt;\\n","pos":[322754,322810],"source":"\\n<p>The number of elements in the input sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[322939,323032],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[323137,323212],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[324588,324654],"content":"LongCount<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)","needQuote":true,"nodes":[{"content":"LongCount&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Boolean&gt;)","pos":[0,66],"source":"LongCount<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)"}]},{"content":"\\n&lt;p&gt;A sequence that contains elements to be counted.&lt;/p&gt;\\n","pos":[325659,325718],"source":"\\n<p>A sequence that contains elements to be counted.</p>\\n"},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[325810,325869],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[325929,325984],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A number that represents how many elements in the sequence satisfy the condition in the predicate function.&lt;/p&gt;\\n","pos":[326043,326161],"source":"\\n<p>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[326290,326383],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[326488,326585],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[327990,328017],"content":"Max(ParallelQuery<Decimal>)","needQuote":true,"nodes":[{"content":"Max(ParallelQuery&lt;Decimal&gt;)","pos":[0,27],"source":"Max(ParallelQuery<Decimal>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[328842,328908],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[328969,329014],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[329143,329236],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[329341,329416],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[329515,329593],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[329706,329756],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[330438,330464],"content":"Max(ParallelQuery<Double>)","needQuote":true,"nodes":[{"content":"Max(ParallelQuery&lt;Double&gt;)","pos":[0,26],"source":"Max(ParallelQuery<Double>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[331283,331349],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[331409,331454],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[331583,331676],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[331781,331856],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[331955,332033],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[332146,332196],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[332871,332896],"content":"Max(ParallelQuery<Int32>)","needQuote":true,"nodes":[{"content":"Max(ParallelQuery&lt;Int32&gt;)","pos":[0,25],"source":"Max(ParallelQuery<Int32>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[333709,333775],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[333834,333879],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[334008,334101],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[334206,334281],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[334380,334458],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[334571,334621],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[335292,335317],"content":"Max(ParallelQuery<Int64>)","needQuote":true,"nodes":[{"content":"Max(ParallelQuery&lt;Int64&gt;)","pos":[0,25],"source":"Max(ParallelQuery<Int64>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[336126,336192],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[336251,336296],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[336425,336518],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[336623,336698],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[336797,336875],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[336988,337038],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[337766,337803],"content":"Max(ParallelQuery<Nullable<Decimal>>)","needQuote":true,"nodes":[{"content":"Max(ParallelQuery&lt;Nullable&lt;Decimal&gt;&gt;)","pos":[0,37],"source":"Max(ParallelQuery<Nullable<Decimal>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[338669,338735],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[338813,338858],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[338987,339080],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[339185,339260],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[339359,339437],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[339550,339600],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[340389,340425],"content":"Max(ParallelQuery<Nullable<Double>>)","needQuote":true,"nodes":[{"content":"Max(ParallelQuery&lt;Nullable&lt;Double&gt;&gt;)","pos":[0,36],"source":"Max(ParallelQuery<Nullable<Double>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[341285,341351],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[341428,341473],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[341602,341695],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[341800,341875],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[341974,342052],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[342165,342215],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[342997,343032],"content":"Max(ParallelQuery<Nullable<Int32>>)","needQuote":true,"nodes":[{"content":"Max(ParallelQuery&lt;Nullable&lt;Int32&gt;&gt;)","pos":[0,35],"source":"Max(ParallelQuery<Nullable<Int32>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[343886,343952],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[344028,344073],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[344202,344295],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[344400,344475],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[344574,344652],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[344765,344815],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[345593,345628],"content":"Max(ParallelQuery<Nullable<Int64>>)","needQuote":true,"nodes":[{"content":"Max(ParallelQuery&lt;Nullable&lt;Int64&gt;&gt;)","pos":[0,35],"source":"Max(ParallelQuery<Nullable<Int64>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[346478,346544],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[346620,346665],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[346794,346887],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[346992,347067],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[347166,347244],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[347357,347407],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[348188,348224],"content":"Max(ParallelQuery<Nullable<Single>>)","needQuote":true,"nodes":[{"content":"Max(ParallelQuery&lt;Nullable&lt;Single&gt;&gt;)","pos":[0,36],"source":"Max(ParallelQuery<Nullable<Single>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[349082,349148],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[349225,349270],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[349399,349492],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[349597,349672],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[349771,349849],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[349962,350012],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[350746,350772],"content":"Max(ParallelQuery<Single>)","needQuote":true,"nodes":[{"content":"Max(ParallelQuery&lt;Single&gt;)","pos":[0,26],"source":"Max(ParallelQuery<Single>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[351589,351655],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[351715,351760],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[351889,351982],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[352087,352162],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[352261,352339],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[352452,352502],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[353159,353195],"content":"Max<TSource>(ParallelQuery<TSource>)","needQuote":true,"nodes":[{"content":"Max&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;)","pos":[0,36],"source":"Max<TSource>(ParallelQuery<TSource>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[354038,354104],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements in the source sequence.&lt;/p&gt;\\n","pos":[354164,354219],"source":"\\n<p>The type of elements in the source sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[354277,354322],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[354451,354544],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[354649,354724],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[354823,354901],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements and &lt;em&gt;TSource&lt;/em&gt; is a non-nullable value type.&lt;/p&gt;\\n","pos":[355014,355114],"source":"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n"},{"pos":[355909,355969],"content":"Max<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)","needQuote":true,"nodes":[{"content":"Max&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Decimal&gt;)","pos":[0,60],"source":"Max<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[356964,357030],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[357121,357178],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[357238,357289],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[357350,357395],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[357524,357617],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[357722,357818],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[357917,357995],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements and &lt;em&gt;TSource&lt;/em&gt; is a non-nullable value type.&lt;/p&gt;\\n","pos":[358108,358208],"source":"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n"},{"pos":[359119,359178],"content":"Max<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)","needQuote":true,"nodes":[{"content":"Max&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Double&gt;)","pos":[0,59],"source":"Max<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[360168,360234],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[360324,360381],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[360441,360492],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[360552,360597],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[360726,360819],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[360924,361020],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[361119,361197],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements and &lt;em&gt;TSource&lt;/em&gt; is a non-nullable value type.&lt;/p&gt;\\n","pos":[361310,361410],"source":"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n"},{"pos":[362314,362372],"content":"Max<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)","needQuote":true,"nodes":[{"content":"Max&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Int32&gt;)","pos":[0,58],"source":"Max<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[363357,363423],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[363512,363569],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[363629,363680],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[363739,363784],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[363913,364006],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[364111,364207],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[364306,364384],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements and &lt;em&gt;TSource&lt;/em&gt; is a non-nullable value type.&lt;/p&gt;\\n","pos":[364497,364597],"source":"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n"},{"pos":[365497,365555],"content":"Max<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)","needQuote":true,"nodes":[{"content":"Max&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Int64&gt;)","pos":[0,58],"source":"Max<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[366536,366602],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[366691,366748],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[366808,366859],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[366918,366963],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[367092,367185],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[367290,367386],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[367485,367563],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements and &lt;em&gt;TSource&lt;/em&gt; is a non-nullable value type.&lt;/p&gt;\\n","pos":[367676,367776],"source":"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n"},{"pos":[368733,368803],"content":"Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)","needQuote":true,"nodes":[{"content":"Max&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Decimal&gt;&gt;)","pos":[0,70],"source":"Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[369822,369888],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[369996,370053],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[370113,370164],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[370242,370287],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[370416,370509],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[370614,370710],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[370809,370887],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[371000,371050],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[372068,372137],"content":"Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)","needQuote":true,"nodes":[{"content":"Max&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Double&gt;&gt;)","pos":[0,69],"source":"Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[373151,373217],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[373324,373381],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[373441,373492],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[373569,373614],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[373743,373836],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[373941,374037],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[374136,374214],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[374327,374377],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[375388,375456],"content":"Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)","needQuote":true,"nodes":[{"content":"Max&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Int32&gt;&gt;)","pos":[0,68],"source":"Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[376465,376531],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[376637,376694],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[376754,376805],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[376881,376926],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[377055,377148],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[377253,377349],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[377448,377526],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[377639,377689],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[378696,378764],"content":"Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)","needQuote":true,"nodes":[{"content":"Max&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Int64&gt;&gt;)","pos":[0,68],"source":"Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[379769,379835],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[379941,379998],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[380058,380109],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[380185,380230],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[380359,380452],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[380557,380653],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[380752,380830],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[380943,380993],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[382003,382072],"content":"Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)","needQuote":true,"nodes":[{"content":"Max&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Single&gt;&gt;)","pos":[0,69],"source":"Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[383084,383150],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[383257,383314],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[383374,383425],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[383502,383547],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[383676,383769],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[383874,383970],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[384069,384147],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[384260,384310],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[385273,385332],"content":"Max<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)","needQuote":true,"nodes":[{"content":"Max&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Single&gt;)","pos":[0,59],"source":"Max<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[386320,386386],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[386476,386533],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[386593,386644],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[386704,386749],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[386878,386971],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[387076,387172],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[387271,387349],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements and &lt;em&gt;TSource&lt;/em&gt; is a non-nullable value type.&lt;/p&gt;\\n","pos":[387462,387562],"source":"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n"},{"pos":[388439,388508],"content":"Max<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, TResult>)","needQuote":true,"nodes":[{"content":"Max&lt;TSource, TResult&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, TResult&gt;)","pos":[0,69],"source":"Max<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, TResult>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[389523,389589],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[389675,389732],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[389792,389843],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value returned by &lt;em&gt;selector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[389883,389946],"source":"\\n<p>The type of the value returned by <em>selector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[390004,390049],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[390178,390271],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[390376,390472],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[390571,390649],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements and &lt;em&gt;TSource&lt;/em&gt; is a non-nullable value type.&lt;/p&gt;\\n","pos":[390762,390862],"source":"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n"},{"pos":[391733,391760],"content":"Min(ParallelQuery<Decimal>)","needQuote":true,"nodes":[{"content":"Min(ParallelQuery&lt;Decimal&gt;)","pos":[0,27],"source":"Min(ParallelQuery<Decimal>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[392585,392651],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[392712,392757],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[392886,392979],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[393084,393159],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[393258,393336],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements and &lt;em&gt;TSource&lt;/em&gt; is a non-nullable value type.&lt;/p&gt;\\n","pos":[393449,393549],"source":"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n"},{"pos":[394231,394257],"content":"Min(ParallelQuery<Double>)","needQuote":true,"nodes":[{"content":"Min(ParallelQuery&lt;Double&gt;)","pos":[0,26],"source":"Min(ParallelQuery<Double>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[395076,395142],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[395202,395247],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[395376,395469],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[395574,395649],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[395748,395826],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements and &lt;em&gt;TSource&lt;/em&gt; is a non-nullable value type.&lt;/p&gt;\\n","pos":[395939,396039],"source":"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n"},{"pos":[396714,396739],"content":"Min(ParallelQuery<Int32>)","needQuote":true,"nodes":[{"content":"Min(ParallelQuery&lt;Int32&gt;)","pos":[0,25],"source":"Min(ParallelQuery<Int32>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[397552,397618],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[397677,397722],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[397851,397944],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[398049,398124],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[398223,398301],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements and &lt;em&gt;TSource&lt;/em&gt; is a non-nullable value type.&lt;/p&gt;\\n","pos":[398414,398514],"source":"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n"},{"pos":[399185,399210],"content":"Min(ParallelQuery<Int64>)","needQuote":true,"nodes":[{"content":"Min(ParallelQuery&lt;Int64&gt;)","pos":[0,25],"source":"Min(ParallelQuery<Int64>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[400019,400085],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[400144,400189],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[400318,400411],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[400516,400591],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[400690,400768],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements and &lt;em&gt;TSource&lt;/em&gt; is a non-nullable value type.&lt;/p&gt;\\n","pos":[400881,400981],"source":"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n"},{"pos":[401709,401746],"content":"Min(ParallelQuery<Nullable<Decimal>>)","needQuote":true,"nodes":[{"content":"Min(ParallelQuery&lt;Nullable&lt;Decimal&gt;&gt;)","pos":[0,37],"source":"Min(ParallelQuery<Nullable<Decimal>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[402612,402678],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[402756,402801],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[402930,403023],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[403128,403203],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[403302,403380],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[403493,403543],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[404332,404368],"content":"Min(ParallelQuery<Nullable<Double>>)","needQuote":true,"nodes":[{"content":"Min(ParallelQuery&lt;Nullable&lt;Double&gt;&gt;)","pos":[0,36],"source":"Min(ParallelQuery<Nullable<Double>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[405228,405294],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[405371,405416],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[405545,405638],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[405743,405818],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[405917,405995],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[406108,406158],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[406940,406975],"content":"Min(ParallelQuery<Nullable<Int32>>)","needQuote":true,"nodes":[{"content":"Min(ParallelQuery&lt;Nullable&lt;Int32&gt;&gt;)","pos":[0,35],"source":"Min(ParallelQuery<Nullable<Int32>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[407829,407895],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[407971,408016],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[408145,408238],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[408343,408418],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[408517,408595],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[408708,408758],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[409536,409571],"content":"Min(ParallelQuery<Nullable<Int64>>)","needQuote":true,"nodes":[{"content":"Min(ParallelQuery&lt;Nullable&lt;Int64&gt;&gt;)","pos":[0,35],"source":"Min(ParallelQuery<Nullable<Int64>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[410421,410487],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[410563,410608],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[410737,410830],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[410935,411010],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[411109,411187],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[411300,411350],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[412131,412167],"content":"Min(ParallelQuery<Nullable<Single>>)","needQuote":true,"nodes":[{"content":"Min(ParallelQuery&lt;Nullable&lt;Single&gt;&gt;)","pos":[0,36],"source":"Min(ParallelQuery<Nullable<Single>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[413025,413091],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[413168,413213],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[413342,413435],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[413540,413615],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[413714,413792],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[413905,413955],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[414689,414715],"content":"Min(ParallelQuery<Single>)","needQuote":true,"nodes":[{"content":"Min(ParallelQuery&lt;Single&gt;)","pos":[0,26],"source":"Min(ParallelQuery<Single>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[415532,415598],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[415658,415703],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[415832,415925],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[416030,416105],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[416204,416282],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements and &lt;em&gt;TSource&lt;/em&gt; is a non-nullable value type.&lt;/p&gt;\\n","pos":[416395,416495],"source":"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n"},{"pos":[417152,417188],"content":"Min<TSource>(ParallelQuery<TSource>)","needQuote":true,"nodes":[{"content":"Min&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;)","pos":[0,36],"source":"Min<TSource>(ParallelQuery<TSource>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[418031,418097],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[418157,418208],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[418266,418311],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[418440,418533],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[418638,418713],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[418812,418890],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements and &lt;em&gt;TSource&lt;/em&gt; is a non-nullable value type.&lt;/p&gt;\\n","pos":[419003,419103],"source":"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n"},{"pos":[419898,419958],"content":"Min<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)","needQuote":true,"nodes":[{"content":"Min&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Decimal&gt;)","pos":[0,60],"source":"Min<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[420953,421019],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[421110,421167],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[421227,421278],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[421339,421384],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[421513,421606],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[421711,421807],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[421906,421984],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements and &lt;em&gt;TSource&lt;/em&gt; is a non-nullable value type.&lt;/p&gt;\\n","pos":[422097,422197],"source":"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n"},{"pos":[423108,423167],"content":"Min<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)","needQuote":true,"nodes":[{"content":"Min&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Double&gt;)","pos":[0,59],"source":"Min<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[424157,424223],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[424313,424370],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[424430,424481],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[424541,424586],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[424715,424808],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[424913,425009],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[425108,425186],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements and &lt;em&gt;TSource&lt;/em&gt; is a non-nullable value type.&lt;/p&gt;\\n","pos":[425299,425399],"source":"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n"},{"pos":[426303,426361],"content":"Min<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)","needQuote":true,"nodes":[{"content":"Min&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Int32&gt;)","pos":[0,58],"source":"Min<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[427346,427412],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[427501,427558],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[427618,427669],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[427728,427773],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[427902,427995],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[428100,428196],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[428295,428373],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements and &lt;em&gt;TSource&lt;/em&gt; is a non-nullable value type.&lt;/p&gt;\\n","pos":[428486,428586],"source":"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n"},{"pos":[429486,429544],"content":"Min<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)","needQuote":true,"nodes":[{"content":"Min&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Int64&gt;)","pos":[0,58],"source":"Min<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[430525,430591],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[430680,430737],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[430797,430848],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[430907,430952],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[431081,431174],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[431279,431375],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[431474,431552],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements and &lt;em&gt;TSource&lt;/em&gt; is a non-nullable value type.&lt;/p&gt;\\n","pos":[431665,431765],"source":"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n"},{"pos":[432722,432792],"content":"Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)","needQuote":true,"nodes":[{"content":"Min&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Decimal&gt;&gt;)","pos":[0,70],"source":"Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[433811,433877],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[433985,434042],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[434102,434153],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[434231,434276],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[434405,434498],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[434603,434699],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[434798,434876],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[434989,435039],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[436057,436126],"content":"Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)","needQuote":true,"nodes":[{"content":"Min&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Double&gt;&gt;)","pos":[0,69],"source":"Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[437140,437206],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[437313,437370],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[437430,437481],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[437558,437603],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[437732,437825],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[437930,438026],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[438125,438203],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[438316,438366],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[439377,439445],"content":"Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)","needQuote":true,"nodes":[{"content":"Min&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Int32&gt;&gt;)","pos":[0,68],"source":"Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[440454,440520],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[440626,440683],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[440743,440794],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[440870,440915],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[441044,441137],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[441242,441338],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[441437,441515],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[441628,441678],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[442685,442753],"content":"Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)","needQuote":true,"nodes":[{"content":"Min&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Int64&gt;&gt;)","pos":[0,68],"source":"Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[443758,443824],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[443930,443987],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[444047,444098],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[444174,444219],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[444348,444441],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[444546,444642],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[444741,444819],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[444932,444982],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[445992,446061],"content":"Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)","needQuote":true,"nodes":[{"content":"Min&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Single&gt;&gt;)","pos":[0,69],"source":"Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[447073,447139],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[447246,447303],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[447363,447414],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[447491,447536],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[447665,447758],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[447863,447959],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[448058,448136],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[448249,448299],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[449262,449321],"content":"Min<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)","needQuote":true,"nodes":[{"content":"Min&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Single&gt;)","pos":[0,59],"source":"Min<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[450309,450375],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[450465,450522],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[450582,450633],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[450693,450738],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[450867,450960],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[451065,451161],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[451260,451338],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements and &lt;em&gt;TSource&lt;/em&gt; is a non-nullable value type.&lt;/p&gt;\\n","pos":[451451,451551],"source":"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n"},{"pos":[452428,452497],"content":"Min<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, TResult>)","needQuote":true,"nodes":[{"content":"Min&lt;TSource, TResult&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, TResult&gt;)","pos":[0,69],"source":"Min<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, TResult>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[453512,453578],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[453664,453721],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[453781,453832],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value returned by &lt;em&gt;selector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[453872,453935],"source":"\\n<p>The type of the value returned by <em>selector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[453993,454038],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[454167,454260],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[454365,454461],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[454560,454638],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements and &lt;em&gt;TSource&lt;/em&gt; is a non-nullable value type.&lt;/p&gt;\\n","pos":[454751,454851],"source":"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n"},{"pos":[455692,455722],"content":"OfType<TResult>(ParallelQuery)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(ParallelQuery)","pos":[0,30],"source":"OfType<TResult>(ParallelQuery)"}]},{"content":"\\n&lt;p&gt;The sequence whose elements to filter.&lt;/p&gt;\\n","pos":[456576,456625],"source":"\\n<p>The sequence whose elements to filter.</p>\\n"},{"content":"\\n&lt;p&gt;The type to filter the elements of the sequence on.&lt;/p&gt;\\n","pos":[456685,456747],"source":"\\n<p>The type to filter the elements of the sequence on.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that contains elements from the input sequence of type .&lt;/p&gt;\\n","pos":[456830,456908],"source":"\\n<p>A sequence that contains elements from the input sequence of type .</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[457027,457102],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[457217,457310],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[457409,457487],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[458228,458295],"content":"OrderBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)","needQuote":true,"nodes":[{"content":"OrderBy&lt;TSource, TKey&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, TKey&gt;)","pos":[0,67],"source":"OrderBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to order.&lt;/p&gt;\\n","pos":[459343,459384],"source":"\\n<p>A sequence of values to order.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract a key from an element.&lt;/p&gt;\\n","pos":[459470,459525],"source":"\\n<p>A function to extract a key from an element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[459585,459636],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[459673,459737],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;An OrderedParallelQuery{TSource} whose elements are sorted according to a key.&lt;/p&gt;\\n","pos":[459827,459916],"source":"\\n<p>An OrderedParallelQuery{TSource} whose elements are sorted according to a key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[460035,460134],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[460249,460342],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[460441,460519],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[461559,461643],"content":"OrderBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)","needQuote":true,"nodes":[{"content":"OrderBy&lt;TSource, TKey&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, IComparer&lt;TKey&gt;)","pos":[0,84],"source":"OrderBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to order.&lt;/p&gt;\\n","pos":[462804,462845],"source":"\\n<p>A sequence of values to order.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract a key from an element.&lt;/p&gt;\\n","pos":[462931,462986],"source":"\\n<p>A function to extract a key from an element.</p>\\n"},{"content":"\\n&lt;p&gt;An IComparer{TKey} to compare keys.&lt;/p&gt;\\n","pos":[463084,463130],"source":"\\n<p>An IComparer{TKey} to compare keys.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[463190,463241],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[463278,463342],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;An OrderedParallelQuery{TSource} whose elements are sorted according to a key.&lt;/p&gt;\\n","pos":[463432,463521],"source":"\\n<p>An OrderedParallelQuery{TSource} whose elements are sorted according to a key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[463640,463739],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[463854,463947],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[464046,464124],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[465172,465249],"content":"OrderByDescending<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)","needQuote":true,"nodes":[{"content":"OrderByDescending&lt;TSource, TKey&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, TKey&gt;)","pos":[0,77],"source":"OrderByDescending<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to order.&lt;/p&gt;\\n","pos":[466338,466379],"source":"\\n<p>A sequence of values to order.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract a key from an element.&lt;/p&gt;\\n","pos":[466465,466520],"source":"\\n<p>A function to extract a key from an element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[466580,466631],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[466668,466732],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;An OrderedParallelQuery{TSource} whose elements are sorted descending according to a key.&lt;/p&gt;\\n","pos":[466822,466922],"source":"\\n<p>An OrderedParallelQuery{TSource} whose elements are sorted descending according to a key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[467041,467140],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[467255,467348],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[467447,467525],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[468635,468729],"content":"OrderByDescending<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)","needQuote":true,"nodes":[{"content":"OrderByDescending&lt;TSource, TKey&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, IComparer&lt;TKey&gt;)","pos":[0,94],"source":"OrderByDescending<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to order.&lt;/p&gt;\\n","pos":[469919,469960],"source":"\\n<p>A sequence of values to order.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract a key from an element.&lt;/p&gt;\\n","pos":[470046,470101],"source":"\\n<p>A function to extract a key from an element.</p>\\n"},{"content":"\\n&lt;p&gt;An IComparer{TKey} to compare keys.&lt;/p&gt;\\n","pos":[470199,470245],"source":"\\n<p>An IComparer{TKey} to compare keys.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[470305,470356],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[470393,470457],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;An OrderedParallelQuery{TSource} whose elements are sorted descending according to a key.&lt;/p&gt;\\n","pos":[470547,470647],"source":"\\n<p>An OrderedParallelQuery{TSource} whose elements are sorted descending according to a key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;KeySelector&lt;/em&gt; is a null reference (Nothing in Visual Basic)..&lt;/p&gt;\\n","pos":[470766,470866],"source":"\\n<p>\\n<em>source</em> or <em>KeySelector</em> is a null reference (Nothing in Visual Basic)..</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[470981,471074],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[471173,471251],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[472190,472209],"content":"Range(Int32, Int32)","needQuote":true,"nodes":[{"content":"Range(Int32, Int32)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The value of the first integer in the sequence.&lt;/p&gt;\\n","pos":[472990,473048],"source":"\\n<p>The value of the first integer in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The number of sequential integers to generate.&lt;/p&gt;\\n","pos":[473111,473168],"source":"\\n<p>The number of sequential integers to generate.</p>\\n"},{"content":"\\n&lt;p&gt;An IEnumerable&lt;Int32&gt; in C# or IEnumerable(Of Int32) in Visual Basic that contains a range of sequential integral numbers.&lt;/p&gt;\\n","pos":[473254,473387],"source":"\\n<p>An IEnumerable<Int32> in C# or IEnumerable(Of Int32) in Visual Basic that contains a range of sequential integral numbers.</p>\\n"},{"pos":[474086,474117],"content":"Repeat<TResult>(TResult, Int32)","needQuote":true,"nodes":[{"content":"Repeat&lt;TResult&gt;(TResult, Int32)","pos":[0,31],"source":"Repeat<TResult>(TResult, Int32)"}]},{"content":"\\n&lt;p&gt;The value to be repeated.&lt;/p&gt;\\n","pos":[474928,474964],"source":"\\n<p>The value to be repeated.</p>\\n"},{"content":"\\n&lt;p&gt;The number of times to repeat the value in the generated sequence.&lt;/p&gt;\\n","pos":[475027,475104],"source":"\\n<p>The number of times to repeat the value in the generated sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value to be repeated in the result sequence.&lt;/p&gt;\\n","pos":[475164,475235],"source":"\\n<p>The type of the value to be repeated in the result sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that contains a repeated value.&lt;/p&gt;\\n","pos":[475318,475371],"source":"\\n<p>A sequence that contains a repeated value.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than 0.&lt;/p&gt;\\n","pos":[475502,475545],"source":"\\n<p>\\n<em>count</em> is less than 0.</p>\\n"},{"pos":[476222,476262],"content":"Reverse<TSource>(ParallelQuery<TSource>)","needQuote":true,"nodes":[{"content":"Reverse&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;)","pos":[0,40],"source":"Reverse<TSource>(ParallelQuery<TSource>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to reverse.&lt;/p&gt;\\n","pos":[477152,477195],"source":"\\n<p>A sequence of values to reverse.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[477255,477310],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence whose elements correspond to those of the input sequence in reverse order.&lt;/p&gt;\\n","pos":[477393,477489],"source":"\\n<p>A sequence whose elements correspond to those of the input sequence in reverse order.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[477608,477683],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[477798,477891],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[477990,478068],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[478855,478927],"content":"Select<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, TResult>)","needQuote":true,"nodes":[{"content":"Select&lt;TSource, TResult&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, TResult&gt;)","pos":[0,72],"source":"Select<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, TResult>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to invoke a transform function on.&lt;/p&gt;\\n","pos":[479950,480016],"source":"\\n<p>A sequence of values to invoke a transform function on.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[480102,480159],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[480219,480274],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements resturned by selector.&lt;/p&gt;\\n","pos":[480314,480368],"source":"\\n<p>The type of elements resturned by selector.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence whose elements are the result of invoking the transform function on each element of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[480451,480573],"source":"\\n<p>A sequence whose elements are the result of invoking the transform function on each element of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[480692,480788],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[480903,480996],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[481095,481173],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[482143,482222],"content":"Select<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, Int32, TResult>)","needQuote":true,"nodes":[{"content":"Select&lt;TSource, TResult&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Int32, TResult&gt;)","pos":[0,79],"source":"Select<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, Int32, TResult>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to invoke a transform function on.&lt;/p&gt;\\n","pos":[483310,483376],"source":"\\n<p>A sequence of values to invoke a transform function on.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[483475,483532],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[483592,483647],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements resturned by selector.&lt;/p&gt;\\n","pos":[483687,483741],"source":"\\n<p>The type of elements resturned by selector.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence whose elements are the result of invoking the transform function on each element of &lt;em&gt;source&lt;/em&gt;, based on the index supplied to &lt;em&gt;selector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[483824,483996],"source":"\\n<p>A sequence whose elements are the result of invoking the transform function on each element of <em>source</em>, based on the index supplied to <em>selector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[484115,484211],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[484326,484419],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[484518,484596],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[485982,486071],"content":"SelectMany<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, IEnumerable<TResult>>)","needQuote":true,"nodes":[{"content":"SelectMany&lt;TSource, TResult&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, IEnumerable&lt;TResult&gt;&gt;)","pos":[0,89],"source":"SelectMany<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, IEnumerable<TResult>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to project.&lt;/p&gt;\\n","pos":[487325,487368],"source":"\\n<p>A sequence of values to project.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[487494,487551],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[487611,487662],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the sequence returned by selector.&lt;/p&gt;\\n","pos":[487702,487775],"source":"\\n<p>The type of the elements of the sequence returned by selector.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.&lt;/p&gt;\\n","pos":[487858,487995],"source":"\\n<p>A sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[488114,488210],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[488325,488418],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[488517,488595],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[489801,489897],"content":"SelectMany<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, Int32, IEnumerable<TResult>>)","needQuote":true,"nodes":[{"content":"SelectMany&lt;TSource, TResult&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Int32, IEnumerable&lt;TResult&gt;&gt;)","pos":[0,96],"source":"SelectMany<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, Int32, IEnumerable<TResult>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to project.&lt;/p&gt;\\n","pos":[491260,491303],"source":"\\n<p>A sequence of values to project.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[491442,491499],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[491559,491610],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the sequence returned by selector.&lt;/p&gt;\\n","pos":[491650,491723],"source":"\\n<p>The type of the elements of the sequence returned by selector.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.&lt;/p&gt;\\n","pos":[491806,491943],"source":"\\n<p>A sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[492062,492158],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[492273,492366],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[492702,492780],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[494057,494200],"content":"SelectMany<TSource, TCollection, TResult>(ParallelQuery<TSource>, Func<TSource, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)","needQuote":true,"nodes":[{"content":"SelectMany&lt;TSource, TCollection, TResult&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, IEnumerable&lt;TCollection&gt;&gt;, Func&lt;TSource, TCollection, TResult&gt;)","pos":[0,143],"source":"SelectMany<TSource, TCollection, TResult>(ParallelQuery<TSource>, Func<TSource, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to project.&lt;/p&gt;\\n","pos":[495728,495771],"source":"\\n<p>A sequence of values to project.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each source element; the second parameter of the function represents the index of the source element.&lt;/p&gt;\\n","pos":[495911,496056],"source":"\\n<p>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</p>\\n"},{"content":"\\n&lt;p&gt;A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.&lt;/p&gt;\\n","pos":[496162,496314],"source":"\\n<p>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the intermediate elements collected by &lt;em&gt;collectionSelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[496374,496464],"source":"\\n<p>The type of the intermediate elements collected by <em>collectionSelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[496508,496559],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements in the result sequence.&lt;/p&gt;\\n","pos":[496599,496654],"source":"\\n<p>The type of elements in the result sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence whose elements are the result of invoking the one-to-many transform function &lt;em&gt;collectionSelector&lt;/em&gt; on each element of &lt;em&gt;source&lt;/em&gt; based on the index supplied to &lt;em&gt;collectionSelector&lt;/em&gt;, and then mapping each of those sequence elements and their corresponding source element to a result element.","pos":[496737,497061],"source":"\\n<p>A sequence whose elements are the result of invoking the one-to-many transform function <em>collectionSelector</em> on each element of <em>source</em> based on the index supplied to <em>collectionSelector</em>, and then mapping each of those sequence elements and their corresponding source element to a result element."},{"content":"&lt;/p&gt;\\n","pos":[497062,497068],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[497187,497283],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[497398,497491],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[497827,497905],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[499418,499568],"content":"SelectMany<TSource, TCollection, TResult>(ParallelQuery<TSource>, Func<TSource, Int32, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)","needQuote":true,"nodes":[{"content":"SelectMany&lt;TSource, TCollection, TResult&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Int32, IEnumerable&lt;TCollection&gt;&gt;, Func&lt;TSource, TCollection, TResult&gt;)","pos":[0,150],"source":"SelectMany<TSource, TCollection, TResult>(ParallelQuery<TSource>, Func<TSource, Int32, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to project.&lt;/p&gt;\\n","pos":[501217,501260],"source":"\\n<p>A sequence of values to project.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each source element; the second parameter of the function represents the index of the source element.&lt;/p&gt;\\n","pos":[501413,501558],"source":"\\n<p>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</p>\\n"},{"content":"\\n&lt;p&gt;A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.&lt;/p&gt;\\n","pos":[501664,501816],"source":"\\n<p>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the intermediate elements collected by &lt;em&gt;collectionSelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[501876,501966],"source":"\\n<p>The type of the intermediate elements collected by <em>collectionSelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[502010,502061],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements to return.&lt;/p&gt;\\n","pos":[502101,502143],"source":"\\n<p>The type of elements to return.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence whose elements are the result of invoking the one-to-many transform function &lt;em&gt;collectionSelector&lt;/em&gt; on each element of &lt;em&gt;source&lt;/em&gt; based on the index supplied to &lt;em&gt;collectionSelector&lt;/em&gt;, and then mapping each of those sequence elements and their corresponding source element to a result element.&lt;/p&gt;\\n","pos":[502226,502556],"source":"\\n<p>A sequence whose elements are the result of invoking the one-to-many transform function <em>collectionSelector</em> on each element of <em>source</em> based on the index supplied to <em>collectionSelector</em>, and then mapping each of those sequence elements and their corresponding source element to a result element.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[502675,502771],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[502886,502979],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[503315,503393],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[504785,504853],"content":"SequenceEqual<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"SequenceEqual&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, IEnumerable&lt;TSource&gt;)","pos":[0,68],"source":"SequenceEqual<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[506578,506616],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[506717,506755],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This type parameter is not used.&lt;/p&gt;\\n","pos":[506815,506858],"source":"\\n<p>This type parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;Thrown every time this method is called.&lt;/p&gt;\\n","pos":[507168,507219],"source":"\\n<p>Thrown every time this method is called.</p>\\n"},{"pos":[508822,508918],"content":"SequenceEqual<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)","needQuote":true,"nodes":[{"content":"SequenceEqual&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, IEnumerable&lt;TSource&gt;, IEqualityComparer&lt;TSource&gt;)","pos":[0,96],"source":"SequenceEqual<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)"}]},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[510778,510816],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[510917,510955],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[511064,511102],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This type parameter is not used.&lt;/p&gt;\\n","pos":[511162,511205],"source":"\\n<p>This type parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;Thrown every time this method is called.&lt;/p&gt;\\n","pos":[511515,511566],"source":"\\n<p>Thrown every time this method is called.</p>\\n"},{"pos":[513128,513198],"content":"SequenceEqual<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)","needQuote":true,"nodes":[{"content":"SequenceEqual&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, ParallelQuery&lt;TSource&gt;)","pos":[0,70],"source":"SequenceEqual<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)"}]},{"content":"\\n&lt;p&gt;A sequence to compare to second.&lt;/p&gt;\\n","pos":[514252,514295],"source":"\\n<p>A sequence to compare to second.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence to compare to the first input sequence.&lt;/p&gt;\\n","pos":[514383,514444],"source":"\\n<p>A sequence to compare to the first input sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\\n","pos":[514504,514563],"source":"\\n<p>The type of the elements of the input sequences.</p>\\n"},{"content":"\\n&lt;p&gt;true if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, false.&lt;/p&gt;\\n","pos":[514624,514807],"source":"\\n<p>true if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, false.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[514936,515029],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[515134,515227],"source":"\\n<p>\\n<em>first</em> or <em>second</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[515326,515404],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[516533,516631],"content":"SequenceEqual<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)","needQuote":true,"nodes":[{"content":"SequenceEqual&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, ParallelQuery&lt;TSource&gt;, IEqualityComparer&lt;TSource&gt;)","pos":[0,98],"source":"SequenceEqual<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)"}]},{"content":"\\n&lt;p&gt;A sequence to compare to &lt;em&gt;second&lt;/em&gt;.&lt;/p&gt;\\n","pos":[517810,517862],"source":"\\n<p>A sequence to compare to <em>second</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence to compare to the first input sequence.&lt;/p&gt;\\n","pos":[517950,518011],"source":"\\n<p>A sequence to compare to the first input sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\\n","pos":[518328,518387],"source":"\\n<p>The type of the elements of the input sequences.</p>\\n"},{"content":"\\n&lt;p&gt;true if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, false.&lt;/p&gt;\\n","pos":[518448,518631],"source":"\\n<p>true if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, false.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[518760,518853],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[518958,519051],"source":"\\n<p>\\n<em>first</em> or <em>second</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[519150,519228],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[520241,520280],"content":"Single<TSource>(ParallelQuery<TSource>)","needQuote":true,"nodes":[{"content":"Single&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;)","pos":[0,39],"source":"Single<TSource>(ParallelQuery<TSource>)"}]},{"content":"\\n&lt;p&gt;The sequence to return the single element of.&lt;/p&gt;\\n","pos":[521201,521257],"source":"\\n<p>The sequence to return the single element of.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[521317,521372],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The single element of the input sequence.&lt;/p&gt;\\n","pos":[521430,521482],"source":"\\n<p>The single element of the input sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[521611,521704],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[521809,521884],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[521983,522061],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;The input sequence contains more than one element.","pos":[522174,522229],"source":"\\n<p>The input sequence contains more than one element."},{"content":"-or- The input sequence is empty.&lt;/p&gt;\\n","pos":[522230,522269],"source":" -or- The input sequence is empty.</p>\\n"},{"pos":[523085,523148],"content":"Single<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)","needQuote":true,"nodes":[{"content":"Single&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Boolean&gt;)","pos":[0,63],"source":"Single<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)"}]},{"content":"\\n&lt;p&gt;The sequence to return the single element of.&lt;/p&gt;\\n","pos":[524200,524256],"source":"\\n<p>The sequence to return the single element of.</p>\\n"},{"content":"\\n&lt;p&gt;A function to test an element for a condition.&lt;/p&gt;\\n","pos":[524348,524405],"source":"\\n<p>A function to test an element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[524465,524520],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The single element of the input sequence that satisfies a condition.&lt;/p&gt;\\n","pos":[524578,524657],"source":"\\n<p>The single element of the input sequence that satisfies a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[524786,524879],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[524984,525081],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[525180,525258],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;No element satisfies the condition in &lt;em&gt;predicate&lt;/em&gt;.","pos":[525371,525433],"source":"\\n<p>No element satisfies the condition in <em>predicate</em>."},{"content":"-or- More than one element satisfies the condition in &lt;em&gt;predicate&lt;/em&gt;.&lt;/p&gt;\\n","pos":[525434,525513],"source":" -or- More than one element satisfies the condition in <em>predicate</em>.</p>\\n"},{"pos":[526379,526427],"content":"SingleOrDefault<TSource>(ParallelQuery<TSource>)","needQuote":true,"nodes":[{"content":"SingleOrDefault&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;)","pos":[0,48],"source":"SingleOrDefault<TSource>(ParallelQuery<TSource>)"}]},{"content":"\\n&lt;p&gt;The sequence to return the single element of.&lt;/p&gt;\\n","pos":[527435,527491],"source":"\\n<p>The sequence to return the single element of.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[527551,527606],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The single element of the input sequence, or default() if the sequence contains no elements.&lt;/p&gt;\\n","pos":[527664,527767],"source":"\\n<p>The single element of the input sequence, or default() if the sequence contains no elements.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[527896,527989],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[528094,528169],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[528268,528346],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[529225,529297],"content":"SingleOrDefault<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)","needQuote":true,"nodes":[{"content":"SingleOrDefault&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Boolean&gt;)","pos":[0,72],"source":"SingleOrDefault<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)"}]},{"content":"\\n&lt;p&gt;The sequence to return the single element of.&lt;/p&gt;\\n","pos":[530450,530506],"source":"\\n<p>The sequence to return the single element of.</p>\\n"},{"content":"\\n&lt;p&gt;A function to test an element for a condition.&lt;/p&gt;\\n","pos":[530598,530655],"source":"\\n<p>A function to test an element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[530715,530770],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The single element of the input sequence that satisfies the condition, or default() if no such element is found.&lt;/p&gt;\\n","pos":[530828,530951],"source":"\\n<p>The single element of the input sequence that satisfies the condition, or default() if no such element is found.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[531080,531173],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[531278,531375],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[531474,531552],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is empty or multiple elements are returned.&lt;/p&gt;\\n","pos":[531665,531737],"source":"\\n<p>\\n<em>source</em> is empty or multiple elements are returned.</p>\\n"},{"pos":[532645,532689],"content":"Skip<TSource>(ParallelQuery<TSource>, Int32)","needQuote":true,"nodes":[{"content":"Skip&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Int32)","pos":[0,44],"source":"Skip<TSource>(ParallelQuery<TSource>, Int32)"}]},{"content":"\\n&lt;p&gt;The sequence to return elements from.&lt;/p&gt;\\n","pos":[533656,533704],"source":"\\n<p>The sequence to return elements from.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements to skip before returning the remaining elements.&lt;/p&gt;\\n","pos":[533767,533849],"source":"\\n<p>The number of elements to skip before returning the remaining elements.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[533909,533960],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that contains the elements that occur after the specified index in the input sequence.&lt;/p&gt;\\n","pos":[534043,534151],"source":"\\n<p>A sequence that contains the elements that occur after the specified index in the input sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[534270,534345],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[534460,534553],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[534863,534941],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[535793,535859],"content":"SkipWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)","needQuote":true,"nodes":[{"content":"SkipWhile&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Boolean&gt;)","pos":[0,66],"source":"SkipWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)"}]},{"content":"\\n&lt;p&gt;The sequence to return elements from.&lt;/p&gt;\\n","pos":[536931,536979],"source":"\\n<p>The sequence to return elements from.</p>\\n"},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[537071,537130],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[537190,537241],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.&lt;/p&gt;\\n","pos":[537324,537499],"source":"\\n<p>A sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[537618,537715],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[537830,537923],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[538022,538100],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[539095,539168],"content":"SkipWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Int32, Boolean>)","needQuote":true,"nodes":[{"content":"SkipWhile&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Int32, Boolean&gt;)","pos":[0,73],"source":"SkipWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Int32, Boolean>)"}]},{"content":"\\n&lt;p&gt;The sequence to return elements from.&lt;/p&gt;\\n","pos":[540336,540384],"source":"\\n<p>The sequence to return elements from.</p>\\n"},{"content":"\\n&lt;p&gt;A function to test each source element for a condition; the second parameter of the function represents the index of the source element.","pos":[540489,540630],"source":"\\n<p>A function to test each source element for a condition; the second parameter of the function represents the index of the source element."},{"content":"&lt;/p&gt;\\n","pos":[540631,540637],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[540697,540748],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.&lt;/p&gt;\\n","pos":[540831,541006],"source":"\\n<p>A sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[541125,541222],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[541337,541430],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[541766,541844],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[542745,542772],"content":"Sum(ParallelQuery<Decimal>)","needQuote":true,"nodes":[{"content":"Sum(ParallelQuery&lt;Decimal&gt;)","pos":[0,27],"source":"Sum(ParallelQuery<Decimal>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the sum of.&lt;/p&gt;\\n","pos":[543591,543647],"source":"\\n<p>A sequence of values to calculate the sum of.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values in the sequence.&lt;/p&gt;\\n","pos":[543708,543767],"source":"\\n<p>The sum of the projected values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[543896,543989],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[544094,544169],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[545141,545167],"content":"Sum(ParallelQuery<Double>)","needQuote":true,"nodes":[{"content":"Sum(ParallelQuery&lt;Double&gt;)","pos":[0,26],"source":"Sum(ParallelQuery<Double>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the sum of.&lt;/p&gt;\\n","pos":[545980,546036],"source":"\\n<p>A sequence of values to calculate the sum of.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values in the sequence.&lt;/p&gt;\\n","pos":[546096,546155],"source":"\\n<p>The sum of the projected values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[546284,546377],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[546482,546557],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[547521,547546],"content":"Sum(ParallelQuery<Int32>)","needQuote":true,"nodes":[{"content":"Sum(ParallelQuery&lt;Int32&gt;)","pos":[0,25],"source":"Sum(ParallelQuery<Int32>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the sum of.&lt;/p&gt;\\n","pos":[548353,548409],"source":"\\n<p>A sequence of values to calculate the sum of.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values in the sequence.&lt;/p&gt;\\n","pos":[548468,548527],"source":"\\n<p>The sum of the projected values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[548656,548749],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[548854,548929],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[549888,549913],"content":"Sum(ParallelQuery<Int64>)","needQuote":true,"nodes":[{"content":"Sum(ParallelQuery&lt;Int64&gt;)","pos":[0,25],"source":"Sum(ParallelQuery<Int64>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the sum of.&lt;/p&gt;\\n","pos":[550716,550772],"source":"\\n<p>A sequence of values to calculate the sum of.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values in the sequence.&lt;/p&gt;\\n","pos":[550831,550890],"source":"\\n<p>The sum of the projected values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[551019,551112],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[551217,551292],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[552308,552345],"content":"Sum(ParallelQuery<Nullable<Decimal>>)","needQuote":true,"nodes":[{"content":"Sum(ParallelQuery&lt;Nullable&lt;Decimal&gt;&gt;)","pos":[0,37],"source":"Sum(ParallelQuery<Nullable<Decimal>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the sum of.&lt;/p&gt;\\n","pos":[553205,553261],"source":"\\n<p>A sequence of values to calculate the sum of.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values in the sequence.&lt;/p&gt;\\n","pos":[553339,553398],"source":"\\n<p>The sum of the projected values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[553527,553620],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[553725,553800],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[554879,554915],"content":"Sum(ParallelQuery<Nullable<Double>>)","needQuote":true,"nodes":[{"content":"Sum(ParallelQuery&lt;Nullable&lt;Double&gt;&gt;)","pos":[0,36],"source":"Sum(ParallelQuery<Nullable<Double>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the sum of.&lt;/p&gt;\\n","pos":[555769,555825],"source":"\\n<p>A sequence of values to calculate the sum of.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values in the sequence.&lt;/p&gt;\\n","pos":[555902,555961],"source":"\\n<p>The sum of the projected values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[556090,556183],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[556288,556363],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[557434,557469],"content":"Sum(ParallelQuery<Nullable<Int32>>)","needQuote":true,"nodes":[{"content":"Sum(ParallelQuery&lt;Nullable&lt;Int32&gt;&gt;)","pos":[0,35],"source":"Sum(ParallelQuery<Nullable<Int32>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the sum of.&lt;/p&gt;\\n","pos":[558317,558373],"source":"\\n<p>A sequence of values to calculate the sum of.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values in the sequence.&lt;/p&gt;\\n","pos":[558449,558508],"source":"\\n<p>The sum of the projected values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[558637,558730],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[558835,558910],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[559976,560011],"content":"Sum(ParallelQuery<Nullable<Int64>>)","needQuote":true,"nodes":[{"content":"Sum(ParallelQuery&lt;Nullable&lt;Int64&gt;&gt;)","pos":[0,35],"source":"Sum(ParallelQuery<Nullable<Int64>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the sum of.&lt;/p&gt;\\n","pos":[560855,560911],"source":"\\n<p>A sequence of values to calculate the sum of.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values in the sequence.&lt;/p&gt;\\n","pos":[560987,561046],"source":"\\n<p>The sum of the projected values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[561175,561268],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[561373,561448],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[562517,562553],"content":"Sum(ParallelQuery<Nullable<Single>>)","needQuote":true,"nodes":[{"content":"Sum(ParallelQuery&lt;Nullable&lt;Single&gt;&gt;)","pos":[0,36],"source":"Sum(ParallelQuery<Nullable<Single>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the sum of.&lt;/p&gt;\\n","pos":[563405,563461],"source":"\\n<p>A sequence of values to calculate the sum of.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values in the sequence.&lt;/p&gt;\\n","pos":[563538,563597],"source":"\\n<p>The sum of the projected values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[563726,563819],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[563924,563999],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[565023,565049],"content":"Sum(ParallelQuery<Single>)","needQuote":true,"nodes":[{"content":"Sum(ParallelQuery&lt;Single&gt;)","pos":[0,26],"source":"Sum(ParallelQuery<Single>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the sum of.&lt;/p&gt;\\n","pos":[565860,565916],"source":"\\n<p>A sequence of values to calculate the sum of.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values in the sequence.&lt;/p&gt;\\n","pos":[565976,566035],"source":"\\n<p>The sum of the projected values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[566164,566257],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[566362,566437],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[567479,567539],"content":"Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Decimal&gt;)","pos":[0,60],"source":"Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the sum of.&lt;/p&gt;\\n","pos":[568577,568633],"source":"\\n<p>A sequence of values to calculate the sum of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[568724,568781],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[568841,568892],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values in the sequence.&lt;/p&gt;\\n","pos":[568953,569012],"source":"\\n<p>The sum of the projected values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[569141,569234],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[569339,569435],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[570636,570695],"content":"Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Double&gt;)","pos":[0,59],"source":"Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the sum of.&lt;/p&gt;\\n","pos":[571728,571784],"source":"\\n<p>A sequence of values to calculate the sum of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[571874,571931],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[571991,572042],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values in the sequence.&lt;/p&gt;\\n","pos":[572102,572161],"source":"\\n<p>The sum of the projected values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[572290,572383],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[572488,572584],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[573777,573835],"content":"Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Int32&gt;)","pos":[0,58],"source":"Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the sum of.&lt;/p&gt;\\n","pos":[574863,574919],"source":"\\n<p>A sequence of values to calculate the sum of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[575008,575065],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements in the source sequence.&lt;/p&gt;\\n","pos":[575125,575180],"source":"\\n<p>The type of elements in the source sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values in the sequence.&lt;/p&gt;\\n","pos":[575239,575298],"source":"\\n<p>The sum of the projected values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[575427,575520],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[575625,575721],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[576909,576967],"content":"Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Int64&gt;)","pos":[0,58],"source":"Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the sum of.&lt;/p&gt;\\n","pos":[577991,578047],"source":"\\n<p>A sequence of values to calculate the sum of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[578136,578193],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[578253,578304],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values in the sequence.&lt;/p&gt;\\n","pos":[578363,578422],"source":"\\n<p>The sum of the projected values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[578551,578644],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[578749,578845],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[580090,580160],"content":"Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Decimal&gt;&gt;)","pos":[0,70],"source":"Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the sum of.&lt;/p&gt;\\n","pos":[581222,581278],"source":"\\n<p>A sequence of values to calculate the sum of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[581386,581443],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[581503,581554],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values in the sequence.&lt;/p&gt;\\n","pos":[581632,581691],"source":"\\n<p>The sum of the projected values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[581820,581913],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[582018,582114],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[583422,583491],"content":"Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Double&gt;&gt;)","pos":[0,69],"source":"Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the sum of.&lt;/p&gt;\\n","pos":[584548,584604],"source":"\\n<p>A sequence of values to calculate the sum of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[584711,584768],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[584828,584879],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values in the sequence.&lt;/p&gt;\\n","pos":[584956,585015],"source":"\\n<p>The sum of the projected values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[585144,585237],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[585342,585438],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[586738,586806],"content":"Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Int32&gt;&gt;)","pos":[0,68],"source":"Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the sum of.&lt;/p&gt;\\n","pos":[587858,587914],"source":"\\n<p>A sequence of values to calculate the sum of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[588020,588077],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[588137,588188],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values in the sequence.&lt;/p&gt;\\n","pos":[588264,588323],"source":"\\n<p>The sum of the projected values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[588452,588545],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[588650,588746],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[590041,590109],"content":"Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Int64&gt;&gt;)","pos":[0,68],"source":"Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the sum of.&lt;/p&gt;\\n","pos":[591157,591213],"source":"\\n<p>A sequence of values to calculate the sum of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[591319,591376],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[591436,591487],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values in the sequence.&lt;/p&gt;\\n","pos":[591563,591622],"source":"\\n<p>The sum of the projected values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[591751,591844],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[591949,592045],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[593343,593412],"content":"Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Single&gt;&gt;)","pos":[0,69],"source":"Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the sum of.&lt;/p&gt;\\n","pos":[594467,594523],"source":"\\n<p>A sequence of values to calculate the sum of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[594630,594687],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[594747,594798],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values in the sequence.&lt;/p&gt;\\n","pos":[594875,594934],"source":"\\n<p>The sum of the projected values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[595063,595156],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[595261,595357],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[596610,596669],"content":"Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Single&gt;)","pos":[0,59],"source":"Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the sum of.&lt;/p&gt;\\n","pos":[597700,597756],"source":"\\n<p>A sequence of values to calculate the sum of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[597846,597903],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[597963,598014],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values in the sequence.&lt;/p&gt;\\n","pos":[598074,598133],"source":"\\n<p>The sum of the projected values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[598262,598355],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[598460,598556],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"pos":[599701,599745],"content":"Take<TSource>(ParallelQuery<TSource>, Int32)","needQuote":true,"nodes":[{"content":"Take&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Int32)","pos":[0,44],"source":"Take<TSource>(ParallelQuery<TSource>, Int32)"}]},{"content":"\\n&lt;p&gt;The sequence to return elements from.&lt;/p&gt;\\n","pos":[600697,600745],"source":"\\n<p>The sequence to return elements from.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements to return.&lt;/p&gt;\\n","pos":[600808,600852],"source":"\\n<p>The number of elements to return.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[600912,600963],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that contains the specified number of elements from the start of the input sequence.&lt;/p&gt;\\n","pos":[601046,601152],"source":"\\n<p>A sequence that contains the specified number of elements from the start of the input sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[601271,601346],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[601461,601554],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[601653,601731],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[602583,602649],"content":"TakeWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)","needQuote":true,"nodes":[{"content":"TakeWhile&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Boolean&gt;)","pos":[0,66],"source":"TakeWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)"}]},{"content":"\\n&lt;p&gt;The sequence to return elements from.&lt;/p&gt;\\n","pos":[603682,603730],"source":"\\n<p>The sequence to return elements from.</p>\\n"},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[603822,603881],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[603941,603992],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.&lt;/p&gt;\\n","pos":[604075,604213],"source":"\\n<p>A sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[604332,604429],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[604544,604637],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[604736,604814],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[605809,605882],"content":"TakeWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Int32, Boolean>)","needQuote":true,"nodes":[{"content":"TakeWhile&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Int32, Boolean&gt;)","pos":[0,73],"source":"TakeWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Int32, Boolean>)"}]},{"content":"\\n&lt;p&gt;The sequence to return elements from.&lt;/p&gt;\\n","pos":[607011,607059],"source":"\\n<p>The sequence to return elements from.</p>\\n"},{"content":"\\n&lt;p&gt;A function to test each source element for a condition; the second parameter of the function represents the index of the source element.","pos":[607164,607305],"source":"\\n<p>A function to test each source element for a condition; the second parameter of the function represents the index of the source element."},{"content":"&lt;/p&gt;\\n","pos":[607306,607312],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[607372,607423],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that contains elements from the input sequence that occur before the element at which the test no longer passes.&lt;/p&gt;\\n","pos":[607506,607640],"source":"\\n<p>A sequence that contains elements from the input sequence that occur before the element at which the test no longer passes.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[607759,607856],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[607971,608064],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[608401,608479],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[609449,609522],"content":"ThenBy<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>)","needQuote":true,"nodes":[{"content":"ThenBy&lt;TSource, TKey&gt;(OrderedParallelQuery&lt;TSource&gt;, Func&lt;TSource, TKey&gt;)","pos":[0,73],"source":"ThenBy<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>)"}]},{"content":"\\n&lt;p&gt;An OrderedParallelQuery{TSource} that contains elements to sort.&lt;/p&gt;\\n","pos":[610622,610697],"source":"\\n<p>An OrderedParallelQuery{TSource} that contains elements to sort.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract a key from an element.&lt;/p&gt;\\n","pos":[610783,610838],"source":"\\n<p>A function to extract a key from an element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[610898,610949],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[610986,611050],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;An OrderedParallelQuery{TSource} whose elements are sorted according to a key.&lt;/p&gt;\\n","pos":[611140,611229],"source":"\\n<p>An OrderedParallelQuery{TSource} whose elements are sorted according to a key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[611348,611447],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[611562,611655],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[611754,611832],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[612914,613004],"content":"ThenBy<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)","needQuote":true,"nodes":[{"content":"ThenBy&lt;TSource, TKey&gt;(OrderedParallelQuery&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, IComparer&lt;TKey&gt;)","pos":[0,90],"source":"ThenBy<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;An OrderedParallelQuery{TSource} that contains elements to sort.&lt;/p&gt;\\n","pos":[614217,614292],"source":"\\n<p>An OrderedParallelQuery{TSource} that contains elements to sort.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract a key from an element.&lt;/p&gt;\\n","pos":[614378,614433],"source":"\\n<p>A function to extract a key from an element.</p>\\n"},{"content":"\\n&lt;p&gt;An IComparer{TKey} to compare keys.&lt;/p&gt;\\n","pos":[614531,614577],"source":"\\n<p>An IComparer{TKey} to compare keys.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[614637,614688],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[614725,614789],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;An OrderedParallelQuery{TSource} whose elements are sorted according to a key.&lt;/p&gt;\\n","pos":[614879,614968],"source":"\\n<p>An OrderedParallelQuery{TSource} whose elements are sorted according to a key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[615087,615186],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[615301,615394],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[615493,615571],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[616661,616744],"content":"ThenByDescending<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>)","needQuote":true,"nodes":[{"content":"ThenByDescending&lt;TSource, TKey&gt;(OrderedParallelQuery&lt;TSource&gt;, Func&lt;TSource, TKey&gt;)","pos":[0,83],"source":"ThenByDescending<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>)"}]},{"content":"\\n&lt;p&gt;An OrderedParallelQuery{TSource} that contains elements to sort.&lt;/p&gt;\\n","pos":[617886,617961],"source":"\\n<p>An OrderedParallelQuery{TSource} that contains elements to sort.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract a key from an element.&lt;/p&gt;\\n","pos":[618047,618102],"source":"\\n<p>A function to extract a key from an element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[618162,618213],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[618250,618314],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence whose elements are sorted descending according to a key.&lt;/p&gt;\\n","pos":[618404,618482],"source":"\\n<p>A sequence whose elements are sorted descending according to a key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[618601,618700],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[618815,618908],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[619007,619085],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[620237,620337],"content":"ThenByDescending<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)","needQuote":true,"nodes":[{"content":"ThenByDescending&lt;TSource, TKey&gt;(OrderedParallelQuery&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, IComparer&lt;TKey&gt;)","pos":[0,100],"source":"ThenByDescending<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;An OrderedParallelQuery{TSource} that contains elements to sort.&lt;/p&gt;\\n","pos":[621591,621666],"source":"\\n<p>An OrderedParallelQuery{TSource} that contains elements to sort.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract a key from an element.&lt;/p&gt;\\n","pos":[621752,621807],"source":"\\n<p>A function to extract a key from an element.</p>\\n"},{"content":"\\n&lt;p&gt;An IComparer{TKey} to compare keys.&lt;/p&gt;\\n","pos":[621905,621951],"source":"\\n<p>An IComparer{TKey} to compare keys.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[622011,622062],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[622099,622163],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence whose elements are sorted descending according to a key.&lt;/p&gt;\\n","pos":[622253,622331],"source":"\\n<p>A sequence whose elements are sorted descending according to a key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[622450,622549],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[622664,622757],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[622856,622934],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[623953,623993],"content":"ToArray<TSource>(ParallelQuery<TSource>)","needQuote":true,"nodes":[{"content":"ToArray&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;)","pos":[0,40],"source":"ToArray<TSource>(ParallelQuery<TSource>)"}]},{"content":"\\n&lt;p&gt;A sequence to create an array from.&lt;/p&gt;\\n","pos":[624909,624955],"source":"\\n<p>A sequence to create an array from.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[625015,625070],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;An array that contains the elements from the input sequence.&lt;/p&gt;\\n","pos":[625130,625201],"source":"\\n<p>An array that contains the elements from the input sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[625330,625423],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[625528,625603],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[625702,625780],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[626585,626657],"content":"ToDictionary<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)","needQuote":true,"nodes":[{"content":"ToDictionary&lt;TSource, TKey&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, TKey&gt;)","pos":[0,72],"source":"ToDictionary<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)"}]},{"content":"\\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\\n","pos":[628111,628168],"source":"\\n<p>A function to extract a key from each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[628228,628283],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[628320,628384],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[628758,628851],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[628956,629055],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keySelector&lt;/em&gt; produces a key that is a null reference (Nothing in Visual Basic).","pos":[629154,629248],"source":"\\n<p>\\n<em>keySelector</em> produces a key that is a null reference (Nothing in Visual Basic)."},{"content":"-or- &lt;em&gt;keySelector&lt;/em&gt; produces duplicate keys for two elements.","pos":[629249,629316],"source":" -or- <em>keySelector</em> produces duplicate keys for two elements."},{"content":"-or- One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[629317,629395],"source":" -or- One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[630494,630591],"content":"ToDictionary<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)","needQuote":true,"nodes":[{"content":"ToDictionary&lt;TSource, TKey&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, IEqualityComparer&lt;TKey&gt;)","pos":[0,97],"source":"ToDictionary<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\\n","pos":[632189,632246],"source":"\\n<p>A function to extract a key from each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[632549,632604],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[632641,632705],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[633079,633172],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[633277,633376],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keySelector&lt;/em&gt; produces a key that is a null reference (Nothing in Visual Basic).","pos":[633475,633569],"source":"\\n<p>\\n<em>keySelector</em> produces a key that is a null reference (Nothing in Visual Basic)."},{"content":"-or- &lt;em&gt;keySelector&lt;/em&gt; produces duplicate keys for two elements.","pos":[633570,633637],"source":" -or- <em>keySelector</em> produces duplicate keys for two elements."},{"content":"-or- One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[633638,633716],"source":" -or- One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[634864,634971],"content":"ToDictionary<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)","needQuote":true,"nodes":[{"content":"ToDictionary&lt;TSource, TKey, TElement&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, Func&lt;TSource, TElement&gt;)","pos":[0,107],"source":"ToDictionary<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)"}]},{"content":"\\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\\n","pos":[636597,636654],"source":"\\n<p>A function to extract a key from each element.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to produce a result element value from each element.","pos":[636748,636826],"source":"\\n<p>A transform function to produce a result element value from each element."},{"content":"&lt;/p&gt;\\n","pos":[636827,636833],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[636893,636948],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[636985,637049],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value returned by &lt;em&gt;elementSelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[637090,637160],"source":"\\n<p>The type of the value returned by <em>elementSelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[637584,637677],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; or &lt;em&gt;elementSelector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[637782,637909],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keySelector&lt;/em&gt; produces a key that is a null reference (Nothing in Visual Basic).","pos":[638008,638102],"source":"\\n<p>\\n<em>keySelector</em> produces a key that is a null reference (Nothing in Visual Basic)."},{"content":"-or- &lt;em&gt;keySelector&lt;/em&gt; produces duplicate keys for two elements.","pos":[638103,638170],"source":" -or- <em>keySelector</em> produces duplicate keys for two elements."},{"content":"-or- One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[638171,638249],"source":" -or- One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[639567,639699],"content":"ToDictionary<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)","needQuote":true,"nodes":[{"content":"ToDictionary&lt;TSource, TKey, TElement&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, Func&lt;TSource, TElement&gt;, IEqualityComparer&lt;TKey&gt;)","pos":[0,132],"source":"ToDictionary<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\\n","pos":[641477,641534],"source":"\\n<p>A function to extract a key from each element.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to produce a result element value from each element.&lt;/p&gt;\\n","pos":[641628,641712],"source":"\\n<p>A transform function to produce a result element value from each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[642015,642070],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[642107,642171],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value returned by &lt;em&gt;elementSelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[642212,642282],"source":"\\n<p>The type of the value returned by <em>elementSelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[642706,642799],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; or &lt;em&gt;elementSelector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[642904,643031],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keySelector&lt;/em&gt; produces a key that is a null reference (Nothing in Visual Basic).","pos":[643130,643224],"source":"\\n<p>\\n<em>keySelector</em> produces a key that is a null reference (Nothing in Visual Basic)."},{"content":"-or- &lt;em&gt;keySelector&lt;/em&gt; produces duplicate keys for two elements.","pos":[643225,643292],"source":" -or- <em>keySelector</em> produces duplicate keys for two elements."},{"content":"-or- One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[643293,643371],"source":" -or- One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[644531,644570],"content":"ToList<TSource>(ParallelQuery<TSource>)","needQuote":true,"nodes":[{"content":"ToList&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;)","pos":[0,39],"source":"ToList<TSource>(ParallelQuery<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[645774,645829],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[646202,646295],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[646400,646475],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[646574,646652],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[647441,647509],"content":"ToLookup<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)","needQuote":true,"nodes":[{"content":"ToLookup&lt;TSource, TKey&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, TKey&gt;)","pos":[0,68],"source":"ToLookup<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)"}]},{"content":"\\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\\n","pos":[648908,648965],"source":"\\n<p>A function to extract a key from each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[649025,649076],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[649113,649177],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[649515,649608],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[649713,649812],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[649911,649989],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[651060,651153],"content":"ToLookup<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)","needQuote":true,"nodes":[{"content":"ToLookup&lt;TSource, TKey&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, IEqualityComparer&lt;TKey&gt;)","pos":[0,93],"source":"ToLookup<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\\n","pos":[652695,652752],"source":"\\n<p>A function to extract a key from each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[653055,653106],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[653143,653207],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[653545,653638],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; or is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[653743,653845],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> or is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[653944,654022],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[655142,655245],"content":"ToLookup<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)","needQuote":true,"nodes":[{"content":"ToLookup&lt;TSource, TKey, TElement&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, Func&lt;TSource, TElement&gt;)","pos":[0,103],"source":"ToLookup<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)"}]},{"content":"\\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\\n","pos":[656816,656873],"source":"\\n<p>A function to extract a key from each element.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to produce a result element value from each element.","pos":[656967,657045],"source":"\\n<p>A transform function to produce a result element value from each element."},{"content":"&lt;/p&gt;\\n","pos":[657046,657052],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[657112,657163],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[657200,657264],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value returned by &lt;em&gt;elementSelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[657305,657375],"source":"\\n<p>The type of the value returned by <em>elementSelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[657764,657857],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; or &lt;em&gt;elementSelector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[657962,658089],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[658188,658266],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[659556,659684],"content":"ToLookup<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)","needQuote":true,"nodes":[{"content":"ToLookup&lt;TSource, TKey, TElement&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, Func&lt;TSource, TElement&gt;, IEqualityComparer&lt;TKey&gt;)","pos":[0,128],"source":"ToLookup<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\\n","pos":[661406,661463],"source":"\\n<p>A function to extract a key from each element.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to produce a result element value from each element.","pos":[661557,661635],"source":"\\n<p>A transform function to produce a result element value from each element."},{"content":"&lt;/p&gt;\\n","pos":[661636,661642],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[661945,661996],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[662033,662097],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value returned by &lt;em&gt;elementSelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[662138,662208],"source":"\\n<p>The type of the value returned by <em>elementSelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) that contains values of type TElement selected from the input sequence.&lt;/p&gt;\\n","pos":[662293,662409],"source":"\\n<p>A Lookup<(Of <(TKey, TElement>)>) that contains values of type TElement selected from the input sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[662538,662631],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; or &lt;em&gt;elementSelector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[662736,662863],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[662962,663040],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[664313,664373],"content":"Union<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"Union&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, IEnumerable&lt;TSource&gt;)","pos":[0,60],"source":"Union<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[666094,666132],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[666233,666271],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This type parameter is not used.&lt;/p&gt;\\n","pos":[666331,666374],"source":"\\n<p>This type parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that occurs when this method is called.&lt;/p&gt;\\n","pos":[666706,666770],"source":"\\n<p>The exception that occurs when this method is called.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[666885,666978],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[667077,667155],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[668702,668790],"content":"Union<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)","needQuote":true,"nodes":[{"content":"Union&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, IEnumerable&lt;TSource&gt;, IEqualityComparer&lt;TSource&gt;)","pos":[0,88],"source":"Union<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)"}]},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[670646,670684],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[670785,670823],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[670932,670970],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This type parameter is not used.&lt;/p&gt;\\n","pos":[671030,671073],"source":"\\n<p>This type parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that occurs when this method is called.&lt;/p&gt;\\n","pos":[671405,671469],"source":"\\n<p>The exception that occurs when this method is called.</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[671584,671677],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[671776,671854],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[673360,673422],"content":"Union<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)","needQuote":true,"nodes":[{"content":"Union&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, ParallelQuery&lt;TSource&gt;)","pos":[0,62],"source":"Union<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)"}]},{"content":"\\n&lt;p&gt;A sequence whose distinct elements form the first set for the union.&lt;/p&gt;\\n","pos":[674436,674515],"source":"\\n<p>A sequence whose distinct elements form the first set for the union.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence whose distinct elements form the second set for the union.&lt;/p&gt;\\n","pos":[674603,674683],"source":"\\n<p>A sequence whose distinct elements form the second set for the union.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\\n","pos":[674743,674802],"source":"\\n<p>The type of the elements of the input sequences.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that contains the elements from both input sequences, excluding duplicates.&lt;/p&gt;\\n","pos":[674885,674982],"source":"\\n<p>A sequence that contains the elements from both input sequences, excluding duplicates.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[675101,675194],"source":"\\n<p>\\n<em>first</em> or <em>second</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[675309,675402],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[675501,675579],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[676652,676742],"content":"Union<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)","needQuote":true,"nodes":[{"content":"Union&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, ParallelQuery&lt;TSource&gt;, IEqualityComparer&lt;TSource&gt;)","pos":[0,90],"source":"Union<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)"}]},{"content":"\\n&lt;p&gt;A sequence whose distinct elements form the first set for the union.&lt;/p&gt;\\n","pos":[677894,677973],"source":"\\n<p>A sequence whose distinct elements form the first set for the union.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence whose distinct elements form the second set for the union.&lt;/p&gt;\\n","pos":[678061,678141],"source":"\\n<p>A sequence whose distinct elements form the second set for the union.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\\n","pos":[678449,678508],"source":"\\n<p>The type of the elements of the input sequences.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that contains the elements from both input sequences, excluding duplicates.&lt;/p&gt;\\n","pos":[678591,678688],"source":"\\n<p>A sequence that contains the elements from both input sequences, excluding duplicates.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[678807,678900],"source":"\\n<p>\\n<em>first</em> or <em>second</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[679015,679108],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[679207,679285],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[680359,680421],"content":"Where<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)","needQuote":true,"nodes":[{"content":"Where&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Boolean&gt;)","pos":[0,62],"source":"Where<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)"}]},{"content":"\\n&lt;p&gt;A sequence to filter.&lt;/p&gt;\\n","pos":[681417,681449],"source":"\\n<p>A sequence to filter.</p>\\n"},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[681541,681600],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of source.&lt;/p&gt;\\n","pos":[681660,681706],"source":"\\n<p>The type of the elements of source.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that contains elements from the input sequence that satisfy the condition.&lt;/p&gt;\\n","pos":[681789,681885],"source":"\\n<p>A sequence that contains elements from the input sequence that satisfy the condition.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[682004,682101],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[682216,682309],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[682408,682486],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[683453,683522],"content":"Where<TSource>(ParallelQuery<TSource>, Func<TSource, Int32, Boolean>)","needQuote":true,"nodes":[{"content":"Where&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Func&lt;TSource, Int32, Boolean&gt;)","pos":[0,69],"source":"Where<TSource>(ParallelQuery<TSource>, Func<TSource, Int32, Boolean>)"}]},{"content":"\\n&lt;p&gt;A sequence to filter.&lt;/p&gt;\\n","pos":[684615,684647],"source":"\\n<p>A sequence to filter.</p>\\n"},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[684752,684811],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of source.&lt;/p&gt;\\n","pos":[684871,684917],"source":"\\n<p>The type of the elements of source.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that contains elements from the input sequence that satisfy the condition.&lt;/p&gt;\\n","pos":[685000,685096],"source":"\\n<p>A sequence that contains elements from the input sequence that satisfy the condition.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[685215,685312],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[685427,685520],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[685856,685934],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[686939,687007],"content":"WithCancellation<TSource>(ParallelQuery<TSource>, CancellationToken)","needQuote":true,"nodes":[{"content":"WithCancellation&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, CancellationToken)","pos":[0,68],"source":"WithCancellation<TSource>(ParallelQuery<TSource>, CancellationToken)"}]},{"content":"\\n&lt;p&gt;A ParallelQuery on which to set the option.&lt;/p&gt;\\n","pos":[688121,688175],"source":"\\n<p>A ParallelQuery on which to set the option.</p>\\n"},{"content":"\\n&lt;p&gt;A cancellation token.&lt;/p&gt;\\n","pos":[688272,688304],"source":"\\n<p>A cancellation token.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[688364,688415],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;ParallelQuery representing the same query as source, but with the registered cancellation token.&lt;/p&gt;\\n","pos":[688498,688605],"source":"\\n<p>ParallelQuery representing the same query as source, but with the registered cancellation token.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[689014,689089],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;WithCancellation&lt;/em&gt; is used multiple times in the query.&lt;/p&gt;\\n","pos":[689202,689277],"source":"\\n<p>\\n<em>WithCancellation</em> is used multiple times in the query.</p>\\n"},{"pos":[690220,690283],"content":"WithDegreeOfParallelism<TSource>(ParallelQuery<TSource>, Int32)","needQuote":true,"nodes":[{"content":"WithDegreeOfParallelism&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, Int32)","pos":[0,63],"source":"WithDegreeOfParallelism<TSource>(ParallelQuery<TSource>, Int32)"}]},{"content":"\\n&lt;p&gt;A ParallelQuery on which to set the limit on the degrees of parallelism.&lt;/p&gt;\\n","pos":[691416,691499],"source":"\\n<p>A ParallelQuery on which to set the limit on the degrees of parallelism.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[691898,691949],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;ParallelQuery representing the same query as source, with the limit on the degrees of parallelism set.&lt;/p&gt;\\n","pos":[692032,692145],"source":"\\n<p>ParallelQuery representing the same query as source, with the limit on the degrees of parallelism set.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[692264,692339],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;degreeOfParallelism&lt;/em&gt; is less than 1 or greater than 511.","pos":[692456,692527],"source":"\\n<p>\\n<em>degreeOfParallelism</em> is less than 1 or greater than 511."},{"content":"&lt;/p&gt;\\n","pos":[692528,692534],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;WithDegreeOfParallelism is used multiple times in the query.&lt;/p&gt;\\n","pos":[692647,692718],"source":"\\n<p>WithDegreeOfParallelism is used multiple times in the query.</p>\\n"},{"pos":[693676,693749],"content":"WithExecutionMode<TSource>(ParallelQuery<TSource>, ParallelExecutionMode)","needQuote":true,"nodes":[{"content":"WithExecutionMode&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, ParallelExecutionMode)","pos":[0,73],"source":"WithExecutionMode<TSource>(ParallelQuery<TSource>, ParallelExecutionMode)"}]},{"content":"\\n&lt;p&gt;A ParallelQuery on which to set the option.&lt;/p&gt;\\n","pos":[694771,694825],"source":"\\n<p>A ParallelQuery on which to set the option.</p>\\n"},{"content":"\\n&lt;p&gt;The mode in which to execute the query.&lt;/p&gt;\\n","pos":[694917,694967],"source":"\\n<p>The mode in which to execute the query.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[695027,695078],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;ParallelQuery representing the same query as source, but with the registered execution mode.&lt;/p&gt;\\n","pos":[695161,695264],"source":"\\n<p>ParallelQuery representing the same query as source, but with the registered execution mode.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[695383,695458],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;WithExecutionMode is used multiple times in the query.&lt;/p&gt;\\n","pos":[695819,695884],"source":"\\n<p>WithExecutionMode is used multiple times in the query.</p>\\n"},{"pos":[696881,696952],"content":"WithMergeOptions<TSource>(ParallelQuery<TSource>, ParallelMergeOptions)","needQuote":true,"nodes":[{"content":"WithMergeOptions&lt;TSource&gt;(ParallelQuery&lt;TSource&gt;, ParallelMergeOptions)","pos":[0,71],"source":"WithMergeOptions<TSource>(ParallelQuery<TSource>, ParallelMergeOptions)"}]},{"content":"\\n&lt;p&gt;A ParallelQuery on which to set the option.&lt;/p&gt;\\n","pos":[698014,698068],"source":"\\n<p>A ParallelQuery on which to set the option.</p>\\n"},{"content":"\\n&lt;p&gt;The merge options to set for this query.&lt;/p&gt;\\n","pos":[698158,698209],"source":"\\n<p>The merge options to set for this query.</p>\\n"},{"content":"\\n&lt;p&gt;The type of elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[698269,698320],"source":"\\n<p>The type of elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;ParallelQuery representing the same query as source, but with the registered merge options.&lt;/p&gt;\\n","pos":[698403,698505],"source":"\\n<p>ParallelQuery representing the same query as source, but with the registered merge options.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[698624,698699],"source":"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;WithMergeOptions&lt;/em&gt; is used multiple times in the query.&lt;/p&gt;\\n","pos":[699058,699133],"source":"\\n<p>\\n<em>WithMergeOptions</em> is used multiple times in the query.</p>\\n"},{"pos":[700191,700297],"content":"Zip<TFirst, TSecond, TResult>(ParallelQuery<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, TResult>)","needQuote":true,"nodes":[{"content":"Zip&lt;TFirst, TSecond, TResult&gt;(ParallelQuery&lt;TFirst&gt;, IEnumerable&lt;TSecond&gt;, Func&lt;TFirst, TSecond, TResult&gt;)","pos":[0,106],"source":"Zip<TFirst, TSecond, TResult>(ParallelQuery<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, TResult>)"}]},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[702195,702233],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[702334,702372],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This parameter is not used.&lt;/p&gt;\\n","pos":[702473,702511],"source":"\\n<p>This parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This type parameter is not used.&lt;/p&gt;\\n","pos":[702570,702613],"source":"\\n<p>This type parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This type parameter is not used.&lt;/p&gt;\\n","pos":[702653,702696],"source":"\\n<p>This type parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;This type parameter is not used.&lt;/p&gt;\\n","pos":[702736,702779],"source":"\\n<p>This type parameter is not used.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that occurs when this method is called.&lt;/p&gt;\\n","pos":[703111,703175],"source":"\\n<p>The exception that occurs when this method is called.</p>\\n"},{"pos":[704802,704910],"content":"Zip<TFirst, TSecond, TResult>(ParallelQuery<TFirst>, ParallelQuery<TSecond>, Func<TFirst, TSecond, TResult>)","needQuote":true,"nodes":[{"content":"Zip&lt;TFirst, TSecond, TResult&gt;(ParallelQuery&lt;TFirst&gt;, ParallelQuery&lt;TSecond&gt;, Func&lt;TFirst, TSecond, TResult&gt;)","pos":[0,108],"source":"Zip<TFirst, TSecond, TResult>(ParallelQuery<TFirst>, ParallelQuery<TSecond>, Func<TFirst, TSecond, TResult>)"}]},{"content":"\\n&lt;p&gt;The first sequence to zip.&lt;/p&gt;\\n","pos":[706089,706126],"source":"\\n<p>The first sequence to zip.</p>\\n"},{"content":"\\n&lt;p&gt;The second sequence to zip.&lt;/p&gt;\\n","pos":[706214,706252],"source":"\\n<p>The second sequence to zip.</p>\\n"},{"content":"\\n&lt;p&gt;A function to create a result element from two matching elements.&lt;/p&gt;\\n","pos":[706353,706429],"source":"\\n<p>A function to create a result element from two matching elements.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the first sequence.&lt;/p&gt;\\n","pos":[706488,706546],"source":"\\n<p>The type of the elements of the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the second sequence.&lt;/p&gt;\\n","pos":[706586,706645],"source":"\\n<p>The type of the elements of the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the return elements.&lt;/p&gt;\\n","pos":[706685,706728],"source":"\\n<p>The type of the return elements.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that has elements of type &lt;em&gt;TResult&lt;/em&gt; that are obtained by performing &lt;em&gt;resultSelector&lt;/em&gt; pairwise on two sequences.","pos":[706811,706952],"source":"\\n<p>A sequence that has elements of type <em>TResult</em> that are obtained by performing <em>resultSelector</em> pairwise on two sequences."},{"content":"If the sequence lengths are unequal, this truncates to the length of the shorter sequence.&lt;/p&gt;\\n","pos":[706953,707049],"source":" If the sequence lengths are unequal, this truncates to the length of the shorter sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; or &lt;em&gt;resultSelector&lt;/em&gt; is a null reference (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[707168,707288],"source":"\\n<p>\\n<em>first</em> or <em>second</em> or <em>resultSelector</em> is a null reference (Nothing in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;The query was canceled with the token passed in through &lt;em&gt;WithCancellation&lt;/em&gt;.&lt;/p&gt;\\n","pos":[707403,707496],"source":"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One or more exceptions occurred during the evaluation of the query.&lt;/p&gt;\\n","pos":[707595,707673],"source":"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n"},{"pos":[708447,708458],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[708604,708610],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[708770,708780],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[708875,708883],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[708952,708953],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[708980,708981],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[709051,709059],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[709128,709129],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[709156,709157],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[709340,709354],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[709473,709479],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[709546,709547],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[709597,709603],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[709663,709664],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[709747,709753],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[709820,709821],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[709871,709877],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[709937,709938],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[710152,710174],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[710322,710328],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[710395,710396],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[710446,710452],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[710513,710514]},{"pos":[710569,710575],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[710635,710636],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[710733,710739],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[710806,710807],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[710857,710863],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[710924,710925]},{"pos":[710980,710986],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[711046,711047],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[711292,711323],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[711489,711504],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[711580,711581],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[711631,711637],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[711698,711699]},{"pos":[711754,711760],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[711820,711821],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[711927,711942],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[712018,712019],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[712069,712075],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[712136,712137]},{"pos":[712192,712198],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[712258,712259],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[712489,712502],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[712603,712614],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[712686,712687],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[712714,712715],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[712788,712799],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[712871,712872],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[712899,712900],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[713075,713084],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[713177,713184],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[713252,713253],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[713280,713281],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[713350,713357],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[713425,713426],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[713453,713454],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[713629,713646],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[713755,713770],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[713846,713847],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[713874,713875],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[713952,713967],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[714043,714044],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[714071,714072],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[714217,714223],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[714404,714426],"content":"ParallelQuery<TSource>","needQuote":true,"nodes":[{"content":"ParallelQuery&lt;TSource&gt;","pos":[0,22],"source":"ParallelQuery<TSource>"}]},{"pos":[714626,714639],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"pos":[714690,714691],"content":"<","needQuote":true,"nodes":[]},{"pos":[714718,714725],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[714838,714851],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"content":"(Of","pos":[714903,714906]},{"pos":[714940,714947],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[714980,714981],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[715230,715261],"content":"Func<TSource, TSource, TSource>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, TSource, TSource&gt;","pos":[0,31],"source":"Func<TSource, TSource, TSource>"}]},{"pos":[715464,715468],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[715526,715527],"content":"<","needQuote":true,"nodes":[]},{"pos":[715554,715561],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[715595,715596]},{"pos":[715628,715635],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[715669,715670]},{"pos":[715702,715709],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[715808,715812],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[715871,715874]},{"pos":[715908,715915],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[715949,715950]},{"pos":[715982,715989],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[716023,716024]},{"pos":[716056,716063],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[716096,716097],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[716305,716312],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[716445,716467],"content":"ParallelQuery<TSource>","needQuote":true,"nodes":[{"content":"ParallelQuery&lt;TSource&gt;","pos":[0,22],"source":"ParallelQuery<TSource>"}]},{"pos":[716667,716680],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"pos":[716731,716732],"content":"<","needQuote":true,"nodes":[]},{"pos":[716759,716766],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[716879,716892],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"content":"(Of","pos":[716944,716947]},{"pos":[716981,716988],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[717021,717022],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[717215,717236],"content":"Func<T1, T2, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;T1, T2, TResult&gt;","pos":[0,21],"source":"Func<T1, T2, TResult>"}]},{"pos":[717409,717413],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[717450,717451],"content":"<","needQuote":true,"nodes":[]},{"pos":[717478,717480],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[717509,717510]},{"pos":[717542,717544],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[717573,717574]},{"pos":[717606,717613],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[717712,717716],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[717754,717757]},{"pos":[717791,717793],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[717822,717823]},{"pos":[717855,717857],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[717886,717887]},{"pos":[717919,717926],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[717959,717960],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[718131,718138],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[718240,718251],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"pos":[718444,718483],"content":"Func<TAccumulate, TSource, TAccumulate>","needQuote":true,"nodes":[{"content":"Func&lt;TAccumulate, TSource, TAccumulate&gt;","pos":[0,39],"source":"Func<TAccumulate, TSource, TAccumulate>"}]},{"pos":[718710,718714],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[718772,718773],"content":"<","needQuote":true,"nodes":[]},{"pos":[718800,718811],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"content":",","pos":[718849,718850]},{"pos":[718882,718889],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[718923,718924]},{"pos":[718956,718967],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"pos":[719070,719074],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[719133,719136]},{"pos":[719170,719181],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"content":",","pos":[719219,719220]},{"pos":[719252,719259],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[719293,719294]},{"pos":[719326,719337],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"pos":[719374,719375],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[719597,719608],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"pos":[719776,719819],"content":"Func<TAccumulate, TAccumulate, TAccumulate>","needQuote":true,"nodes":[{"content":"Func&lt;TAccumulate, TAccumulate, TAccumulate&gt;","pos":[0,43],"source":"Func<TAccumulate, TAccumulate, TAccumulate>"}]},{"pos":[720058,720062],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[720120,720121],"content":"<","needQuote":true,"nodes":[]},{"pos":[720148,720159],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"content":",","pos":[720197,720198]},{"pos":[720230,720241],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"content":",","pos":[720279,720280]},{"pos":[720312,720323],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"pos":[720426,720430],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[720489,720492]},{"pos":[720526,720537],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"content":",","pos":[720575,720576]},{"pos":[720608,720619],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"content":",","pos":[720657,720658]},{"pos":[720690,720701],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"pos":[720738,720739],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[721019,721045],"content":"Func<TAccumulate, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TAccumulate, TResult&gt;","pos":[0,26],"source":"Func<TAccumulate, TResult>"}]},{"pos":[721233,721237],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[721295,721296],"content":"<","needQuote":true,"nodes":[]},{"pos":[721323,721334],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"content":",","pos":[721372,721373]},{"pos":[721405,721412],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[721511,721515],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[721574,721577]},{"pos":[721611,721622],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"content":",","pos":[721660,721661]},{"pos":[721693,721700],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[721733,721734],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[721928,721935],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[722054,722070],"content":"Func<T, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;T, TResult&gt;","pos":[0,16],"source":"Func<T, TResult>"}]},{"pos":[722228,722232],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[722269,722270],"content":"<","needQuote":true,"nodes":[]},{"pos":[722297,722298],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[722326,722327]},{"pos":[722359,722366],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[722465,722469],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[722507,722510]},{"pos":[722544,722545],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[722573,722574]},{"pos":[722606,722613],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[722646,722647],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[722808,722815],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[722947,722964],"content":"Func<TAccumulate>","needQuote":true,"nodes":[{"content":"Func&lt;TAccumulate&gt;","pos":[0,17],"source":"Func<TAccumulate>"}]},{"pos":[723125,723129],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[723187,723188],"content":"<","needQuote":true,"nodes":[]},{"pos":[723215,723226],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"pos":[723329,723333],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[723392,723395]},{"pos":[723429,723440],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"pos":[723477,723478],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[723650,723663],"content":"Func<TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TResult&gt;","pos":[0,13],"source":"Func<TResult>"}]},{"pos":[723812,723816],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[723853,723854],"content":"<","needQuote":true,"nodes":[]},{"pos":[723881,723888],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[723987,723991],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[724029,724032]},{"pos":[724066,724073],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[724106,724107],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[724317,724339],"content":"Func<TSource, Boolean>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Boolean&gt;","pos":[0,22],"source":"Func<TSource, Boolean>"}]},{"pos":[724529,724533],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[724591,724592],"content":"<","needQuote":true,"nodes":[]},{"pos":[724619,724626],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[724660,724661]},{"pos":[724717,724724],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[724851,724855],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[724914,724917]},{"pos":[724951,724958],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[724992,724993]},{"pos":[725049,725056],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[725117,725118],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[725333,725340],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[725579,725599],"content":"IEnumerable<TSource>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;TSource&gt;","pos":[0,20],"source":"IEnumerable<TSource>"}]},{"pos":[725836,725847],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[725932,725933],"content":"<","needQuote":true,"nodes":[]},{"pos":[725960,725967],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[726093,726104],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[726190,726193]},{"pos":[726227,726234],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[726267,726268],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[726500,726514],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[726733,726744],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[726808,726809],"content":"<","needQuote":true,"nodes":[]},{"pos":[726836,726837],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[726957,726968],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[727033,727036]},{"pos":[727070,727071],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[727098,727099],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[727302,727328],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[727536,727549],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"pos":[727754,727765],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[727937,727955],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[728222,728242],"content":"Partitioner<TSource>","needQuote":true,"nodes":[{"content":"Partitioner&lt;TSource&gt;","pos":[0,20],"source":"Partitioner<TSource>"}]},{"pos":[728488,728499],"content":"Partitioner","needQuote":true,"nodes":[{"content":"Partitioner","pos":[0,11]}]},{"pos":[728566,728567],"content":"<","needQuote":true,"nodes":[]},{"pos":[728594,728601],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[728730,728741],"content":"Partitioner","needQuote":true,"nodes":[{"content":"Partitioner","pos":[0,11]}]},{"content":"(Of","pos":[728809,728812]},{"pos":[728846,728853],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[728886,728887],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[729125,729145],"content":"Partitioner<TSource>","needQuote":true,"nodes":[{"content":"Partitioner&lt;TSource&gt;","pos":[0,20],"source":"Partitioner<TSource>"}]},{"pos":[729391,729402],"content":"Partitioner","needQuote":true,"nodes":[{"content":"Partitioner","pos":[0,11]}]},{"pos":[729469,729470],"content":"<","needQuote":true,"nodes":[]},{"pos":[729497,729504],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[729633,729644],"content":"Partitioner","needQuote":true,"nodes":[{"content":"Partitioner","pos":[0,11]}]},{"content":"(Of","pos":[729712,729715]},{"pos":[729749,729756],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[729789,729790],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[730011,730040],"content":"System.Collections.Concurrent","needQuote":true,"nodes":[{"content":"System.Collections.Concurrent","pos":[0,29]}]},{"pos":[730295,730317],"content":"ParallelQuery<Decimal>","needQuote":true,"nodes":[{"content":"ParallelQuery&lt;Decimal&gt;","pos":[0,22],"source":"ParallelQuery<Decimal>"}]},{"pos":[730531,730544],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"pos":[730595,730596],"content":"<","needQuote":true,"nodes":[]},{"pos":[730647,730654],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[730795,730808],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"content":"(Of","pos":[730860,730863]},{"pos":[730921,730928],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[730989,730990],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[731215,731222],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[731424,731445],"content":"ParallelQuery<Double>","needQuote":true,"nodes":[{"content":"ParallelQuery&lt;Double&gt;","pos":[0,21],"source":"ParallelQuery<Double>"}]},{"pos":[731656,731669],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"pos":[731720,731721],"content":"<","needQuote":true,"nodes":[]},{"pos":[731771,731777],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[731917,731930],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"content":"(Of","pos":[731982,731985]},{"pos":[732042,732048],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[732108,732109],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[732330,732336],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[732534,732554],"content":"ParallelQuery<Int32>","needQuote":true,"nodes":[{"content":"ParallelQuery&lt;Int32&gt;","pos":[0,20],"source":"ParallelQuery<Int32>"}]},{"pos":[732762,732775],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"pos":[732826,732827],"content":"<","needQuote":true,"nodes":[]},{"pos":[732876,732881],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[733020,733033],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"content":"(Of","pos":[733085,733088]},{"pos":[733144,733149],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[733208,733209],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[733480,733500],"content":"ParallelQuery<Int64>","needQuote":true,"nodes":[{"content":"ParallelQuery&lt;Int64&gt;","pos":[0,20],"source":"ParallelQuery<Int64>"}]},{"pos":[733708,733721],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"pos":[733772,733773],"content":"<","needQuote":true,"nodes":[]},{"pos":[733822,733827],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[733966,733979],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"content":"(Of","pos":[734031,734034]},{"pos":[734090,734095],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[734154,734155],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[734445,734477],"content":"ParallelQuery<Nullable<Decimal>>","needQuote":true,"nodes":[{"content":"ParallelQuery&lt;Nullable&lt;Decimal&gt;&gt;","pos":[0,32],"source":"ParallelQuery<Nullable<Decimal>>"}]},{"pos":[734741,734754],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"pos":[734805,734806],"content":"<","needQuote":true,"nodes":[]},{"pos":[734860,734868],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[734930,734931],"content":"<","needQuote":true,"nodes":[]},{"pos":[734982,734989],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[735162,735175],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"content":"(Of","pos":[735227,735230]},{"pos":[735291,735299],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[735362,735365]},{"pos":[735423,735430],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[735491,735492],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[735519,735520],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[735814,735831],"content":"Nullable<Decimal>","needQuote":true,"nodes":[{"content":"Nullable&lt;Decimal&gt;","pos":[0,17],"source":"Nullable<Decimal>"}]},{"pos":[736010,736018],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[736080,736081],"content":"<","needQuote":true,"nodes":[]},{"pos":[736132,736139],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[736270,736278],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[736341,736344]},{"pos":[736402,736409],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[736470,736471],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[736679,736690],"content":"Nullable<T>","needQuote":true,"nodes":[{"content":"Nullable&lt;T&gt;","pos":[0,11],"source":"Nullable<T>"}]},{"pos":[736837,736845],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[736886,736887],"content":"<","needQuote":true,"nodes":[]},{"pos":[736914,736915],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[737012,737020],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[737062,737065]},{"pos":[737099,737100],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[737127,737128],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[737377,737408],"content":"ParallelQuery<Nullable<Double>>","needQuote":true,"nodes":[{"content":"ParallelQuery&lt;Nullable&lt;Double&gt;&gt;","pos":[0,31],"source":"ParallelQuery<Nullable<Double>>"}]},{"pos":[737669,737682],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"pos":[737733,737734],"content":"<","needQuote":true,"nodes":[]},{"pos":[737788,737796],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[737858,737859],"content":"<","needQuote":true,"nodes":[]},{"pos":[737909,737915],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[738087,738100],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"content":"(Of","pos":[738152,738155]},{"pos":[738216,738224],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[738287,738290]},{"pos":[738347,738353],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[738413,738414],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[738441,738442],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[738732,738748],"content":"Nullable<Double>","needQuote":true,"nodes":[{"content":"Nullable&lt;Double&gt;","pos":[0,16],"source":"Nullable<Double>"}]},{"pos":[738924,738932],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[738994,738995],"content":"<","needQuote":true,"nodes":[]},{"pos":[739045,739051],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[739181,739189],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[739252,739255]},{"pos":[739312,739318],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[739378,739379],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[739650,739680],"content":"ParallelQuery<Nullable<Int32>>","needQuote":true,"nodes":[{"content":"ParallelQuery&lt;Nullable&lt;Int32&gt;&gt;","pos":[0,30],"source":"ParallelQuery<Nullable<Int32>>"}]},{"pos":[739938,739951],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"pos":[740002,740003],"content":"<","needQuote":true,"nodes":[]},{"pos":[740057,740065],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[740127,740128],"content":"<","needQuote":true,"nodes":[]},{"pos":[740177,740182],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[740353,740366],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"content":"(Of","pos":[740418,740421]},{"pos":[740482,740490],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[740553,740556]},{"pos":[740612,740617],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[740676,740677],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[740704,740705],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[741033,741063],"content":"ParallelQuery<Nullable<Int64>>","needQuote":true,"nodes":[{"content":"ParallelQuery&lt;Nullable&lt;Int64&gt;&gt;","pos":[0,30],"source":"ParallelQuery<Nullable<Int64>>"}]},{"pos":[741321,741334],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"pos":[741385,741386],"content":"<","needQuote":true,"nodes":[]},{"pos":[741440,741448],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[741510,741511],"content":"<","needQuote":true,"nodes":[]},{"pos":[741560,741565],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[741736,741749],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"content":"(Of","pos":[741801,741804]},{"pos":[741865,741873],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[741936,741939]},{"pos":[741995,742000],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[742059,742060],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[742087,742088],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[742417,742448],"content":"ParallelQuery<Nullable<Single>>","needQuote":true,"nodes":[{"content":"ParallelQuery&lt;Nullable&lt;Single&gt;&gt;","pos":[0,31],"source":"ParallelQuery<Nullable<Single>>"}]},{"pos":[742709,742722],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"pos":[742773,742774],"content":"<","needQuote":true,"nodes":[]},{"pos":[742828,742836],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[742898,742899],"content":"<","needQuote":true,"nodes":[]},{"pos":[742949,742955],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[743127,743140],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"content":"(Of","pos":[743192,743195]},{"pos":[743256,743264],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[743327,743330]},{"pos":[743387,743393],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[743453,743454],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[743481,743482],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[743772,743788],"content":"Nullable<Single>","needQuote":true,"nodes":[{"content":"Nullable&lt;Single&gt;","pos":[0,16],"source":"Nullable<Single>"}]},{"pos":[743964,743972],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[744034,744035],"content":"<","needQuote":true,"nodes":[]},{"pos":[744085,744091],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[744221,744229],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[744292,744295]},{"pos":[744352,744358],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[744418,744419],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[744674,744695],"content":"ParallelQuery<Single>","needQuote":true,"nodes":[{"content":"ParallelQuery&lt;Single&gt;","pos":[0,21],"source":"ParallelQuery<Single>"}]},{"pos":[744906,744919],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"pos":[744970,744971],"content":"<","needQuote":true,"nodes":[]},{"pos":[745021,745027],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[745167,745180],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"content":"(Of","pos":[745232,745235]},{"pos":[745292,745298],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[745358,745359],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[745580,745586],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[745763,745785],"content":"Func<TSource, Decimal>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Decimal&gt;","pos":[0,22],"source":"Func<TSource, Decimal>"}]},{"pos":[745975,745979],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[746037,746038],"content":"<","needQuote":true,"nodes":[]},{"pos":[746065,746072],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[746106,746107]},{"pos":[746163,746170],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[746297,746301],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[746360,746363]},{"pos":[746397,746404],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[746438,746439]},{"pos":[746495,746502],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[746563,746564],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[746809,746830],"content":"Func<TSource, Double>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Double&gt;","pos":[0,21],"source":"Func<TSource, Double>"}]},{"pos":[747017,747021],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[747079,747080],"content":"<","needQuote":true,"nodes":[]},{"pos":[747107,747114],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[747148,747149]},{"pos":[747204,747210],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[747336,747340],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[747399,747402]},{"pos":[747436,747443],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[747477,747478]},{"pos":[747533,747539],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[747599,747600],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[747841,747861],"content":"Func<TSource, Int32>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Int32&gt;","pos":[0,20],"source":"Func<TSource, Int32>"}]},{"pos":[748045,748049],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[748107,748108],"content":"<","needQuote":true,"nodes":[]},{"pos":[748135,748142],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[748176,748177]},{"pos":[748231,748236],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[748361,748365],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[748424,748427]},{"pos":[748461,748468],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[748502,748503]},{"pos":[748557,748562],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[748621,748622],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[748860,748880],"content":"Func<TSource, Int64>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Int64&gt;","pos":[0,20],"source":"Func<TSource, Int64>"}]},{"pos":[749064,749068],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[749126,749127],"content":"<","needQuote":true,"nodes":[]},{"pos":[749154,749161],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[749195,749196]},{"pos":[749250,749255],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[749380,749384],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[749443,749446]},{"pos":[749480,749487],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[749521,749522]},{"pos":[749576,749581],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[749640,749641],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[749898,749930],"content":"Func<TSource, Nullable<Decimal>>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Nullable&lt;Decimal&gt;&gt;","pos":[0,32],"source":"Func<TSource, Nullable<Decimal>>"}]},{"pos":[750170,750174],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[750232,750233],"content":"<","needQuote":true,"nodes":[]},{"pos":[750260,750267],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[750301,750302]},{"pos":[750361,750369],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[750431,750432],"content":"<","needQuote":true,"nodes":[]},{"pos":[750483,750490],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[750649,750653],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[750712,750715]},{"pos":[750749,750756],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[750790,750791]},{"pos":[750850,750858],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[750921,750924]},{"pos":[750982,750989],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[751050,751051],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[751078,751079],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[751381,751412],"content":"Func<TSource, Nullable<Double>>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Nullable&lt;Double&gt;&gt;","pos":[0,31],"source":"Func<TSource, Nullable<Double>>"}]},{"pos":[751649,751653],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[751711,751712],"content":"<","needQuote":true,"nodes":[]},{"pos":[751739,751746],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[751780,751781]},{"pos":[751840,751848],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[751910,751911],"content":"<","needQuote":true,"nodes":[]},{"pos":[751961,751967],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[752125,752129],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[752188,752191]},{"pos":[752225,752232],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[752266,752267]},{"pos":[752326,752334],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[752397,752400]},{"pos":[752457,752463],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[752523,752524],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[752551,752552],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[752850,752880],"content":"Func<TSource, Nullable<Int32>>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Nullable&lt;Int32&gt;&gt;","pos":[0,30],"source":"Func<TSource, Nullable<Int32>>"}]},{"pos":[753114,753118],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[753176,753177],"content":"<","needQuote":true,"nodes":[]},{"pos":[753204,753211],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[753245,753246]},{"pos":[753305,753313],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[753375,753376],"content":"<","needQuote":true,"nodes":[]},{"pos":[753425,753430],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[753587,753591],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[753650,753653]},{"pos":[753687,753694],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[753728,753729]},{"pos":[753788,753796],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[753859,753862]},{"pos":[753918,753923],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[753982,753983],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[754010,754011],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[754306,754336],"content":"Func<TSource, Nullable<Int64>>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Nullable&lt;Int64&gt;&gt;","pos":[0,30],"source":"Func<TSource, Nullable<Int64>>"}]},{"pos":[754570,754574],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[754632,754633],"content":"<","needQuote":true,"nodes":[]},{"pos":[754660,754667],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[754701,754702]},{"pos":[754761,754769],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[754831,754832],"content":"<","needQuote":true,"nodes":[]},{"pos":[754881,754886],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[755043,755047],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[755106,755109]},{"pos":[755143,755150],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[755184,755185]},{"pos":[755244,755252],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[755315,755318]},{"pos":[755374,755379],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[755438,755439],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[755466,755467],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[755763,755794],"content":"Func<TSource, Nullable<Single>>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Nullable&lt;Single&gt;&gt;","pos":[0,31],"source":"Func<TSource, Nullable<Single>>"}]},{"pos":[756031,756035],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[756093,756094],"content":"<","needQuote":true,"nodes":[]},{"pos":[756121,756128],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[756162,756163]},{"pos":[756222,756230],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[756292,756293],"content":"<","needQuote":true,"nodes":[]},{"pos":[756343,756349],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[756507,756511],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[756570,756573]},{"pos":[756607,756614],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[756648,756649]},{"pos":[756708,756716],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[756779,756782]},{"pos":[756839,756845],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[756905,756906],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[756933,756934],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[757216,757237],"content":"Func<TSource, Single>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Single&gt;","pos":[0,21],"source":"Func<TSource, Single>"}]},{"pos":[757424,757428],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[757486,757487],"content":"<","needQuote":true,"nodes":[]},{"pos":[757514,757521],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[757555,757556]},{"pos":[757611,757617],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[757743,757747],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[757806,757809]},{"pos":[757843,757850],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[757884,757885]},{"pos":[757940,757946],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[758006,758007],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[758268,758290],"content":"ParallelQuery<TResult>","needQuote":true,"nodes":[{"content":"ParallelQuery&lt;TResult&gt;","pos":[0,22],"source":"ParallelQuery<TResult>"}]},{"pos":[758490,758503],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"pos":[758554,758555],"content":"<","needQuote":true,"nodes":[]},{"pos":[758582,758589],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[758702,758715],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"content":"(Of","pos":[758767,758770]},{"pos":[758804,758811],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[758844,758845],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[759161,759187],"content":"IEqualityComparer<TSource>","needQuote":true,"nodes":[{"content":"IEqualityComparer&lt;TSource&gt;","pos":[0,26],"source":"IEqualityComparer<TSource>"}]},{"pos":[759448,759465],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[759556,759557],"content":"<","needQuote":true,"nodes":[]},{"pos":[759584,759591],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[759723,759740],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"content":"(Of","pos":[759832,759835]},{"pos":[759869,759876],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[759909,759910],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[760166,760186],"content":"IEqualityComparer<T>","needQuote":true,"nodes":[{"content":"IEqualityComparer&lt;T&gt;","pos":[0,20],"source":"IEqualityComparer<T>"}]},{"pos":[760429,760446],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[760516,760517],"content":"<","needQuote":true,"nodes":[]},{"pos":[760544,760545],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[760671,760688],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"content":"(Of","pos":[760759,760762]},{"pos":[760796,760797],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[760824,760825],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[761049,761054],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[761217,761232],"content":"Action<TSource>","needQuote":true,"nodes":[{"content":"Action&lt;TSource&gt;","pos":[0,15],"source":"Action<TSource>"}]},{"pos":[761389,761395],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[761455,761456],"content":"<","needQuote":true,"nodes":[]},{"pos":[761483,761490],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[761591,761597],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[761658,761661]},{"pos":[761695,761702],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[761735,761736],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[761908,761917],"content":"Action<T>","needQuote":true,"nodes":[{"content":"Action&lt;T&gt;","pos":[0,9],"source":"Action<T>"}]},{"pos":[762056,762062],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[762101,762102],"content":"<","needQuote":true,"nodes":[]},{"pos":[762129,762130],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[762225,762231],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[762271,762274]},{"pos":[762308,762309],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[762336,762337],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[762533,762552],"content":"Func<TSource, TKey>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, TKey&gt;","pos":[0,19],"source":"Func<TSource, TKey>"}]},{"pos":[762719,762723],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[762781,762782],"content":"<","needQuote":true,"nodes":[]},{"pos":[762809,762816],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[762850,762851]},{"pos":[762883,762887],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[762983,762987],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[763046,763049]},{"pos":[763083,763090],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[763124,763125]},{"pos":[763157,763161],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[763191,763192],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[763469,763508],"content":"ParallelQuery<IGrouping<TKey, TSource>>","needQuote":true,"nodes":[{"content":"ParallelQuery&lt;IGrouping&lt;TKey, TSource&gt;&gt;","pos":[0,39],"source":"ParallelQuery<IGrouping<TKey, TSource>>"}]},{"pos":[763789,763802],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"pos":[763853,763854],"content":"<","needQuote":true,"nodes":[]},{"pos":[763914,763923],"content":"IGrouping","needQuote":true,"nodes":[{"content":"IGrouping","pos":[0,9]}]},{"pos":[763991,763992],"content":"<","needQuote":true,"nodes":[]},{"pos":[764019,764023],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[764054,764055]},{"pos":[764087,764094],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[764239,764252],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"content":"(Of","pos":[764304,764307]},{"pos":[764374,764383],"content":"IGrouping","needQuote":true,"nodes":[{"content":"IGrouping","pos":[0,9]}]},{"content":"(Of","pos":[764452,764455]},{"pos":[764489,764493],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[764524,764525]},{"pos":[764557,764564],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[764597,764598],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[764625,764626],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[765003,765026],"content":"IEqualityComparer<TKey>","needQuote":true,"nodes":[{"content":"IEqualityComparer&lt;TKey&gt;","pos":[0,23],"source":"IEqualityComparer<TKey>"}]},{"pos":[765278,765295],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[765386,765387],"content":"<","needQuote":true,"nodes":[]},{"pos":[765414,765418],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[765547,765564],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"content":"(Of","pos":[765656,765659]},{"pos":[765693,765697],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[765727,765728],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[765990,766013],"content":"Func<TSource, TElement>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, TElement&gt;","pos":[0,23],"source":"Func<TSource, TElement>"}]},{"pos":[766192,766196],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[766254,766255],"content":"<","needQuote":true,"nodes":[]},{"pos":[766282,766289],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[766323,766324]},{"pos":[766356,766364],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[766464,766468],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[766527,766530]},{"pos":[766564,766571],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[766605,766606]},{"pos":[766638,766646],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[766680,766681],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[766967,767007],"content":"ParallelQuery<IGrouping<TKey, TElement>>","needQuote":true,"nodes":[{"content":"ParallelQuery&lt;IGrouping&lt;TKey, TElement&gt;&gt;","pos":[0,40],"source":"ParallelQuery<IGrouping<TKey, TElement>>"}]},{"pos":[767291,767304],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"pos":[767355,767356],"content":"<","needQuote":true,"nodes":[]},{"pos":[767416,767425],"content":"IGrouping","needQuote":true,"nodes":[{"content":"IGrouping","pos":[0,9]}]},{"pos":[767493,767494],"content":"<","needQuote":true,"nodes":[]},{"pos":[767521,767525],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[767556,767557]},{"pos":[767589,767597],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[767743,767756],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"content":"(Of","pos":[767808,767811]},{"pos":[767878,767887],"content":"IGrouping","needQuote":true,"nodes":[{"content":"IGrouping","pos":[0,9]}]},{"content":"(Of","pos":[767956,767959]},{"pos":[767993,767997],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[768028,768029]},{"pos":[768061,768069],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[768103,768104],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[768131,768132],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[768485,768526],"content":"Func<TKey, IEnumerable<TSource>, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TKey, IEnumerable&lt;TSource&gt;, TResult&gt;","pos":[0,41],"source":"Func<TKey, IEnumerable<TSource>, TResult>"}]},{"pos":[768819,768823],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[768881,768882],"content":"<","needQuote":true,"nodes":[]},{"pos":[768909,768913],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[768944,768945]},{"pos":[769027,769038],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[769123,769124],"content":"<","needQuote":true,"nodes":[]},{"pos":[769151,769158],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[769224,769225]},{"pos":[769257,769264],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[769363,769367],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[769426,769429]},{"pos":[769463,769467],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[769498,769499]},{"pos":[769581,769592],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[769678,769681]},{"pos":[769715,769722],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[769755,769756],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[769784,769785]},{"pos":[769817,769824],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[769857,769858],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[770221,770263],"content":"Func<TKey, IEnumerable<TElement>, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TKey, IEnumerable&lt;TElement&gt;, TResult&gt;","pos":[0,42],"source":"Func<TKey, IEnumerable<TElement>, TResult>"}]},{"pos":[770559,770563],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[770621,770622],"content":"<","needQuote":true,"nodes":[]},{"pos":[770649,770653],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[770684,770685]},{"pos":[770767,770778],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[770863,770864],"content":"<","needQuote":true,"nodes":[]},{"pos":[770891,770899],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"content":",","pos":[770966,770967]},{"pos":[770999,771006],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[771105,771109],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[771168,771171]},{"pos":[771205,771209],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[771240,771241]},{"pos":[771323,771334],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[771420,771423]},{"pos":[771457,771465],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[771499,771500],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[771528,771529]},{"pos":[771561,771568],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[771601,771602],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[771941,771962],"content":"ParallelQuery<TOuter>","needQuote":true,"nodes":[{"content":"ParallelQuery&lt;TOuter&gt;","pos":[0,21],"source":"ParallelQuery<TOuter>"}]},{"pos":[772159,772172],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"pos":[772223,772224],"content":"<","needQuote":true,"nodes":[]},{"pos":[772251,772257],"content":"TOuter","needQuote":true,"nodes":[{"content":"TOuter","pos":[0,6]}]},{"pos":[772369,772382],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"content":"(Of","pos":[772434,772437]},{"pos":[772471,772477],"content":"TOuter","needQuote":true,"nodes":[{"content":"TOuter","pos":[0,6]}]},{"pos":[772509,772510],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[772811,772830],"content":"IEnumerable<TInner>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;TInner&gt;","pos":[0,19],"source":"IEnumerable<TInner>"}]},{"pos":[773064,773075],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[773160,773161],"content":"<","needQuote":true,"nodes":[]},{"pos":[773188,773194],"content":"TInner","needQuote":true,"nodes":[{"content":"TInner","pos":[0,6]}]},{"pos":[773319,773330],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[773416,773419]},{"pos":[773453,773459],"content":"TInner","needQuote":true,"nodes":[{"content":"TInner","pos":[0,6]}]},{"pos":[773491,773492],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[773735,773753],"content":"Func<TOuter, TKey>","needQuote":true,"nodes":[{"content":"Func&lt;TOuter, TKey&gt;","pos":[0,18],"source":"Func<TOuter, TKey>"}]},{"pos":[773917,773921],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[773979,773980],"content":"<","needQuote":true,"nodes":[]},{"pos":[774007,774013],"content":"TOuter","needQuote":true,"nodes":[{"content":"TOuter","pos":[0,6]}]},{"content":",","pos":[774046,774047]},{"pos":[774079,774083],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[774179,774183],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[774242,774245]},{"pos":[774279,774285],"content":"TOuter","needQuote":true,"nodes":[{"content":"TOuter","pos":[0,6]}]},{"content":",","pos":[774318,774319]},{"pos":[774351,774355],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[774385,774386],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[774604,774622],"content":"Func<TInner, TKey>","needQuote":true,"nodes":[{"content":"Func&lt;TInner, TKey&gt;","pos":[0,18],"source":"Func<TInner, TKey>"}]},{"pos":[774786,774790],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[774848,774849],"content":"<","needQuote":true,"nodes":[]},{"pos":[774876,774882],"content":"TInner","needQuote":true,"nodes":[{"content":"TInner","pos":[0,6]}]},{"content":",","pos":[774915,774916]},{"pos":[774948,774952],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[775048,775052],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[775111,775114]},{"pos":[775148,775154],"content":"TInner","needQuote":true,"nodes":[{"content":"TInner","pos":[0,6]}]},{"content":",","pos":[775187,775188]},{"pos":[775220,775224],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[775254,775255],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[775525,775567],"content":"Func<TOuter, IEnumerable<TInner>, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TOuter, IEnumerable&lt;TInner&gt;, TResult&gt;","pos":[0,42],"source":"Func<TOuter, IEnumerable<TInner>, TResult>"}]},{"pos":[775863,775867],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[775925,775926],"content":"<","needQuote":true,"nodes":[]},{"pos":[775953,775959],"content":"TOuter","needQuote":true,"nodes":[{"content":"TOuter","pos":[0,6]}]},{"content":",","pos":[775992,775993]},{"pos":[776075,776086],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[776171,776172],"content":"<","needQuote":true,"nodes":[]},{"pos":[776199,776205],"content":"TInner","needQuote":true,"nodes":[{"content":"TInner","pos":[0,6]}]},{"content":",","pos":[776270,776271]},{"pos":[776303,776310],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[776409,776413],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[776472,776475]},{"pos":[776509,776515],"content":"TOuter","needQuote":true,"nodes":[{"content":"TOuter","pos":[0,6]}]},{"content":",","pos":[776548,776549]},{"pos":[776631,776642],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[776728,776731]},{"pos":[776765,776771],"content":"TInner","needQuote":true,"nodes":[{"content":"TInner","pos":[0,6]}]},{"pos":[776803,776804],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[776832,776833]},{"pos":[776865,776872],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[776905,776906],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[777245,777266],"content":"ParallelQuery<TInner>","needQuote":true,"nodes":[{"content":"ParallelQuery&lt;TInner&gt;","pos":[0,21],"source":"ParallelQuery<TInner>"}]},{"pos":[777463,777476],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"pos":[777527,777528],"content":"<","needQuote":true,"nodes":[]},{"pos":[777555,777561],"content":"TInner","needQuote":true,"nodes":[{"content":"TInner","pos":[0,6]}]},{"pos":[777673,777686],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"content":"(Of","pos":[777738,777741]},{"pos":[777775,777781],"content":"TInner","needQuote":true,"nodes":[{"content":"TInner","pos":[0,6]}]},{"pos":[777813,777814],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[778060,778089],"content":"Func<TOuter, TInner, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TOuter, TInner, TResult&gt;","pos":[0,29],"source":"Func<TOuter, TInner, TResult>"}]},{"pos":[778286,778290],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[778348,778349],"content":"<","needQuote":true,"nodes":[]},{"pos":[778376,778382],"content":"TOuter","needQuote":true,"nodes":[{"content":"TOuter","pos":[0,6]}]},{"content":",","pos":[778415,778416]},{"pos":[778448,778454],"content":"TInner","needQuote":true,"nodes":[{"content":"TInner","pos":[0,6]}]},{"content":",","pos":[778487,778488]},{"pos":[778520,778527],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[778626,778630],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[778689,778692]},{"pos":[778726,778732],"content":"TOuter","needQuote":true,"nodes":[{"content":"TOuter","pos":[0,6]}]},{"content":",","pos":[778765,778766]},{"pos":[778798,778804],"content":"TInner","needQuote":true,"nodes":[{"content":"TInner","pos":[0,6]}]},{"content":",","pos":[778837,778838]},{"pos":[778870,778877],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[778910,778911],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[779131,779136],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[779306,779321],"content":"Nullable<Int32>","needQuote":true,"nodes":[{"content":"Nullable&lt;Int32&gt;","pos":[0,15],"source":"Nullable<Int32>"}]},{"pos":[779494,779502],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[779564,779565],"content":"<","needQuote":true,"nodes":[]},{"pos":[779614,779619],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[779748,779756],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[779819,779822]},{"pos":[779878,779883],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[779942,779943],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[780169,780184],"content":"Nullable<Int64>","needQuote":true,"nodes":[{"content":"Nullable&lt;Int64&gt;","pos":[0,15],"source":"Nullable<Int64>"}]},{"pos":[780357,780365],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[780427,780428],"content":"<","needQuote":true,"nodes":[]},{"pos":[780477,780482],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[780611,780619],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[780682,780685]},{"pos":[780741,780746],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[780805,780806],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[781031,781053],"content":"Func<TSource, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, TResult&gt;","pos":[0,22],"source":"Func<TSource, TResult>"}]},{"pos":[781229,781233],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[781291,781292],"content":"<","needQuote":true,"nodes":[]},{"pos":[781319,781326],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[781360,781361]},{"pos":[781393,781400],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[781499,781503],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[781562,781565]},{"pos":[781599,781606],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[781640,781641]},{"pos":[781673,781680],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[781713,781714],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[781981,782010],"content":"OrderedParallelQuery<TSource>","needQuote":true,"nodes":[{"content":"OrderedParallelQuery&lt;TSource&gt;","pos":[0,29],"source":"OrderedParallelQuery<TSource>"}]},{"pos":[782238,782258],"content":"OrderedParallelQuery","needQuote":true,"nodes":[{"content":"OrderedParallelQuery","pos":[0,20]}]},{"pos":[782316,782317],"content":"<","needQuote":true,"nodes":[]},{"pos":[782344,782351],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[782471,782491],"content":"OrderedParallelQuery","needQuote":true,"nodes":[{"content":"OrderedParallelQuery","pos":[0,20]}]},{"content":"(Of","pos":[782550,782553]},{"pos":[782587,782594],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[782627,782628],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[782866,782895],"content":"OrderedParallelQuery<TSource>","needQuote":true,"nodes":[{"content":"OrderedParallelQuery&lt;TSource&gt;","pos":[0,29],"source":"OrderedParallelQuery<TSource>"}]},{"pos":[783123,783143],"content":"OrderedParallelQuery","needQuote":true,"nodes":[{"content":"OrderedParallelQuery","pos":[0,20]}]},{"pos":[783201,783202],"content":"<","needQuote":true,"nodes":[]},{"pos":[783229,783236],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[783356,783376],"content":"OrderedParallelQuery","needQuote":true,"nodes":[{"content":"OrderedParallelQuery","pos":[0,20]}]},{"content":"(Of","pos":[783435,783438]},{"pos":[783472,783479],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[783512,783513],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[783828,783843],"content":"IComparer<TKey>","needQuote":true,"nodes":[{"content":"IComparer&lt;TKey&gt;","pos":[0,15],"source":"IComparer<TKey>"}]},{"pos":[784063,784072],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[784134,784135],"content":"<","needQuote":true,"nodes":[]},{"pos":[784162,784166],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[784287,784296],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"content":"(Of","pos":[784359,784362]},{"pos":[784396,784400],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[784430,784431],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[784649,784661],"content":"IComparer<T>","needQuote":true,"nodes":[{"content":"IComparer&lt;T&gt;","pos":[0,12],"source":"IComparer<T>"}]},{"pos":[784872,784881],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[784943,784944],"content":"<","needQuote":true,"nodes":[]},{"pos":[784971,784972],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[785090,785099],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"content":"(Of","pos":[785162,785165]},{"pos":[785199,785200],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[785227,785228],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[785469,785498],"content":"Func<TSource, Int32, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Int32, TResult&gt;","pos":[0,29],"source":"Func<TSource, Int32, TResult>"}]},{"pos":[785709,785713],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[785771,785772],"content":"<","needQuote":true,"nodes":[]},{"pos":[785799,785806],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[785840,785841]},{"pos":[785895,785900],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[785960,785961]},{"pos":[785993,786000],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[786099,786103],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[786162,786165]},{"pos":[786199,786206],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[786240,786241]},{"pos":[786295,786300],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[786360,786361]},{"pos":[786393,786400],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[786433,786434],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[786731,786766],"content":"Func<TSource, IEnumerable<TResult>>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, IEnumerable&lt;TResult&gt;&gt;","pos":[0,35],"source":"Func<TSource, IEnumerable<TResult>>"}]},{"pos":[787041,787045],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[787103,787104],"content":"<","needQuote":true,"nodes":[]},{"pos":[787131,787138],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[787172,787173]},{"pos":[787255,787266],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[787351,787352],"content":"<","needQuote":true,"nodes":[]},{"pos":[787379,787386],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[787517,787521],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[787580,787583]},{"pos":[787617,787624],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[787658,787659]},{"pos":[787741,787752],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[787838,787841]},{"pos":[787875,787882],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[787915,787916],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[787943,787944],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[788296,788338],"content":"Func<TSource, Int32, IEnumerable<TResult>>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Int32, IEnumerable&lt;TResult&gt;&gt;","pos":[0,42],"source":"Func<TSource, Int32, IEnumerable<TResult>>"}]},{"pos":[788648,788652],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[788710,788711],"content":"<","needQuote":true,"nodes":[]},{"pos":[788738,788745],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[788779,788780]},{"pos":[788834,788839],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[788899,788900]},{"pos":[788982,788993],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[789078,789079],"content":"<","needQuote":true,"nodes":[]},{"pos":[789106,789113],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[789244,789248],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[789307,789310]},{"pos":[789344,789351],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[789385,789386]},{"pos":[789440,789445],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[789505,789506]},{"pos":[789588,789599],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[789685,789688]},{"pos":[789722,789729],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[789762,789763],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[789790,789791],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[790161,790200],"content":"Func<TSource, IEnumerable<TCollection>>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, IEnumerable&lt;TCollection&gt;&gt;","pos":[0,39],"source":"Func<TSource, IEnumerable<TCollection>>"}]},{"pos":[790487,790491],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[790549,790550],"content":"<","needQuote":true,"nodes":[]},{"pos":[790577,790584],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[790618,790619]},{"pos":[790701,790712],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[790797,790798],"content":"<","needQuote":true,"nodes":[]},{"pos":[790825,790836],"content":"TCollection","needQuote":true,"nodes":[{"content":"TCollection","pos":[0,11]}]},{"pos":[790971,790975],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[791034,791037]},{"pos":[791071,791078],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[791112,791113]},{"pos":[791195,791206],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[791292,791295]},{"pos":[791329,791340],"content":"TCollection","needQuote":true,"nodes":[{"content":"TCollection","pos":[0,11]}]},{"pos":[791377,791378],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[791405,791406],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[791727,791762],"content":"Func<TSource, TCollection, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, TCollection, TResult&gt;","pos":[0,35],"source":"Func<TSource, TCollection, TResult>"}]},{"pos":[791977,791981],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[792039,792040],"content":"<","needQuote":true,"nodes":[]},{"pos":[792067,792074],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[792108,792109]},{"pos":[792141,792152],"content":"TCollection","needQuote":true,"nodes":[{"content":"TCollection","pos":[0,11]}]},{"content":",","pos":[792190,792191]},{"pos":[792223,792230],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[792329,792333],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[792392,792395]},{"pos":[792429,792436],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[792470,792471]},{"pos":[792503,792514],"content":"TCollection","needQuote":true,"nodes":[{"content":"TCollection","pos":[0,11]}]},{"content":",","pos":[792552,792553]},{"pos":[792585,792592],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[792625,792626],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[792943,792989],"content":"Func<TSource, Int32, IEnumerable<TCollection>>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Int32, IEnumerable&lt;TCollection&gt;&gt;","pos":[0,46],"source":"Func<TSource, Int32, IEnumerable<TCollection>>"}]},{"pos":[793311,793315],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[793373,793374],"content":"<","needQuote":true,"nodes":[]},{"pos":[793401,793408],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[793442,793443]},{"pos":[793497,793502],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[793562,793563]},{"pos":[793645,793656],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[793741,793742],"content":"<","needQuote":true,"nodes":[]},{"pos":[793769,793780],"content":"TCollection","needQuote":true,"nodes":[{"content":"TCollection","pos":[0,11]}]},{"pos":[793915,793919],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[793978,793981]},{"pos":[794015,794022],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[794056,794057]},{"pos":[794111,794116],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[794176,794177]},{"pos":[794259,794270],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[794356,794359]},{"pos":[794393,794404],"content":"TCollection","needQuote":true,"nodes":[{"content":"TCollection","pos":[0,11]}]},{"pos":[794441,794442],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[794469,794470],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[794822,794851],"content":"Func<TSource, Int32, Boolean>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Int32, Boolean&gt;","pos":[0,29],"source":"Func<TSource, Int32, Boolean>"}]},{"pos":[795076,795080],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[795138,795139],"content":"<","needQuote":true,"nodes":[]},{"pos":[795166,795173],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[795207,795208]},{"pos":[795262,795267],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[795327,795328]},{"pos":[795384,795391],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[795518,795522],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[795581,795584]},{"pos":[795618,795625],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[795659,795660]},{"pos":[795714,795719],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[795779,795780]},{"pos":[795836,795843],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[795904,795905],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[796109,796118],"content":"TSource[]","needQuote":true,"nodes":[{"content":"TSource[]","pos":[0,9]}]},{"pos":[796212,796219],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":"[]","pos":[796253,796255]},{"pos":[796297,796304],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[796337,796339],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[796574,796599],"content":"Dictionary<TKey, TSource>","needQuote":true,"nodes":[{"content":"Dictionary&lt;TKey, TSource&gt;","pos":[0,25],"source":"Dictionary<TKey, TSource>"}]},{"pos":[796850,796860],"content":"Dictionary","needQuote":true,"nodes":[{"content":"Dictionary","pos":[0,10]}]},{"pos":[796944,796945],"content":"<","needQuote":true,"nodes":[]},{"pos":[796972,796976],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[797007,797008]},{"pos":[797040,797047],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[797172,797182],"content":"Dictionary","needQuote":true,"nodes":[{"content":"Dictionary","pos":[0,10]}]},{"content":"(Of","pos":[797267,797270]},{"pos":[797304,797308],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[797339,797340]},{"pos":[797372,797379],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[797412,797413],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[797694,797718],"content":"Dictionary<TKey, TValue>","needQuote":true,"nodes":[{"content":"Dictionary&lt;TKey, TValue&gt;","pos":[0,24],"source":"Dictionary<TKey, TValue>"}]},{"pos":[797966,797976],"content":"Dictionary","needQuote":true,"nodes":[{"content":"Dictionary","pos":[0,10]}]},{"pos":[798039,798040],"content":"<","needQuote":true,"nodes":[]},{"pos":[798067,798071],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[798102,798103]},{"pos":[798135,798141],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[798265,798275],"content":"Dictionary","needQuote":true,"nodes":[{"content":"Dictionary","pos":[0,10]}]},{"content":"(Of","pos":[798339,798342]},{"pos":[798376,798380],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[798411,798412]},{"pos":[798444,798450],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[798482,798483],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[798806,798832],"content":"Dictionary<TKey, TElement>","needQuote":true,"nodes":[{"content":"Dictionary&lt;TKey, TElement&gt;","pos":[0,26],"source":"Dictionary<TKey, TElement>"}]},{"pos":[799086,799096],"content":"Dictionary","needQuote":true,"nodes":[{"content":"Dictionary","pos":[0,10]}]},{"pos":[799180,799181],"content":"<","needQuote":true,"nodes":[]},{"pos":[799208,799212],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[799243,799244]},{"pos":[799276,799284],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[799410,799420],"content":"Dictionary","needQuote":true,"nodes":[{"content":"Dictionary","pos":[0,10]}]},{"content":"(Of","pos":[799505,799508]},{"pos":[799542,799546],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[799577,799578]},{"pos":[799610,799618],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[799652,799653],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[799967,799980],"content":"List<TSource>","needQuote":true,"nodes":[{"content":"List&lt;TSource&gt;","pos":[0,13],"source":"List<TSource>"}]},{"pos":[800189,800193],"content":"List","needQuote":true,"nodes":[{"content":"List","pos":[0,4]}]},{"pos":[800271,800272],"content":"<","needQuote":true,"nodes":[]},{"pos":[800299,800306],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[800425,800429],"content":"List","needQuote":true,"nodes":[{"content":"List","pos":[0,4]}]},{"content":"(Of","pos":[800508,800511]},{"pos":[800545,800552],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[800585,800586],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[800827,800834],"content":"List<T>","needQuote":true,"nodes":[{"content":"List&lt;T&gt;","pos":[0,7],"source":"List<T>"}]},{"pos":[801025,801029],"content":"List","needQuote":true,"nodes":[{"content":"List","pos":[0,4]}]},{"pos":[801086,801087],"content":"<","needQuote":true,"nodes":[]},{"pos":[801114,801115],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[801228,801232],"content":"List","needQuote":true,"nodes":[{"content":"List","pos":[0,4]}]},{"content":"(Of","pos":[801290,801293]},{"pos":[801327,801328],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[801355,801356],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[801587,801609],"content":"ILookup<TKey, TSource>","needQuote":true,"nodes":[{"content":"ILookup&lt;TKey, TSource&gt;","pos":[0,22],"source":"ILookup<TKey, TSource>"}]},{"pos":[801803,801810],"content":"ILookup","needQuote":true,"nodes":[{"content":"ILookup","pos":[0,7]}]},{"pos":[801855,801856],"content":"<","needQuote":true,"nodes":[]},{"pos":[801883,801887],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[801918,801919]},{"pos":[801951,801958],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[802065,802072],"content":"ILookup","needQuote":true,"nodes":[{"content":"ILookup","pos":[0,7]}]},{"content":"(Of","pos":[802118,802121]},{"pos":[802155,802159],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[802190,802191]},{"pos":[802223,802230],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[802263,802264],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[802468,802479],"content":"ILookup<, >","needQuote":true,"nodes":[{"content":"ILookup&lt;, &gt;","pos":[0,11],"source":"ILookup<, >"}]},{"pos":[802640,802647],"content":"ILookup","needQuote":true,"nodes":[{"content":"ILookup","pos":[0,7]}]},{"pos":[802692,802693],"content":"<","needQuote":true,"nodes":[]},{"content":",","pos":[802728,802729]},{"pos":[802842,802849],"content":"ILookup","needQuote":true,"nodes":[{"content":"ILookup","pos":[0,7]}]},{"content":"(Of","pos":[802895,802898]},{"content":",","pos":[802940,802941]},{"pos":[802980,802981],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[803209,803232],"content":"ILookup<TKey, TElement>","needQuote":true,"nodes":[{"content":"ILookup&lt;TKey, TElement&gt;","pos":[0,23],"source":"ILookup<TKey, TElement>"}]},{"pos":[803429,803436],"content":"ILookup","needQuote":true,"nodes":[{"content":"ILookup","pos":[0,7]}]},{"pos":[803481,803482],"content":"<","needQuote":true,"nodes":[]},{"pos":[803509,803513],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[803544,803545]},{"pos":[803577,803585],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[803693,803700],"content":"ILookup","needQuote":true,"nodes":[{"content":"ILookup","pos":[0,7]}]},{"content":"(Of","pos":[803746,803749]},{"pos":[803783,803787],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[803818,803819]},{"pos":[803851,803859],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[803893,803894],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[804140,804157],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[804341,804357],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[804543,804564],"content":"ParallelExecutionMode","needQuote":true,"nodes":[{"content":"ParallelExecutionMode","pos":[0,21]}]},{"pos":[804788,804808],"content":"ParallelMergeOptions","needQuote":true,"nodes":[{"content":"ParallelMergeOptions","pos":[0,20]}]},{"pos":[805054,805075],"content":"ParallelQuery<TFirst>","needQuote":true,"nodes":[{"content":"ParallelQuery&lt;TFirst&gt;","pos":[0,21],"source":"ParallelQuery<TFirst>"}]},{"pos":[805272,805285],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"pos":[805336,805337],"content":"<","needQuote":true,"nodes":[]},{"pos":[805364,805370],"content":"TFirst","needQuote":true,"nodes":[{"content":"TFirst","pos":[0,6]}]},{"pos":[805482,805495],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"content":"(Of","pos":[805547,805550]},{"pos":[805584,805590],"content":"TFirst","needQuote":true,"nodes":[{"content":"TFirst","pos":[0,6]}]},{"pos":[805622,805623],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[805925,805945],"content":"IEnumerable<TSecond>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;TSecond&gt;","pos":[0,20],"source":"IEnumerable<TSecond>"}]},{"pos":[806182,806193],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[806278,806279],"content":"<","needQuote":true,"nodes":[]},{"pos":[806306,806313],"content":"TSecond","needQuote":true,"nodes":[{"content":"TSecond","pos":[0,7]}]},{"pos":[806439,806450],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[806536,806539]},{"pos":[806573,806580],"content":"TSecond","needQuote":true,"nodes":[{"content":"TSecond","pos":[0,7]}]},{"pos":[806613,806614],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[806872,806902],"content":"Func<TFirst, TSecond, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TFirst, TSecond, TResult&gt;","pos":[0,30],"source":"Func<TFirst, TSecond, TResult>"}]},{"pos":[807102,807106],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[807164,807165],"content":"<","needQuote":true,"nodes":[]},{"pos":[807192,807198],"content":"TFirst","needQuote":true,"nodes":[{"content":"TFirst","pos":[0,6]}]},{"content":",","pos":[807231,807232]},{"pos":[807264,807271],"content":"TSecond","needQuote":true,"nodes":[{"content":"TSecond","pos":[0,7]}]},{"content":",","pos":[807305,807306]},{"pos":[807338,807345],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[807444,807448],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[807507,807510]},{"pos":[807544,807550],"content":"TFirst","needQuote":true,"nodes":[{"content":"TFirst","pos":[0,6]}]},{"content":",","pos":[807583,807584]},{"pos":[807616,807623],"content":"TSecond","needQuote":true,"nodes":[{"content":"TSecond","pos":[0,7]}]},{"content":",","pos":[807657,807658]},{"pos":[807690,807697],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[807730,807731],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[808004,808026],"content":"ParallelQuery<TSecond>","needQuote":true,"nodes":[{"content":"ParallelQuery&lt;TSecond&gt;","pos":[0,22],"source":"ParallelQuery<TSecond>"}]},{"pos":[808226,808239],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"pos":[808290,808291],"content":"<","needQuote":true,"nodes":[]},{"pos":[808318,808325],"content":"TSecond","needQuote":true,"nodes":[{"content":"TSecond","pos":[0,7]}]},{"pos":[808438,808451],"content":"ParallelQuery","needQuote":true,"nodes":[{"content":"ParallelQuery","pos":[0,13]}]},{"content":"(Of","pos":[808503,808506]},{"pos":[808540,808547],"content":"TSecond","needQuote":true,"nodes":[{"content":"TSecond","pos":[0,7]}]},{"pos":[808580,808581],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[808814,808840],"content":"OperationCanceledException","needQuote":true,"nodes":[{"content":"OperationCanceledException","pos":[0,26]}]},{"pos":[809043,809064],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[809266,809284],"content":"AggregateException","needQuote":true,"nodes":[{"content":"AggregateException","pos":[0,18]}]},{"pos":[809484,809509],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[809705,809722],"content":"OverflowException","needQuote":true,"nodes":[{"content":"OverflowException","pos":[0,17]}]},{"pos":[809897,809917],"content":"InvalidCastException","needQuote":true,"nodes":[{"content":"InvalidCastException","pos":[0,20]}]},{"pos":[810119,810140],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[810334,810361],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[810569,810592],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]},{"pos":[810799,810816],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Linq.ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n  id: ParallelEnumerable\n  parent: System.Linq\n  children:\n  - System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})\n  - System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})\n  - System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})\n  - System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  - System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})\n  - System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  - System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})\n  - System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  - System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})\n  - System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)\n  - System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})\n  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  - System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})\n  - System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})\n  - System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})\n  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})\n  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})\n  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})\n  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})\n  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})\n  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})\n  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})\n  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})\n  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})\n  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})\n  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})\n  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})\n  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})\n  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})\n  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})\n  - System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)\n  - System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})\n  - System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)\n  - System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})\n  - System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  - System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})\n  - System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)\n  - System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})\n  - System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)\n  - System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)\n  - System.Linq.ParallelEnumerable.Empty``1\n  - System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})\n  - System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})\n  - System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  - System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})\n  - System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  - System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})\n  - System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  - System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  - System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  - System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  - System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  - System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})\n  - System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  - System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  - System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})\n  - System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  - System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})\n  - System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  - System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})\n  - System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})\n  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})\n  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})\n  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})\n  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})\n  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})\n  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})\n  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})\n  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})\n  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})\n  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})\n  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})\n  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})\n  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})\n  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})\n  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})\n  - System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})\n  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})\n  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})\n  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})\n  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})\n  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})\n  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})\n  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})\n  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})\n  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})\n  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})\n  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})\n  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})\n  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})\n  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})\n  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})\n  - System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  - System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)\n  - System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  - System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  - System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)\n  - System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)\n  - System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})\n  - System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  - System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})\n  - System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  - System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  - System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  - System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  - System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})\n  - System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})\n  - System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  - System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})\n  - System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  - System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)\n  - System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  - System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})\n  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})\n  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})\n  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})\n  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})\n  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})\n  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})\n  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})\n  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})\n  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})\n  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})\n  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})\n  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})\n  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})\n  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})\n  - System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)\n  - System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  - System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})\n  - System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})\n  - System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})\n  - System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  - System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})\n  - System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  - System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})\n  - System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  - System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)\n  - System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)\n  - System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)\n  - System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)\n  - System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  - System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})\n  langs:\n  - csharp\n  - vb\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  type: Class\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ParallelEnumerable\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 15\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Provides a set of methods for querying objects that implement ParallelQuery{TSource}. This is the parallel equivalent of <xref href=\\\"System.Linq.Enumerable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public class ParallelEnumerable\n    content.vb: Public Class ParallelEnumerable\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: ParallelEnumerable\n- uid: System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})\n  commentId: M:System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})\n  id: Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Aggregate<TSource>(ParallelQuery<TSource>, Func<TSource, TSource, TSource>)\n  fullName: System.Linq.ParallelEnumerable.Aggregate<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TSource, TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Aggregate\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 17\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Applies in parallel an accumulator function over a sequence.</p>\\n\"\n  syntax:\n    content: public static TSource Aggregate<TSource>(this ParallelQuery<TSource> source, Func<TSource, TSource, TSource> func)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Aggregate(Of TSource)(source As ParallelQuery(Of TSource), func As Func(Of TSource, TSource, TSource)) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence to aggregate over.</p>\\n\"\n    - id: func\n      type: System.Func{{TSource},{TSource},{TSource}}\n      description: \"\\n<p>An accumulator function to be invoked on each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The final accumulator value.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>func</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Aggregate(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TSource, TSource))\n  name.vb: Aggregate(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, TSource, TSource))\n  nameWithType: ParallelEnumerable.Aggregate<TSource>(ParallelQuery<TSource>, Func<TSource, TSource, TSource>)\n  nameWithType.vb: ParallelEnumerable.Aggregate(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, TSource, TSource))\n- uid: System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})\n  commentId: M:System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})\n  id: Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Aggregate<TSource, TAccumulate>(ParallelQuery<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>)\n  fullName: System.Linq.ParallelEnumerable.Aggregate<TSource, TAccumulate>(System.Linq.ParallelQuery<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Aggregate\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 18\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Applies in parallel an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.</p>\\n\"\n  syntax:\n    content: public static TAccumulate Aggregate<TSource, TAccumulate>(this ParallelQuery<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Aggregate(Of TSource, TAccumulate)(source As ParallelQuery(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate)) As TAccumulate\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence to aggregate over.</p>\\n\"\n    - id: seed\n      type: '{TAccumulate}'\n      description: \"\\n<p>The initial accumulator value.</p>\\n\"\n    - id: func\n      type: System.Func{{TAccumulate},{TSource},{TAccumulate}}\n      description: \"\\n<p>An accumulator function to be invoked on each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TAccumulate\n      description: \"\\n<p>The type of the accumulator value.</p>\\n\"\n    return:\n      type: '{TAccumulate}'\n      description: \"\\n<p>The final accumulator value.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>func</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Aggregate(Of TSource, TAccumulate)(System.Linq.ParallelQuery(Of TSource), TAccumulate, System.Func(Of TAccumulate, TSource, TAccumulate))\n  name.vb: Aggregate(Of TSource, TAccumulate)(ParallelQuery(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate))\n  nameWithType: ParallelEnumerable.Aggregate<TSource, TAccumulate>(ParallelQuery<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>)\n  nameWithType.vb: ParallelEnumerable.Aggregate(Of TSource, TAccumulate)(ParallelQuery(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate))\n- uid: System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})\n  commentId: M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})\n  id: Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TAccumulate, TAccumulate>, Func<TAccumulate, TResult>)\n  fullName: System.Linq.ParallelEnumerable.Aggregate<TSource, TAccumulate, TResult>(System.Linq.ParallelQuery<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>, System.Func<TAccumulate, TAccumulate, TAccumulate>, System.Func<TAccumulate, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Aggregate\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 19\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Applies in parallel an accumulator function over a sequence. This overload is not available in the sequential implementation.</p>\\n\"\n  syntax:\n    content: public static TResult Aggregate<TSource, TAccumulate, TResult>(this ParallelQuery<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> updateAccumulatorFunc, Func<TAccumulate, TAccumulate, TAccumulate> combineAccumulatorsFunc, Func<TAccumulate, TResult> resultSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Aggregate(Of TSource, TAccumulate, TResult)(source As ParallelQuery(Of TSource), seed As TAccumulate, updateAccumulatorFunc As Func(Of TAccumulate, TSource, TAccumulate), combineAccumulatorsFunc As Func(Of TAccumulate, TAccumulate, TAccumulate), resultSelector As Func(Of TAccumulate, TResult)) As TResult\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence to aggregate over.</p>\\n\"\n    - id: seed\n      type: '{TAccumulate}'\n      description: \"\\n<p>The initial accumulator value.</p>\\n\"\n    - id: updateAccumulatorFunc\n      type: System.Func{{TAccumulate},{TSource},{TAccumulate}}\n      description: \"\\n<p>An accumulator function to be invoked on each element in a partition. </p>\\n\"\n    - id: combineAccumulatorsFunc\n      type: System.Func{{TAccumulate},{TAccumulate},{TAccumulate}}\n      description: \"\\n<p>An accumulator function to be invoked on the yielded accumulator result from each partition. </p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TAccumulate},{TResult}}\n      description: \"\\n<p>A function to transform the final accumulator value into the result value. </p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TAccumulate\n      description: \"\\n<p>The type of the accumulator value.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the resulting value.</p>\\n\"\n    return:\n      type: '{TResult}'\n      description: \"\\n<p>The transformed final accumulator value.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>updateAccumulatorFunc</em> or <em>combineAccumulatorsFunc</em> or <em>resultSelector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Aggregate(Of TSource, TAccumulate, TResult)(System.Linq.ParallelQuery(Of TSource), TAccumulate, System.Func(Of TAccumulate, TSource, TAccumulate), System.Func(Of TAccumulate, TAccumulate, TAccumulate), System.Func(Of TAccumulate, TResult))\n  name.vb: Aggregate(Of TSource, TAccumulate, TResult)(ParallelQuery(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TAccumulate, TAccumulate), Func(Of TAccumulate, TResult))\n  nameWithType: ParallelEnumerable.Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TAccumulate, TAccumulate>, Func<TAccumulate, TResult>)\n  nameWithType.vb: ParallelEnumerable.Aggregate(Of TSource, TAccumulate, TResult)(ParallelQuery(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TAccumulate, TAccumulate), Func(Of TAccumulate, TResult))\n- uid: System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  commentId: M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  id: Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>)\n  fullName: System.Linq.ParallelEnumerable.Aggregate<TSource, TAccumulate, TResult>(System.Linq.ParallelQuery<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>, System.Func<TAccumulate, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Aggregate\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 20\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Applies in parallel an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</p>\\n\"\n  syntax:\n    content: public static TResult Aggregate<TSource, TAccumulate, TResult>(this ParallelQuery<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, Func<TAccumulate, TResult> resultSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Aggregate(Of TSource, TAccumulate, TResult)(source As ParallelQuery(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate), resultSelector As Func(Of TAccumulate, TResult)) As TResult\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence to aggregate over.</p>\\n\"\n    - id: seed\n      type: '{TAccumulate}'\n      description: \"\\n<p>The initial accumulator value.</p>\\n\"\n    - id: func\n      type: System.Func{{TAccumulate},{TSource},{TAccumulate}}\n      description: \"\\n<p>An accumulator function to be invoked on each element.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TAccumulate},{TResult}}\n      description: \"\\n<p>A function to transform the final accumulator value into the result value.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TAccumulate\n      description: \"\\n<p>The type of the accumulator value.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the resulting value.</p>\\n\"\n    return:\n      type: '{TResult}'\n      description: \"\\n<p>The transformed final accumulator value.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>func</em> or <em>resultSelector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Aggregate(Of TSource, TAccumulate, TResult)(System.Linq.ParallelQuery(Of TSource), TAccumulate, System.Func(Of TAccumulate, TSource, TAccumulate), System.Func(Of TAccumulate, TResult))\n  name.vb: Aggregate(Of TSource, TAccumulate, TResult)(ParallelQuery(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TResult))\n  nameWithType: ParallelEnumerable.Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>)\n  nameWithType.vb: ParallelEnumerable.Aggregate(Of TSource, TAccumulate, TResult)(ParallelQuery(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TResult))\n- uid: System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})\n  commentId: M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})\n  id: Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource>, Func<TAccumulate>, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TAccumulate, TAccumulate>, Func<TAccumulate, TResult>)\n  fullName: System.Linq.ParallelEnumerable.Aggregate<TSource, TAccumulate, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TAccumulate>, System.Func<TAccumulate, TSource, TAccumulate>, System.Func<TAccumulate, TAccumulate, TAccumulate>, System.Func<TAccumulate, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Aggregate\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 21\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Applies in parallel an accumulator function over a sequence. This overload is not available in the sequential implementation.</p>\\n\"\n  syntax:\n    content: public static TResult Aggregate<TSource, TAccumulate, TResult>(this ParallelQuery<TSource> source, Func<TAccumulate> seedFactory, Func<TAccumulate, TSource, TAccumulate> updateAccumulatorFunc, Func<TAccumulate, TAccumulate, TAccumulate> combineAccumulatorsFunc, Func<TAccumulate, TResult> resultSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Aggregate(Of TSource, TAccumulate, TResult)(source As ParallelQuery(Of TSource), seedFactory As Func(Of TAccumulate), updateAccumulatorFunc As Func(Of TAccumulate, TSource, TAccumulate), combineAccumulatorsFunc As Func(Of TAccumulate, TAccumulate, TAccumulate), resultSelector As Func(Of TAccumulate, TResult)) As TResult\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence to aggregate over.</p>\\n\"\n    - id: seedFactory\n      type: System.Func{{TAccumulate}}\n      description: \"\\n<p>A function that returns the initial accumulator value. </p>\\n\"\n    - id: updateAccumulatorFunc\n      type: System.Func{{TAccumulate},{TSource},{TAccumulate}}\n      description: \"\\n<p>An accumulator function to be invoked on each element in a partition. </p>\\n\"\n    - id: combineAccumulatorsFunc\n      type: System.Func{{TAccumulate},{TAccumulate},{TAccumulate}}\n      description: \"\\n<p>An accumulator function to be invoked on the yielded accumulator result from each partition.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TAccumulate},{TResult}}\n      description: \"\\n<p>A function to transform the final accumulator value into the result value. </p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TAccumulate\n      description: \"\\n<p>The type of the accumulator value.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the resulting value.</p>\\n\"\n    return:\n      type: '{TResult}'\n      description: \"\\n<p>The transformed final accumulator value.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>seedFactory</em> or <em>updateAccumulatorFunc</em> or <em>combineAccumulatorsFunc</em> or <em>resultSelector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Aggregate(Of TSource, TAccumulate, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TAccumulate), System.Func(Of TAccumulate, TSource, TAccumulate), System.Func(Of TAccumulate, TAccumulate, TAccumulate), System.Func(Of TAccumulate, TResult))\n  name.vb: Aggregate(Of TSource, TAccumulate, TResult)(ParallelQuery(Of TSource), Func(Of TAccumulate), Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TAccumulate, TAccumulate), Func(Of TAccumulate, TResult))\n  nameWithType: ParallelEnumerable.Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource>, Func<TAccumulate>, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TAccumulate, TAccumulate>, Func<TAccumulate, TResult>)\n  nameWithType.vb: ParallelEnumerable.Aggregate(Of TSource, TAccumulate, TResult)(ParallelQuery(Of TSource), Func(Of TAccumulate), Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TAccumulate, TAccumulate), Func(Of TAccumulate, TResult))\n- uid: System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  id: All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: All<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)\n  fullName: System.Linq.ParallelEnumerable.All<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: All\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 22\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Determines in parallel whether all elements of a sequence satisfy a condition.</p>\\n\"\n  syntax:\n    content: public static bool All<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function All(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence whose elements to apply the predicate to.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Boolean}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false..</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.All(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))\n  name.vb: All(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))\n  nameWithType: ParallelEnumerable.All<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)\n  nameWithType.vb: ParallelEnumerable.All(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))\n- uid: System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})\n  commentId: M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})\n  id: Any``1(System.Linq.ParallelQuery{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Any<TSource>(ParallelQuery<TSource>)\n  fullName: System.Linq.ParallelEnumerable.Any<TSource>(System.Linq.ParallelQuery<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Any\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 23\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Determines whether a parallel sequence contains any elements.</p>\\n\"\n  syntax:\n    content: public static bool Any<TSource>(this ParallelQuery<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Any(Of TSource)(source As ParallelQuery(Of TSource)) As Boolean\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to check for emptiness.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>true if the source sequence contains any elements; otherwise, false.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Any(Of TSource)(System.Linq.ParallelQuery(Of TSource))\n  name.vb: Any(Of TSource)(ParallelQuery(Of TSource))\n  nameWithType: ParallelEnumerable.Any<TSource>(ParallelQuery<TSource>)\n  nameWithType.vb: ParallelEnumerable.Any(Of TSource)(ParallelQuery(Of TSource))\n- uid: System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  id: Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Any<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)\n  fullName: System.Linq.ParallelEnumerable.Any<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Any\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 24\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Determines in parallel whether any element of a sequence satisfies a condition.</p>\\n\"\n  syntax:\n    content: public static bool Any<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Any(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence to whose elements the predicate will be applied.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Boolean}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>true if any elements in the source sequence pass the test in the specified predicate; otherwise, false.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Any(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))\n  name.vb: Any(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))\n  nameWithType: ParallelEnumerable.Any<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)\n  nameWithType.vb: ParallelEnumerable.Any(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))\n- uid: System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})\n  commentId: M:System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})\n  id: AsEnumerable``1(System.Linq.ParallelQuery{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: AsEnumerable<TSource>(ParallelQuery<TSource>)\n  fullName: System.Linq.ParallelEnumerable.AsEnumerable<TSource>(System.Linq.ParallelQuery<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsEnumerable\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 25\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Converts a <xref href=\\\"System.Linq.ParallelQuery`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> into an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to force sequential evaluation of the query.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TSource> AsEnumerable<TSource>(this ParallelQuery<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AsEnumerable(Of TSource)(source As ParallelQuery(Of TSource)) As IEnumerable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to cast as <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>The input sequence typed as <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.AsEnumerable(Of TSource)(System.Linq.ParallelQuery(Of TSource))\n  name.vb: AsEnumerable(Of TSource)(ParallelQuery(Of TSource))\n  nameWithType: ParallelEnumerable.AsEnumerable<TSource>(ParallelQuery<TSource>)\n  nameWithType.vb: ParallelEnumerable.AsEnumerable(Of TSource)(ParallelQuery(Of TSource))\n- uid: System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)\n  commentId: M:System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)\n  id: AsOrdered(System.Linq.ParallelQuery)\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: AsOrdered(ParallelQuery)\n  fullName: System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsOrdered\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 26\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Enables treatment of a data source as if it were ordered, overriding the default of unordered. AsOrdered may only be invoked on non-generic sequences returned by AsParallel, ParallelEnumerable.Range, and ParallelEnumerable.Repeat.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery AsOrdered(this ParallelQuery source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AsOrdered(source As ParallelQuery) As ParallelQuery\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery\n      description: \"\\n<p>The input sequence.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery\n      description: \"\\n<p>The source sequence which will maintain the original ordering in the subsequent query operators.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>thrown if <em>source</em> contains no elements</p>\\n<p>-or-</p>\\n<p> if AsOrdered is called midway through a query. It is allowed to be called immediately after <xref href=\\\"System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ParallelEnumerable.AsOrdered(ParallelQuery)\n- uid: System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})\n  commentId: M:System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})\n  id: AsOrdered``1(System.Linq.ParallelQuery{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: AsOrdered<TSource>(ParallelQuery<TSource>)\n  fullName: System.Linq.ParallelEnumerable.AsOrdered<TSource>(System.Linq.ParallelQuery<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsOrdered\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 27\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Enables treatment of a data source as if it were ordered, overriding the default of unordered. AsOrdered may only be invoked on generic sequences returned by AsParallel, ParallelEnumerable.Range, and ParallelEnumerable.Repeat.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TSource> AsOrdered<TSource>(this ParallelQuery<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AsOrdered(Of TSource)(source As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The input sequence.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The source sequence which will maintain the original ordering in the subsequent query operators.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>Thrown if <em>source</em> contains no elements</p>\\n<p>-or-</p>\\n<p>if <em>source</em> is not one of AsParallel, ParallelEnumerable.Range, or ParallelEnumerable.Repeat.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.AsOrdered(Of TSource)(System.Linq.ParallelQuery(Of TSource))\n  name.vb: AsOrdered(Of TSource)(ParallelQuery(Of TSource))\n  nameWithType: ParallelEnumerable.AsOrdered<TSource>(ParallelQuery<TSource>)\n  nameWithType.vb: ParallelEnumerable.AsOrdered(Of TSource)(ParallelQuery(Of TSource))\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  id: AsParallel(System.Collections.IEnumerable)\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsParallel\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 28\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Enables parallelization of a query.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery AsParallel(this IEnumerable source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AsParallel(source As IEnumerable) As ParallelQuery\n    parameters:\n    - id: source\n      type: System.Collections.IEnumerable\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to convert to a <xref href=\\\"System.Linq.ParallelQuery\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery\n      description: \"\\n<p>The source as a ParallelQuery to bind to ParallelEnumerable extension methods.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})\n  id: AsParallel``1(System.Collections.Concurrent.Partitioner{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: AsParallel<TSource>(Partitioner<TSource>)\n  fullName: System.Linq.ParallelEnumerable.AsParallel<TSource>(System.Collections.Concurrent.Partitioner<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsParallel\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 29\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Enables parallelization of a query, as sourced by a custom partitioner that is responsible for splitting the input sequence into partitions.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TSource> AsParallel<TSource>(this Partitioner<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AsParallel(Of TSource)(source As Partitioner(Of TSource)) As ParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Collections.Concurrent.Partitioner{{TSource}}\n      description: \"\\n<p>A partitioner over the input sequence.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The <em>source</em> as a ParallelQuery to bind to ParallelEnumerable extension methods.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.AsParallel(Of TSource)(System.Collections.Concurrent.Partitioner(Of TSource))\n  name.vb: AsParallel(Of TSource)(Partitioner(Of TSource))\n  nameWithType: ParallelEnumerable.AsParallel<TSource>(Partitioner<TSource>)\n  nameWithType.vb: ParallelEnumerable.AsParallel(Of TSource)(Partitioner(Of TSource))\n- uid: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})\n  id: AsParallel``1(System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: AsParallel<TSource>(IEnumerable<TSource>)\n  fullName: System.Linq.ParallelEnumerable.AsParallel<TSource>(System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsParallel\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 30\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Enables parallelization of a query.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TSource> AsParallel<TSource>(this IEnumerable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AsParallel(Of TSource)(source As IEnumerable(Of TSource)) As ParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to convert to a <xref href=\\\"System.Linq.ParallelQuery`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The source as a <xref href=\\\"System.Linq.ParallelQuery`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to bind to ParallelEnumerable extension methods.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.AsParallel(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: AsParallel(Of TSource)(IEnumerable(Of TSource))\n  nameWithType: ParallelEnumerable.AsParallel<TSource>(IEnumerable<TSource>)\n  nameWithType.vb: ParallelEnumerable.AsParallel(Of TSource)(IEnumerable(Of TSource))\n- uid: System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})\n  commentId: M:System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})\n  id: AsSequential``1(System.Linq.ParallelQuery{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: AsSequential<TSource>(ParallelQuery<TSource>)\n  fullName: System.Linq.ParallelEnumerable.AsSequential<TSource>(System.Linq.ParallelQuery<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsSequential\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 31\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Converts a <xref href=\\\"System.Linq.ParallelQuery`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> into an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to force sequential evaluation of the query.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TSource> AsSequential<TSource>(this ParallelQuery<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AsSequential(Of TSource)(source As ParallelQuery(Of TSource)) As IEnumerable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A <xref href=\\\"System.Linq.ParallelQuery`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to convert to an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>The source as an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to bind to sequential extension methods.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.AsSequential(Of TSource)(System.Linq.ParallelQuery(Of TSource))\n  name.vb: AsSequential(Of TSource)(ParallelQuery(Of TSource))\n  nameWithType: ParallelEnumerable.AsSequential<TSource>(ParallelQuery<TSource>)\n  nameWithType.vb: ParallelEnumerable.AsSequential(Of TSource)(ParallelQuery(Of TSource))\n- uid: System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})\n  commentId: M:System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})\n  id: AsUnordered``1(System.Linq.ParallelQuery{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: AsUnordered<TSource>(ParallelQuery<TSource>)\n  fullName: System.Linq.ParallelEnumerable.AsUnordered<TSource>(System.Linq.ParallelQuery<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsUnordered\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 32\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Allows an intermediate query to be treated as if no ordering is implied among the elements.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TSource> AsUnordered<TSource>(this ParallelQuery<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AsUnordered(Of TSource)(source As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The input sequence.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The source sequence with arbitrary order.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.AsUnordered(Of TSource)(System.Linq.ParallelQuery(Of TSource))\n  name.vb: AsUnordered(Of TSource)(ParallelQuery(Of TSource))\n  nameWithType: ParallelEnumerable.AsUnordered<TSource>(ParallelQuery<TSource>)\n  nameWithType.vb: ParallelEnumerable.AsUnordered(Of TSource)(ParallelQuery(Of TSource))\n- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})\n  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})\n  id: Average(System.Linq.ParallelQuery{System.Decimal})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Average(ParallelQuery<Decimal>)\n  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Decimal>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 33\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the average of a sequence of values.</p>\\n\"\n  syntax:\n    content: public static decimal Average(this ParallelQuery<decimal> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As ParallelQuery(Of Decimal)) As Decimal\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Decimal}\n      description: \"\\n<p>A sequence of values that are used to calculate an average.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Decimal))\n  name.vb: Average(ParallelQuery(Of Decimal))\n  nameWithType: ParallelEnumerable.Average(ParallelQuery<Decimal>)\n  nameWithType.vb: ParallelEnumerable.Average(ParallelQuery(Of Decimal))\n- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})\n  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})\n  id: Average(System.Linq.ParallelQuery{System.Double})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Average(ParallelQuery<Double>)\n  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Double>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 34\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the average of a sequence of values.</p>\\n\"\n  syntax:\n    content: public static double Average(this ParallelQuery<double> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As ParallelQuery(Of Double)) As Double\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Double}\n      description: \"\\n<p>A sequence of values that are used to calculate an average.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Double))\n  name.vb: Average(ParallelQuery(Of Double))\n  nameWithType: ParallelEnumerable.Average(ParallelQuery<Double>)\n  nameWithType.vb: ParallelEnumerable.Average(ParallelQuery(Of Double))\n- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})\n  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})\n  id: Average(System.Linq.ParallelQuery{System.Int32})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Average(ParallelQuery<Int32>)\n  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Int32>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 35\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the average of a sequence of values.</p>\\n\"\n  syntax:\n    content: public static double Average(this ParallelQuery<int> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As ParallelQuery(Of Integer)) As Double\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Int32}\n      description: \"\\n<p>A sequence of values that are used to calculate an average.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The sum or count of the elements in the sequence is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Int32))\n  name.vb: Average(ParallelQuery(Of Int32))\n  nameWithType: ParallelEnumerable.Average(ParallelQuery<Int32>)\n  nameWithType.vb: ParallelEnumerable.Average(ParallelQuery(Of Int32))\n- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})\n  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})\n  id: Average(System.Linq.ParallelQuery{System.Int64})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Average(ParallelQuery<Int64>)\n  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 36\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the average of a sequence of values.</p>\\n\"\n  syntax:\n    content: public static double Average(this ParallelQuery<long> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As ParallelQuery(Of Long)) As Double\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Int64}\n      description: \"\\n<p>A sequence of values that are used to calculate an average.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The sum or count of the elements in the sequence is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Int64))\n  name.vb: Average(ParallelQuery(Of Int64))\n  nameWithType: ParallelEnumerable.Average(ParallelQuery<Int64>)\n  nameWithType.vb: ParallelEnumerable.Average(ParallelQuery(Of Int64))\n- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})\n  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})\n  id: Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Average(ParallelQuery<Nullable<Decimal>>)\n  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Nullable<System.Decimal>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 37\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the average of a sequence of values.</p>\\n\"\n  syntax:\n    content: public static decimal ? Average(this ParallelQuery<decimal ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As ParallelQuery(Of Decimal?)) As Decimal?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Nullable{System.Decimal}}\n      description: \"\\n<p>A sequence of values that are used to calculate an average.</p>\\n\"\n    return:\n      type: System.Nullable{System.Decimal}\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Nullable(Of System.Decimal)))\n  name.vb: Average(ParallelQuery(Of Nullable(Of Decimal)))\n  nameWithType: ParallelEnumerable.Average(ParallelQuery<Nullable<Decimal>>)\n  nameWithType.vb: ParallelEnumerable.Average(ParallelQuery(Of Nullable(Of Decimal)))\n- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})\n  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})\n  id: Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Average(ParallelQuery<Nullable<Double>>)\n  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Nullable<System.Double>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 38\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the average of a sequence of values.</p>\\n\"\n  syntax:\n    content: public static double ? Average(this ParallelQuery<double ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As ParallelQuery(Of Double?)) As Double?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Nullable{System.Double}}\n      description: \"\\n<p>The source sequence.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>Returns the average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>A sequence of values that are used to calculate an average.The average of the sequence of values.<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Nullable(Of System.Double)))\n  name.vb: Average(ParallelQuery(Of Nullable(Of Double)))\n  nameWithType: ParallelEnumerable.Average(ParallelQuery<Nullable<Double>>)\n  nameWithType.vb: ParallelEnumerable.Average(ParallelQuery(Of Nullable(Of Double)))\n- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})\n  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})\n  id: Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Average(ParallelQuery<Nullable<Int32>>)\n  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Nullable<System.Int32>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 39\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the average of a sequence of values.</p>\\n\"\n  syntax:\n    content: public static double ? Average(this ParallelQuery<int ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As ParallelQuery(Of Integer?)) As Double?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Nullable{System.Int32}}\n      description: \"\\n<p>A sequence of values that are used to calculate an average.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The sum or count of the elements in the sequence is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int32)))\n  name.vb: Average(ParallelQuery(Of Nullable(Of Int32)))\n  nameWithType: ParallelEnumerable.Average(ParallelQuery<Nullable<Int32>>)\n  nameWithType.vb: ParallelEnumerable.Average(ParallelQuery(Of Nullable(Of Int32)))\n- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})\n  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})\n  id: Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Average(ParallelQuery<Nullable<Int64>>)\n  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Nullable<System.Int64>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 40\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the average of a sequence of values.</p>\\n\"\n  syntax:\n    content: public static double ? Average(this ParallelQuery<long ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As ParallelQuery(Of Long?)) As Double?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Nullable{System.Int64}}\n      description: \"\\n<p>A sequence of values that are used to calculate an average.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The sum or count of the elements in the sequence is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int64)))\n  name.vb: Average(ParallelQuery(Of Nullable(Of Int64)))\n  nameWithType: ParallelEnumerable.Average(ParallelQuery<Nullable<Int64>>)\n  nameWithType.vb: ParallelEnumerable.Average(ParallelQuery(Of Nullable(Of Int64)))\n- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})\n  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})\n  id: Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Average(ParallelQuery<Nullable<Single>>)\n  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Nullable<System.Single>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 41\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the average of a sequence of values.</p>\\n\"\n  syntax:\n    content: public static float ? Average(this ParallelQuery<float ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As ParallelQuery(Of Single?)) As Single?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Nullable{System.Single}}\n      description: \"\\n<p>A sequence of values that are used to calculate an average.</p>\\n\"\n    return:\n      type: System.Nullable{System.Single}\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Nullable(Of System.Single)))\n  name.vb: Average(ParallelQuery(Of Nullable(Of Single)))\n  nameWithType: ParallelEnumerable.Average(ParallelQuery<Nullable<Single>>)\n  nameWithType.vb: ParallelEnumerable.Average(ParallelQuery(Of Nullable(Of Single)))\n- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})\n  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})\n  id: Average(System.Linq.ParallelQuery{System.Single})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Average(ParallelQuery<Single>)\n  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Single>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 42\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the average of a sequence of values.</p>\\n\"\n  syntax:\n    content: public static float Average(this ParallelQuery<float> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As ParallelQuery(Of Single)) As Single\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Single}\n      description: \"\\n<p>A sequence of values that are used to calculate an average.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Single))\n  name.vb: Average(ParallelQuery(Of Single))\n  nameWithType: ParallelEnumerable.Average(ParallelQuery<Single>)\n  nameWithType.vb: ParallelEnumerable.Average(ParallelQuery(Of Single))\n- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})\n  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})\n  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)\n  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Decimal>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 43\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static decimal Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, decimal> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values that are used to calculate an average.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Decimal}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>(Thrown as inner exception in an <xref href=\\\"System.AggregateException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>). The <em>selector</em> function returns a value greater than MaxValue for the element type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Decimal))\n  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Decimal))\n  nameWithType: ParallelEnumerable.Average<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)\n  nameWithType.vb: ParallelEnumerable.Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Decimal))\n- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})\n  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})\n  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)\n  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Double>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 44\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static double Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, double> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Double)) As Double\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values that are used to calculate an average.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Double}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p> (Thrown as inner exception in an <xref href=\\\"System.AggregateException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>). The <em>selector</em> function returns a value greater than MaxValue for the element type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Double))\n  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Double))\n  nameWithType: ParallelEnumerable.Average<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)\n  nameWithType.vb: ParallelEnumerable.Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Double))\n- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})\n  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})\n  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)\n  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 45\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static double Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, int> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer)) As Double\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values that are used to calculate an average.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Int32}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The sum or count of the elements in the sequence is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p> (Thrown as inner exception in an <xref href=\\\"System.AggregateException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>). The <em>selector</em> function returns a value greater than MaxValue for the element type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32))\n  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32))\n  nameWithType: ParallelEnumerable.Average<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)\n  nameWithType.vb: ParallelEnumerable.Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32))\n- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})\n  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})\n  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)\n  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 46\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static double Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, long> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Long)) As Double\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values that are used to calculate an average.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Int64}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The sum or count of the elements in the sequence is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p> (Thrown as inner exception in an <xref href=\\\"System.AggregateException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>). The <em>selector</em> function returns a value greater than MaxValue for the element type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int64))\n  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int64))\n  nameWithType: ParallelEnumerable.Average<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)\n  nameWithType.vb: ParallelEnumerable.Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int64))\n- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)\n  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 47\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static decimal ? Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, decimal ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Decimal?)) As Decimal?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values that are used to calculate an average.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Decimal}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Decimal}\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p> (Thrown as inner exception in an <xref href=\\\"System.AggregateException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>). The <em>selector</em> function returns a value greater than MaxValue for the element type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))\n  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Decimal)))\n  nameWithType: ParallelEnumerable.Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)\n  nameWithType.vb: ParallelEnumerable.Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Decimal)))\n- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})\n  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})\n  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)\n  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Double>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 48\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static double ? Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, double ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Double?)) As Double?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values that are used to calculate an average.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Double}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p> (Thrown as inner exception in an <xref href=\\\"System.AggregateException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>). The <em>selector</em> function returns a value greater than MaxValue for the element type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))\n  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Double)))\n  nameWithType: ParallelEnumerable.Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)\n  nameWithType.vb: ParallelEnumerable.Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Double)))\n- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})\n  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})\n  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)\n  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 49\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static double ? Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, int ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer?)) As Double?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values that are used to calculate an average.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Int32}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The sum or count of the elements in the sequence is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p> (Thrown as inner exception in an <xref href=\\\"System.AggregateException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>). The <em>selector</em> function returns a value greater than MaxValue for the element type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))\n  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int32)))\n  nameWithType: ParallelEnumerable.Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)\n  nameWithType.vb: ParallelEnumerable.Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int32)))\n- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})\n  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})\n  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)\n  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 50\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static double ? Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, long ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Long?)) As Double?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values that are used to calculate an average.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Int64}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The sum or count of the elements in the sequence is larger than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p> (Thrown as inner exception in an <xref href=\\\"System.AggregateException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>). The <em>selector</em> function returns a value greater than MaxValue for the element type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))\n  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int64)))\n  nameWithType: ParallelEnumerable.Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)\n  nameWithType.vb: ParallelEnumerable.Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int64)))\n- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})\n  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})\n  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)\n  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Single>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 51\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static float ? Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, float ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Single?)) As Single?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values that are used to calculate an average.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Single}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Single}\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p> (Thrown as inner exception in an <xref href=\\\"System.AggregateException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>). The <em>selector</em> function returns a value greater than MaxValue for the element type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))\n  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Single)))\n  nameWithType: ParallelEnumerable.Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)\n  nameWithType.vb: ParallelEnumerable.Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Single)))\n- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})\n  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})\n  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)\n  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Single>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 52\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static float Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, float> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Single)) As Single\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values that are used to calculate an average.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Single}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p> (Thrown as inner exception in an <xref href=\\\"System.AggregateException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>). The <em>selector</em> function returns a value greater than MaxValue for the element type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Single))\n  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Single))\n  nameWithType: ParallelEnumerable.Average<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)\n  nameWithType.vb: ParallelEnumerable.Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Single))\n- uid: System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)\n  commentId: M:System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)\n  id: Cast``1(System.Linq.ParallelQuery)\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Cast<TResult>(ParallelQuery)\n  fullName: System.Linq.ParallelEnumerable.Cast<TResult>(System.Linq.ParallelQuery)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Cast\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 53\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Converts the elements of a ParallelQuery to the specified type.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TResult> Cast<TResult>(this ParallelQuery source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Cast(Of TResult)(source As ParallelQuery) As ParallelQuery(Of TResult)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery\n      description: \"\\n<p>The sequence that contains the elements to be converted.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type to convert the elements of <em>source</em> to.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TResult}}\n      description: \"\\n<p>A sequence that contains each element of the source sequence converted to the specified type.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The type of the source sequence could not be converted to <em>TResult</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Cast(Of TResult)(System.Linq.ParallelQuery)\n  name.vb: Cast(Of TResult)(ParallelQuery)\n  nameWithType: ParallelEnumerable.Cast<TResult>(ParallelQuery)\n  nameWithType.vb: ParallelEnumerable.Cast(Of TResult)(ParallelQuery)\n- uid: System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})\n  id: Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Concat<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)\n  fullName: System.Linq.ParallelEnumerable.Concat<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Concat\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 54\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>This Concat overload should never be called. This method is marked as obsolete and always throws <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> when called.</p>\\n\"\n  syntax:\n    content: >-\n      [Obsolete(\"The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\")]\n\n      public static ParallelQuery<TSource> Concat<TSource>(this ParallelQuery<TSource> first, IEnumerable<TSource> second)\n    content.vb: >-\n      <Obsolete(\"The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\")>\n\n      <ExtensionAttribute>\n\n      Public Shared Function Concat(Of TSource)(first As ParallelQuery(Of TSource), second As IEnumerable(Of TSource)) As ParallelQuery(Of TSource)\n    parameters:\n    - id: first\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: second\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>This type parameter is not used.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>This overload always throws a <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The exception that occurs when this method is called.</p>\\n\"\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Concat(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: Concat(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource))\n  nameWithType: ParallelEnumerable.Concat<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)\n  nameWithType.vb: ParallelEnumerable.Concat(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource))\n- uid: System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})\n  commentId: M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})\n  id: Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Concat<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)\n  fullName: System.Linq.ParallelEnumerable.Concat<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Concat\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 56\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Concatenates two parallel sequences.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TSource> Concat<TSource>(this ParallelQuery<TSource> first, ParallelQuery<TSource> second)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Concat(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)\n    parameters:\n    - id: first\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The first sequence to concatenate.</p>\\n\"\n    - id: second\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to concatenate to the first sequence.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of the input sequences.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence that contains the concatenated elements of the two input sequences.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>first</em> or <em>second</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Concat(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource))\n  name.vb: Concat(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))\n  nameWithType: ParallelEnumerable.Concat<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)\n  nameWithType.vb: ParallelEnumerable.Concat(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))\n- uid: System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)\n  commentId: M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)\n  id: Contains``1(System.Linq.ParallelQuery{``0},``0)\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Contains<TSource>(ParallelQuery<TSource>, TSource)\n  fullName: System.Linq.ParallelEnumerable.Contains<TSource>(System.Linq.ParallelQuery<TSource>, TSource)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Contains\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 57\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Determines in parallel whether a sequence contains a specified element by using the default equality comparer.</p>\\n\"\n  syntax:\n    content: public static bool Contains<TSource>(this ParallelQuery<TSource> source, TSource value)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Contains(Of TSource)(source As ParallelQuery(Of TSource), value As TSource) As Boolean\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence in which to locate a value.</p>\\n\"\n    - id: value\n      type: '{TSource}'\n      description: \"\\n<p>The value to locate in the sequence.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>true if the source sequence contains an element that has the specified value; otherwise, false.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Contains(Of TSource)(System.Linq.ParallelQuery(Of TSource), TSource)\n  name.vb: Contains(Of TSource)(ParallelQuery(Of TSource), TSource)\n  nameWithType: ParallelEnumerable.Contains<TSource>(ParallelQuery<TSource>, TSource)\n  nameWithType.vb: ParallelEnumerable.Contains(Of TSource)(ParallelQuery(Of TSource), TSource)\n- uid: System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  id: Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Contains<TSource>(ParallelQuery<TSource>, TSource, IEqualityComparer<TSource>)\n  fullName: System.Linq.ParallelEnumerable.Contains<TSource>(System.Linq.ParallelQuery<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Contains\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 58\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Determines in parallel whether a sequence contains a specified element by using a specified <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static bool Contains<TSource>(this ParallelQuery<TSource> source, TSource value, IEqualityComparer<TSource> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Contains(Of TSource)(source As ParallelQuery(Of TSource), value As TSource, comparer As IEqualityComparer(Of TSource)) As Boolean\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence in which to locate a value.</p>\\n\"\n    - id: value\n      type: '{TSource}'\n      description: \"\\n<p>The value to locate in the sequence.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TSource}}\n      description: \"\\n<p>An equality comparer to compare values.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>true if the source sequence contains an element that has the specified value; otherwise, false.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Contains(Of TSource)(System.Linq.ParallelQuery(Of TSource), TSource, System.Collections.Generic.IEqualityComparer(Of TSource))\n  name.vb: Contains(Of TSource)(ParallelQuery(Of TSource), TSource, IEqualityComparer(Of TSource))\n  nameWithType: ParallelEnumerable.Contains<TSource>(ParallelQuery<TSource>, TSource, IEqualityComparer<TSource>)\n  nameWithType.vb: ParallelEnumerable.Contains(Of TSource)(ParallelQuery(Of TSource), TSource, IEqualityComparer(Of TSource))\n- uid: System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})\n  commentId: M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})\n  id: Count``1(System.Linq.ParallelQuery{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Count<TSource>(ParallelQuery<TSource>)\n  fullName: System.Linq.ParallelEnumerable.Count<TSource>(System.Linq.ParallelQuery<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 59\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the number of elements in a parallel sequence.</p>\\n\"\n  syntax:\n    content: public static int Count<TSource>(this ParallelQuery<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Count(Of TSource)(source As ParallelQuery(Of TSource)) As Integer\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence that contains elements to be counted.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The number of elements in source is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. (In this case the InnerException is <xref href=\\\"System.OverflowException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>) -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Count(Of TSource)(System.Linq.ParallelQuery(Of TSource))\n  name.vb: Count(Of TSource)(ParallelQuery(Of TSource))\n  nameWithType: ParallelEnumerable.Count<TSource>(ParallelQuery<TSource>)\n  nameWithType.vb: ParallelEnumerable.Count(Of TSource)(ParallelQuery(Of TSource))\n- uid: System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  id: Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Count<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)\n  fullName: System.Linq.ParallelEnumerable.Count<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 60\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns a number that represents how many elements in the specified parallel sequence satisfy a condition.</p>\\n\"\n  syntax:\n    content: public static int Count<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Count(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As Integer\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence that contains elements to be counted.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Boolean}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The number of elements in source is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. (In this case the InnerException is <xref href=\\\"System.OverflowException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>) -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Count(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))\n  name.vb: Count(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))\n  nameWithType: ParallelEnumerable.Count<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)\n  nameWithType.vb: ParallelEnumerable.Count(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))\n- uid: System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})\n  commentId: M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})\n  id: DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: DefaultIfEmpty<TSource>(ParallelQuery<TSource>)\n  fullName: System.Linq.ParallelEnumerable.DefaultIfEmpty<TSource>(System.Linq.ParallelQuery<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DefaultIfEmpty\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 61\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the elements of the specified parallel sequence or the type parameter's default value in a singleton collection if the sequence is empty.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TSource> DefaultIfEmpty<TSource>(this ParallelQuery<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function DefaultIfEmpty(Of TSource)(source As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to return a default value for if it is empty.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence that contains default(TSource) if <em>source</em> is empty; otherwise, <em>source</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.DefaultIfEmpty(Of TSource)(System.Linq.ParallelQuery(Of TSource))\n  name.vb: DefaultIfEmpty(Of TSource)(ParallelQuery(Of TSource))\n  nameWithType: ParallelEnumerable.DefaultIfEmpty<TSource>(ParallelQuery<TSource>)\n  nameWithType.vb: ParallelEnumerable.DefaultIfEmpty(Of TSource)(ParallelQuery(Of TSource))\n- uid: System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)\n  commentId: M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)\n  id: DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: DefaultIfEmpty<TSource>(ParallelQuery<TSource>, TSource)\n  fullName: System.Linq.ParallelEnumerable.DefaultIfEmpty<TSource>(System.Linq.ParallelQuery<TSource>, TSource)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DefaultIfEmpty\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 62\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the elements of the specified parallel sequence or the specified value in a singleton collection if the sequence is empty.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TSource> DefaultIfEmpty<TSource>(this ParallelQuery<TSource> source, TSource defaultValue)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function DefaultIfEmpty(Of TSource)(source As ParallelQuery(Of TSource), defaultValue As TSource) As ParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to return the specified value for if it is empty.</p>\\n\"\n    - id: defaultValue\n      type: '{TSource}'\n      description: \"\\n<p>The value to return if the sequence is empty.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence that contains defaultValue if <em>source</em> is empty; otherwise, <em>source</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.DefaultIfEmpty(Of TSource)(System.Linq.ParallelQuery(Of TSource), TSource)\n  name.vb: DefaultIfEmpty(Of TSource)(ParallelQuery(Of TSource), TSource)\n  nameWithType: ParallelEnumerable.DefaultIfEmpty<TSource>(ParallelQuery<TSource>, TSource)\n  nameWithType.vb: ParallelEnumerable.DefaultIfEmpty(Of TSource)(ParallelQuery(Of TSource), TSource)\n- uid: System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})\n  commentId: M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})\n  id: Distinct``1(System.Linq.ParallelQuery{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Distinct<TSource>(ParallelQuery<TSource>)\n  fullName: System.Linq.ParallelEnumerable.Distinct<TSource>(System.Linq.ParallelQuery<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Distinct\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 63\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns distinct elements from a parallel sequence by using the default equality comparer to compare values.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TSource> Distinct<TSource>(this ParallelQuery<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Distinct(Of TSource)(source As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to remove duplicate elements from.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence that contains distinct elements from the source sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Distinct(Of TSource)(System.Linq.ParallelQuery(Of TSource))\n  name.vb: Distinct(Of TSource)(ParallelQuery(Of TSource))\n  nameWithType: ParallelEnumerable.Distinct<TSource>(ParallelQuery<TSource>)\n  nameWithType.vb: ParallelEnumerable.Distinct(Of TSource)(ParallelQuery(Of TSource))\n- uid: System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Distinct<TSource>(ParallelQuery<TSource>, IEqualityComparer<TSource>)\n  fullName: System.Linq.ParallelEnumerable.Distinct<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Distinct\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 64\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns distinct elements from a parallel sequence by using a specified <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare values.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TSource> Distinct<TSource>(this ParallelQuery<TSource> source, IEqualityComparer<TSource> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Distinct(Of TSource)(source As ParallelQuery(Of TSource), comparer As IEqualityComparer(Of TSource)) As ParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to remove duplicate elements from.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  to compare values.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence that contains distinct elements from the source sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Distinct(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))\n  name.vb: Distinct(Of TSource)(ParallelQuery(Of TSource), IEqualityComparer(Of TSource))\n  nameWithType: ParallelEnumerable.Distinct<TSource>(ParallelQuery<TSource>, IEqualityComparer<TSource>)\n  nameWithType.vb: ParallelEnumerable.Distinct(Of TSource)(ParallelQuery(Of TSource), IEqualityComparer(Of TSource))\n- uid: System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)\n  commentId: M:System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)\n  id: ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: ElementAt<TSource>(ParallelQuery<TSource>, Int32)\n  fullName: System.Linq.ParallelEnumerable.ElementAt<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ElementAt\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 65\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the element at a specified index in a parallel sequence.</p>\\n\"\n  syntax:\n    content: public static TSource ElementAt<TSource>(this ParallelQuery<TSource> source, int index)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ElementAt(Of TSource)(source As ParallelQuery(Of TSource), index As Integer) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence to return an element from.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the element to retrieve.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The element at the specified position in the source sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than 0 or greater than or equal to the number of elements in <em>source</em>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.ElementAt(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Int32)\n  name.vb: ElementAt(Of TSource)(ParallelQuery(Of TSource), Int32)\n  nameWithType: ParallelEnumerable.ElementAt<TSource>(ParallelQuery<TSource>, Int32)\n  nameWithType.vb: ParallelEnumerable.ElementAt(Of TSource)(ParallelQuery(Of TSource), Int32)\n- uid: System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)\n  commentId: M:System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)\n  id: ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: ElementAtOrDefault<TSource>(ParallelQuery<TSource>, Int32)\n  fullName: System.Linq.ParallelEnumerable.ElementAtOrDefault<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ElementAtOrDefault\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 66\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the element at a specified index in a parallel sequence or a default value if the index is out of range.</p>\\n\"\n  syntax:\n    content: public static TSource ElementAtOrDefault<TSource>(this ParallelQuery<TSource> source, int index)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ElementAtOrDefault(Of TSource)(source As ParallelQuery(Of TSource), index As Integer) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence to return an element from.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the element to retrieve.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>default(TSource) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.ElementAtOrDefault(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Int32)\n  name.vb: ElementAtOrDefault(Of TSource)(ParallelQuery(Of TSource), Int32)\n  nameWithType: ParallelEnumerable.ElementAtOrDefault<TSource>(ParallelQuery<TSource>, Int32)\n  nameWithType.vb: ParallelEnumerable.ElementAtOrDefault(Of TSource)(ParallelQuery(Of TSource), Int32)\n- uid: System.Linq.ParallelEnumerable.Empty``1\n  commentId: M:System.Linq.ParallelEnumerable.Empty``1\n  id: Empty``1\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Empty<TResult>()\n  fullName: System.Linq.ParallelEnumerable.Empty<TResult>()\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Empty\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 67\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns an empty ParallelQuery{TResult} that has the specified type argument.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TResult> Empty<TResult>()\n    content.vb: Public Shared Function Empty(Of TResult) As ParallelQuery(Of TResult)\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type to assign to the type parameter of the returned generic sequence.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TResult}}\n      description: \"\\n<p>An empty sequence whose type argument is <em>TResult</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Empty(Of TResult)()\n  name.vb: Empty(Of TResult)()\n  nameWithType: ParallelEnumerable.Empty<TResult>()\n  nameWithType.vb: ParallelEnumerable.Empty(Of TResult)()\n- uid: System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})\n  id: Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Except<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)\n  fullName: System.Linq.ParallelEnumerable.Except<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Except\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 68\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>This Except overload should never be called. This method is marked as obsolete and always throws <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> when called.</p>\\n\"\n  syntax:\n    content: >-\n      [Obsolete(\"The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\")]\n\n      public static ParallelQuery<TSource> Except<TSource>(this ParallelQuery<TSource> first, IEnumerable<TSource> second)\n    content.vb: >-\n      <Obsolete(\"The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\")>\n\n      <ExtensionAttribute>\n\n      Public Shared Function Except(Of TSource)(first As ParallelQuery(Of TSource), second As IEnumerable(Of TSource)) As ParallelQuery(Of TSource)\n    parameters:\n    - id: first\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: second\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>This type parameter is not used.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>This overload always throws a <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The exception that occurs when this method is called.</p>\\n\"\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Except(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: Except(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource))\n  nameWithType: ParallelEnumerable.Except<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)\n  nameWithType.vb: ParallelEnumerable.Except(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource))\n- uid: System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Except<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: System.Linq.ParallelEnumerable.Except<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Except\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 70\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>This Except overload should never be called. This method is marked as obsolete and always throws <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> when called.</p>\\n\"\n  syntax:\n    content: >-\n      [Obsolete(\"The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\")]\n\n      public static ParallelQuery<TSource> Except<TSource>(this ParallelQuery<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)\n    content.vb: >-\n      <Obsolete(\"The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\")>\n\n      <ExtensionAttribute>\n\n      Public Shared Function Except(Of TSource)(first As ParallelQuery(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As ParallelQuery(Of TSource)\n    parameters:\n    - id: first\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: second\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TSource}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>This type parameter is not used.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>This overload always throws a <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The exception that occurs when this method is called.</p>\\n\"\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Except(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))\n  name.vb: Except(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))\n  nameWithType: ParallelEnumerable.Except<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType.vb: ParallelEnumerable.Except(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))\n- uid: System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})\n  commentId: M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})\n  id: Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Except<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)\n  fullName: System.Linq.ParallelEnumerable.Except<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Except\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 72\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Produces the set difference of two parallel sequences by using the default equality comparer to compare values.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TSource> Except<TSource>(this ParallelQuery<TSource> first, ParallelQuery<TSource> second)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Except(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)\n    parameters:\n    - id: first\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence whose elements that are not also in <em>second</em> will be returned.</p>\\n\"\n    - id: second\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of the input sequences.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence that contains the set difference of the elements of two sequences.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>first</em> or <em>second</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Except(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource))\n  name.vb: Except(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))\n  nameWithType: ParallelEnumerable.Except<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)\n  nameWithType.vb: ParallelEnumerable.Except(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))\n- uid: System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Except<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)\n  fullName: System.Linq.ParallelEnumerable.Except<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Except\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 73\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Produces the set difference of two parallel sequences by using the specified <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare values.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TSource> Except<TSource>(this ParallelQuery<TSource> first, ParallelQuery<TSource> second, IEqualityComparer<TSource> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Except(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource), comparer As IEqualityComparer(Of TSource)) As ParallelQuery(Of TSource)\n    parameters:\n    - id: first\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence whose elements that are not also in <em>second</em> will be returned.</p>\\n\"\n    - id: second\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence. </p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TSource}}\n      description: \"\\n<p>\\n<xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare values.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of the input sequences.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence that contains the set difference of the elements of two sequences.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>first</em> or <em>second</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Except(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))\n  name.vb: Except(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource), IEqualityComparer(Of TSource))\n  nameWithType: ParallelEnumerable.Except<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)\n  nameWithType.vb: ParallelEnumerable.Except(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource), IEqualityComparer(Of TSource))\n- uid: System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})\n  commentId: M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})\n  id: First``1(System.Linq.ParallelQuery{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: First<TSource>(ParallelQuery<TSource>)\n  fullName: System.Linq.ParallelEnumerable.First<TSource>(System.Linq.ParallelQuery<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: First\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 74\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the first element of a parallel sequence.</p>\\n\"\n  syntax:\n    content: public static TSource First<TSource>(this ParallelQuery<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function First(Of TSource)(source As ParallelQuery(Of TSource)) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to return the first element of.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The first element in the specified sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.First(Of TSource)(System.Linq.ParallelQuery(Of TSource))\n  name.vb: First(Of TSource)(ParallelQuery(Of TSource))\n  nameWithType: ParallelEnumerable.First<TSource>(ParallelQuery<TSource>)\n  nameWithType.vb: ParallelEnumerable.First(Of TSource)(ParallelQuery(Of TSource))\n- uid: System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  id: First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: First<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)\n  fullName: System.Linq.ParallelEnumerable.First<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: First\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 75\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the first element in a parallel sequence that satisfies a specified condition.</p>\\n\"\n  syntax:\n    content: public static TSource First<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function First(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to return an element from.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Boolean}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The first element in the sequence that passes the test in the specified predicate function.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>No element in <em>source</em> satisfies the condition in <em>predicate</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.First(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))\n  name.vb: First(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))\n  nameWithType: ParallelEnumerable.First<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)\n  nameWithType.vb: ParallelEnumerable.First(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))\n- uid: System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})\n  commentId: M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})\n  id: FirstOrDefault``1(System.Linq.ParallelQuery{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: FirstOrDefault<TSource>(ParallelQuery<TSource>)\n  fullName: System.Linq.ParallelEnumerable.FirstOrDefault<TSource>(System.Linq.ParallelQuery<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FirstOrDefault\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 76\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the first element of a parallel sequence, or a default value if the sequence contains no elements.</p>\\n\"\n  syntax:\n    content: public static TSource FirstOrDefault<TSource>(this ParallelQuery<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function FirstOrDefault(Of TSource)(source As ParallelQuery(Of TSource)) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to return the first element of.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>default(TSource) if <em>source</em> is empty; otherwise, the first element in <em>source</em>.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.FirstOrDefault(Of TSource)(System.Linq.ParallelQuery(Of TSource))\n  name.vb: FirstOrDefault(Of TSource)(ParallelQuery(Of TSource))\n  nameWithType: ParallelEnumerable.FirstOrDefault<TSource>(ParallelQuery<TSource>)\n  nameWithType.vb: ParallelEnumerable.FirstOrDefault(Of TSource)(ParallelQuery(Of TSource))\n- uid: System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  id: FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: FirstOrDefault<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)\n  fullName: System.Linq.ParallelEnumerable.FirstOrDefault<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FirstOrDefault\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 77\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the first element of the parallel sequence that satisfies a condition or a default value if no such element is found.</p>\\n\"\n  syntax:\n    content: public static TSource FirstOrDefault<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function FirstOrDefault(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to return an element from.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Boolean}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>default(TSource) if <em>source</em> is empty or if no element passes the test specified by predicate; otherwise, the first element in <em>source</em> that passes the test specified by predicate.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.FirstOrDefault(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))\n  name.vb: FirstOrDefault(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))\n  nameWithType: ParallelEnumerable.FirstOrDefault<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)\n  nameWithType.vb: ParallelEnumerable.FirstOrDefault(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))\n- uid: System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})\n  commentId: M:System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})\n  id: ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: ForAll<TSource>(ParallelQuery<TSource>, Action<TSource>)\n  fullName: System.Linq.ParallelEnumerable.ForAll<TSource>(System.Linq.ParallelQuery<TSource>, System.Action<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ForAll\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 78\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes in parallel the specified action for each element in the <em>source</em>.</p>\\n\"\n  syntax:\n    content: public static void ForAll<TSource>(this ParallelQuery<TSource> source, Action<TSource> action)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Sub ForAll(Of TSource)(source As ParallelQuery(Of TSource), action As Action(Of TSource))\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The <xref href=\\\"System.Linq.ParallelQuery`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements will be processed by <em>action</em>.</p>\\n\"\n    - id: action\n      type: System.Action{{TSource}}\n      description: \"\\n<p>An Action to invoke on each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.ForAll(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Action(Of TSource))\n  name.vb: ForAll(Of TSource)(ParallelQuery(Of TSource), Action(Of TSource))\n  nameWithType: ParallelEnumerable.ForAll<TSource>(ParallelQuery<TSource>, Action<TSource>)\n  nameWithType.vb: ParallelEnumerable.ForAll(Of TSource)(ParallelQuery(Of TSource), Action(Of TSource))\n- uid: System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  id: GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: GroupBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)\n  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupBy\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 79\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Groups in parallel the elements of a sequence according to a specified key selector function.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupBy(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey)) As ParallelQuery(Of IGrouping(Of TKey, TSource))\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>An OrderedParallelQuery{TSource}that contains elements to sort.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from an element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{System.Linq.IGrouping{{TKey},{TSource}}}\n      description: \"\\n<p>A sequence of groups that are sorted descending according to <em>TKey</em>.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey))\n  name.vb: GroupBy(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))\n  nameWithType: ParallelEnumerable.GroupBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)\n  nameWithType.vb: ParallelEnumerable.GroupBy(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))\n- uid: System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  id: GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: GroupBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)\n  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupBy\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 80\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Groups in parallel the elements of a sequence according to a specified key selector function and compares the keys by using a specified <xref href=\\\"System.Collections.Generic.IComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupBy(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As ParallelQuery(Of IGrouping(Of TKey, TSource))\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.OrderedParallelQuery`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains elements to sort.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from an element.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>>.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{System.Linq.IGrouping{{TKey},{TSource}}}\n      description: \"\\n<p>A sequence of groups that are sorted descending according to <em>TKey</em>.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))\n  name.vb: GroupBy(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))\n  nameWithType: ParallelEnumerable.GroupBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)\n  nameWithType.vb: ParallelEnumerable.GroupBy(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))\n- uid: System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})\n  commentId: M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})\n  id: GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: GroupBy<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)\n  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupBy\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 81\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Groups in parallel the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupBy(Of TSource, TKey, TElement)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As ParallelQuery(Of IGrouping(Of TKey, TElement))\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.OrderedParallelQuery`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains elements to sort.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from an element.</p>\\n\"\n    - id: elementSelector\n      type: System.Func{{TSource},{TElement}}\n      description: \"\\n<p>A function to map each source element to an element in an <xref href=\\\"System.Linq.IGrouping`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    - id: TElement\n      description: \"\\n<p>The type of the elements in the <xref href=\\\"System.Linq.IGrouping`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{System.Linq.IGrouping{{TKey},{TElement}}}\n      description: \"\\n<p>A sequence of groups that are sorted descending according to <em>TKey</em>.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey, TElement)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement))\n  name.vb: GroupBy(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))\n  nameWithType: ParallelEnumerable.GroupBy<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)\n  nameWithType.vb: ParallelEnumerable.GroupBy(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))\n- uid: System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  id: GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: GroupBy<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)\n  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupBy\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 82\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Groups in parallel the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group's elements are projected by using a specified function.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupBy(Of TSource, TKey, TElement)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As ParallelQuery(Of IGrouping(Of TKey, TElement))\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>An OrderedParallelQuery{TSource}that contains elements to sort.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from an element.</p>\\n\"\n    - id: elementSelector\n      type: System.Func{{TSource},{TElement}}\n      description: \"\\n<p>A function to map each source element to an element in an IGrouping.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TKey}}\n      description: \"\\n<p>An IComparer{TSource} to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    - id: TElement\n      description: \"\\n<p>The type of the elements in the IGrouping</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{System.Linq.IGrouping{{TKey},{TElement}}}\n      description: \"\\n<p>A sequence of groups that are sorted descending according to <em>TKey</em>.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey, TElement)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))\n  name.vb: GroupBy(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))\n  nameWithType: ParallelEnumerable.GroupBy<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)\n  nameWithType.vb: ParallelEnumerable.GroupBy(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))\n- uid: System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  commentId: M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  id: GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: GroupBy<TSource, TKey, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>)\n  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupBy\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 83\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Groups in parallel the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TResult> GroupBy<TSource, TKey, TResult>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, IEnumerable(Of TSource), TResult)) As ParallelQuery(Of TResult)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence whose elements to group.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract the key for each element.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}\n      description: \"\\n<p>A function to create a result value from each group.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TResult}}\n      description: \"\\n<p>A sequence of elements of type <em>TResult</em> where each element represents a projection over a group and its key.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult))\n  name.vb: GroupBy(Of TSource, TKey, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TKey, IEnumerable(Of TSource), TResult))\n  nameWithType: ParallelEnumerable.GroupBy<TSource, TKey, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>)\n  nameWithType.vb: ParallelEnumerable.GroupBy(Of TSource, TKey, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TKey, IEnumerable(Of TSource), TResult))\n- uid: System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  id: GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: GroupBy<TSource, TKey, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>, IEqualityComparer<TKey>)\n  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupBy\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 84\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Groups in parallel the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TResult> GroupBy<TSource, TKey, TResult>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector, IEqualityComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, IEnumerable(Of TSource), TResult), comparer As IEqualityComparer(Of TKey)) As ParallelQuery(Of TResult)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence whose elements to group.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract the key for each element.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}\n      description: \"\\n<p>A function to create a result value from each group.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TResult}}\n      description: \"\\n<p>A sequence of groups.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))\n  name.vb: GroupBy(Of TSource, TKey, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TKey, IEnumerable(Of TSource), TResult), IEqualityComparer(Of TKey))\n  nameWithType: ParallelEnumerable.GroupBy<TSource, TKey, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>, IEqualityComparer<TKey>)\n  nameWithType.vb: ParallelEnumerable.GroupBy(Of TSource, TKey, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TKey, IEnumerable(Of TSource), TResult), IEqualityComparer(Of TKey))\n- uid: System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  commentId: M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  id: GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: GroupBy<TSource, TKey, TElement, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>)\n  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TElement, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupBy\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 85\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Groups in parallel the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TResult> GroupBy<TSource, TKey, TElement, TResult>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupBy(Of TSource, TKey, TElement, TResult)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, IEnumerable(Of TElement), TResult)) As ParallelQuery(Of TResult)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence whose elements to group.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract the key for each element.</p>\\n\"\n    - id: elementSelector\n      type: System.Func{{TSource},{TElement}}\n      description: \"\\n<p>A function to map each source element to an element in an IGrouping<TKey, TElement>.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}\n      description: \"\\n<p>A function to create a result value from each group.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    - id: TElement\n      description: \"\\n<p>The type of the elements in each IGrouping{TKey, TElement}.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TResult}}\n      description: \"\\n<p>A sequence of elements of type <em>TResult</em> where each element represents a projection over a group and its key.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey, TElement, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult))\n  name.vb: GroupBy(Of TSource, TKey, TElement, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Func(Of TKey, IEnumerable(Of TElement), TResult))\n  nameWithType: ParallelEnumerable.GroupBy<TSource, TKey, TElement, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>)\n  nameWithType.vb: ParallelEnumerable.GroupBy(Of TSource, TKey, TElement, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Func(Of TKey, IEnumerable(Of TElement), TResult))\n- uid: System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  id: GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: GroupBy<TSource, TKey, TElement, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>, IEqualityComparer<TKey>)\n  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TElement, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupBy\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 86\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TResult> GroupBy<TSource, TKey, TElement, TResult>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector, IEqualityComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupBy(Of TSource, TKey, TElement, TResult)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, IEnumerable(Of TElement), TResult), comparer As IEqualityComparer(Of TKey)) As ParallelQuery(Of TResult)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence whose elements to group.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract the key for each element.</p>\\n\"\n    - id: elementSelector\n      type: System.Func{{TSource},{TElement}}\n      description: \"\\n<p>A function to map each source element to an element in an IGrouping{Key, TElement}.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}\n      description: \"\\n<p>A function to create a result value from each group.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    - id: TElement\n      description: \"\\n<p>The type of the elements in each IGrouping{TKey, TElement}.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TResult}}\n      description: \"\\n<p>A sequence of elements of type <em>TResult</em> where each element represents a projection over a group and its key.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey, TElement, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))\n  name.vb: GroupBy(Of TSource, TKey, TElement, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Func(Of TKey, IEnumerable(Of TElement), TResult), IEqualityComparer(Of TKey))\n  nameWithType: ParallelEnumerable.GroupBy<TSource, TKey, TElement, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>, IEqualityComparer<TKey>)\n  nameWithType.vb: ParallelEnumerable.GroupBy(Of TSource, TKey, TElement, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Func(Of TKey, IEnumerable(Of TElement), TResult), IEqualityComparer(Of TKey))\n- uid: System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  commentId: M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  id: GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>)\n  fullName: System.Linq.ParallelEnumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupJoin\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 87\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>This GroupJoin overload should never be called. This method is marked as obsolete and always throws <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> when called.</p>\\n\"\n  syntax:\n    content: >-\n      [Obsolete(\"The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\")]\n\n      public static ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this ParallelQuery<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector)\n    content.vb: >-\n      <Obsolete(\"The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\")>\n\n      <ExtensionAttribute>\n\n      Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult)) As ParallelQuery(Of TResult)\n    parameters:\n    - id: outer\n      type: System.Linq.ParallelQuery{{TOuter}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: inner\n      type: System.Collections.Generic.IEnumerable{{TInner}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: outerKeySelector\n      type: System.Func{{TOuter},{TKey}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: innerKeySelector\n      type: System.Func{{TInner},{TKey}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    typeParameters:\n    - id: TOuter\n      description: \"\\n<p>This type parameter is not used.</p>\\n\"\n    - id: TInner\n      description: \"\\n<p>This type parameter is not used.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>This type parameter is not used.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>This type parameter is not used.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TResult}}\n      description: \"\\n<p>This overload always throws a <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult))\n  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult))\n  nameWithType: ParallelEnumerable.GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>)\n  nameWithType.vb: ParallelEnumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult))\n- uid: System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  commentId: M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  id: GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>, IEqualityComparer<TKey>)\n  fullName: System.Linq.ParallelEnumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupJoin\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 89\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>This GroupJoin overload should never be called. This method is marked as obsolete and always throws <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> when called.</p>\\n\"\n  syntax:\n    content: >-\n      [Obsolete(\"The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\")]\n\n      public static ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this ParallelQuery<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector, IEqualityComparer<TKey> comparer)\n    content.vb: >-\n      <Obsolete(\"The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\")>\n\n      <ExtensionAttribute>\n\n      Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult), comparer As IEqualityComparer(Of TKey)) As ParallelQuery(Of TResult)\n    parameters:\n    - id: outer\n      type: System.Linq.ParallelQuery{{TOuter}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: inner\n      type: System.Collections.Generic.IEnumerable{{TInner}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: outerKeySelector\n      type: System.Func{{TOuter},{TKey}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: innerKeySelector\n      type: System.Func{{TInner},{TKey}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TKey}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    typeParameters:\n    - id: TOuter\n      description: \"\\n<p>This type parameter is not used.</p>\\n\"\n    - id: TInner\n      description: \"\\n<p>This type parameter is not used.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>This type parameter is not used.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>This type parameter is not used.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TResult}}\n      description: \"\\n<p>This overload always throws a <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The exception that occurs when this method is called.</p>\\n\"\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))\n  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult), IEqualityComparer(Of TKey))\n  nameWithType: ParallelEnumerable.GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>, IEqualityComparer<TKey>)\n  nameWithType.vb: ParallelEnumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult), IEqualityComparer(Of TKey))\n- uid: System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  commentId: M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  id: GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>)\n  fullName: System.Linq.ParallelEnumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Linq.ParallelQuery<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupJoin\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 91\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Correlates in parallel the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this ParallelQuery<TOuter> outer, ParallelQuery<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As ParallelQuery(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult)) As ParallelQuery(Of TResult)\n    parameters:\n    - id: outer\n      type: System.Linq.ParallelQuery{{TOuter}}\n      description: \"\\n<p>The first sequence to join.</p>\\n\"\n    - id: inner\n      type: System.Linq.ParallelQuery{{TInner}}\n      description: \"\\n<p>The sequence to join to the first sequence.</p>\\n\"\n    - id: outerKeySelector\n      type: System.Func{{TOuter},{TKey}}\n      description: \"\\n<p>A function to extract the join key from each element of the first sequence.</p>\\n\"\n    - id: innerKeySelector\n      type: System.Func{{TInner},{TKey}}\n      description: \"\\n<p>A function to extract the join key from each element of the second sequence.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}\n      description: \"\\n<p>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</p>\\n\"\n    typeParameters:\n    - id: TOuter\n      description: \"\\n<p>The type of the elements of the second sequence.</p>\\n\"\n    - id: TInner\n      description: \"\\n<p>The type of the elements of the first sequence.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the keys returned by the key selector functions.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result elements.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TResult}}\n      description: \"\\n<p>A sequence that has elements of type <em>TResult</em> that are obtained by performing a grouped join on two sequences.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Linq.ParallelQuery(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult))\n  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), ParallelQuery(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult))\n  nameWithType: ParallelEnumerable.GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>)\n  nameWithType.vb: ParallelEnumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), ParallelQuery(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult))\n- uid: System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  commentId: M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  id: GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>, IEqualityComparer<TKey>)\n  fullName: System.Linq.ParallelEnumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Linq.ParallelQuery<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupJoin\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 92\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Correlates in parallel the elements of two sequences based on key equality and groups the results. A specified <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is used to compare keys.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this ParallelQuery<TOuter> outer, ParallelQuery<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector, IEqualityComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As ParallelQuery(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult), comparer As IEqualityComparer(Of TKey)) As ParallelQuery(Of TResult)\n    parameters:\n    - id: outer\n      type: System.Linq.ParallelQuery{{TOuter}}\n      description: \"\\n<p>The first sequence to join.</p>\\n\"\n    - id: inner\n      type: System.Linq.ParallelQuery{{TInner}}\n      description: \"\\n<p>The sequence to join to the first sequence.</p>\\n\"\n    - id: outerKeySelector\n      type: System.Func{{TOuter},{TKey}}\n      description: \"\\n<p>A function to extract the join key from each element of the first sequence.</p>\\n\"\n    - id: innerKeySelector\n      type: System.Func{{TInner},{TKey}}\n      description: \"\\n<p>A function to extract the join key from each element of the second sequence.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}\n      description: \"\\n<p>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to hash and compare keys.</p>\\n\"\n    typeParameters:\n    - id: TOuter\n      description: \"\\n<p>The type of the elements of the second sequence.</p>\\n\"\n    - id: TInner\n      description: \"\\n<p>The type of the elements of the first sequence.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the keys returned by the key selector functions.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result elements.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TResult}}\n      description: \"\\n<p>A sequence that has elements of type <em>TResult</em> that are obtained by performing a grouped join on two sequences.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Linq.ParallelQuery(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))\n  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), ParallelQuery(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult), IEqualityComparer(Of TKey))\n  nameWithType: ParallelEnumerable.GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>, IEqualityComparer<TKey>)\n  nameWithType.vb: ParallelEnumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), ParallelQuery(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult), IEqualityComparer(Of TKey))\n- uid: System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})\n  id: Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Intersect<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)\n  fullName: System.Linq.ParallelEnumerable.Intersect<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Intersect\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 93\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>This Intersect overload should never be called. This method is marked as obsolete and always throws <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> when called.</p>\\n\"\n  syntax:\n    content: >-\n      [Obsolete(\"The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\")]\n\n      public static ParallelQuery<TSource> Intersect<TSource>(this ParallelQuery<TSource> first, IEnumerable<TSource> second)\n    content.vb: >-\n      <Obsolete(\"The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\")>\n\n      <ExtensionAttribute>\n\n      Public Shared Function Intersect(Of TSource)(first As ParallelQuery(Of TSource), second As IEnumerable(Of TSource)) As ParallelQuery(Of TSource)\n    parameters:\n    - id: first\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: second\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>This type parameter is not used.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>This overload always throws a <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The exception that occurs when this method is called.</p>\\n\"\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Intersect(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: Intersect(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource))\n  nameWithType: ParallelEnumerable.Intersect<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)\n  nameWithType.vb: ParallelEnumerable.Intersect(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource))\n- uid: System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Intersect<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: System.Linq.ParallelEnumerable.Intersect<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Intersect\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 95\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>This Intersect overload should never be called. This method is marked as obsolete and always throws <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> when called.</p>\\n\"\n  syntax:\n    content: >-\n      [Obsolete(\"The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\")]\n\n      public static ParallelQuery<TSource> Intersect<TSource>(this ParallelQuery<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)\n    content.vb: >-\n      <Obsolete(\"The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\")>\n\n      <ExtensionAttribute>\n\n      Public Shared Function Intersect(Of TSource)(first As ParallelQuery(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As ParallelQuery(Of TSource)\n    parameters:\n    - id: first\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: second\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TSource}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>This type parameter is not used.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>This overload always throws a <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The exception that occurs when this method is called.</p>\\n\"\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Intersect(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))\n  name.vb: Intersect(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))\n  nameWithType: ParallelEnumerable.Intersect<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType.vb: ParallelEnumerable.Intersect(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))\n- uid: System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})\n  commentId: M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})\n  id: Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Intersect<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)\n  fullName: System.Linq.ParallelEnumerable.Intersect<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Intersect\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 97\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Produces the set intersection of two parallel sequences by using the default equality comparer to compare values.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TSource> Intersect<TSource>(this ParallelQuery<TSource> first, ParallelQuery<TSource> second)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Intersect(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)\n    parameters:\n    - id: first\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence whose distinct elements that also appear in <em>second</em> will be returned.</p>\\n\"\n    - id: second\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence whose distinct elements that also appear in the first sequence will be returned.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of the input sequences.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence that contains the elements that form the set intersection of two sequences.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Intersect(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource))\n  name.vb: Intersect(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))\n  nameWithType: ParallelEnumerable.Intersect<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)\n  nameWithType.vb: ParallelEnumerable.Intersect(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))\n- uid: System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Intersect<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)\n  fullName: System.Linq.ParallelEnumerable.Intersect<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Intersect\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 98\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Produces the set intersection of two parallel sequences by using the specified IEqualityComparer{T} to compare values.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TSource> Intersect<TSource>(this ParallelQuery<TSource> first, ParallelQuery<TSource> second, IEqualityComparer<TSource> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Intersect(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource), comparer As IEqualityComparer(Of TSource)) As ParallelQuery(Of TSource)\n    parameters:\n    - id: first\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence whose distinct elements that also appear in <em>second</em> will be returned.</p>\\n\"\n    - id: second\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence whose distinct elements that also appear in the first sequence will be returned.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare values.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of the input sequences.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence that contains the elements that form the set intersection of two sequences.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Intersect(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))\n  name.vb: Intersect(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource), IEqualityComparer(Of TSource))\n  nameWithType: ParallelEnumerable.Intersect<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)\n  nameWithType.vb: ParallelEnumerable.Intersect(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource), IEqualityComparer(Of TSource))\n- uid: System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  commentId: M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  id: Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)\n  fullName: System.Linq.ParallelEnumerable.Join<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Join\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 99\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>This Join overload should never be called. This method is marked as obsolete and always throws <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> when invoked.</p>\\n\"\n  syntax:\n    content: >-\n      [Obsolete(\"The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\")]\n\n      public static ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(this ParallelQuery<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector)\n    content.vb: >-\n      <Obsolete(\"The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\")>\n\n      <ExtensionAttribute>\n\n      Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult)) As ParallelQuery(Of TResult)\n    parameters:\n    - id: outer\n      type: System.Linq.ParallelQuery{{TOuter}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: inner\n      type: System.Collections.Generic.IEnumerable{{TInner}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: outerKeySelector\n      type: System.Func{{TOuter},{TKey}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: innerKeySelector\n      type: System.Func{{TInner},{TKey}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TOuter},{TInner},{TResult}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    typeParameters:\n    - id: TOuter\n      description: \"\\n<p>This type parameter is not used.</p>\\n\"\n    - id: TInner\n      description: \"\\n<p>This type parameter is not used.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>This type parameter is not used.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>This type parameter is not used.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TResult}}\n      description: \"\\n<p>This overload always throws a <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Join(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, TInner, TResult))\n  name.vb: Join(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult))\n  nameWithType: ParallelEnumerable.Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)\n  nameWithType.vb: ParallelEnumerable.Join(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult))\n- uid: System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  commentId: M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  id: Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>)\n  fullName: System.Linq.ParallelEnumerable.Join<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Join\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 101\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>This Join overload should never be called. This method is marked as obsolete and always throws <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> when invoked.</p>\\n\"\n  syntax:\n    content: >-\n      [Obsolete(\"The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\")]\n\n      public static ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(this ParallelQuery<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, IEqualityComparer<TKey> comparer)\n    content.vb: >-\n      <Obsolete(\"The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\")>\n\n      <ExtensionAttribute>\n\n      Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult), comparer As IEqualityComparer(Of TKey)) As ParallelQuery(Of TResult)\n    parameters:\n    - id: outer\n      type: System.Linq.ParallelQuery{{TOuter}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: inner\n      type: System.Collections.Generic.IEnumerable{{TInner}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: outerKeySelector\n      type: System.Func{{TOuter},{TKey}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: innerKeySelector\n      type: System.Func{{TInner},{TKey}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TOuter},{TInner},{TResult}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TKey}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    typeParameters:\n    - id: TOuter\n      description: \"\\n<p>This type parameter is not used.</p>\\n\"\n    - id: TInner\n      description: \"\\n<p>This type parameter is not used.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>This type parameter is not used.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>This type parameter is not used.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TResult}}\n      description: \"\\n<p>This overload always throws a <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The exception that occurs when this method is called.</p>\\n\"\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Join(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, TInner, TResult), System.Collections.Generic.IEqualityComparer(Of TKey))\n  name.vb: Join(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult), IEqualityComparer(Of TKey))\n  nameWithType: ParallelEnumerable.Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>)\n  nameWithType.vb: ParallelEnumerable.Join(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult), IEqualityComparer(Of TKey))\n- uid: System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  commentId: M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  id: Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)\n  fullName: System.Linq.ParallelEnumerable.Join<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Linq.ParallelQuery<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Join\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 103\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Correlates in parallel the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(this ParallelQuery<TOuter> outer, ParallelQuery<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As ParallelQuery(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult)) As ParallelQuery(Of TResult)\n    parameters:\n    - id: outer\n      type: System.Linq.ParallelQuery{{TOuter}}\n      description: \"\\n<p>The first sequence to join.</p>\\n\"\n    - id: inner\n      type: System.Linq.ParallelQuery{{TInner}}\n      description: \"\\n<p>The sequence to join to the first sequence.</p>\\n\"\n    - id: outerKeySelector\n      type: System.Func{{TOuter},{TKey}}\n      description: \"\\n<p>A function to extract the join key from each element of the first sequence.</p>\\n\"\n    - id: innerKeySelector\n      type: System.Func{{TInner},{TKey}}\n      description: \"\\n<p>A function to extract the join key from each element of the second sequence.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TOuter},{TInner},{TResult}}\n      description: \"\\n<p>A function to create a result element from two matching elements.</p>\\n\"\n    typeParameters:\n    - id: TOuter\n      description: \"\\n<p>The type of the elements of the second sequence.</p>\\n\"\n    - id: TInner\n      description: \"\\n<p>The type of the elements of the first sequence.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the keys returned by the key selector functions.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result elements.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TResult}}\n      description: \"\\n<p>A sequence that has elements of type <em>TResult</em> that are obtained by performing an inner join on two sequences.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Join(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Linq.ParallelQuery(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, TInner, TResult))\n  name.vb: Join(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), ParallelQuery(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult))\n  nameWithType: ParallelEnumerable.Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)\n  nameWithType.vb: ParallelEnumerable.Join(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), ParallelQuery(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult))\n- uid: System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  commentId: M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  id: Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>)\n  fullName: System.Linq.ParallelEnumerable.Join<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Linq.ParallelQuery<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Join\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 104\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Correlates in parallel the elements of two sequences based on matching keys. A specified <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is used to compare keys.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(this ParallelQuery<TOuter> outer, ParallelQuery<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, IEqualityComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As ParallelQuery(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult), comparer As IEqualityComparer(Of TKey)) As ParallelQuery(Of TResult)\n    parameters:\n    - id: outer\n      type: System.Linq.ParallelQuery{{TOuter}}\n      description: \"\\n<p>The first sequence to join.</p>\\n\"\n    - id: inner\n      type: System.Linq.ParallelQuery{{TInner}}\n      description: \"\\n<p>The sequence to join to the first sequence.</p>\\n\"\n    - id: outerKeySelector\n      type: System.Func{{TOuter},{TKey}}\n      description: \"\\n<p>A function to extract the join key from each element of the first sequence.</p>\\n\"\n    - id: innerKeySelector\n      type: System.Func{{TInner},{TKey}}\n      description: \"\\n<p>A function to extract the join key from each element of the second sequence.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TOuter},{TInner},{TResult}}\n      description: \"\\n<p>A function to create a result element from two matching elements.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to hash and compare keys.</p>\\n\"\n    typeParameters:\n    - id: TOuter\n      description: \"\\n<p>The type of the elements of the second sequence.</p>\\n\"\n    - id: TInner\n      description: \"\\n<p>The type of the elements of the first sequence.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the keys returned by the key selector functions.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result elements.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TResult}}\n      description: \"\\n<p>A sequence that has elements of type <em>TResult</em> that are obtained by performing an inner join on two sequences.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Join(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Linq.ParallelQuery(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, TInner, TResult), System.Collections.Generic.IEqualityComparer(Of TKey))\n  name.vb: Join(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), ParallelQuery(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult), IEqualityComparer(Of TKey))\n  nameWithType: ParallelEnumerable.Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>)\n  nameWithType.vb: ParallelEnumerable.Join(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), ParallelQuery(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult), IEqualityComparer(Of TKey))\n- uid: System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})\n  commentId: M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})\n  id: Last``1(System.Linq.ParallelQuery{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Last<TSource>(ParallelQuery<TSource>)\n  fullName: System.Linq.ParallelEnumerable.Last<TSource>(System.Linq.ParallelQuery<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Last\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 105\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the last element of a parallel sequence.</p>\\n\"\n  syntax:\n    content: public static TSource Last<TSource>(this ParallelQuery<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Last(Of TSource)(source As ParallelQuery(Of TSource)) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to return the last element from.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The value at the last position in the source sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Last(Of TSource)(System.Linq.ParallelQuery(Of TSource))\n  name.vb: Last(Of TSource)(ParallelQuery(Of TSource))\n  nameWithType: ParallelEnumerable.Last<TSource>(ParallelQuery<TSource>)\n  nameWithType.vb: ParallelEnumerable.Last(Of TSource)(ParallelQuery(Of TSource))\n- uid: System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  id: Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Last<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)\n  fullName: System.Linq.ParallelEnumerable.Last<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Last\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 106\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the last element of a parallel sequence that satisfies a specified condition.</p>\\n\"\n  syntax:\n    content: public static TSource Last<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Last(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to return an element from.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Boolean}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The last element in the sequence that passes the test in the specified predicate function.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>No element in <em>source</em> satisfies the condition in <em>predicate</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Last(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))\n  name.vb: Last(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))\n  nameWithType: ParallelEnumerable.Last<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)\n  nameWithType.vb: ParallelEnumerable.Last(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))\n- uid: System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})\n  commentId: M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})\n  id: LastOrDefault``1(System.Linq.ParallelQuery{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: LastOrDefault<TSource>(ParallelQuery<TSource>)\n  fullName: System.Linq.ParallelEnumerable.LastOrDefault<TSource>(System.Linq.ParallelQuery<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LastOrDefault\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 107\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the last element of a parallel sequence, or a default value if the sequence contains no elements.</p>\\n\"\n  syntax:\n    content: public static TSource LastOrDefault<TSource>(this ParallelQuery<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function LastOrDefault(Of TSource)(source As ParallelQuery(Of TSource)) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to return an element from.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>default() if the source sequence is empty; otherwise, the last element in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.LastOrDefault(Of TSource)(System.Linq.ParallelQuery(Of TSource))\n  name.vb: LastOrDefault(Of TSource)(ParallelQuery(Of TSource))\n  nameWithType: ParallelEnumerable.LastOrDefault<TSource>(ParallelQuery<TSource>)\n  nameWithType.vb: ParallelEnumerable.LastOrDefault(Of TSource)(ParallelQuery(Of TSource))\n- uid: System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  id: LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: LastOrDefault<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)\n  fullName: System.Linq.ParallelEnumerable.LastOrDefault<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LastOrDefault\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 108\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the last element of a parallel sequence that satisfies a condition, or a default value if no such element is found.</p>\\n\"\n  syntax:\n    content: public static TSource LastOrDefault<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function LastOrDefault(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to return an element from.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Boolean}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>default() if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.LastOrDefault(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))\n  name.vb: LastOrDefault(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))\n  nameWithType: ParallelEnumerable.LastOrDefault<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)\n  nameWithType.vb: ParallelEnumerable.LastOrDefault(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))\n- uid: System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})\n  commentId: M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})\n  id: LongCount``1(System.Linq.ParallelQuery{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: LongCount<TSource>(ParallelQuery<TSource>)\n  fullName: System.Linq.ParallelEnumerable.LongCount<TSource>(System.Linq.ParallelQuery<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LongCount\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 109\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns an Int64 that represents the total number of elements in a parallel sequence.</p>\\n\"\n  syntax:\n    content: public static long LongCount<TSource>(this ParallelQuery<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function LongCount(Of TSource)(source As ParallelQuery(Of TSource)) As Long\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence that contains elements to be counted.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The number of elements in the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The number of elements in source is larger than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The computed result is greater than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.LongCount(Of TSource)(System.Linq.ParallelQuery(Of TSource))\n  name.vb: LongCount(Of TSource)(ParallelQuery(Of TSource))\n  nameWithType: ParallelEnumerable.LongCount<TSource>(ParallelQuery<TSource>)\n  nameWithType.vb: ParallelEnumerable.LongCount(Of TSource)(ParallelQuery(Of TSource))\n- uid: System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  id: LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: LongCount<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)\n  fullName: System.Linq.ParallelEnumerable.LongCount<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LongCount\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 110\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns an Int64 that represents how many elements in a parallel sequence satisfy a condition.</p>\\n\"\n  syntax:\n    content: public static long LongCount<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function LongCount(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As Long\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence that contains elements to be counted.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Boolean}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The number of elements in source is larger than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The computed result is greater than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.LongCount(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))\n  name.vb: LongCount(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))\n  nameWithType: ParallelEnumerable.LongCount<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)\n  nameWithType.vb: ParallelEnumerable.LongCount(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))\n- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})\n  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})\n  id: Max(System.Linq.ParallelQuery{System.Decimal})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Max(ParallelQuery<Decimal>)\n  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Decimal>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 111\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the maximum value in a parallel sequence of values.</p>\\n\"\n  syntax:\n    content: public static decimal Max(this ParallelQuery<decimal> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(source As ParallelQuery(Of Decimal)) As Decimal\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Decimal}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Decimal))\n  name.vb: Max(ParallelQuery(Of Decimal))\n  nameWithType: ParallelEnumerable.Max(ParallelQuery<Decimal>)\n  nameWithType.vb: ParallelEnumerable.Max(ParallelQuery(Of Decimal))\n- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})\n  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})\n  id: Max(System.Linq.ParallelQuery{System.Double})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Max(ParallelQuery<Double>)\n  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Double>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 112\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the maximum value in a parallel sequence of values.</p>\\n\"\n  syntax:\n    content: public static double Max(this ParallelQuery<double> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(source As ParallelQuery(Of Double)) As Double\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Double}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Double))\n  name.vb: Max(ParallelQuery(Of Double))\n  nameWithType: ParallelEnumerable.Max(ParallelQuery<Double>)\n  nameWithType.vb: ParallelEnumerable.Max(ParallelQuery(Of Double))\n- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})\n  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})\n  id: Max(System.Linq.ParallelQuery{System.Int32})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Max(ParallelQuery<Int32>)\n  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Int32>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 113\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the maximum value in a parallel sequence of values.</p>\\n\"\n  syntax:\n    content: public static int Max(this ParallelQuery<int> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(source As ParallelQuery(Of Integer)) As Integer\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Int32}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Int32))\n  name.vb: Max(ParallelQuery(Of Int32))\n  nameWithType: ParallelEnumerable.Max(ParallelQuery<Int32>)\n  nameWithType.vb: ParallelEnumerable.Max(ParallelQuery(Of Int32))\n- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})\n  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})\n  id: Max(System.Linq.ParallelQuery{System.Int64})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Max(ParallelQuery<Int64>)\n  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 114\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the maximum value in a parallel sequence of values.</p>\\n\"\n  syntax:\n    content: public static long Max(this ParallelQuery<long> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(source As ParallelQuery(Of Long)) As Long\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Int64}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Int64))\n  name.vb: Max(ParallelQuery(Of Int64))\n  nameWithType: ParallelEnumerable.Max(ParallelQuery<Int64>)\n  nameWithType.vb: ParallelEnumerable.Max(ParallelQuery(Of Int64))\n- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})\n  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})\n  id: Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Max(ParallelQuery<Nullable<Decimal>>)\n  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Nullable<System.Decimal>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 115\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the maximum value in a parallel sequence of values.</p>\\n\"\n  syntax:\n    content: public static decimal ? Max(this ParallelQuery<decimal ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(source As ParallelQuery(Of Decimal?)) As Decimal?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Nullable{System.Decimal}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Decimal}\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Nullable(Of System.Decimal)))\n  name.vb: Max(ParallelQuery(Of Nullable(Of Decimal)))\n  nameWithType: ParallelEnumerable.Max(ParallelQuery<Nullable<Decimal>>)\n  nameWithType.vb: ParallelEnumerable.Max(ParallelQuery(Of Nullable(Of Decimal)))\n- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})\n  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})\n  id: Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Max(ParallelQuery<Nullable<Double>>)\n  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Nullable<System.Double>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 116\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the maximum value in a parallel sequence of values.</p>\\n\"\n  syntax:\n    content: public static double ? Max(this ParallelQuery<double ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(source As ParallelQuery(Of Double?)) As Double?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Nullable{System.Double}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Nullable(Of System.Double)))\n  name.vb: Max(ParallelQuery(Of Nullable(Of Double)))\n  nameWithType: ParallelEnumerable.Max(ParallelQuery<Nullable<Double>>)\n  nameWithType.vb: ParallelEnumerable.Max(ParallelQuery(Of Nullable(Of Double)))\n- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})\n  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})\n  id: Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Max(ParallelQuery<Nullable<Int32>>)\n  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Nullable<System.Int32>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 117\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the maximum value in a parallel sequence of values.</p>\\n\"\n  syntax:\n    content: public static int ? Max(this ParallelQuery<int ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(source As ParallelQuery(Of Integer?)) As Integer?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Nullable{System.Int32}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Int32}\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int32)))\n  name.vb: Max(ParallelQuery(Of Nullable(Of Int32)))\n  nameWithType: ParallelEnumerable.Max(ParallelQuery<Nullable<Int32>>)\n  nameWithType.vb: ParallelEnumerable.Max(ParallelQuery(Of Nullable(Of Int32)))\n- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})\n  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})\n  id: Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Max(ParallelQuery<Nullable<Int64>>)\n  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Nullable<System.Int64>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 118\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the maximum value in a parallel sequence of values.</p>\\n\"\n  syntax:\n    content: public static long ? Max(this ParallelQuery<long ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(source As ParallelQuery(Of Long?)) As Long?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Nullable{System.Int64}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Int64}\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int64)))\n  name.vb: Max(ParallelQuery(Of Nullable(Of Int64)))\n  nameWithType: ParallelEnumerable.Max(ParallelQuery<Nullable<Int64>>)\n  nameWithType.vb: ParallelEnumerable.Max(ParallelQuery(Of Nullable(Of Int64)))\n- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})\n  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})\n  id: Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Max(ParallelQuery<Nullable<Single>>)\n  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Nullable<System.Single>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 119\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the maximum value in a parallel sequence of values.</p>\\n\"\n  syntax:\n    content: public static float ? Max(this ParallelQuery<float ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(source As ParallelQuery(Of Single?)) As Single?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Nullable{System.Single}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Single}\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Nullable(Of System.Single)))\n  name.vb: Max(ParallelQuery(Of Nullable(Of Single)))\n  nameWithType: ParallelEnumerable.Max(ParallelQuery<Nullable<Single>>)\n  nameWithType.vb: ParallelEnumerable.Max(ParallelQuery(Of Nullable(Of Single)))\n- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})\n  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})\n  id: Max(System.Linq.ParallelQuery{System.Single})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Max(ParallelQuery<Single>)\n  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Single>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 120\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the maximum value in a parallel sequence of values.</p>\\n\"\n  syntax:\n    content: public static float Max(this ParallelQuery<float> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(source As ParallelQuery(Of Single)) As Single\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Single}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Single))\n  name.vb: Max(ParallelQuery(Of Single))\n  nameWithType: ParallelEnumerable.Max(ParallelQuery<Single>)\n  nameWithType.vb: ParallelEnumerable.Max(ParallelQuery(Of Single))\n- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})\n  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})\n  id: Max``1(System.Linq.ParallelQuery{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Max<TSource>(ParallelQuery<TSource>)\n  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 121\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the maximum value in a parallel sequence of values.</p>\\n\"\n  syntax:\n    content: public static TSource Max<TSource>(this ParallelQuery<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource)) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements in the source sequence.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource))\n  name.vb: Max(Of TSource)(ParallelQuery(Of TSource))\n  nameWithType: ParallelEnumerable.Max<TSource>(ParallelQuery<TSource>)\n  nameWithType.vb: ParallelEnumerable.Max(Of TSource)(ParallelQuery(Of TSource))\n- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})\n  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})\n  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)\n  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Decimal>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 122\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</p>\\n\"\n  syntax:\n    content: public static decimal Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, decimal> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Decimal}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Decimal))\n  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Decimal))\n  nameWithType: ParallelEnumerable.Max<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)\n  nameWithType.vb: ParallelEnumerable.Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Decimal))\n- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})\n  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})\n  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)\n  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Double>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 123\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</p>\\n\"\n  syntax:\n    content: public static double Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, double> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Double)) As Double\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Double}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Double))\n  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Double))\n  nameWithType: ParallelEnumerable.Max<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)\n  nameWithType.vb: ParallelEnumerable.Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Double))\n- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})\n  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})\n  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)\n  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 124\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</p>\\n\"\n  syntax:\n    content: public static int Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, int> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer)) As Integer\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Int32}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32))\n  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32))\n  nameWithType: ParallelEnumerable.Max<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)\n  nameWithType.vb: ParallelEnumerable.Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32))\n- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})\n  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})\n  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)\n  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 125\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</p>\\n\"\n  syntax:\n    content: public static long Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, long> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Long)) As Long\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Int64}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int64))\n  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int64))\n  nameWithType: ParallelEnumerable.Max<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)\n  nameWithType.vb: ParallelEnumerable.Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int64))\n- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)\n  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 126\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</p>\\n\"\n  syntax:\n    content: public static decimal ? Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, decimal ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Decimal?)) As Decimal?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Decimal}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Decimal}\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))\n  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Decimal)))\n  nameWithType: ParallelEnumerable.Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)\n  nameWithType.vb: ParallelEnumerable.Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Decimal)))\n- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})\n  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})\n  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)\n  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Double>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 127\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</p>\\n\"\n  syntax:\n    content: public static double ? Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, double ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Double?)) As Double?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Double}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))\n  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Double)))\n  nameWithType: ParallelEnumerable.Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)\n  nameWithType.vb: ParallelEnumerable.Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Double)))\n- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})\n  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})\n  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)\n  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 128\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</p>\\n\"\n  syntax:\n    content: public static int ? Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, int ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer?)) As Integer?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Int32}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Int32}\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))\n  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int32)))\n  nameWithType: ParallelEnumerable.Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)\n  nameWithType.vb: ParallelEnumerable.Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int32)))\n- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})\n  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})\n  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)\n  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 129\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</p>\\n\"\n  syntax:\n    content: public static long ? Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, long ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Long?)) As Long?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Int64}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Int64}\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))\n  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int64)))\n  nameWithType: ParallelEnumerable.Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)\n  nameWithType.vb: ParallelEnumerable.Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int64)))\n- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})\n  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})\n  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)\n  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Single>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 130\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</p>\\n\"\n  syntax:\n    content: public static float ? Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, float ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Single?)) As Single?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Single}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Single}\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))\n  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Single)))\n  nameWithType: ParallelEnumerable.Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)\n  nameWithType.vb: ParallelEnumerable.Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Single)))\n- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})\n  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})\n  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)\n  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Single>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 131\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</p>\\n\"\n  syntax:\n    content: public static float Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, float> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Single)) As Single\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Single}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Single))\n  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Single))\n  nameWithType: ParallelEnumerable.Max<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)\n  nameWithType.vb: ParallelEnumerable.Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Single))\n- uid: System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  id: Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Max<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, TResult>)\n  fullName: System.Linq.ParallelEnumerable.Max<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 132\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</p>\\n\"\n  syntax:\n    content: public static TResult Max<TSource, TResult>(this ParallelQuery<TSource> source, Func<TSource, TResult> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(Of TSource, TResult)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, TResult)) As TResult\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},{TResult}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the value returned by <em>selector</em>.</p>\\n\"\n    return:\n      type: '{TResult}'\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TResult))\n  name.vb: Max(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TResult))\n  nameWithType: ParallelEnumerable.Max<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, TResult>)\n  nameWithType.vb: ParallelEnumerable.Max(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TResult))\n- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})\n  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})\n  id: Min(System.Linq.ParallelQuery{System.Decimal})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Min(ParallelQuery<Decimal>)\n  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Decimal>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 133\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the minimum value in a parallel sequence of values.</p>\\n\"\n  syntax:\n    content: public static decimal Min(this ParallelQuery<decimal> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(source As ParallelQuery(Of Decimal)) As Decimal\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Decimal}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Decimal))\n  name.vb: Min(ParallelQuery(Of Decimal))\n  nameWithType: ParallelEnumerable.Min(ParallelQuery<Decimal>)\n  nameWithType.vb: ParallelEnumerable.Min(ParallelQuery(Of Decimal))\n- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})\n  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})\n  id: Min(System.Linq.ParallelQuery{System.Double})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Min(ParallelQuery<Double>)\n  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Double>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 134\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the minimum value in a parallel sequence of values.</p>\\n\"\n  syntax:\n    content: public static double Min(this ParallelQuery<double> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(source As ParallelQuery(Of Double)) As Double\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Double}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Double))\n  name.vb: Min(ParallelQuery(Of Double))\n  nameWithType: ParallelEnumerable.Min(ParallelQuery<Double>)\n  nameWithType.vb: ParallelEnumerable.Min(ParallelQuery(Of Double))\n- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})\n  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})\n  id: Min(System.Linq.ParallelQuery{System.Int32})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Min(ParallelQuery<Int32>)\n  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Int32>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 135\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the minimum value in a parallel sequence of values.</p>\\n\"\n  syntax:\n    content: public static int Min(this ParallelQuery<int> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(source As ParallelQuery(Of Integer)) As Integer\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Int32}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Int32))\n  name.vb: Min(ParallelQuery(Of Int32))\n  nameWithType: ParallelEnumerable.Min(ParallelQuery<Int32>)\n  nameWithType.vb: ParallelEnumerable.Min(ParallelQuery(Of Int32))\n- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})\n  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})\n  id: Min(System.Linq.ParallelQuery{System.Int64})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Min(ParallelQuery<Int64>)\n  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 136\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the minimum value in a parallel sequence of values.</p>\\n\"\n  syntax:\n    content: public static long Min(this ParallelQuery<long> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(source As ParallelQuery(Of Long)) As Long\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Int64}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Int64))\n  name.vb: Min(ParallelQuery(Of Int64))\n  nameWithType: ParallelEnumerable.Min(ParallelQuery<Int64>)\n  nameWithType.vb: ParallelEnumerable.Min(ParallelQuery(Of Int64))\n- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})\n  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})\n  id: Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Min(ParallelQuery<Nullable<Decimal>>)\n  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Nullable<System.Decimal>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 137\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the minimum value in a parallel sequence of values.</p>\\n\"\n  syntax:\n    content: public static decimal ? Min(this ParallelQuery<decimal ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(source As ParallelQuery(Of Decimal?)) As Decimal?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Nullable{System.Decimal}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Decimal}\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Nullable(Of System.Decimal)))\n  name.vb: Min(ParallelQuery(Of Nullable(Of Decimal)))\n  nameWithType: ParallelEnumerable.Min(ParallelQuery<Nullable<Decimal>>)\n  nameWithType.vb: ParallelEnumerable.Min(ParallelQuery(Of Nullable(Of Decimal)))\n- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})\n  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})\n  id: Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Min(ParallelQuery<Nullable<Double>>)\n  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Nullable<System.Double>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 138\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the minimum value in a parallel sequence of values.</p>\\n\"\n  syntax:\n    content: public static double ? Min(this ParallelQuery<double ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(source As ParallelQuery(Of Double?)) As Double?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Nullable{System.Double}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Nullable(Of System.Double)))\n  name.vb: Min(ParallelQuery(Of Nullable(Of Double)))\n  nameWithType: ParallelEnumerable.Min(ParallelQuery<Nullable<Double>>)\n  nameWithType.vb: ParallelEnumerable.Min(ParallelQuery(Of Nullable(Of Double)))\n- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})\n  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})\n  id: Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Min(ParallelQuery<Nullable<Int32>>)\n  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Nullable<System.Int32>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 139\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the minimum value in a parallel sequence of values.</p>\\n\"\n  syntax:\n    content: public static int ? Min(this ParallelQuery<int ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(source As ParallelQuery(Of Integer?)) As Integer?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Nullable{System.Int32}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Int32}\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int32)))\n  name.vb: Min(ParallelQuery(Of Nullable(Of Int32)))\n  nameWithType: ParallelEnumerable.Min(ParallelQuery<Nullable<Int32>>)\n  nameWithType.vb: ParallelEnumerable.Min(ParallelQuery(Of Nullable(Of Int32)))\n- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})\n  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})\n  id: Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Min(ParallelQuery<Nullable<Int64>>)\n  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Nullable<System.Int64>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 140\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the minimum value in a parallel sequence of values.</p>\\n\"\n  syntax:\n    content: public static long ? Min(this ParallelQuery<long ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(source As ParallelQuery(Of Long?)) As Long?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Nullable{System.Int64}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Int64}\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int64)))\n  name.vb: Min(ParallelQuery(Of Nullable(Of Int64)))\n  nameWithType: ParallelEnumerable.Min(ParallelQuery<Nullable<Int64>>)\n  nameWithType.vb: ParallelEnumerable.Min(ParallelQuery(Of Nullable(Of Int64)))\n- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})\n  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})\n  id: Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Min(ParallelQuery<Nullable<Single>>)\n  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Nullable<System.Single>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 141\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the minimum value in a parallel sequence of values.</p>\\n\"\n  syntax:\n    content: public static float ? Min(this ParallelQuery<float ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(source As ParallelQuery(Of Single?)) As Single?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Nullable{System.Single}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Single}\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Nullable(Of System.Single)))\n  name.vb: Min(ParallelQuery(Of Nullable(Of Single)))\n  nameWithType: ParallelEnumerable.Min(ParallelQuery<Nullable<Single>>)\n  nameWithType.vb: ParallelEnumerable.Min(ParallelQuery(Of Nullable(Of Single)))\n- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})\n  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})\n  id: Min(System.Linq.ParallelQuery{System.Single})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Min(ParallelQuery<Single>)\n  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Single>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 142\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the minimum value in a parallel sequence of values.</p>\\n\"\n  syntax:\n    content: public static float Min(this ParallelQuery<float> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(source As ParallelQuery(Of Single)) As Single\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Single}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Single))\n  name.vb: Min(ParallelQuery(Of Single))\n  nameWithType: ParallelEnumerable.Min(ParallelQuery<Single>)\n  nameWithType.vb: ParallelEnumerable.Min(ParallelQuery(Of Single))\n- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})\n  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})\n  id: Min``1(System.Linq.ParallelQuery{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Min<TSource>(ParallelQuery<TSource>)\n  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 143\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the minimum value in a parallel sequence of values.</p>\\n\"\n  syntax:\n    content: public static TSource Min<TSource>(this ParallelQuery<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource)) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource))\n  name.vb: Min(Of TSource)(ParallelQuery(Of TSource))\n  nameWithType: ParallelEnumerable.Min<TSource>(ParallelQuery<TSource>)\n  nameWithType.vb: ParallelEnumerable.Min(Of TSource)(ParallelQuery(Of TSource))\n- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})\n  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})\n  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)\n  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Decimal>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 144\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</p>\\n\"\n  syntax:\n    content: public static decimal Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, decimal> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Decimal}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Decimal))\n  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Decimal))\n  nameWithType: ParallelEnumerable.Min<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)\n  nameWithType.vb: ParallelEnumerable.Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Decimal))\n- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})\n  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})\n  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)\n  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Double>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 145\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</p>\\n\"\n  syntax:\n    content: public static double Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, double> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Double)) As Double\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Double}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Double))\n  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Double))\n  nameWithType: ParallelEnumerable.Min<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)\n  nameWithType.vb: ParallelEnumerable.Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Double))\n- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})\n  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})\n  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)\n  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 146\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</p>\\n\"\n  syntax:\n    content: public static int Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, int> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer)) As Integer\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Int32}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32))\n  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32))\n  nameWithType: ParallelEnumerable.Min<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)\n  nameWithType.vb: ParallelEnumerable.Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32))\n- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})\n  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})\n  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)\n  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 147\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</p>\\n\"\n  syntax:\n    content: public static long Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, long> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Long)) As Long\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Int64}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int64))\n  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int64))\n  nameWithType: ParallelEnumerable.Min<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)\n  nameWithType.vb: ParallelEnumerable.Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int64))\n- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)\n  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 148\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</p>\\n\"\n  syntax:\n    content: public static decimal ? Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, decimal ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Decimal?)) As Decimal?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Decimal}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Decimal}\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))\n  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Decimal)))\n  nameWithType: ParallelEnumerable.Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)\n  nameWithType.vb: ParallelEnumerable.Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Decimal)))\n- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})\n  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})\n  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)\n  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Double>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 149\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</p>\\n\"\n  syntax:\n    content: public static double ? Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, double ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Double?)) As Double?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Double}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))\n  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Double)))\n  nameWithType: ParallelEnumerable.Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)\n  nameWithType.vb: ParallelEnumerable.Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Double)))\n- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})\n  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})\n  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)\n  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 150\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</p>\\n\"\n  syntax:\n    content: public static int ? Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, int ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer?)) As Integer?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Int32}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Int32}\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))\n  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int32)))\n  nameWithType: ParallelEnumerable.Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)\n  nameWithType.vb: ParallelEnumerable.Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int32)))\n- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})\n  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})\n  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)\n  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 151\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</p>\\n\"\n  syntax:\n    content: public static long ? Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, long ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Long?)) As Long?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Int64}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Int64}\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))\n  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int64)))\n  nameWithType: ParallelEnumerable.Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)\n  nameWithType.vb: ParallelEnumerable.Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int64)))\n- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})\n  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})\n  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)\n  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Single>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 152\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</p>\\n\"\n  syntax:\n    content: public static float ? Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, float ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Single?)) As Single?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Single}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Single}\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))\n  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Single)))\n  nameWithType: ParallelEnumerable.Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)\n  nameWithType.vb: ParallelEnumerable.Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Single)))\n- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})\n  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})\n  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)\n  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Single>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 153\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</p>\\n\"\n  syntax:\n    content: public static float Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, float> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Single)) As Single\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Single}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Single))\n  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Single))\n  nameWithType: ParallelEnumerable.Min<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)\n  nameWithType.vb: ParallelEnumerable.Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Single))\n- uid: System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  id: Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Min<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, TResult>)\n  fullName: System.Linq.ParallelEnumerable.Min<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 154\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</p>\\n\"\n  syntax:\n    content: public static TResult Min<TSource, TResult>(this ParallelQuery<TSource> source, Func<TSource, TResult> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(Of TSource, TResult)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, TResult)) As TResult\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},{TResult}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the value returned by <em>selector</em>.</p>\\n\"\n    return:\n      type: '{TResult}'\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TResult))\n  name.vb: Min(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TResult))\n  nameWithType: ParallelEnumerable.Min<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, TResult>)\n  nameWithType.vb: ParallelEnumerable.Min(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TResult))\n- uid: System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)\n  commentId: M:System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)\n  id: OfType``1(System.Linq.ParallelQuery)\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: OfType<TResult>(ParallelQuery)\n  fullName: System.Linq.ParallelEnumerable.OfType<TResult>(System.Linq.ParallelQuery)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OfType\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 155\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Filters the elements of a ParallelQuery based on a specified type.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TResult> OfType<TResult>(this ParallelQuery source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function OfType(Of TResult)(source As ParallelQuery) As ParallelQuery(Of TResult)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery\n      description: \"\\n<p>The sequence whose elements to filter.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type to filter the elements of the sequence on.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TResult}}\n      description: \"\\n<p>A sequence that contains elements from the input sequence of type .</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.OfType(Of TResult)(System.Linq.ParallelQuery)\n  name.vb: OfType(Of TResult)(ParallelQuery)\n  nameWithType: ParallelEnumerable.OfType<TResult>(ParallelQuery)\n  nameWithType.vb: ParallelEnumerable.OfType(Of TResult)(ParallelQuery)\n- uid: System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  id: OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: OrderBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)\n  fullName: System.Linq.ParallelEnumerable.OrderBy<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OrderBy\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 156\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Sorts in parallel the elements of a sequence in ascending order according to a key.</p>\\n\"\n  syntax:\n    content: public static OrderedParallelQuery<TSource> OrderBy<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function OrderBy(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey)) As OrderedParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to order.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from an element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.OrderedParallelQuery{{TSource}}\n      description: \"\\n<p>An OrderedParallelQuery{TSource} whose elements are sorted according to a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.OrderBy(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey))\n  name.vb: OrderBy(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))\n  nameWithType: ParallelEnumerable.OrderBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)\n  nameWithType.vb: ParallelEnumerable.OrderBy(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))\n- uid: System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  commentId: M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  id: OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: OrderBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)\n  fullName: System.Linq.ParallelEnumerable.OrderBy<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OrderBy\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 157\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Sorts in parallel the elements of a sequence in ascending order by using a specified comparer.</p>\\n\"\n  syntax:\n    content: public static OrderedParallelQuery<TSource> OrderBy<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function OrderBy(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As OrderedParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to order.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from an element.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IComparer{{TKey}}\n      description: \"\\n<p>An IComparer{TKey} to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.OrderedParallelQuery{{TSource}}\n      description: \"\\n<p>An OrderedParallelQuery{TSource} whose elements are sorted according to a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.OrderBy(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))\n  name.vb: OrderBy(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))\n  nameWithType: ParallelEnumerable.OrderBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)\n  nameWithType.vb: ParallelEnumerable.OrderBy(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))\n- uid: System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  id: OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: OrderByDescending<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)\n  fullName: System.Linq.ParallelEnumerable.OrderByDescending<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OrderByDescending\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 158\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Sorts in parallel the elements of a sequence in descending order according to a key.</p>\\n\"\n  syntax:\n    content: public static OrderedParallelQuery<TSource> OrderByDescending<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function OrderByDescending(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey)) As OrderedParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to order.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from an element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.OrderedParallelQuery{{TSource}}\n      description: \"\\n<p>An OrderedParallelQuery{TSource} whose elements are sorted descending according to a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.OrderByDescending(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey))\n  name.vb: OrderByDescending(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))\n  nameWithType: ParallelEnumerable.OrderByDescending<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)\n  nameWithType.vb: ParallelEnumerable.OrderByDescending(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))\n- uid: System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  commentId: M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  id: OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: OrderByDescending<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)\n  fullName: System.Linq.ParallelEnumerable.OrderByDescending<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OrderByDescending\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 159\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Sorts the elements of a sequence in descending order by using a specified comparer.</p>\\n\"\n  syntax:\n    content: public static OrderedParallelQuery<TSource> OrderByDescending<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function OrderByDescending(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As OrderedParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to order.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from an element.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IComparer{{TKey}}\n      description: \"\\n<p>An IComparer{TKey} to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.OrderedParallelQuery{{TSource}}\n      description: \"\\n<p>An OrderedParallelQuery{TSource} whose elements are sorted descending according to a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>KeySelector</em> is a null reference (Nothing in Visual Basic)..</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.OrderByDescending(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))\n  name.vb: OrderByDescending(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))\n  nameWithType: ParallelEnumerable.OrderByDescending<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)\n  nameWithType.vb: ParallelEnumerable.OrderByDescending(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))\n- uid: System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)\n  commentId: M:System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)\n  id: Range(System.Int32,System.Int32)\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Range(Int32, Int32)\n  fullName: System.Linq.ParallelEnumerable.Range(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Range\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 160\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Generates a parallel sequence of integral numbers within a specified range.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<int> Range(int start, int count)\n    content.vb: Public Shared Function Range(start As Integer, count As Integer) As ParallelQuery(Of Integer)\n    parameters:\n    - id: start\n      type: System.Int32\n      description: \"\\n<p>The value of the first integer in the sequence.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of sequential integers to generate.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{System.Int32}\n      description: \"\\n<p>An IEnumerable<Int32> in C# or IEnumerable(Of Int32) in Visual Basic that contains a range of sequential integral numbers.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is less than 0 -or- <em>start</em> + <em>count</em> - 1 is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ParallelEnumerable.Range(Int32, Int32)\n- uid: System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)\n  commentId: M:System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)\n  id: Repeat``1(``0,System.Int32)\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Repeat<TResult>(TResult, Int32)\n  fullName: System.Linq.ParallelEnumerable.Repeat<TResult>(TResult, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Repeat\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 161\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Generates a parallel sequence that contains one repeated value.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TResult> Repeat<TResult>(TResult element, int count)\n    content.vb: Public Shared Function Repeat(Of TResult)(element As TResult, count As Integer) As ParallelQuery(Of TResult)\n    parameters:\n    - id: element\n      type: '{TResult}'\n      description: \"\\n<p>The value to be repeated.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of times to repeat the value in the generated sequence.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the value to be repeated in the result sequence.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TResult}}\n      description: \"\\n<p>A sequence that contains a repeated value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is less than 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Repeat(Of TResult)(TResult, System.Int32)\n  name.vb: Repeat(Of TResult)(TResult, Int32)\n  nameWithType: ParallelEnumerable.Repeat<TResult>(TResult, Int32)\n  nameWithType.vb: ParallelEnumerable.Repeat(Of TResult)(TResult, Int32)\n- uid: System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})\n  commentId: M:System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})\n  id: Reverse``1(System.Linq.ParallelQuery{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Reverse<TSource>(ParallelQuery<TSource>)\n  fullName: System.Linq.ParallelEnumerable.Reverse<TSource>(System.Linq.ParallelQuery<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Reverse\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 162\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Inverts the order of the elements in a parallel sequence.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TSource> Reverse<TSource>(this ParallelQuery<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Reverse(Of TSource)(source As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to reverse.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence whose elements correspond to those of the input sequence in reverse order.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Reverse(Of TSource)(System.Linq.ParallelQuery(Of TSource))\n  name.vb: Reverse(Of TSource)(ParallelQuery(Of TSource))\n  nameWithType: ParallelEnumerable.Reverse<TSource>(ParallelQuery<TSource>)\n  nameWithType.vb: ParallelEnumerable.Reverse(Of TSource)(ParallelQuery(Of TSource))\n- uid: System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  id: Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Select<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, TResult>)\n  fullName: System.Linq.ParallelEnumerable.Select<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Select\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 163\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Projects in parallel each element of a sequence into a new form.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TResult> Select<TSource, TResult>(this ParallelQuery<TSource> source, Func<TSource, TResult> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Select(Of TSource, TResult)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, TResult)) As ParallelQuery(Of TResult)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to invoke a transform function on.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},{TResult}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of elements resturned by selector.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TResult}}\n      description: \"\\n<p>A sequence whose elements are the result of invoking the transform function on each element of <em>source</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Select(Of TSource, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TResult))\n  name.vb: Select(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TResult))\n  nameWithType: ParallelEnumerable.Select<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, TResult>)\n  nameWithType.vb: ParallelEnumerable.Select(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TResult))\n- uid: System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})\n  commentId: M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})\n  id: Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Select<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, Int32, TResult>)\n  fullName: System.Linq.ParallelEnumerable.Select<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Select\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 164\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Projects in parallel each element of a sequence into a new form by incorporating the element's index.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TResult> Select<TSource, TResult>(this ParallelQuery<TSource> source, Func<TSource, int, TResult> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Select(Of TSource, TResult)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer, TResult)) As ParallelQuery(Of TResult)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to invoke a transform function on.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Int32,{TResult}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of elements resturned by selector.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TResult}}\n      description: \"\\n<p>A sequence whose elements are the result of invoking the transform function on each element of <em>source</em>, based on the index supplied to <em>selector</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>More than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> elements are enumerated by the query. This condition might occur in streaming scenarios.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Select(Of TSource, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32, TResult))\n  name.vb: Select(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, Int32, TResult))\n  nameWithType: ParallelEnumerable.Select<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, Int32, TResult>)\n  nameWithType.vb: ParallelEnumerable.Select(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, Int32, TResult))\n- uid: System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  commentId: M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  id: SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: SelectMany<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, IEnumerable<TResult>>)\n  fullName: System.Linq.ParallelEnumerable.SelectMany<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SelectMany\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 165\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Projects in parallel each element of a sequence to an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and flattens the resulting sequences into one sequence.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TResult> SelectMany<TSource, TResult>(this ParallelQuery<TSource> source, Func<TSource, IEnumerable<TResult>> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SelectMany(Of TSource, TResult)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, IEnumerable(Of TResult))) As ParallelQuery(Of TResult)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to project.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the elements of the sequence returned by selector.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TResult}}\n      description: \"\\n<p>A sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.SelectMany(Of TSource, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult)))\n  name.vb: SelectMany(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, IEnumerable(Of TResult)))\n  nameWithType: ParallelEnumerable.SelectMany<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, IEnumerable<TResult>>)\n  nameWithType.vb: ParallelEnumerable.SelectMany(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, IEnumerable(Of TResult)))\n- uid: System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  commentId: M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  id: SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: SelectMany<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, Int32, IEnumerable<TResult>>)\n  fullName: System.Linq.ParallelEnumerable.SelectMany<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TResult>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SelectMany\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 166\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Projects in parallel each element of a sequence to an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TResult> SelectMany<TSource, TResult>(this ParallelQuery<TSource> source, Func<TSource, int, IEnumerable<TResult>> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SelectMany(Of TSource, TResult)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer, IEnumerable(Of TResult))) As ParallelQuery(Of TResult)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to project.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TResult}}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the elements of the sequence returned by selector.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TResult}}\n      description: \"\\n<p>A sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>More than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> elements are enumerated by the query.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.SelectMany(Of TSource, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TResult)))\n  name.vb: SelectMany(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, Int32, IEnumerable(Of TResult)))\n  nameWithType: ParallelEnumerable.SelectMany<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, Int32, IEnumerable<TResult>>)\n  nameWithType.vb: ParallelEnumerable.SelectMany(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, Int32, IEnumerable(Of TResult)))\n- uid: System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  commentId: M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  id: SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: SelectMany<TSource, TCollection, TResult>(ParallelQuery<TSource>, Func<TSource, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)\n  fullName: System.Linq.ParallelEnumerable.SelectMany<TSource, TCollection, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource, TCollection, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SelectMany\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 167\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Projects each element of a sequence to an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TResult> SelectMany<TSource, TCollection, TResult>(this ParallelQuery<TSource> source, Func<TSource, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SelectMany(Of TSource, TCollection, TResult)(source As ParallelQuery(Of TSource), collectionSelector As Func(Of TSource, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As ParallelQuery(Of TResult)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to project.</p>\\n\"\n    - id: collectionSelector\n      type: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TCollection}}}\n      description: \"\\n<p>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TSource},{TCollection},{TResult}}\n      description: \"\\n<p>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the intermediate elements collected by <em>collectionSelector</em>.</p>\\n\"\n    - id: TCollection\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of elements in the result sequence.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TResult}}\n      description: \"\\n<p>A sequence whose elements are the result of invoking the one-to-many transform function <em>collectionSelector</em> on each element of <em>source</em> based on the index supplied to <em>collectionSelector</em>, and then mapping each of those sequence elements and their corresponding source element to a result element. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>More than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> elements are enumerated by the query.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.SelectMany(Of TSource, TCollection, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection)), System.Func(Of TSource, TCollection, TResult))\n  name.vb: SelectMany(Of TSource, TCollection, TResult)(ParallelQuery(Of TSource), Func(Of TSource, IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))\n  nameWithType: ParallelEnumerable.SelectMany<TSource, TCollection, TResult>(ParallelQuery<TSource>, Func<TSource, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)\n  nameWithType.vb: ParallelEnumerable.SelectMany(Of TSource, TCollection, TResult)(ParallelQuery(Of TSource), Func(Of TSource, IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))\n- uid: System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  commentId: M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  id: SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: SelectMany<TSource, TCollection, TResult>(ParallelQuery<TSource>, Func<TSource, Int32, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)\n  fullName: System.Linq.ParallelEnumerable.SelectMany<TSource, TCollection, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource, TCollection, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SelectMany\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 168\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Projects each element of a sequence to an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. The index of each source element is used in the intermediate projected form of that element.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TResult> SelectMany<TSource, TCollection, TResult>(this ParallelQuery<TSource> source, Func<TSource, int, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SelectMany(Of TSource, TCollection, TResult)(source As ParallelQuery(Of TSource), collectionSelector As Func(Of TSource, Integer, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As ParallelQuery(Of TResult)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to project.</p>\\n\"\n    - id: collectionSelector\n      type: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TCollection}}}\n      description: \"\\n<p>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TSource},{TCollection},{TResult}}\n      description: \"\\n<p>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the intermediate elements collected by <em>collectionSelector</em>.</p>\\n\"\n    - id: TCollection\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of elements to return.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TResult}}\n      description: \"\\n<p>A sequence whose elements are the result of invoking the one-to-many transform function <em>collectionSelector</em> on each element of <em>source</em> based on the index supplied to <em>collectionSelector</em>, and then mapping each of those sequence elements and their corresponding source element to a result element.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>More than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> elements are enumerated by the query.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.SelectMany(Of TSource, TCollection, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TCollection)), System.Func(Of TSource, TCollection, TResult))\n  name.vb: SelectMany(Of TSource, TCollection, TResult)(ParallelQuery(Of TSource), Func(Of TSource, Int32, IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))\n  nameWithType: ParallelEnumerable.SelectMany<TSource, TCollection, TResult>(ParallelQuery<TSource>, Func<TSource, Int32, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)\n  nameWithType.vb: ParallelEnumerable.SelectMany(Of TSource, TCollection, TResult)(ParallelQuery(Of TSource), Func(Of TSource, Int32, IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))\n- uid: System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})\n  id: SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: SequenceEqual<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)\n  fullName: System.Linq.ParallelEnumerable.SequenceEqual<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SequenceEqual\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 169\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>This SequenceEqual overload should never be called. This method is marked as obsolete and always throws <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> when called.</p>\\n\"\n  syntax:\n    content: >-\n      [Obsolete(\"The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\")]\n\n      public static bool SequenceEqual<TSource>(this ParallelQuery<TSource> first, IEnumerable<TSource> second)\n    content.vb: >-\n      <Obsolete(\"The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\")>\n\n      <ExtensionAttribute>\n\n      Public Shared Function SequenceEqual(Of TSource)(first As ParallelQuery(Of TSource), second As IEnumerable(Of TSource)) As Boolean\n    parameters:\n    - id: first\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: second\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>This type parameter is not used.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>This overload always throws a <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>Thrown every time this method is called.</p>\\n\"\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.SequenceEqual(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: SequenceEqual(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource))\n  nameWithType: ParallelEnumerable.SequenceEqual<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)\n  nameWithType.vb: ParallelEnumerable.SequenceEqual(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource))\n- uid: System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: SequenceEqual<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: System.Linq.ParallelEnumerable.SequenceEqual<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SequenceEqual\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 171\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>This SequenceEqual overload should never be called. This method is marked as obsolete and always throws <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> when called.</p>\\n\"\n  syntax:\n    content: >-\n      [Obsolete(\"The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\")]\n\n      public static bool SequenceEqual<TSource>(this ParallelQuery<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)\n    content.vb: >-\n      <Obsolete(\"The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\")>\n\n      <ExtensionAttribute>\n\n      Public Shared Function SequenceEqual(Of TSource)(first As ParallelQuery(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As Boolean\n    parameters:\n    - id: first\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: second\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TSource}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>This type parameter is not used.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>This overload always throws a <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>Thrown every time this method is called.</p>\\n\"\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.SequenceEqual(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))\n  name.vb: SequenceEqual(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))\n  nameWithType: ParallelEnumerable.SequenceEqual<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType.vb: ParallelEnumerable.SequenceEqual(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))\n- uid: System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})\n  commentId: M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})\n  id: SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: SequenceEqual<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)\n  fullName: System.Linq.ParallelEnumerable.SequenceEqual<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SequenceEqual\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 173\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Determines whether two parallel sequences are equal by comparing the elements by using the default equality comparer for their type.</p>\\n\"\n  syntax:\n    content: public static bool SequenceEqual<TSource>(this ParallelQuery<TSource> first, ParallelQuery<TSource> second)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SequenceEqual(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource)) As Boolean\n    parameters:\n    - id: first\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence to compare to second.</p>\\n\"\n    - id: second\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence to compare to the first input sequence.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of the input sequences.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>true if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, false.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>first</em> or <em>second</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.SequenceEqual(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource))\n  name.vb: SequenceEqual(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))\n  nameWithType: ParallelEnumerable.SequenceEqual<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)\n  nameWithType.vb: ParallelEnumerable.SequenceEqual(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))\n- uid: System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: SequenceEqual<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)\n  fullName: System.Linq.ParallelEnumerable.SequenceEqual<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SequenceEqual\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 174\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Determines whether two parallel sequences are equal by comparing their elements by using a specified IEqualityComparer{T}.</p>\\n\"\n  syntax:\n    content: public static bool SequenceEqual<TSource>(this ParallelQuery<TSource> first, ParallelQuery<TSource> second, IEqualityComparer<TSource> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SequenceEqual(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource), comparer As IEqualityComparer(Of TSource)) As Boolean\n    parameters:\n    - id: first\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence to compare to <em>second</em>.</p>\\n\"\n    - id: second\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence to compare to the first input sequence.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use to compare elements.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of the input sequences.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>true if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, false.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>first</em> or <em>second</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.SequenceEqual(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))\n  name.vb: SequenceEqual(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource), IEqualityComparer(Of TSource))\n  nameWithType: ParallelEnumerable.SequenceEqual<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)\n  nameWithType.vb: ParallelEnumerable.SequenceEqual(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource), IEqualityComparer(Of TSource))\n- uid: System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})\n  commentId: M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})\n  id: Single``1(System.Linq.ParallelQuery{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Single<TSource>(ParallelQuery<TSource>)\n  fullName: System.Linq.ParallelEnumerable.Single<TSource>(System.Linq.ParallelQuery<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Single\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 175\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the only element of a parallel sequence, and throws an exception if there is not exactly one element in the sequence.</p>\\n\"\n  syntax:\n    content: public static TSource Single<TSource>(this ParallelQuery<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Single(Of TSource)(source As ParallelQuery(Of TSource)) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to return the single element of.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The single element of the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The input sequence contains more than one element. -or- The input sequence is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Single(Of TSource)(System.Linq.ParallelQuery(Of TSource))\n  name.vb: Single(Of TSource)(ParallelQuery(Of TSource))\n  nameWithType: ParallelEnumerable.Single<TSource>(ParallelQuery<TSource>)\n  nameWithType.vb: ParallelEnumerable.Single(Of TSource)(ParallelQuery(Of TSource))\n- uid: System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  id: Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Single<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)\n  fullName: System.Linq.ParallelEnumerable.Single<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Single\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 176\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the only element of a parallel sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</p>\\n\"\n  syntax:\n    content: public static TSource Single<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Single(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to return the single element of.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Boolean}\n      description: \"\\n<p>A function to test an element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The single element of the input sequence that satisfies a condition.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>No element satisfies the condition in <em>predicate</em>. -or- More than one element satisfies the condition in <em>predicate</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Single(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))\n  name.vb: Single(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))\n  nameWithType: ParallelEnumerable.Single<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)\n  nameWithType.vb: ParallelEnumerable.Single(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))\n- uid: System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})\n  commentId: M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})\n  id: SingleOrDefault``1(System.Linq.ParallelQuery{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: SingleOrDefault<TSource>(ParallelQuery<TSource>)\n  fullName: System.Linq.ParallelEnumerable.SingleOrDefault<TSource>(System.Linq.ParallelQuery<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SingleOrDefault\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 177\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the only element of a parallel sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</p>\\n\"\n  syntax:\n    content: public static TSource SingleOrDefault<TSource>(this ParallelQuery<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SingleOrDefault(Of TSource)(source As ParallelQuery(Of TSource)) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to return the single element of.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The single element of the input sequence, or default() if the sequence contains no elements.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.SingleOrDefault(Of TSource)(System.Linq.ParallelQuery(Of TSource))\n  name.vb: SingleOrDefault(Of TSource)(ParallelQuery(Of TSource))\n  nameWithType: ParallelEnumerable.SingleOrDefault<TSource>(ParallelQuery<TSource>)\n  nameWithType.vb: ParallelEnumerable.SingleOrDefault(Of TSource)(ParallelQuery(Of TSource))\n- uid: System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  id: SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: SingleOrDefault<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)\n  fullName: System.Linq.ParallelEnumerable.SingleOrDefault<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SingleOrDefault\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 178\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the only element of a parallel sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</p>\\n\"\n  syntax:\n    content: public static TSource SingleOrDefault<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SingleOrDefault(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to return the single element of.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Boolean}\n      description: \"\\n<p>A function to test an element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The single element of the input sequence that satisfies the condition, or default() if no such element is found.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> is empty or multiple elements are returned.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.SingleOrDefault(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))\n  name.vb: SingleOrDefault(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))\n  nameWithType: ParallelEnumerable.SingleOrDefault<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)\n  nameWithType.vb: ParallelEnumerable.SingleOrDefault(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))\n- uid: System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)\n  commentId: M:System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)\n  id: Skip``1(System.Linq.ParallelQuery{``0},System.Int32)\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Skip<TSource>(ParallelQuery<TSource>, Int32)\n  fullName: System.Linq.ParallelEnumerable.Skip<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Skip\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 179\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Bypasses a specified number of elements in a parallel sequence and then returns the remaining elements.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TSource> Skip<TSource>(this ParallelQuery<TSource> source, int count)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Skip(Of TSource)(source As ParallelQuery(Of TSource), count As Integer) As ParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to return elements from.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements to skip before returning the remaining elements.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence that contains the elements that occur after the specified index in the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>Count is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Skip(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Int32)\n  name.vb: Skip(Of TSource)(ParallelQuery(Of TSource), Int32)\n  nameWithType: ParallelEnumerable.Skip<TSource>(ParallelQuery<TSource>, Int32)\n  nameWithType.vb: ParallelEnumerable.Skip(Of TSource)(ParallelQuery(Of TSource), Int32)\n- uid: System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  id: SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: SkipWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)\n  fullName: System.Linq.ParallelEnumerable.SkipWhile<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SkipWhile\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 180\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Bypasses elements in a parallel sequence as long as a specified condition is true and then returns the remaining elements.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TSource> SkipWhile<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SkipWhile(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As ParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to return elements from.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Boolean}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.SkipWhile(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))\n  name.vb: SkipWhile(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))\n  nameWithType: ParallelEnumerable.SkipWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)\n  nameWithType.vb: ParallelEnumerable.SkipWhile(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))\n- uid: System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})\n  commentId: M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})\n  id: SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: SkipWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Int32, Boolean>)\n  fullName: System.Linq.ParallelEnumerable.SkipWhile<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SkipWhile\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 181\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Bypasses elements in a parallel sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TSource> SkipWhile<TSource>(this ParallelQuery<TSource> source, Func<TSource, int, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SkipWhile(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As ParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to return elements from.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Int32,System.Boolean}\n      description: \"\\n<p>A function to test each source element for a condition; the second parameter of the function represents the index of the source element. </p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>More than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> elements are enumerated by the query.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.SkipWhile(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32, System.Boolean))\n  name.vb: SkipWhile(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32, Boolean))\n  nameWithType: ParallelEnumerable.SkipWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Int32, Boolean>)\n  nameWithType.vb: ParallelEnumerable.SkipWhile(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32, Boolean))\n- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})\n  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})\n  id: Sum(System.Linq.ParallelQuery{System.Decimal})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum(ParallelQuery<Decimal>)\n  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Decimal>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 182\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the sum of a sequence of values.</p>\\n\"\n  syntax:\n    content: public static decimal Sum(this ParallelQuery<decimal> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As ParallelQuery(Of Decimal)) As Decimal\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Decimal}\n      description: \"\\n<p>A sequence of values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The sum of the projected values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Decimal))\n  name.vb: Sum(ParallelQuery(Of Decimal))\n  nameWithType: ParallelEnumerable.Sum(ParallelQuery<Decimal>)\n  nameWithType.vb: ParallelEnumerable.Sum(ParallelQuery(Of Decimal))\n- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})\n  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})\n  id: Sum(System.Linq.ParallelQuery{System.Double})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum(ParallelQuery<Double>)\n  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Double>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 183\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the sum of a sequence of values.</p>\\n\"\n  syntax:\n    content: public static double Sum(this ParallelQuery<double> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As ParallelQuery(Of Double)) As Double\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Double}\n      description: \"\\n<p>A sequence of values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The sum of the projected values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Double.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Double))\n  name.vb: Sum(ParallelQuery(Of Double))\n  nameWithType: ParallelEnumerable.Sum(ParallelQuery<Double>)\n  nameWithType.vb: ParallelEnumerable.Sum(ParallelQuery(Of Double))\n- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})\n  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})\n  id: Sum(System.Linq.ParallelQuery{System.Int32})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum(ParallelQuery<Int32>)\n  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Int32>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 184\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the sum of a sequence of values.</p>\\n\"\n  syntax:\n    content: public static int Sum(this ParallelQuery<int> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As ParallelQuery(Of Integer)) As Integer\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Int32}\n      description: \"\\n<p>A sequence of values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The sum of the projected values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Int32))\n  name.vb: Sum(ParallelQuery(Of Int32))\n  nameWithType: ParallelEnumerable.Sum(ParallelQuery<Int32>)\n  nameWithType.vb: ParallelEnumerable.Sum(ParallelQuery(Of Int32))\n- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})\n  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})\n  id: Sum(System.Linq.ParallelQuery{System.Int64})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum(ParallelQuery<Int64>)\n  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 185\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the sum of a sequence of values.</p>\\n\"\n  syntax:\n    content: public static long Sum(this ParallelQuery<long> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As ParallelQuery(Of Long)) As Long\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Int64}\n      description: \"\\n<p>A sequence of values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The sum of the projected values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Int64))\n  name.vb: Sum(ParallelQuery(Of Int64))\n  nameWithType: ParallelEnumerable.Sum(ParallelQuery<Int64>)\n  nameWithType.vb: ParallelEnumerable.Sum(ParallelQuery(Of Int64))\n- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})\n  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})\n  id: Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum(ParallelQuery<Nullable<Decimal>>)\n  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Nullable<System.Decimal>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 186\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the sum of a sequence of values.</p>\\n\"\n  syntax:\n    content: public static decimal ? Sum(this ParallelQuery<decimal ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As ParallelQuery(Of Decimal?)) As Decimal?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Nullable{System.Decimal}}\n      description: \"\\n<p>A sequence of values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Decimal}\n      description: \"\\n<p>The sum of the projected values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Nullable(Of System.Decimal)))\n  name.vb: Sum(ParallelQuery(Of Nullable(Of Decimal)))\n  nameWithType: ParallelEnumerable.Sum(ParallelQuery<Nullable<Decimal>>)\n  nameWithType.vb: ParallelEnumerable.Sum(ParallelQuery(Of Nullable(Of Decimal)))\n- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})\n  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})\n  id: Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum(ParallelQuery<Nullable<Double>>)\n  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Nullable<System.Double>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 187\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the sum of a sequence of values.</p>\\n\"\n  syntax:\n    content: public static double ? Sum(this ParallelQuery<double ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As ParallelQuery(Of Double?)) As Double?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Nullable{System.Double}}\n      description: \"\\n<p>A sequence of values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The sum of the projected values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Double.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Nullable(Of System.Double)))\n  name.vb: Sum(ParallelQuery(Of Nullable(Of Double)))\n  nameWithType: ParallelEnumerable.Sum(ParallelQuery<Nullable<Double>>)\n  nameWithType.vb: ParallelEnumerable.Sum(ParallelQuery(Of Nullable(Of Double)))\n- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})\n  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})\n  id: Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum(ParallelQuery<Nullable<Int32>>)\n  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Nullable<System.Int32>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 188\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the sum of a sequence of values.</p>\\n\"\n  syntax:\n    content: public static int ? Sum(this ParallelQuery<int ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As ParallelQuery(Of Integer?)) As Integer?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Nullable{System.Int32}}\n      description: \"\\n<p>A sequence of values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Int32}\n      description: \"\\n<p>The sum of the projected values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int32)))\n  name.vb: Sum(ParallelQuery(Of Nullable(Of Int32)))\n  nameWithType: ParallelEnumerable.Sum(ParallelQuery<Nullable<Int32>>)\n  nameWithType.vb: ParallelEnumerable.Sum(ParallelQuery(Of Nullable(Of Int32)))\n- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})\n  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})\n  id: Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum(ParallelQuery<Nullable<Int64>>)\n  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Nullable<System.Int64>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 189\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the sum of a sequence of values.</p>\\n\"\n  syntax:\n    content: public static long ? Sum(this ParallelQuery<long ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As ParallelQuery(Of Long?)) As Long?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Nullable{System.Int64}}\n      description: \"\\n<p>A sequence of values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Int64}\n      description: \"\\n<p>The sum of the projected values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int64)))\n  name.vb: Sum(ParallelQuery(Of Nullable(Of Int64)))\n  nameWithType: ParallelEnumerable.Sum(ParallelQuery<Nullable<Int64>>)\n  nameWithType.vb: ParallelEnumerable.Sum(ParallelQuery(Of Nullable(Of Int64)))\n- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})\n  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})\n  id: Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum(ParallelQuery<Nullable<Single>>)\n  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Nullable<System.Single>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 190\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the sum of a sequence of values.</p>\\n\"\n  syntax:\n    content: public static float ? Sum(this ParallelQuery<float ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As ParallelQuery(Of Single?)) As Single?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Nullable{System.Single}}\n      description: \"\\n<p>A sequence of values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Single}\n      description: \"\\n<p>The sum of the projected values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Single.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or-  One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Nullable(Of System.Single)))\n  name.vb: Sum(ParallelQuery(Of Nullable(Of Single)))\n  nameWithType: ParallelEnumerable.Sum(ParallelQuery<Nullable<Single>>)\n  nameWithType.vb: ParallelEnumerable.Sum(ParallelQuery(Of Nullable(Of Single)))\n- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})\n  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})\n  id: Sum(System.Linq.ParallelQuery{System.Single})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum(ParallelQuery<Single>)\n  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Single>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 191\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the sum of a sequence of values.</p>\\n\"\n  syntax:\n    content: public static float Sum(this ParallelQuery<float> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As ParallelQuery(Of Single)) As Single\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{System.Single}\n      description: \"\\n<p>A sequence of values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The sum of the projected values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Single.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Single))\n  name.vb: Sum(ParallelQuery(Of Single))\n  nameWithType: ParallelEnumerable.Sum(ParallelQuery<Single>)\n  nameWithType.vb: ParallelEnumerable.Sum(ParallelQuery(Of Single))\n- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})\n  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})\n  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)\n  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Decimal>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 192\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static decimal Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, decimal> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to calculate the sum of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Decimal}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The sum of the projected values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Decimal))\n  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Decimal))\n  nameWithType: ParallelEnumerable.Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)\n  nameWithType.vb: ParallelEnumerable.Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Decimal))\n- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})\n  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})\n  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)\n  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Double>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 193\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static double Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, double> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Double)) As Double\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to calculate the sum of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Double}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The sum of the projected values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Double.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Double))\n  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Double))\n  nameWithType: ParallelEnumerable.Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)\n  nameWithType.vb: ParallelEnumerable.Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Double))\n- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})\n  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})\n  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)\n  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 194\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static int Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, int> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer)) As Integer\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to calculate the sum of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Int32}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements in the source sequence.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The sum of the projected values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32))\n  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32))\n  nameWithType: ParallelEnumerable.Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)\n  nameWithType.vb: ParallelEnumerable.Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32))\n- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})\n  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})\n  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)\n  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 195\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static long Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, long> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Long)) As Long\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to calculate the sum of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Int64}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The sum of the projected values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int64))\n  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int64))\n  nameWithType: ParallelEnumerable.Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)\n  nameWithType.vb: ParallelEnumerable.Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int64))\n- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)\n  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 196\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static decimal ? Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, decimal ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Decimal?)) As Decimal?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to calculate the sum of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Decimal}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Decimal}\n      description: \"\\n<p>The sum of the projected values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))\n  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Decimal)))\n  nameWithType: ParallelEnumerable.Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)\n  nameWithType.vb: ParallelEnumerable.Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Decimal)))\n- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})\n  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})\n  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)\n  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Double>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 197\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static double ? Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, double ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Double?)) As Double?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to calculate the sum of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Double}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The sum of the projected values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Double.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))\n  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Double)))\n  nameWithType: ParallelEnumerable.Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)\n  nameWithType.vb: ParallelEnumerable.Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Double)))\n- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})\n  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})\n  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)\n  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 198\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static int ? Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, int ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer?)) As Integer?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to calculate the sum of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Int32}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Int32}\n      description: \"\\n<p>The sum of the projected values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))\n  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int32)))\n  nameWithType: ParallelEnumerable.Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)\n  nameWithType.vb: ParallelEnumerable.Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int32)))\n- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})\n  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})\n  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)\n  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 199\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static long ? Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, long ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Long?)) As Long?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to calculate the sum of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Int64}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Int64}\n      description: \"\\n<p>The sum of the projected values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))\n  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int64)))\n  nameWithType: ParallelEnumerable.Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)\n  nameWithType.vb: ParallelEnumerable.Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int64)))\n- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})\n  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})\n  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)\n  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Single>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 200\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static float ? Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, float ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Single?)) As Single?\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to calculate the sum of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Single}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Single}\n      description: \"\\n<p>The sum of the projected values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Single.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or-  One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))\n  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Single)))\n  nameWithType: ParallelEnumerable.Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)\n  nameWithType.vb: ParallelEnumerable.Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Single)))\n- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})\n  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})\n  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)\n  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Single>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 201\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static float Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, float> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Single)) As Single\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence of values to calculate the sum of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Single}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The sum of the projected values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Single.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Single))\n  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Single))\n  nameWithType: ParallelEnumerable.Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)\n  nameWithType.vb: ParallelEnumerable.Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Single))\n- uid: System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)\n  commentId: M:System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)\n  id: Take``1(System.Linq.ParallelQuery{``0},System.Int32)\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Take<TSource>(ParallelQuery<TSource>, Int32)\n  fullName: System.Linq.ParallelEnumerable.Take<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Take\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 202\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns a specified number of contiguous elements from the start of a parallel sequence.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TSource> Take<TSource>(this ParallelQuery<TSource> source, int count)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Take(Of TSource)(source As ParallelQuery(Of TSource), count As Integer) As ParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to return elements from.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements to return.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence that contains the specified number of elements from the start of the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Take(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Int32)\n  name.vb: Take(Of TSource)(ParallelQuery(Of TSource), Int32)\n  nameWithType: ParallelEnumerable.Take<TSource>(ParallelQuery<TSource>, Int32)\n  nameWithType.vb: ParallelEnumerable.Take(Of TSource)(ParallelQuery(Of TSource), Int32)\n- uid: System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  id: TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: TakeWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)\n  fullName: System.Linq.ParallelEnumerable.TakeWhile<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TakeWhile\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 203\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns elements from a parallel sequence as long as a specified condition is true.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TSource> TakeWhile<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function TakeWhile(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As ParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to return elements from.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Boolean}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.TakeWhile(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))\n  name.vb: TakeWhile(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))\n  nameWithType: ParallelEnumerable.TakeWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)\n  nameWithType.vb: ParallelEnumerable.TakeWhile(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))\n- uid: System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})\n  commentId: M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})\n  id: TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: TakeWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Int32, Boolean>)\n  fullName: System.Linq.ParallelEnumerable.TakeWhile<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TakeWhile\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 204\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Returns elements from a parallel sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TSource> TakeWhile<TSource>(this ParallelQuery<TSource> source, Func<TSource, int, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function TakeWhile(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As ParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to return elements from.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Int32,System.Boolean}\n      description: \"\\n<p>A function to test each source element for a condition; the second parameter of the function represents the index of the source element. </p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence that contains elements from the input sequence that occur before the element at which the test no longer passes.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>More than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> elements are enumerated by this query.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.TakeWhile(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32, System.Boolean))\n  name.vb: TakeWhile(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32, Boolean))\n  nameWithType: ParallelEnumerable.TakeWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Int32, Boolean>)\n  nameWithType.vb: ParallelEnumerable.TakeWhile(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32, Boolean))\n- uid: System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})\n  id: ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: ThenBy<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>)\n  fullName: System.Linq.ParallelEnumerable.ThenBy<TSource, TKey>(System.Linq.OrderedParallelQuery<TSource>, System.Func<TSource, TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ThenBy\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 205\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Performs in parallel a subsequent ordering of the elements in a sequence in ascending order according to a key.</p>\\n\"\n  syntax:\n    content: public static OrderedParallelQuery<TSource> ThenBy<TSource, TKey>(this OrderedParallelQuery<TSource> source, Func<TSource, TKey> keySelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ThenBy(Of TSource, TKey)(source As OrderedParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey)) As OrderedParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.OrderedParallelQuery{{TSource}}\n      description: \"\\n<p>An OrderedParallelQuery{TSource} that contains elements to sort.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from an element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.OrderedParallelQuery{{TSource}}\n      description: \"\\n<p>An OrderedParallelQuery{TSource} whose elements are sorted according to a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.ThenBy(Of TSource, TKey)(System.Linq.OrderedParallelQuery(Of TSource), System.Func(Of TSource, TKey))\n  name.vb: ThenBy(Of TSource, TKey)(OrderedParallelQuery(Of TSource), Func(Of TSource, TKey))\n  nameWithType: ParallelEnumerable.ThenBy<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>)\n  nameWithType.vb: ParallelEnumerable.ThenBy(Of TSource, TKey)(OrderedParallelQuery(Of TSource), Func(Of TSource, TKey))\n- uid: System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  commentId: M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  id: ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: ThenBy<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)\n  fullName: System.Linq.ParallelEnumerable.ThenBy<TSource, TKey>(System.Linq.OrderedParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ThenBy\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 206\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Performs in parallel a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</p>\\n\"\n  syntax:\n    content: public static OrderedParallelQuery<TSource> ThenBy<TSource, TKey>(this OrderedParallelQuery<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ThenBy(Of TSource, TKey)(source As OrderedParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As OrderedParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.OrderedParallelQuery{{TSource}}\n      description: \"\\n<p>An OrderedParallelQuery{TSource} that contains elements to sort.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from an element.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IComparer{{TKey}}\n      description: \"\\n<p>An IComparer{TKey} to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.OrderedParallelQuery{{TSource}}\n      description: \"\\n<p>An OrderedParallelQuery{TSource} whose elements are sorted according to a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.ThenBy(Of TSource, TKey)(System.Linq.OrderedParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))\n  name.vb: ThenBy(Of TSource, TKey)(OrderedParallelQuery(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))\n  nameWithType: ParallelEnumerable.ThenBy<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)\n  nameWithType.vb: ParallelEnumerable.ThenBy(Of TSource, TKey)(OrderedParallelQuery(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))\n- uid: System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})\n  id: ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: ThenByDescending<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>)\n  fullName: System.Linq.ParallelEnumerable.ThenByDescending<TSource, TKey>(System.Linq.OrderedParallelQuery<TSource>, System.Func<TSource, TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ThenByDescending\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 207\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Performs in parallel a subsequent ordering of the elements in a sequence in descending order, according to a key.</p>\\n\"\n  syntax:\n    content: public static OrderedParallelQuery<TSource> ThenByDescending<TSource, TKey>(this OrderedParallelQuery<TSource> source, Func<TSource, TKey> keySelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ThenByDescending(Of TSource, TKey)(source As OrderedParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey)) As OrderedParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.OrderedParallelQuery{{TSource}}\n      description: \"\\n<p>An OrderedParallelQuery{TSource} that contains elements to sort.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from an element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.OrderedParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence whose elements are sorted descending according to a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.ThenByDescending(Of TSource, TKey)(System.Linq.OrderedParallelQuery(Of TSource), System.Func(Of TSource, TKey))\n  name.vb: ThenByDescending(Of TSource, TKey)(OrderedParallelQuery(Of TSource), Func(Of TSource, TKey))\n  nameWithType: ParallelEnumerable.ThenByDescending<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>)\n  nameWithType.vb: ParallelEnumerable.ThenByDescending(Of TSource, TKey)(OrderedParallelQuery(Of TSource), Func(Of TSource, TKey))\n- uid: System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  commentId: M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  id: ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: ThenByDescending<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)\n  fullName: System.Linq.ParallelEnumerable.ThenByDescending<TSource, TKey>(System.Linq.OrderedParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ThenByDescending\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 208\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Performs in parallel a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</p>\\n\"\n  syntax:\n    content: public static OrderedParallelQuery<TSource> ThenByDescending<TSource, TKey>(this OrderedParallelQuery<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ThenByDescending(Of TSource, TKey)(source As OrderedParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As OrderedParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.OrderedParallelQuery{{TSource}}\n      description: \"\\n<p>An OrderedParallelQuery{TSource} that contains elements to sort.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from an element.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IComparer{{TKey}}\n      description: \"\\n<p>An IComparer{TKey} to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.OrderedParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence whose elements are sorted descending according to a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.ThenByDescending(Of TSource, TKey)(System.Linq.OrderedParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))\n  name.vb: ThenByDescending(Of TSource, TKey)(OrderedParallelQuery(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))\n  nameWithType: ParallelEnumerable.ThenByDescending<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)\n  nameWithType.vb: ParallelEnumerable.ThenByDescending(Of TSource, TKey)(OrderedParallelQuery(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))\n- uid: System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})\n  commentId: M:System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})\n  id: ToArray``1(System.Linq.ParallelQuery{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: ToArray<TSource>(ParallelQuery<TSource>)\n  fullName: System.Linq.ParallelEnumerable.ToArray<TSource>(System.Linq.ParallelQuery<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToArray\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 209\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Creates an array from a <xref href=\\\"System.Linq.ParallelQuery`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static TSource[] ToArray<TSource>(this ParallelQuery<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ToArray(Of TSource)(source As ParallelQuery(Of TSource)) As TSource()\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence to create an array from.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}[]'\n      description: \"\\n<p>An array that contains the elements from the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.ToArray(Of TSource)(System.Linq.ParallelQuery(Of TSource))\n  name.vb: ToArray(Of TSource)(ParallelQuery(Of TSource))\n  nameWithType: ParallelEnumerable.ToArray<TSource>(ParallelQuery<TSource>)\n  nameWithType.vb: ParallelEnumerable.ToArray(Of TSource)(ParallelQuery(Of TSource))\n- uid: System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  id: ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: ToDictionary<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)\n  fullName: System.Linq.ParallelEnumerable.ToDictionary<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToDictionary\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 210\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Collections.Generic.Dictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from a <xref href=\\\"System.Linq.ParallelQuery`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> according to a specified key selector function.</p>\\n\"\n  syntax:\n    content: public static Dictionary<TKey, TSource> ToDictionary<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ToDictionary(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey)) As Dictionary(Of TKey, TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence to create a <xref href=\\\"System.Collections.Generic.Dictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.Dictionary{{TKey},{TSource}}\n      description: \"\\n<p>A <xref href=\\\"System.Collections.Generic.Dictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains keys and values.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>\\n<em>keySelector</em> produces a key that is a null reference (Nothing in Visual Basic). -or- <em>keySelector</em> produces duplicate keys for two elements. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.ToDictionary(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey))\n  name.vb: ToDictionary(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))\n  nameWithType: ParallelEnumerable.ToDictionary<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)\n  nameWithType.vb: ParallelEnumerable.ToDictionary(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))\n- uid: System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  id: ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: ToDictionary<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)\n  fullName: System.Linq.ParallelEnumerable.ToDictionary<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToDictionary\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 211\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Collections.Generic.Dictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  from a <xref href=\\\"System.Linq.ParallelQuery`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> according to a specified key selector function and key comparer.</p>\\n\"\n  syntax:\n    content: public static Dictionary<TKey, TSource> ToDictionary<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ToDictionary(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence to create a <xref href=\\\"System.Collections.Generic.Dictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from each element.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.Dictionary{{TKey},{TSource}}\n      description: \"\\n<p>A <xref href=\\\"System.Collections.Generic.Dictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains keys and values.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>\\n<em>keySelector</em> produces a key that is a null reference (Nothing in Visual Basic). -or- <em>keySelector</em> produces duplicate keys for two elements. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.ToDictionary(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))\n  name.vb: ToDictionary(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))\n  nameWithType: ParallelEnumerable.ToDictionary<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)\n  nameWithType.vb: ParallelEnumerable.ToDictionary(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))\n- uid: System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})\n  commentId: M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})\n  id: ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: ToDictionary<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)\n  fullName: System.Linq.ParallelEnumerable.ToDictionary<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToDictionary\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 212\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Collections.Generic.Dictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from a <xref href=\\\"System.Linq.ParallelQuery`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> according to specified key selector and element selector functions.</p>\\n\"\n  syntax:\n    content: public static Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ToDictionary(Of TSource, TKey, TElement)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As Dictionary(Of TKey, TElement)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence to create a <xref href=\\\"System.Collections.Generic.Dictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from each element.</p>\\n\"\n    - id: elementSelector\n      type: System.Func{{TSource},{TElement}}\n      description: \"\\n<p>A transform function to produce a result element value from each element. </p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    - id: TElement\n      description: \"\\n<p>The type of the value returned by <em>elementSelector</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.Dictionary{{TKey},{TElement}}\n      description: \"\\n<p>A <xref href=\\\"System.Collections.Generic.Dictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains values of type <em>TElement</em> selected from the input sequence</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>\\n<em>keySelector</em> produces a key that is a null reference (Nothing in Visual Basic). -or- <em>keySelector</em> produces duplicate keys for two elements. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.ToDictionary(Of TSource, TKey, TElement)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement))\n  name.vb: ToDictionary(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))\n  nameWithType: ParallelEnumerable.ToDictionary<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)\n  nameWithType.vb: ParallelEnumerable.ToDictionary(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))\n- uid: System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  id: ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: ToDictionary<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)\n  fullName: System.Linq.ParallelEnumerable.ToDictionary<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToDictionary\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 213\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Collections.Generic.Dictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from a <xref href=\\\"System.Linq.ParallelQuery`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> according to a specified key selector function, a comparer, and an element selector function.</p>\\n\"\n  syntax:\n    content: public static Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ToDictionary(Of TSource, TKey, TElement)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, TElement)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence to create a <xref href=\\\"System.Collections.Generic.Dictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from each element.</p>\\n\"\n    - id: elementSelector\n      type: System.Func{{TSource},{TElement}}\n      description: \"\\n<p>A transform function to produce a result element value from each element.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    - id: TElement\n      description: \"\\n<p>The type of the value returned by <em>elementSelector</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.Dictionary{{TKey},{TElement}}\n      description: \"\\n<p>A <xref href=\\\"System.Collections.Generic.Dictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains values of type <em>TElement</em> selected from the input sequence</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>\\n<em>keySelector</em> produces a key that is a null reference (Nothing in Visual Basic). -or- <em>keySelector</em> produces duplicate keys for two elements. -or- One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.ToDictionary(Of TSource, TKey, TElement)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))\n  name.vb: ToDictionary(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))\n  nameWithType: ParallelEnumerable.ToDictionary<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)\n  nameWithType.vb: ParallelEnumerable.ToDictionary(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))\n- uid: System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})\n  commentId: M:System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})\n  id: ToList``1(System.Linq.ParallelQuery{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: ToList<TSource>(ParallelQuery<TSource>)\n  fullName: System.Linq.ParallelEnumerable.ToList<TSource>(System.Linq.ParallelQuery<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToList\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 214\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Collections.Generic.List`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from an <xref href=\\\"System.Linq.ParallelQuery`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static List<TSource> ToList<TSource>(this ParallelQuery<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ToList(Of TSource)(source As ParallelQuery(Of TSource)) As List(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence to create a <xref href=\\\"System.Collections.Generic.List`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.List{{TSource}}\n      description: \"\\n<p>A <xref href=\\\"System.Collections.Generic.List`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  that contains elements from the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.ToList(Of TSource)(System.Linq.ParallelQuery(Of TSource))\n  name.vb: ToList(Of TSource)(ParallelQuery(Of TSource))\n  nameWithType: ParallelEnumerable.ToList<TSource>(ParallelQuery<TSource>)\n  nameWithType.vb: ParallelEnumerable.ToList(Of TSource)(ParallelQuery(Of TSource))\n- uid: System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  id: ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: ToLookup<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)\n  fullName: System.Linq.ParallelEnumerable.ToLookup<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToLookup\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 215\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Linq.ILookup`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from a <xref href=\\\"System.Linq.ParallelQuery`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> according to a specified key selector function.</p>\\n\"\n  syntax:\n    content: public static ILookup<TKey, TSource> ToLookup<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ToLookup(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey)) As ILookup(Of TKey, TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to create a <xref href=\\\"System.Linq.ILookup`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.ILookup{{TKey},{TSource}}\n      description: \"\\n<p>A <xref href=\\\"System.Linq.ILookup`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains keys and values.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.ToLookup(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey))\n  name.vb: ToLookup(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))\n  nameWithType: ParallelEnumerable.ToLookup<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)\n  nameWithType.vb: ParallelEnumerable.ToLookup(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))\n- uid: System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  id: ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: ToLookup<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)\n  fullName: System.Linq.ParallelEnumerable.ToLookup<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToLookup\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 216\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Linq.ILookup`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from a <xref href=\\\"System.Linq.ParallelQuery`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> according to a specified key selector function and key comparer.</p>\\n\"\n  syntax:\n    content: public static ILookup<TKey, TSource> ToLookup<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ToLookup(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As ILookup(Of TKey, TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to create a <xref href=\\\"System.Linq.ILookup`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from each element.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.ILookup{{TKey},{TSource}}\n      description: \"\\n<p>A <xref href=\\\"System.Linq.ILookup`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains keys and values.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> or is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.ToLookup(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))\n  name.vb: ToLookup(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))\n  nameWithType: ParallelEnumerable.ToLookup<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)\n  nameWithType.vb: ParallelEnumerable.ToLookup(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))\n- uid: System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})\n  commentId: M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})\n  id: ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: ToLookup<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)\n  fullName: System.Linq.ParallelEnumerable.ToLookup<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToLookup\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 217\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Linq.ILookup`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from a <xref href=\\\"System.Linq.ParallelQuery`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> according to specified key selector and element selector functions.</p>\\n\"\n  syntax:\n    content: public static ILookup<TKey, TElement> ToLookup<TSource, TKey, TElement>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ToLookup(Of TSource, TKey, TElement)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As ILookup(Of TKey, TElement)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to create a <xref href=\\\"System.Linq.ILookup`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from each element.</p>\\n\"\n    - id: elementSelector\n      type: System.Func{{TSource},{TElement}}\n      description: \"\\n<p>A transform function to produce a result element value from each element. </p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    - id: TElement\n      description: \"\\n<p>The type of the value returned by <em>elementSelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.ILookup{{TKey},{TElement}}\n      description: \"\\n<p>A <xref href=\\\"System.Linq.ILookup`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains values of type <em>TElement</em> selected from the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.ToLookup(Of TSource, TKey, TElement)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement))\n  name.vb: ToLookup(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))\n  nameWithType: ParallelEnumerable.ToLookup<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)\n  nameWithType.vb: ParallelEnumerable.ToLookup(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))\n- uid: System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  id: ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: ToLookup<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)\n  fullName: System.Linq.ParallelEnumerable.ToLookup<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToLookup\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 218\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Linq.ILookup`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from a <xref href=\\\"System.Linq.ParallelQuery`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> according to a specified key selector function, a comparer and an element selector function.</p>\\n\"\n  syntax:\n    content: public static ILookup<TKey, TElement> ToLookup<TSource, TKey, TElement>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ToLookup(Of TSource, TKey, TElement)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As ILookup(Of TKey, TElement)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>The sequence to create a <xref href=\\\"System.Linq.ILookup`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from each element.</p>\\n\"\n    - id: elementSelector\n      type: System.Func{{TSource},{TElement}}\n      description: \"\\n<p>A transform function to produce a result element value from each element. </p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    - id: TElement\n      description: \"\\n<p>The type of the value returned by <em>elementSelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.ILookup{{TKey},{TElement}}\n      description: \"\\n<p>A Lookup<(Of <(TKey, TElement>)>) that contains values of type TElement selected from the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.ToLookup(Of TSource, TKey, TElement)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))\n  name.vb: ToLookup(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))\n  nameWithType: ParallelEnumerable.ToLookup<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)\n  nameWithType.vb: ParallelEnumerable.ToLookup(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))\n- uid: System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})\n  id: Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Union<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)\n  fullName: System.Linq.ParallelEnumerable.Union<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Union\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 219\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>This Union overload should never be called. This method is marked as obsolete and always throws <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> when called.</p>\\n\"\n  syntax:\n    content: >-\n      [Obsolete(\"The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\")]\n\n      public static ParallelQuery<TSource> Union<TSource>(this ParallelQuery<TSource> first, IEnumerable<TSource> second)\n    content.vb: >-\n      <Obsolete(\"The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\")>\n\n      <ExtensionAttribute>\n\n      Public Shared Function Union(Of TSource)(first As ParallelQuery(Of TSource), second As IEnumerable(Of TSource)) As ParallelQuery(Of TSource)\n    parameters:\n    - id: first\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: second\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>This type parameter is not used.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>This overload always throws a <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The exception that occurs when this method is called.</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Union(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: Union(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource))\n  nameWithType: ParallelEnumerable.Union<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)\n  nameWithType.vb: ParallelEnumerable.Union(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource))\n- uid: System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Union<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: System.Linq.ParallelEnumerable.Union<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Union\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 221\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>This Union overload should never be called. This method is marked as obsolete and always throws <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> when called.</p>\\n\"\n  syntax:\n    content: >-\n      [Obsolete(\"The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\")]\n\n      public static ParallelQuery<TSource> Union<TSource>(this ParallelQuery<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)\n    content.vb: >-\n      <Obsolete(\"The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\")>\n\n      <ExtensionAttribute>\n\n      Public Shared Function Union(Of TSource)(first As ParallelQuery(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As ParallelQuery(Of TSource)\n    parameters:\n    - id: first\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: second\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TSource}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>This type parameter is not used.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>This overload always throws a <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The exception that occurs when this method is called.</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Union(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))\n  name.vb: Union(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))\n  nameWithType: ParallelEnumerable.Union<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType.vb: ParallelEnumerable.Union(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))\n- uid: System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})\n  commentId: M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})\n  id: Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Union<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)\n  fullName: System.Linq.ParallelEnumerable.Union<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Union\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 223\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Produces the set union of two parallel sequences by using the default equality comparer.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TSource> Union<TSource>(this ParallelQuery<TSource> first, ParallelQuery<TSource> second)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Union(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)\n    parameters:\n    - id: first\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence whose distinct elements form the first set for the union.</p>\\n\"\n    - id: second\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence whose distinct elements form the second set for the union.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of the input sequences.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence that contains the elements from both input sequences, excluding duplicates.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>first</em> or <em>second</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Union(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource))\n  name.vb: Union(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))\n  nameWithType: ParallelEnumerable.Union<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)\n  nameWithType.vb: ParallelEnumerable.Union(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))\n- uid: System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Union<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)\n  fullName: System.Linq.ParallelEnumerable.Union<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Union\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 224\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Produces the set union of two parallel sequences by using a specified IEqualityComparer{T}.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TSource> Union<TSource>(this ParallelQuery<TSource> first, ParallelQuery<TSource> second, IEqualityComparer<TSource> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Union(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource), comparer As IEqualityComparer(Of TSource)) As ParallelQuery(Of TSource)\n    parameters:\n    - id: first\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence whose distinct elements form the first set for the union.</p>\\n\"\n    - id: second\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence whose distinct elements form the second set for the union.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare values.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of the input sequences.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence that contains the elements from both input sequences, excluding duplicates.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>first</em> or <em>second</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Union(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))\n  name.vb: Union(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource), IEqualityComparer(Of TSource))\n  nameWithType: ParallelEnumerable.Union<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)\n  nameWithType.vb: ParallelEnumerable.Union(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource), IEqualityComparer(Of TSource))\n- uid: System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  id: Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Where<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)\n  fullName: System.Linq.ParallelEnumerable.Where<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Where\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 225\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Filters in parallel a sequence of values based on a predicate.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TSource> Where<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Where(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As ParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence to filter.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Boolean}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of source.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence that contains elements from the input sequence that satisfy the condition.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Where(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))\n  name.vb: Where(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))\n  nameWithType: ParallelEnumerable.Where<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)\n  nameWithType.vb: ParallelEnumerable.Where(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))\n- uid: System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})\n  commentId: M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})\n  id: Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Where<TSource>(ParallelQuery<TSource>, Func<TSource, Int32, Boolean>)\n  fullName: System.Linq.ParallelEnumerable.Where<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Where\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 226\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Filters in parallel a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TSource> Where<TSource>(this ParallelQuery<TSource> source, Func<TSource, int, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Where(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As ParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence to filter.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Int32,System.Boolean}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of source.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A sequence that contains elements from the input sequence that satisfy the condition.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>More than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> elements are enumerated by the query.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Where(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32, System.Boolean))\n  name.vb: Where(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32, Boolean))\n  nameWithType: ParallelEnumerable.Where<TSource>(ParallelQuery<TSource>, Func<TSource, Int32, Boolean>)\n  nameWithType.vb: ParallelEnumerable.Where(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32, Boolean))\n- uid: System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)\n  commentId: M:System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)\n  id: WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: WithCancellation<TSource>(ParallelQuery<TSource>, CancellationToken)\n  fullName: System.Linq.ParallelEnumerable.WithCancellation<TSource>(System.Linq.ParallelQuery<TSource>, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WithCancellation\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 227\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Sets the <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to associate with the query.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TSource> WithCancellation<TSource>(this ParallelQuery<TSource> source, CancellationToken cancellationToken)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function WithCancellation(Of TSource)(source As ParallelQuery(Of TSource), cancellationToken As CancellationToken) As ParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A ParallelQuery on which to set the option.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>A cancellation token.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>ParallelQuery representing the same query as source, but with the registered cancellation token.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with the <em>cancellationToken</em> has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>WithCancellation</em> is used multiple times in the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.WithCancellation(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Threading.CancellationToken)\n  name.vb: WithCancellation(Of TSource)(ParallelQuery(Of TSource), CancellationToken)\n  nameWithType: ParallelEnumerable.WithCancellation<TSource>(ParallelQuery<TSource>, CancellationToken)\n  nameWithType.vb: ParallelEnumerable.WithCancellation(Of TSource)(ParallelQuery(Of TSource), CancellationToken)\n- uid: System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)\n  commentId: M:System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)\n  id: WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: WithDegreeOfParallelism<TSource>(ParallelQuery<TSource>, Int32)\n  fullName: System.Linq.ParallelEnumerable.WithDegreeOfParallelism<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WithDegreeOfParallelism\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 228\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Sets the degree of parallelism to use in a query. Degree of parallelism is the maximum number of concurrently executing tasks that will be used to process the query.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TSource> WithDegreeOfParallelism<TSource>(this ParallelQuery<TSource> source, int degreeOfParallelism)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function WithDegreeOfParallelism(Of TSource)(source As ParallelQuery(Of TSource), degreeOfParallelism As Integer) As ParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A ParallelQuery on which to set the limit on the degrees of parallelism.</p>\\n\"\n    - id: degreeOfParallelism\n      type: System.Int32\n      description: \"\\n<p>The degree of parallelism for the query. The default value is Math.Min(<xref href=\\\"System.Environment.ProcessorCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <strong>MAX_SUPPORTED_DOP</strong>) where <strong>MAX_SUPPORTED_DOP</strong> is 512. </p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>ParallelQuery representing the same query as source, with the limit on the degrees of parallelism set.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>degreeOfParallelism</em> is less than 1 or greater than 511. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>WithDegreeOfParallelism is used multiple times in the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.WithDegreeOfParallelism(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Int32)\n  name.vb: WithDegreeOfParallelism(Of TSource)(ParallelQuery(Of TSource), Int32)\n  nameWithType: ParallelEnumerable.WithDegreeOfParallelism<TSource>(ParallelQuery<TSource>, Int32)\n  nameWithType.vb: ParallelEnumerable.WithDegreeOfParallelism(Of TSource)(ParallelQuery(Of TSource), Int32)\n- uid: System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)\n  commentId: M:System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)\n  id: WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: WithExecutionMode<TSource>(ParallelQuery<TSource>, ParallelExecutionMode)\n  fullName: System.Linq.ParallelEnumerable.WithExecutionMode<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelExecutionMode)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WithExecutionMode\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 229\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Sets the execution mode of the query.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TSource> WithExecutionMode<TSource>(this ParallelQuery<TSource> source, ParallelExecutionMode executionMode)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function WithExecutionMode(Of TSource)(source As ParallelQuery(Of TSource), executionMode As ParallelExecutionMode) As ParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A ParallelQuery on which to set the option.</p>\\n\"\n    - id: executionMode\n      type: System.Linq.ParallelExecutionMode\n      description: \"\\n<p>The mode in which to execute the query.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>ParallelQuery representing the same query as source, but with the registered execution mode.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>executionMode</em> is not a valid <xref href=\\\"System.Linq.ParallelExecutionMode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>WithExecutionMode is used multiple times in the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.WithExecutionMode(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelExecutionMode)\n  name.vb: WithExecutionMode(Of TSource)(ParallelQuery(Of TSource), ParallelExecutionMode)\n  nameWithType: ParallelEnumerable.WithExecutionMode<TSource>(ParallelQuery<TSource>, ParallelExecutionMode)\n  nameWithType.vb: ParallelEnumerable.WithExecutionMode(Of TSource)(ParallelQuery(Of TSource), ParallelExecutionMode)\n- uid: System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)\n  commentId: M:System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)\n  id: WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: WithMergeOptions<TSource>(ParallelQuery<TSource>, ParallelMergeOptions)\n  fullName: System.Linq.ParallelEnumerable.WithMergeOptions<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelMergeOptions)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WithMergeOptions\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 230\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Sets the merge options for this query, which specify how the query will buffer output.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TSource> WithMergeOptions<TSource>(this ParallelQuery<TSource> source, ParallelMergeOptions mergeOptions)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function WithMergeOptions(Of TSource)(source As ParallelQuery(Of TSource), mergeOptions As ParallelMergeOptions) As ParallelQuery(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>A ParallelQuery on which to set the option.</p>\\n\"\n    - id: mergeOptions\n      type: System.Linq.ParallelMergeOptions\n      description: \"\\n<p>The merge options to set for this query.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TSource}}\n      description: \"\\n<p>ParallelQuery representing the same query as source, but with the registered merge options.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>mergeOptions</em> is not a valid <xref href=\\\"System.Linq.ParallelMergeOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>WithMergeOptions</em> is used multiple times in the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.WithMergeOptions(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelMergeOptions)\n  name.vb: WithMergeOptions(Of TSource)(ParallelQuery(Of TSource), ParallelMergeOptions)\n  nameWithType: ParallelEnumerable.WithMergeOptions<TSource>(ParallelQuery<TSource>, ParallelMergeOptions)\n  nameWithType.vb: ParallelEnumerable.WithMergeOptions(Of TSource)(ParallelQuery(Of TSource), ParallelMergeOptions)\n- uid: System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  commentId: M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  id: Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Zip<TFirst, TSecond, TResult>(ParallelQuery<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, TResult>)\n  fullName: System.Linq.ParallelEnumerable.Zip<TFirst, TSecond, TResult>(System.Linq.ParallelQuery<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst, TSecond, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Zip\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 231\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>This Zip overload should never be called. This method is marked as obsolete and always throws <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> when invoked.</p>\\n\"\n  syntax:\n    content: >-\n      [Obsolete(\"The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\")]\n\n      public static ParallelQuery<TResult> Zip<TFirst, TSecond, TResult>(this ParallelQuery<TFirst> first, IEnumerable<TSecond> second, Func<TFirst, TSecond, TResult> resultSelector)\n    content.vb: >-\n      <Obsolete(\"The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\")>\n\n      <ExtensionAttribute>\n\n      Public Shared Function Zip(Of TFirst, TSecond, TResult)(first As ParallelQuery(Of TFirst), second As IEnumerable(Of TSecond), resultSelector As Func(Of TFirst, TSecond, TResult)) As ParallelQuery(Of TResult)\n    parameters:\n    - id: first\n      type: System.Linq.ParallelQuery{{TFirst}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: second\n      type: System.Collections.Generic.IEnumerable{{TSecond}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TFirst},{TSecond},{TResult}}\n      description: \"\\n<p>This parameter is not used.</p>\\n\"\n    typeParameters:\n    - id: TFirst\n      description: \"\\n<p>This type parameter is not used.</p>\\n\"\n    - id: TSecond\n      description: \"\\n<p>This type parameter is not used.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>This type parameter is not used.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TResult}}\n      description: \"\\n<p>This overload always throws a <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The exception that occurs when this method is called.</p>\\n\"\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Zip(Of TFirst, TSecond, TResult)(System.Linq.ParallelQuery(Of TFirst), System.Collections.Generic.IEnumerable(Of TSecond), System.Func(Of TFirst, TSecond, TResult))\n  name.vb: Zip(Of TFirst, TSecond, TResult)(ParallelQuery(Of TFirst), IEnumerable(Of TSecond), Func(Of TFirst, TSecond, TResult))\n  nameWithType: ParallelEnumerable.Zip<TFirst, TSecond, TResult>(ParallelQuery<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, TResult>)\n  nameWithType.vb: ParallelEnumerable.Zip(Of TFirst, TSecond, TResult)(ParallelQuery(Of TFirst), IEnumerable(Of TSecond), Func(Of TFirst, TSecond, TResult))\n- uid: System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})\n  commentId: M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})\n  id: Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})\n  isExtensionMethod: true\n  parent: System.Linq.ParallelEnumerable\n  langs:\n  - csharp\n  - vb\n  name: Zip<TFirst, TSecond, TResult>(ParallelQuery<TFirst>, ParallelQuery<TSecond>, Func<TFirst, TSecond, TResult>)\n  fullName: System.Linq.ParallelEnumerable.Zip<TFirst, TSecond, TResult>(System.Linq.ParallelQuery<TFirst>, System.Linq.ParallelQuery<TSecond>, System.Func<TFirst, TSecond, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Zip\n    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs\n    startLine: 233\n  assemblies:\n  - System.Linq.Parallel\n  namespace: System.Linq\n  summary: \"\\n<p>Merges in parallel two sequences by using the specified predicate function.</p>\\n\"\n  syntax:\n    content: public static ParallelQuery<TResult> Zip<TFirst, TSecond, TResult>(this ParallelQuery<TFirst> first, ParallelQuery<TSecond> second, Func<TFirst, TSecond, TResult> resultSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Zip(Of TFirst, TSecond, TResult)(first As ParallelQuery(Of TFirst), second As ParallelQuery(Of TSecond), resultSelector As Func(Of TFirst, TSecond, TResult)) As ParallelQuery(Of TResult)\n    parameters:\n    - id: first\n      type: System.Linq.ParallelQuery{{TFirst}}\n      description: \"\\n<p>The first sequence to zip.</p>\\n\"\n    - id: second\n      type: System.Linq.ParallelQuery{{TSecond}}\n      description: \"\\n<p>The second sequence to zip.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TFirst},{TSecond},{TResult}}\n      description: \"\\n<p>A function to create a result element from two matching elements.</p>\\n\"\n    typeParameters:\n    - id: TFirst\n      description: \"\\n<p>The type of the elements of the first sequence.</p>\\n\"\n    - id: TSecond\n      description: \"\\n<p>The type of the elements of the second sequence.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the return elements.</p>\\n\"\n    return:\n      type: System.Linq.ParallelQuery{{TResult}}\n      description: \"\\n<p>A sequence that has elements of type <em>TResult</em> that are obtained by performing <em>resultSelector</em> pairwise on two sequences. If the sequence lengths are unequal, this truncates to the length of the shorter sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>first</em> or <em>second</em> or <em>resultSelector</em> is a null reference (Nothing in Visual Basic).</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>One or more exceptions occurred during the evaluation of the query.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.ParallelEnumerable.Zip(Of TFirst, TSecond, TResult)(System.Linq.ParallelQuery(Of TFirst), System.Linq.ParallelQuery(Of TSecond), System.Func(Of TFirst, TSecond, TResult))\n  name.vb: Zip(Of TFirst, TSecond, TResult)(ParallelQuery(Of TFirst), ParallelQuery(Of TSecond), Func(Of TFirst, TSecond, TResult))\n  nameWithType: ParallelEnumerable.Zip<TFirst, TSecond, TResult>(ParallelQuery<TFirst>, ParallelQuery<TSecond>, Func<TFirst, TSecond, TResult>)\n  nameWithType.vb: ParallelEnumerable.Zip(Of TFirst, TSecond, TResult)(ParallelQuery(Of TFirst), ParallelQuery(Of TSecond), Func(Of TFirst, TSecond, TResult))\nreferences:\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  commentId: N:System.Linq\n  nameWithType: System.Linq\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Linq.ParallelQuery{{TSource}}\n  parent: System.Linq\n  definition: System.Linq.ParallelQuery`1\n  name: ParallelQuery<TSource>\n  fullName: System.Linq.ParallelQuery<TSource>\n  fullname.vb: System.Linq.ParallelQuery(Of TSource)\n  name.vb: ParallelQuery(Of TSource)\n  spec.csharp:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.ParallelQuery{`0}\n  nameWithType: ParallelQuery<TSource>\n  nameWithType.vb: ParallelQuery(Of TSource)\n- uid: System.Func{{TSource},{TSource},{TSource}}\n  parent: System\n  definition: System.Func`3\n  name: Func<TSource, TSource, TSource>\n  fullName: System.Func<TSource, TSource, TSource>\n  fullname.vb: System.Func(Of TSource, TSource, TSource)\n  name.vb: Func(Of TSource, TSource, TSource)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,``0,``0}\n  nameWithType: Func<TSource, TSource, TSource>\n  nameWithType.vb: Func(Of TSource, TSource, TSource)\n- uid: '{TSource}'\n  definition: TSource\n  name: TSource\n  fullName: TSource\n  commentId: '!:TSource'\n  nameWithType: TSource\n- uid: System.Linq.ParallelQuery`1\n  isExternal: false\n  name: ParallelQuery<TSource>\n  fullName: System.Linq.ParallelQuery<TSource>\n  fullname.vb: System.Linq.ParallelQuery(Of TSource)\n  name.vb: ParallelQuery(Of TSource)\n  spec.csharp:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.ParallelQuery`1\n  nameWithType: ParallelQuery<TSource>\n  nameWithType.vb: ParallelQuery(Of TSource)\n- uid: System.Func`3\n  isExternal: false\n  name: Func<T1, T2, TResult>\n  fullName: System.Func<T1, T2, TResult>\n  fullname.vb: System.Func(Of T1, T2, TResult)\n  name.vb: Func(Of T1, T2, TResult)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func`3\n  nameWithType: Func<T1, T2, TResult>\n  nameWithType.vb: Func(Of T1, T2, TResult)\n- uid: TSource\n  isExternal: false\n  name: TSource\n  fullName: TSource\n  nameWithType: TSource\n- uid: '{TAccumulate}'\n  definition: TAccumulate\n  name: TAccumulate\n  fullName: TAccumulate\n  commentId: '!:TAccumulate'\n  nameWithType: TAccumulate\n- uid: System.Func{{TAccumulate},{TSource},{TAccumulate}}\n  parent: System\n  definition: System.Func`3\n  name: Func<TAccumulate, TSource, TAccumulate>\n  fullName: System.Func<TAccumulate, TSource, TAccumulate>\n  fullname.vb: System.Func(Of TAccumulate, TSource, TAccumulate)\n  name.vb: Func(Of TAccumulate, TSource, TAccumulate)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TAccumulate\n    fullName: TAccumulate\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TAccumulate\n    fullName: TAccumulate\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TAccumulate\n    fullName: TAccumulate\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TAccumulate\n    fullName: TAccumulate\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``1,``0,``1}\n  nameWithType: Func<TAccumulate, TSource, TAccumulate>\n  nameWithType.vb: Func(Of TAccumulate, TSource, TAccumulate)\n- uid: TAccumulate\n  isExternal: false\n  name: TAccumulate\n  fullName: TAccumulate\n  nameWithType: TAccumulate\n- uid: System.Func{{TAccumulate},{TAccumulate},{TAccumulate}}\n  parent: System\n  definition: System.Func`3\n  name: Func<TAccumulate, TAccumulate, TAccumulate>\n  fullName: System.Func<TAccumulate, TAccumulate, TAccumulate>\n  fullname.vb: System.Func(Of TAccumulate, TAccumulate, TAccumulate)\n  name.vb: Func(Of TAccumulate, TAccumulate, TAccumulate)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TAccumulate\n    fullName: TAccumulate\n  - name: ', '\n    fullName: ', '\n  - name: TAccumulate\n    fullName: TAccumulate\n  - name: ', '\n    fullName: ', '\n  - name: TAccumulate\n    fullName: TAccumulate\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TAccumulate\n    fullName: TAccumulate\n  - name: ', '\n    fullName: ', '\n  - name: TAccumulate\n    fullName: TAccumulate\n  - name: ', '\n    fullName: ', '\n  - name: TAccumulate\n    fullName: TAccumulate\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``1,``1,``1}\n  nameWithType: Func<TAccumulate, TAccumulate, TAccumulate>\n  nameWithType.vb: Func(Of TAccumulate, TAccumulate, TAccumulate)\n- uid: System.Func{{TAccumulate},{TResult}}\n  parent: System\n  definition: System.Func`2\n  name: Func<TAccumulate, TResult>\n  fullName: System.Func<TAccumulate, TResult>\n  fullname.vb: System.Func(Of TAccumulate, TResult)\n  name.vb: Func(Of TAccumulate, TResult)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TAccumulate\n    fullName: TAccumulate\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TAccumulate\n    fullName: TAccumulate\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``1,``2}\n  nameWithType: Func<TAccumulate, TResult>\n  nameWithType.vb: Func(Of TAccumulate, TResult)\n- uid: '{TResult}'\n  definition: TResult\n  name: TResult\n  fullName: TResult\n  commentId: '!:TResult'\n  nameWithType: TResult\n- uid: System.Func`2\n  isExternal: false\n  name: Func<T, TResult>\n  fullName: System.Func<T, TResult>\n  fullname.vb: System.Func(Of T, TResult)\n  name.vb: Func(Of T, TResult)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func`2\n  nameWithType: Func<T, TResult>\n  nameWithType.vb: Func(Of T, TResult)\n- uid: TResult\n  isExternal: false\n  name: TResult\n  fullName: TResult\n  nameWithType: TResult\n- uid: System.Func{{TAccumulate}}\n  parent: System\n  definition: System.Func`1\n  name: Func<TAccumulate>\n  fullName: System.Func<TAccumulate>\n  fullname.vb: System.Func(Of TAccumulate)\n  name.vb: Func(Of TAccumulate)\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TAccumulate\n    fullName: TAccumulate\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TAccumulate\n    fullName: TAccumulate\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``1}\n  nameWithType: Func<TAccumulate>\n  nameWithType.vb: Func(Of TAccumulate)\n- uid: System.Func`1\n  isExternal: false\n  name: Func<TResult>\n  fullName: System.Func<TResult>\n  fullname.vb: System.Func(Of TResult)\n  name.vb: Func(Of TResult)\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func`1\n  nameWithType: Func<TResult>\n  nameWithType.vb: Func(Of TResult)\n- uid: System.Func{{TSource},System.Boolean}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, Boolean>\n  fullName: System.Func<TSource, System.Boolean>\n  fullname.vb: System.Func(Of TSource, System.Boolean)\n  name.vb: Func(Of TSource, Boolean)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Boolean}\n  nameWithType: Func<TSource, Boolean>\n  nameWithType.vb: Func(Of TSource, Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Collections.Generic.IEnumerable{{TSource}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<TSource>\n  fullName: System.Collections.Generic.IEnumerable<TSource>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of TSource)\n  name.vb: IEnumerable(Of TSource)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{``0}\n  nameWithType: IEnumerable<TSource>\n  nameWithType.vb: IEnumerable(Of TSource)\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable`1\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n  nameWithType: System.Collections.Generic\n- uid: System.Linq.ParallelQuery\n  parent: System.Linq\n  isExternal: false\n  name: ParallelQuery\n  fullName: System.Linq.ParallelQuery\n  commentId: T:System.Linq.ParallelQuery\n  nameWithType: ParallelQuery\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  commentId: T:System.Collections.IEnumerable\n  nameWithType: IEnumerable\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  commentId: N:System.Collections\n  nameWithType: System.Collections\n- uid: System.Collections.Concurrent.Partitioner{{TSource}}\n  parent: System.Collections.Concurrent\n  definition: System.Collections.Concurrent.Partitioner`1\n  name: Partitioner<TSource>\n  fullName: System.Collections.Concurrent.Partitioner<TSource>\n  fullname.vb: System.Collections.Concurrent.Partitioner(Of TSource)\n  name.vb: Partitioner(Of TSource)\n  spec.csharp:\n  - uid: System.Collections.Concurrent.Partitioner`1\n    name: Partitioner\n    fullName: System.Collections.Concurrent.Partitioner\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Concurrent.Partitioner`1\n    name: Partitioner\n    fullName: System.Collections.Concurrent.Partitioner\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Concurrent.Partitioner{``0}\n  nameWithType: Partitioner<TSource>\n  nameWithType.vb: Partitioner(Of TSource)\n- uid: System.Collections.Concurrent.Partitioner`1\n  isExternal: false\n  name: Partitioner<TSource>\n  fullName: System.Collections.Concurrent.Partitioner<TSource>\n  fullname.vb: System.Collections.Concurrent.Partitioner(Of TSource)\n  name.vb: Partitioner(Of TSource)\n  spec.csharp:\n  - uid: System.Collections.Concurrent.Partitioner`1\n    name: Partitioner\n    fullName: System.Collections.Concurrent.Partitioner\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Concurrent.Partitioner`1\n    name: Partitioner\n    fullName: System.Collections.Concurrent.Partitioner\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Concurrent.Partitioner`1\n  nameWithType: Partitioner<TSource>\n  nameWithType.vb: Partitioner(Of TSource)\n- uid: System.Collections.Concurrent\n  isExternal: false\n  name: System.Collections.Concurrent\n  fullName: System.Collections.Concurrent\n  commentId: N:System.Collections.Concurrent\n  nameWithType: System.Collections.Concurrent\n- uid: System.Linq.ParallelQuery{System.Decimal}\n  parent: System.Linq\n  definition: System.Linq.ParallelQuery`1\n  name: ParallelQuery<Decimal>\n  fullName: System.Linq.ParallelQuery<System.Decimal>\n  fullname.vb: System.Linq.ParallelQuery(Of System.Decimal)\n  name.vb: ParallelQuery(Of Decimal)\n  spec.csharp:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: <\n    fullName: <\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.ParallelQuery{System.Decimal}\n  nameWithType: ParallelQuery<Decimal>\n  nameWithType.vb: ParallelQuery(Of Decimal)\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  fullName: System.Decimal\n  commentId: T:System.Decimal\n  nameWithType: Decimal\n- uid: System.Linq.ParallelQuery{System.Double}\n  parent: System.Linq\n  definition: System.Linq.ParallelQuery`1\n  name: ParallelQuery<Double>\n  fullName: System.Linq.ParallelQuery<System.Double>\n  fullname.vb: System.Linq.ParallelQuery(Of System.Double)\n  name.vb: ParallelQuery(Of Double)\n  spec.csharp:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: <\n    fullName: <\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.ParallelQuery{System.Double}\n  nameWithType: ParallelQuery<Double>\n  nameWithType.vb: ParallelQuery(Of Double)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  commentId: T:System.Double\n  nameWithType: Double\n- uid: System.Linq.ParallelQuery{System.Int32}\n  parent: System.Linq\n  definition: System.Linq.ParallelQuery`1\n  name: ParallelQuery<Int32>\n  fullName: System.Linq.ParallelQuery<System.Int32>\n  fullname.vb: System.Linq.ParallelQuery(Of System.Int32)\n  name.vb: ParallelQuery(Of Int32)\n  spec.csharp:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.ParallelQuery{System.Int32}\n  nameWithType: ParallelQuery<Int32>\n  nameWithType.vb: ParallelQuery(Of Int32)\n- uid: System.Linq.ParallelQuery{System.Int64}\n  parent: System.Linq\n  definition: System.Linq.ParallelQuery`1\n  name: ParallelQuery<Int64>\n  fullName: System.Linq.ParallelQuery<System.Int64>\n  fullname.vb: System.Linq.ParallelQuery(Of System.Int64)\n  name.vb: ParallelQuery(Of Int64)\n  spec.csharp:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.ParallelQuery{System.Int64}\n  nameWithType: ParallelQuery<Int64>\n  nameWithType.vb: ParallelQuery(Of Int64)\n- uid: System.Linq.ParallelQuery{System.Nullable{System.Decimal}}\n  parent: System.Linq\n  definition: System.Linq.ParallelQuery`1\n  name: ParallelQuery<Nullable<Decimal>>\n  fullName: System.Linq.ParallelQuery<System.Nullable<System.Decimal>>\n  fullname.vb: System.Linq.ParallelQuery(Of System.Nullable(Of System.Decimal))\n  name.vb: ParallelQuery(Of Nullable(Of Decimal))\n  spec.csharp:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: <\n    fullName: <\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.ParallelQuery{System.Nullable{System.Decimal}}\n  nameWithType: ParallelQuery<Nullable<Decimal>>\n  nameWithType.vb: ParallelQuery(Of Nullable(Of Decimal))\n- uid: System.Nullable{System.Decimal}\n  parent: System\n  definition: System.Nullable`1\n  name: Nullable<Decimal>\n  fullName: System.Nullable<System.Decimal>\n  fullname.vb: System.Nullable(Of System.Decimal)\n  name.vb: Nullable(Of Decimal)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Nullable{System.Decimal}\n  nameWithType: Nullable<Decimal>\n  nameWithType.vb: Nullable(Of Decimal)\n- uid: System.Nullable`1\n  parent: System\n  isExternal: false\n  name: Nullable<T>\n  fullName: System.Nullable<T>\n  fullname.vb: System.Nullable(Of T)\n  name.vb: Nullable(Of T)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Nullable`1\n  nameWithType: Nullable<T>\n  nameWithType.vb: Nullable(Of T)\n- uid: System.Linq.ParallelQuery{System.Nullable{System.Double}}\n  parent: System.Linq\n  definition: System.Linq.ParallelQuery`1\n  name: ParallelQuery<Nullable<Double>>\n  fullName: System.Linq.ParallelQuery<System.Nullable<System.Double>>\n  fullname.vb: System.Linq.ParallelQuery(Of System.Nullable(Of System.Double))\n  name.vb: ParallelQuery(Of Nullable(Of Double))\n  spec.csharp:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: <\n    fullName: <\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.ParallelQuery{System.Nullable{System.Double}}\n  nameWithType: ParallelQuery<Nullable<Double>>\n  nameWithType.vb: ParallelQuery(Of Nullable(Of Double))\n- uid: System.Nullable{System.Double}\n  parent: System\n  definition: System.Nullable`1\n  name: Nullable<Double>\n  fullName: System.Nullable<System.Double>\n  fullname.vb: System.Nullable(Of System.Double)\n  name.vb: Nullable(Of Double)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Nullable{System.Double}\n  nameWithType: Nullable<Double>\n  nameWithType.vb: Nullable(Of Double)\n- uid: System.Linq.ParallelQuery{System.Nullable{System.Int32}}\n  parent: System.Linq\n  definition: System.Linq.ParallelQuery`1\n  name: ParallelQuery<Nullable<Int32>>\n  fullName: System.Linq.ParallelQuery<System.Nullable<System.Int32>>\n  fullname.vb: System.Linq.ParallelQuery(Of System.Nullable(Of System.Int32))\n  name.vb: ParallelQuery(Of Nullable(Of Int32))\n  spec.csharp:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: <\n    fullName: <\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.ParallelQuery{System.Nullable{System.Int32}}\n  nameWithType: ParallelQuery<Nullable<Int32>>\n  nameWithType.vb: ParallelQuery(Of Nullable(Of Int32))\n- uid: System.Linq.ParallelQuery{System.Nullable{System.Int64}}\n  parent: System.Linq\n  definition: System.Linq.ParallelQuery`1\n  name: ParallelQuery<Nullable<Int64>>\n  fullName: System.Linq.ParallelQuery<System.Nullable<System.Int64>>\n  fullname.vb: System.Linq.ParallelQuery(Of System.Nullable(Of System.Int64))\n  name.vb: ParallelQuery(Of Nullable(Of Int64))\n  spec.csharp:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: <\n    fullName: <\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.ParallelQuery{System.Nullable{System.Int64}}\n  nameWithType: ParallelQuery<Nullable<Int64>>\n  nameWithType.vb: ParallelQuery(Of Nullable(Of Int64))\n- uid: System.Linq.ParallelQuery{System.Nullable{System.Single}}\n  parent: System.Linq\n  definition: System.Linq.ParallelQuery`1\n  name: ParallelQuery<Nullable<Single>>\n  fullName: System.Linq.ParallelQuery<System.Nullable<System.Single>>\n  fullname.vb: System.Linq.ParallelQuery(Of System.Nullable(Of System.Single))\n  name.vb: ParallelQuery(Of Nullable(Of Single))\n  spec.csharp:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: <\n    fullName: <\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.ParallelQuery{System.Nullable{System.Single}}\n  nameWithType: ParallelQuery<Nullable<Single>>\n  nameWithType.vb: ParallelQuery(Of Nullable(Of Single))\n- uid: System.Nullable{System.Single}\n  parent: System\n  definition: System.Nullable`1\n  name: Nullable<Single>\n  fullName: System.Nullable<System.Single>\n  fullname.vb: System.Nullable(Of System.Single)\n  name.vb: Nullable(Of Single)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Nullable{System.Single}\n  nameWithType: Nullable<Single>\n  nameWithType.vb: Nullable(Of Single)\n- uid: System.Linq.ParallelQuery{System.Single}\n  parent: System.Linq\n  definition: System.Linq.ParallelQuery`1\n  name: ParallelQuery<Single>\n  fullName: System.Linq.ParallelQuery<System.Single>\n  fullname.vb: System.Linq.ParallelQuery(Of System.Single)\n  name.vb: ParallelQuery(Of Single)\n  spec.csharp:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: <\n    fullName: <\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.ParallelQuery{System.Single}\n  nameWithType: ParallelQuery<Single>\n  nameWithType.vb: ParallelQuery(Of Single)\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  commentId: T:System.Single\n  nameWithType: Single\n- uid: System.Func{{TSource},System.Decimal}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, Decimal>\n  fullName: System.Func<TSource, System.Decimal>\n  fullname.vb: System.Func(Of TSource, System.Decimal)\n  name.vb: Func(Of TSource, Decimal)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Decimal}\n  nameWithType: Func<TSource, Decimal>\n  nameWithType.vb: Func(Of TSource, Decimal)\n- uid: System.Func{{TSource},System.Double}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, Double>\n  fullName: System.Func<TSource, System.Double>\n  fullname.vb: System.Func(Of TSource, System.Double)\n  name.vb: Func(Of TSource, Double)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Double}\n  nameWithType: Func<TSource, Double>\n  nameWithType.vb: Func(Of TSource, Double)\n- uid: System.Func{{TSource},System.Int32}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, Int32>\n  fullName: System.Func<TSource, System.Int32>\n  fullname.vb: System.Func(Of TSource, System.Int32)\n  name.vb: Func(Of TSource, Int32)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Int32}\n  nameWithType: Func<TSource, Int32>\n  nameWithType.vb: Func(Of TSource, Int32)\n- uid: System.Func{{TSource},System.Int64}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, Int64>\n  fullName: System.Func<TSource, System.Int64>\n  fullname.vb: System.Func(Of TSource, System.Int64)\n  name.vb: Func(Of TSource, Int64)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Int64}\n  nameWithType: Func<TSource, Int64>\n  nameWithType.vb: Func(Of TSource, Int64)\n- uid: System.Func{{TSource},System.Nullable{System.Decimal}}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, Nullable<Decimal>>\n  fullName: System.Func<TSource, System.Nullable<System.Decimal>>\n  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Decimal))\n  name.vb: Func(Of TSource, Nullable(Of Decimal))\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Nullable{System.Decimal}}\n  nameWithType: Func<TSource, Nullable<Decimal>>\n  nameWithType.vb: Func(Of TSource, Nullable(Of Decimal))\n- uid: System.Func{{TSource},System.Nullable{System.Double}}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, Nullable<Double>>\n  fullName: System.Func<TSource, System.Nullable<System.Double>>\n  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Double))\n  name.vb: Func(Of TSource, Nullable(Of Double))\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Nullable{System.Double}}\n  nameWithType: Func<TSource, Nullable<Double>>\n  nameWithType.vb: Func(Of TSource, Nullable(Of Double))\n- uid: System.Func{{TSource},System.Nullable{System.Int32}}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, Nullable<Int32>>\n  fullName: System.Func<TSource, System.Nullable<System.Int32>>\n  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Int32))\n  name.vb: Func(Of TSource, Nullable(Of Int32))\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Nullable{System.Int32}}\n  nameWithType: Func<TSource, Nullable<Int32>>\n  nameWithType.vb: Func(Of TSource, Nullable(Of Int32))\n- uid: System.Func{{TSource},System.Nullable{System.Int64}}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, Nullable<Int64>>\n  fullName: System.Func<TSource, System.Nullable<System.Int64>>\n  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Int64))\n  name.vb: Func(Of TSource, Nullable(Of Int64))\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Nullable{System.Int64}}\n  nameWithType: Func<TSource, Nullable<Int64>>\n  nameWithType.vb: Func(Of TSource, Nullable(Of Int64))\n- uid: System.Func{{TSource},System.Nullable{System.Single}}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, Nullable<Single>>\n  fullName: System.Func<TSource, System.Nullable<System.Single>>\n  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Single))\n  name.vb: Func(Of TSource, Nullable(Of Single))\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Nullable{System.Single}}\n  nameWithType: Func<TSource, Nullable<Single>>\n  nameWithType.vb: Func(Of TSource, Nullable(Of Single))\n- uid: System.Func{{TSource},System.Single}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, Single>\n  fullName: System.Func<TSource, System.Single>\n  fullname.vb: System.Func(Of TSource, System.Single)\n  name.vb: Func(Of TSource, Single)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Single}\n  nameWithType: Func<TSource, Single>\n  nameWithType.vb: Func(Of TSource, Single)\n- uid: System.Linq.ParallelQuery{{TResult}}\n  parent: System.Linq\n  definition: System.Linq.ParallelQuery`1\n  name: ParallelQuery<TResult>\n  fullName: System.Linq.ParallelQuery<TResult>\n  fullname.vb: System.Linq.ParallelQuery(Of TResult)\n  name.vb: ParallelQuery(Of TResult)\n  spec.csharp:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.ParallelQuery{``0}\n  nameWithType: ParallelQuery<TResult>\n  nameWithType.vb: ParallelQuery(Of TResult)\n- uid: System.Collections.Generic.IEqualityComparer{{TSource}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEqualityComparer`1\n  name: IEqualityComparer<TSource>\n  fullName: System.Collections.Generic.IEqualityComparer<TSource>\n  fullname.vb: System.Collections.Generic.IEqualityComparer(Of TSource)\n  name.vb: IEqualityComparer(Of TSource)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEqualityComparer{``0}\n  nameWithType: IEqualityComparer<TSource>\n  nameWithType.vb: IEqualityComparer(Of TSource)\n- uid: System.Collections.Generic.IEqualityComparer`1\n  isExternal: false\n  name: IEqualityComparer<T>\n  fullName: System.Collections.Generic.IEqualityComparer<T>\n  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T)\n  name.vb: IEqualityComparer(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEqualityComparer`1\n  nameWithType: IEqualityComparer<T>\n  nameWithType.vb: IEqualityComparer(Of T)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Action{{TSource}}\n  parent: System\n  definition: System.Action`1\n  name: Action<TSource>\n  fullName: System.Action<TSource>\n  fullname.vb: System.Action(Of TSource)\n  name.vb: Action(Of TSource)\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  commentId: T:System.Action{``0}\n  nameWithType: Action<TSource>\n  nameWithType.vb: Action(Of TSource)\n- uid: System.Action`1\n  isExternal: false\n  name: Action<T>\n  fullName: System.Action<T>\n  fullname.vb: System.Action(Of T)\n  name.vb: Action(Of T)\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Action`1\n  nameWithType: Action<T>\n  nameWithType.vb: Action(Of T)\n- uid: System.Func{{TSource},{TKey}}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, TKey>\n  fullName: System.Func<TSource, TKey>\n  fullname.vb: System.Func(Of TSource, TKey)\n  name.vb: Func(Of TSource, TKey)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TKey\n    fullName: TKey\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TKey\n    fullName: TKey\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,``1}\n  nameWithType: Func<TSource, TKey>\n  nameWithType.vb: Func(Of TSource, TKey)\n- uid: System.Linq.ParallelQuery{System.Linq.IGrouping{{TKey},{TSource}}}\n  parent: System.Linq\n  definition: System.Linq.ParallelQuery`1\n  name: ParallelQuery<IGrouping<TKey, TSource>>\n  fullName: System.Linq.ParallelQuery<System.Linq.IGrouping<TKey, TSource>>\n  fullname.vb: System.Linq.ParallelQuery(Of System.Linq.IGrouping(Of TKey, TSource))\n  name.vb: ParallelQuery(Of IGrouping(Of TKey, TSource))\n  spec.csharp:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: <\n    fullName: <\n  - uid: System.Linq.IGrouping`2\n    name: IGrouping\n    fullName: System.Linq.IGrouping\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Linq.IGrouping`2\n    name: IGrouping\n    fullName: System.Linq.IGrouping\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.ParallelQuery{System.Linq.IGrouping{``1,``0}}\n  nameWithType: ParallelQuery<IGrouping<TKey, TSource>>\n  nameWithType.vb: ParallelQuery(Of IGrouping(Of TKey, TSource))\n- uid: System.Collections.Generic.IEqualityComparer{{TKey}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEqualityComparer`1\n  name: IEqualityComparer<TKey>\n  fullName: System.Collections.Generic.IEqualityComparer<TKey>\n  fullname.vb: System.Collections.Generic.IEqualityComparer(Of TKey)\n  name.vb: IEqualityComparer(Of TKey)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEqualityComparer{``1}\n  nameWithType: IEqualityComparer<TKey>\n  nameWithType.vb: IEqualityComparer(Of TKey)\n- uid: System.Func{{TSource},{TElement}}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, TElement>\n  fullName: System.Func<TSource, TElement>\n  fullname.vb: System.Func(Of TSource, TElement)\n  name.vb: Func(Of TSource, TElement)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TElement\n    fullName: TElement\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TElement\n    fullName: TElement\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,``2}\n  nameWithType: Func<TSource, TElement>\n  nameWithType.vb: Func(Of TSource, TElement)\n- uid: System.Linq.ParallelQuery{System.Linq.IGrouping{{TKey},{TElement}}}\n  parent: System.Linq\n  definition: System.Linq.ParallelQuery`1\n  name: ParallelQuery<IGrouping<TKey, TElement>>\n  fullName: System.Linq.ParallelQuery<System.Linq.IGrouping<TKey, TElement>>\n  fullname.vb: System.Linq.ParallelQuery(Of System.Linq.IGrouping(Of TKey, TElement))\n  name.vb: ParallelQuery(Of IGrouping(Of TKey, TElement))\n  spec.csharp:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: <\n    fullName: <\n  - uid: System.Linq.IGrouping`2\n    name: IGrouping\n    fullName: System.Linq.IGrouping\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TElement\n    fullName: TElement\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Linq.IGrouping`2\n    name: IGrouping\n    fullName: System.Linq.IGrouping\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TElement\n    fullName: TElement\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.ParallelQuery{System.Linq.IGrouping{``1,``2}}\n  nameWithType: ParallelQuery<IGrouping<TKey, TElement>>\n  nameWithType.vb: ParallelQuery(Of IGrouping(Of TKey, TElement))\n- uid: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}\n  parent: System\n  definition: System.Func`3\n  name: Func<TKey, IEnumerable<TSource>, TResult>\n  fullName: System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>\n  fullname.vb: System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)\n  name.vb: Func(Of TKey, IEnumerable(Of TSource), TResult)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}\n  nameWithType: Func<TKey, IEnumerable<TSource>, TResult>\n  nameWithType.vb: Func(Of TKey, IEnumerable(Of TSource), TResult)\n- uid: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}\n  parent: System\n  definition: System.Func`3\n  name: Func<TKey, IEnumerable<TElement>, TResult>\n  fullName: System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>\n  fullname.vb: System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult)\n  name.vb: Func(Of TKey, IEnumerable(Of TElement), TResult)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TElement\n    fullName: TElement\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TElement\n    fullName: TElement\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}\n  nameWithType: Func<TKey, IEnumerable<TElement>, TResult>\n  nameWithType.vb: Func(Of TKey, IEnumerable(Of TElement), TResult)\n- uid: System.Linq.ParallelQuery{{TOuter}}\n  parent: System.Linq\n  definition: System.Linq.ParallelQuery`1\n  name: ParallelQuery<TOuter>\n  fullName: System.Linq.ParallelQuery<TOuter>\n  fullname.vb: System.Linq.ParallelQuery(Of TOuter)\n  name.vb: ParallelQuery(Of TOuter)\n  spec.csharp:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: <\n    fullName: <\n  - name: TOuter\n    fullName: TOuter\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TOuter\n    fullName: TOuter\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.ParallelQuery{``0}\n  nameWithType: ParallelQuery<TOuter>\n  nameWithType.vb: ParallelQuery(Of TOuter)\n- uid: System.Collections.Generic.IEnumerable{{TInner}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<TInner>\n  fullName: System.Collections.Generic.IEnumerable<TInner>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of TInner)\n  name.vb: IEnumerable(Of TInner)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TInner\n    fullName: TInner\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TInner\n    fullName: TInner\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{``1}\n  nameWithType: IEnumerable<TInner>\n  nameWithType.vb: IEnumerable(Of TInner)\n- uid: System.Func{{TOuter},{TKey}}\n  parent: System\n  definition: System.Func`2\n  name: Func<TOuter, TKey>\n  fullName: System.Func<TOuter, TKey>\n  fullname.vb: System.Func(Of TOuter, TKey)\n  name.vb: Func(Of TOuter, TKey)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TOuter\n    fullName: TOuter\n  - name: ', '\n    fullName: ', '\n  - name: TKey\n    fullName: TKey\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TOuter\n    fullName: TOuter\n  - name: ', '\n    fullName: ', '\n  - name: TKey\n    fullName: TKey\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,``2}\n  nameWithType: Func<TOuter, TKey>\n  nameWithType.vb: Func(Of TOuter, TKey)\n- uid: System.Func{{TInner},{TKey}}\n  parent: System\n  definition: System.Func`2\n  name: Func<TInner, TKey>\n  fullName: System.Func<TInner, TKey>\n  fullname.vb: System.Func(Of TInner, TKey)\n  name.vb: Func(Of TInner, TKey)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TInner\n    fullName: TInner\n  - name: ', '\n    fullName: ', '\n  - name: TKey\n    fullName: TKey\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TInner\n    fullName: TInner\n  - name: ', '\n    fullName: ', '\n  - name: TKey\n    fullName: TKey\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``1,``2}\n  nameWithType: Func<TInner, TKey>\n  nameWithType.vb: Func(Of TInner, TKey)\n- uid: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}\n  parent: System\n  definition: System.Func`3\n  name: Func<TOuter, IEnumerable<TInner>, TResult>\n  fullName: System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>\n  fullname.vb: System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)\n  name.vb: Func(Of TOuter, IEnumerable(Of TInner), TResult)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TOuter\n    fullName: TOuter\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TInner\n    fullName: TInner\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TOuter\n    fullName: TOuter\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TInner\n    fullName: TInner\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}\n  nameWithType: Func<TOuter, IEnumerable<TInner>, TResult>\n  nameWithType.vb: Func(Of TOuter, IEnumerable(Of TInner), TResult)\n- uid: System.Linq.ParallelQuery{{TInner}}\n  parent: System.Linq\n  definition: System.Linq.ParallelQuery`1\n  name: ParallelQuery<TInner>\n  fullName: System.Linq.ParallelQuery<TInner>\n  fullname.vb: System.Linq.ParallelQuery(Of TInner)\n  name.vb: ParallelQuery(Of TInner)\n  spec.csharp:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: <\n    fullName: <\n  - name: TInner\n    fullName: TInner\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TInner\n    fullName: TInner\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.ParallelQuery{``1}\n  nameWithType: ParallelQuery<TInner>\n  nameWithType.vb: ParallelQuery(Of TInner)\n- uid: System.Func{{TOuter},{TInner},{TResult}}\n  parent: System\n  definition: System.Func`3\n  name: Func<TOuter, TInner, TResult>\n  fullName: System.Func<TOuter, TInner, TResult>\n  fullname.vb: System.Func(Of TOuter, TInner, TResult)\n  name.vb: Func(Of TOuter, TInner, TResult)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TOuter\n    fullName: TOuter\n  - name: ', '\n    fullName: ', '\n  - name: TInner\n    fullName: TInner\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TOuter\n    fullName: TOuter\n  - name: ', '\n    fullName: ', '\n  - name: TInner\n    fullName: TInner\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,``1,``3}\n  nameWithType: Func<TOuter, TInner, TResult>\n  nameWithType.vb: Func(Of TOuter, TInner, TResult)\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  commentId: T:System.Int64\n  nameWithType: Int64\n- uid: System.Nullable{System.Int32}\n  parent: System\n  definition: System.Nullable`1\n  name: Nullable<Int32>\n  fullName: System.Nullable<System.Int32>\n  fullname.vb: System.Nullable(Of System.Int32)\n  name.vb: Nullable(Of Int32)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Nullable{System.Int32}\n  nameWithType: Nullable<Int32>\n  nameWithType.vb: Nullable(Of Int32)\n- uid: System.Nullable{System.Int64}\n  parent: System\n  definition: System.Nullable`1\n  name: Nullable<Int64>\n  fullName: System.Nullable<System.Int64>\n  fullname.vb: System.Nullable(Of System.Int64)\n  name.vb: Nullable(Of Int64)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Nullable{System.Int64}\n  nameWithType: Nullable<Int64>\n  nameWithType.vb: Nullable(Of Int64)\n- uid: System.Func{{TSource},{TResult}}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, TResult>\n  fullName: System.Func<TSource, TResult>\n  fullname.vb: System.Func(Of TSource, TResult)\n  name.vb: Func(Of TSource, TResult)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,``1}\n  nameWithType: Func<TSource, TResult>\n  nameWithType.vb: Func(Of TSource, TResult)\n- uid: System.Linq.OrderedParallelQuery{{TSource}}\n  parent: System.Linq\n  definition: System.Linq.OrderedParallelQuery`1\n  name: OrderedParallelQuery<TSource>\n  fullName: System.Linq.OrderedParallelQuery<TSource>\n  fullname.vb: System.Linq.OrderedParallelQuery(Of TSource)\n  name.vb: OrderedParallelQuery(Of TSource)\n  spec.csharp:\n  - uid: System.Linq.OrderedParallelQuery`1\n    name: OrderedParallelQuery\n    fullName: System.Linq.OrderedParallelQuery\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.OrderedParallelQuery`1\n    name: OrderedParallelQuery\n    fullName: System.Linq.OrderedParallelQuery\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.OrderedParallelQuery{``0}\n  nameWithType: OrderedParallelQuery<TSource>\n  nameWithType.vb: OrderedParallelQuery(Of TSource)\n- uid: System.Linq.OrderedParallelQuery`1\n  isExternal: false\n  name: OrderedParallelQuery<TSource>\n  fullName: System.Linq.OrderedParallelQuery<TSource>\n  fullname.vb: System.Linq.OrderedParallelQuery(Of TSource)\n  name.vb: OrderedParallelQuery(Of TSource)\n  spec.csharp:\n  - uid: System.Linq.OrderedParallelQuery`1\n    name: OrderedParallelQuery\n    fullName: System.Linq.OrderedParallelQuery\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.OrderedParallelQuery`1\n    name: OrderedParallelQuery\n    fullName: System.Linq.OrderedParallelQuery\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.OrderedParallelQuery`1\n  nameWithType: OrderedParallelQuery<TSource>\n  nameWithType.vb: OrderedParallelQuery(Of TSource)\n- uid: System.Collections.Generic.IComparer{{TKey}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IComparer`1\n  name: IComparer<TKey>\n  fullName: System.Collections.Generic.IComparer<TKey>\n  fullname.vb: System.Collections.Generic.IComparer(Of TKey)\n  name.vb: IComparer(Of TKey)\n  spec.csharp:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IComparer{``1}\n  nameWithType: IComparer<TKey>\n  nameWithType.vb: IComparer(Of TKey)\n- uid: System.Collections.Generic.IComparer`1\n  isExternal: false\n  name: IComparer<T>\n  fullName: System.Collections.Generic.IComparer<T>\n  fullname.vb: System.Collections.Generic.IComparer(Of T)\n  name.vb: IComparer(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IComparer`1\n  nameWithType: IComparer<T>\n  nameWithType.vb: IComparer(Of T)\n- uid: System.Func{{TSource},System.Int32,{TResult}}\n  parent: System\n  definition: System.Func`3\n  name: Func<TSource, Int32, TResult>\n  fullName: System.Func<TSource, System.Int32, TResult>\n  fullname.vb: System.Func(Of TSource, System.Int32, TResult)\n  name.vb: Func(Of TSource, Int32, TResult)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Int32,``1}\n  nameWithType: Func<TSource, Int32, TResult>\n  nameWithType.vb: Func(Of TSource, Int32, TResult)\n- uid: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, IEnumerable<TResult>>\n  fullName: System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>\n  fullname.vb: System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult))\n  name.vb: Func(Of TSource, IEnumerable(Of TResult))\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Collections.Generic.IEnumerable{``1}}\n  nameWithType: Func<TSource, IEnumerable<TResult>>\n  nameWithType.vb: Func(Of TSource, IEnumerable(Of TResult))\n- uid: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TResult}}}\n  parent: System\n  definition: System.Func`3\n  name: Func<TSource, Int32, IEnumerable<TResult>>\n  fullName: System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TResult>>\n  fullname.vb: System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TResult))\n  name.vb: Func(Of TSource, Int32, IEnumerable(Of TResult))\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}\n  nameWithType: Func<TSource, Int32, IEnumerable<TResult>>\n  nameWithType.vb: Func(Of TSource, Int32, IEnumerable(Of TResult))\n- uid: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TCollection}}}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, IEnumerable<TCollection>>\n  fullName: System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>\n  fullname.vb: System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection))\n  name.vb: Func(Of TSource, IEnumerable(Of TCollection))\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TCollection\n    fullName: TCollection\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TCollection\n    fullName: TCollection\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Collections.Generic.IEnumerable{``1}}\n  nameWithType: Func<TSource, IEnumerable<TCollection>>\n  nameWithType.vb: Func(Of TSource, IEnumerable(Of TCollection))\n- uid: System.Func{{TSource},{TCollection},{TResult}}\n  parent: System\n  definition: System.Func`3\n  name: Func<TSource, TCollection, TResult>\n  fullName: System.Func<TSource, TCollection, TResult>\n  fullname.vb: System.Func(Of TSource, TCollection, TResult)\n  name.vb: Func(Of TSource, TCollection, TResult)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TCollection\n    fullName: TCollection\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TCollection\n    fullName: TCollection\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,``1,``2}\n  nameWithType: Func<TSource, TCollection, TResult>\n  nameWithType.vb: Func(Of TSource, TCollection, TResult)\n- uid: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TCollection}}}\n  parent: System\n  definition: System.Func`3\n  name: Func<TSource, Int32, IEnumerable<TCollection>>\n  fullName: System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TCollection>>\n  fullname.vb: System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TCollection))\n  name.vb: Func(Of TSource, Int32, IEnumerable(Of TCollection))\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TCollection\n    fullName: TCollection\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TCollection\n    fullName: TCollection\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}\n  nameWithType: Func<TSource, Int32, IEnumerable<TCollection>>\n  nameWithType.vb: Func(Of TSource, Int32, IEnumerable(Of TCollection))\n- uid: System.Func{{TSource},System.Int32,System.Boolean}\n  parent: System\n  definition: System.Func`3\n  name: Func<TSource, Int32, Boolean>\n  fullName: System.Func<TSource, System.Int32, System.Boolean>\n  fullname.vb: System.Func(Of TSource, System.Int32, System.Boolean)\n  name.vb: Func(Of TSource, Int32, Boolean)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Int32,System.Boolean}\n  nameWithType: Func<TSource, Int32, Boolean>\n  nameWithType.vb: Func(Of TSource, Int32, Boolean)\n- uid: '{TSource}[]'\n  name: TSource[]\n  fullName: TSource[]\n  fullname.vb: TSource()\n  name.vb: TSource()\n  spec.csharp:\n  - name: TSource\n    fullName: TSource\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - name: TSource\n    fullName: TSource\n  - name: ()\n    fullName: ()\n  nameWithType: TSource[]\n  nameWithType.vb: TSource()\n- uid: System.Collections.Generic.Dictionary{{TKey},{TSource}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.Dictionary`2\n  name: Dictionary<TKey, TSource>\n  fullName: System.Collections.Generic.Dictionary<TKey, TSource>\n  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TSource)\n  name.vb: Dictionary(Of TKey, TSource)\n  spec.csharp:\n  - uid: System.Collections.Generic.Dictionary`2\n    name: Dictionary\n    fullName: System.Collections.Generic.Dictionary\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.Dictionary`2\n    name: Dictionary\n    fullName: System.Collections.Generic.Dictionary\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.Dictionary{``1,``0}\n  nameWithType: Dictionary<TKey, TSource>\n  nameWithType.vb: Dictionary(Of TKey, TSource)\n- uid: System.Collections.Generic.Dictionary`2\n  parent: System.Collections.Generic\n  isExternal: false\n  name: Dictionary<TKey, TValue>\n  fullName: System.Collections.Generic.Dictionary<TKey, TValue>\n  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)\n  name.vb: Dictionary(Of TKey, TValue)\n  spec.csharp:\n  - uid: System.Collections.Generic.Dictionary`2\n    name: Dictionary\n    fullName: System.Collections.Generic.Dictionary\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.Dictionary`2\n    name: Dictionary\n    fullName: System.Collections.Generic.Dictionary\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.Dictionary`2\n  nameWithType: Dictionary<TKey, TValue>\n  nameWithType.vb: Dictionary(Of TKey, TValue)\n- uid: System.Collections.Generic.Dictionary{{TKey},{TElement}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.Dictionary`2\n  name: Dictionary<TKey, TElement>\n  fullName: System.Collections.Generic.Dictionary<TKey, TElement>\n  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TElement)\n  name.vb: Dictionary(Of TKey, TElement)\n  spec.csharp:\n  - uid: System.Collections.Generic.Dictionary`2\n    name: Dictionary\n    fullName: System.Collections.Generic.Dictionary\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TElement\n    fullName: TElement\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.Dictionary`2\n    name: Dictionary\n    fullName: System.Collections.Generic.Dictionary\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TElement\n    fullName: TElement\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.Dictionary{``1,``2}\n  nameWithType: Dictionary<TKey, TElement>\n  nameWithType.vb: Dictionary(Of TKey, TElement)\n- uid: System.Collections.Generic.List{{TSource}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.List`1\n  name: List<TSource>\n  fullName: System.Collections.Generic.List<TSource>\n  fullname.vb: System.Collections.Generic.List(Of TSource)\n  name.vb: List(Of TSource)\n  spec.csharp:\n  - uid: System.Collections.Generic.List`1\n    name: List\n    fullName: System.Collections.Generic.List\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.List`1\n    name: List\n    fullName: System.Collections.Generic.List\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.List{``0}\n  nameWithType: List<TSource>\n  nameWithType.vb: List(Of TSource)\n- uid: System.Collections.Generic.List`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: List<T>\n  fullName: System.Collections.Generic.List<T>\n  fullname.vb: System.Collections.Generic.List(Of T)\n  name.vb: List(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.List`1\n    name: List\n    fullName: System.Collections.Generic.List\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.List`1\n    name: List\n    fullName: System.Collections.Generic.List\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.List`1\n  nameWithType: List<T>\n  nameWithType.vb: List(Of T)\n- uid: System.Linq.ILookup{{TKey},{TSource}}\n  parent: System.Linq\n  definition: System.Linq.ILookup`2\n  name: ILookup<TKey, TSource>\n  fullName: System.Linq.ILookup<TKey, TSource>\n  fullname.vb: System.Linq.ILookup(Of TKey, TSource)\n  name.vb: ILookup(Of TKey, TSource)\n  spec.csharp:\n  - uid: System.Linq.ILookup`2\n    name: ILookup\n    fullName: System.Linq.ILookup\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.ILookup`2\n    name: ILookup\n    fullName: System.Linq.ILookup\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.ILookup{``1,``0}'\n  nameWithType: ILookup<TKey, TSource>\n  nameWithType.vb: ILookup(Of TKey, TSource)\n- uid: System.Linq.ILookup`2\n  isExternal: false\n  name: ILookup<, >\n  fullName: System.Linq.ILookup<, >\n  fullname.vb: System.Linq.ILookup(Of , )\n  name.vb: ILookup(Of , )\n  spec.csharp:\n  - uid: System.Linq.ILookup`2\n    name: ILookup\n    fullName: System.Linq.ILookup\n  - name: <\n    fullName: <\n  - {}\n  - name: ', '\n    fullName: ', '\n  - {}\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.ILookup`2\n    name: ILookup\n    fullName: System.Linq.ILookup\n  - name: '(Of '\n    fullName: '(Of '\n  - {}\n  - name: ', '\n    fullName: ', '\n  - {}\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.ILookup`2\n  nameWithType: ILookup<, >\n  nameWithType.vb: ILookup(Of , )\n- uid: System.Linq.ILookup{{TKey},{TElement}}\n  parent: System.Linq\n  definition: System.Linq.ILookup`2\n  name: ILookup<TKey, TElement>\n  fullName: System.Linq.ILookup<TKey, TElement>\n  fullname.vb: System.Linq.ILookup(Of TKey, TElement)\n  name.vb: ILookup(Of TKey, TElement)\n  spec.csharp:\n  - uid: System.Linq.ILookup`2\n    name: ILookup\n    fullName: System.Linq.ILookup\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TElement\n    fullName: TElement\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.ILookup`2\n    name: ILookup\n    fullName: System.Linq.ILookup\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TElement\n    fullName: TElement\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.ILookup{``1,``2}'\n  nameWithType: ILookup<TKey, TElement>\n  nameWithType.vb: ILookup(Of TKey, TElement)\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  fullName: System.Threading.CancellationToken\n  commentId: T:System.Threading.CancellationToken\n  nameWithType: CancellationToken\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  commentId: N:System.Threading\n  nameWithType: System.Threading\n- uid: System.Linq.ParallelExecutionMode\n  parent: System.Linq\n  isExternal: false\n  name: ParallelExecutionMode\n  fullName: System.Linq.ParallelExecutionMode\n  commentId: T:System.Linq.ParallelExecutionMode\n  nameWithType: ParallelExecutionMode\n- uid: System.Linq.ParallelMergeOptions\n  parent: System.Linq\n  isExternal: false\n  name: ParallelMergeOptions\n  fullName: System.Linq.ParallelMergeOptions\n  commentId: T:System.Linq.ParallelMergeOptions\n  nameWithType: ParallelMergeOptions\n- uid: System.Linq.ParallelQuery{{TFirst}}\n  parent: System.Linq\n  definition: System.Linq.ParallelQuery`1\n  name: ParallelQuery<TFirst>\n  fullName: System.Linq.ParallelQuery<TFirst>\n  fullname.vb: System.Linq.ParallelQuery(Of TFirst)\n  name.vb: ParallelQuery(Of TFirst)\n  spec.csharp:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: <\n    fullName: <\n  - name: TFirst\n    fullName: TFirst\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TFirst\n    fullName: TFirst\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.ParallelQuery{``0}\n  nameWithType: ParallelQuery<TFirst>\n  nameWithType.vb: ParallelQuery(Of TFirst)\n- uid: System.Collections.Generic.IEnumerable{{TSecond}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<TSecond>\n  fullName: System.Collections.Generic.IEnumerable<TSecond>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of TSecond)\n  name.vb: IEnumerable(Of TSecond)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSecond\n    fullName: TSecond\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSecond\n    fullName: TSecond\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{``1}\n  nameWithType: IEnumerable<TSecond>\n  nameWithType.vb: IEnumerable(Of TSecond)\n- uid: System.Func{{TFirst},{TSecond},{TResult}}\n  parent: System\n  definition: System.Func`3\n  name: Func<TFirst, TSecond, TResult>\n  fullName: System.Func<TFirst, TSecond, TResult>\n  fullname.vb: System.Func(Of TFirst, TSecond, TResult)\n  name.vb: Func(Of TFirst, TSecond, TResult)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TFirst\n    fullName: TFirst\n  - name: ', '\n    fullName: ', '\n  - name: TSecond\n    fullName: TSecond\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TFirst\n    fullName: TFirst\n  - name: ', '\n    fullName: ', '\n  - name: TSecond\n    fullName: TSecond\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,``1,``2}\n  nameWithType: Func<TFirst, TSecond, TResult>\n  nameWithType.vb: Func(Of TFirst, TSecond, TResult)\n- uid: System.Linq.ParallelQuery{{TSecond}}\n  parent: System.Linq\n  definition: System.Linq.ParallelQuery`1\n  name: ParallelQuery<TSecond>\n  fullName: System.Linq.ParallelQuery<TSecond>\n  fullname.vb: System.Linq.ParallelQuery(Of TSecond)\n  name.vb: ParallelQuery(Of TSecond)\n  spec.csharp:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: <\n    fullName: <\n  - name: TSecond\n    fullName: TSecond\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.ParallelQuery`1\n    name: ParallelQuery\n    fullName: System.Linq.ParallelQuery\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSecond\n    fullName: TSecond\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.ParallelQuery{``1}\n  nameWithType: ParallelQuery<TSecond>\n  nameWithType.vb: ParallelQuery(Of TSecond)\n- uid: System.OperationCanceledException\n  parent: System\n  isExternal: false\n  name: OperationCanceledException\n  fullName: System.OperationCanceledException\n  nameWithType: OperationCanceledException\n  commentId: T:System.OperationCanceledException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.AggregateException\n  parent: System\n  isExternal: false\n  name: AggregateException\n  fullName: System.AggregateException\n  nameWithType: AggregateException\n  commentId: T:System.AggregateException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.OverflowException\n  isExternal: false\n  name: OverflowException\n  fullName: System.OverflowException\n  nameWithType: OverflowException\n  commentId: T:System.OverflowException\n- uid: System.InvalidCastException\n  isExternal: false\n  name: InvalidCastException\n  fullName: System.InvalidCastException\n  nameWithType: InvalidCastException\n  commentId: T:System.InvalidCastException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}