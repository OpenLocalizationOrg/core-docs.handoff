{"nodes":[{"pos":[1768,1785],"content":"HttpClientHandler","needQuote":true,"nodes":[{"content":"HttpClientHandler","pos":[0,17]}]},{"pos":[3277,3296],"content":"HttpClientHandler()","needQuote":true,"nodes":[{"content":"HttpClientHandler()","pos":[0,19]}]},{"pos":[4250,4267],"content":"AllowAutoRedirect","needQuote":true,"nodes":[{"content":"AllowAutoRedirect","pos":[0,17]}]},{"pos":[5614,5636],"content":"AutomaticDecompression","needQuote":true,"nodes":[{"content":"AutomaticDecompression","pos":[0,22]}]},{"pos":[7140,7170],"content":"CheckCertificateRevocationList","needQuote":true,"nodes":[{"content":"CheckCertificateRevocationList","pos":[0,30]}]},{"pos":[8186,8210],"content":"ClientCertificateOptions","needQuote":true,"nodes":[{"content":"ClientCertificateOptions","pos":[0,24]}]},{"pos":[9657,9675],"content":"ClientCertificates","needQuote":true,"nodes":[{"content":"ClientCertificates","pos":[0,18]}]},{"pos":[10709,10724],"content":"CookieContainer","needQuote":true,"nodes":[{"content":"CookieContainer","pos":[0,15]}]},{"pos":[11962,11973],"content":"Credentials","needQuote":true,"nodes":[{"content":"Credentials","pos":[0,11]}]},{"pos":[13230,13253],"content":"DefaultProxyCredentials","needQuote":true,"nodes":[{"content":"DefaultProxyCredentials","pos":[0,23]}]},{"pos":[14256,14280],"content":"MaxAutomaticRedirections","needQuote":true,"nodes":[{"content":"MaxAutomaticRedirections","pos":[0,24]}]},{"pos":[15572,15595],"content":"MaxConnectionsPerServer","needQuote":true,"nodes":[{"content":"MaxConnectionsPerServer","pos":[0,23]}]},{"pos":[16582,16609],"content":"MaxRequestContentBufferSize","needQuote":true,"nodes":[{"content":"MaxRequestContentBufferSize","pos":[0,27]}]},{"pos":[17909,17933],"content":"MaxResponseHeadersLength","needQuote":true,"nodes":[{"content":"MaxResponseHeadersLength","pos":[0,24]}]},{"pos":[18889,18904],"content":"PreAuthenticate","needQuote":true,"nodes":[{"content":"PreAuthenticate","pos":[0,15]}]},{"pos":[20258,20268],"content":"Properties","needQuote":true,"nodes":[{"content":"Properties","pos":[0,10]}]},{"pos":[21235,21240],"content":"Proxy","needQuote":true,"nodes":[{"content":"Proxy","pos":[0,5]}]},{"pos":[22488,22529],"content":"ServerCertificateCustomValidationCallback","needQuote":true,"nodes":[{"content":"ServerCertificateCustomValidationCallback","pos":[0,41]}]},{"pos":[23932,23944],"content":"SslProtocols","needQuote":true,"nodes":[{"content":"SslProtocols","pos":[0,12]}]},{"pos":[24960,24990],"content":"SupportsAutomaticDecompression","needQuote":true,"nodes":[{"content":"SupportsAutomaticDecompression","pos":[0,30]}]},{"pos":[26452,26465],"content":"SupportsProxy","needQuote":true,"nodes":[{"content":"SupportsProxy","pos":[0,13]}]},{"pos":[27838,27867],"content":"SupportsRedirectConfiguration","needQuote":true,"nodes":[{"content":"SupportsRedirectConfiguration","pos":[0,29]}]},{"pos":[29787,29797],"content":"UseCookies","needQuote":true,"nodes":[{"content":"UseCookies","pos":[0,10]}]},{"pos":[31442,31463],"content":"UseDefaultCredentials","needQuote":true,"nodes":[{"content":"UseDefaultCredentials","pos":[0,21]}]},{"pos":[32777,32785],"content":"UseProxy","needQuote":true,"nodes":[{"content":"UseProxy","pos":[0,8]}]},{"pos":[34071,34087],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to release both managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to releases only unmanaged resources.&lt;/p&gt;\\n","pos":[34908,35052],"source":"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to releases only unmanaged resources.</p>\\n"},{"pos":[35687,35735],"content":"SendAsync(HttpRequestMessage, CancellationToken)","needQuote":true,"nodes":[{"content":"SendAsync(HttpRequestMessage, CancellationToken)","pos":[0,48]}]},{"content":"\\n&lt;p&gt;The HTTP request message.&lt;/p&gt;\\n","pos":[36898,36934],"source":"\\n<p>The HTTP request message.</p>\\n"},{"content":"\\n&lt;p&gt;A cancellation token to cancel the operation.&lt;/p&gt;\\n","pos":[37031,37087],"source":"\\n<p>A cancellation token to cancel the operation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;request&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[37621,37679],"source":"\\n<p>The <em>request</em> was <strong>null</strong>.</p>\\n"},{"pos":[37918,37933],"content":"System.Net.Http","needQuote":true,"nodes":[{"content":"System.Net.Http","pos":[0,15]}]},{"pos":[38091,38097],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[38272,38290],"content":"HttpMessageHandler","needQuote":true,"nodes":[{"content":"HttpMessageHandler","pos":[0,18]}]},{"pos":[38494,38505],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[38722,38731],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[38866,38873],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[38941,38942],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38969,38970],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39060,39067],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[39135,39136],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39163,39164],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39365,39375],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[39470,39478],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[39547,39548],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39575,39576],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39646,39654],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[39723,39724],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39751,39752],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39935,39949],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[40068,40074],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[40141,40142],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40192,40198],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[40258,40259],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40342,40348],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[40415,40416],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40466,40472],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[40532,40533],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40747,40769],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[40917,40923],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[40990,40991],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41041,41047],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[41108,41109]},{"pos":[41164,41170],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[41230,41231],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41328,41334],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[41401,41402],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41452,41458],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[41519,41520]},{"pos":[41575,41581],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[41641,41642],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41887,41918],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[42084,42099],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[42175,42176],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42226,42232],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[42293,42294]},{"pos":[42349,42355],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[42415,42416],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42522,42537],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[42613,42614],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42664,42670],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[42731,42732]},{"pos":[42787,42793],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[42853,42854],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43084,43097],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[43198,43209],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[43281,43282],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43309,43310],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43383,43394],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[43466,43467],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43494,43495],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43670,43679],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[43772,43779],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[43847,43848],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43875,43876],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43945,43952],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[44020,44021],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44048,44049],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44224,44241],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[44350,44365],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[44441,44442],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44469,44470],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44547,44562],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[44638,44639],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44666,44667],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44812,44818],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[44950,44957],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[45127,45147],"content":"DecompressionMethods","needQuote":true,"nodes":[{"content":"DecompressionMethods","pos":[0,20]}]},{"pos":[45322,45332],"content":"System.Net","needQuote":true,"nodes":[{"content":"System.Net","pos":[0,10]}]},{"pos":[45510,45533],"content":"ClientCertificateOption","needQuote":true,"nodes":[{"content":"ClientCertificateOption","pos":[0,23]}]},{"pos":[45844,45869],"content":"X509CertificateCollection","needQuote":true,"nodes":[{"content":"X509CertificateCollection","pos":[0,25]}]},{"pos":[46164,46209],"content":"System.Security.Cryptography.X509Certificates","needQuote":true,"nodes":[{"content":"System.Security.Cryptography.X509Certificates","pos":[0,45]}]},{"pos":[46453,46468],"content":"CookieContainer","needQuote":true,"nodes":[{"content":"CookieContainer","pos":[0,15]}]},{"pos":[46662,46674],"content":"ICredentials","needQuote":true,"nodes":[{"content":"ICredentials","pos":[0,12]}]},{"pos":[46844,46849],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[46990,46995],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[47246,47273],"content":"IDictionary<String, Object>","needQuote":true,"nodes":[{"content":"IDictionary&lt;String, Object&gt;","pos":[0,27],"source":"IDictionary<String, Object>"}]},{"pos":[47559,47570],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[47655,47656],"content":"<","needQuote":true,"nodes":[]},{"pos":[47706,47712],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[47773,47774]},{"pos":[47829,47835],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[47988,47999],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"content":"(Of","pos":[48085,48088]},{"pos":[48145,48151],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[48212,48213]},{"pos":[48268,48274],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[48334,48335],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48605,48630],"content":"IDictionary<TKey, TValue>","needQuote":true,"nodes":[{"content":"IDictionary&lt;TKey, TValue&gt;","pos":[0,25],"source":"IDictionary<TKey, TValue>"}]},{"pos":[48882,48893],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[48957,48958],"content":"<","needQuote":true,"nodes":[]},{"pos":[48985,48989],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[49020,49021]},{"pos":[49053,49059],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[49184,49195],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"content":"(Of","pos":[49260,49263]},{"pos":[49297,49301],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[49332,49333]},{"pos":[49365,49371],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[49403,49404],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49629,49655],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[49836,49845],"content":"IWebProxy","needQuote":true,"nodes":[{"content":"IWebProxy","pos":[0,9]}]},{"pos":[50219,50307],"content":"Func<HttpRequestMessage, X509Certificate2, X509Chain, Security.SslPolicyErrors, Boolean>","needQuote":true,"nodes":[{"content":"Func&lt;HttpRequestMessage, X509Certificate2, X509Chain, Security.SslPolicyErrors, Boolean&gt;","pos":[0,88],"source":"Func<HttpRequestMessage, X509Certificate2, X509Chain, Security.SslPolicyErrors, Boolean>"}]},{"pos":[50933,50937],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[50995,50996],"content":"<","needQuote":true,"nodes":[]},{"pos":[51067,51085],"content":"HttpRequestMessage","needQuote":true,"nodes":[{"content":"HttpRequestMessage","pos":[0,18]}]},{"content":",","pos":[51146,51147]},{"pos":[51251,51267],"content":"X509Certificate2","needQuote":true,"nodes":[{"content":"X509Certificate2","pos":[0,16]}]},{"content":",","pos":[51377,51378]},{"pos":[51475,51484],"content":"X509Chain","needQuote":true,"nodes":[{"content":"X509Chain","pos":[0,9]}]},{"content":",","pos":[51587,51588]},{"pos":[51665,51689],"content":"Security.SslPolicyErrors","needQuote":true,"nodes":[{"content":"Security.SslPolicyErrors","pos":[0,24]}]},{"content":",","pos":[51772,51773]},{"pos":[51829,51836],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[51963,51967],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[52026,52029]},{"pos":[52107,52125],"content":"HttpRequestMessage","needQuote":true,"nodes":[{"content":"HttpRequestMessage","pos":[0,18]}]},{"content":",","pos":[52186,52187]},{"pos":[52291,52307],"content":"X509Certificate2","needQuote":true,"nodes":[{"content":"X509Certificate2","pos":[0,16]}]},{"content":",","pos":[52417,52418]},{"pos":[52515,52524],"content":"X509Chain","needQuote":true,"nodes":[{"content":"X509Chain","pos":[0,9]}]},{"content":",","pos":[52627,52628]},{"pos":[52705,52729],"content":"Security.SslPolicyErrors","needQuote":true,"nodes":[{"content":"Security.SslPolicyErrors","pos":[0,24]}]},{"content":",","pos":[52812,52813]},{"pos":[52869,52876],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[52937,52938],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53453,53482],"content":"Func<T1, T2, T3, T4, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;T1, T2, T3, T4, TResult&gt;","pos":[0,29],"source":"Func<T1, T2, T3, T4, TResult>"}]},{"pos":[53679,53683],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[53720,53721],"content":"<","needQuote":true,"nodes":[]},{"pos":[53748,53750],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[53779,53780]},{"pos":[53812,53814],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[53843,53844]},{"pos":[53876,53878],"content":"T3","needQuote":true,"nodes":[{"content":"T3","pos":[0,2]}]},{"content":",","pos":[53907,53908]},{"pos":[53940,53942],"content":"T4","needQuote":true,"nodes":[{"content":"T4","pos":[0,2]}]},{"content":",","pos":[53971,53972]},{"pos":[54004,54011],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[54110,54114],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[54152,54155]},{"pos":[54189,54191],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[54220,54221]},{"pos":[54253,54255],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[54284,54285]},{"pos":[54317,54319],"content":"T3","needQuote":true,"nodes":[{"content":"T3","pos":[0,2]}]},{"content":",","pos":[54348,54349]},{"pos":[54381,54383],"content":"T4","needQuote":true,"nodes":[{"content":"T4","pos":[0,2]}]},{"content":",","pos":[54412,54413]},{"pos":[54445,54452],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[54485,54486],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54750,54762],"content":"SslProtocols","needQuote":true,"nodes":[{"content":"SslProtocols","pos":[0,12]}]},{"pos":[54973,55003],"content":"System.Security.Authentication","needQuote":true,"nodes":[{"content":"System.Security.Authentication","pos":[0,30]}]},{"pos":[55278,55294],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[55459,55466],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[55534,55535],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55586,55593],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[55654,55655],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55761,55768],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[55836,55837],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55888,55895],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[55956,55957],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56295,56343],"content":"SendAsync(HttpRequestMessage, CancellationToken)","needQuote":true,"nodes":[{"content":"SendAsync(HttpRequestMessage, CancellationToken)","pos":[0,48]}]},{"pos":[56623,56632],"content":"SendAsync","needQuote":true,"nodes":[{"content":"SendAsync","pos":[0,9]}]},{"pos":[56702,56703],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56774,56792],"content":"HttpRequestMessage","needQuote":true,"nodes":[{"content":"HttpRequestMessage","pos":[0,18]}]},{"content":",","pos":[56853,56854]},{"pos":[56930,56947],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[57028,57029],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57192,57201],"content":"SendAsync","needQuote":true,"nodes":[{"content":"SendAsync","pos":[0,9]}]},{"pos":[57271,57272],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57343,57361],"content":"HttpRequestMessage","needQuote":true,"nodes":[{"content":"HttpRequestMessage","pos":[0,18]}]},{"content":",","pos":[57422,57423]},{"pos":[57499,57516],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[57597,57598],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57926,57944],"content":"HttpRequestMessage","needQuote":true,"nodes":[{"content":"HttpRequestMessage","pos":[0,18]}]},{"pos":[58174,58191],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[58480,58505],"content":"Task<HttpResponseMessage>","needQuote":true,"nodes":[{"content":"Task&lt;HttpResponseMessage&gt;","pos":[0,25],"source":"Task<HttpResponseMessage>"}]},{"pos":[58770,58774],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[58848,58849],"content":"<","needQuote":true,"nodes":[]},{"pos":[58921,58940],"content":"HttpResponseMessage","needQuote":true,"nodes":[{"content":"HttpResponseMessage","pos":[0,19]}]},{"pos":[59083,59087],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[59162,59165]},{"pos":[59244,59263],"content":"HttpResponseMessage","needQuote":true,"nodes":[{"content":"HttpResponseMessage","pos":[0,19]}]},{"pos":[59324,59325],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59564,59580],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[59740,59753],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[59950,59954],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[60007,60008],"content":"<","needQuote":true,"nodes":[]},{"pos":[60035,60042],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[60157,60161],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[60215,60218]},{"pos":[60252,60259],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[60292,60293],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60479,60501],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[60678,60699],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Net.Http.HttpClientHandler\n  commentId: T:System.Net.Http.HttpClientHandler\n  id: HttpClientHandler\n  parent: System.Net.Http\n  children:\n  - System.Net.Http.HttpClientHandler.#ctor\n  - System.Net.Http.HttpClientHandler.AllowAutoRedirect\n  - System.Net.Http.HttpClientHandler.AutomaticDecompression\n  - System.Net.Http.HttpClientHandler.CheckCertificateRevocationList\n  - System.Net.Http.HttpClientHandler.ClientCertificateOptions\n  - System.Net.Http.HttpClientHandler.ClientCertificates\n  - System.Net.Http.HttpClientHandler.CookieContainer\n  - System.Net.Http.HttpClientHandler.Credentials\n  - System.Net.Http.HttpClientHandler.DefaultProxyCredentials\n  - System.Net.Http.HttpClientHandler.Dispose(System.Boolean)\n  - System.Net.Http.HttpClientHandler.MaxAutomaticRedirections\n  - System.Net.Http.HttpClientHandler.MaxConnectionsPerServer\n  - System.Net.Http.HttpClientHandler.MaxRequestContentBufferSize\n  - System.Net.Http.HttpClientHandler.MaxResponseHeadersLength\n  - System.Net.Http.HttpClientHandler.PreAuthenticate\n  - System.Net.Http.HttpClientHandler.Properties\n  - System.Net.Http.HttpClientHandler.Proxy\n  - System.Net.Http.HttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  - System.Net.Http.HttpClientHandler.ServerCertificateCustomValidationCallback\n  - System.Net.Http.HttpClientHandler.SslProtocols\n  - System.Net.Http.HttpClientHandler.SupportsAutomaticDecompression\n  - System.Net.Http.HttpClientHandler.SupportsProxy\n  - System.Net.Http.HttpClientHandler.SupportsRedirectConfiguration\n  - System.Net.Http.HttpClientHandler.UseCookies\n  - System.Net.Http.HttpClientHandler.UseDefaultCredentials\n  - System.Net.Http.HttpClientHandler.UseProxy\n  langs:\n  - csharp\n  - vb\n  name: HttpClientHandler\n  fullName: System.Net.Http.HttpClientHandler\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HttpClientHandler\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 77\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>The default message handler used by <xref href=\\\"System.Net.Http.HttpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.  </p>\\n\"\n  syntax:\n    content: 'public class HttpClientHandler : HttpMessageHandler, IDisposable'\n    content.vb: >-\n      Public Class HttpClientHandler\n          Inherits HttpMessageHandler\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  - System.Net.Http.HttpMessageHandler\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Net.Http.HttpMessageHandler.Dispose\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: HttpClientHandler\n- uid: System.Net.Http.HttpClientHandler.#ctor\n  commentId: M:System.Net.Http.HttpClientHandler.#ctor\n  id: '#ctor'\n  parent: System.Net.Http.HttpClientHandler\n  langs:\n  - csharp\n  - vb\n  name: HttpClientHandler()\n  fullName: System.Net.Http.HttpClientHandler.HttpClientHandler()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 79\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Creates an instance of a <xref href=\\\"System.Net.Http.HttpClientHandler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public HttpClientHandler()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClientHandler.HttpClientHandler()\n- uid: System.Net.Http.HttpClientHandler.AllowAutoRedirect\n  commentId: P:System.Net.Http.HttpClientHandler.AllowAutoRedirect\n  id: AllowAutoRedirect\n  parent: System.Net.Http.HttpClientHandler\n  langs:\n  - csharp\n  - vb\n  name: AllowAutoRedirect\n  fullName: System.Net.Http.HttpClientHandler.AllowAutoRedirect\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AllowAutoRedirect\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 80\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Gets or sets a value that indicates whether the handler should follow redirection responses.</p>\\n\"\n  syntax:\n    content: public bool AllowAutoRedirect { get; set; }\n    content.vb: Public Property AllowAutoRedirect As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if the if the handler should follow redirection responses; otherwise <strong>false</strong>. The default value is <strong>true</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClientHandler.AllowAutoRedirect\n- uid: System.Net.Http.HttpClientHandler.AutomaticDecompression\n  commentId: P:System.Net.Http.HttpClientHandler.AutomaticDecompression\n  id: AutomaticDecompression\n  parent: System.Net.Http.HttpClientHandler\n  langs:\n  - csharp\n  - vb\n  name: AutomaticDecompression\n  fullName: System.Net.Http.HttpClientHandler.AutomaticDecompression\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AutomaticDecompression\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 81\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Gets or sets the type of decompression method used by the handler for automatic decompression of the HTTP content response.</p>\\n\"\n  syntax:\n    content: public DecompressionMethods AutomaticDecompression { get; set; }\n    content.vb: Public Property AutomaticDecompression As DecompressionMethods\n    parameters: []\n    return:\n      type: System.Net.DecompressionMethods\n      description: \"\\n<p>Returns <xref href=\\\"System.Net.DecompressionMethods\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The automatic decompression method used by the handler. The default value is <xref href=\\\"System.Net.DecompressionMethods.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClientHandler.AutomaticDecompression\n- uid: System.Net.Http.HttpClientHandler.CheckCertificateRevocationList\n  commentId: P:System.Net.Http.HttpClientHandler.CheckCertificateRevocationList\n  id: CheckCertificateRevocationList\n  parent: System.Net.Http.HttpClientHandler\n  langs:\n  - csharp\n  - vb\n  name: CheckCertificateRevocationList\n  fullName: System.Net.Http.HttpClientHandler.CheckCertificateRevocationList\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CheckCertificateRevocationList\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 82\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  syntax:\n    content: public bool CheckCertificateRevocationList { get; set; }\n    content.vb: Public Property CheckCertificateRevocationList As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClientHandler.CheckCertificateRevocationList\n- uid: System.Net.Http.HttpClientHandler.ClientCertificateOptions\n  commentId: P:System.Net.Http.HttpClientHandler.ClientCertificateOptions\n  id: ClientCertificateOptions\n  parent: System.Net.Http.HttpClientHandler\n  langs:\n  - csharp\n  - vb\n  name: ClientCertificateOptions\n  fullName: System.Net.Http.HttpClientHandler.ClientCertificateOptions\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ClientCertificateOptions\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 83\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Gets or sets a value that indicates if the certificate is automatically picked from the certificate store or if the caller is allowed to pass in a specific client certificate.</p>\\n\"\n  syntax:\n    content: public ClientCertificateOption ClientCertificateOptions { get; set; }\n    content.vb: Public Property ClientCertificateOptions As ClientCertificateOption\n    parameters: []\n    return:\n      type: System.Net.Http.ClientCertificateOption\n      description: \"\\n<p>Returns <xref href=\\\"System.Net.Http.ClientCertificateOption\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The collection of security certificates associated with this handler.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClientHandler.ClientCertificateOptions\n- uid: System.Net.Http.HttpClientHandler.ClientCertificates\n  commentId: P:System.Net.Http.HttpClientHandler.ClientCertificates\n  id: ClientCertificates\n  parent: System.Net.Http.HttpClientHandler\n  langs:\n  - csharp\n  - vb\n  name: ClientCertificates\n  fullName: System.Net.Http.HttpClientHandler.ClientCertificates\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ClientCertificates\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 84\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  syntax:\n    content: public X509CertificateCollection ClientCertificates { get; }\n    content.vb: Public ReadOnly Property ClientCertificates As X509CertificateCollection\n    parameters: []\n    return:\n      type: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: HttpClientHandler.ClientCertificates\n- uid: System.Net.Http.HttpClientHandler.CookieContainer\n  commentId: P:System.Net.Http.HttpClientHandler.CookieContainer\n  id: CookieContainer\n  parent: System.Net.Http.HttpClientHandler\n  langs:\n  - csharp\n  - vb\n  name: CookieContainer\n  fullName: System.Net.Http.HttpClientHandler.CookieContainer\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CookieContainer\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 85\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Gets or sets the cookie container used to store server cookies by the handler.</p>\\n\"\n  syntax:\n    content: public CookieContainer CookieContainer { get; set; }\n    content.vb: Public Property CookieContainer As CookieContainer\n    parameters: []\n    return:\n      type: System.Net.CookieContainer\n      description: \"\\n<p>Returns <xref href=\\\"System.Net.CookieContainer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The cookie container used to store server cookies by the handler.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClientHandler.CookieContainer\n- uid: System.Net.Http.HttpClientHandler.Credentials\n  commentId: P:System.Net.Http.HttpClientHandler.Credentials\n  id: Credentials\n  parent: System.Net.Http.HttpClientHandler\n  langs:\n  - csharp\n  - vb\n  name: Credentials\n  fullName: System.Net.Http.HttpClientHandler.Credentials\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Credentials\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 86\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Gets or sets authentication information used by this handler.</p>\\n\"\n  syntax:\n    content: public ICredentials Credentials { get; set; }\n    content.vb: Public Property Credentials As ICredentials\n    parameters: []\n    return:\n      type: System.Net.ICredentials\n      description: \"\\n<p>Returns <xref href=\\\"System.Net.ICredentials\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The authentication credentials associated with the handler. The default is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClientHandler.Credentials\n- uid: System.Net.Http.HttpClientHandler.DefaultProxyCredentials\n  commentId: P:System.Net.Http.HttpClientHandler.DefaultProxyCredentials\n  id: DefaultProxyCredentials\n  parent: System.Net.Http.HttpClientHandler\n  langs:\n  - csharp\n  - vb\n  name: DefaultProxyCredentials\n  fullName: System.Net.Http.HttpClientHandler.DefaultProxyCredentials\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DefaultProxyCredentials\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 87\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  syntax:\n    content: public ICredentials DefaultProxyCredentials { get; set; }\n    content.vb: Public Property DefaultProxyCredentials As ICredentials\n    parameters: []\n    return:\n      type: System.Net.ICredentials\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClientHandler.DefaultProxyCredentials\n- uid: System.Net.Http.HttpClientHandler.MaxAutomaticRedirections\n  commentId: P:System.Net.Http.HttpClientHandler.MaxAutomaticRedirections\n  id: MaxAutomaticRedirections\n  parent: System.Net.Http.HttpClientHandler\n  langs:\n  - csharp\n  - vb\n  name: MaxAutomaticRedirections\n  fullName: System.Net.Http.HttpClientHandler.MaxAutomaticRedirections\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MaxAutomaticRedirections\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 88\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Gets or sets the maximum number of redirects that the handler follows.</p>\\n\"\n  syntax:\n    content: public int MaxAutomaticRedirections { get; set; }\n    content.vb: Public Property MaxAutomaticRedirections As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>Returns <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The maximum number of redirection responses that the handler follows. The default value is 50.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClientHandler.MaxAutomaticRedirections\n- uid: System.Net.Http.HttpClientHandler.MaxConnectionsPerServer\n  commentId: P:System.Net.Http.HttpClientHandler.MaxConnectionsPerServer\n  id: MaxConnectionsPerServer\n  parent: System.Net.Http.HttpClientHandler\n  langs:\n  - csharp\n  - vb\n  name: MaxConnectionsPerServer\n  fullName: System.Net.Http.HttpClientHandler.MaxConnectionsPerServer\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MaxConnectionsPerServer\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 89\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  syntax:\n    content: public int MaxConnectionsPerServer { get; set; }\n    content.vb: Public Property MaxConnectionsPerServer As Integer\n    parameters: []\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClientHandler.MaxConnectionsPerServer\n- uid: System.Net.Http.HttpClientHandler.MaxRequestContentBufferSize\n  commentId: P:System.Net.Http.HttpClientHandler.MaxRequestContentBufferSize\n  id: MaxRequestContentBufferSize\n  parent: System.Net.Http.HttpClientHandler\n  langs:\n  - csharp\n  - vb\n  name: MaxRequestContentBufferSize\n  fullName: System.Net.Http.HttpClientHandler.MaxRequestContentBufferSize\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MaxRequestContentBufferSize\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 90\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Gets or sets the maximum request content buffer size used by the handler.</p>\\n\"\n  syntax:\n    content: public long MaxRequestContentBufferSize { get; set; }\n    content.vb: Public Property MaxRequestContentBufferSize As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>Returns <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The maximum request content buffer size in bytes. The default value is 2 gigabytes.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClientHandler.MaxRequestContentBufferSize\n- uid: System.Net.Http.HttpClientHandler.MaxResponseHeadersLength\n  commentId: P:System.Net.Http.HttpClientHandler.MaxResponseHeadersLength\n  id: MaxResponseHeadersLength\n  parent: System.Net.Http.HttpClientHandler\n  langs:\n  - csharp\n  - vb\n  name: MaxResponseHeadersLength\n  fullName: System.Net.Http.HttpClientHandler.MaxResponseHeadersLength\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MaxResponseHeadersLength\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 91\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  syntax:\n    content: public int MaxResponseHeadersLength { get; set; }\n    content.vb: Public Property MaxResponseHeadersLength As Integer\n    parameters: []\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClientHandler.MaxResponseHeadersLength\n- uid: System.Net.Http.HttpClientHandler.PreAuthenticate\n  commentId: P:System.Net.Http.HttpClientHandler.PreAuthenticate\n  id: PreAuthenticate\n  parent: System.Net.Http.HttpClientHandler\n  langs:\n  - csharp\n  - vb\n  name: PreAuthenticate\n  fullName: System.Net.Http.HttpClientHandler.PreAuthenticate\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PreAuthenticate\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 92\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Gets or sets a value that indicates whether the handler sends an Authorization header with the request.</p>\\n\"\n  syntax:\n    content: public bool PreAuthenticate { get; set; }\n    content.vb: Public Property PreAuthenticate As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> for the handler to send an HTTP Authorization header with requests after authentication has taken place; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClientHandler.PreAuthenticate\n- uid: System.Net.Http.HttpClientHandler.Properties\n  commentId: P:System.Net.Http.HttpClientHandler.Properties\n  id: Properties\n  parent: System.Net.Http.HttpClientHandler\n  langs:\n  - csharp\n  - vb\n  name: Properties\n  fullName: System.Net.Http.HttpClientHandler.Properties\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Properties\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 93\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  syntax:\n    content: public IDictionary<string, object> Properties { get; }\n    content.vb: Public ReadOnly Property Properties As IDictionary(Of String, Object)\n    parameters: []\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.Object}\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: HttpClientHandler.Properties\n- uid: System.Net.Http.HttpClientHandler.Proxy\n  commentId: P:System.Net.Http.HttpClientHandler.Proxy\n  id: Proxy\n  parent: System.Net.Http.HttpClientHandler\n  langs:\n  - csharp\n  - vb\n  name: Proxy\n  fullName: System.Net.Http.HttpClientHandler.Proxy\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Proxy\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 94\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Gets or sets proxy information used by the handler.</p>\\n\"\n  syntax:\n    content: public IWebProxy Proxy { get; set; }\n    content.vb: Public Property Proxy As IWebProxy\n    parameters: []\n    return:\n      type: System.Net.IWebProxy\n      description: \"\\n<p>Returns <xref href=\\\"System.Net.IWebProxy\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The proxy information used by the handler. The default value is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClientHandler.Proxy\n- uid: System.Net.Http.HttpClientHandler.ServerCertificateCustomValidationCallback\n  commentId: P:System.Net.Http.HttpClientHandler.ServerCertificateCustomValidationCallback\n  id: ServerCertificateCustomValidationCallback\n  parent: System.Net.Http.HttpClientHandler\n  langs:\n  - csharp\n  - vb\n  name: ServerCertificateCustomValidationCallback\n  fullName: System.Net.Http.HttpClientHandler.ServerCertificateCustomValidationCallback\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ServerCertificateCustomValidationCallback\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 95\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  syntax:\n    content: public Func<HttpRequestMessage, X509Certificate2, X509Chain, Security.SslPolicyErrors, bool> ServerCertificateCustomValidationCallback { get; set; }\n    content.vb: Public Property ServerCertificateCustomValidationCallback As Func(Of HttpRequestMessage, X509Certificate2, X509Chain, Security.SslPolicyErrors, Boolean)\n    parameters: []\n    return:\n      type: System.Func{System.Net.Http.HttpRequestMessage,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors,System.Boolean}\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClientHandler.ServerCertificateCustomValidationCallback\n- uid: System.Net.Http.HttpClientHandler.SslProtocols\n  commentId: P:System.Net.Http.HttpClientHandler.SslProtocols\n  id: SslProtocols\n  parent: System.Net.Http.HttpClientHandler\n  langs:\n  - csharp\n  - vb\n  name: SslProtocols\n  fullName: System.Net.Http.HttpClientHandler.SslProtocols\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SslProtocols\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 96\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  syntax:\n    content: public Authentication.SslProtocols SslProtocols { get; set; }\n    content.vb: Public Property SslProtocols As Authentication.SslProtocols\n    parameters: []\n    return:\n      type: System.Security.Authentication.SslProtocols\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClientHandler.SslProtocols\n- uid: System.Net.Http.HttpClientHandler.SupportsAutomaticDecompression\n  commentId: P:System.Net.Http.HttpClientHandler.SupportsAutomaticDecompression\n  id: SupportsAutomaticDecompression\n  parent: System.Net.Http.HttpClientHandler\n  langs:\n  - csharp\n  - vb\n  name: SupportsAutomaticDecompression\n  fullName: System.Net.Http.HttpClientHandler.SupportsAutomaticDecompression\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SupportsAutomaticDecompression\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 97\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Gets a value that indicates whether the handler supports automatic response content decompression.</p>\\n\"\n  syntax:\n    content: public virtual bool SupportsAutomaticDecompression { get; }\n    content.vb: Public Overridable ReadOnly Property SupportsAutomaticDecompression As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if the if the handler supports automatic response content decompression; otherwise <strong>false</strong>. The default value is <strong>true</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: HttpClientHandler.SupportsAutomaticDecompression\n- uid: System.Net.Http.HttpClientHandler.SupportsProxy\n  commentId: P:System.Net.Http.HttpClientHandler.SupportsProxy\n  id: SupportsProxy\n  parent: System.Net.Http.HttpClientHandler\n  langs:\n  - csharp\n  - vb\n  name: SupportsProxy\n  fullName: System.Net.Http.HttpClientHandler.SupportsProxy\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SupportsProxy\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 98\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Gets a value that indicates whether the handler supports proxy settings.</p>\\n\"\n  syntax:\n    content: public virtual bool SupportsProxy { get; }\n    content.vb: Public Overridable ReadOnly Property SupportsProxy As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if the if the handler supports proxy settings; otherwise <strong>false</strong>. The default value is <strong>true</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: HttpClientHandler.SupportsProxy\n- uid: System.Net.Http.HttpClientHandler.SupportsRedirectConfiguration\n  commentId: P:System.Net.Http.HttpClientHandler.SupportsRedirectConfiguration\n  id: SupportsRedirectConfiguration\n  parent: System.Net.Http.HttpClientHandler\n  langs:\n  - csharp\n  - vb\n  name: SupportsRedirectConfiguration\n  fullName: System.Net.Http.HttpClientHandler.SupportsRedirectConfiguration\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SupportsRedirectConfiguration\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 99\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Gets a value that indicates whether the handler supports configuration settings for the <xref href=\\\"System.Net.Http.HttpClientHandler.AllowAutoRedirect\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Net.Http.HttpClientHandler.MaxAutomaticRedirections\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties.</p>\\n\"\n  syntax:\n    content: public virtual bool SupportsRedirectConfiguration { get; }\n    content.vb: Public Overridable ReadOnly Property SupportsRedirectConfiguration As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if the if the handler supports configuration settings for the <xref href=\\\"System.Net.Http.HttpClientHandler.AllowAutoRedirect\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Net.Http.HttpClientHandler.MaxAutomaticRedirections\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties; otherwise <strong>false</strong>. The default value is <strong>true</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: HttpClientHandler.SupportsRedirectConfiguration\n- uid: System.Net.Http.HttpClientHandler.UseCookies\n  commentId: P:System.Net.Http.HttpClientHandler.UseCookies\n  id: UseCookies\n  parent: System.Net.Http.HttpClientHandler\n  langs:\n  - csharp\n  - vb\n  name: UseCookies\n  fullName: System.Net.Http.HttpClientHandler.UseCookies\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UseCookies\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 100\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Gets or sets a value that indicates whether the handler uses the  <xref href=\\\"System.Net.Http.HttpClientHandler.CookieContainer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property  to store server cookies and uses these cookies when sending requests.</p>\\n\"\n  syntax:\n    content: public bool UseCookies { get; set; }\n    content.vb: Public Property UseCookies As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if the if the handler supports uses the  <xref href=\\\"System.Net.Http.HttpClientHandler.CookieContainer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property  to store server cookies and uses these cookies when sending requests; otherwise <strong>false</strong>. The default value is <strong>true</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClientHandler.UseCookies\n- uid: System.Net.Http.HttpClientHandler.UseDefaultCredentials\n  commentId: P:System.Net.Http.HttpClientHandler.UseDefaultCredentials\n  id: UseDefaultCredentials\n  parent: System.Net.Http.HttpClientHandler\n  langs:\n  - csharp\n  - vb\n  name: UseDefaultCredentials\n  fullName: System.Net.Http.HttpClientHandler.UseDefaultCredentials\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UseDefaultCredentials\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 101\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Gets or sets a value that controls whether default credentials are sent with requests by the handler.</p>\\n\"\n  syntax:\n    content: public bool UseDefaultCredentials { get; set; }\n    content.vb: Public Property UseDefaultCredentials As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if the default credentials are used; otherwise <strong>false</strong>. The default value is <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClientHandler.UseDefaultCredentials\n- uid: System.Net.Http.HttpClientHandler.UseProxy\n  commentId: P:System.Net.Http.HttpClientHandler.UseProxy\n  id: UseProxy\n  parent: System.Net.Http.HttpClientHandler\n  langs:\n  - csharp\n  - vb\n  name: UseProxy\n  fullName: System.Net.Http.HttpClientHandler.UseProxy\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UseProxy\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 102\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Gets or sets a value that indicates whether the handler uses a proxy for requests. </p>\\n\"\n  syntax:\n    content: public bool UseProxy { get; set; }\n    content.vb: Public Property UseProxy As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if the handler should use a proxy for requests; otherwise <strong>false</strong>. The default value is <strong>true</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClientHandler.UseProxy\n- uid: System.Net.Http.HttpClientHandler.Dispose(System.Boolean)\n  commentId: M:System.Net.Http.HttpClientHandler.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Net.Http.HttpClientHandler\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Net.Http.HttpClientHandler.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 103\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.Net.Http.HttpClientHandler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and optionally disposes of the managed resources.</p>\\n\"\n  syntax:\n    content: protected override void Dispose(bool disposing)\n    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to releases only unmanaged resources.</p>\\n\"\n  overridden: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  nameWithType: HttpClientHandler.Dispose(Boolean)\n- uid: System.Net.Http.HttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  commentId: M:System.Net.Http.HttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClientHandler\n  langs:\n  - csharp\n  - vb\n  name: SendAsync(HttpRequestMessage, CancellationToken)\n  fullName: System.Net.Http.HttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SendAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 104\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Creates an instance of  <xref href=\\\"System.Net.Http.HttpResponseMessage\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> based on the information provided in the <xref href=\\\"System.Net.Http.HttpRequestMessage\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> as an operation that will not block.</p>\\n\"\n  syntax:\n    content: protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\n    content.vb: Protected Overrides Function SendAsync(request As HttpRequestMessage, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)\n    parameters:\n    - id: request\n      type: System.Net.Http.HttpRequestMessage\n      description: \"\\n<p>The HTTP request message.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>A cancellation token to cancel the operation.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  overridden: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>request</em> was <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  nameWithType: HttpClientHandler.SendAsync(HttpRequestMessage, CancellationToken)\nreferences:\n- uid: System.Net.Http\n  isExternal: false\n  name: System.Net.Http\n  fullName: System.Net.Http\n  commentId: N:System.Net.Http\n  nameWithType: System.Net.Http\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Net.Http.HttpMessageHandler\n  parent: System.Net.Http\n  isExternal: false\n  name: HttpMessageHandler\n  fullName: System.Net.Http.HttpMessageHandler\n  commentId: T:System.Net.Http.HttpMessageHandler\n  nameWithType: HttpMessageHandler\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Net.Http.HttpMessageHandler.Dispose\n  parent: System.Net.Http.HttpMessageHandler\n  isExternal: false\n  name: Dispose()\n  fullName: System.Net.Http.HttpMessageHandler.Dispose()\n  spec.csharp:\n  - uid: System.Net.Http.HttpMessageHandler.Dispose\n    name: Dispose\n    fullName: System.Net.Http.HttpMessageHandler.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Net.Http.HttpMessageHandler.Dispose\n    name: Dispose\n    fullName: System.Net.Http.HttpMessageHandler.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Net.Http.HttpMessageHandler.Dispose\n  nameWithType: HttpMessageHandler.Dispose()\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Net.DecompressionMethods\n  parent: System.Net\n  isExternal: false\n  name: DecompressionMethods\n  fullName: System.Net.DecompressionMethods\n  commentId: T:System.Net.DecompressionMethods\n  nameWithType: DecompressionMethods\n- uid: System.Net\n  isExternal: false\n  name: System.Net\n  fullName: System.Net\n  commentId: N:System.Net\n  nameWithType: System.Net\n- uid: System.Net.Http.ClientCertificateOption\n  parent: System.Net.Http\n  isExternal: false\n  name: ClientCertificateOption\n  fullName: System.Net.Http.ClientCertificateOption\n  commentId: T:System.Net.Http.ClientCertificateOption\n  nameWithType: ClientCertificateOption\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509CertificateCollection\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  commentId: T:System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  nameWithType: X509CertificateCollection\n- uid: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: System.Security.Cryptography.X509Certificates\n  fullName: System.Security.Cryptography.X509Certificates\n  commentId: N:System.Security.Cryptography.X509Certificates\n  nameWithType: System.Security.Cryptography.X509Certificates\n- uid: System.Net.CookieContainer\n  isExternal: false\n  name: CookieContainer\n  fullName: System.Net.CookieContainer\n  commentId: T:System.Net.CookieContainer\n  nameWithType: CookieContainer\n- uid: System.Net.ICredentials\n  parent: System.Net\n  isExternal: false\n  name: ICredentials\n  fullName: System.Net.ICredentials\n  commentId: T:System.Net.ICredentials\n  nameWithType: ICredentials\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  commentId: T:System.Int64\n  nameWithType: Int64\n- uid: System.Collections.Generic.IDictionary{System.String,System.Object}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IDictionary`2\n  name: IDictionary<String, Object>\n  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>\n  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)\n  name.vb: IDictionary(Of String, Object)\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}\n  nameWithType: IDictionary<String, Object>\n  nameWithType.vb: IDictionary(Of String, Object)\n- uid: System.Collections.Generic.IDictionary`2\n  isExternal: false\n  name: IDictionary<TKey, TValue>\n  fullName: System.Collections.Generic.IDictionary<TKey, TValue>\n  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)\n  name.vb: IDictionary(Of TKey, TValue)\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IDictionary`2\n  nameWithType: IDictionary<TKey, TValue>\n  nameWithType.vb: IDictionary(Of TKey, TValue)\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n  nameWithType: System.Collections.Generic\n- uid: System.Net.IWebProxy\n  isExternal: false\n  name: IWebProxy\n  fullName: System.Net.IWebProxy\n  commentId: T:System.Net.IWebProxy\n  nameWithType: IWebProxy\n- uid: System.Func{System.Net.Http.HttpRequestMessage,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors,System.Boolean}\n  parent: System\n  definition: System.Func`5\n  name: Func<HttpRequestMessage, X509Certificate2, X509Chain, Security.SslPolicyErrors, Boolean>\n  fullName: System.Func<System.Net.Http.HttpRequestMessage, System.Security.Cryptography.X509Certificates.X509Certificate2, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors, System.Boolean>\n  fullname.vb: System.Func(Of System.Net.Http.HttpRequestMessage, System.Security.Cryptography.X509Certificates.X509Certificate2, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors, System.Boolean)\n  name.vb: Func(Of HttpRequestMessage, X509Certificate2, X509Chain, Security.SslPolicyErrors, Boolean)\n  spec.csharp:\n  - uid: System.Func`5\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Net.Http.HttpRequestMessage\n    name: HttpRequestMessage\n    fullName: System.Net.Http.HttpRequestMessage\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate2\n    name: X509Certificate2\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate2\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.X509Certificates.X509Chain\n    name: X509Chain\n    fullName: System.Security.Cryptography.X509Certificates.X509Chain\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Net.Security.SslPolicyErrors\n    name: Security.SslPolicyErrors\n    fullName: System.Net.Security.SslPolicyErrors\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`5\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Net.Http.HttpRequestMessage\n    name: HttpRequestMessage\n    fullName: System.Net.Http.HttpRequestMessage\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate2\n    name: X509Certificate2\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate2\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.X509Certificates.X509Chain\n    name: X509Chain\n    fullName: System.Security.Cryptography.X509Certificates.X509Chain\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Net.Security.SslPolicyErrors\n    name: Security.SslPolicyErrors\n    fullName: System.Net.Security.SslPolicyErrors\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Func{System.Net.Http.HttpRequestMessage,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors,System.Boolean}\n  nameWithType: Func<HttpRequestMessage, X509Certificate2, X509Chain, Security.SslPolicyErrors, Boolean>\n  nameWithType.vb: Func(Of HttpRequestMessage, X509Certificate2, X509Chain, Security.SslPolicyErrors, Boolean)\n- uid: System.Func`5\n  isExternal: false\n  name: Func<T1, T2, T3, T4, TResult>\n  fullName: System.Func<T1, T2, T3, T4, TResult>\n  fullname.vb: System.Func(Of T1, T2, T3, T4, TResult)\n  name.vb: Func(Of T1, T2, T3, T4, TResult)\n  spec.csharp:\n  - uid: System.Func`5\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: T3\n    fullName: T3\n  - name: ', '\n    fullName: ', '\n  - name: T4\n    fullName: T4\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`5\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: T3\n    fullName: T3\n  - name: ', '\n    fullName: ', '\n  - name: T4\n    fullName: T4\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func`5\n  nameWithType: Func<T1, T2, T3, T4, TResult>\n  nameWithType.vb: Func(Of T1, T2, T3, T4, TResult)\n- uid: System.Security.Authentication.SslProtocols\n  parent: System.Security.Authentication\n  isExternal: false\n  name: SslProtocols\n  fullName: System.Security.Authentication.SslProtocols\n  commentId: T:System.Security.Authentication.SslProtocols\n  nameWithType: SslProtocols\n- uid: System.Security.Authentication\n  isExternal: false\n  name: System.Security.Authentication\n  fullName: System.Security.Authentication\n  commentId: N:System.Security.Authentication\n  nameWithType: System.Security.Authentication\n- uid: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)\n  parent: System.Net.Http.HttpMessageHandler\n  isExternal: true\n  name: Dispose(Boolean)\n  fullName: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)\n  spec.csharp:\n  - uid: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Net.Http.HttpMessageHandler.Dispose\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Net.Http.HttpMessageHandler.Dispose\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)\n  nameWithType: HttpMessageHandler.Dispose(Boolean)\n- uid: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpMessageHandler\n  isExternal: true\n  name: SendAsync(HttpRequestMessage, CancellationToken)\n  fullName: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken)\n  spec.csharp:\n  - uid: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n    name: SendAsync\n    fullName: System.Net.Http.HttpMessageHandler.SendAsync\n  - name: (\n    fullName: (\n  - uid: System.Net.Http.HttpRequestMessage\n    name: HttpRequestMessage\n    fullName: System.Net.Http.HttpRequestMessage\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n    name: SendAsync\n    fullName: System.Net.Http.HttpMessageHandler.SendAsync\n  - name: (\n    fullName: (\n  - uid: System.Net.Http.HttpRequestMessage\n    name: HttpRequestMessage\n    fullName: System.Net.Http.HttpRequestMessage\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  nameWithType: HttpMessageHandler.SendAsync(HttpRequestMessage, CancellationToken)\n- uid: System.Net.Http.HttpRequestMessage\n  parent: System.Net.Http\n  isExternal: false\n  name: HttpRequestMessage\n  fullName: System.Net.Http.HttpRequestMessage\n  commentId: T:System.Net.Http.HttpRequestMessage\n  nameWithType: HttpRequestMessage\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  fullName: System.Threading.CancellationToken\n  commentId: T:System.Threading.CancellationToken\n  nameWithType: CancellationToken\n- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<HttpResponseMessage>\n  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>\n  fullname.vb: System.Threading.Tasks.Task(Of System.Net.Http.HttpResponseMessage)\n  name.vb: Task(Of HttpResponseMessage)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Net.Http.HttpResponseMessage\n    name: HttpResponseMessage\n    fullName: System.Net.Http.HttpResponseMessage\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Net.Http.HttpResponseMessage\n    name: HttpResponseMessage\n    fullName: System.Net.Http.HttpResponseMessage\n  - name: )\n    fullName: )\n  commentId: T:System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n  nameWithType: Task<HttpResponseMessage>\n  nameWithType.vb: Task(Of HttpResponseMessage)\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  commentId: N:System.Threading\n  nameWithType: System.Threading\n- uid: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Threading.Tasks.Task`1\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}