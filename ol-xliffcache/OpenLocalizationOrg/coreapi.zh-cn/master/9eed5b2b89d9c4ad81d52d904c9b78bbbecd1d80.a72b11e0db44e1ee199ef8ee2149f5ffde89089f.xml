{"nodes":[{"pos":[320,374],"content":"ConditionalWeakTable<TKey, TValue>.CreateValueCallback","needQuote":true,"nodes":[{"content":"ConditionalWeakTable&lt;TKey, TValue&gt;.CreateValueCallback","pos":[0,54],"source":"ConditionalWeakTable<TKey, TValue>.CreateValueCallback"}]},{"content":"\\n&lt;p&gt;The key that belongs to the value to create.&lt;/p&gt;\\n","pos":[1350,1405],"source":"\\n<p>The key that belongs to the value to create.</p>\\n"},{"content":"\\n&lt;p&gt;An instance of a reference type that represents the value to attach to the specified key.&lt;/p&gt;\\n","pos":[1462,1562],"source":"\\n<p>An instance of a reference type that represents the value to attach to the specified key.</p>\\n"},{"pos":[2483,2514],"content":"System.Runtime.CompilerServices","needQuote":true,"nodes":[{"content":"System.Runtime.CompilerServices","pos":[0,31]}]},{"pos":[2892,2907],"content":"GetMethodInfo()","needQuote":true,"nodes":[{"content":"GetMethodInfo()","pos":[0,15]}]},{"pos":[3076,3089],"content":"GetMethodInfo","needQuote":true,"nodes":[{"content":"GetMethodInfo","pos":[0,13]}]},{"pos":[3174,3175],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[3202,3203],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[3310,3323],"content":"GetMethodInfo","needQuote":true,"nodes":[{"content":"GetMethodInfo","pos":[0,13]}]},{"pos":[3408,3409],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[3436,3437],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[3649,3653],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[3761,3767],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[3945,3968],"content":"GetMethodInfo(Delegate)","needQuote":true,"nodes":[{"content":"GetMethodInfo(Delegate)","pos":[0,23]}]},{"pos":[4169,4182],"content":"GetMethodInfo","needQuote":true,"nodes":[{"content":"GetMethodInfo","pos":[0,13]}]},{"pos":[4267,4268],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[4320,4328],"content":"Delegate","needQuote":true,"nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[4390,4391],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[4515,4528],"content":"GetMethodInfo","needQuote":true,"nodes":[{"content":"GetMethodInfo","pos":[0,13]}]},{"pos":[4613,4614],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[4666,4674],"content":"Delegate","needQuote":true,"nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[4736,4737],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[5023,5050],"content":"RuntimeReflectionExtensions","needQuote":true,"nodes":[{"content":"RuntimeReflectionExtensions","pos":[0,27]}]},{"pos":[5254,5258],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[5339,5345],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[5441,5458],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]}],"content":"items:\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback\n  commentId: T:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback\n  id: ConditionalWeakTable`2.CreateValueCallback\n  parent: System.Runtime.CompilerServices\n  children: []\n  langs:\n  - csharp\n  - vb\n  name: ConditionalWeakTable<TKey, TValue>.CreateValueCallback\n  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>.CreateValueCallback\n  type: Delegate\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CreateValueCallback\n    path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs\n    startLine: 278\n  assemblies:\n  - System.Runtime\n  namespace: System.Runtime.CompilerServices\n  summary: \"\\n<p>Represents a method that creates a non-default value to add as part of a key/value pair to a <xref href=\\\"System.Runtime.CompilerServices.ConditionalWeakTable`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n  syntax:\n    content: public delegate TValue CreateValueCallback(TKey key);\n    content.vb: Public Delegate Function CreateValueCallback(key As TKey) As TValue\n    parameters:\n    - id: key\n      type: '{TKey}'\n      description: \"\\n<p>The key that belongs to the value to create.</p>\\n\"\n    return:\n      type: '{TValue}'\n      description: \"\\n<p>An instance of a reference type that represents the value to attach to the specified key.</p>\\n\"\n  seealso:\n  - type: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)\n    commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)\n  modifiers.csharp:\n  - public\n  - delegate\n  modifiers.vb:\n  - Public\n  - Delegate\n  fullName.vb: System.Runtime.CompilerServices.ConditionalWeakTable(Of TKey, TValue).CreateValueCallback\n  name.vb: ConditionalWeakTable(Of TKey, TValue).CreateValueCallback\n  nameWithType: ConditionalWeakTable<TKey, TValue>.CreateValueCallback\n  extensionMethods:\n  - System.Delegate.System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n  nameWithType.vb: ConditionalWeakTable(Of TKey, TValue).CreateValueCallback\nreferences:\n- uid: System.Runtime.CompilerServices\n  isExternal: false\n  name: System.Runtime.CompilerServices\n  fullName: System.Runtime.CompilerServices\n  nameWithType: System.Runtime.CompilerServices\n  commentId: N:System.Runtime.CompilerServices\n- uid: System.Delegate.System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n  parent: System.Reflection.RuntimeReflectionExtensions\n  definition: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  name: GetMethodInfo()\n  fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo()\n  spec.csharp:\n  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n    name: GetMethodInfo\n    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n    name: GetMethodInfo\n    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: RuntimeReflectionExtensions.GetMethodInfo()\n  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n- uid: '{TKey}'\n  definition: TKey\n  name: TKey\n  fullName: TKey\n  nameWithType: TKey\n  commentId: '!:TKey'\n- uid: '{TValue}'\n  definition: TValue\n  name: TValue\n  fullName: TValue\n  nameWithType: TValue\n  commentId: '!:TValue'\n- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  isExternal: true\n  name: GetMethodInfo(Delegate)\n  fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  spec.csharp:\n  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n    name: GetMethodInfo\n    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n  - name: (\n    fullName: (\n  - uid: System.Delegate\n    name: Delegate\n    fullName: System.Delegate\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n    name: GetMethodInfo\n    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n  - name: (\n    fullName: (\n  - uid: System.Delegate\n    name: Delegate\n    fullName: System.Delegate\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n- uid: System.Reflection.RuntimeReflectionExtensions\n  parent: System.Reflection\n  isExternal: false\n  name: RuntimeReflectionExtensions\n  fullName: System.Reflection.RuntimeReflectionExtensions\n  nameWithType: RuntimeReflectionExtensions\n  commentId: T:System.Reflection.RuntimeReflectionExtensions\n- uid: TKey\n  isExternal: false\n  name: TKey\n  fullName: TKey\n  nameWithType: TKey\n- uid: TValue\n  isExternal: false\n  name: TValue\n  fullName: TValue\n  nameWithType: TValue\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n"}