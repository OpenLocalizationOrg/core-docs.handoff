{"nodes":[{"pos":[686,701],"content":"PhysicalAddress","needQuote":true,"nodes":[{"content":"PhysicalAddress","pos":[0,15]}]},{"pos":[1934,1938],"content":"None","needQuote":true,"nodes":[{"content":"None","pos":[0,4]}]},{"pos":[3220,3243],"content":"PhysicalAddress(Byte[])","needQuote":true,"nodes":[{"content":"PhysicalAddress(Byte[])","pos":[0,23]}]},{"pos":[4790,4804],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this instance and the specified instance contain the same address; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[5885,6023],"source":"\\n<p>\\n<strong>true</strong> if this instance and the specified instance contain the same address; otherwise <strong>false</strong>.</p>\\n"},{"pos":[6466,6483],"content":"GetAddressBytes()","needQuote":true,"nodes":[{"content":"GetAddressBytes()","pos":[0,17]}]},{"pos":[7676,7689],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;An integer hash value.&lt;/p&gt;\\n","pos":[8412,8445],"source":"\\n<p>An integer hash value.</p>\\n"},{"pos":[8892,8905],"content":"Parse(String)","needQuote":true,"nodes":[{"content":"Parse(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;address&lt;/em&gt; parameter contains an illegal hardware address.","pos":[10559,10632],"source":"\\n<p>The <em>address</em> parameter contains an illegal hardware address."},{"content":"&lt;/p&gt;\\n&lt;p&gt;This exception also occurs if the &lt;em&gt;address&lt;/em&gt; parameter contains a string in the incorrect format.&lt;/p&gt;\\n","pos":[10633,10751],"source":" </p>\\n<p>This exception also occurs if the <em>address</em> parameter contains a string in the incorrect format.</p>\\n"},{"pos":[11117,11127],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[12310,12339],"content":"System.Net.NetworkInformation","needQuote":true,"nodes":[{"content":"System.Net.NetworkInformation","pos":[0,29]}]},{"pos":[12539,12545],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12732,12754],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[12902,12908],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12975,12976],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13026,13032],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13093,13094]},{"pos":[13149,13155],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13215,13216],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13313,13319],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13386,13387],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13437,13443],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13504,13505]},{"pos":[13560,13566],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13626,13627],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13872,13903],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[14069,14084],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[14160,14161],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14211,14217],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14278,14279]},{"pos":[14334,14340],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14400,14401],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14507,14522],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[14598,14599],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14649,14655],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14716,14717]},{"pos":[14772,14778],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14838,14839],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15065,15074],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[15167,15174],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[15242,15243],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15270,15271],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15340,15347],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[15415,15416],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15443,15444],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15619,15636],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[15745,15760],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[15836,15837],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15864,15865],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15942,15957],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[16033,16034],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16061,16062],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16207,16213],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[16399,16414],"content":"PhysicalAddress","needQuote":true,"nodes":[{"content":"PhysicalAddress","pos":[0,15]}]},{"pos":[16595,16601],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[16721,16725],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[16784,16786]},{"pos":[16849,16853],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[16911,16913],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[17074,17088],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[17207,17213],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17280,17281],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17331,17337],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17397,17398],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17481,17487],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17554,17555],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17605,17611],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17671,17672],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17845,17852],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[18018,18031],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[18132,18143],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[18215,18216],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18243,18244],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18317,18328],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[18400,18401],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18428,18429],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18589,18594],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[18736,18742],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[18902,18912],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[19007,19015],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[19084,19085],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19112,19113],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19183,19191],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[19260,19261],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19288,19289],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19453,19468],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]}],"content":"items:\n- uid: System.Net.NetworkInformation.PhysicalAddress\n  commentId: T:System.Net.NetworkInformation.PhysicalAddress\n  id: PhysicalAddress\n  parent: System.Net.NetworkInformation\n  children:\n  - System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])\n  - System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)\n  - System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes\n  - System.Net.NetworkInformation.PhysicalAddress.GetHashCode\n  - System.Net.NetworkInformation.PhysicalAddress.None\n  - System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)\n  - System.Net.NetworkInformation.PhysicalAddress.ToString\n  langs:\n  - csharp\n  - vb\n  name: PhysicalAddress\n  fullName: System.Net.NetworkInformation.PhysicalAddress\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PhysicalAddress\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 330\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Provides the Media Access Control (MAC) address for a network interface (adapter).</p>\\n\"\n  syntax:\n    content: public class PhysicalAddress\n    content.vb: Public Class PhysicalAddress\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: PhysicalAddress\n- uid: System.Net.NetworkInformation.PhysicalAddress.None\n  commentId: F:System.Net.NetworkInformation.PhysicalAddress.None\n  id: None\n  parent: System.Net.NetworkInformation.PhysicalAddress\n  langs:\n  - csharp\n  - vb\n  name: None\n  fullName: System.Net.NetworkInformation.PhysicalAddress.None\n  type: Field\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: None\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 332\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Returns a new <xref href=\\\"System.Net.NetworkInformation.PhysicalAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance with a zero length address. This field is read-only.</p>\\n\"\n  syntax:\n    content: public static readonly PhysicalAddress None\n    content.vb: Public Shared ReadOnly None As PhysicalAddress\n    return:\n      type: System.Net.NetworkInformation.PhysicalAddress\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: PhysicalAddress.None\n- uid: System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])\n  commentId: M:System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Net.NetworkInformation.PhysicalAddress\n  langs:\n  - csharp\n  - vb\n  name: PhysicalAddress(Byte[])\n  fullName: System.Net.NetworkInformation.PhysicalAddress.PhysicalAddress(System.Byte[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 333\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.NetworkInformation.PhysicalAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. </p>\\n\"\n  syntax:\n    content: public PhysicalAddress(byte[] address)\n    content.vb: Public Sub New(address As Byte())\n    parameters:\n    - id: address\n      type: System.Byte[]\n      description: \"\\n<p>A <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array containing the address.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Net.NetworkInformation.PhysicalAddress.PhysicalAddress(System.Byte())\n  name.vb: PhysicalAddress(Byte())\n  nameWithType: PhysicalAddress.PhysicalAddress(Byte[])\n  nameWithType.vb: PhysicalAddress.PhysicalAddress(Byte())\n- uid: System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)\n  commentId: M:System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Net.NetworkInformation.PhysicalAddress\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 334\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Net.NetworkInformation.PhysicalAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object comparand)\n    content.vb: Public Overrides Function Equals(comparand As Object) As Boolean\n    parameters:\n    - id: comparand\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Net.NetworkInformation.PhysicalAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  to compare to the current instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this instance and the specified instance contain the same address; otherwise <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: PhysicalAddress.Equals(Object)\n- uid: System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes\n  commentId: M:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes\n  id: GetAddressBytes\n  parent: System.Net.NetworkInformation.PhysicalAddress\n  langs:\n  - csharp\n  - vb\n  name: GetAddressBytes()\n  fullName: System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetAddressBytes\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 335\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Returns the address of the current instance.</p>\\n\"\n  syntax:\n    content: public byte[] GetAddressBytes()\n    content.vb: Public Function GetAddressBytes As Byte()\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array containing the address.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: PhysicalAddress.GetAddressBytes()\n- uid: System.Net.NetworkInformation.PhysicalAddress.GetHashCode\n  commentId: M:System.Net.NetworkInformation.PhysicalAddress.GetHashCode\n  id: GetHashCode\n  parent: System.Net.NetworkInformation.PhysicalAddress\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Net.NetworkInformation.PhysicalAddress.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 336\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Returns the hash value of a physical address.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer hash value.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: PhysicalAddress.GetHashCode()\n- uid: System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)\n  commentId: M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Net.NetworkInformation.PhysicalAddress\n  langs:\n  - csharp\n  - vb\n  name: Parse(String)\n  fullName: System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Parse\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 337\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Parses the specified <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and stores its contents as the address bytes of the <xref href=\\\"System.Net.NetworkInformation.PhysicalAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> returned by this method.</p>\\n\"\n  syntax:\n    content: public static PhysicalAddress Parse(string address)\n    content.vb: Public Shared Function Parse(address As String) As PhysicalAddress\n    parameters:\n    - id: address\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the address that will be used to initialize the <xref href=\\\"System.Net.NetworkInformation.PhysicalAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance returned by this method.</p>\\n\"\n    return:\n      type: System.Net.NetworkInformation.PhysicalAddress\n      description: \"\\n<p>A <xref href=\\\"System.Net.NetworkInformation.PhysicalAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance with the specified address.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The <em>address</em> parameter contains an illegal hardware address. </p>\\n<p>This exception also occurs if the <em>address</em> parameter contains a string in the incorrect format.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: PhysicalAddress.Parse(String)\n- uid: System.Net.NetworkInformation.PhysicalAddress.ToString\n  commentId: M:System.Net.NetworkInformation.PhysicalAddress.ToString\n  id: ToString\n  parent: System.Net.NetworkInformation.PhysicalAddress\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Net.NetworkInformation.PhysicalAddress.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs\n    startLine: 338\n  assemblies:\n  - System.Net.NetworkInformation\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Returns the <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representation of the address of this instance.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the address contained in this instance.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: PhysicalAddress.ToString()\nreferences:\n- uid: System.Net.NetworkInformation\n  isExternal: false\n  name: System.Net.NetworkInformation\n  fullName: System.Net.NetworkInformation\n  commentId: N:System.Net.NetworkInformation\n  nameWithType: System.Net.NetworkInformation\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Net.NetworkInformation.PhysicalAddress\n  parent: System.Net.NetworkInformation\n  isExternal: false\n  name: PhysicalAddress\n  fullName: System.Net.NetworkInformation.PhysicalAddress\n  commentId: T:System.Net.NetworkInformation.PhysicalAddress\n  nameWithType: PhysicalAddress\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n"}