{"nodes":[{"pos":[691,699],"content":"Registry","needQuote":true,"nodes":[{"content":"Registry","pos":[0,8]}]},{"pos":[2255,2266],"content":"ClassesRoot","needQuote":true,"nodes":[{"content":"ClassesRoot","pos":[0,11]}]},{"pos":[3348,3361],"content":"CurrentConfig","needQuote":true,"nodes":[{"content":"CurrentConfig","pos":[0,13]}]},{"pos":[4453,4464],"content":"CurrentUser","needQuote":true,"nodes":[{"content":"CurrentUser","pos":[0,11]}]},{"pos":[5508,5520],"content":"LocalMachine","needQuote":true,"nodes":[{"content":"LocalMachine","pos":[0,12]}]},{"pos":[6577,6592],"content":"PerformanceData","needQuote":true,"nodes":[{"content":"PerformanceData","pos":[0,15]}]},{"pos":[7640,7645],"content":"Users","needQuote":true,"nodes":[{"content":"Users","pos":[0,5]}]},{"pos":[8771,8803],"content":"GetValue(String, String, Object)","needQuote":true,"nodes":[{"content":"GetValue(String, String, Object)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The name of the name/value pair.&lt;/p&gt;\\n","pos":[10056,10099],"source":"\\n<p>The name of the name/value pair.</p>\\n"},{"content":"\\n&lt;p&gt;The value to return if &lt;em&gt;valueName&lt;/em&gt; does not exist.&lt;/p&gt;\\n","pos":[10170,10238],"source":"\\n<p>The value to return if <em>valueName</em> does not exist.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;null&lt;/strong&gt; if the subkey specified by &lt;em&gt;keyName&lt;/em&gt; does not exist; otherwise, the value associated with &lt;em&gt;valueName&lt;/em&gt;, or &lt;em&gt;defaultValue&lt;/em&gt; if &lt;em&gt;valueName&lt;/em&gt; is not found.&lt;/p&gt;\\n","pos":[10298,10510],"source":"\\n<p>\\n<strong>null</strong> if the subkey specified by <em>keyName</em> does not exist; otherwise, the value associated with <em>valueName</em>, or <em>defaultValue</em> if <em>valueName</em> is not found.</p>\\n"},{"content":"\\n&lt;p&gt;The user does not have the permissions required to read from the registry key.","pos":[10639,10722],"source":"\\n<p>The user does not have the permissions required to read from the registry key."},{"content":"&lt;/p&gt;\\n","pos":[10723,10729],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keyName&lt;/em&gt; does not begin with a valid registry root.","pos":[11084,11150],"source":"\\n<p>\\n<em>keyName</em> does not begin with a valid registry root."},{"content":"&lt;/p&gt;\\n","pos":[11151,11157],"source":" </p>\\n"},{"pos":[11856,11888],"content":"SetValue(String, String, Object)","needQuote":true,"nodes":[{"content":"SetValue(String, String, Object)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The name of the name/value pair.&lt;/p&gt;\\n","pos":[12911,12954],"source":"\\n<p>The name of the name/value pair.</p>\\n"},{"content":"\\n&lt;p&gt;The value to be stored.&lt;/p&gt;\\n","pos":[13018,13052],"source":"\\n<p>The value to be stored.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[13171,13218],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[13219,13225],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keyName&lt;/em&gt; does not begin with a valid registry root.","pos":[13322,13388],"source":"\\n<p>\\n<em>keyName</em> does not begin with a valid registry root."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;keyName&lt;/em&gt; is longer than the maximum length allowed (255 characters).&lt;/p&gt;\\n","pos":[13389,13495],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>keyName</em> is longer than the maximum length allowed (255 characters).</p>\\n"},{"content":"\\n&lt;p&gt;The user does not have the permissions required to create or modify registry keys.","pos":[13913,14000],"source":"\\n<p>The user does not have the permissions required to create or modify registry keys."},{"content":"&lt;/p&gt;\\n","pos":[14001,14007],"source":" </p>\\n"},{"pos":[14681,14732],"content":"SetValue(String, String, Object, RegistryValueKind)","needQuote":true,"nodes":[{"content":"SetValue(String, String, Object, RegistryValueKind)","pos":[0,51]}]},{"content":"\\n&lt;p&gt;The name of the name/value pair.&lt;/p&gt;\\n","pos":[15959,16002],"source":"\\n<p>The name of the name/value pair.</p>\\n"},{"content":"\\n&lt;p&gt;The value to be stored.&lt;/p&gt;\\n","pos":[16066,16100],"source":"\\n<p>The value to be stored.</p>\\n"},{"content":"\\n&lt;p&gt;The registry data type to use when storing the data.&lt;/p&gt;\\n","pos":[16188,16251],"source":"\\n<p>The registry data type to use when storing the data.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[16370,16417],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[16418,16424],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keyName&lt;/em&gt; does not begin with a valid registry root.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;keyName&lt;/em&gt; is longer than the maximum length allowed (255 characters).&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The type of &lt;em&gt;value&lt;/em&gt; did not match the registry data type specified by &lt;em&gt;valueKind&lt;/em&gt;, therefore the data could not be converted properly.","pos":[16521,16858],"source":"\\n<p>\\n<em>keyName</em> does not begin with a valid registry root.</p>\\n<p>-or-</p>\\n<p>\\n<em>keyName</em> is longer than the maximum length allowed (255 characters).</p>\\n<p>-or- </p>\\n<p>The type of <em>value</em> did not match the registry data type specified by <em>valueKind</em>, therefore the data could not be converted properly."},{"content":"&lt;/p&gt;\\n","pos":[16859,16865],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The user does not have the permissions required to create or modify registry keys.","pos":[17333,17420],"source":"\\n<p>The user does not have the permissions required to create or modify registry keys."},{"content":"&lt;/p&gt;\\n","pos":[17421,17427],"source":" </p>\\n"},{"pos":[17777,17792],"content":"Microsoft.Win32","needQuote":true,"nodes":[{"content":"Microsoft.Win32","pos":[0,15]}]},{"pos":[17950,17956],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18116,18126],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[18221,18229],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[18298,18299],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18326,18327],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18397,18405],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[18474,18475],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18502,18503],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18686,18700],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[18819,18825],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[18892,18893],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18943,18949],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19009,19010],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19093,19099],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19166,19167],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19217,19223],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19283,19284],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19498,19520],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[19668,19674],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19741,19742],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19792,19798],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19859,19860]},{"pos":[19915,19921],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19981,19982],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20079,20085],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20152,20153],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20203,20209],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20270,20271]},{"pos":[20326,20332],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20392,20393],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20638,20669],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[20835,20850],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[20926,20927],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20977,20983],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21044,21045]},{"pos":[21100,21106],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21166,21167],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21273,21288],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[21364,21365],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21415,21421],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21482,21483]},{"pos":[21538,21544],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21604,21605],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21835,21848],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[21949,21960],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[22032,22033],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22060,22061],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22134,22145],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[22217,22218],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22245,22246],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22421,22430],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[22523,22530],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[22598,22599],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22626,22627],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22696,22703],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[22771,22772],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22799,22800],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22975,22992],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[23101,23116],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[23192,23193],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23220,23221],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23298,23313],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[23389,23390],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23417,23418],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23563,23569],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[23723,23734],"content":"RegistryKey","needQuote":true,"nodes":[{"content":"RegistryKey","pos":[0,11]}]},{"pos":[23912,23918],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[24092,24109],"content":"RegistryValueKind","needQuote":true,"nodes":[{"content":"RegistryValueKind","pos":[0,17]}]},{"pos":[24308,24325],"content":"SecurityException","needQuote":true,"nodes":[{"content":"SecurityException","pos":[0,17]}]},{"pos":[24532,24543],"content":"IOException","needQuote":true,"nodes":[{"content":"IOException","pos":[0,11]}]},{"pos":[24720,24737],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[24913,24934],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[25145,25172],"content":"UnauthorizedAccessException","needQuote":true,"nodes":[{"content":"UnauthorizedAccessException","pos":[0,27]}]}],"content":"items:\n- uid: Microsoft.Win32.Registry\n  commentId: T:Microsoft.Win32.Registry\n  id: Registry\n  parent: Microsoft.Win32\n  children:\n  - Microsoft.Win32.Registry.ClassesRoot\n  - Microsoft.Win32.Registry.CurrentConfig\n  - Microsoft.Win32.Registry.CurrentUser\n  - Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)\n  - Microsoft.Win32.Registry.LocalMachine\n  - Microsoft.Win32.Registry.PerformanceData\n  - Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)\n  - Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)\n  - Microsoft.Win32.Registry.Users\n  langs:\n  - csharp\n  - vb\n  name: Registry\n  fullName: Microsoft.Win32.Registry\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/Microsoft/Win32/Registry.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Registry\n    path: src/mscorlib/src/Microsoft/Win32/Registry.cs\n    startLine: 17\n  assemblies:\n  - Microsoft.Win32.Registry\n  namespace: Microsoft.Win32\n  summary: \"\\n<p>Provides <xref href=\\\"Microsoft.Win32.RegistryKey\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects that represent the root keys in the Windows registry, and <strong>static</strong> methods to access key/value pairs.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public class Registry\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Class Registry\n  seealso:\n  - type: Microsoft.Win32.RegistryHive\n    commentId: T:Microsoft.Win32.RegistryHive\n  - type: Microsoft.Win32.RegistryKey\n    commentId: T:Microsoft.Win32.RegistryKey\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Registry\n- uid: Microsoft.Win32.Registry.ClassesRoot\n  commentId: F:Microsoft.Win32.Registry.ClassesRoot\n  id: ClassesRoot\n  parent: Microsoft.Win32.Registry\n  langs:\n  - csharp\n  - vb\n  name: ClassesRoot\n  fullName: Microsoft.Win32.Registry.ClassesRoot\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/Microsoft/Win32/Registry.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ClassesRoot\n    path: src/mscorlib/src/Microsoft/Win32/Registry.cs\n    startLine: 43\n  assemblies:\n  - Microsoft.Win32.Registry\n  namespace: Microsoft.Win32\n  summary: \"\\n<p>Defines the types (or classes) of documents and the properties associated with those types. This field reads the Windows registry base key HKEY_CLASSES_ROOT.</p>\\n\"\n  syntax:\n    content: public static readonly RegistryKey ClassesRoot\n    content.vb: Public Shared ReadOnly ClassesRoot As RegistryKey\n    return:\n      type: Microsoft.Win32.RegistryKey\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Registry.ClassesRoot\n- uid: Microsoft.Win32.Registry.CurrentConfig\n  commentId: F:Microsoft.Win32.Registry.CurrentConfig\n  id: CurrentConfig\n  parent: Microsoft.Win32.Registry\n  langs:\n  - csharp\n  - vb\n  name: CurrentConfig\n  fullName: Microsoft.Win32.Registry.CurrentConfig\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/Microsoft/Win32/Registry.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CurrentConfig\n    path: src/mscorlib/src/Microsoft/Win32/Registry.cs\n    startLine: 64\n  assemblies:\n  - Microsoft.Win32.Registry\n  namespace: Microsoft.Win32\n  summary: \"\\n<p>Contains configuration information pertaining to the hardware that is not specific to the user. This field reads the Windows registry base key HKEY_CURRENT_CONFIG.</p>\\n\"\n  syntax:\n    content: public static readonly RegistryKey CurrentConfig\n    content.vb: Public Shared ReadOnly CurrentConfig As RegistryKey\n    return:\n      type: Microsoft.Win32.RegistryKey\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Registry.CurrentConfig\n- uid: Microsoft.Win32.Registry.CurrentUser\n  commentId: F:Microsoft.Win32.Registry.CurrentUser\n  id: CurrentUser\n  parent: Microsoft.Win32.Registry\n  langs:\n  - csharp\n  - vb\n  name: CurrentUser\n  fullName: Microsoft.Win32.Registry.CurrentUser\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/Microsoft/Win32/Registry.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CurrentUser\n    path: src/mscorlib/src/Microsoft/Win32/Registry.cs\n    startLine: 29\n  assemblies:\n  - Microsoft.Win32.Registry\n  namespace: Microsoft.Win32\n  summary: \"\\n<p>Contains information about the current user preferences. This field reads the Windows registry base key HKEY_CURRENT_USER </p>\\n\"\n  syntax:\n    content: public static readonly RegistryKey CurrentUser\n    content.vb: Public Shared ReadOnly CurrentUser As RegistryKey\n    return:\n      type: Microsoft.Win32.RegistryKey\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Registry.CurrentUser\n- uid: Microsoft.Win32.Registry.LocalMachine\n  commentId: F:Microsoft.Win32.Registry.LocalMachine\n  id: LocalMachine\n  parent: Microsoft.Win32.Registry\n  langs:\n  - csharp\n  - vb\n  name: LocalMachine\n  fullName: Microsoft.Win32.Registry.LocalMachine\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/Microsoft/Win32/Registry.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LocalMachine\n    path: src/mscorlib/src/Microsoft/Win32/Registry.cs\n    startLine: 36\n  assemblies:\n  - Microsoft.Win32.Registry\n  namespace: Microsoft.Win32\n  summary: \"\\n<p>Contains the configuration data for the local machine. This field reads the Windows registry base key HKEY_LOCAL_MACHINE.</p>\\n\"\n  syntax:\n    content: public static readonly RegistryKey LocalMachine\n    content.vb: Public Shared ReadOnly LocalMachine As RegistryKey\n    return:\n      type: Microsoft.Win32.RegistryKey\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Registry.LocalMachine\n- uid: Microsoft.Win32.Registry.PerformanceData\n  commentId: F:Microsoft.Win32.Registry.PerformanceData\n  id: PerformanceData\n  parent: Microsoft.Win32.Registry\n  langs:\n  - csharp\n  - vb\n  name: PerformanceData\n  fullName: Microsoft.Win32.Registry.PerformanceData\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/Microsoft/Win32/Registry.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PerformanceData\n    path: src/mscorlib/src/Microsoft/Win32/Registry.cs\n    startLine: 57\n  assemblies:\n  - Microsoft.Win32.Registry\n  namespace: Microsoft.Win32\n  summary: \"\\n<p>Contains performance information for software components. This field reads the Windows registry base key HKEY_PERFORMANCE_DATA.</p>\\n\"\n  syntax:\n    content: public static readonly RegistryKey PerformanceData\n    content.vb: Public Shared ReadOnly PerformanceData As RegistryKey\n    return:\n      type: Microsoft.Win32.RegistryKey\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Registry.PerformanceData\n- uid: Microsoft.Win32.Registry.Users\n  commentId: F:Microsoft.Win32.Registry.Users\n  id: Users\n  parent: Microsoft.Win32.Registry\n  langs:\n  - csharp\n  - vb\n  name: Users\n  fullName: Microsoft.Win32.Registry.Users\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/Microsoft/Win32/Registry.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Users\n    path: src/mscorlib/src/Microsoft/Win32/Registry.cs\n    startLine: 50\n  assemblies:\n  - Microsoft.Win32.Registry\n  namespace: Microsoft.Win32\n  summary: \"\\n<p>Contains information about the default user configuration. This field reads the Windows registry base key HKEY_USERS.</p>\\n\"\n  syntax:\n    content: public static readonly RegistryKey Users\n    content.vb: Public Shared ReadOnly Users As RegistryKey\n    return:\n      type: Microsoft.Win32.RegistryKey\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Registry.Users\n- uid: Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)\n  commentId: M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)\n  id: GetValue(System.String,System.String,System.Object)\n  parent: Microsoft.Win32.Registry\n  langs:\n  - csharp\n  - vb\n  name: GetValue(String, String, Object)\n  fullName: Microsoft.Win32.Registry.GetValue(System.String, System.String, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/Microsoft/Win32/Registry.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetValue\n    path: src/mscorlib/src/Microsoft/Win32/Registry.cs\n    startLine: 135\n  assemblies:\n  - Microsoft.Win32.Registry\n  namespace: Microsoft.Win32\n  summary: \"\\n<p>Retrieves the value associated with the specified name, in the specified registry key. If the name is not found in the specified key, returns a default value that you provide, or <strong>null</strong> if the specified key does not exist. </p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static object GetValue(string keyName, string valueName, object defaultValue)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function GetValue(keyName As String, valueName As String, defaultValue As Object) As Object\n    parameters:\n    - id: keyName\n      type: System.String\n      description: \"\\n<p>The full registry path of the key, beginning with a valid registry root, such as \\\"HKEY_CURRENT_USER\\\".</p>\\n\"\n    - id: valueName\n      type: System.String\n      description: \"\\n<p>The name of the name/value pair.</p>\\n\"\n    - id: defaultValue\n      type: System.Object\n      description: \"\\n<p>The value to return if <em>valueName</em> does not exist.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>\\n<strong>null</strong> if the subkey specified by <em>keyName</em> does not exist; otherwise, the value associated with <em>valueName</em>, or <em>defaultValue</em> if <em>valueName</em> is not found.</p>\\n\"\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The user does not have the permissions required to read from the registry key. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>The <xref href=\\\"Microsoft.Win32.RegistryKey\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the specified value has been marked for deletion. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>keyName</em> does not begin with a valid registry root. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.RegistryPermission\n    commentId: T:System.Security.Permissions.RegistryPermission\n  - type: System.Security.Permissions.EnvironmentPermission\n    commentId: T:System.Security.Permissions.EnvironmentPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Registry.GetValue(String, String, Object)\n- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)\n  commentId: M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)\n  id: SetValue(System.String,System.String,System.Object)\n  parent: Microsoft.Win32.Registry\n  langs:\n  - csharp\n  - vb\n  name: SetValue(String, String, Object)\n  fullName: Microsoft.Win32.Registry.SetValue(System.String, System.String, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/Microsoft/Win32/Registry.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetValue\n    path: src/mscorlib/src/Microsoft/Win32/Registry.cs\n    startLine: 152\n  assemblies:\n  - Microsoft.Win32.Registry\n  namespace: Microsoft.Win32\n  summary: \"\\n<p>Sets the specified name/value pair on the specified registry key. If the specified key does not exist, it is created.</p>\\n\"\n  syntax:\n    content: public static void SetValue(string keyName, string valueName, object value)\n    content.vb: Public Shared Sub SetValue(keyName As String, valueName As String, value As Object)\n    parameters:\n    - id: keyName\n      type: System.String\n      description: \"\\n<p>The full registry path of the key, beginning with a valid registry root, such as \\\"HKEY_CURRENT_USER\\\".</p>\\n\"\n    - id: valueName\n      type: System.String\n      description: \"\\n<p>The name of the name/value pair.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The value to be stored.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>keyName</em> does not begin with a valid registry root. </p>\\n<p>-or-</p>\\n<p>\\n<em>keyName</em> is longer than the maximum length allowed (255 characters).</p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>The <xref href=\\\"Microsoft.Win32.RegistryKey\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only, and thus cannot be written to; for example, it is a root-level node. </p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The user does not have the permissions required to create or modify registry keys. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.RegistryPermission\n    commentId: T:System.Security.Permissions.RegistryPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Registry.SetValue(String, String, Object)\n- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)\n  commentId: M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)\n  id: SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)\n  parent: Microsoft.Win32.Registry\n  langs:\n  - csharp\n  - vb\n  name: SetValue(String, String, Object, RegistryValueKind)\n  fullName: Microsoft.Win32.Registry.SetValue(System.String, System.String, System.Object, Microsoft.Win32.RegistryValueKind)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/Microsoft/Win32/Registry.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetValue\n    path: src/mscorlib/src/Microsoft/Win32/Registry.cs\n    startLine: 156\n  assemblies:\n  - Microsoft.Win32.Registry\n  namespace: Microsoft.Win32\n  summary: \"\\n<p>Sets the name/value pair on the specified registry key, using the specified registry data type. If the specified key does not exist, it is created.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static void SetValue(string keyName, string valueName, object value, RegistryValueKind valueKind)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Sub SetValue(keyName As String, valueName As String, value As Object, valueKind As RegistryValueKind)\n    parameters:\n    - id: keyName\n      type: System.String\n      description: \"\\n<p>The full registry path of the key, beginning with a valid registry root, such as \\\"HKEY_CURRENT_USER\\\".</p>\\n\"\n    - id: valueName\n      type: System.String\n      description: \"\\n<p>The name of the name/value pair.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The value to be stored.</p>\\n\"\n    - id: valueKind\n      type: Microsoft.Win32.RegistryValueKind\n      description: \"\\n<p>The registry data type to use when storing the data.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>keyName</em> does not begin with a valid registry root.</p>\\n<p>-or-</p>\\n<p>\\n<em>keyName</em> is longer than the maximum length allowed (255 characters).</p>\\n<p>-or- </p>\\n<p>The type of <em>value</em> did not match the registry data type specified by <em>valueKind</em>, therefore the data could not be converted properly. </p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>The <xref href=\\\"Microsoft.Win32.RegistryKey\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only, and thus cannot be written to; for example, it is a root-level node, or the key has not been opened with write access. </p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The user does not have the permissions required to create or modify registry keys. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.RegistryPermission\n    commentId: T:System.Security.Permissions.RegistryPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Registry.SetValue(String, String, Object, RegistryValueKind)\nreferences:\n- uid: Microsoft.Win32\n  isExternal: false\n  name: Microsoft.Win32\n  fullName: Microsoft.Win32\n  nameWithType: Microsoft.Win32\n  commentId: N:Microsoft.Win32\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: Microsoft.Win32.RegistryKey\n  parent: Microsoft.Win32\n  isExternal: false\n  name: RegistryKey\n  fullName: Microsoft.Win32.RegistryKey\n  nameWithType: RegistryKey\n  commentId: T:Microsoft.Win32.RegistryKey\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: Microsoft.Win32.RegistryValueKind\n  parent: Microsoft.Win32\n  isExternal: false\n  name: RegistryValueKind\n  fullName: Microsoft.Win32.RegistryValueKind\n  nameWithType: RegistryValueKind\n  commentId: T:Microsoft.Win32.RegistryValueKind\n- uid: System.Security.SecurityException\n  isExternal: false\n  name: SecurityException\n  fullName: System.Security.SecurityException\n  nameWithType: SecurityException\n  commentId: T:System.Security.SecurityException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  fullName: System.IO.IOException\n  nameWithType: IOException\n  commentId: T:System.IO.IOException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.UnauthorizedAccessException\n  parent: System\n  isExternal: false\n  name: UnauthorizedAccessException\n  fullName: System.UnauthorizedAccessException\n  nameWithType: UnauthorizedAccessException\n  commentId: T:System.UnauthorizedAccessException\n"}