{"nodes":[{"pos":[2831,2837],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[4717,4734],"content":"CompareTo(Single)","needQuote":true,"nodes":[{"content":"CompareTo(Single)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;A single-precision floating-point number to compare.","pos":[5559,5616],"source":"\\n<p>A single-precision floating-point number to compare."},{"content":"&lt;/p&gt;\\n","pos":[5617,5623],"source":" </p>\\n"},{"pos":[7309,7323],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;An object to compare with this instance.","pos":[7976,8021],"source":"\\n<p>An object to compare with this instance."},{"content":"&lt;/p&gt;\\n","pos":[8022,8028],"source":" </p>\\n"},{"pos":[8780,8794],"content":"Equals(Single)","needQuote":true,"nodes":[{"content":"Equals(Single)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;An object to compare with this instance.&lt;/p&gt;\\n","pos":[9518,9569],"source":"\\n<p>An object to compare with this instance.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;obj&lt;/em&gt; is equal to this instance; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9630,9742],"source":"\\n<p>\\n<strong>true</strong> if <em>obj</em> is equal to this instance; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[10279,10292],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[10945,10990],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[11350,11368],"content":"IsInfinity(Single)","needQuote":true,"nodes":[{"content":"IsInfinity(Single)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;A single-precision floating-point number.","pos":[12169,12215],"source":"\\n<p>A single-precision floating-point number."},{"content":"&lt;/p&gt;\\n","pos":[12216,12222],"source":" </p>\\n"},{"pos":[13302,13315],"content":"IsNaN(Single)","needQuote":true,"nodes":[{"content":"IsNaN(Single)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A single-precision floating-point number.","pos":[14302,14348],"source":"\\n<p>A single-precision floating-point number."},{"content":"&lt;/p&gt;\\n","pos":[14349,14355],"source":" </p>\\n"},{"pos":[15016,15042],"content":"IsNegativeInfinity(Single)","needQuote":true,"nodes":[{"content":"IsNegativeInfinity(Single)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;A single-precision floating-point number.","pos":[15863,15909],"source":"\\n<p>A single-precision floating-point number."},{"content":"&lt;/p&gt;\\n","pos":[15910,15916],"source":" </p>\\n"},{"pos":[16933,16959],"content":"IsPositiveInfinity(Single)","needQuote":true,"nodes":[{"content":"IsPositiveInfinity(Single)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;A single-precision floating-point number.","pos":[17780,17826],"source":"\\n<p>A single-precision floating-point number."},{"content":"&lt;/p&gt;\\n","pos":[17827,17833],"source":" </p>\\n"},{"pos":[18871,18895],"content":"Equality(Single, Single)","needQuote":true,"nodes":[{"content":"Equality(Single, Single)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[19729,19767],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[19831,19870],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[19931,20047],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[20424,20451],"content":"GreaterThan(Single, Single)","needQuote":true,"nodes":[{"content":"GreaterThan(Single, Single)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[21389,21427],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[21491,21530],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is greater than &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[21591,21709],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[22110,22144],"content":"GreaterThanOrEqual(Single, Single)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual(Single, Single)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[23112,23150],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[23214,23253],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is greater than or equal to &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[23314,23444],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is greater than or equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[23828,23854],"content":"Inequality(Single, Single)","needQuote":true,"nodes":[{"content":"Inequality(Single, Single)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[24697,24735],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[24799,24838],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; are not equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[24899,25019],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[25389,25413],"content":"LessThan(Single, Single)","needQuote":true,"nodes":[{"content":"LessThan(Single, Single)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[26344,26382],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[26446,26485],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is less than &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[26546,26661],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is less than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[27050,27081],"content":"LessThanOrEqual(Single, Single)","needQuote":true,"nodes":[{"content":"LessThanOrEqual(Single, Single)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[28040,28078],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[28142,28181],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; is less than or equal to &lt;em&gt;right&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[28242,28369],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> is less than or equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[28684,28697],"content":"Parse(String)","needQuote":true,"nodes":[{"content":"Parse(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A string that contains a number to convert.","pos":[29359,29407],"source":"\\n<p>A string that contains a number to convert."},{"content":"&lt;/p&gt;\\n","pos":[29408,29414],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A single-precision floating-point number equivalent to the numeric value or symbol specified in &lt;em&gt;s&lt;/em&gt;.&lt;/p&gt;\\n","pos":[29474,29592],"source":"\\n<p>A single-precision floating-point number equivalent to the numeric value or symbol specified in <em>s</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[29711,29754],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[29755,29761],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; does not represent a number in a valid format.","pos":[29854,29918],"source":"\\n<p>\\n<em>s</em> does not represent a number in a valid format."},{"content":"&lt;/p&gt;\\n","pos":[29919,29925],"source":" </p>\\n"},{"pos":[30742,30769],"content":"Parse(String, NumberStyles)","needQuote":true,"nodes":[{"content":"Parse(String, NumberStyles)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;A string that contains a number to convert.","pos":[31530,31578],"source":"\\n<p>A string that contains a number to convert."},{"content":"&lt;/p&gt;\\n","pos":[31579,31585],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A single-precision floating-point number that is equivalent to the numeric value or symbol specified in &lt;em&gt;s&lt;/em&gt;.&lt;/p&gt;\\n","pos":[32106,32232],"source":"\\n<p>A single-precision floating-point number that is equivalent to the numeric value or symbol specified in <em>s</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[32351,32394],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[32395,32401],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is not a number in a valid format.","pos":[32494,32546],"source":"\\n<p>\\n<em>s</em> is not a number in a valid format."},{"content":"&lt;/p&gt;\\n","pos":[32547,32553],"source":" </p>\\n"},{"pos":[34113,34157],"content":"Parse(String, NumberStyles, IFormatProvider)","needQuote":true,"nodes":[{"content":"Parse(String, NumberStyles, IFormatProvider)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;A string that contains a number to convert.","pos":[35025,35073],"source":"\\n<p>A string that contains a number to convert."},{"content":"&lt;/p&gt;\\n","pos":[35074,35080],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information about &lt;em&gt;s&lt;/em&gt;.","pos":[35617,35703],"source":"\\n<p>An object that supplies culture-specific formatting information about <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[35704,35710],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A single-precision floating-point number equivalent to the numeric value or symbol specified in &lt;em&gt;s&lt;/em&gt;.&lt;/p&gt;\\n","pos":[35770,35888],"source":"\\n<p>A single-precision floating-point number equivalent to the numeric value or symbol specified in <em>s</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[36007,36050],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[36051,36057],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; does not represent a numeric value.","pos":[36150,36203],"source":"\\n<p>\\n<em>s</em> does not represent a numeric value."},{"content":"&lt;/p&gt;\\n","pos":[36204,36210],"source":" </p>\\n"},{"pos":[37431,37461],"content":"Parse(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"Parse(String, IFormatProvider)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;A string that contains a number to convert.","pos":[38241,38289],"source":"\\n<p>A string that contains a number to convert."},{"content":"&lt;/p&gt;\\n","pos":[38290,38296],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information about &lt;em&gt;s&lt;/em&gt;.","pos":[38372,38458],"source":"\\n<p>An object that supplies culture-specific formatting information about <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[38459,38465],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A single-precision floating-point number equivalent to the numeric value or symbol specified in &lt;em&gt;s&lt;/em&gt;.&lt;/p&gt;\\n","pos":[38525,38643],"source":"\\n<p>A single-precision floating-point number equivalent to the numeric value or symbol specified in <em>s</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[38762,38805],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[38806,38812],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; does not represent a number in a valid format.","pos":[38905,38969],"source":"\\n<p>\\n<em>s</em> does not represent a number in a valid format."},{"content":"&lt;/p&gt;\\n","pos":[38970,38976],"source":" </p>\\n"},{"pos":[40038,40067],"content":"IComparable.CompareTo(Object)","needQuote":true,"nodes":[{"content":"IComparable.CompareTo(Object)","pos":[0,29]}]},{"pos":[41183,41209],"content":"IConvertible.GetTypeCode()","needQuote":true,"nodes":[{"content":"IConvertible.GetTypeCode()","pos":[0,26]}]},{"pos":[42294,42333],"content":"IConvertible.ToBoolean(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToBoolean(IFormatProvider)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[43196,43233],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the value of the current instance is not zero; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[43294,43413],"source":"\\n<p>\\n<strong>true</strong> if the value of the current instance is not zero; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[43963,43999],"content":"IConvertible.ToByte(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToByte(IFormatProvider)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[44841,44878],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[45607,45643],"content":"IConvertible.ToChar(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToChar(IFormatProvider)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[46498,46535],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"content":"\\n&lt;p&gt;This conversion is not supported.","pos":[46593,46631],"source":"\\n<p>This conversion is not supported."},{"content":"No value is returned.&lt;/p&gt;\\n","pos":[46632,46659],"source":" No value is returned.</p>\\n"},{"content":"\\n&lt;p&gt;In all cases.&lt;/p&gt;\\n","pos":[46776,46800],"source":"\\n<p>In all cases.</p>\\n"},{"pos":[47350,47390],"content":"IConvertible.ToDateTime(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToDateTime(IFormatProvider)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[48268,48305],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"content":"\\n&lt;p&gt;This conversion is not supported.","pos":[48367,48405],"source":"\\n<p>This conversion is not supported."},{"content":"No value is returned.&lt;/p&gt;\\n","pos":[48406,48433],"source":" No value is returned.</p>\\n"},{"content":"\\n&lt;p&gt;In all cases.&lt;/p&gt;\\n","pos":[48550,48574],"source":"\\n<p>In all cases.</p>\\n"},{"pos":[49137,49176],"content":"IConvertible.ToDecimal(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToDecimal(IFormatProvider)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[50042,50079],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[50832,50870],"content":"IConvertible.ToDouble(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToDouble(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[51728,51765],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[52509,52546],"content":"IConvertible.ToInt16(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToInt16(IFormatProvider)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[53396,53433],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[54172,54209],"content":"IConvertible.ToInt32(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToInt32(IFormatProvider)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[55059,55096],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[55835,55872],"content":"IConvertible.ToInt64(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToInt64(IFormatProvider)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[56720,56757],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[57496,57533],"content":"IConvertible.ToSByte(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToSByte(IFormatProvider)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[58383,58420],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[59162,59200],"content":"IConvertible.ToSingle(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToSingle(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[60057,60094],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the current instance, unchanged.&lt;/p&gt;\\n","pos":[60154,60210],"source":"\\n<p>The value of the current instance, unchanged.</p>\\n"},{"pos":[60792,60834],"content":"IConvertible.ToType(Type, IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToType(Type, IFormatProvider)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;An object that supplies information about the format of the returned value.&lt;/p&gt;\\n","pos":[61916,62002],"source":"\\n<p>An object that supplies information about the format of the returned value.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the current instance, converted to &lt;em&gt;type&lt;/em&gt;.&lt;/p&gt;\\n","pos":[62062,62135],"source":"\\n<p>The value of the current instance, converted to <em>type</em>.</p>\\n"},{"pos":[62709,62747],"content":"IConvertible.ToUInt16(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToUInt16(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[63604,63641],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[64388,64426],"content":"IConvertible.ToUInt32(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToUInt32(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[65284,65321],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[66068,66106],"content":"IConvertible.ToUInt64(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToUInt64(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;This parameter is ignored.&lt;/p&gt;\\n","pos":[66962,66999],"source":"\\n<p>This parameter is ignored.</p>\\n"},{"pos":[67600,67610],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The string representation of the value of this instance.&lt;/p&gt;\\n","pos":[68298,68365],"source":"\\n<p>The string representation of the value of this instance.</p>\\n"},{"pos":[68903,68928],"content":"ToString(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(IFormatProvider)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[69760,69829],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[69830,69836],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of the value of this instance as specified by &lt;em&gt;provider&lt;/em&gt;.&lt;/p&gt;\\n","pos":[69896,69997],"source":"\\n<p>The string representation of the value of this instance as specified by <em>provider</em>.</p>\\n"},{"pos":[70527,70543],"content":"ToString(String)","needQuote":true,"nodes":[{"content":"ToString(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A numeric format string.&lt;/p&gt;\\n","pos":[71305,71340],"source":"\\n<p>A numeric format string.</p>\\n"},{"content":"\\n&lt;p&gt;The string representation of the value of this instance as specified by &lt;em&gt;format&lt;/em&gt;.&lt;/p&gt;\\n","pos":[71400,71499],"source":"\\n<p>The string representation of the value of this instance as specified by <em>format</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is invalid.","pos":[71606,71640],"source":"\\n<p>\\n<em>format</em> is invalid."},{"content":"&lt;/p&gt;\\n","pos":[71641,71647],"source":" </p>\\n"},{"pos":[72166,72199],"content":"ToString(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(String, IFormatProvider)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;A numeric format string.&lt;/p&gt;\\n","pos":[73079,73114],"source":"\\n<p>A numeric format string.</p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[73190,73259],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[73260,73266],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of the value of this instance as specified by &lt;em&gt;format&lt;/em&gt; and &lt;em&gt;provider&lt;/em&gt;.&lt;/p&gt;\\n","pos":[73326,73447],"source":"\\n<p>The string representation of the value of this instance as specified by <em>format</em> and <em>provider</em>.</p>\\n"},{"pos":[74215,74274],"content":"TryParse(String, NumberStyles, IFormatProvider, out Single)","needQuote":true,"nodes":[{"content":"TryParse(String, NumberStyles, IFormatProvider, out Single)","pos":[0,59]}]},{"content":"\\n&lt;p&gt;A string representing a number to convert.","pos":[75284,75331],"source":"\\n<p>A string representing a number to convert."},{"content":"&lt;/p&gt;\\n","pos":[75332,75338],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information about &lt;em&gt;s&lt;/em&gt;.","pos":[75857,75943],"source":"\\n<p>An object that supplies culture-specific formatting information about <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[75944,75950],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;s&lt;/em&gt; was converted successfully; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[76994,77105],"source":"\\n<p>\\n<strong>true</strong> if <em>s</em> was converted successfully; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[78390,78418],"content":"TryParse(String, out Single)","needQuote":true,"nodes":[{"content":"TryParse(String, out Single)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;A string representing a number to convert.","pos":[79222,79269],"source":"\\n<p>A string representing a number to convert."},{"content":"&lt;/p&gt;\\n","pos":[79270,79276],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;s&lt;/em&gt; was converted successfully; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[80137,80248],"source":"\\n<p>\\n<strong>true</strong> if <em>s</em> was converted successfully; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[80878,80886],"content":"MinValue","needQuote":true,"nodes":[{"content":"MinValue","pos":[0,8]}]},{"pos":[81880,81887],"content":"Epsilon","needQuote":true,"nodes":[{"content":"Epsilon","pos":[0,7]}]},{"pos":[82812,82820],"content":"MaxValue","needQuote":true,"nodes":[{"content":"MaxValue","pos":[0,8]}]},{"pos":[83838,83854],"content":"PositiveInfinity","needQuote":true,"nodes":[{"content":"PositiveInfinity","pos":[0,16]}]},{"pos":[85060,85076],"content":"NegativeInfinity","needQuote":true,"nodes":[{"content":"NegativeInfinity","pos":[0,16]}]},{"pos":[86245,86248],"content":"NaN","needQuote":true,"nodes":[{"content":"NaN","pos":[0,3]}]},{"pos":[87063,87069],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[87205,87216],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[87411,87430],"content":"IComparable<Single>","needQuote":true,"nodes":[{"content":"IComparable&lt;Single&gt;","pos":[0,19],"source":"IComparable<Single>"}]},{"pos":[87618,87629],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[87673,87674],"content":"<","needQuote":true,"nodes":[]},{"pos":[87724,87730],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[87863,87874],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"content":"(Of","pos":[87919,87922]},{"pos":[87979,87985],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[88045,88046],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88262,88274],"content":"IConvertible","needQuote":true,"nodes":[{"content":"IConvertible","pos":[0,12]}]},{"pos":[88470,88488],"content":"IEquatable<Single>","needQuote":true,"nodes":[{"content":"IEquatable&lt;Single&gt;","pos":[0,18],"source":"IEquatable<Single>"}]},{"pos":[88672,88682],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[88725,88726],"content":"<","needQuote":true,"nodes":[]},{"pos":[88776,88782],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[88914,88924],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[88968,88971]},{"pos":[89028,89034],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[89094,89095],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89308,89320],"content":"IFormattable","needQuote":true,"nodes":[{"content":"IFormattable","pos":[0,12]}]},{"pos":[89525,89547],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[89695,89701],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[89768,89769],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89819,89825],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[89886,89887]},{"pos":[89942,89948],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[90008,90009],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90106,90112],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[90179,90180],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90230,90236],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[90297,90298]},{"pos":[90353,90359],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[90419,90420],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90665,90696],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[90862,90877],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[90953,90954],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91004,91010],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[91071,91072]},{"pos":[91127,91133],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[91193,91194],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91300,91315],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[91391,91392],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91442,91448],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[91509,91510]},{"pos":[91565,91571],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[91631,91632],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91858,91867],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[91960,91967],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[92035,92036],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92063,92064],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92133,92140],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[92208,92209],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92236,92237],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92380,92394],"content":"IComparable<T>","needQuote":true,"nodes":[{"content":"IComparable&lt;T&gt;","pos":[0,14],"source":"IComparable<T>"}]},{"pos":[92553,92564],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[92608,92609],"content":"<","needQuote":true,"nodes":[]},{"pos":[92636,92637],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[92737,92748],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"content":"(Of","pos":[92793,92796]},{"pos":[92830,92831],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[92858,92859],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93035,93048],"content":"IEquatable<T>","needQuote":true,"nodes":[{"content":"IEquatable&lt;T&gt;","pos":[0,13],"source":"IEquatable<T>"}]},{"pos":[93203,93213],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[93256,93257],"content":"<","needQuote":true,"nodes":[]},{"pos":[93284,93285],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[93384,93394],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[93438,93441]},{"pos":[93475,93476],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[93503,93504],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93688,93694],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[93940,93957],"content":"CompareTo(Single)","needQuote":true,"nodes":[{"content":"CompareTo(Single)","pos":[0,17]}]},{"pos":[94175,94184],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[94253,94254],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94304,94310],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[94370,94371],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94453,94462],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[94534,94535],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94585,94591],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[94651,94652],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94923,94929],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[95073,95078],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[95224,95236],"content":"CompareTo(T)","needQuote":true,"nodes":[{"content":"CompareTo(T)","pos":[0,12]}]},{"pos":[95406,95415],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[95472,95473],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95500,95501],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[95528,95529],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95611,95620],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[95680,95681],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95708,95709],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[95736,95737],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95998,96012],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[96137,96143],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[96192,96193],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96243,96249],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[96309,96310],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96396,96402],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[96451,96452],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96502,96508],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[96568,96569],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96748,96755],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[96906,96915],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[97161,97175],"content":"Equals(Single)","needQuote":true,"nodes":[{"content":"Equals(Single)","pos":[0,14]}]},{"pos":[97381,97387],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[97452,97453],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97503,97509],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[97569,97570],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97648,97654],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[97722,97723],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97773,97779],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[97839,97840],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98099,98108],"content":"Equals(T)","needQuote":true,"nodes":[{"content":"Equals(T)","pos":[0,9]}]},{"pos":[98266,98272],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[98325,98326],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98353,98354],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[98381,98382],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98460,98466],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[98522,98523],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98550,98551],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[98578,98579],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98819,98832],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[98939,98950],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[99004,99005],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99032,99033],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[99109,99120],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[99174,99175],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99202,99203],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[99370,99376],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[99555,99567],"content":"NumberStyles","needQuote":true,"nodes":[{"content":"NumberStyles","pos":[0,12]}]},{"pos":[99748,99768],"content":"System.Globalization","needQuote":true,"nodes":[{"content":"System.Globalization","pos":[0,20]}]},{"pos":[99950,99965],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[100178,100195],"content":"CompareTo(Object)","needQuote":true,"nodes":[{"content":"CompareTo(Object)","pos":[0,17]}]},{"pos":[100330,100339],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[100393,100394],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100444,100450],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[100510,100511],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100602,100611],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[100665,100666],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100716,100722],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[100782,100783],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101002,101015],"content":"GetTypeCode()","needQuote":true,"nodes":[{"content":"GetTypeCode()","pos":[0,13]}]},{"pos":[101128,101139],"content":"GetTypeCode","needQuote":true,"nodes":[{"content":"GetTypeCode","pos":[0,11]}]},{"pos":[101196,101197],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101224,101225],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101304,101315],"content":"GetTypeCode","needQuote":true,"nodes":[{"content":"GetTypeCode","pos":[0,11]}]},{"pos":[101372,101373],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101400,101401],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101576,101584],"content":"TypeCode","needQuote":true,"nodes":[{"content":"TypeCode","pos":[0,8]}]},{"pos":[101788,101814],"content":"ToBoolean(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToBoolean(IFormatProvider)","pos":[0,26]}]},{"pos":[101969,101978],"content":"ToBoolean","needQuote":true,"nodes":[{"content":"ToBoolean","pos":[0,9]}]},{"pos":[102033,102034],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102093,102108],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[102156,102157],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102258,102267],"content":"ToBoolean","needQuote":true,"nodes":[{"content":"ToBoolean","pos":[0,9]}]},{"pos":[102322,102323],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102382,102397],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[102445,102446],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102704,102727],"content":"ToByte(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToByte(IFormatProvider)","pos":[0,23]}]},{"pos":[102876,102882],"content":"ToByte","needQuote":true,"nodes":[{"content":"ToByte","pos":[0,6]}]},{"pos":[102934,102935],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102994,103009],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[103057,103058],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103156,103162],"content":"ToByte","needQuote":true,"nodes":[{"content":"ToByte","pos":[0,6]}]},{"pos":[103214,103215],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103274,103289],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[103337,103338],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103538,103542],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[103731,103754],"content":"ToChar(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToChar(IFormatProvider)","pos":[0,23]}]},{"pos":[103903,103909],"content":"ToChar","needQuote":true,"nodes":[{"content":"ToChar","pos":[0,6]}]},{"pos":[103961,103962],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104021,104036],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[104084,104085],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104183,104189],"content":"ToChar","needQuote":true,"nodes":[{"content":"ToChar","pos":[0,6]}]},{"pos":[104241,104242],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104301,104316],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[104364,104365],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104565,104569],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[104762,104789],"content":"ToDateTime(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToDateTime(IFormatProvider)","pos":[0,27]}]},{"pos":[104946,104956],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[105012,105013],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105072,105087],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[105135,105136],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105238,105248],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[105304,105305],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105364,105379],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[105427,105428],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105640,105648],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[105852,105878],"content":"ToDecimal(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToDecimal(IFormatProvider)","pos":[0,26]}]},{"pos":[106033,106042],"content":"ToDecimal","needQuote":true,"nodes":[{"content":"ToDecimal","pos":[0,9]}]},{"pos":[106097,106098],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106157,106172],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[106220,106221],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106322,106331],"content":"ToDecimal","needQuote":true,"nodes":[{"content":"ToDecimal","pos":[0,9]}]},{"pos":[106386,106387],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106446,106461],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[106509,106510],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106719,106726],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[106926,106951],"content":"ToDouble(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToDouble(IFormatProvider)","pos":[0,25]}]},{"pos":[107104,107112],"content":"ToDouble","needQuote":true,"nodes":[{"content":"ToDouble","pos":[0,8]}]},{"pos":[107166,107167],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[107226,107241],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[107289,107290],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[107390,107398],"content":"ToDouble","needQuote":true,"nodes":[{"content":"ToDouble","pos":[0,8]}]},{"pos":[107452,107453],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[107512,107527],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[107575,107576],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[107782,107788],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[107984,108008],"content":"ToInt16(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToInt16(IFormatProvider)","pos":[0,24]}]},{"pos":[108159,108166],"content":"ToInt16","needQuote":true,"nodes":[{"content":"ToInt16","pos":[0,7]}]},{"pos":[108219,108220],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[108279,108294],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[108342,108343],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[108442,108449],"content":"ToInt16","needQuote":true,"nodes":[{"content":"ToInt16","pos":[0,7]}]},{"pos":[108502,108503],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[108562,108577],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[108625,108626],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[108829,108834],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[109027,109051],"content":"ToInt32(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToInt32(IFormatProvider)","pos":[0,24]}]},{"pos":[109202,109209],"content":"ToInt32","needQuote":true,"nodes":[{"content":"ToInt32","pos":[0,7]}]},{"pos":[109262,109263],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109322,109337],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[109385,109386],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109485,109492],"content":"ToInt32","needQuote":true,"nodes":[{"content":"ToInt32","pos":[0,7]}]},{"pos":[109545,109546],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109605,109620],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[109668,109669],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109924,109948],"content":"ToInt64(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToInt64(IFormatProvider)","pos":[0,24]}]},{"pos":[110099,110106],"content":"ToInt64","needQuote":true,"nodes":[{"content":"ToInt64","pos":[0,7]}]},{"pos":[110159,110160],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[110219,110234],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[110282,110283],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110382,110389],"content":"ToInt64","needQuote":true,"nodes":[{"content":"ToInt64","pos":[0,7]}]},{"pos":[110442,110443],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[110502,110517],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[110565,110566],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110769,110774],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[110967,110991],"content":"ToSByte(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToSByte(IFormatProvider)","pos":[0,24]}]},{"pos":[111142,111149],"content":"ToSByte","needQuote":true,"nodes":[{"content":"ToSByte","pos":[0,7]}]},{"pos":[111202,111203],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111262,111277],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[111325,111326],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111425,111432],"content":"ToSByte","needQuote":true,"nodes":[{"content":"ToSByte","pos":[0,7]}]},{"pos":[111485,111486],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111545,111560],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[111608,111609],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111812,111817],"content":"SByte","needQuote":true,"nodes":[{"content":"SByte","pos":[0,5]}]},{"pos":[112011,112036],"content":"ToSingle(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToSingle(IFormatProvider)","pos":[0,25]}]},{"pos":[112189,112197],"content":"ToSingle","needQuote":true,"nodes":[{"content":"ToSingle","pos":[0,8]}]},{"pos":[112251,112252],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112311,112326],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[112374,112375],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112475,112483],"content":"ToSingle","needQuote":true,"nodes":[{"content":"ToSingle","pos":[0,8]}]},{"pos":[112537,112538],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112597,112612],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[112660,112661],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112929,112958],"content":"ToType(Type, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToType(Type, IFormatProvider)","pos":[0,29]}]},{"pos":[113132,113138],"content":"ToType","needQuote":true,"nodes":[{"content":"ToType","pos":[0,6]}]},{"pos":[113190,113191],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113239,113243],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[113281,113282]},{"pos":[113346,113361],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[113409,113410],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113520,113526],"content":"ToType","needQuote":true,"nodes":[{"content":"ToType","pos":[0,6]}]},{"pos":[113578,113579],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113627,113631],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[113669,113670]},{"pos":[113734,113749],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[113797,113798],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[114016,114020],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[114211,114236],"content":"ToUInt16(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToUInt16(IFormatProvider)","pos":[0,25]}]},{"pos":[114389,114397],"content":"ToUInt16","needQuote":true,"nodes":[{"content":"ToUInt16","pos":[0,8]}]},{"pos":[114451,114452],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114511,114526],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[114574,114575],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[114675,114683],"content":"ToUInt16","needQuote":true,"nodes":[{"content":"ToUInt16","pos":[0,8]}]},{"pos":[114737,114738],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114797,114812],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[114860,114861],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115067,115073],"content":"UInt16","needQuote":true,"nodes":[{"content":"UInt16","pos":[0,6]}]},{"pos":[115270,115295],"content":"ToUInt32(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToUInt32(IFormatProvider)","pos":[0,25]}]},{"pos":[115448,115456],"content":"ToUInt32","needQuote":true,"nodes":[{"content":"ToUInt32","pos":[0,8]}]},{"pos":[115510,115511],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115570,115585],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[115633,115634],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115734,115742],"content":"ToUInt32","needQuote":true,"nodes":[{"content":"ToUInt32","pos":[0,8]}]},{"pos":[115796,115797],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115856,115871],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[115919,115920],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[116126,116132],"content":"UInt32","needQuote":true,"nodes":[{"content":"UInt32","pos":[0,6]}]},{"pos":[116329,116354],"content":"ToUInt64(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToUInt64(IFormatProvider)","pos":[0,25]}]},{"pos":[116507,116515],"content":"ToUInt64","needQuote":true,"nodes":[{"content":"ToUInt64","pos":[0,8]}]},{"pos":[116569,116570],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116629,116644],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[116692,116693],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[116793,116801],"content":"ToUInt64","needQuote":true,"nodes":[{"content":"ToUInt64","pos":[0,8]}]},{"pos":[116855,116856],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116915,116930],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[116978,116979],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117185,117191],"content":"UInt64","needQuote":true,"nodes":[{"content":"UInt64","pos":[0,6]}]},{"pos":[117358,117368],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[117469,117477],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[117528,117529],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[117556,117557],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117630,117638],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[117689,117690],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[117717,117718],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117931,117956],"content":"ToString(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(IFormatProvider)","pos":[0,25]}]},{"pos":[118109,118117],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[118171,118172],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118231,118246],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[118294,118295],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118395,118403],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[118457,118458],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118517,118532],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[118580,118581],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118852,118885],"content":"ToString(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(String, IFormatProvider)","pos":[0,33]}]},{"pos":[119067,119075],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[119129,119130],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119180,119186],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[119247,119248]},{"pos":[119312,119327],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[119375,119376],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119490,119498],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[119552,119553],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119603,119609],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[119670,119671]},{"pos":[119735,119750],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[119798,119799],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[120025,120046],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[120245,120260],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]},{"pos":[120426,120443],"content":"OverflowException","needQuote":true,"nodes":[{"content":"OverflowException","pos":[0,17]}]},{"pos":[120632,120649],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[120824,120844],"content":"InvalidCastException","needQuote":true,"nodes":[{"content":"InvalidCastException","pos":[0,20]}]}],"content":"items:\n- uid: System.Single\n  commentId: T:System.Single\n  id: Single\n  parent: System\n  children:\n  - System.Single.CompareTo(System.Single)\n  - System.Single.Epsilon\n  - System.Single.Equals(System.Object)\n  - System.Single.Equals(System.Single)\n  - System.Single.GetHashCode\n  - System.Single.IsInfinity(System.Single)\n  - System.Single.IsNaN(System.Single)\n  - System.Single.IsNegativeInfinity(System.Single)\n  - System.Single.IsPositiveInfinity(System.Single)\n  - System.Single.MaxValue\n  - System.Single.MinValue\n  - System.Single.NaN\n  - System.Single.NegativeInfinity\n  - System.Single.op_Equality(System.Single,System.Single)\n  - System.Single.op_GreaterThan(System.Single,System.Single)\n  - System.Single.op_GreaterThanOrEqual(System.Single,System.Single)\n  - System.Single.op_Inequality(System.Single,System.Single)\n  - System.Single.op_LessThan(System.Single,System.Single)\n  - System.Single.op_LessThanOrEqual(System.Single,System.Single)\n  - System.Single.Parse(System.String)\n  - System.Single.Parse(System.String,System.Globalization.NumberStyles)\n  - System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\n  - System.Single.Parse(System.String,System.IFormatProvider)\n  - System.Single.PositiveInfinity\n  - System.Single.System#IComparable#CompareTo(System.Object)\n  - System.Single.System#IConvertible#GetTypeCode\n  - System.Single.System#IConvertible#ToBoolean(System.IFormatProvider)\n  - System.Single.System#IConvertible#ToByte(System.IFormatProvider)\n  - System.Single.System#IConvertible#ToChar(System.IFormatProvider)\n  - System.Single.System#IConvertible#ToDateTime(System.IFormatProvider)\n  - System.Single.System#IConvertible#ToDecimal(System.IFormatProvider)\n  - System.Single.System#IConvertible#ToDouble(System.IFormatProvider)\n  - System.Single.System#IConvertible#ToInt16(System.IFormatProvider)\n  - System.Single.System#IConvertible#ToInt32(System.IFormatProvider)\n  - System.Single.System#IConvertible#ToInt64(System.IFormatProvider)\n  - System.Single.System#IConvertible#ToSByte(System.IFormatProvider)\n  - System.Single.System#IConvertible#ToSingle(System.IFormatProvider)\n  - System.Single.System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  - System.Single.System#IConvertible#ToUInt16(System.IFormatProvider)\n  - System.Single.System#IConvertible#ToUInt32(System.IFormatProvider)\n  - System.Single.System#IConvertible#ToUInt64(System.IFormatProvider)\n  - System.Single.ToString\n  - System.Single.ToString(System.IFormatProvider)\n  - System.Single.ToString(System.String)\n  - System.Single.ToString(System.String,System.IFormatProvider)\n  - System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)\n  - System.Single.TryParse(System.String,System.Single@)\n  langs:\n  - csharp\n  - vb\n  name: Single\n  fullName: System.Single\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Single\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 21\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents a single-precision floating-point number.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [StructLayout(LayoutKind.Sequential)]\n\n      [ComVisible(true)]\n\n      public struct Single : IComparable, IFormattable, IConvertible, IComparable<float>, IEquatable<float>\n    content.vb: >-\n      <Serializable>\n\n      <StructLayout(LayoutKind.Sequential)>\n\n      <ComVisible(True)>\n\n      Public Structure Single\n          Implements IComparable, IFormattable, IConvertible, IComparable(Of Single), IEquatable(Of Single)\n  seealso:\n  - type: System.Decimal\n    commentId: T:System.Decimal\n  - type: System.Double\n    commentId: T:System.Double\n  implements:\n  - System.IComparable\n  - System.IComparable{System.Single}\n  - System.IConvertible\n  - System.IEquatable{System.Single}\n  - System.IFormattable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: Single\n- uid: System.Single.CompareTo(System.Single)\n  commentId: M:System.Single.CompareTo(System.Single)\n  id: CompareTo(System.Single)\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: CompareTo(Single)\n  fullName: System.Single.CompareTo(System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CompareTo\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 94\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Compares this instance to a specified single-precision floating-point number and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified single-precision floating-point number.</p>\\n\"\n  syntax:\n    content: public int CompareTo(float value)\n    content.vb: Public Function CompareTo(value As Single) As Integer\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>A single-precision floating-point number to compare. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed number indicating the relative values of this instance and <em>value</em>.</p>\\n<p>Return Value </p>\\n<p>Description </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>This instance is less than <em>value</em>.</p>\\n<p>-or- </p>\\n<p>This instance is not a number (<xref href=\\\"System.Single.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>) and <em>value</em> is a number. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is equal to <em>value</em>.</p>\\n<p>-or- </p>\\n<p>Both this instance and <em>value</em> are not a number (<xref href=\\\"System.Single.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>), <xref href=\\\"System.Single.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <xref href=\\\"System.Single.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This instance is greater than <em>value</em>.</p>\\n<p>-or- </p>\\n<p>This instance is a number and <em>value</em> is not a number (<xref href=\\\"System.Single.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>). </p>\\n</td></tr></tbody></table>\\n\"\n  seealso:\n  - type: System.Single.Equals(System.Object)\n    commentId: M:System.Single.Equals(System.Object)\n  implements:\n  - System.IComparable{System.Single}.CompareTo(System.Single)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Single.CompareTo(Single)\n- uid: System.Single.Equals(System.Object)\n  commentId: M:System.Single.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Single.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 136\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value indicating whether this instance is equal to a specified object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>An object to compare with this instance. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>obj</em> is an instance of <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and equals the value of this instance; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  seealso:\n  - type: System.Single.CompareTo(System.Object)\n    commentId: M:System.Single.CompareTo(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Single.Equals(Object)\n- uid: System.Single.Equals(System.Single)\n  commentId: M:System.Single.Equals(System.Single)\n  id: Equals(System.Single)\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: Equals(Single)\n  fullName: System.Single.Equals(System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 148\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value indicating whether this instance and a specified <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object represent the same value.</p>\\n\"\n  syntax:\n    content: public bool Equals(float obj)\n    content.vb: Public Function Equals(obj As Single) As Boolean\n    parameters:\n    - id: obj\n      type: System.Single\n      description: \"\\n<p>An object to compare with this instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>obj</em> is equal to this instance; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Single.Equals(System.Object)\n    commentId: M:System.Single.Equals(System.Object)\n  - type: System.Single.CompareTo(System.Single)\n    commentId: M:System.Single.CompareTo(System.Single)\n  implements:\n  - System.IEquatable{System.Single}.Equals(System.Single)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Single.Equals(Single)\n- uid: System.Single.GetHashCode\n  commentId: M:System.Single.GetHashCode\n  id: GetHashCode\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Single.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 157\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the hash code for this instance.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetHashCode()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Single.GetHashCode()\n- uid: System.Single.IsInfinity(System.Single)\n  commentId: M:System.Single.IsInfinity(System.Single)\n  id: IsInfinity(System.Single)\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: IsInfinity(Single)\n  fullName: System.Single.IsInfinity(System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsInfinity\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 39\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value indicating whether the specified number evaluates to negative or positive infinity.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [NonVersionable]\n\n      public static bool IsInfinity(float f)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <NonVersionable>\n\n      Public Shared Function IsInfinity(f As Single) As Boolean\n    parameters:\n    - id: f\n      type: System.Single\n      description: \"\\n<p>A single-precision floating-point number. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>f</em> evaluates to <xref href=\\\"System.Single.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Single.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Single.IsPositiveInfinity(System.Single)\n    commentId: M:System.Single.IsPositiveInfinity(System.Single)\n  - type: System.Single.IsNegativeInfinity(System.Single)\n    commentId: M:System.Single.IsNegativeInfinity(System.Single)\n  - type: System.Single.PositiveInfinity\n    commentId: F:System.Single.PositiveInfinity\n  - type: System.Single.NegativeInfinity\n    commentId: F:System.Single.NegativeInfinity\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Single.IsInfinity(Single)\n- uid: System.Single.IsNaN(System.Single)\n  commentId: M:System.Single.IsNaN(System.Single)\n  id: IsNaN(System.Single)\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: IsNaN(Single)\n  fullName: System.Single.IsNaN(System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsNaN\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 60\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value that indicates whether the specified value is not a number (<xref href=\\\"System.Single.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [SecuritySafeCritical]\n\n      [NonVersionable]\n\n      public static bool IsNaN(float f)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <SecuritySafeCritical>\n\n      <NonVersionable>\n\n      Public Shared Function IsNaN(f As Single) As Boolean\n    parameters:\n    - id: f\n      type: System.Single\n      description: \"\\n<p>A single-precision floating-point number. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>f</em> evaluates to not a number (<xref href=\\\"System.Single.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>); otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Single.NaN\n    commentId: F:System.Single.NaN\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Single.IsNaN(Single)\n- uid: System.Single.IsNegativeInfinity(System.Single)\n  commentId: M:System.Single.IsNegativeInfinity(System.Single)\n  id: IsNegativeInfinity(System.Single)\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: IsNegativeInfinity(Single)\n  fullName: System.Single.IsNegativeInfinity(System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsNegativeInfinity\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 53\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value indicating whether the specified number evaluates to negative infinity.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [NonVersionable]\n\n      public static bool IsNegativeInfinity(float f)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <NonVersionable>\n\n      Public Shared Function IsNegativeInfinity(f As Single) As Boolean\n    parameters:\n    - id: f\n      type: System.Single\n      description: \"\\n<p>A single-precision floating-point number. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>f</em> evaluates to <xref href=\\\"System.Single.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Single.IsInfinity(System.Single)\n    commentId: M:System.Single.IsInfinity(System.Single)\n  - type: System.Single.IsPositiveInfinity(System.Single)\n    commentId: M:System.Single.IsPositiveInfinity(System.Single)\n  - type: System.Single.PositiveInfinity\n    commentId: F:System.Single.PositiveInfinity\n  - type: System.Single.NegativeInfinity\n    commentId: F:System.Single.NegativeInfinity\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Single.IsNegativeInfinity(Single)\n- uid: System.Single.IsPositiveInfinity(System.Single)\n  commentId: M:System.Single.IsPositiveInfinity(System.Single)\n  id: IsPositiveInfinity(System.Single)\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: IsPositiveInfinity(Single)\n  fullName: System.Single.IsPositiveInfinity(System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsPositiveInfinity\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 46\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value indicating whether the specified number evaluates to positive infinity.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [NonVersionable]\n\n      public static bool IsPositiveInfinity(float f)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <NonVersionable>\n\n      Public Shared Function IsPositiveInfinity(f As Single) As Boolean\n    parameters:\n    - id: f\n      type: System.Single\n      description: \"\\n<p>A single-precision floating-point number. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>f</em> evaluates to <xref href=\\\"System.Single.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Single.IsInfinity(System.Single)\n    commentId: M:System.Single.IsInfinity(System.Single)\n  - type: System.Single.IsNegativeInfinity(System.Single)\n    commentId: M:System.Single.IsNegativeInfinity(System.Single)\n  - type: System.Single.PositiveInfinity\n    commentId: F:System.Single.PositiveInfinity\n  - type: System.Single.NegativeInfinity\n    commentId: F:System.Single.NegativeInfinity\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Single.IsPositiveInfinity(Single)\n- uid: System.Single.op_Equality(System.Single,System.Single)\n  commentId: M:System.Single.op_Equality(System.Single,System.Single)\n  id: op_Equality(System.Single,System.Single)\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: Equality(Single, Single)\n  fullName: System.Single.Equality(System.Single, System.Single)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Equality\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 106\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value that indicates whether two specified <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values are equal.</p>\\n\"\n  syntax:\n    content: >-\n      [NonVersionable]\n\n      public static bool operator ==(float left, float right)\n    content.vb: >-\n      <NonVersionable>\n\n      Public Shared Operator =(left As Single, right As Single) As Boolean\n    parameters:\n    - id: left\n      type: System.Single\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Single\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are equal; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Single.Equality(Single, Single)\n- uid: System.Single.op_GreaterThan(System.Single,System.Single)\n  commentId: M:System.Single.op_GreaterThan(System.Single,System.Single)\n  id: op_GreaterThan(System.Single,System.Single)\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(Single, Single)\n  fullName: System.Single.GreaterThan(System.Single, System.Single)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_GreaterThan\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 121\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value that indicates whether a specified <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is greater than another specified <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: >-\n      [NonVersionable]\n\n      public static bool operator>(float left, float right)\n    content.vb: >-\n      <NonVersionable>\n\n      Public Shared Operator>(left As Single, right As Single) As Boolean\n    parameters:\n    - id: left\n      type: System.Single\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Single\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Single.GreaterThan(Single, Single)\n- uid: System.Single.op_GreaterThanOrEqual(System.Single,System.Single)\n  commentId: M:System.Single.op_GreaterThanOrEqual(System.Single,System.Single)\n  id: op_GreaterThanOrEqual(System.Single,System.Single)\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual(Single, Single)\n  fullName: System.Single.GreaterThanOrEqual(System.Single, System.Single)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_GreaterThanOrEqual\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 131\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value that indicates whether a specified <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is greater than or equal to another specified <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: >-\n      [NonVersionable]\n\n      public static bool operator >=(float left, float right)\n    content.vb: >-\n      <NonVersionable>\n\n      Public Shared Operator >=(left As Single, right As Single) As Boolean\n    parameters:\n    - id: left\n      type: System.Single\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Single\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is greater than or equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Single.GreaterThanOrEqual(Single, Single)\n- uid: System.Single.op_Inequality(System.Single,System.Single)\n  commentId: M:System.Single.op_Inequality(System.Single,System.Single)\n  id: op_Inequality(System.Single,System.Single)\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: Inequality(Single, Single)\n  fullName: System.Single.Inequality(System.Single, System.Single)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Inequality\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 111\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value that indicates whether two specified <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values are not equal.</p>\\n\"\n  syntax:\n    content: >-\n      [NonVersionable]\n\n      public static bool operator !=(float left, float right)\n    content.vb: >-\n      <NonVersionable>\n\n      Public Shared Operator <>(left As Single, right As Single) As Boolean\n    parameters:\n    - id: left\n      type: System.Single\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Single\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Single.Inequality(Single, Single)\n- uid: System.Single.op_LessThan(System.Single,System.Single)\n  commentId: M:System.Single.op_LessThan(System.Single,System.Single)\n  id: op_LessThan(System.Single,System.Single)\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: LessThan(Single, Single)\n  fullName: System.Single.LessThan(System.Single, System.Single)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_LessThan\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 116\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value that indicates whether a specified <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is less than another specified <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: >-\n      [NonVersionable]\n\n      public static bool operator <(float left, float right)\n    content.vb: >-\n      <NonVersionable>\n\n      Public Shared Operator <(left As Single, right As Single) As Boolean\n    parameters:\n    - id: left\n      type: System.Single\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Single\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is less than <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Single.LessThan(Single, Single)\n- uid: System.Single.op_LessThanOrEqual(System.Single,System.Single)\n  commentId: M:System.Single.op_LessThanOrEqual(System.Single,System.Single)\n  id: op_LessThanOrEqual(System.Single,System.Single)\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual(Single, Single)\n  fullName: System.Single.LessThanOrEqual(System.Single, System.Single)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_LessThanOrEqual\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 126\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value that indicates whether a specified <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is less than or equal to another specified <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: >-\n      [NonVersionable]\n\n      public static bool operator <=(float left, float right)\n    content.vb: >-\n      <NonVersionable>\n\n      Public Shared Operator <=(left As Single, right As Single) As Boolean\n    parameters:\n    - id: left\n      type: System.Single\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Single\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> is less than or equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Single.LessThanOrEqual(Single, Single)\n- uid: System.Single.Parse(System.String)\n  commentId: M:System.Single.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: Parse(String)\n  fullName: System.Single.Parse(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Parse\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 200\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a number to its single-precision floating-point number equivalent.</p>\\n\"\n  syntax:\n    content: public static float Parse(string s)\n    content.vb: Public Shared Function Parse(s As String) As Single\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string that contains a number to convert. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>A single-precision floating-point number equivalent to the numeric value or symbol specified in <em>s</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> does not represent a number in a valid format. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>s</em> represents a number less than <xref href=\\\"System.Single.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Single.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Single.ToString\n    commentId: M:System.Single.ToString\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Single.Parse(String)\n- uid: System.Single.Parse(System.String,System.Globalization.NumberStyles)\n  commentId: M:System.Single.Parse(System.String,System.Globalization.NumberStyles)\n  id: Parse(System.String,System.Globalization.NumberStyles)\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: Parse(String, NumberStyles)\n  fullName: System.Single.Parse(System.String, System.Globalization.NumberStyles)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Parse\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 204\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a number in a specified style to its single-precision floating-point number equivalent.</p>\\n\"\n  syntax:\n    content: public static float Parse(string s, NumberStyles style)\n    content.vb: Public Shared Function Parse(s As String, style As NumberStyles) As Single\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string that contains a number to convert. </p>\\n\"\n    - id: style\n      type: System.Globalization.NumberStyles\n      description: \"\\n<p>A bitwise combination of enumeration values that indicates the style elements that can be present in <em>s</em>. A typical value to specify is <xref href=\\\"System.Globalization.NumberStyles.Float\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> combined with <xref href=\\\"System.Globalization.NumberStyles.AllowThousands\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>A single-precision floating-point number that is equivalent to the numeric value or symbol specified in <em>s</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> is not a number in a valid format. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>s</em> represents a number that is less than <xref href=\\\"System.Single.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Single.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>style</em> is not a <xref href=\\\"System.Globalization.NumberStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n<p>-or-</p>\\n<p>\\n<em>style</em> includes the <xref href=\\\"System.Globalization.NumberStyles.AllowHexSpecifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  seealso:\n  - type: System.Single.ToString\n    commentId: M:System.Single.ToString\n  - type: System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)\n    commentId: M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Single.Parse(String, NumberStyles)\n- uid: System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\n  commentId: M:System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\n  id: Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: Parse(String, NumberStyles, IFormatProvider)\n  fullName: System.Single.Parse(System.String, System.Globalization.NumberStyles, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Parse\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 213\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent.</p>\\n\"\n  syntax:\n    content: public static float Parse(string s, NumberStyles style, IFormatProvider provider)\n    content.vb: Public Shared Function Parse(s As String, style As NumberStyles, provider As IFormatProvider) As Single\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string that contains a number to convert. </p>\\n\"\n    - id: style\n      type: System.Globalization.NumberStyles\n      description: \"\\n<p>A bitwise combination of enumeration values that indicates the style elements that can be present in <em>s</em>. A typical value to specify is <xref href=\\\"System.Globalization.NumberStyles.Float\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> combined with <xref href=\\\"System.Globalization.NumberStyles.AllowThousands\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information about <em>s</em>. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>A single-precision floating-point number equivalent to the numeric value or symbol specified in <em>s</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> does not represent a numeric value. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>style</em> is not a <xref href=\\\"System.Globalization.NumberStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n<p>-or-</p>\\n<p>\\n<em>style</em> is the <xref href=\\\"System.Globalization.NumberStyles.AllowHexSpecifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>s</em> represents a number that is less than <xref href=\\\"System.Single.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Single.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Single.ToString\n    commentId: M:System.Single.ToString\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Single.Parse(String, NumberStyles, IFormatProvider)\n- uid: System.Single.Parse(System.String,System.IFormatProvider)\n  commentId: M:System.Single.Parse(System.String,System.IFormatProvider)\n  id: Parse(System.String,System.IFormatProvider)\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: Parse(String, IFormatProvider)\n  fullName: System.Single.Parse(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Parse\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 209\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a number in a specified culture-specific format to its single-precision floating-point number equivalent.</p>\\n\"\n  syntax:\n    content: public static float Parse(string s, IFormatProvider provider)\n    content.vb: Public Shared Function Parse(s As String, provider As IFormatProvider) As Single\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string that contains a number to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information about <em>s</em>. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>A single-precision floating-point number equivalent to the numeric value or symbol specified in <em>s</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> does not represent a number in a valid format. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>s</em> represents a number less than <xref href=\\\"System.Single.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Single.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Single.ToString\n    commentId: M:System.Single.ToString\n  - type: System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)\n    commentId: M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Single.Parse(String, IFormatProvider)\n- uid: System.Single.System#IComparable#CompareTo(System.Object)\n  commentId: M:System.Single.System#IComparable#CompareTo(System.Object)\n  id: System#IComparable#CompareTo(System.Object)\n  isEii: true\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: IComparable.CompareTo(Object)\n  fullName: System.Single.System.IComparable.CompareTo(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.IComparable.CompareTo\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 1461\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: int IComparable.CompareTo(object value)\n    content.vb: Function System.IComparable.CompareTo(value As Object) As Integer Implements IComparable.CompareTo\n    parameters:\n    - id: value\n      type: System.Object\n    return:\n      type: System.Int32\n  implements:\n  - System.IComparable.CompareTo(System.Object)\n  name.vb: System.IComparable.CompareTo(Object)\n  nameWithType: Single.IComparable.CompareTo(Object)\n  nameWithType.vb: Single.System.IComparable.CompareTo(Object)\n- uid: System.Single.System#IConvertible#GetTypeCode\n  commentId: M:System.Single.System#IConvertible#GetTypeCode\n  id: System#IConvertible#GetTypeCode\n  isEii: true\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.GetTypeCode()\n  fullName: System.Single.System.IConvertible.GetTypeCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.IConvertible.GetTypeCode\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 1462\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: TypeCode IConvertible.GetTypeCode()\n    content.vb: Function System.IConvertible.GetTypeCode As TypeCode Implements IConvertible.GetTypeCode\n    return:\n      type: System.TypeCode\n  implements:\n  - System.IConvertible.GetTypeCode\n  name.vb: System.IConvertible.GetTypeCode()\n  nameWithType: Single.IConvertible.GetTypeCode()\n  nameWithType.vb: Single.System.IConvertible.GetTypeCode()\n- uid: System.Single.System#IConvertible#ToBoolean(System.IFormatProvider)\n  commentId: M:System.Single.System#IConvertible#ToBoolean(System.IFormatProvider)\n  id: System#IConvertible#ToBoolean(System.IFormatProvider)\n  isEii: true\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToBoolean(IFormatProvider)\n  fullName: System.Single.System.IConvertible.ToBoolean(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToBoolean\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 262\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToBoolean(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: bool IConvertible.ToBoolean(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToBoolean(provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the value of the current instance is not zero; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToBoolean(System.IFormatProvider)\n  name.vb: System.IConvertible.ToBoolean(IFormatProvider)\n  nameWithType: Single.IConvertible.ToBoolean(IFormatProvider)\n  nameWithType.vb: Single.System.IConvertible.ToBoolean(IFormatProvider)\n- uid: System.Single.System#IConvertible#ToByte(System.IFormatProvider)\n  commentId: M:System.Single.System#IConvertible#ToByte(System.IFormatProvider)\n  id: System#IConvertible#ToByte(System.IFormatProvider)\n  isEii: true\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToByte(IFormatProvider)\n  fullName: System.Single.System.IConvertible.ToByte(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToByte\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 277\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToByte(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: byte IConvertible.ToByte(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToByte(provider As IFormatProvider) As Byte Implements IConvertible.ToByte\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>The value of the current instance, converted to a <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToByte(System.IFormatProvider)\n  name.vb: System.IConvertible.ToByte(IFormatProvider)\n  nameWithType: Single.IConvertible.ToByte(IFormatProvider)\n  nameWithType.vb: Single.System.IConvertible.ToByte(IFormatProvider)\n- uid: System.Single.System#IConvertible#ToChar(System.IFormatProvider)\n  commentId: M:System.Single.System#IConvertible#ToChar(System.IFormatProvider)\n  id: System#IConvertible#ToChar(System.IFormatProvider)\n  isEii: true\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToChar(IFormatProvider)\n  fullName: System.Single.System.IConvertible.ToChar(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToChar\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 267\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>This conversion is not supported. Attempting to use this method throws an <xref href=\\\"System.InvalidCastException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: char IConvertible.ToChar(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToChar(provider As IFormatProvider) As Char Implements IConvertible.ToChar\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>This conversion is not supported. No value is returned.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>In all cases.</p>\\n\"\n  implements:\n  - System.IConvertible.ToChar(System.IFormatProvider)\n  name.vb: System.IConvertible.ToChar(IFormatProvider)\n  nameWithType: Single.IConvertible.ToChar(IFormatProvider)\n  nameWithType.vb: Single.System.IConvertible.ToChar(IFormatProvider)\n- uid: System.Single.System#IConvertible#ToDateTime(System.IFormatProvider)\n  commentId: M:System.Single.System#IConvertible#ToDateTime(System.IFormatProvider)\n  id: System#IConvertible#ToDateTime(System.IFormatProvider)\n  isEii: true\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToDateTime(IFormatProvider)\n  fullName: System.Single.System.IConvertible.ToDateTime(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToDateTime\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 327\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>This conversion is not supported. Attempting to use this method throws an <xref href=\\\"System.InvalidCastException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: DateTime IConvertible.ToDateTime(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToDateTime(provider As IFormatProvider) As Date Implements IConvertible.ToDateTime\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>This conversion is not supported. No value is returned.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>In all cases.</p>\\n\"\n  implements:\n  - System.IConvertible.ToDateTime(System.IFormatProvider)\n  name.vb: System.IConvertible.ToDateTime(IFormatProvider)\n  nameWithType: Single.IConvertible.ToDateTime(IFormatProvider)\n  nameWithType.vb: Single.System.IConvertible.ToDateTime(IFormatProvider)\n- uid: System.Single.System#IConvertible#ToDecimal(System.IFormatProvider)\n  commentId: M:System.Single.System#IConvertible#ToDecimal(System.IFormatProvider)\n  id: System#IConvertible#ToDecimal(System.IFormatProvider)\n  isEii: true\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToDecimal(IFormatProvider)\n  fullName: System.Single.System.IConvertible.ToDecimal(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToDecimal\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 322\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToDecimal(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: decimal IConvertible.ToDecimal(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToDecimal(provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The value of the current instance, converted to a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToDecimal(System.IFormatProvider)\n  name.vb: System.IConvertible.ToDecimal(IFormatProvider)\n  nameWithType: Single.IConvertible.ToDecimal(IFormatProvider)\n  nameWithType.vb: Single.System.IConvertible.ToDecimal(IFormatProvider)\n- uid: System.Single.System#IConvertible#ToDouble(System.IFormatProvider)\n  commentId: M:System.Single.System#IConvertible#ToDouble(System.IFormatProvider)\n  id: System#IConvertible#ToDouble(System.IFormatProvider)\n  isEii: true\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToDouble(IFormatProvider)\n  fullName: System.Single.System.IConvertible.ToDouble(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToDouble\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 317\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToDouble(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: double IConvertible.ToDouble(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToDouble(provider As IFormatProvider) As Double Implements IConvertible.ToDouble\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The value of the current instance, converted to a <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToDouble(System.IFormatProvider)\n  name.vb: System.IConvertible.ToDouble(IFormatProvider)\n  nameWithType: Single.IConvertible.ToDouble(IFormatProvider)\n  nameWithType.vb: Single.System.IConvertible.ToDouble(IFormatProvider)\n- uid: System.Single.System#IConvertible#ToInt16(System.IFormatProvider)\n  commentId: M:System.Single.System#IConvertible#ToInt16(System.IFormatProvider)\n  id: System#IConvertible#ToInt16(System.IFormatProvider)\n  isEii: true\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToInt16(IFormatProvider)\n  fullName: System.Single.System.IConvertible.ToInt16(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToInt16\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 282\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToInt16(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: short IConvertible.ToInt16(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToInt16(provider As IFormatProvider) As Short Implements IConvertible.ToInt16\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>The value of the current instance, converted to an <xref href=\\\"System.Int16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToInt16(System.IFormatProvider)\n  name.vb: System.IConvertible.ToInt16(IFormatProvider)\n  nameWithType: Single.IConvertible.ToInt16(IFormatProvider)\n  nameWithType.vb: Single.System.IConvertible.ToInt16(IFormatProvider)\n- uid: System.Single.System#IConvertible#ToInt32(System.IFormatProvider)\n  commentId: M:System.Single.System#IConvertible#ToInt32(System.IFormatProvider)\n  id: System#IConvertible#ToInt32(System.IFormatProvider)\n  isEii: true\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToInt32(IFormatProvider)\n  fullName: System.Single.System.IConvertible.ToInt32(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToInt32\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 292\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToInt32(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: int IConvertible.ToInt32(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToInt32(provider As IFormatProvider) As Integer Implements IConvertible.ToInt32\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The value of the current instance, converted to an <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToInt32(System.IFormatProvider)\n  name.vb: System.IConvertible.ToInt32(IFormatProvider)\n  nameWithType: Single.IConvertible.ToInt32(IFormatProvider)\n  nameWithType.vb: Single.System.IConvertible.ToInt32(IFormatProvider)\n- uid: System.Single.System#IConvertible#ToInt64(System.IFormatProvider)\n  commentId: M:System.Single.System#IConvertible#ToInt64(System.IFormatProvider)\n  id: System#IConvertible#ToInt64(System.IFormatProvider)\n  isEii: true\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToInt64(IFormatProvider)\n  fullName: System.Single.System.IConvertible.ToInt64(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToInt64\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 302\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToInt64(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: long IConvertible.ToInt64(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToInt64(provider As IFormatProvider) As Long Implements IConvertible.ToInt64\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The value of the current instance, converted to an <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToInt64(System.IFormatProvider)\n  name.vb: System.IConvertible.ToInt64(IFormatProvider)\n  nameWithType: Single.IConvertible.ToInt64(IFormatProvider)\n  nameWithType.vb: Single.System.IConvertible.ToInt64(IFormatProvider)\n- uid: System.Single.System#IConvertible#ToSByte(System.IFormatProvider)\n  commentId: M:System.Single.System#IConvertible#ToSByte(System.IFormatProvider)\n  id: System#IConvertible#ToSByte(System.IFormatProvider)\n  isEii: true\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToSByte(IFormatProvider)\n  fullName: System.Single.System.IConvertible.ToSByte(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToSByte\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 272\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToSByte(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: sbyte IConvertible.ToSByte(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToSByte(provider As IFormatProvider) As SByte Implements IConvertible.ToSByte\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>The value of the current instance, converted to an <xref href=\\\"System.SByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToSByte(System.IFormatProvider)\n  name.vb: System.IConvertible.ToSByte(IFormatProvider)\n  nameWithType: Single.IConvertible.ToSByte(IFormatProvider)\n  nameWithType.vb: Single.System.IConvertible.ToSByte(IFormatProvider)\n- uid: System.Single.System#IConvertible#ToSingle(System.IFormatProvider)\n  commentId: M:System.Single.System#IConvertible#ToSingle(System.IFormatProvider)\n  id: System#IConvertible#ToSingle(System.IFormatProvider)\n  isEii: true\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToSingle(IFormatProvider)\n  fullName: System.Single.System.IConvertible.ToSingle(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToSingle\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 312\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToSingle(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: float IConvertible.ToSingle(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToSingle(provider As IFormatProvider) As Single Implements IConvertible.ToSingle\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The value of the current instance, unchanged.</p>\\n\"\n  implements:\n  - System.IConvertible.ToSingle(System.IFormatProvider)\n  name.vb: System.IConvertible.ToSingle(IFormatProvider)\n  nameWithType: Single.IConvertible.ToSingle(IFormatProvider)\n  nameWithType.vb: Single.System.IConvertible.ToSingle(IFormatProvider)\n- uid: System.Single.System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  commentId: M:System.Single.System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  id: System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  isEii: true\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToType(Type, IFormatProvider)\n  fullName: System.Single.System.IConvertible.ToType(System.Type, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToType\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 332\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToType(System.Type,System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: object IConvertible.ToType(Type type, IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToType(type As Type, provider As IFormatProvider) As Object Implements IConvertible.ToType\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The type to which to convert this <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies information about the format of the returned value.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The value of the current instance, converted to <em>type</em>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToType(System.Type,System.IFormatProvider)\n  name.vb: System.IConvertible.ToType(Type, IFormatProvider)\n  nameWithType: Single.IConvertible.ToType(Type, IFormatProvider)\n  nameWithType.vb: Single.System.IConvertible.ToType(Type, IFormatProvider)\n- uid: System.Single.System#IConvertible#ToUInt16(System.IFormatProvider)\n  commentId: M:System.Single.System#IConvertible#ToUInt16(System.IFormatProvider)\n  id: System#IConvertible#ToUInt16(System.IFormatProvider)\n  isEii: true\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToUInt16(IFormatProvider)\n  fullName: System.Single.System.IConvertible.ToUInt16(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToUInt16\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 287\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToUInt16(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: ushort IConvertible.ToUInt16(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToUInt16(provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>The value of the current instance, converted to a <xref href=\\\"System.UInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToUInt16(System.IFormatProvider)\n  name.vb: System.IConvertible.ToUInt16(IFormatProvider)\n  nameWithType: Single.IConvertible.ToUInt16(IFormatProvider)\n  nameWithType.vb: Single.System.IConvertible.ToUInt16(IFormatProvider)\n- uid: System.Single.System#IConvertible#ToUInt32(System.IFormatProvider)\n  commentId: M:System.Single.System#IConvertible#ToUInt32(System.IFormatProvider)\n  id: System#IConvertible#ToUInt32(System.IFormatProvider)\n  isEii: true\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToUInt32(IFormatProvider)\n  fullName: System.Single.System.IConvertible.ToUInt32(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToUInt32\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 297\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToUInt32(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: uint IConvertible.ToUInt32(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToUInt32(provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>The value of the current instance, converted to a <xref href=\\\"System.UInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToUInt32(System.IFormatProvider)\n  name.vb: System.IConvertible.ToUInt32(IFormatProvider)\n  nameWithType: Single.IConvertible.ToUInt32(IFormatProvider)\n  nameWithType.vb: Single.System.IConvertible.ToUInt32(IFormatProvider)\n- uid: System.Single.System#IConvertible#ToUInt64(System.IFormatProvider)\n  commentId: M:System.Single.System#IConvertible#ToUInt64(System.IFormatProvider)\n  id: System#IConvertible#ToUInt64(System.IFormatProvider)\n  isEii: true\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToUInt64(IFormatProvider)\n  fullName: System.Single.System.IConvertible.ToUInt64(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToUInt64\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 307\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>For a description of this member, see <xref href=\\\"System.IConvertible.ToUInt64(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: ulong IConvertible.ToUInt64(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToUInt64(provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>This parameter is ignored.</p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>The value of the current instance, converted to a <xref href=\\\"System.UInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IConvertible.ToUInt64(System.IFormatProvider)\n  name.vb: System.IConvertible.ToUInt64(IFormatProvider)\n  nameWithType: Single.IConvertible.ToUInt64(IFormatProvider)\n  nameWithType.vb: Single.System.IConvertible.ToUInt64(IFormatProvider)\n- uid: System.Single.ToString\n  commentId: M:System.Single.ToString\n  id: ToString\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Single.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 168\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the numeric value of this instance to its equivalent string representation.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override string ToString()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the value of this instance.</p>\\n\"\n  overridden: System.ValueType.ToString\n  seealso:\n  - type: System.Single.Parse(System.String)\n    commentId: M:System.Single.Parse(System.String)\n  - type: System.String\n    commentId: T:System.String\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Single.ToString()\n- uid: System.Single.ToString(System.IFormatProvider)\n  commentId: M:System.Single.ToString(System.IFormatProvider)\n  id: ToString(System.IFormatProvider)\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: ToString(IFormatProvider)\n  fullName: System.Single.ToString(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 174\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public string ToString(IFormatProvider provider)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function ToString(provider As IFormatProvider) As String\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the value of this instance as specified by <em>provider</em>.</p>\\n\"\n  seealso:\n  - type: System.Single.Parse(System.String)\n    commentId: M:System.Single.Parse(System.String)\n  - type: System.String\n    commentId: T:System.String\n  implements:\n  - System.IConvertible.ToString(System.IFormatProvider)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Single.ToString(IFormatProvider)\n- uid: System.Single.ToString(System.String)\n  commentId: M:System.Single.ToString(System.String)\n  id: ToString(System.String)\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: ToString(String)\n  fullName: System.Single.ToString(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 180\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public string ToString(string format)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function ToString(format As String) As String\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A numeric format string.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the value of this instance as specified by <em>format</em>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is invalid. </p>\\n\"\n  seealso:\n  - type: System.Single.Parse(System.String)\n    commentId: M:System.Single.Parse(System.String)\n  - type: System.String\n    commentId: T:System.String\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Single.ToString(String)\n- uid: System.Single.ToString(System.String,System.IFormatProvider)\n  commentId: M:System.Single.ToString(System.String,System.IFormatProvider)\n  id: ToString(System.String,System.IFormatProvider)\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: ToString(String, IFormatProvider)\n  fullName: System.Single.ToString(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 186\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public string ToString(string format, IFormatProvider provider)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function ToString(format As String, provider As IFormatProvider) As String\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A numeric format string.</p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the value of this instance as specified by <em>format</em> and <em>provider</em>.</p>\\n\"\n  seealso:\n  - type: System.Single.Parse(System.String)\n    commentId: M:System.Single.Parse(System.String)\n  - type: System.String\n    commentId: T:System.String\n  implements:\n  - System.IFormattable.ToString(System.String,System.IFormatProvider)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Single.ToString(String, IFormatProvider)\n- uid: System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)\n  commentId: M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)\n  id: TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: TryParse(String, NumberStyles, IFormatProvider, out Single)\n  fullName: System.Single.TryParse(System.String, System.Globalization.NumberStyles, System.IFormatProvider, out System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryParse\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 226\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</p>\\n\"\n  syntax:\n    content: public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out float result)\n    content.vb: Public Shared Function TryParse(s As String, style As NumberStyles, provider As IFormatProvider, ByRef result As Single) As Boolean\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string representing a number to convert. </p>\\n\"\n    - id: style\n      type: System.Globalization.NumberStyles\n      description: \"\\n<p>A bitwise combination of enumeration values that indicates the permitted format of <em>s</em>. A typical value to specify is <xref href=\\\"System.Globalization.NumberStyles.Float\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> combined with <xref href=\\\"System.Globalization.NumberStyles.AllowThousands\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information about <em>s</em>. </p>\\n\"\n    - id: result\n      type: System.Single\n      description: \"\\n<p>When this method returns, contains the single-precision floating-point number equivalent to the numeric value or symbol contained in <em>s</em>, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <em>s</em> parameter is <strong>null</strong> or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, is not in a format compliant with <em>style</em>, represents a number less than <xref href=\\\"System.Single.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Single.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or if <em>style</em> is not a valid combination of <xref href=\\\"System.Globalization.NumberStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumerated constants. This parameter is passed uninitialized; any value originally supplied in <em>result</em> will be overwritten.  </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>s</em> was converted successfully; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>style</em> is not a <xref href=\\\"System.Globalization.NumberStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n<p>-or-</p>\\n<p>\\n<em>style</em> is the <xref href=\\\"System.Globalization.NumberStyles.AllowHexSpecifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  seealso:\n  - type: System.Single.Parse(System.String)\n    commentId: M:System.Single.Parse(System.String)\n  - type: System.Single.ToString\n    commentId: M:System.Single.ToString\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Single.TryParse(System.String, System.Globalization.NumberStyles, System.IFormatProvider, ByRef System.Single)\n  name.vb: TryParse(String, NumberStyles, IFormatProvider, ByRef Single)\n  nameWithType: Single.TryParse(String, NumberStyles, IFormatProvider, out Single)\n  nameWithType.vb: Single.TryParse(String, NumberStyles, IFormatProvider, ByRef Single)\n- uid: System.Single.TryParse(System.String,System.Single@)\n  commentId: M:System.Single.TryParse(System.String,System.Single@)\n  id: TryParse(System.String,System.Single@)\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: TryParse(String, out Single)\n  fullName: System.Single.TryParse(System.String, out System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryParse\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 222\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a number to its single-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</p>\\n\"\n  syntax:\n    content: public static bool TryParse(string s, out float result)\n    content.vb: Public Shared Function TryParse(s As String, ByRef result As Single) As Boolean\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string representing a number to convert. </p>\\n\"\n    - id: result\n      type: System.Single\n      description: \"\\n<p>When this method returns, contains single-precision floating-point number equivalent to the numeric value or symbol contained in <em>s</em>, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <em>s</em> parameter is <strong>null</strong> or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, is not a number in a valid format, or represents a number less than <xref href=\\\"System.Single.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Single.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This parameter is passed uninitialized; any value originally supplied in <em>result</em> will be overwritten.  </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>s</em> was converted successfully; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Single.Parse(System.String)\n    commentId: M:System.Single.Parse(System.String)\n  - type: System.Single.ToString\n    commentId: M:System.Single.ToString\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Single.TryParse(System.String, ByRef System.Single)\n  name.vb: TryParse(String, ByRef Single)\n  nameWithType: Single.TryParse(String, out Single)\n  nameWithType.vb: Single.TryParse(String, ByRef Single)\n- uid: System.Single.MinValue\n  commentId: F:System.Single.MinValue\n  id: MinValue\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: MinValue\n  fullName: System.Single.MinValue\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MinValue\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 32\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents the smallest possible value of <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This field is constant.</p>\\n\"\n  syntax:\n    content: public const float MinValue = -3.40282347E+38F\n    content.vb: Public Const MinValue As Single = -3.40282347E+38F\n    return:\n      type: System.Single\n  seealso:\n  - type: System.Single.MaxValue\n    commentId: F:System.Single.MaxValue\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: Single.MinValue\n- uid: System.Single.Epsilon\n  commentId: F:System.Single.Epsilon\n  id: Epsilon\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: Epsilon\n  fullName: System.Single.Epsilon\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Epsilon\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 33\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents the smallest positive <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that is greater than zero. This field is constant.</p>\\n\"\n  syntax:\n    content: public const float Epsilon = 1.401298E-45F\n    content.vb: Public Const Epsilon As Single = 1.401298E-45F\n    return:\n      type: System.Single\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: Single.Epsilon\n- uid: System.Single.MaxValue\n  commentId: F:System.Single.MaxValue\n  id: MaxValue\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: MaxValue\n  fullName: System.Single.MaxValue\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MaxValue\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 34\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents the largest possible value of <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This field is constant.</p>\\n\"\n  syntax:\n    content: public const float MaxValue = 3.40282347E+38F\n    content.vb: Public Const MaxValue As Single = 3.40282347E+38F\n    return:\n      type: System.Single\n  seealso:\n  - type: System.Single.MinValue\n    commentId: F:System.Single.MinValue\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: Single.MaxValue\n- uid: System.Single.PositiveInfinity\n  commentId: F:System.Single.PositiveInfinity\n  id: PositiveInfinity\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: PositiveInfinity\n  fullName: System.Single.PositiveInfinity\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PositiveInfinity\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 35\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents positive infinity. This field is constant.</p>\\n\"\n  syntax:\n    content: public const float PositiveInfinity = InfinityF\n    content.vb: Public Const PositiveInfinity As Single = InfinityF\n    return:\n      type: System.Single\n  seealso:\n  - type: System.Single.IsPositiveInfinity(System.Single)\n    commentId: M:System.Single.IsPositiveInfinity(System.Single)\n  - type: System.Single.IsInfinity(System.Single)\n    commentId: M:System.Single.IsInfinity(System.Single)\n  - type: System.Single.NegativeInfinity\n    commentId: F:System.Single.NegativeInfinity\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: Single.PositiveInfinity\n- uid: System.Single.NegativeInfinity\n  commentId: F:System.Single.NegativeInfinity\n  id: NegativeInfinity\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: NegativeInfinity\n  fullName: System.Single.NegativeInfinity\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: NegativeInfinity\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 36\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents negative infinity. This field is constant.</p>\\n\"\n  syntax:\n    content: public const float NegativeInfinity = -InfinityF\n    content.vb: Public Const NegativeInfinity As Single = -InfinityF\n    return:\n      type: System.Single\n  seealso:\n  - type: System.Single.IsNegativeInfinity(System.Single)\n    commentId: M:System.Single.IsNegativeInfinity(System.Single)\n  - type: System.Single.IsInfinity(System.Single)\n    commentId: M:System.Single.IsInfinity(System.Single)\n  - type: System.Single.PositiveInfinity\n    commentId: F:System.Single.PositiveInfinity\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: Single.NegativeInfinity\n- uid: System.Single.NaN\n  commentId: F:System.Single.NaN\n  id: NaN\n  parent: System.Single\n  langs:\n  - csharp\n  - vb\n  name: NaN\n  fullName: System.Single.NaN\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Single.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: NaN\n    path: src/mscorlib/src/System/Single.cs\n    startLine: 37\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents not a number (<strong>NaN</strong>). This field is constant.</p>\\n\"\n  syntax:\n    content: public const float NaN = NaNF\n    content.vb: Public Const NaN As Single = NaNF\n    return:\n      type: System.Single\n  seealso:\n  - type: System.Single.IsNaN(System.Single)\n    commentId: M:System.Single.IsNaN(System.Single)\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: Single.NaN\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.IComparable\n  parent: System\n  isExternal: false\n  name: IComparable\n  fullName: System.IComparable\n  nameWithType: IComparable\n  commentId: T:System.IComparable\n- uid: System.IComparable{System.Single}\n  parent: System\n  definition: System.IComparable`1\n  name: IComparable<Single>\n  fullName: System.IComparable<System.Single>\n  fullname.vb: System.IComparable(Of System.Single)\n  name.vb: IComparable(Of Single)\n  spec.csharp:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: <\n    fullName: <\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable<Single>\n  nameWithType.vb: IComparable(Of Single)\n  commentId: T:System.IComparable{System.Single}\n- uid: System.IConvertible\n  parent: System\n  isExternal: false\n  name: IConvertible\n  fullName: System.IConvertible\n  nameWithType: IConvertible\n  commentId: T:System.IConvertible\n- uid: System.IEquatable{System.Single}\n  parent: System\n  definition: System.IEquatable`1\n  name: IEquatable<Single>\n  fullName: System.IEquatable<System.Single>\n  fullname.vb: System.IEquatable(Of System.Single)\n  name.vb: IEquatable(Of Single)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<Single>\n  nameWithType.vb: IEquatable(Of Single)\n  commentId: T:System.IEquatable{System.Single}\n- uid: System.IFormattable\n  parent: System\n  isExternal: false\n  name: IFormattable\n  fullName: System.IFormattable\n  nameWithType: IFormattable\n  commentId: T:System.IFormattable\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.IComparable`1\n  isExternal: false\n  name: IComparable<T>\n  fullName: System.IComparable<T>\n  fullname.vb: System.IComparable(Of T)\n  name.vb: IComparable(Of T)\n  spec.csharp:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IComparable<T>\n  nameWithType.vb: IComparable(Of T)\n  commentId: T:System.IComparable`1\n- uid: System.IEquatable`1\n  isExternal: false\n  name: IEquatable<T>\n  fullName: System.IEquatable<T>\n  fullname.vb: System.IEquatable(Of T)\n  name.vb: IEquatable(Of T)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<T>\n  nameWithType.vb: IEquatable(Of T)\n  commentId: T:System.IEquatable`1\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IComparable{System.Single}.CompareTo(System.Single)\n  parent: System.IComparable{System.Single}\n  definition: System.IComparable`1.CompareTo(`0)\n  name: CompareTo(Single)\n  fullName: System.IComparable<System.Single>.CompareTo(System.Single)\n  fullname.vb: System.IComparable(Of System.Single).CompareTo(System.Single)\n  spec.csharp:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable<System.Single>.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable(Of System.Single).CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable<Single>.CompareTo(Single)\n  nameWithType.vb: IComparable(Of Single).CompareTo(Single)\n  commentId: M:System.IComparable{System.Single}.CompareTo(System.Single)\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  nameWithType: Single\n  commentId: T:System.Single\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.IComparable`1.CompareTo(`0)\n  isExternal: false\n  name: CompareTo(T)\n  fullName: System.IComparable<T>.CompareTo(T)\n  fullname.vb: System.IComparable(Of T).CompareTo(T)\n  spec.csharp:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable<T>.CompareTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable(Of T).CompareTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IComparable<T>.CompareTo(T)\n  nameWithType.vb: IComparable(Of T).CompareTo(T)\n  commentId: M:System.IComparable`1.CompareTo(`0)\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.IEquatable{System.Single}.Equals(System.Single)\n  parent: System.IEquatable{System.Single}\n  definition: System.IEquatable`1.Equals(`0)\n  name: Equals(Single)\n  fullName: System.IEquatable<System.Single>.Equals(System.Single)\n  fullname.vb: System.IEquatable(Of System.Single).Equals(System.Single)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<System.Single>.Equals\n  - name: (\n    fullName: (\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of System.Single).Equals\n  - name: (\n    fullName: (\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<Single>.Equals(Single)\n  nameWithType.vb: IEquatable(Of Single).Equals(Single)\n  commentId: M:System.IEquatable{System.Single}.Equals(System.Single)\n- uid: System.IEquatable`1.Equals(`0)\n  isExternal: false\n  name: Equals(T)\n  fullName: System.IEquatable<T>.Equals(T)\n  fullname.vb: System.IEquatable(Of T).Equals(T)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<T>.Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of T).Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<T>.Equals(T)\n  nameWithType.vb: IEquatable(Of T).Equals(T)\n  commentId: M:System.IEquatable`1.Equals(`0)\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Globalization.NumberStyles\n  parent: System.Globalization\n  isExternal: false\n  name: NumberStyles\n  fullName: System.Globalization.NumberStyles\n  nameWithType: NumberStyles\n  commentId: T:System.Globalization.NumberStyles\n- uid: System.Globalization\n  isExternal: false\n  name: System.Globalization\n  fullName: System.Globalization\n  nameWithType: System.Globalization\n  commentId: N:System.Globalization\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: false\n  name: IFormatProvider\n  fullName: System.IFormatProvider\n  nameWithType: IFormatProvider\n  commentId: T:System.IFormatProvider\n- uid: System.IComparable.CompareTo(System.Object)\n  parent: System.IComparable\n  isExternal: true\n  name: CompareTo(Object)\n  fullName: System.IComparable.CompareTo(System.Object)\n  spec.csharp:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable.CompareTo(Object)\n  commentId: M:System.IComparable.CompareTo(System.Object)\n- uid: System.IConvertible.GetTypeCode\n  parent: System.IConvertible\n  isExternal: false\n  name: GetTypeCode()\n  fullName: System.IConvertible.GetTypeCode()\n  spec.csharp:\n  - uid: System.IConvertible.GetTypeCode\n    name: GetTypeCode\n    fullName: System.IConvertible.GetTypeCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.GetTypeCode\n    name: GetTypeCode\n    fullName: System.IConvertible.GetTypeCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.GetTypeCode()\n  commentId: M:System.IConvertible.GetTypeCode\n- uid: System.TypeCode\n  parent: System\n  isExternal: false\n  name: TypeCode\n  fullName: System.TypeCode\n  nameWithType: TypeCode\n  commentId: T:System.TypeCode\n- uid: System.IConvertible.ToBoolean(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToBoolean(IFormatProvider)\n  fullName: System.IConvertible.ToBoolean(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToBoolean(System.IFormatProvider)\n    name: ToBoolean\n    fullName: System.IConvertible.ToBoolean\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToBoolean(System.IFormatProvider)\n    name: ToBoolean\n    fullName: System.IConvertible.ToBoolean\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToBoolean(IFormatProvider)\n  commentId: M:System.IConvertible.ToBoolean(System.IFormatProvider)\n- uid: System.IConvertible.ToByte(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToByte(IFormatProvider)\n  fullName: System.IConvertible.ToByte(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToByte(System.IFormatProvider)\n    name: ToByte\n    fullName: System.IConvertible.ToByte\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToByte(System.IFormatProvider)\n    name: ToByte\n    fullName: System.IConvertible.ToByte\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToByte(IFormatProvider)\n  commentId: M:System.IConvertible.ToByte(System.IFormatProvider)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  nameWithType: Byte\n  commentId: T:System.Byte\n- uid: System.IConvertible.ToChar(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToChar(IFormatProvider)\n  fullName: System.IConvertible.ToChar(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToChar(System.IFormatProvider)\n    name: ToChar\n    fullName: System.IConvertible.ToChar\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToChar(System.IFormatProvider)\n    name: ToChar\n    fullName: System.IConvertible.ToChar\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToChar(IFormatProvider)\n  commentId: M:System.IConvertible.ToChar(System.IFormatProvider)\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  nameWithType: Char\n  commentId: T:System.Char\n- uid: System.IConvertible.ToDateTime(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToDateTime(IFormatProvider)\n  fullName: System.IConvertible.ToDateTime(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToDateTime(System.IFormatProvider)\n    name: ToDateTime\n    fullName: System.IConvertible.ToDateTime\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToDateTime(System.IFormatProvider)\n    name: ToDateTime\n    fullName: System.IConvertible.ToDateTime\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToDateTime(IFormatProvider)\n  commentId: M:System.IConvertible.ToDateTime(System.IFormatProvider)\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  fullName: System.DateTime\n  nameWithType: DateTime\n  commentId: T:System.DateTime\n- uid: System.IConvertible.ToDecimal(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToDecimal(IFormatProvider)\n  fullName: System.IConvertible.ToDecimal(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToDecimal(System.IFormatProvider)\n    name: ToDecimal\n    fullName: System.IConvertible.ToDecimal\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToDecimal(System.IFormatProvider)\n    name: ToDecimal\n    fullName: System.IConvertible.ToDecimal\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToDecimal(IFormatProvider)\n  commentId: M:System.IConvertible.ToDecimal(System.IFormatProvider)\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  fullName: System.Decimal\n  nameWithType: Decimal\n  commentId: T:System.Decimal\n- uid: System.IConvertible.ToDouble(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToDouble(IFormatProvider)\n  fullName: System.IConvertible.ToDouble(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToDouble(System.IFormatProvider)\n    name: ToDouble\n    fullName: System.IConvertible.ToDouble\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToDouble(System.IFormatProvider)\n    name: ToDouble\n    fullName: System.IConvertible.ToDouble\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToDouble(IFormatProvider)\n  commentId: M:System.IConvertible.ToDouble(System.IFormatProvider)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  nameWithType: Double\n  commentId: T:System.Double\n- uid: System.IConvertible.ToInt16(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToInt16(IFormatProvider)\n  fullName: System.IConvertible.ToInt16(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToInt16(System.IFormatProvider)\n    name: ToInt16\n    fullName: System.IConvertible.ToInt16\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToInt16(System.IFormatProvider)\n    name: ToInt16\n    fullName: System.IConvertible.ToInt16\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToInt16(IFormatProvider)\n  commentId: M:System.IConvertible.ToInt16(System.IFormatProvider)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  nameWithType: Int16\n  commentId: T:System.Int16\n- uid: System.IConvertible.ToInt32(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToInt32(IFormatProvider)\n  fullName: System.IConvertible.ToInt32(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToInt32(System.IFormatProvider)\n    name: ToInt32\n    fullName: System.IConvertible.ToInt32\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToInt32(System.IFormatProvider)\n    name: ToInt32\n    fullName: System.IConvertible.ToInt32\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToInt32(IFormatProvider)\n  commentId: M:System.IConvertible.ToInt32(System.IFormatProvider)\n- uid: System.IConvertible.ToInt64(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToInt64(IFormatProvider)\n  fullName: System.IConvertible.ToInt64(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToInt64(System.IFormatProvider)\n    name: ToInt64\n    fullName: System.IConvertible.ToInt64\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToInt64(System.IFormatProvider)\n    name: ToInt64\n    fullName: System.IConvertible.ToInt64\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToInt64(IFormatProvider)\n  commentId: M:System.IConvertible.ToInt64(System.IFormatProvider)\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.IConvertible.ToSByte(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToSByte(IFormatProvider)\n  fullName: System.IConvertible.ToSByte(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToSByte(System.IFormatProvider)\n    name: ToSByte\n    fullName: System.IConvertible.ToSByte\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToSByte(System.IFormatProvider)\n    name: ToSByte\n    fullName: System.IConvertible.ToSByte\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToSByte(IFormatProvider)\n  commentId: M:System.IConvertible.ToSByte(System.IFormatProvider)\n- uid: System.SByte\n  parent: System\n  isExternal: false\n  name: SByte\n  fullName: System.SByte\n  nameWithType: SByte\n  commentId: T:System.SByte\n- uid: System.IConvertible.ToSingle(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToSingle(IFormatProvider)\n  fullName: System.IConvertible.ToSingle(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToSingle(System.IFormatProvider)\n    name: ToSingle\n    fullName: System.IConvertible.ToSingle\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToSingle(System.IFormatProvider)\n    name: ToSingle\n    fullName: System.IConvertible.ToSingle\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToSingle(IFormatProvider)\n  commentId: M:System.IConvertible.ToSingle(System.IFormatProvider)\n- uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToType(Type, IFormatProvider)\n  fullName: System.IConvertible.ToType(System.Type, System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)\n    name: ToType\n    fullName: System.IConvertible.ToType\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)\n    name: ToType\n    fullName: System.IConvertible.ToType\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToType(Type, IFormatProvider)\n  commentId: M:System.IConvertible.ToType(System.Type,System.IFormatProvider)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.IConvertible.ToUInt16(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToUInt16(IFormatProvider)\n  fullName: System.IConvertible.ToUInt16(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToUInt16(System.IFormatProvider)\n    name: ToUInt16\n    fullName: System.IConvertible.ToUInt16\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToUInt16(System.IFormatProvider)\n    name: ToUInt16\n    fullName: System.IConvertible.ToUInt16\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToUInt16(IFormatProvider)\n  commentId: M:System.IConvertible.ToUInt16(System.IFormatProvider)\n- uid: System.UInt16\n  parent: System\n  isExternal: false\n  name: UInt16\n  fullName: System.UInt16\n  nameWithType: UInt16\n  commentId: T:System.UInt16\n- uid: System.IConvertible.ToUInt32(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToUInt32(IFormatProvider)\n  fullName: System.IConvertible.ToUInt32(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToUInt32(System.IFormatProvider)\n    name: ToUInt32\n    fullName: System.IConvertible.ToUInt32\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToUInt32(System.IFormatProvider)\n    name: ToUInt32\n    fullName: System.IConvertible.ToUInt32\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToUInt32(IFormatProvider)\n  commentId: M:System.IConvertible.ToUInt32(System.IFormatProvider)\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  fullName: System.UInt32\n  nameWithType: UInt32\n  commentId: T:System.UInt32\n- uid: System.IConvertible.ToUInt64(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToUInt64(IFormatProvider)\n  fullName: System.IConvertible.ToUInt64(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToUInt64(System.IFormatProvider)\n    name: ToUInt64\n    fullName: System.IConvertible.ToUInt64\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToUInt64(System.IFormatProvider)\n    name: ToUInt64\n    fullName: System.IConvertible.ToUInt64\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToUInt64(IFormatProvider)\n  commentId: M:System.IConvertible.ToUInt64(System.IFormatProvider)\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  fullName: System.UInt64\n  nameWithType: UInt64\n  commentId: T:System.UInt64\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.IConvertible.ToString(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToString(IFormatProvider)\n  fullName: System.IConvertible.ToString(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToString(System.IFormatProvider)\n    name: ToString\n    fullName: System.IConvertible.ToString\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToString(System.IFormatProvider)\n    name: ToString\n    fullName: System.IConvertible.ToString\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToString(IFormatProvider)\n  commentId: M:System.IConvertible.ToString(System.IFormatProvider)\n- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n  parent: System.IFormattable\n  isExternal: true\n  name: ToString(String, IFormatProvider)\n  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n    name: ToString\n    fullName: System.IFormattable.ToString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n    name: ToString\n    fullName: System.IFormattable.ToString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IFormattable.ToString(String, IFormatProvider)\n  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n- uid: System.OverflowException\n  isExternal: false\n  name: OverflowException\n  fullName: System.OverflowException\n  nameWithType: OverflowException\n  commentId: T:System.OverflowException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.InvalidCastException\n  isExternal: false\n  name: InvalidCastException\n  fullName: System.InvalidCastException\n  nameWithType: InvalidCastException\n  commentId: T:System.InvalidCastException\n"}