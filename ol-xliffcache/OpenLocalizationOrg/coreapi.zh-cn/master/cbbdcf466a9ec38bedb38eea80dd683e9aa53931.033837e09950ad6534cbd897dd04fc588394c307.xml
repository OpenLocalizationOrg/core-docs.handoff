{"nodes":[{"pos":[651,656],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[2189,2200],"content":"IsFixedSize","needQuote":true,"nodes":[{"content":"IsFixedSize","pos":[0,11]}]},{"pos":[3375,3385],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[4571,4582],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The zero-based index of the element to get or set.","pos":[5227,5282],"source":"\\n<p>The zero-based index of the element to get or set."},{"content":"&lt;/p&gt;\\n","pos":[5283,5289],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The element at the specified index.&lt;/p&gt;\\n","pos":[5349,5395],"source":"\\n<p>The element at the specified index.</p>\\n"},{"pos":[6307,6318],"content":"Add(Object)","needQuote":true,"nodes":[{"content":"Add(Object)","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.&lt;/p&gt;\\n","pos":[7181,7315],"source":"\\n<p>The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.</p>\\n"},{"pos":[7879,7886],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[8931,8947],"content":"Contains(Object)","needQuote":true,"nodes":[{"content":"Contains(Object)","pos":[0,16]}]},{"pos":[10375,10390],"content":"IndexOf(Object)","needQuote":true,"nodes":[{"content":"IndexOf(Object)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The index of &lt;em&gt;value&lt;/em&gt; if found in the list; otherwise, -1.&lt;/p&gt;\\n","pos":[11299,11374],"source":"\\n<p>The index of <em>value</em> if found in the list; otherwise, -1.</p>\\n"},{"pos":[11667,11688],"content":"Insert(Int32, Object)","needQuote":true,"nodes":[{"content":"Insert(Int32, Object)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The zero-based index at which &lt;em&gt;value&lt;/em&gt; should be inserted.","pos":[12435,12504],"source":"\\n<p>The zero-based index at which <em>value</em> should be inserted."},{"content":"&lt;/p&gt;\\n","pos":[12505,12511],"source":" </p>\\n"},{"pos":[13828,13842],"content":"Remove(Object)","needQuote":true,"nodes":[{"content":"Remove(Object)","pos":[0,14]}]},{"pos":[15305,15320],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The zero-based index of the item to remove.","pos":[16023,16071],"source":"\\n<p>The zero-based index of the item to remove."},{"content":"&lt;/p&gt;\\n","pos":[16072,16078],"source":" </p>\\n"},{"pos":[16805,16823],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[17037,17042],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[17300,17314],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[17593,17601],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[17886,17906],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"pos":[18084,18090],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[18153,18154],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18203,18208],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[18247,18248]},{"pos":[18302,18307],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[18366,18367],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18479,18485],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[18548,18549],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18598,18603],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[18642,18643]},{"pos":[18697,18702],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[18761,18762],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19029,19044],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[19183,19196],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[19266,19267],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19294,19295],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19387,19400],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[19470,19471],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19498,19499],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19715,19726],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[19939,19950],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[20135,20142],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[20266,20272],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[20402,20407],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[20549,20555],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20704,20731],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[20954,20975],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[21164,21186],"content":"NullReferenceException","needQuote":true,"nodes":[{"content":"NullReferenceException","pos":[0,22]}]}],"content":"items:\n- uid: System.Collections.IList\n  commentId: T:System.Collections.IList\n  id: IList\n  parent: System.Collections\n  children:\n  - System.Collections.IList.Add(System.Object)\n  - System.Collections.IList.Clear\n  - System.Collections.IList.Contains(System.Object)\n  - System.Collections.IList.IndexOf(System.Object)\n  - System.Collections.IList.Insert(System.Int32,System.Object)\n  - System.Collections.IList.IsFixedSize\n  - System.Collections.IList.IsReadOnly\n  - System.Collections.IList.Item(System.Int32)\n  - System.Collections.IList.Remove(System.Object)\n  - System.Collections.IList.RemoveAt(System.Int32)\n  langs:\n  - csharp\n  - vb\n  name: IList\n  fullName: System.Collections.IList\n  type: Interface\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/IList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IList\n    path: src/mscorlib/src/System/Collections/IList.cs\n    startLine: 23\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Represents a non-generic collection of objects that can be individually accessed by index.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public interface IList : ICollection, IEnumerable\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Interface IList\n          Inherits ICollection\n  seealso:\n  - type: System.Collections.ArrayList\n    commentId: T:System.Collections.ArrayList\n  - type: System.Collections.ICollection\n    commentId: T:System.Collections.ICollection\n  - type: System.Collections.Generic.IList`1\n    commentId: T:System.Collections.Generic.IList`1\n  inheritedMembers:\n  - System.Collections.ICollection.Count\n  - System.Collections.ICollection.IsSynchronized\n  - System.Collections.ICollection.SyncRoot\n  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  - System.Collections.IEnumerable.GetEnumerator\n  modifiers.csharp:\n  - public\n  - interface\n  modifiers.vb:\n  - Public\n  - Interface\n  nameWithType: IList\n- uid: System.Collections.IList.IsFixedSize\n  commentId: P:System.Collections.IList.IsFixedSize\n  id: IsFixedSize\n  parent: System.Collections.IList\n  langs:\n  - csharp\n  - vb\n  name: IsFixedSize\n  fullName: System.Collections.IList.IsFixedSize\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/IList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsFixedSize\n    path: src/mscorlib/src/System/Collections/IList.cs\n    startLine: 48\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size.</p>\\n\"\n  syntax:\n    content: bool IsFixedSize { get; }\n    content.vb: ReadOnly Property IsFixedSize As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  nameWithType: IList.IsFixedSize\n- uid: System.Collections.IList.IsReadOnly\n  commentId: P:System.Collections.IList.IsReadOnly\n  id: IsReadOnly\n  parent: System.Collections.IList\n  langs:\n  - csharp\n  - vb\n  name: IsReadOnly\n  fullName: System.Collections.IList.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/IList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsReadOnly\n    path: src/mscorlib/src/System/Collections/IList.cs\n    startLine: 44\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n\"\n  syntax:\n    content: bool IsReadOnly { get; }\n    content.vb: ReadOnly Property IsReadOnly As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  nameWithType: IList.IsReadOnly\n- uid: System.Collections.IList.Item(System.Int32)\n  commentId: P:System.Collections.IList.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Collections.IList\n  langs:\n  - csharp\n  - vb\n  name: Item[Int32]\n  fullName: System.Collections.IList.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/IList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: this[]\n    path: src/mscorlib/src/System/Collections/IList.cs\n    startLine: 27\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Gets or sets the element at the specified index.</p>\\n\"\n  syntax:\n    content: object this[int index] { get; set; }\n    content.vb: Property Item(index As Integer) As Object\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the element to get or set. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The element at the specified index.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is not a valid index in the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The property is set and the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only. </p>\\n\"\n  modifiers.csharp:\n  - get\n  - set\n  fullName.vb: System.Collections.IList.Item(System.Int32)\n  name.vb: Item(Int32)\n  nameWithType: IList.Item[Int32]\n  nameWithType.vb: IList.Item(Int32)\n- uid: System.Collections.IList.Add(System.Object)\n  commentId: M:System.Collections.IList.Add(System.Object)\n  id: Add(System.Object)\n  parent: System.Collections.IList\n  langs:\n  - csharp\n  - vb\n  name: Add(Object)\n  fullName: System.Collections.IList.Add(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/IList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Add\n    path: src/mscorlib/src/System/Collections/IList.cs\n    startLine: 36\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Adds an item to the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: int Add(object value)\n    content.vb: Function Add(value As Object) As Integer\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to add to the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  nameWithType: IList.Add(Object)\n- uid: System.Collections.IList.Clear\n  commentId: M:System.Collections.IList.Clear\n  id: Clear\n  parent: System.Collections.IList\n  langs:\n  - csharp\n  - vb\n  name: Clear()\n  fullName: System.Collections.IList.Clear()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/IList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Clear\n    path: src/mscorlib/src/System/Collections/IList.cs\n    startLine: 42\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Removes all items from the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: void Clear()\n    content.vb: Sub Clear\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only. </p>\\n\"\n  nameWithType: IList.Clear()\n- uid: System.Collections.IList.Contains(System.Object)\n  commentId: M:System.Collections.IList.Contains(System.Object)\n  id: Contains(System.Object)\n  parent: System.Collections.IList\n  langs:\n  - csharp\n  - vb\n  name: Contains(Object)\n  fullName: System.Collections.IList.Contains(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/IList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Contains\n    path: src/mscorlib/src/System/Collections/IList.cs\n    startLine: 39\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Determines whether the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains a specific value.</p>\\n\"\n  syntax:\n    content: bool Contains(object value)\n    content.vb: Function Contains(value As Object) As Boolean\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to locate in the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is found in the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  nameWithType: IList.Contains(Object)\n- uid: System.Collections.IList.IndexOf(System.Object)\n  commentId: M:System.Collections.IList.IndexOf(System.Object)\n  id: IndexOf(System.Object)\n  parent: System.Collections.IList\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(Object)\n  fullName: System.Collections.IList.IndexOf(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/IList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/Collections/IList.cs\n    startLine: 56\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Determines the index of a specific item in the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: int IndexOf(object value)\n    content.vb: Function IndexOf(value As Object) As Integer\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to locate in the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of <em>value</em> if found in the list; otherwise, -1.</p>\\n\"\n  nameWithType: IList.IndexOf(Object)\n- uid: System.Collections.IList.Insert(System.Int32,System.Object)\n  commentId: M:System.Collections.IList.Insert(System.Int32,System.Object)\n  id: Insert(System.Int32,System.Object)\n  parent: System.Collections.IList\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, Object)\n  fullName: System.Collections.IList.Insert(System.Int32, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/IList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Insert\n    path: src/mscorlib/src/System/Collections/IList.cs\n    startLine: 62\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Inserts an item to the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the specified index.</p>\\n\"\n  syntax:\n    content: void Insert(int index, object value)\n    content.vb: Sub Insert(index As Integer, value As Object)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index at which <em>value</em> should be inserted. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to insert into the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is not a valid index in the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: \"\\n<p>\\n<em>value</em> is null reference in the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  nameWithType: IList.Insert(Int32, Object)\n- uid: System.Collections.IList.Remove(System.Object)\n  commentId: M:System.Collections.IList.Remove(System.Object)\n  id: Remove(System.Object)\n  parent: System.Collections.IList\n  langs:\n  - csharp\n  - vb\n  name: Remove(Object)\n  fullName: System.Collections.IList.Remove(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/IList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Remove\n    path: src/mscorlib/src/System/Collections/IList.cs\n    startLine: 65\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Removes the first occurrence of a specific object from the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: void Remove(object value)\n    content.vb: Sub Remove(value As Object)\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to remove from the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  nameWithType: IList.Remove(Object)\n- uid: System.Collections.IList.RemoveAt(System.Int32)\n  commentId: M:System.Collections.IList.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Collections.IList\n  langs:\n  - csharp\n  - vb\n  name: RemoveAt(Int32)\n  fullName: System.Collections.IList.RemoveAt(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/IList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RemoveAt\n    path: src/mscorlib/src/System/Collections/IList.cs\n    startLine: 68\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Removes the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> item at the specified index.</p>\\n\"\n  syntax:\n    content: void RemoveAt(int index)\n    content.vb: Sub RemoveAt(index As Integer)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the item to remove. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is not a valid index in the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  nameWithType: IList.RemoveAt(Int32)\nreferences:\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Collections.ICollection.Count\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: Count\n  fullName: System.Collections.ICollection.Count\n  nameWithType: ICollection.Count\n  commentId: P:System.Collections.ICollection.Count\n- uid: System.Collections.ICollection.IsSynchronized\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Collections.ICollection.IsSynchronized\n  nameWithType: ICollection.IsSynchronized\n  commentId: P:System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.ICollection.SyncRoot\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Collections.ICollection.SyncRoot\n  nameWithType: ICollection.SyncRoot\n  commentId: P:System.Collections.ICollection.SyncRoot\n- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ICollection\n  isExternal: true\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  spec.csharp:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection.CopyTo(Array, Int32)\n  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable.GetEnumerator()\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  nameWithType: ICollection\n  commentId: T:System.Collections.ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.NullReferenceException\n  isExternal: false\n  name: NullReferenceException\n  fullName: System.NullReferenceException\n  nameWithType: NullReferenceException\n  commentId: T:System.NullReferenceException\n"}