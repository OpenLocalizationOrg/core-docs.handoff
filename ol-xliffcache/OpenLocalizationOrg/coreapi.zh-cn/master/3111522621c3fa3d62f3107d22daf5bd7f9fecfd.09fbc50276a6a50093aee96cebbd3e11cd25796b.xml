{"nodes":[{"pos":[976,1008],"content":"ConcurrentExclusiveSchedulerPair","needQuote":true,"nodes":[{"content":"ConcurrentExclusiveSchedulerPair","pos":[0,32]}]},{"pos":[3112,3146],"content":"ConcurrentExclusiveSchedulerPair()","needQuote":true,"nodes":[{"content":"ConcurrentExclusiveSchedulerPair()","pos":[0,34]}]},{"pos":[4440,4487],"content":"ConcurrentExclusiveSchedulerPair(TaskScheduler)","needQuote":true,"nodes":[{"content":"ConcurrentExclusiveSchedulerPair(TaskScheduler)","pos":[0,47]}]},{"content":"\\n&lt;p&gt;The target scheduler on which this pair should execute.&lt;/p&gt;\\n","pos":[5505,5571],"source":"\\n<p>The target scheduler on which this pair should execute.</p>\\n"},{"pos":[6142,6196],"content":"ConcurrentExclusiveSchedulerPair(TaskScheduler, Int32)","needQuote":true,"nodes":[{"content":"ConcurrentExclusiveSchedulerPair(TaskScheduler, Int32)","pos":[0,54]}]},{"content":"\\n&lt;p&gt;The target scheduler on which this pair should execute.&lt;/p&gt;\\n","pos":[7318,7384],"source":"\\n<p>The target scheduler on which this pair should execute.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of tasks to run concurrently.&lt;/p&gt;\\n","pos":[7461,7520],"source":"\\n<p>The maximum number of tasks to run concurrently.</p>\\n"},{"pos":[8137,8198],"content":"ConcurrentExclusiveSchedulerPair(TaskScheduler, Int32, Int32)","needQuote":true,"nodes":[{"content":"ConcurrentExclusiveSchedulerPair(TaskScheduler, Int32, Int32)","pos":[0,61]}]},{"content":"\\n&lt;p&gt;The target scheduler on which this pair should execute.&lt;/p&gt;\\n","pos":[9456,9522],"source":"\\n<p>The target scheduler on which this pair should execute.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of tasks to run concurrently.&lt;/p&gt;\\n","pos":[9599,9658],"source":"\\n<p>The maximum number of tasks to run concurrently.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of tasks to process for each underlying scheduled task used by the pair.&lt;/p&gt;\\n","pos":[9731,9833],"source":"\\n<p>The maximum number of tasks to process for each underlying scheduled task used by the pair.</p>\\n"},{"pos":[10278,10288],"content":"Completion","needQuote":true,"nodes":[{"content":"Completion","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The asynchronous operation that will complete when the scheduler finishes processing.&lt;/p&gt;\\n","pos":[11156,11252],"source":"\\n<p>The asynchronous operation that will complete when the scheduler finishes processing.</p>\\n"},{"pos":[11694,11713],"content":"ConcurrentScheduler","needQuote":true,"nodes":[{"content":"ConcurrentScheduler","pos":[0,19]}]},{"content":"\\n&lt;p&gt;An object that can be used to schedule tasks concurrently.&lt;/p&gt;\\n","pos":[12694,12763],"source":"\\n<p>An object that can be used to schedule tasks concurrently.</p>\\n"},{"pos":[13211,13229],"content":"ExclusiveScheduler","needQuote":true,"nodes":[{"content":"ExclusiveScheduler","pos":[0,18]}]},{"content":"\\n&lt;p&gt;An object that can be used to schedule tasks that do not run concurrently with other tasks.&lt;/p&gt;\\n","pos":[14217,14319],"source":"\\n<p>An object that can be used to schedule tasks that do not run concurrently with other tasks.</p>\\n"},{"pos":[14736,14746],"content":"Complete()","needQuote":true,"nodes":[{"content":"Complete()","pos":[0,10]}]},{"pos":[15584,15606],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[15785,15791],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15951,15961],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[16056,16064],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[16133,16134],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16161,16162],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16232,16240],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[16309,16310],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16337,16338],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16521,16535],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[16654,16660],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16727,16728],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16778,16784],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16844,16845],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16928,16934],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17001,17002],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17052,17058],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17118,17119],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17333,17355],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[17503,17509],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17576,17577],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17627,17633],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17694,17695]},{"pos":[17750,17756],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17816,17817],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17914,17920],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17987,17988],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18038,18044],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18105,18106]},{"pos":[18161,18167],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18227,18228],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18473,18504],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[18670,18685],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[18761,18762],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18812,18818],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18879,18880]},{"pos":[18935,18941],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19001,19002],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19108,19123],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[19199,19200],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19250,19256],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19317,19318]},{"pos":[19373,19379],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19439,19440],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19670,19683],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[19784,19795],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[19867,19868],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19895,19896],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19969,19980],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[20052,20053],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20080,20081],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20256,20265],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[20358,20365],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[20433,20434],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20461,20462],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20531,20538],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[20606,20607],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20634,20635],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20810,20827],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[20936,20951],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[21027,21028],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21055,21056],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21133,21148],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[21224,21225],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21252,21253],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21398,21404],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[21574,21587],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[21784,21789],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[21961,21965],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]}],"content":"items:\n- uid: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair\n  commentId: T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair\n  id: ConcurrentExclusiveSchedulerPair\n  parent: System.Threading.Tasks\n  children:\n  - System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor\n  - System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32)\n  - System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32,System.Int32)\n  - System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Complete\n  - System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Completion\n  - System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentScheduler\n  - System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ExclusiveScheduler\n  langs:\n  - csharp\n  - vb\n  name: ConcurrentExclusiveSchedulerPair\n  fullName: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/ConcurrentExclusiveSchedulerPair.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ConcurrentExclusiveSchedulerPair\n    path: src/mscorlib/src/System/Threading/Tasks/ConcurrentExclusiveSchedulerPair.cs\n    startLine: 30\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Provides task schedulers that coordinate to execute tasks while ensuring that concurrent tasks may run concurrently and exclusive tasks never do.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(Synchronization = true, ExternalThreading = true)]\n\n      [DebuggerDisplay(\"Concurrent={ConcurrentTaskCountForDebugger}, Exclusive={ExclusiveTaskCountForDebugger}, Mode={ModeForDebugger}\")]\n\n      [DebuggerTypeProxy(typeof (ConcurrentExclusiveSchedulerPair.DebugView))]\n\n      public class ConcurrentExclusiveSchedulerPair\n    content.vb: >-\n      <HostProtection(Synchronization:=True, ExternalThreading:=True)>\n\n      <DebuggerDisplay(\"Concurrent={ConcurrentTaskCountForDebugger}, Exclusive={ExclusiveTaskCountForDebugger}, Mode={ModeForDebugger}\")>\n\n      <DebuggerTypeProxy(GetType(ConcurrentExclusiveSchedulerPair.DebugView))>\n\n      Public Class ConcurrentExclusiveSchedulerPair\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: ConcurrentExclusiveSchedulerPair\n- uid: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor\n  commentId: M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor\n  id: '#ctor'\n  parent: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair\n  langs:\n  - csharp\n  - vb\n  name: ConcurrentExclusiveSchedulerPair()\n  fullName: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveSchedulerPair()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/ConcurrentExclusiveSchedulerPair.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/ConcurrentExclusiveSchedulerPair.cs\n    startLine: 75\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Threading.Tasks.ConcurrentExclusiveSchedulerPair\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public ConcurrentExclusiveSchedulerPair()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveSchedulerPair()\n- uid: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler)\n  id: '#ctor(System.Threading.Tasks.TaskScheduler)'\n  parent: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair\n  langs:\n  - csharp\n  - vb\n  name: ConcurrentExclusiveSchedulerPair(TaskScheduler)\n  fullName: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveSchedulerPair(System.Threading.Tasks.TaskScheduler)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/ConcurrentExclusiveSchedulerPair.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/ConcurrentExclusiveSchedulerPair.cs\n    startLine: 82\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Threading.Tasks.ConcurrentExclusiveSchedulerPair\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that targets the specified scheduler.</p>\\n\"\n  syntax:\n    content: public ConcurrentExclusiveSchedulerPair(TaskScheduler taskScheduler)\n    content.vb: Public Sub New(taskScheduler As TaskScheduler)\n    parameters:\n    - id: taskScheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The target scheduler on which this pair should execute.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveSchedulerPair(TaskScheduler)\n- uid: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32)\n  commentId: M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32)\n  id: '#ctor(System.Threading.Tasks.TaskScheduler,System.Int32)'\n  parent: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair\n  langs:\n  - csharp\n  - vb\n  name: ConcurrentExclusiveSchedulerPair(TaskScheduler, Int32)\n  fullName: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveSchedulerPair(System.Threading.Tasks.TaskScheduler, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/ConcurrentExclusiveSchedulerPair.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/ConcurrentExclusiveSchedulerPair.cs\n    startLine: 90\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Threading.Tasks.ConcurrentExclusiveSchedulerPair\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that targets the specified scheduler with a maximum concurrency level.</p>\\n\"\n  syntax:\n    content: public ConcurrentExclusiveSchedulerPair(TaskScheduler taskScheduler, int maxConcurrencyLevel)\n    content.vb: Public Sub New(taskScheduler As TaskScheduler, maxConcurrencyLevel As Integer)\n    parameters:\n    - id: taskScheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The target scheduler on which this pair should execute.</p>\\n\"\n    - id: maxConcurrencyLevel\n      type: System.Int32\n      description: \"\\n<p>The maximum number of tasks to run concurrently.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveSchedulerPair(TaskScheduler, Int32)\n- uid: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32,System.Int32)\n  commentId: M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32,System.Int32)\n  id: '#ctor(System.Threading.Tasks.TaskScheduler,System.Int32,System.Int32)'\n  parent: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair\n  langs:\n  - csharp\n  - vb\n  name: ConcurrentExclusiveSchedulerPair(TaskScheduler, Int32, Int32)\n  fullName: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveSchedulerPair(System.Threading.Tasks.TaskScheduler, System.Int32, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/ConcurrentExclusiveSchedulerPair.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/ConcurrentExclusiveSchedulerPair.cs\n    startLine: 100\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Threading.Tasks.ConcurrentExclusiveSchedulerPair\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that targets the specified scheduler with a maximum concurrency level and a maximum number of scheduled tasks that may be processed as a unit.</p>\\n\"\n  syntax:\n    content: public ConcurrentExclusiveSchedulerPair(TaskScheduler taskScheduler, int maxConcurrencyLevel, int maxItemsPerTask)\n    content.vb: Public Sub New(taskScheduler As TaskScheduler, maxConcurrencyLevel As Integer, maxItemsPerTask As Integer)\n    parameters:\n    - id: taskScheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The target scheduler on which this pair should execute.</p>\\n\"\n    - id: maxConcurrencyLevel\n      type: System.Int32\n      description: \"\\n<p>The maximum number of tasks to run concurrently.</p>\\n\"\n    - id: maxItemsPerTask\n      type: System.Int32\n      description: \"\\n<p>The maximum number of tasks to process for each underlying scheduled task used by the pair.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ConcurrentExclusiveSchedulerPair.ConcurrentExclusiveSchedulerPair(TaskScheduler, Int32, Int32)\n- uid: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Completion\n  commentId: P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Completion\n  id: Completion\n  parent: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair\n  langs:\n  - csharp\n  - vb\n  name: Completion\n  fullName: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Completion\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/ConcurrentExclusiveSchedulerPair.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Completion\n    path: src/mscorlib/src/System/Threading/Tasks/ConcurrentExclusiveSchedulerPair.cs\n    startLine: 145\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will complete when the scheduler has completed processing.</p>\\n\"\n  syntax:\n    content: public Task Completion { get; }\n    content.vb: Public ReadOnly Property Completion As Task\n    parameters: []\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The asynchronous operation that will complete when the scheduler finishes processing.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ConcurrentExclusiveSchedulerPair.Completion\n- uid: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentScheduler\n  commentId: P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentScheduler\n  id: ConcurrentScheduler\n  parent: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair\n  langs:\n  - csharp\n  - vb\n  name: ConcurrentScheduler\n  fullName: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentScheduler\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/ConcurrentExclusiveSchedulerPair.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ConcurrentScheduler\n    path: src/mscorlib/src/System/Threading/Tasks/ConcurrentExclusiveSchedulerPair.cs\n    startLine: 247\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can be used to schedule tasks to this pair that may run concurrently with other tasks on this pair.</p>\\n\"\n  syntax:\n    content: public TaskScheduler ConcurrentScheduler { get; }\n    content.vb: Public ReadOnly Property ConcurrentScheduler As TaskScheduler\n    parameters: []\n    return:\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>An object that can be used to schedule tasks concurrently.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ConcurrentExclusiveSchedulerPair.ConcurrentScheduler\n- uid: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ExclusiveScheduler\n  commentId: P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ExclusiveScheduler\n  id: ExclusiveScheduler\n  parent: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair\n  langs:\n  - csharp\n  - vb\n  name: ExclusiveScheduler\n  fullName: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ExclusiveScheduler\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/ConcurrentExclusiveSchedulerPair.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ExclusiveScheduler\n    path: src/mscorlib/src/System/Threading/Tasks/ConcurrentExclusiveSchedulerPair.cs\n    startLine: 252\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can be used to schedule tasks to this pair that must run exclusively with regards to other tasks on this pair.</p>\\n\"\n  syntax:\n    content: public TaskScheduler ExclusiveScheduler { get; }\n    content.vb: Public ReadOnly Property ExclusiveScheduler As TaskScheduler\n    parameters: []\n    return:\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>An object that can be used to schedule tasks that do not run concurrently with other tasks.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ConcurrentExclusiveSchedulerPair.ExclusiveScheduler\n- uid: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Complete\n  commentId: M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Complete\n  id: Complete\n  parent: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair\n  langs:\n  - csharp\n  - vb\n  name: Complete()\n  fullName: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Complete()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/ConcurrentExclusiveSchedulerPair.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Complete\n    path: src/mscorlib/src/System/Threading/Tasks/ConcurrentExclusiveSchedulerPair.cs\n    startLine: 132\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Informs the scheduler pair that it should not accept any more tasks.</p>\\n\"\n  syntax:\n    content: public void Complete()\n    content.vb: Public Sub Complete\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ConcurrentExclusiveSchedulerPair.Complete()\nreferences:\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Threading.Tasks.TaskScheduler\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskScheduler\n  fullName: System.Threading.Tasks.TaskScheduler\n  nameWithType: TaskScheduler\n  commentId: T:System.Threading.Tasks.TaskScheduler\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  fullName: System.Threading.Tasks.Task\n  nameWithType: Task\n  commentId: T:System.Threading.Tasks.Task\n"}