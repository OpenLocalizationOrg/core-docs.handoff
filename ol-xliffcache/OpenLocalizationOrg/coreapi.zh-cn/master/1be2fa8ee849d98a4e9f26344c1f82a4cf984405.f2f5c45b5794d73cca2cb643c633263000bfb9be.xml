{"nodes":[{"pos":[1159,1176],"content":"TypeListConverter","needQuote":true,"nodes":[{"content":"TypeListConverter","pos":[0,17]}]},{"pos":[5635,5660],"content":"TypeListConverter(Type[])","needQuote":true,"nodes":[{"content":"TypeListConverter(Type[])","pos":[0,25]}]},{"pos":[7436,7480],"content":"CanConvertFrom(ITypeDescriptorContext, Type)","needQuote":true,"nodes":[{"content":"CanConvertFrom(ITypeDescriptorContext, Type)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this converter can perform the conversion; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8983,9098],"source":"\\n<p>\\n<strong>true</strong> if this converter can perform the conversion; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[9793,9835],"content":"CanConvertTo(ITypeDescriptorContext, Type)","needQuote":true,"nodes":[{"content":"CanConvertTo(ITypeDescriptorContext, Type)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this converter can perform the conversion; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[11299,11414],"source":"\\n<p>\\n<strong>true</strong> if this converter can perform the conversion; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[12335,12391],"content":"ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)","needQuote":true,"nodes":[{"content":"ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)","pos":[0,56]}]},{"pos":[15065,15125],"content":"ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)","needQuote":true,"nodes":[{"content":"ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)","pos":[0,60]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;destinationType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[17462,17519],"source":"\\n<p>\\n<em>destinationType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[17520,17526],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The conversion cannot be performed.","pos":[17631,17671],"source":"\\n<p>The conversion cannot be performed."},{"content":"&lt;/p&gt;\\n","pos":[17672,17678],"source":" </p>\\n"},{"pos":[18245,18286],"content":"GetStandardValues(ITypeDescriptorContext)","needQuote":true,"nodes":[{"content":"GetStandardValues(ITypeDescriptorContext)","pos":[0,41]}]},{"pos":[20535,20585],"content":"GetStandardValuesExclusive(ITypeDescriptorContext)","needQuote":true,"nodes":[{"content":"GetStandardValuesExclusive(ITypeDescriptorContext)","pos":[0,50]}]},{"pos":[23137,23187],"content":"GetStandardValuesSupported(ITypeDescriptorContext)","needQuote":true,"nodes":[{"content":"GetStandardValuesSupported(ITypeDescriptorContext)","pos":[0,50]}]},{"pos":[25151,25172],"content":"System.ComponentModel","needQuote":true,"nodes":[{"content":"System.ComponentModel","pos":[0,21]}]},{"pos":[25348,25354],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25536,25549],"content":"TypeConverter","needQuote":true,"nodes":[{"content":"TypeConverter","pos":[0,13]}]},{"pos":[25823,25843],"content":"CanConvertFrom(Type)","needQuote":true,"nodes":[{"content":"CanConvertFrom(Type)","pos":[0,20]}]},{"pos":[26018,26032],"content":"CanConvertFrom","needQuote":true,"nodes":[{"content":"CanConvertFrom","pos":[0,14]}]},{"pos":[26108,26109],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26157,26161],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[26219,26220],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26331,26345],"content":"CanConvertFrom","needQuote":true,"nodes":[{"content":"CanConvertFrom","pos":[0,14]}]},{"pos":[26421,26422],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26470,26474],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[26532,26533],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26822,26840],"content":"CanConvertTo(Type)","needQuote":true,"nodes":[{"content":"CanConvertTo(Type)","pos":[0,18]}]},{"pos":[27011,27023],"content":"CanConvertTo","needQuote":true,"nodes":[{"content":"CanConvertTo","pos":[0,12]}]},{"pos":[27097,27098],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27146,27150],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[27208,27209],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27318,27330],"content":"CanConvertTo","needQuote":true,"nodes":[{"content":"CanConvertTo","pos":[0,12]}]},{"pos":[27404,27405],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27453,27457],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[27515,27516],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27802,27821],"content":"ConvertFrom(Object)","needQuote":true,"nodes":[{"content":"ConvertFrom(Object)","pos":[0,19]}]},{"pos":[27994,28005],"content":"ConvertFrom","needQuote":true,"nodes":[{"content":"ConvertFrom","pos":[0,11]}]},{"pos":[28078,28079],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28129,28135],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28195,28196],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28306,28317],"content":"ConvertFrom","needQuote":true,"nodes":[{"content":"ConvertFrom","pos":[0,11]}]},{"pos":[28390,28391],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28441,28447],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28507,28508],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28856,28914],"content":"ConvertFromInvariantString(ITypeDescriptorContext, String)","needQuote":true,"nodes":[{"content":"ConvertFromInvariantString(ITypeDescriptorContext, String)","pos":[0,58]}]},{"pos":[29208,29234],"content":"ConvertFromInvariantString","needQuote":true,"nodes":[{"content":"ConvertFromInvariantString","pos":[0,26]}]},{"pos":[29322,29323],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29404,29426],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[29497,29498]},{"pos":[29553,29559],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[29619,29620],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29790,29816],"content":"ConvertFromInvariantString","needQuote":true,"nodes":[{"content":"ConvertFromInvariantString","pos":[0,26]}]},{"pos":[29904,29905],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29986,30008],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[30079,30080]},{"pos":[30135,30141],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[30201,30202],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30604,30638],"content":"ConvertFromInvariantString(String)","needQuote":true,"nodes":[{"content":"ConvertFromInvariantString(String)","pos":[0,34]}]},{"pos":[30841,30867],"content":"ConvertFromInvariantString","needQuote":true,"nodes":[{"content":"ConvertFromInvariantString","pos":[0,26]}]},{"pos":[30955,30956],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31006,31012],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[31072,31073],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31198,31224],"content":"ConvertFromInvariantString","needQuote":true,"nodes":[{"content":"ConvertFromInvariantString","pos":[0,26]}]},{"pos":[31312,31313],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31363,31369],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[31429,31430],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31832,31894],"content":"ConvertFromString(ITypeDescriptorContext, CultureInfo, String)","needQuote":true,"nodes":[{"content":"ConvertFromString(ITypeDescriptorContext, CultureInfo, String)","pos":[0,62]}]},{"pos":[32237,32254],"content":"ConvertFromString","needQuote":true,"nodes":[{"content":"ConvertFromString","pos":[0,17]}]},{"pos":[32333,32334],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32415,32437],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[32508,32509]},{"pos":[32583,32594],"content":"CultureInfo","needQuote":true,"nodes":[{"content":"CultureInfo","pos":[0,11]}]},{"content":",","pos":[32674,32675]},{"pos":[32730,32736],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[32796,32797],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32991,33008],"content":"ConvertFromString","needQuote":true,"nodes":[{"content":"ConvertFromString","pos":[0,17]}]},{"pos":[33087,33088],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33169,33191],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[33262,33263]},{"pos":[33337,33348],"content":"CultureInfo","needQuote":true,"nodes":[{"content":"CultureInfo","pos":[0,11]}]},{"content":",","pos":[33428,33429]},{"pos":[33484,33490],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[33550,33551],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34017,34066],"content":"ConvertFromString(ITypeDescriptorContext, String)","needQuote":true,"nodes":[{"content":"ConvertFromString(ITypeDescriptorContext, String)","pos":[0,49]}]},{"pos":[34342,34359],"content":"ConvertFromString","needQuote":true,"nodes":[{"content":"ConvertFromString","pos":[0,17]}]},{"pos":[34438,34439],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34520,34542],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[34613,34614]},{"pos":[34669,34675],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[34735,34736],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34897,34914],"content":"ConvertFromString","needQuote":true,"nodes":[{"content":"ConvertFromString","pos":[0,17]}]},{"pos":[34993,34994],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35075,35097],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[35168,35169]},{"pos":[35224,35230],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[35290,35291],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35666,35691],"content":"ConvertFromString(String)","needQuote":true,"nodes":[{"content":"ConvertFromString(String)","pos":[0,25]}]},{"pos":[35876,35893],"content":"ConvertFromString","needQuote":true,"nodes":[{"content":"ConvertFromString","pos":[0,17]}]},{"pos":[35972,35973],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36023,36029],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[36089,36090],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36206,36223],"content":"ConvertFromString","needQuote":true,"nodes":[{"content":"ConvertFromString","pos":[0,17]}]},{"pos":[36302,36303],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36353,36359],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[36419,36420],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36730,36753],"content":"ConvertTo(Object, Type)","needQuote":true,"nodes":[{"content":"ConvertTo(Object, Type)","pos":[0,23]}]},{"pos":[36947,36956],"content":"ConvertTo","needQuote":true,"nodes":[{"content":"ConvertTo","pos":[0,9]}]},{"pos":[37027,37028],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37078,37084],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[37145,37146]},{"pos":[37199,37203],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[37261,37262],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37382,37391],"content":"ConvertTo","needQuote":true,"nodes":[{"content":"ConvertTo","pos":[0,9]}]},{"pos":[37462,37463],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37513,37519],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[37580,37581]},{"pos":[37634,37638],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[37696,37697],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38057,38113],"content":"ConvertToInvariantString(ITypeDescriptorContext, Object)","needQuote":true,"nodes":[{"content":"ConvertToInvariantString(ITypeDescriptorContext, Object)","pos":[0,56]}]},{"pos":[38403,38427],"content":"ConvertToInvariantString","needQuote":true,"nodes":[{"content":"ConvertToInvariantString","pos":[0,24]}]},{"pos":[38513,38514],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38595,38617],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[38688,38689]},{"pos":[38744,38750],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[38810,38811],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38979,39003],"content":"ConvertToInvariantString","needQuote":true,"nodes":[{"content":"ConvertToInvariantString","pos":[0,24]}]},{"pos":[39089,39090],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39171,39193],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[39264,39265]},{"pos":[39320,39326],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[39386,39387],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39783,39815],"content":"ConvertToInvariantString(Object)","needQuote":true,"nodes":[{"content":"ConvertToInvariantString(Object)","pos":[0,32]}]},{"pos":[40014,40038],"content":"ConvertToInvariantString","needQuote":true,"nodes":[{"content":"ConvertToInvariantString","pos":[0,24]}]},{"pos":[40124,40125],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40175,40181],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[40241,40242],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40365,40389],"content":"ConvertToInvariantString","needQuote":true,"nodes":[{"content":"ConvertToInvariantString","pos":[0,24]}]},{"pos":[40475,40476],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40526,40532],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[40592,40593],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40989,41049],"content":"ConvertToString(ITypeDescriptorContext, CultureInfo, Object)","needQuote":true,"nodes":[{"content":"ConvertToString(ITypeDescriptorContext, CultureInfo, Object)","pos":[0,60]}]},{"pos":[41388,41403],"content":"ConvertToString","needQuote":true,"nodes":[{"content":"ConvertToString","pos":[0,15]}]},{"pos":[41480,41481],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41562,41584],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[41655,41656]},{"pos":[41730,41741],"content":"CultureInfo","needQuote":true,"nodes":[{"content":"CultureInfo","pos":[0,11]}]},{"content":",","pos":[41821,41822]},{"pos":[41877,41883],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[41943,41944],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42136,42151],"content":"ConvertToString","needQuote":true,"nodes":[{"content":"ConvertToString","pos":[0,15]}]},{"pos":[42228,42229],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42310,42332],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[42403,42404]},{"pos":[42478,42489],"content":"CultureInfo","needQuote":true,"nodes":[{"content":"CultureInfo","pos":[0,11]}]},{"content":",","pos":[42569,42570]},{"pos":[42625,42631],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[42691,42692],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43152,43199],"content":"ConvertToString(ITypeDescriptorContext, Object)","needQuote":true,"nodes":[{"content":"ConvertToString(ITypeDescriptorContext, Object)","pos":[0,47]}]},{"pos":[43471,43486],"content":"ConvertToString","needQuote":true,"nodes":[{"content":"ConvertToString","pos":[0,15]}]},{"pos":[43563,43564],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43645,43667],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[43738,43739]},{"pos":[43794,43800],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[43860,43861],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44020,44035],"content":"ConvertToString","needQuote":true,"nodes":[{"content":"ConvertToString","pos":[0,15]}]},{"pos":[44112,44113],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44194,44216],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[44287,44288]},{"pos":[44343,44349],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[44409,44410],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44779,44802],"content":"ConvertToString(Object)","needQuote":true,"nodes":[{"content":"ConvertToString(Object)","pos":[0,23]}]},{"pos":[44983,44998],"content":"ConvertToString","needQuote":true,"nodes":[{"content":"ConvertToString","pos":[0,15]}]},{"pos":[45075,45076],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45126,45132],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[45192,45193],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45307,45322],"content":"ConvertToString","needQuote":true,"nodes":[{"content":"ConvertToString","pos":[0,15]}]},{"pos":[45399,45400],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45450,45456],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[45516,45517],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45833,45860],"content":"CreateInstance(IDictionary)","needQuote":true,"nodes":[{"content":"CreateInstance(IDictionary)","pos":[0,27]}]},{"pos":[46073,46087],"content":"CreateInstance","needQuote":true,"nodes":[{"content":"CreateInstance","pos":[0,14]}]},{"pos":[46163,46164],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46231,46242],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[46319,46320],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46450,46464],"content":"CreateInstance","needQuote":true,"nodes":[{"content":"CreateInstance","pos":[0,14]}]},{"pos":[46540,46541],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46608,46619],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[46696,46697],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47078,47129],"content":"CreateInstance(ITypeDescriptorContext, IDictionary)","needQuote":true,"nodes":[{"content":"CreateInstance(ITypeDescriptorContext, IDictionary)","pos":[0,51]}]},{"pos":[47433,47447],"content":"CreateInstance","needQuote":true,"nodes":[{"content":"CreateInstance","pos":[0,14]}]},{"pos":[47523,47524],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47605,47627],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[47698,47699]},{"pos":[47771,47782],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[47859,47860],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48035,48049],"content":"CreateInstance","needQuote":true,"nodes":[{"content":"CreateInstance","pos":[0,14]}]},{"pos":[48125,48126],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48207,48229],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[48300,48301]},{"pos":[48373,48384],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[48461,48462],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48859,48890],"content":"GetConvertFromException(Object)","needQuote":true,"nodes":[{"content":"GetConvertFromException(Object)","pos":[0,31]}]},{"pos":[49087,49110],"content":"GetConvertFromException","needQuote":true,"nodes":[{"content":"GetConvertFromException","pos":[0,23]}]},{"pos":[49195,49196],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49246,49252],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[49312,49313],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49435,49458],"content":"GetConvertFromException","needQuote":true,"nodes":[{"content":"GetConvertFromException","pos":[0,23]}]},{"pos":[49543,49544],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49594,49600],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[49660,49661],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49995,50030],"content":"GetConvertToException(Object, Type)","needQuote":true,"nodes":[{"content":"GetConvertToException(Object, Type)","pos":[0,35]}]},{"pos":[50248,50269],"content":"GetConvertToException","needQuote":true,"nodes":[{"content":"GetConvertToException","pos":[0,21]}]},{"pos":[50352,50353],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50403,50409],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[50470,50471]},{"pos":[50524,50528],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[50586,50587],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50719,50740],"content":"GetConvertToException","needQuote":true,"nodes":[{"content":"GetConvertToException","pos":[0,21]}]},{"pos":[50823,50824],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50874,50880],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[50941,50942]},{"pos":[50995,50999],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[51057,51058],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51385,51413],"content":"GetCreateInstanceSupported()","needQuote":true,"nodes":[{"content":"GetCreateInstanceSupported()","pos":[0,28]}]},{"pos":[51588,51614],"content":"GetCreateInstanceSupported","needQuote":true,"nodes":[{"content":"GetCreateInstanceSupported","pos":[0,26]}]},{"pos":[51702,51703],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51730,51731],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51841,51867],"content":"GetCreateInstanceSupported","needQuote":true,"nodes":[{"content":"GetCreateInstanceSupported","pos":[0,26]}]},{"pos":[51955,51956],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51983,51984],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52328,52378],"content":"GetCreateInstanceSupported(ITypeDescriptorContext)","needQuote":true,"nodes":[{"content":"GetCreateInstanceSupported(ITypeDescriptorContext)","pos":[0,50]}]},{"pos":[52643,52669],"content":"GetCreateInstanceSupported","needQuote":true,"nodes":[{"content":"GetCreateInstanceSupported","pos":[0,26]}]},{"pos":[52757,52758],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52839,52861],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"pos":[52931,52932],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53088,53114],"content":"GetCreateInstanceSupported","needQuote":true,"nodes":[{"content":"GetCreateInstanceSupported","pos":[0,26]}]},{"pos":[53202,53203],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53284,53306],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"pos":[53376,53377],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53789,53834],"content":"GetProperties(ITypeDescriptorContext, Object)","needQuote":true,"nodes":[{"content":"GetProperties(ITypeDescriptorContext, Object)","pos":[0,45]}]},{"pos":[54102,54115],"content":"GetProperties","needQuote":true,"nodes":[{"content":"GetProperties","pos":[0,13]}]},{"pos":[54190,54191],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54272,54294],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[54365,54366]},{"pos":[54421,54427],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[54487,54488],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54645,54658],"content":"GetProperties","needQuote":true,"nodes":[{"content":"GetProperties","pos":[0,13]}]},{"pos":[54733,54734],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54815,54837],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[54908,54909]},{"pos":[54964,54970],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[55030,55031],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55458,55516],"content":"GetProperties(ITypeDescriptorContext, Object, Attribute[])","needQuote":true,"nodes":[{"content":"GetProperties(ITypeDescriptorContext, Object, Attribute[])","pos":[0,58]}]},{"pos":[56039,56052],"content":"GetProperties","needQuote":true,"nodes":[{"content":"GetProperties","pos":[0,13]}]},{"pos":[56127,56128],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56209,56231],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[56302,56303]},{"pos":[56358,56364],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[56425,56426]},{"pos":[56484,56493],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"content":"[]","pos":[56557,56559]},{"pos":[56590,56591],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56767,56780],"content":"GetProperties","needQuote":true,"nodes":[{"content":"GetProperties","pos":[0,13]}]},{"pos":[56855,56856],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56937,56959],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[57030,57031]},{"pos":[57086,57092],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[57153,57154]},{"pos":[57212,57221],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"pos":[57284,57286],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[57314,57315],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57802,57823],"content":"GetProperties(Object)","needQuote":true,"nodes":[{"content":"GetProperties(Object)","pos":[0,21]}]},{"pos":[58000,58013],"content":"GetProperties","needQuote":true,"nodes":[{"content":"GetProperties","pos":[0,13]}]},{"pos":[58088,58089],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58139,58145],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[58205,58206],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58318,58331],"content":"GetProperties","needQuote":true,"nodes":[{"content":"GetProperties","pos":[0,13]}]},{"pos":[58406,58407],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58457,58463],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[58523,58524],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58813,58837],"content":"GetPropertiesSupported()","needQuote":true,"nodes":[{"content":"GetPropertiesSupported()","pos":[0,24]}]},{"pos":[59004,59026],"content":"GetPropertiesSupported","needQuote":true,"nodes":[{"content":"GetPropertiesSupported","pos":[0,22]}]},{"pos":[59110,59111],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59138,59139],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59245,59267],"content":"GetPropertiesSupported","needQuote":true,"nodes":[{"content":"GetPropertiesSupported","pos":[0,22]}]},{"pos":[59351,59352],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59379,59380],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59712,59758],"content":"GetPropertiesSupported(ITypeDescriptorContext)","needQuote":true,"nodes":[{"content":"GetPropertiesSupported(ITypeDescriptorContext)","pos":[0,46]}]},{"pos":[60015,60037],"content":"GetPropertiesSupported","needQuote":true,"nodes":[{"content":"GetPropertiesSupported","pos":[0,22]}]},{"pos":[60121,60122],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60203,60225],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"pos":[60295,60296],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60448,60470],"content":"GetPropertiesSupported","needQuote":true,"nodes":[{"content":"GetPropertiesSupported","pos":[0,22]}]},{"pos":[60554,60555],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60636,60658],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"pos":[60728,60729],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61078,61097],"content":"GetStandardValues()","needQuote":true,"nodes":[{"content":"GetStandardValues()","pos":[0,19]}]},{"pos":[61254,61271],"content":"GetStandardValues","needQuote":true,"nodes":[{"content":"GetStandardValues","pos":[0,17]}]},{"pos":[61350,61351],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61378,61379],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61480,61497],"content":"GetStandardValues","needQuote":true,"nodes":[{"content":"GetStandardValues","pos":[0,17]}]},{"pos":[61576,61577],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61604,61605],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61885,61913],"content":"GetStandardValuesExclusive()","needQuote":true,"nodes":[{"content":"GetStandardValuesExclusive()","pos":[0,28]}]},{"pos":[62088,62114],"content":"GetStandardValuesExclusive","needQuote":true,"nodes":[{"content":"GetStandardValuesExclusive","pos":[0,26]}]},{"pos":[62202,62203],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62230,62231],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62341,62367],"content":"GetStandardValuesExclusive","needQuote":true,"nodes":[{"content":"GetStandardValuesExclusive","pos":[0,26]}]},{"pos":[62455,62456],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62483,62484],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62782,62810],"content":"GetStandardValuesSupported()","needQuote":true,"nodes":[{"content":"GetStandardValuesSupported()","pos":[0,28]}]},{"pos":[62985,63011],"content":"GetStandardValuesSupported","needQuote":true,"nodes":[{"content":"GetStandardValuesSupported","pos":[0,26]}]},{"pos":[63099,63100],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63127,63128],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63238,63264],"content":"GetStandardValuesSupported","needQuote":true,"nodes":[{"content":"GetStandardValuesSupported","pos":[0,26]}]},{"pos":[63352,63353],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63380,63381],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63719,63758],"content":"IsValid(ITypeDescriptorContext, Object)","needQuote":true,"nodes":[{"content":"IsValid(ITypeDescriptorContext, Object)","pos":[0,39]}]},{"pos":[64014,64021],"content":"IsValid","needQuote":true,"nodes":[{"content":"IsValid","pos":[0,7]}]},{"pos":[64090,64091],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64172,64194],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[64265,64266]},{"pos":[64321,64327],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[64387,64388],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64539,64546],"content":"IsValid","needQuote":true,"nodes":[{"content":"IsValid","pos":[0,7]}]},{"pos":[64615,64616],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64697,64719],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[64790,64791]},{"pos":[64846,64852],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[64912,64913],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65258,65273],"content":"IsValid(Object)","needQuote":true,"nodes":[{"content":"IsValid(Object)","pos":[0,15]}]},{"pos":[65438,65445],"content":"IsValid","needQuote":true,"nodes":[{"content":"IsValid","pos":[0,7]}]},{"pos":[65514,65515],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65565,65571],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[65631,65632],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65738,65745],"content":"IsValid","needQuote":true,"nodes":[{"content":"IsValid","pos":[0,7]}]},{"pos":[65814,65815],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65865,65871],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[65931,65932],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66268,66322],"content":"SortProperties(PropertyDescriptorCollection, String[])","needQuote":true,"nodes":[{"content":"SortProperties(PropertyDescriptorCollection, String[])","pos":[0,54]}]},{"pos":[66809,66823],"content":"SortProperties","needQuote":true,"nodes":[{"content":"SortProperties","pos":[0,14]}]},{"pos":[66899,66900],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66987,67015],"content":"PropertyDescriptorCollection","needQuote":true,"nodes":[{"content":"PropertyDescriptorCollection","pos":[0,28]}]},{"content":",","pos":[67092,67093]},{"pos":[67148,67154],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"[]","pos":[67215,67217]},{"pos":[67248,67249],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67415,67429],"content":"SortProperties","needQuote":true,"nodes":[{"content":"SortProperties","pos":[0,14]}]},{"pos":[67505,67506],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67593,67621],"content":"PropertyDescriptorCollection","needQuote":true,"nodes":[{"content":"PropertyDescriptorCollection","pos":[0,28]}]},{"content":",","pos":[67698,67699]},{"pos":[67754,67760],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[67820,67822],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[67850,67851],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68256,68266],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[68361,68369],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[68438,68439],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68466,68467],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68537,68545],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[68614,68615],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68642,68643],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68826,68840],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[68959,68965],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[69032,69033],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69083,69089],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[69149,69150],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69233,69239],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[69306,69307],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69357,69363],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[69423,69424],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69638,69660],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[69808,69814],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[69881,69882],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69932,69938],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[69999,70000]},{"pos":[70055,70061],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[70121,70122],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70219,70225],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[70292,70293],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70343,70349],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[70410,70411]},{"pos":[70466,70472],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[70532,70533],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70778,70809],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[70975,70990],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[71066,71067],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71117,71123],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[71184,71185]},{"pos":[71240,71246],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[71306,71307],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71413,71428],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[71504,71505],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71555,71561],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[71622,71623]},{"pos":[71678,71684],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[71744,71745],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71975,71988],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[72089,72100],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[72172,72173],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72200,72201],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72274,72285],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[72357,72358],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72385,72386],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72561,72570],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[72663,72670],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[72738,72739],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72766,72767],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72836,72843],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[72911,72912],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72939,72940],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73115,73132],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[73241,73256],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[73332,73333],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73360,73361],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73438,73453],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[73529,73530],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73557,73558],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73703,73709],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[73803,73809],"content":"Type[]","needQuote":true,"nodes":[{"content":"Type[]","pos":[0,6]}]},{"pos":[73929,73933],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":"[]","pos":[73971,73973]},{"pos":[74036,74040],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[74077,74079],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[74335,74379],"content":"CanConvertFrom(ITypeDescriptorContext, Type)","needQuote":true,"nodes":[{"content":"CanConvertFrom(ITypeDescriptorContext, Type)","pos":[0,44]}]},{"pos":[74645,74659],"content":"CanConvertFrom","needQuote":true,"nodes":[{"content":"CanConvertFrom","pos":[0,14]}]},{"pos":[74735,74736],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74817,74839],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[74910,74911]},{"pos":[74964,74968],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[75026,75027],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75183,75197],"content":"CanConvertFrom","needQuote":true,"nodes":[{"content":"CanConvertFrom","pos":[0,14]}]},{"pos":[75273,75274],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75355,75377],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[75448,75449]},{"pos":[75502,75506],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[75564,75565],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75893,75915],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"pos":[76136,76140],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[76280,76287],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[76556,76598],"content":"CanConvertTo(ITypeDescriptorContext, Type)","needQuote":true,"nodes":[{"content":"CanConvertTo(ITypeDescriptorContext, Type)","pos":[0,42]}]},{"pos":[76860,76872],"content":"CanConvertTo","needQuote":true,"nodes":[{"content":"CanConvertTo","pos":[0,12]}]},{"pos":[76946,76947],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77028,77050],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[77121,77122]},{"pos":[77175,77179],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[77237,77238],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77392,77404],"content":"CanConvertTo","needQuote":true,"nodes":[{"content":"CanConvertTo","pos":[0,12]}]},{"pos":[77478,77479],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77560,77582],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[77653,77654]},{"pos":[77707,77711],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[77769,77770],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78203,78259],"content":"ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)","needQuote":true,"nodes":[{"content":"ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)","pos":[0,56]}]},{"pos":[78590,78601],"content":"ConvertFrom","needQuote":true,"nodes":[{"content":"ConvertFrom","pos":[0,11]}]},{"pos":[78674,78675],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78756,78778],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[78849,78850]},{"pos":[78924,78935],"content":"CultureInfo","needQuote":true,"nodes":[{"content":"CultureInfo","pos":[0,11]}]},{"content":",","pos":[79015,79016]},{"pos":[79071,79077],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[79137,79138],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79326,79337],"content":"ConvertFrom","needQuote":true,"nodes":[{"content":"ConvertFrom","pos":[0,11]}]},{"pos":[79410,79411],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79492,79514],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[79585,79586]},{"pos":[79660,79671],"content":"CultureInfo","needQuote":true,"nodes":[{"content":"CultureInfo","pos":[0,11]}]},{"content":",","pos":[79751,79752]},{"pos":[79807,79813],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[79873,79874],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80233,80244],"content":"CultureInfo","needQuote":true,"nodes":[{"content":"CultureInfo","pos":[0,11]}]},{"pos":[80422,80442],"content":"System.Globalization","needQuote":true,"nodes":[{"content":"System.Globalization","pos":[0,20]}]},{"pos":[80780,80840],"content":"ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)","needQuote":true,"nodes":[{"content":"ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)","pos":[0,60]}]},{"pos":[81192,81201],"content":"ConvertTo","needQuote":true,"nodes":[{"content":"ConvertTo","pos":[0,9]}]},{"pos":[81272,81273],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81354,81376],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[81447,81448]},{"pos":[81522,81533],"content":"CultureInfo","needQuote":true,"nodes":[{"content":"CultureInfo","pos":[0,11]}]},{"content":",","pos":[81613,81614]},{"pos":[81669,81675],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[81736,81737]},{"pos":[81790,81794],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[81852,81853],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82051,82060],"content":"ConvertTo","needQuote":true,"nodes":[{"content":"ConvertTo","pos":[0,9]}]},{"pos":[82131,82132],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82213,82235],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[82306,82307]},{"pos":[82381,82392],"content":"CultureInfo","needQuote":true,"nodes":[{"content":"CultureInfo","pos":[0,11]}]},{"content":",","pos":[82472,82473]},{"pos":[82528,82534],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[82595,82596]},{"pos":[82649,82653],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[82711,82712],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83167,83208],"content":"GetStandardValues(ITypeDescriptorContext)","needQuote":true,"nodes":[{"content":"GetStandardValues(ITypeDescriptorContext)","pos":[0,41]}]},{"pos":[83455,83472],"content":"GetStandardValues","needQuote":true,"nodes":[{"content":"GetStandardValues","pos":[0,17]}]},{"pos":[83551,83552],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83633,83655],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"pos":[83725,83726],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83873,83890],"content":"GetStandardValues","needQuote":true,"nodes":[{"content":"GetStandardValues","pos":[0,17]}]},{"pos":[83969,83970],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84051,84073],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"pos":[84143,84144],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84476,84514],"content":"TypeConverter.StandardValuesCollection","needQuote":true,"nodes":[{"content":"TypeConverter.StandardValuesCollection","pos":[0,38]}]},{"pos":[84909,84959],"content":"GetStandardValuesExclusive(ITypeDescriptorContext)","needQuote":true,"nodes":[{"content":"GetStandardValuesExclusive(ITypeDescriptorContext)","pos":[0,50]}]},{"pos":[85224,85250],"content":"GetStandardValuesExclusive","needQuote":true,"nodes":[{"content":"GetStandardValuesExclusive","pos":[0,26]}]},{"pos":[85338,85339],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85420,85442],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"pos":[85512,85513],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85669,85695],"content":"GetStandardValuesExclusive","needQuote":true,"nodes":[{"content":"GetStandardValuesExclusive","pos":[0,26]}]},{"pos":[85783,85784],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85865,85887],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"pos":[85957,85958],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86370,86420],"content":"GetStandardValuesSupported(ITypeDescriptorContext)","needQuote":true,"nodes":[{"content":"GetStandardValuesSupported(ITypeDescriptorContext)","pos":[0,50]}]},{"pos":[86685,86711],"content":"GetStandardValuesSupported","needQuote":true,"nodes":[{"content":"GetStandardValuesSupported","pos":[0,26]}]},{"pos":[86799,86800],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86881,86903],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"pos":[86973,86974],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87130,87156],"content":"GetStandardValuesSupported","needQuote":true,"nodes":[{"content":"GetStandardValuesSupported","pos":[0,26]}]},{"pos":[87244,87245],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87326,87348],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"pos":[87418,87419],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87705,87726],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[87931,87952],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]}],"content":"items:\n- uid: System.ComponentModel.TypeListConverter\n  commentId: T:System.ComponentModel.TypeListConverter\n  id: TypeListConverter\n  parent: System.ComponentModel\n  children:\n  - System.ComponentModel.TypeListConverter.#ctor(System.Type[])\n  - System.ComponentModel.TypeListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  - System.ComponentModel.TypeListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  - System.ComponentModel.TypeListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  - System.ComponentModel.TypeListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)\n  - System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n  - System.ComponentModel.TypeListConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n  - System.ComponentModel.TypeListConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n  langs:\n  - csharp\n  - vb\n  name: TypeListConverter\n  fullName: System.ComponentModel.TypeListConverter\n  type: Class\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeListConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TypeListConverter\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeListConverter.cs\n    startLine: 12\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Provides a type converter that can be used to populate a list box with available types.</p>\\n\"\n  syntax:\n    content: 'public abstract class TypeListConverter : TypeConverter'\n    content.vb: >-\n      Public MustInherit Class TypeListConverter\n          Inherits TypeConverter\n  inheritance:\n  - System.Object\n  - System.ComponentModel.TypeConverter\n  inheritedMembers:\n  - System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)\n  - System.ComponentModel.TypeConverter.CanConvertTo(System.Type)\n  - System.ComponentModel.TypeConverter.ConvertFrom(System.Object)\n  - System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)\n  - System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)\n  - System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)\n  - System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)\n  - System.ComponentModel.TypeConverter.ConvertFromString(System.String)\n  - System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)\n  - System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  - System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)\n  - System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  - System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  - System.ComponentModel.TypeConverter.ConvertToString(System.Object)\n  - System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\n  - System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)\n  - System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)\n  - System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)\n  - System.ComponentModel.TypeConverter.GetCreateInstanceSupported\n  - System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)\n  - System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  - System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])\n  - System.ComponentModel.TypeConverter.GetProperties(System.Object)\n  - System.ComponentModel.TypeConverter.GetPropertiesSupported\n  - System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)\n  - System.ComponentModel.TypeConverter.GetStandardValues\n  - System.ComponentModel.TypeConverter.GetStandardValuesExclusive\n  - System.ComponentModel.TypeConverter.GetStandardValuesSupported\n  - System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  - System.ComponentModel.TypeConverter.IsValid(System.Object)\n  - System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: TypeListConverter\n- uid: System.ComponentModel.TypeListConverter.#ctor(System.Type[])\n  commentId: M:System.ComponentModel.TypeListConverter.#ctor(System.Type[])\n  id: '#ctor(System.Type[])'\n  parent: System.ComponentModel.TypeListConverter\n  langs:\n  - csharp\n  - vb\n  name: TypeListConverter(Type[])\n  fullName: System.ComponentModel.TypeListConverter.TypeListConverter(System.Type[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeListConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeListConverter.cs\n    startLine: 21\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ComponentModel.TypeListConverter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the type array as the available types.</p>\\n\"\n  syntax:\n    content: protected TypeListConverter(Type[] types)\n    content.vb: Protected Sub New(types As Type())\n    parameters:\n    - id: types\n      type: System.Type[]\n      description: \"\\n<p>The array of type <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use as the available types. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  fullName.vb: System.ComponentModel.TypeListConverter.TypeListConverter(System.Type())\n  name.vb: TypeListConverter(Type())\n  nameWithType: TypeListConverter.TypeListConverter(Type[])\n  nameWithType.vb: TypeListConverter.TypeListConverter(Type())\n- uid: System.ComponentModel.TypeListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  commentId: M:System.ComponentModel.TypeListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  id: CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  parent: System.ComponentModel.TypeListConverter\n  langs:\n  - csharp\n  - vb\n  name: CanConvertFrom(ITypeDescriptorContext, Type)\n  fullName: System.ComponentModel.TypeListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeListConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CanConvertFrom\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeListConverter.cs\n    startLine: 32\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets a value indicating whether this converter can convert the specified <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the source object using the given context.</p>\\n\"\n  syntax:\n    content: public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)\n    content.vb: Public Overrides Function CanConvertFrom(context As ITypeDescriptorContext, sourceType As Type) As Boolean\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context.</p>\\n\"\n    - id: sourceType\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the source object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this converter can perform the conversion; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TypeListConverter.CanConvertFrom(ITypeDescriptorContext, Type)\n- uid: System.ComponentModel.TypeListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  commentId: M:System.ComponentModel.TypeListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  id: CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  parent: System.ComponentModel.TypeListConverter\n  langs:\n  - csharp\n  - vb\n  name: CanConvertTo(ITypeDescriptorContext, Type)\n  fullName: System.ComponentModel.TypeListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeListConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CanConvertTo\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeListConverter.cs\n    startLine: 47\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets a value indicating whether this converter can convert an object to the given destination type using the context.</p>\\n\"\n  syntax:\n    content: public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)\n    content.vb: Public Overrides Function CanConvertTo(context As ITypeDescriptorContext, destinationType As Type) As Boolean\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context. </p>\\n\"\n    - id: destinationType\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the type you wish to convert to. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this converter can perform the conversion; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  seealso:\n  - type: System.ComponentModel.ITypeDescriptorContext\n    commentId: T:System.ComponentModel.ITypeDescriptorContext\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TypeListConverter.CanConvertTo(ITypeDescriptorContext, Type)\n- uid: System.ComponentModel.TypeListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  commentId: M:System.ComponentModel.TypeListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  id: ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  parent: System.ComponentModel.TypeListConverter\n  langs:\n  - csharp\n  - vb\n  name: ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)\n  fullName: System.ComponentModel.TypeListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeListConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConvertFrom\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeListConverter.cs\n    startLine: 62\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Converts the specified object to the native type of the converter.</p>\\n\"\n  syntax:\n    content: public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)\n    content.vb: Public Overrides Function ConvertFrom(context As ITypeDescriptorContext, culture As CultureInfo, value As Object) As Object\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context. </p>\\n\"\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: \"\\n<p>A <xref href=\\\"System.Globalization.CultureInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the culture used to represent the font. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to convert. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the converted value.</p>\\n\"\n  overridden: System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TypeListConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)\n- uid: System.ComponentModel.TypeListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)\n  commentId: M:System.ComponentModel.TypeListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)\n  id: ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)\n  parent: System.ComponentModel.TypeListConverter\n  langs:\n  - csharp\n  - vb\n  name: ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)\n  fullName: System.ComponentModel.TypeListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeListConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConvertTo\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeListConverter.cs\n    startLine: 82\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Converts the given value object to the specified destination type.</p>\\n\"\n  syntax:\n    content: public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)\n    content.vb: Public Overrides Function ConvertTo(context As ITypeDescriptorContext, culture As CultureInfo, value As Object, destinationType As Type) As Object\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context. </p>\\n\"\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: \"\\n<p>An optional <xref href=\\\"System.Globalization.CultureInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If not supplied, the current culture is assumed. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to convert. </p>\\n\"\n    - id: destinationType\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to convert the value to. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the converted <em>value</em>.</p>\\n\"\n  overridden: System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>destinationType</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The conversion cannot be performed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TypeListConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)\n- uid: System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n  commentId: M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n  id: GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n  parent: System.ComponentModel.TypeListConverter\n  langs:\n  - csharp\n  - vb\n  name: GetStandardValues(ITypeDescriptorContext)\n  fullName: System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeListConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetStandardValues\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeListConverter.cs\n    startLine: 107\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets a collection of standard values for the data type this validator is designed for.</p>\\n\"\n  syntax:\n    content: public override TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)\n    content.vb: Public Overrides Function GetStandardValues(context As ITypeDescriptorContext) As TypeConverter.StandardValuesCollection\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context. </p>\\n\"\n    return:\n      type: System.ComponentModel.TypeConverter.StandardValuesCollection\n      description: \"\\n<p>A <xref href=\\\"System.ComponentModel.TypeConverter.StandardValuesCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that holds a standard set of valid values, or <strong>null</strong> if the data type does not support a standard set of values.</p>\\n\"\n  overridden: System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TypeListConverter.GetStandardValues(ITypeDescriptorContext)\n- uid: System.ComponentModel.TypeListConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n  commentId: M:System.ComponentModel.TypeListConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n  id: GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n  parent: System.ComponentModel.TypeListConverter\n  langs:\n  - csharp\n  - vb\n  name: GetStandardValuesExclusive(ITypeDescriptorContext)\n  fullName: System.ComponentModel.TypeListConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeListConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetStandardValuesExclusive\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeListConverter.cs\n    startLine: 133\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets a value indicating whether the list of standard values returned from the <xref href=\\\"System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method is an exclusive list.</p>\\n\"\n  syntax:\n    content: public override bool GetStandardValuesExclusive(ITypeDescriptorContext context)\n    content.vb: Public Overrides Function GetStandardValuesExclusive(context As ITypeDescriptorContext) As Boolean\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> because the <xref href=\\\"System.ComponentModel.TypeConverter.StandardValuesCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> returned from <xref href=\\\"System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is an exhaustive list of possible values. This method never returns <strong>false</strong>.</p>\\n\"\n  overridden: System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TypeListConverter.GetStandardValuesExclusive(ITypeDescriptorContext)\n- uid: System.ComponentModel.TypeListConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n  commentId: M:System.ComponentModel.TypeListConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n  id: GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n  parent: System.ComponentModel.TypeListConverter\n  langs:\n  - csharp\n  - vb\n  name: GetStandardValuesSupported(ITypeDescriptorContext)\n  fullName: System.ComponentModel.TypeListConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeListConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetStandardValuesSupported\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeListConverter.cs\n    startLine: 145\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.</p>\\n\"\n  syntax:\n    content: public override bool GetStandardValuesSupported(ITypeDescriptorContext context)\n    content.vb: Public Overrides Function GetStandardValuesSupported(context As ITypeDescriptorContext) As Boolean\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> because <xref href=\\\"System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> should be called to find a common set of values the object supports. This method never returns <strong>false</strong>.</p>\\n\"\n  overridden: System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TypeListConverter.GetStandardValuesSupported(ITypeDescriptorContext)\nreferences:\n- uid: System.ComponentModel\n  isExternal: false\n  name: System.ComponentModel\n  fullName: System.ComponentModel\n  nameWithType: System.ComponentModel\n  commentId: N:System.ComponentModel\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.ComponentModel.TypeConverter\n  parent: System.ComponentModel\n  isExternal: false\n  name: TypeConverter\n  fullName: System.ComponentModel.TypeConverter\n  nameWithType: TypeConverter\n  commentId: T:System.ComponentModel.TypeConverter\n- uid: System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: CanConvertFrom(Type)\n  fullName: System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)\n    name: CanConvertFrom\n    fullName: System.ComponentModel.TypeConverter.CanConvertFrom\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)\n    name: CanConvertFrom\n    fullName: System.ComponentModel.TypeConverter.CanConvertFrom\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.CanConvertFrom(Type)\n  commentId: M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)\n- uid: System.ComponentModel.TypeConverter.CanConvertTo(System.Type)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: CanConvertTo(Type)\n  fullName: System.ComponentModel.TypeConverter.CanConvertTo(System.Type)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.CanConvertTo(System.Type)\n    name: CanConvertTo\n    fullName: System.ComponentModel.TypeConverter.CanConvertTo\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.CanConvertTo(System.Type)\n    name: CanConvertTo\n    fullName: System.ComponentModel.TypeConverter.CanConvertTo\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.CanConvertTo(Type)\n  commentId: M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)\n- uid: System.ComponentModel.TypeConverter.ConvertFrom(System.Object)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: ConvertFrom(Object)\n  fullName: System.ComponentModel.TypeConverter.ConvertFrom(System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.ConvertFrom(System.Object)\n    name: ConvertFrom\n    fullName: System.ComponentModel.TypeConverter.ConvertFrom\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.ConvertFrom(System.Object)\n    name: ConvertFrom\n    fullName: System.ComponentModel.TypeConverter.ConvertFrom\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.ConvertFrom(Object)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)\n- uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: ConvertFromInvariantString(ITypeDescriptorContext, String)\n  fullName: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext, System.String)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)\n    name: ConvertFromInvariantString\n    fullName: System.ComponentModel.TypeConverter.ConvertFromInvariantString\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)\n    name: ConvertFromInvariantString\n    fullName: System.ComponentModel.TypeConverter.ConvertFromInvariantString\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, String)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)\n- uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: ConvertFromInvariantString(String)\n  fullName: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)\n    name: ConvertFromInvariantString\n    fullName: System.ComponentModel.TypeConverter.ConvertFromInvariantString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)\n    name: ConvertFromInvariantString\n    fullName: System.ComponentModel.TypeConverter.ConvertFromInvariantString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.ConvertFromInvariantString(String)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)\n- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: ConvertFromString(ITypeDescriptorContext, CultureInfo, String)\n  fullName: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.String)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)\n    name: ConvertFromString\n    fullName: System.ComponentModel.TypeConverter.ConvertFromString\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Globalization.CultureInfo\n    name: CultureInfo\n    fullName: System.Globalization.CultureInfo\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)\n    name: ConvertFromString\n    fullName: System.ComponentModel.TypeConverter.ConvertFromString\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Globalization.CultureInfo\n    name: CultureInfo\n    fullName: System.Globalization.CultureInfo\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, String)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)\n- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: ConvertFromString(ITypeDescriptorContext, String)\n  fullName: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext, System.String)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)\n    name: ConvertFromString\n    fullName: System.ComponentModel.TypeConverter.ConvertFromString\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)\n    name: ConvertFromString\n    fullName: System.ComponentModel.TypeConverter.ConvertFromString\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.ConvertFromString(ITypeDescriptorContext, String)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)\n- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.String)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: ConvertFromString(String)\n  fullName: System.ComponentModel.TypeConverter.ConvertFromString(System.String)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.ConvertFromString(System.String)\n    name: ConvertFromString\n    fullName: System.ComponentModel.TypeConverter.ConvertFromString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.ConvertFromString(System.String)\n    name: ConvertFromString\n    fullName: System.ComponentModel.TypeConverter.ConvertFromString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.ConvertFromString(String)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)\n- uid: System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: ConvertTo(Object, Type)\n  fullName: System.ComponentModel.TypeConverter.ConvertTo(System.Object, System.Type)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)\n    name: ConvertTo\n    fullName: System.ComponentModel.TypeConverter.ConvertTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)\n    name: ConvertTo\n    fullName: System.ComponentModel.TypeConverter.ConvertTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.ConvertTo(Object, Type)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)\n- uid: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: ConvertToInvariantString(ITypeDescriptorContext, Object)\n  fullName: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext, System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n    name: ConvertToInvariantString\n    fullName: System.ComponentModel.TypeConverter.ConvertToInvariantString\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n    name: ConvertToInvariantString\n    fullName: System.ComponentModel.TypeConverter.ConvertToInvariantString\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, Object)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n- uid: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: ConvertToInvariantString(Object)\n  fullName: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)\n    name: ConvertToInvariantString\n    fullName: System.ComponentModel.TypeConverter.ConvertToInvariantString\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)\n    name: ConvertToInvariantString\n    fullName: System.ComponentModel.TypeConverter.ConvertToInvariantString\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.ConvertToInvariantString(Object)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)\n- uid: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: ConvertToString(ITypeDescriptorContext, CultureInfo, Object)\n  fullName: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n    name: ConvertToString\n    fullName: System.ComponentModel.TypeConverter.ConvertToString\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Globalization.CultureInfo\n    name: CultureInfo\n    fullName: System.Globalization.CultureInfo\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n    name: ConvertToString\n    fullName: System.ComponentModel.TypeConverter.ConvertToString\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Globalization.CultureInfo\n    name: CultureInfo\n    fullName: System.Globalization.CultureInfo\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, Object)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n- uid: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: ConvertToString(ITypeDescriptorContext, Object)\n  fullName: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext, System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n    name: ConvertToString\n    fullName: System.ComponentModel.TypeConverter.ConvertToString\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n    name: ConvertToString\n    fullName: System.ComponentModel.TypeConverter.ConvertToString\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.ConvertToString(ITypeDescriptorContext, Object)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n- uid: System.ComponentModel.TypeConverter.ConvertToString(System.Object)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: ConvertToString(Object)\n  fullName: System.ComponentModel.TypeConverter.ConvertToString(System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.ConvertToString(System.Object)\n    name: ConvertToString\n    fullName: System.ComponentModel.TypeConverter.ConvertToString\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.ConvertToString(System.Object)\n    name: ConvertToString\n    fullName: System.ComponentModel.TypeConverter.ConvertToString\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.ConvertToString(Object)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)\n- uid: System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: CreateInstance(IDictionary)\n  fullName: System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\n    name: CreateInstance\n    fullName: System.ComponentModel.TypeConverter.CreateInstance\n  - name: (\n    fullName: (\n  - uid: System.Collections.IDictionary\n    name: IDictionary\n    fullName: System.Collections.IDictionary\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\n    name: CreateInstance\n    fullName: System.ComponentModel.TypeConverter.CreateInstance\n  - name: (\n    fullName: (\n  - uid: System.Collections.IDictionary\n    name: IDictionary\n    fullName: System.Collections.IDictionary\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.CreateInstance(IDictionary)\n  commentId: M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\n- uid: System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: CreateInstance(ITypeDescriptorContext, IDictionary)\n  fullName: System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext, System.Collections.IDictionary)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)\n    name: CreateInstance\n    fullName: System.ComponentModel.TypeConverter.CreateInstance\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.IDictionary\n    name: IDictionary\n    fullName: System.Collections.IDictionary\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)\n    name: CreateInstance\n    fullName: System.ComponentModel.TypeConverter.CreateInstance\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.IDictionary\n    name: IDictionary\n    fullName: System.Collections.IDictionary\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary)\n  commentId: M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)\n- uid: System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: GetConvertFromException(Object)\n  fullName: System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)\n    name: GetConvertFromException\n    fullName: System.ComponentModel.TypeConverter.GetConvertFromException\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)\n    name: GetConvertFromException\n    fullName: System.ComponentModel.TypeConverter.GetConvertFromException\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetConvertFromException(Object)\n  commentId: M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)\n- uid: System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: GetConvertToException(Object, Type)\n  fullName: System.ComponentModel.TypeConverter.GetConvertToException(System.Object, System.Type)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)\n    name: GetConvertToException\n    fullName: System.ComponentModel.TypeConverter.GetConvertToException\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)\n    name: GetConvertToException\n    fullName: System.ComponentModel.TypeConverter.GetConvertToException\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetConvertToException(Object, Type)\n  commentId: M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)\n- uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported\n  parent: System.ComponentModel.TypeConverter\n  isExternal: false\n  name: GetCreateInstanceSupported()\n  fullName: System.ComponentModel.TypeConverter.GetCreateInstanceSupported()\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported\n    name: GetCreateInstanceSupported\n    fullName: System.ComponentModel.TypeConverter.GetCreateInstanceSupported\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported\n    name: GetCreateInstanceSupported\n    fullName: System.ComponentModel.TypeConverter.GetCreateInstanceSupported\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetCreateInstanceSupported()\n  commentId: M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported\n- uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: false\n  name: GetCreateInstanceSupported(ITypeDescriptorContext)\n  fullName: System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)\n    name: GetCreateInstanceSupported\n    fullName: System.ComponentModel.TypeConverter.GetCreateInstanceSupported\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)\n    name: GetCreateInstanceSupported\n    fullName: System.ComponentModel.TypeConverter.GetCreateInstanceSupported\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext)\n  commentId: M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)\n- uid: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: GetProperties(ITypeDescriptorContext, Object)\n  fullName: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)\n    name: GetProperties\n    fullName: System.ComponentModel.TypeConverter.GetProperties\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)\n    name: GetProperties\n    fullName: System.ComponentModel.TypeConverter.GetProperties\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetProperties(ITypeDescriptorContext, Object)\n  commentId: M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)\n- uid: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: GetProperties(ITypeDescriptorContext, Object, Attribute[])\n  fullName: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[])\n  fullname.vb: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute())\n  name.vb: GetProperties(ITypeDescriptorContext, Object, Attribute())\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])\n    name: GetProperties\n    fullName: System.ComponentModel.TypeConverter.GetProperties\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Attribute\n    name: Attribute\n    fullName: System.Attribute\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])\n    name: GetProperties\n    fullName: System.ComponentModel.TypeConverter.GetProperties\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Attribute\n    name: Attribute\n    fullName: System.Attribute\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[])\n  nameWithType.vb: TypeConverter.GetProperties(ITypeDescriptorContext, Object, Attribute())\n  commentId: M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])\n- uid: System.ComponentModel.TypeConverter.GetProperties(System.Object)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: GetProperties(Object)\n  fullName: System.ComponentModel.TypeConverter.GetProperties(System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetProperties(System.Object)\n    name: GetProperties\n    fullName: System.ComponentModel.TypeConverter.GetProperties\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetProperties(System.Object)\n    name: GetProperties\n    fullName: System.ComponentModel.TypeConverter.GetProperties\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetProperties(Object)\n  commentId: M:System.ComponentModel.TypeConverter.GetProperties(System.Object)\n- uid: System.ComponentModel.TypeConverter.GetPropertiesSupported\n  parent: System.ComponentModel.TypeConverter\n  isExternal: false\n  name: GetPropertiesSupported()\n  fullName: System.ComponentModel.TypeConverter.GetPropertiesSupported()\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetPropertiesSupported\n    name: GetPropertiesSupported\n    fullName: System.ComponentModel.TypeConverter.GetPropertiesSupported\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetPropertiesSupported\n    name: GetPropertiesSupported\n    fullName: System.ComponentModel.TypeConverter.GetPropertiesSupported\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetPropertiesSupported()\n  commentId: M:System.ComponentModel.TypeConverter.GetPropertiesSupported\n- uid: System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: false\n  name: GetPropertiesSupported(ITypeDescriptorContext)\n  fullName: System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)\n    name: GetPropertiesSupported\n    fullName: System.ComponentModel.TypeConverter.GetPropertiesSupported\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)\n    name: GetPropertiesSupported\n    fullName: System.ComponentModel.TypeConverter.GetPropertiesSupported\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetPropertiesSupported(ITypeDescriptorContext)\n  commentId: M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)\n- uid: System.ComponentModel.TypeConverter.GetStandardValues\n  parent: System.ComponentModel.TypeConverter\n  isExternal: false\n  name: GetStandardValues()\n  fullName: System.ComponentModel.TypeConverter.GetStandardValues()\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetStandardValues\n    name: GetStandardValues\n    fullName: System.ComponentModel.TypeConverter.GetStandardValues\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetStandardValues\n    name: GetStandardValues\n    fullName: System.ComponentModel.TypeConverter.GetStandardValues\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetStandardValues()\n  commentId: M:System.ComponentModel.TypeConverter.GetStandardValues\n- uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive\n  parent: System.ComponentModel.TypeConverter\n  isExternal: false\n  name: GetStandardValuesExclusive()\n  fullName: System.ComponentModel.TypeConverter.GetStandardValuesExclusive()\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive\n    name: GetStandardValuesExclusive\n    fullName: System.ComponentModel.TypeConverter.GetStandardValuesExclusive\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive\n    name: GetStandardValuesExclusive\n    fullName: System.ComponentModel.TypeConverter.GetStandardValuesExclusive\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetStandardValuesExclusive()\n  commentId: M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive\n- uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported\n  parent: System.ComponentModel.TypeConverter\n  isExternal: false\n  name: GetStandardValuesSupported()\n  fullName: System.ComponentModel.TypeConverter.GetStandardValuesSupported()\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported\n    name: GetStandardValuesSupported\n    fullName: System.ComponentModel.TypeConverter.GetStandardValuesSupported\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported\n    name: GetStandardValuesSupported\n    fullName: System.ComponentModel.TypeConverter.GetStandardValuesSupported\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetStandardValuesSupported()\n  commentId: M:System.ComponentModel.TypeConverter.GetStandardValuesSupported\n- uid: System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: IsValid(ITypeDescriptorContext, Object)\n  fullName: System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext, System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)\n    name: IsValid\n    fullName: System.ComponentModel.TypeConverter.IsValid\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)\n    name: IsValid\n    fullName: System.ComponentModel.TypeConverter.IsValid\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.IsValid(ITypeDescriptorContext, Object)\n  commentId: M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)\n- uid: System.ComponentModel.TypeConverter.IsValid(System.Object)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: IsValid(Object)\n  fullName: System.ComponentModel.TypeConverter.IsValid(System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.IsValid(System.Object)\n    name: IsValid\n    fullName: System.ComponentModel.TypeConverter.IsValid\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.IsValid(System.Object)\n    name: IsValid\n    fullName: System.ComponentModel.TypeConverter.IsValid\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.IsValid(Object)\n  commentId: M:System.ComponentModel.TypeConverter.IsValid(System.Object)\n- uid: System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: SortProperties(PropertyDescriptorCollection, String[])\n  fullName: System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection, System.String[])\n  fullname.vb: System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection, System.String())\n  name.vb: SortProperties(PropertyDescriptorCollection, String())\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])\n    name: SortProperties\n    fullName: System.ComponentModel.TypeConverter.SortProperties\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.PropertyDescriptorCollection\n    name: PropertyDescriptorCollection\n    fullName: System.ComponentModel.PropertyDescriptorCollection\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])\n    name: SortProperties\n    fullName: System.ComponentModel.TypeConverter.SortProperties\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.PropertyDescriptorCollection\n    name: PropertyDescriptorCollection\n    fullName: System.ComponentModel.PropertyDescriptorCollection\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.SortProperties(PropertyDescriptorCollection, String[])\n  nameWithType.vb: TypeConverter.SortProperties(PropertyDescriptorCollection, String())\n  commentId: M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Type[]\n  name: Type[]\n  fullName: System.Type[]\n  fullname.vb: System.Type()\n  name.vb: Type()\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ()\n    fullName: ()\n  nameWithType: Type[]\n  nameWithType.vb: Type()\n- uid: System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: CanConvertFrom(ITypeDescriptorContext, Type)\n  fullName: System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)\n    name: CanConvertFrom\n    fullName: System.ComponentModel.TypeConverter.CanConvertFrom\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)\n    name: CanConvertFrom\n    fullName: System.ComponentModel.TypeConverter.CanConvertFrom\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.CanConvertFrom(ITypeDescriptorContext, Type)\n  commentId: M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)\n- uid: System.ComponentModel.ITypeDescriptorContext\n  parent: System.ComponentModel\n  isExternal: false\n  name: ITypeDescriptorContext\n  fullName: System.ComponentModel.ITypeDescriptorContext\n  nameWithType: ITypeDescriptorContext\n  commentId: T:System.ComponentModel.ITypeDescriptorContext\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: CanConvertTo(ITypeDescriptorContext, Type)\n  fullName: System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)\n    name: CanConvertTo\n    fullName: System.ComponentModel.TypeConverter.CanConvertTo\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)\n    name: CanConvertTo\n    fullName: System.ComponentModel.TypeConverter.CanConvertTo\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.CanConvertTo(ITypeDescriptorContext, Type)\n  commentId: M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)\n- uid: System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)\n  fullName: System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n    name: ConvertFrom\n    fullName: System.ComponentModel.TypeConverter.ConvertFrom\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Globalization.CultureInfo\n    name: CultureInfo\n    fullName: System.Globalization.CultureInfo\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n    name: ConvertFrom\n    fullName: System.ComponentModel.TypeConverter.ConvertFrom\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Globalization.CultureInfo\n    name: CultureInfo\n    fullName: System.Globalization.CultureInfo\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: false\n  name: CultureInfo\n  fullName: System.Globalization.CultureInfo\n  nameWithType: CultureInfo\n  commentId: T:System.Globalization.CultureInfo\n- uid: System.Globalization\n  isExternal: false\n  name: System.Globalization\n  fullName: System.Globalization\n  nameWithType: System.Globalization\n  commentId: N:System.Globalization\n- uid: System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)\n  fullName: System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)\n    name: ConvertTo\n    fullName: System.ComponentModel.TypeConverter.ConvertTo\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Globalization.CultureInfo\n    name: CultureInfo\n    fullName: System.Globalization.CultureInfo\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)\n    name: ConvertTo\n    fullName: System.ComponentModel.TypeConverter.ConvertTo\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Globalization.CultureInfo\n    name: CultureInfo\n    fullName: System.Globalization.CultureInfo\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)\n- uid: System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: false\n  name: GetStandardValues(ITypeDescriptorContext)\n  fullName: System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n    name: GetStandardValues\n    fullName: System.ComponentModel.TypeConverter.GetStandardValues\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n    name: GetStandardValues\n    fullName: System.ComponentModel.TypeConverter.GetStandardValues\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetStandardValues(ITypeDescriptorContext)\n  commentId: M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n- uid: System.ComponentModel.TypeConverter.StandardValuesCollection\n  parent: System.ComponentModel\n  isExternal: false\n  name: TypeConverter.StandardValuesCollection\n  fullName: System.ComponentModel.TypeConverter.StandardValuesCollection\n  nameWithType: TypeConverter.StandardValuesCollection\n  commentId: T:System.ComponentModel.TypeConverter.StandardValuesCollection\n- uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: false\n  name: GetStandardValuesExclusive(ITypeDescriptorContext)\n  fullName: System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n    name: GetStandardValuesExclusive\n    fullName: System.ComponentModel.TypeConverter.GetStandardValuesExclusive\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n    name: GetStandardValuesExclusive\n    fullName: System.ComponentModel.TypeConverter.GetStandardValuesExclusive\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext)\n  commentId: M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n- uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: false\n  name: GetStandardValuesSupported(ITypeDescriptorContext)\n  fullName: System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n    name: GetStandardValuesSupported\n    fullName: System.ComponentModel.TypeConverter.GetStandardValuesSupported\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n    name: GetStandardValuesSupported\n    fullName: System.ComponentModel.TypeConverter.GetStandardValuesSupported\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext)\n  commentId: M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n"}